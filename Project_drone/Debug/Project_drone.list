
Project_drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3a8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000708  0800b538  0800b538  0000c538  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc40  0800bc40  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc40  0800bc40  0000cc40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc48  0800bc48  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc48  0800bc48  0000cc48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bc4c  0800bc4c  0000cc4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800bc50  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1d8  2**0
                  CONTENTS
 10 .bss          000003b0  200001d8  200001d8  0000d1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000588  20000588  0000d1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000140db  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000417c  00000000  00000000  000212e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001488  00000000  00000000  00025460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f6d  00000000  00000000  000268e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00007df9  00000000  00000000  00027855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000199e3  00000000  00000000  0002f64e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da653  00000000  00000000  00049031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00123684  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006678  00000000  00000000  001236c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  00129d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b520 	.word	0x0800b520

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800b520 	.word	0x0800b520

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	601a      	str	r2, [r3, #0]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f023 0210 	bic.w	r2, r3, #16
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	605a      	str	r2, [r3, #4]
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(const SPI_TypeDef *SPIx)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d101      	bne.n	8000ef6 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e000      	b.n	8000ef8 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d101      	bne.n	8000f1c <LL_SPI_IsActiveFlag_TXE+0x18>
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e000      	b.n	8000f1e <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	330c      	adds	r3, #12
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b2db      	uxtb	r3, r3
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b085      	sub	sp, #20
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	330c      	adds	r3, #12
 8000f56:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	78fa      	ldrb	r2, [r7, #3]
 8000f5c:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000f5e:	bf00      	nop
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	691a      	ldr	r2, [r3, #16]
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	683a      	ldr	r2, [r7, #0]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	bf0c      	ite	eq
 8000f82:	2301      	moveq	r3, #1
 8000f84:	2300      	movne	r3, #0
 8000f86:	b2db      	uxtb	r3, r3
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	619a      	str	r2, [r3, #24]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	041a      	lsls	r2, r3, #16
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	619a      	str	r2, [r3, #24]
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000fd8:	4b08      	ldr	r3, [pc, #32]	@ (8000ffc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000fdc:	4907      	ldr	r1, [pc, #28]	@ (8000ffc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000fe4:	4b05      	ldr	r3, [pc, #20]	@ (8000ffc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fe6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4013      	ands	r3, r2
 8000fec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fee:	68fb      	ldr	r3, [r7, #12]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	40023800 	.word	0x40023800

08001000 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001008:	4b08      	ldr	r3, [pc, #32]	@ (800102c <LL_APB1_GRP1_EnableClock+0x2c>)
 800100a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800100c:	4907      	ldr	r1, [pc, #28]	@ (800102c <LL_APB1_GRP1_EnableClock+0x2c>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4313      	orrs	r3, r2
 8001012:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001014:	4b05      	ldr	r3, [pc, #20]	@ (800102c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001016:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4013      	ands	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800101e:	68fb      	ldr	r3, [r7, #12]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	40023800 	.word	0x40023800

08001030 <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b090      	sub	sp, #64	@ 0x40
 8001034:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001036:	f107 0318 	add.w	r3, r7, #24
 800103a:	2228      	movs	r2, #40	@ 0x28
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f007 fd88 	bl	8008b54 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	463b      	mov	r3, r7
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
 8001050:	611a      	str	r2, [r3, #16]
 8001052:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001054:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001058:	f7ff ffd2 	bl	8001000 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800105c:	2002      	movs	r0, #2
 800105e:	f7ff ffb7 	bl	8000fd0 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001062:	2004      	movs	r0, #4
 8001064:	f7ff ffb4 	bl	8000fd0 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001068:	2001      	movs	r0, #1
 800106a:	f7ff ffb1 	bl	8000fd0 <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800106e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001072:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001074:	2302      	movs	r3, #2
 8001076:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001078:	2303      	movs	r3, #3
 800107a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001084:	2305      	movs	r3, #5
 8001086:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001088:	463b      	mov	r3, r7
 800108a:	4619      	mov	r1, r3
 800108c:	4841      	ldr	r0, [pc, #260]	@ (8001194 <BNO080_GPIO_SPI_Initialization+0x164>)
 800108e:	f005 fef4 	bl	8006e7a <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001096:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800109a:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800109c:	2300      	movs	r3, #0
 800109e:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80010a0:	2302      	movs	r3, #2
 80010a2:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80010a4:	2301      	movs	r3, #1
 80010a6:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80010a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80010ae:	2318      	movs	r3, #24
 80010b0:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80010b2:	2300      	movs	r3, #0
 80010b4:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 80010ba:	230a      	movs	r3, #10
 80010bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 80010be:	f107 0318 	add.w	r3, r7, #24
 80010c2:	4619      	mov	r1, r3
 80010c4:	4834      	ldr	r0, [pc, #208]	@ (8001198 <BNO080_GPIO_SPI_Initialization+0x168>)
 80010c6:	f006 f8b6 	bl	8007236 <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80010ca:	2100      	movs	r1, #0
 80010cc:	4832      	ldr	r0, [pc, #200]	@ (8001198 <BNO080_GPIO_SPI_Initialization+0x168>)
 80010ce:	f7ff fef3 	bl	8000eb8 <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 80010d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010d6:	4831      	ldr	r0, [pc, #196]	@ (800119c <BNO080_GPIO_SPI_Initialization+0x16c>)
 80010d8:	f7ff ff6a 	bl	8000fb0 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 80010dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010e0:	482c      	ldr	r0, [pc, #176]	@ (8001194 <BNO080_GPIO_SPI_Initialization+0x164>)
 80010e2:	f7ff ff65 	bl	8000fb0 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 80010e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010ea:	482d      	ldr	r0, [pc, #180]	@ (80011a0 <BNO080_GPIO_SPI_Initialization+0x170>)
 80010ec:	f7ff ff60 	bl	8000fb0 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 80010f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010f4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010f6:	2301      	movs	r3, #1
 80010f8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80010fa:	2303      	movs	r3, #3
 80010fc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 8001106:	463b      	mov	r3, r7
 8001108:	4619      	mov	r1, r3
 800110a:	4822      	ldr	r0, [pc, #136]	@ (8001194 <BNO080_GPIO_SPI_Initialization+0x164>)
 800110c:	f005 feb5 	bl	8006e7a <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 8001110:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001114:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001116:	2301      	movs	r3, #1
 8001118:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 8001126:	463b      	mov	r3, r7
 8001128:	4619      	mov	r1, r3
 800112a:	481c      	ldr	r0, [pc, #112]	@ (800119c <BNO080_GPIO_SPI_Initialization+0x16c>)
 800112c:	f005 fea5 	bl	8006e7a <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 8001130:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001134:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001136:	2301      	movs	r3, #1
 8001138:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800113a:	2303      	movs	r3, #3
 800113c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 8001146:	463b      	mov	r3, r7
 8001148:	4619      	mov	r1, r3
 800114a:	4815      	ldr	r0, [pc, #84]	@ (80011a0 <BNO080_GPIO_SPI_Initialization+0x170>)
 800114c:	f005 fe95 	bl	8006e7a <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 8001150:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001154:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800115a:	2301      	movs	r3, #1
 800115c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	480e      	ldr	r0, [pc, #56]	@ (800119c <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001164:	f005 fe89 	bl	8006e7a <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 8001168:	480b      	ldr	r0, [pc, #44]	@ (8001198 <BNO080_GPIO_SPI_Initialization+0x168>)
 800116a:	f7ff fe95 	bl	8000e98 <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 800116e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001172:	4808      	ldr	r0, [pc, #32]	@ (8001194 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001174:	f7ff ff0e 	bl	8000f94 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 8001178:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800117c:	4808      	ldr	r0, [pc, #32]	@ (80011a0 <BNO080_GPIO_SPI_Initialization+0x170>)
 800117e:	f7ff ff09 	bl	8000f94 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 8001182:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001186:	4805      	ldr	r0, [pc, #20]	@ (800119c <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001188:	f7ff ff04 	bl	8000f94 <LL_GPIO_SetOutputPin>
}
 800118c:	bf00      	nop
 800118e:	3740      	adds	r7, #64	@ 0x40
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40020400 	.word	0x40020400
 8001198:	40003800 	.word	0x40003800
 800119c:	40020800 	.word	0x40020800
 80011a0:	40020000 	.word	0x40020000

080011a4 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 80011aa:	f7ff ff41 	bl	8001030 <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 80011ae:	482e      	ldr	r0, [pc, #184]	@ (8001268 <BNO080_Initialization+0xc4>)
 80011b0:	f007 fb88 	bl	80088c4 <iprintf>
	
	CHIP_DESELECT(BNO080);
 80011b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011b8:	482c      	ldr	r0, [pc, #176]	@ (800126c <BNO080_Initialization+0xc8>)
 80011ba:	f7ff feeb 	bl	8000f94 <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 80011be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011c2:	482b      	ldr	r0, [pc, #172]	@ (8001270 <BNO080_Initialization+0xcc>)
 80011c4:	f7ff fee6 	bl	8000f94 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 80011c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011cc:	4829      	ldr	r0, [pc, #164]	@ (8001274 <BNO080_Initialization+0xd0>)
 80011ce:	f7ff feef 	bl	8000fb0 <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 80011d2:	20c8      	movs	r0, #200	@ 0xc8
 80011d4:	f003 fcea 	bl	8004bac <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 80011d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011dc:	4825      	ldr	r0, [pc, #148]	@ (8001274 <BNO080_Initialization+0xd0>)
 80011de:	f7ff fed9 	bl	8000f94 <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 80011e2:	f000 fc53 	bl	8001a8c <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 80011e6:	f000 fc51 	bl	8001a8c <BNO080_waitForSPI>
	BNO080_receivePacket();
 80011ea:	f000 fc73 	bl	8001ad4 <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 80011ee:	f000 fc4d 	bl	8001a8c <BNO080_waitForSPI>
	BNO080_receivePacket();
 80011f2:	f000 fc6f 	bl	8001ad4 <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 80011f6:	4b20      	ldr	r3, [pc, #128]	@ (8001278 <BNO080_Initialization+0xd4>)
 80011f8:	22f9      	movs	r2, #249	@ 0xf9
 80011fa:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 80011fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001278 <BNO080_Initialization+0xd4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 8001202:	2102      	movs	r1, #2
 8001204:	2002      	movs	r0, #2
 8001206:	f000 fcd5 	bl	8001bb4 <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 800120a:	f000 fc3f 	bl	8001a8c <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 800120e:	f000 fc61 	bl	8001ad4 <BNO080_receivePacket>
 8001212:	4603      	mov	r3, r0
 8001214:	2b01      	cmp	r3, #1
 8001216:	d11b      	bne.n	8001250 <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 8001218:	4b18      	ldr	r3, [pc, #96]	@ (800127c <BNO080_Initialization+0xd8>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	4b17      	ldr	r3, [pc, #92]	@ (800127c <BNO080_Initialization+0xd8>)
 8001220:	785b      	ldrb	r3, [r3, #1]
 8001222:	461a      	mov	r2, r3
 8001224:	4b15      	ldr	r3, [pc, #84]	@ (800127c <BNO080_Initialization+0xd8>)
 8001226:	789b      	ldrb	r3, [r3, #2]
 8001228:	4618      	mov	r0, r3
 800122a:	4b14      	ldr	r3, [pc, #80]	@ (800127c <BNO080_Initialization+0xd8>)
 800122c:	78db      	ldrb	r3, [r3, #3]
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	4603      	mov	r3, r0
 8001232:	4813      	ldr	r0, [pc, #76]	@ (8001280 <BNO080_Initialization+0xdc>)
 8001234:	f007 fb46 	bl	80088c4 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8001238:	4b0f      	ldr	r3, [pc, #60]	@ (8001278 <BNO080_Initialization+0xd4>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2bf8      	cmp	r3, #248	@ 0xf8
 800123e:	d107      	bne.n	8001250 <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 8001240:	4b0d      	ldr	r3, [pc, #52]	@ (8001278 <BNO080_Initialization+0xd4>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4619      	mov	r1, r3
 8001246:	480f      	ldr	r0, [pc, #60]	@ (8001284 <BNO080_Initialization+0xe0>)
 8001248:	f007 fb3c 	bl	80088c4 <iprintf>
			return (0);
 800124c:	2300      	movs	r3, #0
 800124e:	e007      	b.n	8001260 <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 8001250:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <BNO080_Initialization+0xd4>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	22f8      	movs	r2, #248	@ 0xf8
 8001256:	4619      	mov	r1, r3
 8001258:	480b      	ldr	r0, [pc, #44]	@ (8001288 <BNO080_Initialization+0xe4>)
 800125a:	f007 fb33 	bl	80088c4 <iprintf>
	return (1); //Something went wrong
 800125e:	2301      	movs	r3, #1
}
 8001260:	4618      	mov	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	0800b538 	.word	0x0800b538
 800126c:	40020400 	.word	0x40020400
 8001270:	40020000 	.word	0x40020000
 8001274:	40020800 	.word	0x40020800
 8001278:	200001f8 	.word	0x200001f8
 800127c:	200001f4 	.word	0x200001f4
 8001280:	0800b54c 	.word	0x0800b54c
 8001284:	0800b564 	.word	0x0800b564
 8001288:	0800b584 	.word	0x0800b584

0800128c <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 8001296:	bf00      	nop
 8001298:	480c      	ldr	r0, [pc, #48]	@ (80012cc <SPI2_SendByte+0x40>)
 800129a:	f7ff fe33 	bl	8000f04 <LL_SPI_IsActiveFlag_TXE>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d0f9      	beq.n	8001298 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	4619      	mov	r1, r3
 80012a8:	4808      	ldr	r0, [pc, #32]	@ (80012cc <SPI2_SendByte+0x40>)
 80012aa:	f7ff fe4c 	bl	8000f46 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 80012ae:	bf00      	nop
 80012b0:	4806      	ldr	r0, [pc, #24]	@ (80012cc <SPI2_SendByte+0x40>)
 80012b2:	f7ff fe14 	bl	8000ede <LL_SPI_IsActiveFlag_RXNE>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d0f9      	beq.n	80012b0 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 80012bc:	4803      	ldr	r0, [pc, #12]	@ (80012cc <SPI2_SendByte+0x40>)
 80012be:	f7ff fe34 	bl	8000f2a <LL_SPI_ReceiveData8>
 80012c2:	4603      	mov	r3, r0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40003800 	.word	0x40003800

080012d0 <BNO080_dataAvailable>:
//////////////////////////////////////////////////////////////////////////

//Updates the latest variables if possible
//Returns false if new readings are not available
int BNO080_dataAvailable(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is NULL, then we'll rely on BNO080_receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 80012d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012d8:	4811      	ldr	r0, [pc, #68]	@ (8001320 <BNO080_dataAvailable+0x50>)
 80012da:	f7ff fe46 	bl	8000f6a <LL_GPIO_IsInputPinSet>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d101      	bne.n	80012e8 <BNO080_dataAvailable+0x18>
		return (0);
 80012e4:	2300      	movs	r3, #0
 80012e6:	e019      	b.n	800131c <BNO080_dataAvailable+0x4c>

	if (BNO080_receivePacket() == 1)
 80012e8:	f000 fbf4 	bl	8001ad4 <BNO080_receivePacket>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d113      	bne.n	800131a <BNO080_dataAvailable+0x4a>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 80012f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001324 <BNO080_dataAvailable+0x54>)
 80012f4:	789b      	ldrb	r3, [r3, #2]
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	d107      	bne.n	800130a <BNO080_dataAvailable+0x3a>
 80012fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <BNO080_dataAvailable+0x58>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2bfb      	cmp	r3, #251	@ 0xfb
 8001300:	d103      	bne.n	800130a <BNO080_dataAvailable+0x3a>
		{
			BNO080_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8001302:	f000 f82f 	bl	8001364 <BNO080_parseInputReport>
			return (1);
 8001306:	2301      	movs	r3, #1
 8001308:	e008      	b.n	800131c <BNO080_dataAvailable+0x4c>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 800130a:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <BNO080_dataAvailable+0x54>)
 800130c:	789b      	ldrb	r3, [r3, #2]
 800130e:	2b02      	cmp	r3, #2
 8001310:	d103      	bne.n	800131a <BNO080_dataAvailable+0x4a>
		{
			BNO080_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 8001312:	f000 f80b 	bl	800132c <BNO080_parseCommandReport>
			return (1);
 8001316:	2301      	movs	r3, #1
 8001318:	e000      	b.n	800131c <BNO080_dataAvailable+0x4c>
		}
	}
	return (0);
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40020800 	.word	0x40020800
 8001324:	200001f4 	.word	0x200001f4
 8001328:	200001f8 	.word	0x200001f8

0800132c <BNO080_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO080_parseCommandReport(void)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 8001332:	4b0a      	ldr	r3, [pc, #40]	@ (800135c <BNO080_parseCommandReport+0x30>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2bf1      	cmp	r3, #241	@ 0xf1
 8001338:	d109      	bne.n	800134e <BNO080_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 800133a:	4b08      	ldr	r3, [pc, #32]	@ (800135c <BNO080_parseCommandReport+0x30>)
 800133c:	789b      	ldrb	r3, [r3, #2]
 800133e:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	2b07      	cmp	r3, #7
 8001344:	d103      	bne.n	800134e <BNO080_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 8001346:	4b05      	ldr	r3, [pc, #20]	@ (800135c <BNO080_parseCommandReport+0x30>)
 8001348:	795a      	ldrb	r2, [r3, #5]
 800134a:	4b05      	ldr	r3, [pc, #20]	@ (8001360 <BNO080_parseCommandReport+0x34>)
 800134c:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	200001f8 	.word	0x200001f8
 8001360:	200002bc 	.word	0x200002bc

08001364 <BNO080_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO080_parseInputReport(void)
{
 8001364:	b480      	push	{r7}
 8001366:	b087      	sub	sp, #28
 8001368:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 800136a:	4b98      	ldr	r3, [pc, #608]	@ (80015cc <BNO080_parseInputReport+0x268>)
 800136c:	785b      	ldrb	r3, [r3, #1]
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	b21a      	sxth	r2, r3
 8001372:	4b96      	ldr	r3, [pc, #600]	@ (80015cc <BNO080_parseInputReport+0x268>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	b21b      	sxth	r3, r3
 8001378:	4313      	orrs	r3, r2
 800137a:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 800137c:	8a3b      	ldrh	r3, [r7, #16]
 800137e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001382:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8001384:	8a3b      	ldrh	r3, [r7, #16]
 8001386:	3b04      	subs	r3, #4
 8001388:	b29b      	uxth	r3, r3
 800138a:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 800138c:	4b90      	ldr	r3, [pc, #576]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 800138e:	791b      	ldrb	r3, [r3, #4]
 8001390:	061a      	lsls	r2, r3, #24
 8001392:	4b8f      	ldr	r3, [pc, #572]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 8001394:	78db      	ldrb	r3, [r3, #3]
 8001396:	041b      	lsls	r3, r3, #16
 8001398:	431a      	orrs	r2, r3
 800139a:	4b8d      	ldr	r3, [pc, #564]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 800139c:	789b      	ldrb	r3, [r3, #2]
 800139e:	021b      	lsls	r3, r3, #8
 80013a0:	4313      	orrs	r3, r2
 80013a2:	4a8b      	ldr	r2, [pc, #556]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 80013a4:	7852      	ldrb	r2, [r2, #1]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	4a8a      	ldr	r2, [pc, #552]	@ (80015d4 <BNO080_parseInputReport+0x270>)
 80013aa:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 80013ac:	4b88      	ldr	r3, [pc, #544]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 80013ae:	79db      	ldrb	r3, [r3, #7]
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 80013b6:	4b86      	ldr	r3, [pc, #536]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 80013b8:	7a9b      	ldrb	r3, [r3, #10]
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	b21a      	sxth	r2, r3
 80013be:	4b84      	ldr	r3, [pc, #528]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 80013c0:	7a5b      	ldrb	r3, [r3, #9]
 80013c2:	b21b      	sxth	r3, r3
 80013c4:	4313      	orrs	r3, r2
 80013c6:	b21b      	sxth	r3, r3
 80013c8:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 80013ca:	4b81      	ldr	r3, [pc, #516]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 80013cc:	7b1b      	ldrb	r3, [r3, #12]
 80013ce:	021b      	lsls	r3, r3, #8
 80013d0:	b21a      	sxth	r2, r3
 80013d2:	4b7f      	ldr	r3, [pc, #508]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 80013d4:	7adb      	ldrb	r3, [r3, #11]
 80013d6:	b21b      	sxth	r3, r3
 80013d8:	4313      	orrs	r3, r2
 80013da:	b21b      	sxth	r3, r3
 80013dc:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 80013de:	4b7c      	ldr	r3, [pc, #496]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 80013e0:	7b9b      	ldrb	r3, [r3, #14]
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	b21a      	sxth	r2, r3
 80013e6:	4b7a      	ldr	r3, [pc, #488]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 80013e8:	7b5b      	ldrb	r3, [r3, #13]
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	4313      	orrs	r3, r2
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 80013fa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80013fe:	2b0e      	cmp	r3, #14
 8001400:	dd09      	ble.n	8001416 <BNO080_parseInputReport+0xb2>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 8001402:	4b73      	ldr	r3, [pc, #460]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 8001404:	7c1b      	ldrb	r3, [r3, #16]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	b21a      	sxth	r2, r3
 800140a:	4b71      	ldr	r3, [pc, #452]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 800140c:	7bdb      	ldrb	r3, [r3, #15]
 800140e:	b21b      	sxth	r3, r3
 8001410:	4313      	orrs	r3, r2
 8001412:	b21b      	sxth	r3, r3
 8001414:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 8001416:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800141a:	2b10      	cmp	r3, #16
 800141c:	dd09      	ble.n	8001432 <BNO080_parseInputReport+0xce>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 800141e:	4b6c      	ldr	r3, [pc, #432]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 8001420:	7c9b      	ldrb	r3, [r3, #18]
 8001422:	021b      	lsls	r3, r3, #8
 8001424:	b21a      	sxth	r2, r3
 8001426:	4b6a      	ldr	r3, [pc, #424]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 8001428:	7c5b      	ldrb	r3, [r3, #17]
 800142a:	b21b      	sxth	r3, r3
 800142c:	4313      	orrs	r3, r2
 800142e:	b21b      	sxth	r3, r3
 8001430:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 8001432:	4b67      	ldr	r3, [pc, #412]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 8001434:	795b      	ldrb	r3, [r3, #5]
 8001436:	2b1e      	cmp	r3, #30
 8001438:	dc46      	bgt.n	80014c8 <BNO080_parseInputReport+0x164>
 800143a:	2b00      	cmp	r3, #0
 800143c:	f340 80bf 	ble.w	80015be <BNO080_parseInputReport+0x25a>
 8001440:	3b01      	subs	r3, #1
 8001442:	2b1d      	cmp	r3, #29
 8001444:	f200 80bb 	bhi.w	80015be <BNO080_parseInputReport+0x25a>
 8001448:	a201      	add	r2, pc, #4	@ (adr r2, 8001450 <BNO080_parseInputReport+0xec>)
 800144a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800144e:	bf00      	nop
 8001450:	080014cf 	.word	0x080014cf
 8001454:	08001507 	.word	0x08001507
 8001458:	08001523 	.word	0x08001523
 800145c:	080014eb 	.word	0x080014eb
 8001460:	0800153f 	.word	0x0800153f
 8001464:	080015bf 	.word	0x080015bf
 8001468:	080015bf 	.word	0x080015bf
 800146c:	0800153f 	.word	0x0800153f
 8001470:	080015bf 	.word	0x080015bf
 8001474:	080015bf 	.word	0x080015bf
 8001478:	080015bf 	.word	0x080015bf
 800147c:	080015bf 	.word	0x080015bf
 8001480:	080015bf 	.word	0x080015bf
 8001484:	080015bf 	.word	0x080015bf
 8001488:	080015bf 	.word	0x080015bf
 800148c:	080015bf 	.word	0x080015bf
 8001490:	08001567 	.word	0x08001567
 8001494:	080015bf 	.word	0x080015bf
 8001498:	0800156f 	.word	0x0800156f
 800149c:	080015bf 	.word	0x080015bf
 80014a0:	080015bf 	.word	0x080015bf
 80014a4:	080015bf 	.word	0x080015bf
 80014a8:	080015bf 	.word	0x080015bf
 80014ac:	080015bf 	.word	0x080015bf
 80014b0:	080015bf 	.word	0x080015bf
 80014b4:	080015bf 	.word	0x080015bf
 80014b8:	080015bf 	.word	0x080015bf
 80014bc:	080015bf 	.word	0x080015bf
 80014c0:	080015bf 	.word	0x080015bf
 80014c4:	08001579 	.word	0x08001579
 80014c8:	2bf1      	cmp	r3, #241	@ 0xf1
 80014ca:	d06d      	beq.n	80015a8 <BNO080_parseInputReport+0x244>
			//See reference manual to add additional feature reports as needed
		}
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 80014cc:	e077      	b.n	80015be <BNO080_parseInputReport+0x25a>
			accelAccuracy = status;
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	4b41      	ldr	r3, [pc, #260]	@ (80015d8 <BNO080_parseInputReport+0x274>)
 80014d4:	801a      	strh	r2, [r3, #0]
			rawAccelX = data1;
 80014d6:	4a41      	ldr	r2, [pc, #260]	@ (80015dc <BNO080_parseInputReport+0x278>)
 80014d8:	89bb      	ldrh	r3, [r7, #12]
 80014da:	8013      	strh	r3, [r2, #0]
			rawAccelY = data2;
 80014dc:	4a40      	ldr	r2, [pc, #256]	@ (80015e0 <BNO080_parseInputReport+0x27c>)
 80014de:	897b      	ldrh	r3, [r7, #10]
 80014e0:	8013      	strh	r3, [r2, #0]
			rawAccelZ = data3;
 80014e2:	4a40      	ldr	r2, [pc, #256]	@ (80015e4 <BNO080_parseInputReport+0x280>)
 80014e4:	893b      	ldrh	r3, [r7, #8]
 80014e6:	8013      	strh	r3, [r2, #0]
			break;
 80014e8:	e069      	b.n	80015be <BNO080_parseInputReport+0x25a>
			accelLinAccuracy = status;
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	4b3e      	ldr	r3, [pc, #248]	@ (80015e8 <BNO080_parseInputReport+0x284>)
 80014f0:	801a      	strh	r2, [r3, #0]
			rawLinAccelX = data1;
 80014f2:	4a3e      	ldr	r2, [pc, #248]	@ (80015ec <BNO080_parseInputReport+0x288>)
 80014f4:	89bb      	ldrh	r3, [r7, #12]
 80014f6:	8013      	strh	r3, [r2, #0]
			rawLinAccelY = data2;
 80014f8:	4a3d      	ldr	r2, [pc, #244]	@ (80015f0 <BNO080_parseInputReport+0x28c>)
 80014fa:	897b      	ldrh	r3, [r7, #10]
 80014fc:	8013      	strh	r3, [r2, #0]
			rawLinAccelZ = data3;
 80014fe:	4a3d      	ldr	r2, [pc, #244]	@ (80015f4 <BNO080_parseInputReport+0x290>)
 8001500:	893b      	ldrh	r3, [r7, #8]
 8001502:	8013      	strh	r3, [r2, #0]
			break;
 8001504:	e05b      	b.n	80015be <BNO080_parseInputReport+0x25a>
			gyroAccuracy = status;
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	b29a      	uxth	r2, r3
 800150a:	4b3b      	ldr	r3, [pc, #236]	@ (80015f8 <BNO080_parseInputReport+0x294>)
 800150c:	801a      	strh	r2, [r3, #0]
			rawGyroX = data1;
 800150e:	4a3b      	ldr	r2, [pc, #236]	@ (80015fc <BNO080_parseInputReport+0x298>)
 8001510:	89bb      	ldrh	r3, [r7, #12]
 8001512:	8013      	strh	r3, [r2, #0]
			rawGyroY = data2;
 8001514:	4a3a      	ldr	r2, [pc, #232]	@ (8001600 <BNO080_parseInputReport+0x29c>)
 8001516:	897b      	ldrh	r3, [r7, #10]
 8001518:	8013      	strh	r3, [r2, #0]
			rawGyroZ = data3;
 800151a:	4a3a      	ldr	r2, [pc, #232]	@ (8001604 <BNO080_parseInputReport+0x2a0>)
 800151c:	893b      	ldrh	r3, [r7, #8]
 800151e:	8013      	strh	r3, [r2, #0]
			break;
 8001520:	e04d      	b.n	80015be <BNO080_parseInputReport+0x25a>
			magAccuracy = status;
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	b29a      	uxth	r2, r3
 8001526:	4b38      	ldr	r3, [pc, #224]	@ (8001608 <BNO080_parseInputReport+0x2a4>)
 8001528:	801a      	strh	r2, [r3, #0]
			rawMagX = data1;
 800152a:	4a38      	ldr	r2, [pc, #224]	@ (800160c <BNO080_parseInputReport+0x2a8>)
 800152c:	89bb      	ldrh	r3, [r7, #12]
 800152e:	8013      	strh	r3, [r2, #0]
			rawMagY = data2;
 8001530:	4a37      	ldr	r2, [pc, #220]	@ (8001610 <BNO080_parseInputReport+0x2ac>)
 8001532:	897b      	ldrh	r3, [r7, #10]
 8001534:	8013      	strh	r3, [r2, #0]
			rawMagZ = data3;
 8001536:	4a37      	ldr	r2, [pc, #220]	@ (8001614 <BNO080_parseInputReport+0x2b0>)
 8001538:	893b      	ldrh	r3, [r7, #8]
 800153a:	8013      	strh	r3, [r2, #0]
			break;
 800153c:	e03f      	b.n	80015be <BNO080_parseInputReport+0x25a>
			quatAccuracy = status;
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	b29a      	uxth	r2, r3
 8001542:	4b35      	ldr	r3, [pc, #212]	@ (8001618 <BNO080_parseInputReport+0x2b4>)
 8001544:	801a      	strh	r2, [r3, #0]
			rawQuatI = data1;
 8001546:	4a35      	ldr	r2, [pc, #212]	@ (800161c <BNO080_parseInputReport+0x2b8>)
 8001548:	89bb      	ldrh	r3, [r7, #12]
 800154a:	8013      	strh	r3, [r2, #0]
			rawQuatJ = data2;
 800154c:	4a34      	ldr	r2, [pc, #208]	@ (8001620 <BNO080_parseInputReport+0x2bc>)
 800154e:	897b      	ldrh	r3, [r7, #10]
 8001550:	8013      	strh	r3, [r2, #0]
			rawQuatK = data3;
 8001552:	4a34      	ldr	r2, [pc, #208]	@ (8001624 <BNO080_parseInputReport+0x2c0>)
 8001554:	893b      	ldrh	r3, [r7, #8]
 8001556:	8013      	strh	r3, [r2, #0]
			rawQuatReal = data4;
 8001558:	4a33      	ldr	r2, [pc, #204]	@ (8001628 <BNO080_parseInputReport+0x2c4>)
 800155a:	8afb      	ldrh	r3, [r7, #22]
 800155c:	8013      	strh	r3, [r2, #0]
			rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 800155e:	4a33      	ldr	r2, [pc, #204]	@ (800162c <BNO080_parseInputReport+0x2c8>)
 8001560:	8abb      	ldrh	r3, [r7, #20]
 8001562:	8013      	strh	r3, [r2, #0]
			break;
 8001564:	e02b      	b.n	80015be <BNO080_parseInputReport+0x25a>
			stepCount = data3; //Bytes 8/9
 8001566:	4a32      	ldr	r2, [pc, #200]	@ (8001630 <BNO080_parseInputReport+0x2cc>)
 8001568:	893b      	ldrh	r3, [r7, #8]
 800156a:	8013      	strh	r3, [r2, #0]
			break;
 800156c:	e027      	b.n	80015be <BNO080_parseInputReport+0x25a>
			stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 800156e:	4b18      	ldr	r3, [pc, #96]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 8001570:	7a5a      	ldrb	r2, [r3, #9]
 8001572:	4b30      	ldr	r3, [pc, #192]	@ (8001634 <BNO080_parseInputReport+0x2d0>)
 8001574:	701a      	strb	r2, [r3, #0]
			break;
 8001576:	e022      	b.n	80015be <BNO080_parseInputReport+0x25a>
			activityClassifier = shtpData[5 + 5]; //Most likely state
 8001578:	4b15      	ldr	r3, [pc, #84]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 800157a:	7a9a      	ldrb	r2, [r3, #10]
 800157c:	4b2e      	ldr	r3, [pc, #184]	@ (8001638 <BNO080_parseInputReport+0x2d4>)
 800157e:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001580:	2300      	movs	r3, #0
 8001582:	74fb      	strb	r3, [r7, #19]
 8001584:	e00c      	b.n	80015a0 <BNO080_parseInputReport+0x23c>
				_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 8001586:	7cfb      	ldrb	r3, [r7, #19]
 8001588:	f103 020b 	add.w	r2, r3, #11
 800158c:	4b2b      	ldr	r3, [pc, #172]	@ (800163c <BNO080_parseInputReport+0x2d8>)
 800158e:	6819      	ldr	r1, [r3, #0]
 8001590:	7cfb      	ldrb	r3, [r7, #19]
 8001592:	440b      	add	r3, r1
 8001594:	490e      	ldr	r1, [pc, #56]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 8001596:	5c8a      	ldrb	r2, [r1, r2]
 8001598:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 800159a:	7cfb      	ldrb	r3, [r7, #19]
 800159c:	3301      	adds	r3, #1
 800159e:	74fb      	strb	r3, [r7, #19]
 80015a0:	7cfb      	ldrb	r3, [r7, #19]
 80015a2:	2b08      	cmp	r3, #8
 80015a4:	d9ef      	bls.n	8001586 <BNO080_parseInputReport+0x222>
			break;
 80015a6:	e00a      	b.n	80015be <BNO080_parseInputReport+0x25a>
			uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 80015a8:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 80015aa:	79db      	ldrb	r3, [r3, #7]
 80015ac:	71fb      	strb	r3, [r7, #7]
			if (command == COMMAND_ME_CALIBRATE)
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	2b07      	cmp	r3, #7
 80015b2:	d103      	bne.n	80015bc <BNO080_parseInputReport+0x258>
				calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 80015b4:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 80015b6:	7a9a      	ldrb	r2, [r3, #10]
 80015b8:	4b21      	ldr	r3, [pc, #132]	@ (8001640 <BNO080_parseInputReport+0x2dc>)
 80015ba:	701a      	strb	r2, [r3, #0]
			break;
 80015bc:	bf00      	nop
}
 80015be:	bf00      	nop
 80015c0:	371c      	adds	r7, #28
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	200001f4 	.word	0x200001f4
 80015d0:	200001f8 	.word	0x200001f8
 80015d4:	200002b0 	.word	0x200002b0
 80015d8:	20000286 	.word	0x20000286
 80015dc:	20000280 	.word	0x20000280
 80015e0:	20000282 	.word	0x20000282
 80015e4:	20000284 	.word	0x20000284
 80015e8:	2000028e 	.word	0x2000028e
 80015ec:	20000288 	.word	0x20000288
 80015f0:	2000028a 	.word	0x2000028a
 80015f4:	2000028c 	.word	0x2000028c
 80015f8:	20000296 	.word	0x20000296
 80015fc:	20000290 	.word	0x20000290
 8001600:	20000292 	.word	0x20000292
 8001604:	20000294 	.word	0x20000294
 8001608:	2000029e 	.word	0x2000029e
 800160c:	20000298 	.word	0x20000298
 8001610:	2000029a 	.word	0x2000029a
 8001614:	2000029c 	.word	0x2000029c
 8001618:	200002aa 	.word	0x200002aa
 800161c:	200002a0 	.word	0x200002a0
 8001620:	200002a2 	.word	0x200002a2
 8001624:	200002a4 	.word	0x200002a4
 8001628:	200002a6 	.word	0x200002a6
 800162c:	200002a8 	.word	0x200002a8
 8001630:	200002ac 	.word	0x200002ac
 8001634:	200002b4 	.word	0x200002b4
 8001638:	200002b5 	.word	0x200002b5
 800163c:	200002b8 	.word	0x200002b8
 8001640:	200002bc 	.word	0x200002bc

08001644 <BNO080_getQuatI>:

//Return the rotation vector quaternion I
float BNO080_getQuatI()
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatI, rotationVector_Q1);
 8001648:	4b07      	ldr	r3, [pc, #28]	@ (8001668 <BNO080_getQuatI+0x24>)
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	b21b      	sxth	r3, r3
 800164e:	4a07      	ldr	r2, [pc, #28]	@ (800166c <BNO080_getQuatI+0x28>)
 8001650:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	4611      	mov	r1, r2
 8001658:	4618      	mov	r0, r3
 800165a:	f000 f8bb 	bl	80017d4 <BNO080_qToFloat>
 800165e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001662:	eeb0 0a67 	vmov.f32	s0, s15
 8001666:	bd80      	pop	{r7, pc}
 8001668:	200002a0 	.word	0x200002a0
 800166c:	20000000 	.word	0x20000000

08001670 <BNO080_getQuatJ>:

//Return the rotation vector quaternion J
float BNO080_getQuatJ()
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatJ, rotationVector_Q1);
 8001674:	4b07      	ldr	r3, [pc, #28]	@ (8001694 <BNO080_getQuatJ+0x24>)
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	b21b      	sxth	r3, r3
 800167a:	4a07      	ldr	r2, [pc, #28]	@ (8001698 <BNO080_getQuatJ+0x28>)
 800167c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f000 f8a5 	bl	80017d4 <BNO080_qToFloat>
 800168a:	eef0 7a40 	vmov.f32	s15, s0
}
 800168e:	eeb0 0a67 	vmov.f32	s0, s15
 8001692:	bd80      	pop	{r7, pc}
 8001694:	200002a2 	.word	0x200002a2
 8001698:	20000000 	.word	0x20000000

0800169c <BNO080_getQuatK>:

//Return the rotation vector quaternion K
float BNO080_getQuatK()
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatK, rotationVector_Q1);
 80016a0:	4b07      	ldr	r3, [pc, #28]	@ (80016c0 <BNO080_getQuatK+0x24>)
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	b21b      	sxth	r3, r3
 80016a6:	4a07      	ldr	r2, [pc, #28]	@ (80016c4 <BNO080_getQuatK+0x28>)
 80016a8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	4611      	mov	r1, r2
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 f88f 	bl	80017d4 <BNO080_qToFloat>
 80016b6:	eef0 7a40 	vmov.f32	s15, s0
}
 80016ba:	eeb0 0a67 	vmov.f32	s0, s15
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	200002a4 	.word	0x200002a4
 80016c4:	20000000 	.word	0x20000000

080016c8 <BNO080_getQuatReal>:

//Return the rotation vector quaternion Real
float BNO080_getQuatReal()
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatReal, rotationVector_Q1);
 80016cc:	4b07      	ldr	r3, [pc, #28]	@ (80016ec <BNO080_getQuatReal+0x24>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	b21b      	sxth	r3, r3
 80016d2:	4a07      	ldr	r2, [pc, #28]	@ (80016f0 <BNO080_getQuatReal+0x28>)
 80016d4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	4611      	mov	r1, r2
 80016dc:	4618      	mov	r0, r3
 80016de:	f000 f879 	bl	80017d4 <BNO080_qToFloat>
 80016e2:	eef0 7a40 	vmov.f32	s15, s0
}
 80016e6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	200002a6 	.word	0x200002a6
 80016f0:	20000000 	.word	0x20000000

080016f4 <BNO080_getQuatRadianAccuracy>:

//Return the rotation vector accuracy
float BNO080_getQuatRadianAccuracy()
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
 80016f8:	4b07      	ldr	r3, [pc, #28]	@ (8001718 <BNO080_getQuatRadianAccuracy+0x24>)
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	b21b      	sxth	r3, r3
 80016fe:	4a07      	ldr	r2, [pc, #28]	@ (800171c <BNO080_getQuatRadianAccuracy+0x28>)
 8001700:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001704:	b2d2      	uxtb	r2, r2
 8001706:	4611      	mov	r1, r2
 8001708:	4618      	mov	r0, r3
 800170a:	f000 f863 	bl	80017d4 <BNO080_qToFloat>
 800170e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001712:	eeb0 0a67 	vmov.f32	s0, s15
 8001716:	bd80      	pop	{r7, pc}
 8001718:	200002a8 	.word	0x200002a8
 800171c:	20000000 	.word	0x20000000

08001720 <BNO080_getQuatAccuracy>:

//Return the acceleration component
uint8_t BNO080_getQuatAccuracy()
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
	return (quatAccuracy);
 8001724:	4b03      	ldr	r3, [pc, #12]	@ (8001734 <BNO080_getQuatAccuracy+0x14>)
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	b2db      	uxtb	r3, r3
}
 800172a:	4618      	mov	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	200002aa 	.word	0x200002aa

08001738 <BNO080_getMagX>:
	return (gyroAccuracy);
}

//Return the magnetometer component
float BNO080_getMagX()
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagX, magnetometer_Q1);
 800173c:	4b07      	ldr	r3, [pc, #28]	@ (800175c <BNO080_getMagX+0x24>)
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	b21b      	sxth	r3, r3
 8001742:	4a07      	ldr	r2, [pc, #28]	@ (8001760 <BNO080_getMagX+0x28>)
 8001744:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	4611      	mov	r1, r2
 800174c:	4618      	mov	r0, r3
 800174e:	f000 f841 	bl	80017d4 <BNO080_qToFloat>
 8001752:	eef0 7a40 	vmov.f32	s15, s0
}
 8001756:	eeb0 0a67 	vmov.f32	s0, s15
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000298 	.word	0x20000298
 8001760:	20000002 	.word	0x20000002

08001764 <BNO080_getMagY>:

//Return the magnetometer component
float BNO080_getMagY()
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagY, magnetometer_Q1);
 8001768:	4b07      	ldr	r3, [pc, #28]	@ (8001788 <BNO080_getMagY+0x24>)
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	b21b      	sxth	r3, r3
 800176e:	4a07      	ldr	r2, [pc, #28]	@ (800178c <BNO080_getMagY+0x28>)
 8001770:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001774:	b2d2      	uxtb	r2, r2
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f000 f82b 	bl	80017d4 <BNO080_qToFloat>
 800177e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001782:	eeb0 0a67 	vmov.f32	s0, s15
 8001786:	bd80      	pop	{r7, pc}
 8001788:	2000029a 	.word	0x2000029a
 800178c:	20000002 	.word	0x20000002

08001790 <BNO080_getMagZ>:

//Return the magnetometer component
float BNO080_getMagZ()
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagZ, magnetometer_Q1);
 8001794:	4b07      	ldr	r3, [pc, #28]	@ (80017b4 <BNO080_getMagZ+0x24>)
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	b21b      	sxth	r3, r3
 800179a:	4a07      	ldr	r2, [pc, #28]	@ (80017b8 <BNO080_getMagZ+0x28>)
 800179c:	f9b2 2000 	ldrsh.w	r2, [r2]
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 f815 	bl	80017d4 <BNO080_qToFloat>
 80017aa:	eef0 7a40 	vmov.f32	s15, s0
}
 80017ae:	eeb0 0a67 	vmov.f32	s0, s15
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	2000029c 	.word	0x2000029c
 80017b8:	20000002 	.word	0x20000002

080017bc <BNO080_getMagAccuracy>:

//Return the mag component
uint8_t BNO080_getMagAccuracy()
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
	return (magAccuracy);
 80017c0:	4b03      	ldr	r3, [pc, #12]	@ (80017d0 <BNO080_getMagAccuracy+0x14>)
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	b2db      	uxtb	r3, r3
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	2000029e 	.word	0x2000029e

080017d4 <BNO080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	ed2d 8b02 	vpush	{d8}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	460a      	mov	r2, r1
 80017e2:	80fb      	strh	r3, [r7, #6]
 80017e4:	4613      	mov	r3, r2
 80017e6:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 80017e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ec:	ee07 3a90 	vmov	s15, r3
 80017f0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80017f4:	797b      	ldrb	r3, [r7, #5]
 80017f6:	425b      	negs	r3, r3
 80017f8:	ee07 3a90 	vmov	s15, r3
 80017fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001800:	eef0 0a67 	vmov.f32	s1, s15
 8001804:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001808:	f009 f862 	bl	800a8d0 <powf>
 800180c:	eef0 7a40 	vmov.f32	s15, s0
 8001810:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8001814:	eeb0 0a67 	vmov.f32	s0, s15
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	ecbd 8b02 	vpop	{d8}
 8001820:	bd80      	pop	{r7, pc}

08001822 <BNO080_enableRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	4603      	mov	r3, r0
 800182a:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 800182c:	88fb      	ldrh	r3, [r7, #6]
 800182e:	2200      	movs	r2, #0
 8001830:	4619      	mov	r1, r3
 8001832:	2005      	movs	r0, #5
 8001834:	f000 f83a 	bl	80018ac <BNO080_setFeatureCommand>
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <BNO080_enableGameRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableGameRotationVector(uint16_t timeBetweenReports)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_GAME_ROTATION_VECTOR, timeBetweenReports, 0);
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	2200      	movs	r2, #0
 800184e:	4619      	mov	r1, r3
 8001850:	2008      	movs	r0, #8
 8001852:	f000 f82b 	bl	80018ac <BNO080_setFeatureCommand>
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <BNO080_enableMagnetometer>:
	BNO080_setFeatureCommand(SENSOR_REPORTID_GYROSCOPE, timeBetweenReports, 0);
}

//Sends the packet to enable the magnetometer
void BNO080_enableMagnetometer(uint16_t timeBetweenReports)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
 8001864:	4603      	mov	r3, r0
 8001866:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_MAGNETIC_FIELD, timeBetweenReports, 0);
 8001868:	88fb      	ldrh	r3, [r7, #6]
 800186a:	2200      	movs	r2, #0
 800186c:	4619      	mov	r1, r3
 800186e:	2003      	movs	r0, #3
 8001870:	f000 f81c 	bl	80018ac <BNO080_setFeatureCommand>
}
 8001874:	bf00      	nop
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <BNO080_calibrateAll>:
	BNO080_sendCalibrateCommand(CALIBRATE_PLANAR_ACCEL);
}

//See 2.2 of the Calibration Procedure document 1000-4044
void BNO080_calibrateAll()
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
	BNO080_sendCalibrateCommand(CALIBRATE_ACCEL_GYRO_MAG);
 8001880:	2004      	movs	r0, #4
 8001882:	f000 f885 	bl	8001990 <BNO080_sendCalibrateCommand>
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <BNO080_calibrationComplete>:
}

//See page 51 of reference manual - ME Calibration Response
//Byte 5 is parsed during the readPacket and stored in calibrationStatus
int BNO080_calibrationComplete()
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
	if (calibrationStatus == 0)
 8001890:	4b05      	ldr	r3, [pc, #20]	@ (80018a8 <BNO080_calibrationComplete+0x1c>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <BNO080_calibrationComplete+0x10>
		return (1);
 8001898:	2301      	movs	r3, #1
 800189a:	e000      	b.n	800189e <BNO080_calibrationComplete+0x12>
	return (0);
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	200002bc 	.word	0x200002bc

080018ac <BNO080_setFeatureCommand>:

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
 80018b8:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 80018ba:	4b24      	ldr	r3, [pc, #144]	@ (800194c <BNO080_setFeatureCommand+0xa0>)
 80018bc:	22fd      	movs	r2, #253	@ 0xfd
 80018be:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 80018c0:	4a22      	ldr	r2, [pc, #136]	@ (800194c <BNO080_setFeatureCommand+0xa0>)
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
 80018c4:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 80018c6:	4b21      	ldr	r3, [pc, #132]	@ (800194c <BNO080_setFeatureCommand+0xa0>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 80018cc:	4b1f      	ldr	r3, [pc, #124]	@ (800194c <BNO080_setFeatureCommand+0xa0>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 80018d2:	4b1e      	ldr	r3, [pc, #120]	@ (800194c <BNO080_setFeatureCommand+0xa0>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	4b1b      	ldr	r3, [pc, #108]	@ (800194c <BNO080_setFeatureCommand+0xa0>)
 80018de:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	0a1b      	lsrs	r3, r3, #8
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	4b19      	ldr	r3, [pc, #100]	@ (800194c <BNO080_setFeatureCommand+0xa0>)
 80018e8:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	0c1b      	lsrs	r3, r3, #16
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	4b16      	ldr	r3, [pc, #88]	@ (800194c <BNO080_setFeatureCommand+0xa0>)
 80018f2:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	0e1b      	lsrs	r3, r3, #24
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	4b14      	ldr	r3, [pc, #80]	@ (800194c <BNO080_setFeatureCommand+0xa0>)
 80018fc:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 80018fe:	4b13      	ldr	r3, [pc, #76]	@ (800194c <BNO080_setFeatureCommand+0xa0>)
 8001900:	2200      	movs	r2, #0
 8001902:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8001904:	4b11      	ldr	r3, [pc, #68]	@ (800194c <BNO080_setFeatureCommand+0xa0>)
 8001906:	2200      	movs	r2, #0
 8001908:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 800190a:	4b10      	ldr	r3, [pc, #64]	@ (800194c <BNO080_setFeatureCommand+0xa0>)
 800190c:	2200      	movs	r2, #0
 800190e:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8001910:	4b0e      	ldr	r3, [pc, #56]	@ (800194c <BNO080_setFeatureCommand+0xa0>)
 8001912:	2200      	movs	r2, #0
 8001914:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	b2da      	uxtb	r2, r3
 800191a:	4b0c      	ldr	r3, [pc, #48]	@ (800194c <BNO080_setFeatureCommand+0xa0>)
 800191c:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	0a1b      	lsrs	r3, r3, #8
 8001922:	b2da      	uxtb	r2, r3
 8001924:	4b09      	ldr	r3, [pc, #36]	@ (800194c <BNO080_setFeatureCommand+0xa0>)
 8001926:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	0c1b      	lsrs	r3, r3, #16
 800192c:	b2da      	uxtb	r2, r3
 800192e:	4b07      	ldr	r3, [pc, #28]	@ (800194c <BNO080_setFeatureCommand+0xa0>)
 8001930:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	0e1b      	lsrs	r3, r3, #24
 8001936:	b2da      	uxtb	r2, r3
 8001938:	4b04      	ldr	r3, [pc, #16]	@ (800194c <BNO080_setFeatureCommand+0xa0>)
 800193a:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 800193c:	2111      	movs	r1, #17
 800193e:	2002      	movs	r0, #2
 8001940:	f000 f938 	bl	8001bb4 <BNO080_sendPacket>
}
 8001944:	bf00      	nop
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	200001f8 	.word	0x200001f8

08001950 <BNO080_sendCommand>:

//Tell the sensor to do a command
//See 6.3.8 page 41, Command request
//The caller is expected to set P0 through P8 prior to calling
void BNO080_sendCommand(uint8_t command)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
	shtpData[0] = SHTP_REPORT_COMMAND_REQUEST; //Command Request
 800195a:	4b0b      	ldr	r3, [pc, #44]	@ (8001988 <BNO080_sendCommand+0x38>)
 800195c:	22f2      	movs	r2, #242	@ 0xf2
 800195e:	701a      	strb	r2, [r3, #0]
	shtpData[1] = commandSequenceNumber++;	 //Increments automatically each function call
 8001960:	4b0a      	ldr	r3, [pc, #40]	@ (800198c <BNO080_sendCommand+0x3c>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	1c5a      	adds	r2, r3, #1
 8001966:	b2d1      	uxtb	r1, r2
 8001968:	4a08      	ldr	r2, [pc, #32]	@ (800198c <BNO080_sendCommand+0x3c>)
 800196a:	7011      	strb	r1, [r2, #0]
 800196c:	4a06      	ldr	r2, [pc, #24]	@ (8001988 <BNO080_sendCommand+0x38>)
 800196e:	7053      	strb	r3, [r2, #1]
	shtpData[2] = command;					   //Command
 8001970:	4a05      	ldr	r2, [pc, #20]	@ (8001988 <BNO080_sendCommand+0x38>)
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	7093      	strb	r3, [r2, #2]
	shtpData[9] = 0;
	shtpData[10] = 0;
	shtpData[11] = 0;*/

	//Transmit packet on channel 2, 12 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 12);
 8001976:	210c      	movs	r1, #12
 8001978:	2002      	movs	r0, #2
 800197a:	f000 f91b 	bl	8001bb4 <BNO080_sendPacket>
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	200001f8 	.word	0x200001f8
 800198c:	2000027e 	.word	0x2000027e

08001990 <BNO080_sendCalibrateCommand>:

//This tells the BNO080 to begin calibrating
//See page 50 of reference manual and the 1000-4044 calibration doc
void BNO080_sendCalibrateCommand(uint8_t thingToCalibrate)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	71fb      	strb	r3, [r7, #7]
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 800199a:	2303      	movs	r3, #3
 800199c:	73fb      	strb	r3, [r7, #15]
 800199e:	e006      	b.n	80019ae <BNO080_sendCalibrateCommand+0x1e>
		shtpData[x] = 0;
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
 80019a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001a18 <BNO080_sendCalibrateCommand+0x88>)
 80019a4:	2100      	movs	r1, #0
 80019a6:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
 80019aa:	3301      	adds	r3, #1
 80019ac:	73fb      	strb	r3, [r7, #15]
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
 80019b0:	2b0b      	cmp	r3, #11
 80019b2:	d9f5      	bls.n	80019a0 <BNO080_sendCalibrateCommand+0x10>

	if (thingToCalibrate == CALIBRATE_ACCEL)
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d103      	bne.n	80019c2 <BNO080_sendCalibrateCommand+0x32>
		shtpData[3] = 1;
 80019ba:	4b17      	ldr	r3, [pc, #92]	@ (8001a18 <BNO080_sendCalibrateCommand+0x88>)
 80019bc:	2201      	movs	r2, #1
 80019be:	70da      	strb	r2, [r3, #3]
 80019c0:	e020      	b.n	8001a04 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_GYRO)
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d103      	bne.n	80019d0 <BNO080_sendCalibrateCommand+0x40>
		shtpData[4] = 1;
 80019c8:	4b13      	ldr	r3, [pc, #76]	@ (8001a18 <BNO080_sendCalibrateCommand+0x88>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	711a      	strb	r2, [r3, #4]
 80019ce:	e019      	b.n	8001a04 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_MAG)
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d103      	bne.n	80019de <BNO080_sendCalibrateCommand+0x4e>
		shtpData[5] = 1;
 80019d6:	4b10      	ldr	r3, [pc, #64]	@ (8001a18 <BNO080_sendCalibrateCommand+0x88>)
 80019d8:	2201      	movs	r2, #1
 80019da:	715a      	strb	r2, [r3, #5]
 80019dc:	e012      	b.n	8001a04 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_PLANAR_ACCEL)
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	d103      	bne.n	80019ec <BNO080_sendCalibrateCommand+0x5c>
		shtpData[7] = 1;
 80019e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a18 <BNO080_sendCalibrateCommand+0x88>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	71da      	strb	r2, [r3, #7]
 80019ea:	e00b      	b.n	8001a04 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_ACCEL_GYRO_MAG)
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	d108      	bne.n	8001a04 <BNO080_sendCalibrateCommand+0x74>
	{
		shtpData[3] = 1;
 80019f2:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <BNO080_sendCalibrateCommand+0x88>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	70da      	strb	r2, [r3, #3]
		shtpData[4] = 1;
 80019f8:	4b07      	ldr	r3, [pc, #28]	@ (8001a18 <BNO080_sendCalibrateCommand+0x88>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	711a      	strb	r2, [r3, #4]
		shtpData[5] = 1;
 80019fe:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <BNO080_sendCalibrateCommand+0x88>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	715a      	strb	r2, [r3, #5]
	}
	else if (thingToCalibrate == CALIBRATE_STOP)
		; //Do nothing, bytes are set to zero

	//Make the internal calStatus variable non-zero (operation failed) so that user can test while we wait
	calibrationStatus = 1;
 8001a04:	4b05      	ldr	r3, [pc, #20]	@ (8001a1c <BNO080_sendCalibrateCommand+0x8c>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	701a      	strb	r2, [r3, #0]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 8001a0a:	2007      	movs	r0, #7
 8001a0c:	f7ff ffa0 	bl	8001950 <BNO080_sendCommand>
}
 8001a10:	bf00      	nop
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	200001f8 	.word	0x200001f8
 8001a1c:	200002bc 	.word	0x200002bc

08001a20 <BNO080_requestCalibrationStatus>:

//Request ME Calibration Status from BNO080
//See page 51 of reference manual
void BNO080_requestCalibrationStatus()
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001a26:	2303      	movs	r3, #3
 8001a28:	71fb      	strb	r3, [r7, #7]
 8001a2a:	e006      	b.n	8001a3a <BNO080_requestCalibrationStatus+0x1a>
		shtpData[x] = 0;
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	4a09      	ldr	r2, [pc, #36]	@ (8001a54 <BNO080_requestCalibrationStatus+0x34>)
 8001a30:	2100      	movs	r1, #0
 8001a32:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	3301      	adds	r3, #1
 8001a38:	71fb      	strb	r3, [r7, #7]
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	2b0b      	cmp	r3, #11
 8001a3e:	d9f5      	bls.n	8001a2c <BNO080_requestCalibrationStatus+0xc>

	shtpData[6] = 0x01; //P3 - 0x01 - Subcommand: Get ME Calibration
 8001a40:	4b04      	ldr	r3, [pc, #16]	@ (8001a54 <BNO080_requestCalibrationStatus+0x34>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	719a      	strb	r2, [r3, #6]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 8001a46:	2007      	movs	r0, #7
 8001a48:	f7ff ff82 	bl	8001950 <BNO080_sendCommand>
}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	200001f8 	.word	0x200001f8

08001a58 <BNO080_saveCalibration>:

//This tells the BNO080 to save the Dynamic Calibration Data (DCD) to flash
//See page 49 of reference manual and the 1000-4044 calibration doc
void BNO080_saveCalibration()
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001a5e:	2303      	movs	r3, #3
 8001a60:	71fb      	strb	r3, [r7, #7]
 8001a62:	e006      	b.n	8001a72 <BNO080_saveCalibration+0x1a>
		shtpData[x] = 0;
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	4a08      	ldr	r2, [pc, #32]	@ (8001a88 <BNO080_saveCalibration+0x30>)
 8001a68:	2100      	movs	r1, #0
 8001a6a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	71fb      	strb	r3, [r7, #7]
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	2b0b      	cmp	r3, #11
 8001a76:	d9f5      	bls.n	8001a64 <BNO080_saveCalibration+0xc>

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_DCD); //Save DCD command
 8001a78:	2006      	movs	r0, #6
 8001a7a:	f7ff ff69 	bl	8001950 <BNO080_sendCommand>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200001f8 	.word	0x200001f8

08001a8c <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001a92:	2300      	movs	r3, #0
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	e00c      	b.n	8001ab2 <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 8001a98:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a9c:	480b      	ldr	r0, [pc, #44]	@ (8001acc <BNO080_waitForSPI+0x40>)
 8001a9e:	f7ff fa64 	bl	8000f6a <LL_GPIO_IsInputPinSet>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e00a      	b.n	8001ac2 <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	607b      	str	r3, [r7, #4]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab8:	d1ee      	bne.n	8001a98 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 8001aba:	4805      	ldr	r0, [pc, #20]	@ (8001ad0 <BNO080_waitForSPI+0x44>)
 8001abc:	f006 ff6a 	bl	8008994 <puts>
	return (0);
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40020800 	.word	0x40020800
 8001ad0:	0800b5d0 	.word	0x0800b5d0

08001ad4 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8001ada:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ade:	4831      	ldr	r0, [pc, #196]	@ (8001ba4 <BNO080_receivePacket+0xd0>)
 8001ae0:	f7ff fa43 	bl	8000f6a <LL_GPIO_IsInputPinSet>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d101      	bne.n	8001aee <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 8001aea:	2300      	movs	r3, #0
 8001aec:	e056      	b.n	8001b9c <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 8001aee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001af2:	482d      	ldr	r0, [pc, #180]	@ (8001ba8 <BNO080_receivePacket+0xd4>)
 8001af4:	f7ff fa5c 	bl	8000fb0 <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8001af8:	2000      	movs	r0, #0
 8001afa:	f7ff fbc7 	bl	800128c <SPI2_SendByte>
 8001afe:	4603      	mov	r3, r0
 8001b00:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 8001b02:	2000      	movs	r0, #0
 8001b04:	f7ff fbc2 	bl	800128c <SPI2_SendByte>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	f7ff fbbd 	bl	800128c <SPI2_SendByte>
 8001b12:	4603      	mov	r3, r0
 8001b14:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 8001b16:	2000      	movs	r0, #0
 8001b18:	f7ff fbb8 	bl	800128c <SPI2_SendByte>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8001b20:	4a22      	ldr	r2, [pc, #136]	@ (8001bac <BNO080_receivePacket+0xd8>)
 8001b22:	7b7b      	ldrb	r3, [r7, #13]
 8001b24:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 8001b26:	4a21      	ldr	r2, [pc, #132]	@ (8001bac <BNO080_receivePacket+0xd8>)
 8001b28:	7b3b      	ldrb	r3, [r7, #12]
 8001b2a:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8001b2c:	4a1f      	ldr	r2, [pc, #124]	@ (8001bac <BNO080_receivePacket+0xd8>)
 8001b2e:	7afb      	ldrb	r3, [r7, #11]
 8001b30:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 8001b32:	4a1e      	ldr	r2, [pc, #120]	@ (8001bac <BNO080_receivePacket+0xd8>)
 8001b34:	7abb      	ldrb	r3, [r7, #10]
 8001b36:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8001b38:	7b3b      	ldrb	r3, [r7, #12]
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	b21a      	sxth	r2, r3
 8001b3e:	7b7b      	ldrb	r3, [r7, #13]
 8001b40:	b21b      	sxth	r3, r3
 8001b42:	4313      	orrs	r3, r2
 8001b44:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8001b46:	893b      	ldrh	r3, [r7, #8]
 8001b48:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001b4c:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8001b4e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 8001b56:	2300      	movs	r3, #0
 8001b58:	e020      	b.n	8001b9c <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8001b5a:	893b      	ldrh	r3, [r7, #8]
 8001b5c:	3b04      	subs	r3, #4
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001b62:	2300      	movs	r3, #0
 8001b64:	81fb      	strh	r3, [r7, #14]
 8001b66:	e00e      	b.n	8001b86 <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 8001b68:	20ff      	movs	r0, #255	@ 0xff
 8001b6a:	f7ff fb8f 	bl	800128c <SPI2_SendByte>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8001b72:	89fb      	ldrh	r3, [r7, #14]
 8001b74:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b76:	d803      	bhi.n	8001b80 <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001b78:	89fb      	ldrh	r3, [r7, #14]
 8001b7a:	490d      	ldr	r1, [pc, #52]	@ (8001bb0 <BNO080_receivePacket+0xdc>)
 8001b7c:	79fa      	ldrb	r2, [r7, #7]
 8001b7e:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001b80:	89fb      	ldrh	r3, [r7, #14]
 8001b82:	3301      	adds	r3, #1
 8001b84:	81fb      	strh	r3, [r7, #14]
 8001b86:	89fa      	ldrh	r2, [r7, #14]
 8001b88:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	dbeb      	blt.n	8001b68 <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8001b90:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b94:	4804      	ldr	r0, [pc, #16]	@ (8001ba8 <BNO080_receivePacket+0xd4>)
 8001b96:	f7ff f9fd 	bl	8000f94 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 8001b9a:	2301      	movs	r3, #1
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40020800 	.word	0x40020800
 8001ba8:	40020400 	.word	0x40020400
 8001bac:	200001f4 	.word	0x200001f4
 8001bb0:	200001f8 	.word	0x200001f8

08001bb4 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	460a      	mov	r2, r1
 8001bbe:	71fb      	strb	r3, [r7, #7]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8001bc4:	79bb      	ldrb	r3, [r7, #6]
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 8001bca:	f7ff ff5f 	bl	8001a8c <BNO080_waitForSPI>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	e032      	b.n	8001c3e <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 8001bd8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001bdc:	481a      	ldr	r0, [pc, #104]	@ (8001c48 <BNO080_sendPacket+0x94>)
 8001bde:	f7ff f9e7 	bl	8000fb0 <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 8001be2:	7bbb      	ldrb	r3, [r7, #14]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fb51 	bl	800128c <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 8001bea:	7bbb      	ldrb	r3, [r7, #14]
 8001bec:	121b      	asrs	r3, r3, #8
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fb4b 	bl	800128c <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fb47 	bl	800128c <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	4a12      	ldr	r2, [pc, #72]	@ (8001c4c <BNO080_sendPacket+0x98>)
 8001c02:	5cd2      	ldrb	r2, [r2, r3]
 8001c04:	1c51      	adds	r1, r2, #1
 8001c06:	b2c8      	uxtb	r0, r1
 8001c08:	4910      	ldr	r1, [pc, #64]	@ (8001c4c <BNO080_sendPacket+0x98>)
 8001c0a:	54c8      	strb	r0, [r1, r3]
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	f7ff fb3d 	bl	800128c <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 8001c12:	2300      	movs	r3, #0
 8001c14:	73fb      	strb	r3, [r7, #15]
 8001c16:	e008      	b.n	8001c2a <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	4a0d      	ldr	r2, [pc, #52]	@ (8001c50 <BNO080_sendPacket+0x9c>)
 8001c1c:	5cd3      	ldrb	r3, [r2, r3]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fb34 	bl	800128c <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	3301      	adds	r3, #1
 8001c28:	73fb      	strb	r3, [r7, #15]
 8001c2a:	7bfa      	ldrb	r2, [r7, #15]
 8001c2c:	79bb      	ldrb	r3, [r7, #6]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d3f2      	bcc.n	8001c18 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 8001c32:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c36:	4804      	ldr	r0, [pc, #16]	@ (8001c48 <BNO080_sendPacket+0x94>)
 8001c38:	f7ff f9ac 	bl	8000f94 <LL_GPIO_SetOutputPin>

	return (1);
 8001c3c:	2301      	movs	r3, #1
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40020400 	.word	0x40020400
 8001c4c:	20000278 	.word	0x20000278
 8001c50:	200001f8 	.word	0x200001f8

08001c54 <iBus_Check_CHKSUM>:
#include "FS-IA6B.h"

FSiA6B_iBus iBus;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 8001c60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c64:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i< len-2; i++)
 8001c66:	2300      	movs	r3, #0
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	e00a      	b.n	8001c82 <iBus_Check_CHKSUM+0x2e>
	{
		chksum = chksum - data[i];
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	4413      	add	r3, r2
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	89fb      	ldrh	r3, [r7, #14]
 8001c78:	1a9b      	subs	r3, r3, r2
 8001c7a:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i< len-2; i++)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	78fb      	ldrb	r3, [r7, #3]
 8001c84:	3b02      	subs	r3, #2
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	dbef      	blt.n	8001c6c <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff)==data[30]) && ((chksum>>8)==data[31]);
 8001c8c:	89fb      	ldrh	r3, [r7, #14]
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	321e      	adds	r2, #30
 8001c94:	7812      	ldrb	r2, [r2, #0]
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d109      	bne.n	8001cae <iBus_Check_CHKSUM+0x5a>
 8001c9a:	89fb      	ldrh	r3, [r7, #14]
 8001c9c:	0a1b      	lsrs	r3, r3, #8
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	321f      	adds	r2, #31
 8001ca4:	7812      	ldrb	r2, [r2, #0]
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d101      	bne.n	8001cae <iBus_Check_CHKSUM+0x5a>
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <iBus_Check_CHKSUM+0x5c>
 8001cae:	2300      	movs	r3, #0
 8001cb0:	b2db      	uxtb	r3, r3
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	6039      	str	r1, [r7, #0]
	iBus->RH =  (data[2]  | data[3]<<8)  & 0x0fff; // 하위 12비트만 사용
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3302      	adds	r3, #2
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	b21a      	sxth	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3303      	adds	r3, #3
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	021b      	lsls	r3, r3, #8
 8001cd8:	b21b      	sxth	r3, r3
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	b21b      	sxth	r3, r3
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	801a      	strh	r2, [r3, #0]
	iBus->RV =  (data[4]  | data[5]<<8)  & 0x0fff;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3304      	adds	r3, #4
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	b21a      	sxth	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3305      	adds	r3, #5
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	021b      	lsls	r3, r3, #8
 8001cfa:	b21b      	sxth	r3, r3
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	b21b      	sxth	r3, r3
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	805a      	strh	r2, [r3, #2]
	iBus->LV =  (data[6]  | data[7]<<8)  & 0x0fff;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3306      	adds	r3, #6
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	b21a      	sxth	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3307      	adds	r3, #7
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	021b      	lsls	r3, r3, #8
 8001d1c:	b21b      	sxth	r3, r3
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	b21b      	sxth	r3, r3
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	809a      	strh	r2, [r3, #4]
	iBus->LH =  (data[8]  | data[9]<<8)  & 0x0fff;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3308      	adds	r3, #8
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	b21a      	sxth	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3309      	adds	r3, #9
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	021b      	lsls	r3, r3, #8
 8001d3e:	b21b      	sxth	r3, r3
 8001d40:	4313      	orrs	r3, r2
 8001d42:	b21b      	sxth	r3, r3
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0fff;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	330a      	adds	r3, #10
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	b21a      	sxth	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	330b      	adds	r3, #11
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	021b      	lsls	r3, r3, #8
 8001d60:	b21b      	sxth	r3, r3
 8001d62:	4313      	orrs	r3, r2
 8001d64:	b21b      	sxth	r3, r3
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	811a      	strh	r2, [r3, #8]
	iBus->SwC = (data[12] | data[13]<<8) & 0x0fff;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	330c      	adds	r3, #12
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	b21a      	sxth	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	330d      	adds	r3, #13
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	021b      	lsls	r3, r3, #8
 8001d82:	b21b      	sxth	r3, r3
 8001d84:	4313      	orrs	r3, r2
 8001d86:	b21b      	sxth	r3, r3
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	819a      	strh	r2, [r3, #12]

	iBus->FailSafe = data[13] >> 4;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	330d      	adds	r3, #13
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	091b      	lsrs	r3, r3, #4
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	751a      	strb	r2, [r3, #20]
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <iBus_isActiveFailsafe>:

unsigned char iBus_isActiveFailsafe(FSiA6B_iBus* iBus)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
	return iBus->FailSafe != 0;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	7d1b      	ldrb	r3, [r3, #20]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	bf14      	ite	ne
 8001dbe:	2301      	movne	r3, #1
 8001dc0:	2300      	moveq	r3, #0
 8001dc2:	b2db      	uxtb	r3, r3
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <LL_SPI_Enable>:
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	601a      	str	r2, [r3, #0]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <LL_SPI_SetStandard>:
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f023 0210 	bic.w	r2, r3, #16
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	431a      	orrs	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	605a      	str	r2, [r3, #4]
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <LL_SPI_IsActiveFlag_RXNE>:
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d101      	bne.n	8001e2e <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_SPI_IsActiveFlag_TXE>:
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d101      	bne.n	8001e54 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001e50:	2301      	movs	r3, #1
 8001e52:	e000      	b.n	8001e56 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <LL_SPI_ReceiveData8>:
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	330c      	adds	r3, #12
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	b2db      	uxtb	r3, r3
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <LL_SPI_TransmitData8>:
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b085      	sub	sp, #20
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	460b      	mov	r3, r1
 8001e88:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	330c      	adds	r3, #12
 8001e8e:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	78fa      	ldrb	r2, [r7, #3]
 8001e94:	701a      	strb	r2, [r3, #0]
}
 8001e96:	bf00      	nop
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <LL_GPIO_SetOutputPin>:
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	619a      	str	r2, [r3, #24]
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <LL_GPIO_ResetOutputPin>:
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	041a      	lsls	r2, r3, #16
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	619a      	str	r2, [r3, #24]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <LL_AHB1_GRP1_EnableClock>:
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001ee4:	4b08      	ldr	r3, [pc, #32]	@ (8001f08 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ee6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ee8:	4907      	ldr	r1, [pc, #28]	@ (8001f08 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001ef0:	4b05      	ldr	r3, [pc, #20]	@ (8001f08 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ef2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001efa:	68fb      	ldr	r3, [r7, #12]
}
 8001efc:	bf00      	nop
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	40023800 	.word	0x40023800

08001f0c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001f14:	4b08      	ldr	r3, [pc, #32]	@ (8001f38 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f18:	4907      	ldr	r1, [pc, #28]	@ (8001f38 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001f20:	4b05      	ldr	r3, [pc, #20]	@ (8001f38 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4013      	ands	r3, r2
 8001f28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	40023800 	.word	0x40023800

08001f3c <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b090      	sub	sp, #64	@ 0x40
 8001f40:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001f42:	f107 0318 	add.w	r3, r7, #24
 8001f46:	2228      	movs	r2, #40	@ 0x28
 8001f48:	2100      	movs	r1, #0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f006 fe02 	bl	8008b54 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	463b      	mov	r3, r7
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	609a      	str	r2, [r3, #8]
 8001f5a:	60da      	str	r2, [r3, #12]
 8001f5c:	611a      	str	r2, [r3, #16]
 8001f5e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001f60:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001f64:	f7ff ffd2 	bl	8001f0c <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001f68:	2001      	movs	r0, #1
 8001f6a:	f7ff ffb7 	bl	8001edc <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001f6e:	2004      	movs	r0, #4
 8001f70:	f7ff ffb4 	bl	8001edc <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001f74:	23e0      	movs	r3, #224	@ 0xe0
 8001f76:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f84:	2300      	movs	r3, #0
 8001f86:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001f88:	2305      	movs	r3, #5
 8001f8a:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8c:	463b      	mov	r3, r7
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4825      	ldr	r0, [pc, #148]	@ (8002028 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8001f92:	f004 ff72 	bl	8006e7a <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001f9a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001f9e:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001fac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 8001fb2:	2310      	movs	r3, #16
 8001fb4:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001fbe:	230a      	movs	r3, #10
 8001fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 8001fc2:	f107 0318 	add.w	r3, r7, #24
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4818      	ldr	r0, [pc, #96]	@ (800202c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001fca:	f005 f934 	bl	8007236 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001fce:	2100      	movs	r1, #0
 8001fd0:	4816      	ldr	r0, [pc, #88]	@ (800202c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001fd2:	f7ff ff0d 	bl	8001df0 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 8001fd6:	2110      	movs	r1, #16
 8001fd8:	4815      	ldr	r0, [pc, #84]	@ (8002030 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001fda:	f7ff ff70 	bl	8001ebe <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 8001fde:	2310      	movs	r3, #16
 8001fe0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 8001ff2:	463b      	mov	r3, r7
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	480e      	ldr	r0, [pc, #56]	@ (8002030 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001ff8:	f004 ff3f 	bl	8006e7a <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8001ffc:	2320      	movs	r3, #32
 8001ffe:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002000:	2300      	movs	r3, #0
 8002002:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002004:	2301      	movs	r3, #1
 8002006:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8002008:	463b      	mov	r3, r7
 800200a:	4619      	mov	r1, r3
 800200c:	4808      	ldr	r0, [pc, #32]	@ (8002030 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 800200e:	f004 ff34 	bl	8006e7a <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 8002012:	4806      	ldr	r0, [pc, #24]	@ (800202c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8002014:	f7ff fedc 	bl	8001dd0 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8002018:	2110      	movs	r1, #16
 800201a:	4805      	ldr	r0, [pc, #20]	@ (8002030 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 800201c:	f7ff ff41 	bl	8001ea2 <LL_GPIO_SetOutputPin>
}
 8002020:	bf00      	nop
 8002022:	3740      	adds	r7, #64	@ 0x40
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40020000 	.word	0x40020000
 800202c:	40013000 	.word	0x40013000
 8002030:	40020800 	.word	0x40020800

08002034 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 800203e:	bf00      	nop
 8002040:	480c      	ldr	r0, [pc, #48]	@ (8002074 <SPI1_SendByte+0x40>)
 8002042:	f7ff fefb 	bl	8001e3c <LL_SPI_IsActiveFlag_TXE>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0f9      	beq.n	8002040 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	4619      	mov	r1, r3
 8002050:	4808      	ldr	r0, [pc, #32]	@ (8002074 <SPI1_SendByte+0x40>)
 8002052:	f7ff ff14 	bl	8001e7e <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 8002056:	bf00      	nop
 8002058:	4806      	ldr	r0, [pc, #24]	@ (8002074 <SPI1_SendByte+0x40>)
 800205a:	f7ff fedc 	bl	8001e16 <LL_SPI_IsActiveFlag_RXNE>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0f9      	beq.n	8002058 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8002064:	4803      	ldr	r0, [pc, #12]	@ (8002074 <SPI1_SendByte+0x40>)
 8002066:	f7ff fefc 	bl	8001e62 <LL_SPI_ReceiveData8>
 800206a:	4603      	mov	r3, r0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40013000 	.word	0x40013000

08002078 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 8002082:	2110      	movs	r1, #16
 8002084:	480b      	ldr	r0, [pc, #44]	@ (80020b4 <ICM20602_Readbyte+0x3c>)
 8002086:	f7ff ff1a 	bl	8001ebe <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002090:	b2db      	uxtb	r3, r3
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff ffce 	bl	8002034 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8002098:	2000      	movs	r0, #0
 800209a:	f7ff ffcb 	bl	8002034 <SPI1_SendByte>
 800209e:	4603      	mov	r3, r0
 80020a0:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 80020a2:	2110      	movs	r1, #16
 80020a4:	4803      	ldr	r0, [pc, #12]	@ (80020b4 <ICM20602_Readbyte+0x3c>)
 80020a6:	f7ff fefc 	bl	8001ea2 <LL_GPIO_SetOutputPin>
	
	return val;
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40020800 	.word	0x40020800

080020b8 <ICM20602_Writebyte>:
	}
	CHIP_DESELECT(ICM20602);
}

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	460a      	mov	r2, r1
 80020c2:	71fb      	strb	r3, [r7, #7]
 80020c4:	4613      	mov	r3, r2
 80020c6:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 80020c8:	2110      	movs	r1, #16
 80020ca:	480b      	ldr	r0, [pc, #44]	@ (80020f8 <ICM20602_Writebyte+0x40>)
 80020cc:	f7ff fef7 	bl	8001ebe <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff ffab 	bl	8002034 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 80020de:	79bb      	ldrb	r3, [r7, #6]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ffa7 	bl	8002034 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 80020e6:	2110      	movs	r1, #16
 80020e8:	4803      	ldr	r0, [pc, #12]	@ (80020f8 <ICM20602_Writebyte+0x40>)
 80020ea:	f7ff feda 	bl	8001ea2 <LL_GPIO_SetOutputPin>
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40020800 	.word	0x40020800

080020fc <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8002102:	2300      	movs	r3, #0
 8002104:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8002106:	f107 0308 	add.w	r3, r7, #8
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8002110:	463b      	mov	r3, r7
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8002118:	f7ff ff10 	bl	8001f3c <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 800211c:	4833      	ldr	r0, [pc, #204]	@ (80021ec <ICM20602_Initialization+0xf0>)
 800211e:	f006 fbd1 	bl	80088c4 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 8002122:	2075      	movs	r0, #117	@ 0x75
 8002124:	f7ff ffa8 	bl	8002078 <ICM20602_Readbyte>
 8002128:	4603      	mov	r3, r0
 800212a:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 800212c:	7bfb      	ldrb	r3, [r7, #15]
 800212e:	2b12      	cmp	r3, #18
 8002130:	d105      	bne.n	800213e <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 8002132:	7bfb      	ldrb	r3, [r7, #15]
 8002134:	4619      	mov	r1, r3
 8002136:	482e      	ldr	r0, [pc, #184]	@ (80021f0 <ICM20602_Initialization+0xf4>)
 8002138:	f006 fbc4 	bl	80088c4 <iprintf>
 800213c:	e012      	b.n	8002164 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 800213e:	7bfb      	ldrb	r3, [r7, #15]
 8002140:	2b12      	cmp	r3, #18
 8002142:	d00f      	beq.n	8002164 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8002144:	2075      	movs	r0, #117	@ 0x75
 8002146:	f7ff ff97 	bl	8002078 <ICM20602_Readbyte>
 800214a:	4603      	mov	r3, r0
 800214c:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 800214e:	7bfb      	ldrb	r3, [r7, #15]
 8002150:	2b12      	cmp	r3, #18
 8002152:	d007      	beq.n	8002164 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	2212      	movs	r2, #18
 8002158:	4619      	mov	r1, r3
 800215a:	4826      	ldr	r0, [pc, #152]	@ (80021f4 <ICM20602_Initialization+0xf8>)
 800215c:	f006 fbb2 	bl	80088c4 <iprintf>
			return 1; //ERROR
 8002160:	2301      	movs	r3, #1
 8002162:	e03f      	b.n	80021e4 <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8002164:	2180      	movs	r1, #128	@ 0x80
 8002166:	206b      	movs	r0, #107	@ 0x6b
 8002168:	f7ff ffa6 	bl	80020b8 <ICM20602_Writebyte>
	HAL_Delay(50);
 800216c:	2032      	movs	r0, #50	@ 0x32
 800216e:	f002 fd1d 	bl	8004bac <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 8002172:	2101      	movs	r1, #1
 8002174:	206b      	movs	r0, #107	@ 0x6b
 8002176:	f7ff ff9f 	bl	80020b8 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 800217a:	2032      	movs	r0, #50	@ 0x32
 800217c:	f002 fd16 	bl	8004bac <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 8002180:	2138      	movs	r1, #56	@ 0x38
 8002182:	206c      	movs	r0, #108	@ 0x6c
 8002184:	f7ff ff98 	bl	80020b8 <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 8002188:	2032      	movs	r0, #50	@ 0x32
 800218a:	f002 fd0f 	bl	8004bac <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 800218e:	2100      	movs	r1, #0
 8002190:	2019      	movs	r0, #25
 8002192:	f7ff ff91 	bl	80020b8 <ICM20602_Writebyte>
	HAL_Delay(50);
 8002196:	2032      	movs	r0, #50	@ 0x32
 8002198:	f002 fd08 	bl	8004bac <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 800219c:	2105      	movs	r1, #5
 800219e:	201a      	movs	r0, #26
 80021a0:	f7ff ff8a 	bl	80020b8 <ICM20602_Writebyte>
	HAL_Delay(50);
 80021a4:	2032      	movs	r0, #50	@ 0x32
 80021a6:	f002 fd01 	bl	8004bac <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 80021aa:	2118      	movs	r1, #24
 80021ac:	201b      	movs	r0, #27
 80021ae:	f7ff ff83 	bl	80020b8 <ICM20602_Writebyte>
	HAL_Delay(50);
 80021b2:	2032      	movs	r0, #50	@ 0x32
 80021b4:	f002 fcfa 	bl	8004bac <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 80021b8:	2118      	movs	r1, #24
 80021ba:	201c      	movs	r0, #28
 80021bc:	f7ff ff7c 	bl	80020b8 <ICM20602_Writebyte>
	HAL_Delay(50);
 80021c0:	2032      	movs	r0, #50	@ 0x32
 80021c2:	f002 fcf3 	bl	8004bac <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 80021c6:	2103      	movs	r1, #3
 80021c8:	201d      	movs	r0, #29
 80021ca:	f7ff ff75 	bl	80020b8 <ICM20602_Writebyte>
	HAL_Delay(50);
 80021ce:	2032      	movs	r0, #50	@ 0x32
 80021d0:	f002 fcec 	bl	8004bac <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 80021d4:	2101      	movs	r1, #1
 80021d6:	2038      	movs	r0, #56	@ 0x38
 80021d8:	f7ff ff6e 	bl	80020b8 <ICM20602_Writebyte>
	HAL_Delay(50);
 80021dc:	2032      	movs	r0, #50	@ 0x32
 80021de:	f002 fce5 	bl	8004bac <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	0800b5e4 	.word	0x0800b5e4
 80021f0:	0800b5fc 	.word	0x0800b5fc
 80021f4:	0800b620 	.word	0x0800b620

080021f8 <LL_SPI_Enable>:
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	601a      	str	r2, [r3, #0]
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <LL_SPI_SetStandard>:
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f023 0210 	bic.w	r2, r3, #16
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	431a      	orrs	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	605a      	str	r2, [r3, #4]
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <LL_SPI_IsActiveFlag_RXNE>:
{
 800223e:	b480      	push	{r7}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8002252:	2301      	movs	r3, #1
 8002254:	e000      	b.n	8002258 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <LL_SPI_IsActiveFlag_TXE>:
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b02      	cmp	r3, #2
 8002276:	d101      	bne.n	800227c <LL_SPI_IsActiveFlag_TXE+0x18>
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <LL_SPI_IsActiveFlag_TXE+0x1a>
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <LL_SPI_ReceiveData8>:
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	330c      	adds	r3, #12
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	b2db      	uxtb	r3, r3
}
 800229a:	4618      	mov	r0, r3
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <LL_SPI_TransmitData8>:
{
 80022a6:	b480      	push	{r7}
 80022a8:	b085      	sub	sp, #20
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	460b      	mov	r3, r1
 80022b0:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	330c      	adds	r3, #12
 80022b6:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	78fa      	ldrb	r2, [r7, #3]
 80022bc:	701a      	strb	r2, [r3, #0]
}
 80022be:	bf00      	nop
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <LL_GPIO_SetOutputPin>:
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	619a      	str	r2, [r3, #24]
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <LL_GPIO_ResetOutputPin>:
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	041a      	lsls	r2, r3, #16
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	619a      	str	r2, [r3, #24]
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <LL_AHB1_GRP1_EnableClock>:
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800230c:	4b08      	ldr	r3, [pc, #32]	@ (8002330 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800230e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002310:	4907      	ldr	r1, [pc, #28]	@ (8002330 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4313      	orrs	r3, r2
 8002316:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002318:	4b05      	ldr	r3, [pc, #20]	@ (8002330 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800231a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4013      	ands	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002322:	68fb      	ldr	r3, [r7, #12]
}
 8002324:	bf00      	nop
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	40023800 	.word	0x40023800

08002334 <LL_APB1_GRP1_EnableClock>:
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800233c:	4b08      	ldr	r3, [pc, #32]	@ (8002360 <LL_APB1_GRP1_EnableClock+0x2c>)
 800233e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002340:	4907      	ldr	r1, [pc, #28]	@ (8002360 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4313      	orrs	r3, r2
 8002346:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002348:	4b05      	ldr	r3, [pc, #20]	@ (8002360 <LL_APB1_GRP1_EnableClock+0x2c>)
 800234a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4013      	ands	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002352:	68fb      	ldr	r3, [r7, #12]
}
 8002354:	bf00      	nop
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	40023800 	.word	0x40023800

08002364 <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b090      	sub	sp, #64	@ 0x40
 8002368:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800236a:	f107 0318 	add.w	r3, r7, #24
 800236e:	2228      	movs	r2, #40	@ 0x28
 8002370:	2100      	movs	r1, #0
 8002372:	4618      	mov	r0, r3
 8002374:	f006 fbee 	bl	8008b54 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002378:	463b      	mov	r3, r7
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	605a      	str	r2, [r3, #4]
 8002380:	609a      	str	r2, [r3, #8]
 8002382:	60da      	str	r2, [r3, #12]
 8002384:	611a      	str	r2, [r3, #16]
 8002386:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8002388:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800238c:	f7ff ffd2 	bl	8002334 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002390:	2002      	movs	r0, #2
 8002392:	f7ff ffb7 	bl	8002304 <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8002396:	2338      	movs	r3, #56	@ 0x38
 8002398:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800239a:	2302      	movs	r3, #2
 800239c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800239e:	2303      	movs	r3, #3
 80023a0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80023a6:	2300      	movs	r3, #0
 80023a8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80023aa:	2306      	movs	r3, #6
 80023ac:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ae:	463b      	mov	r3, r7
 80023b0:	4619      	mov	r1, r3
 80023b2:	4826      	ldr	r0, [pc, #152]	@ (800244c <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80023b4:	f004 fd61 	bl	8006e7a <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80023b8:	2300      	movs	r3, #0
 80023ba:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80023bc:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80023c0:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80023c2:	2300      	movs	r3, #0
 80023c4:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80023c6:	2302      	movs	r3, #2
 80023c8:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80023ca:	2301      	movs	r3, #1
 80023cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80023ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 80023d4:	2308      	movs	r3, #8
 80023d6:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80023d8:	2300      	movs	r3, #0
 80023da:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80023dc:	2300      	movs	r3, #0
 80023de:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 80023e0:	230a      	movs	r3, #10
 80023e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 80023e4:	f107 0318 	add.w	r3, r7, #24
 80023e8:	4619      	mov	r1, r3
 80023ea:	4819      	ldr	r0, [pc, #100]	@ (8002450 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 80023ec:	f004 ff23 	bl	8007236 <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80023f0:	2100      	movs	r1, #0
 80023f2:	4817      	ldr	r0, [pc, #92]	@ (8002450 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 80023f4:	f7ff ff10 	bl	8002218 <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 80023f8:	2140      	movs	r1, #64	@ 0x40
 80023fa:	4814      	ldr	r0, [pc, #80]	@ (800244c <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80023fc:	f7ff ff73 	bl	80022e6 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 8002400:	2340      	movs	r3, #64	@ 0x40
 8002402:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002404:	2301      	movs	r3, #1
 8002406:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002408:	2303      	movs	r3, #3
 800240a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002410:	2300      	movs	r3, #0
 8002412:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 8002414:	463b      	mov	r3, r7
 8002416:	4619      	mov	r1, r3
 8002418:	480c      	ldr	r0, [pc, #48]	@ (800244c <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 800241a:	f004 fd2e 	bl	8006e7a <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 800241e:	2380      	movs	r3, #128	@ 0x80
 8002420:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002422:	2300      	movs	r3, #0
 8002424:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002426:	2301      	movs	r3, #1
 8002428:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 800242a:	463b      	mov	r3, r7
 800242c:	4619      	mov	r1, r3
 800242e:	4807      	ldr	r0, [pc, #28]	@ (800244c <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002430:	f004 fd23 	bl	8006e7a <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 8002434:	4806      	ldr	r0, [pc, #24]	@ (8002450 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8002436:	f7ff fedf 	bl	80021f8 <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 800243a:	2140      	movs	r1, #64	@ 0x40
 800243c:	4803      	ldr	r0, [pc, #12]	@ (800244c <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 800243e:	f7ff ff44 	bl	80022ca <LL_GPIO_SetOutputPin>
}
 8002442:	bf00      	nop
 8002444:	3740      	adds	r7, #64	@ 0x40
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40020400 	.word	0x40020400
 8002450:	40003c00 	.word	0x40003c00

08002454 <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 800245e:	bf00      	nop
 8002460:	480c      	ldr	r0, [pc, #48]	@ (8002494 <SPI3_SendByte+0x40>)
 8002462:	f7ff feff 	bl	8002264 <LL_SPI_IsActiveFlag_TXE>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0f9      	beq.n	8002460 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	4619      	mov	r1, r3
 8002470:	4808      	ldr	r0, [pc, #32]	@ (8002494 <SPI3_SendByte+0x40>)
 8002472:	f7ff ff18 	bl	80022a6 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 8002476:	bf00      	nop
 8002478:	4806      	ldr	r0, [pc, #24]	@ (8002494 <SPI3_SendByte+0x40>)
 800247a:	f7ff fee0 	bl	800223e <LL_SPI_IsActiveFlag_RXNE>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0f9      	beq.n	8002478 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 8002484:	4803      	ldr	r0, [pc, #12]	@ (8002494 <SPI3_SendByte+0x40>)
 8002486:	f7ff ff00 	bl	800228a <LL_SPI_ReceiveData8>
 800248a:	4603      	mov	r3, r0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40003c00 	.word	0x40003c00

08002498 <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 80024a2:	2140      	movs	r1, #64	@ 0x40
 80024a4:	480b      	ldr	r0, [pc, #44]	@ (80024d4 <LPS22HH_Readbyte+0x3c>)
 80024a6:	f7ff ff1e 	bl	80022e6 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff ffce 	bl	8002454 <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 80024b8:	2000      	movs	r0, #0
 80024ba:	f7ff ffcb 	bl	8002454 <SPI3_SendByte>
 80024be:	4603      	mov	r3, r0
 80024c0:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 80024c2:	2140      	movs	r1, #64	@ 0x40
 80024c4:	4803      	ldr	r0, [pc, #12]	@ (80024d4 <LPS22HH_Readbyte+0x3c>)
 80024c6:	f7ff ff00 	bl	80022ca <LL_GPIO_SetOutputPin>
	
	return val;
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40020400 	.word	0x40020400

080024d8 <LPS22HH_Writebyte>:
	}
	CHIP_DESELECT(LPS22HH);
}

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	460a      	mov	r2, r1
 80024e2:	71fb      	strb	r3, [r7, #7]
 80024e4:	4613      	mov	r3, r2
 80024e6:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 80024e8:	2140      	movs	r1, #64	@ 0x40
 80024ea:	480b      	ldr	r0, [pc, #44]	@ (8002518 <LPS22HH_Writebyte+0x40>)
 80024ec:	f7ff fefb 	bl	80022e6 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff ffab 	bl	8002454 <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 80024fe:	79bb      	ldrb	r3, [r7, #6]
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff ffa7 	bl	8002454 <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 8002506:	2140      	movs	r1, #64	@ 0x40
 8002508:	4803      	ldr	r0, [pc, #12]	@ (8002518 <LPS22HH_Writebyte+0x40>)
 800250a:	f7ff fede 	bl	80022ca <LL_GPIO_SetOutputPin>
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40020400 	.word	0x40020400

0800251c <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 8002522:	2300      	movs	r3, #0
 8002524:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 8002526:	f7ff ff1d 	bl	8002364 <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 800252a:	4841      	ldr	r0, [pc, #260]	@ (8002630 <LPS22HH_Initialization+0x114>)
 800252c:	f006 f9ca 	bl	80088c4 <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 8002530:	200f      	movs	r0, #15
 8002532:	f7ff ffb1 	bl	8002498 <LPS22HH_Readbyte>
 8002536:	4603      	mov	r3, r0
 8002538:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	2bb3      	cmp	r3, #179	@ 0xb3
 800253e:	d105      	bne.n	800254c <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 8002540:	79fb      	ldrb	r3, [r7, #7]
 8002542:	4619      	mov	r1, r3
 8002544:	483b      	ldr	r0, [pc, #236]	@ (8002634 <LPS22HH_Initialization+0x118>)
 8002546:	f006 f9bd 	bl	80088c4 <iprintf>
 800254a:	e012      	b.n	8002572 <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 800254c:	79fb      	ldrb	r3, [r7, #7]
 800254e:	2bb3      	cmp	r3, #179	@ 0xb3
 8002550:	d00f      	beq.n	8002572 <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 8002552:	200f      	movs	r0, #15
 8002554:	f7ff ffa0 	bl	8002498 <LPS22HH_Readbyte>
 8002558:	4603      	mov	r3, r0
 800255a:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	2bb3      	cmp	r3, #179	@ 0xb3
 8002560:	d007      	beq.n	8002572 <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	22b3      	movs	r2, #179	@ 0xb3
 8002566:	4619      	mov	r1, r3
 8002568:	4833      	ldr	r0, [pc, #204]	@ (8002638 <LPS22HH_Initialization+0x11c>)
 800256a:	f006 f9ab 	bl	80088c4 <iprintf>
			return 1; //ERROR
 800256e:	2301      	movs	r3, #1
 8002570:	e059      	b.n	8002626 <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 8002572:	2104      	movs	r1, #4
 8002574:	2011      	movs	r0, #17
 8002576:	f7ff ffaf 	bl	80024d8 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 800257a:	2011      	movs	r0, #17
 800257c:	f7ff ff8c 	bl	8002498 <LPS22HH_Readbyte>
 8002580:	4603      	mov	r3, r0
 8002582:	f003 0304 	and.w	r3, r3, #4
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f7      	bne.n	800257a <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 800258a:	2010      	movs	r0, #16
 800258c:	f7ff ff84 	bl	8002498 <LPS22HH_Readbyte>
 8002590:	4603      	mov	r3, r0
 8002592:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 8002594:	79bb      	ldrb	r3, [r7, #6]
 8002596:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800259a:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 800259c:	79bb      	ldrb	r3, [r7, #6]
 800259e:	4619      	mov	r1, r3
 80025a0:	2010      	movs	r0, #16
 80025a2:	f7ff ff99 	bl	80024d8 <LPS22HH_Writebyte>
	temp_reg = 0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 80025aa:	2010      	movs	r0, #16
 80025ac:	f7ff ff74 	bl	8002498 <LPS22HH_Readbyte>
 80025b0:	4603      	mov	r3, r0
 80025b2:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 80025b4:	2010      	movs	r0, #16
 80025b6:	f7ff ff6f 	bl	8002498 <LPS22HH_Readbyte>
 80025ba:	4603      	mov	r3, r0
 80025bc:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 80025be:	79bb      	ldrb	r3, [r7, #6]
 80025c0:	f043 030c 	orr.w	r3, r3, #12
 80025c4:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 80025c6:	79bb      	ldrb	r3, [r7, #6]
 80025c8:	4619      	mov	r1, r3
 80025ca:	2010      	movs	r0, #16
 80025cc:	f7ff ff84 	bl	80024d8 <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 80025d0:	2010      	movs	r0, #16
 80025d2:	f7ff ff61 	bl	8002498 <LPS22HH_Readbyte>
 80025d6:	4603      	mov	r3, r0
 80025d8:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 80025da:	79bb      	ldrb	r3, [r7, #6]
 80025dc:	f043 0302 	orr.w	r3, r3, #2
 80025e0:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 80025e2:	79bb      	ldrb	r3, [r7, #6]
 80025e4:	4619      	mov	r1, r3
 80025e6:	2010      	movs	r0, #16
 80025e8:	f7ff ff76 	bl	80024d8 <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 80025ec:	2011      	movs	r0, #17
 80025ee:	f7ff ff53 	bl	8002498 <LPS22HH_Readbyte>
 80025f2:	4603      	mov	r3, r0
 80025f4:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 80025f6:	79bb      	ldrb	r3, [r7, #6]
 80025f8:	f043 0302 	orr.w	r3, r3, #2
 80025fc:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 80025fe:	79bb      	ldrb	r3, [r7, #6]
 8002600:	4619      	mov	r1, r3
 8002602:	2011      	movs	r0, #17
 8002604:	f7ff ff68 	bl	80024d8 <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 8002608:	2012      	movs	r0, #18
 800260a:	f7ff ff45 	bl	8002498 <LPS22HH_Readbyte>
 800260e:	4603      	mov	r3, r0
 8002610:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 8002612:	79bb      	ldrb	r3, [r7, #6]
 8002614:	f043 0304 	orr.w	r3, r3, #4
 8002618:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 800261a:	79bb      	ldrb	r3, [r7, #6]
 800261c:	4619      	mov	r1, r3
 800261e:	2012      	movs	r0, #18
 8002620:	f7ff ff5a 	bl	80024d8 <LPS22HH_Writebyte>
	
	return 0; //OK
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	0800b64c 	.word	0x0800b64c
 8002634:	0800b660 	.word	0x0800b660
 8002638:	0800b684 	.word	0x0800b684

0800263c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002640:	4b04      	ldr	r3, [pc, #16]	@ (8002654 <__NVIC_GetPriorityGrouping+0x18>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	0a1b      	lsrs	r3, r3, #8
 8002646:	f003 0307 	and.w	r3, r3, #7
}
 800264a:	4618      	mov	r0, r3
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000ed00 	.word	0xe000ed00

08002658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002666:	2b00      	cmp	r3, #0
 8002668:	db0b      	blt.n	8002682 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	f003 021f 	and.w	r2, r3, #31
 8002670:	4907      	ldr	r1, [pc, #28]	@ (8002690 <__NVIC_EnableIRQ+0x38>)
 8002672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002676:	095b      	lsrs	r3, r3, #5
 8002678:	2001      	movs	r0, #1
 800267a:	fa00 f202 	lsl.w	r2, r0, r2
 800267e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	e000e100 	.word	0xe000e100

08002694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	6039      	str	r1, [r7, #0]
 800269e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	db0a      	blt.n	80026be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	490c      	ldr	r1, [pc, #48]	@ (80026e0 <__NVIC_SetPriority+0x4c>)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	0112      	lsls	r2, r2, #4
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	440b      	add	r3, r1
 80026b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026bc:	e00a      	b.n	80026d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	4908      	ldr	r1, [pc, #32]	@ (80026e4 <__NVIC_SetPriority+0x50>)
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	3b04      	subs	r3, #4
 80026cc:	0112      	lsls	r2, r2, #4
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	440b      	add	r3, r1
 80026d2:	761a      	strb	r2, [r3, #24]
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	e000e100 	.word	0xe000e100
 80026e4:	e000ed00 	.word	0xe000ed00

080026e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b089      	sub	sp, #36	@ 0x24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f1c3 0307 	rsb	r3, r3, #7
 8002702:	2b04      	cmp	r3, #4
 8002704:	bf28      	it	cs
 8002706:	2304      	movcs	r3, #4
 8002708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3304      	adds	r3, #4
 800270e:	2b06      	cmp	r3, #6
 8002710:	d902      	bls.n	8002718 <NVIC_EncodePriority+0x30>
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3b03      	subs	r3, #3
 8002716:	e000      	b.n	800271a <NVIC_EncodePriority+0x32>
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800271c:	f04f 32ff 	mov.w	r2, #4294967295
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43da      	mvns	r2, r3
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	401a      	ands	r2, r3
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002730:	f04f 31ff 	mov.w	r1, #4294967295
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	fa01 f303 	lsl.w	r3, r1, r3
 800273a:	43d9      	mvns	r1, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002740:	4313      	orrs	r3, r2
         );
}
 8002742:	4618      	mov	r0, r3
 8002744:	3724      	adds	r7, #36	@ 0x24
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800274e:	b480      	push	{r7}
 8002750:	b083      	sub	sp, #12
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	60da      	str	r2, [r3, #12]
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	615a      	str	r2, [r3, #20]
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027aa:	2b80      	cmp	r3, #128	@ 0x80
 80027ac:	bf0c      	ite	eq
 80027ae:	2301      	moveq	r3, #1
 80027b0:	2300      	movne	r3, #0
 80027b2:	b2db      	uxtb	r3, r3
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80027cc:	78fa      	ldrb	r2, [r7, #3]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	605a      	str	r2, [r3, #4]
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
	...

080027e0 <LL_AHB1_GRP1_EnableClock>:
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80027e8:	4b08      	ldr	r3, [pc, #32]	@ (800280c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80027ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027ec:	4907      	ldr	r1, [pc, #28]	@ (800280c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80027f4:	4b05      	ldr	r3, [pc, #20]	@ (800280c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80027f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4013      	ands	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027fe:	68fb      	ldr	r3, [r7, #12]
}
 8002800:	bf00      	nop
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	40023800 	.word	0x40023800

08002810 <LL_APB1_GRP1_EnableClock>:
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002818:	4b08      	ldr	r3, [pc, #32]	@ (800283c <LL_APB1_GRP1_EnableClock+0x2c>)
 800281a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800281c:	4907      	ldr	r1, [pc, #28]	@ (800283c <LL_APB1_GRP1_EnableClock+0x2c>)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4313      	orrs	r3, r2
 8002822:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002824:	4b05      	ldr	r3, [pc, #20]	@ (800283c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002826:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4013      	ands	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800282e:	68fb      	ldr	r3, [r7, #12]
}
 8002830:	bf00      	nop
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	40023800 	.word	0x40023800

08002840 <M8N_TransmitData>:
 0xBF
}; //Save current configuration, Devices: BBR, FLASH, I2C-EEPROM, SPI-FLASH


void M8N_TransmitData(unsigned char* data, unsigned char len)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	70fb      	strb	r3, [r7, #3]
	for(int i=0; i<len; i++)
 800284c:	2300      	movs	r3, #0
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	e011      	b.n	8002876 <M8N_TransmitData+0x36>
	{
		while(!LL_USART_IsActiveFlag_TXE(UART4));
 8002852:	bf00      	nop
 8002854:	480c      	ldr	r0, [pc, #48]	@ (8002888 <M8N_TransmitData+0x48>)
 8002856:	f7ff ffa0 	bl	800279a <LL_USART_IsActiveFlag_TXE>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0f9      	beq.n	8002854 <M8N_TransmitData+0x14>
		LL_USART_TransmitData8(UART4, *(data+i));
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	4413      	add	r3, r2
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	4619      	mov	r1, r3
 800286a:	4807      	ldr	r0, [pc, #28]	@ (8002888 <M8N_TransmitData+0x48>)
 800286c:	f7ff ffa8 	bl	80027c0 <LL_USART_TransmitData8>
	for(int i=0; i<len; i++)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	3301      	adds	r3, #1
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	78fb      	ldrb	r3, [r7, #3]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	429a      	cmp	r2, r3
 800287c:	dbe9      	blt.n	8002852 <M8N_TransmitData+0x12>
	}
}
 800287e:	bf00      	nop
 8002880:	bf00      	nop
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40004c00 	.word	0x40004c00

0800288c <M8N_Initialization>:

void M8N_Initialization(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
	N8M_UART4_Initialization();
 8002890:	f000 f824 	bl	80028dc <N8M_UART4_Initialization>

	M8N_TransmitData(&UBX_CFG_PRT[0], sizeof(UBX_CFG_PRT));
 8002894:	211c      	movs	r1, #28
 8002896:	480d      	ldr	r0, [pc, #52]	@ (80028cc <M8N_Initialization+0x40>)
 8002898:	f7ff ffd2 	bl	8002840 <M8N_TransmitData>
	HAL_Delay(100);
 800289c:	2064      	movs	r0, #100	@ 0x64
 800289e:	f002 f985 	bl	8004bac <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_MSG[0], sizeof(UBX_CFG_MSG));
 80028a2:	2110      	movs	r1, #16
 80028a4:	480a      	ldr	r0, [pc, #40]	@ (80028d0 <M8N_Initialization+0x44>)
 80028a6:	f7ff ffcb 	bl	8002840 <M8N_TransmitData>
	HAL_Delay(100);
 80028aa:	2064      	movs	r0, #100	@ 0x64
 80028ac:	f002 f97e 	bl	8004bac <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_RATE[0], sizeof(UBX_CFG_RATE));
 80028b0:	210e      	movs	r1, #14
 80028b2:	4808      	ldr	r0, [pc, #32]	@ (80028d4 <M8N_Initialization+0x48>)
 80028b4:	f7ff ffc4 	bl	8002840 <M8N_TransmitData>
	HAL_Delay(100);
 80028b8:	2064      	movs	r0, #100	@ 0x64
 80028ba:	f002 f977 	bl	8004bac <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_CFG[0], sizeof(UBX_CFG_CFG));
 80028be:	2115      	movs	r1, #21
 80028c0:	4805      	ldr	r0, [pc, #20]	@ (80028d8 <M8N_Initialization+0x4c>)
 80028c2:	f7ff ffbd 	bl	8002840 <M8N_TransmitData>
}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	0800b7fc 	.word	0x0800b7fc
 80028d0:	0800b818 	.word	0x0800b818
 80028d4:	0800b828 	.word	0x0800b828
 80028d8:	0800b838 	.word	0x0800b838

080028dc <N8M_UART4_Initialization>:

void N8M_UART4_Initialization(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08e      	sub	sp, #56	@ 0x38
 80028e0:	af00      	add	r7, sp, #0
	  LL_USART_InitTypeDef USART_InitStruct = {0};
 80028e2:	f107 031c 	add.w	r3, r7, #28
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	605a      	str	r2, [r3, #4]
 80028ec:	609a      	str	r2, [r3, #8]
 80028ee:	60da      	str	r2, [r3, #12]
 80028f0:	611a      	str	r2, [r3, #16]
 80028f2:	615a      	str	r2, [r3, #20]
 80028f4:	619a      	str	r2, [r3, #24]

	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f6:	1d3b      	adds	r3, r7, #4
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	605a      	str	r2, [r3, #4]
 80028fe:	609a      	str	r2, [r3, #8]
 8002900:	60da      	str	r2, [r3, #12]
 8002902:	611a      	str	r2, [r3, #16]
 8002904:	615a      	str	r2, [r3, #20]

	  /* Peripheral clock enable */
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8002906:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800290a:	f7ff ff81 	bl	8002810 <LL_APB1_GRP1_EnableClock>

	  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800290e:	2004      	movs	r0, #4
 8002910:	f7ff ff66 	bl	80027e0 <LL_AHB1_GRP1_EnableClock>
	  /**UART4 GPIO Configuration
	  PC10   ------> UART4_TX
	  PC11   ------> UART4_RX
	  */
	  GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 8002914:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002918:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800291a:	2302      	movs	r3, #2
 800291c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800291e:	2303      	movs	r3, #3
 8002920:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800292a:	2308      	movs	r3, #8
 800292c:	61bb      	str	r3, [r7, #24]
	  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800292e:	1d3b      	adds	r3, r7, #4
 8002930:	4619      	mov	r1, r3
 8002932:	4819      	ldr	r0, [pc, #100]	@ (8002998 <N8M_UART4_Initialization+0xbc>)
 8002934:	f004 faa1 	bl	8006e7a <LL_GPIO_Init>

	  /* UART4 interrupt Init */
	  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002938:	f7ff fe80 	bl	800263c <__NVIC_GetPriorityGrouping>
 800293c:	4603      	mov	r3, r0
 800293e:	2200      	movs	r2, #0
 8002940:	2100      	movs	r1, #0
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff fed0 	bl	80026e8 <NVIC_EncodePriority>
 8002948:	4603      	mov	r3, r0
 800294a:	4619      	mov	r1, r3
 800294c:	2034      	movs	r0, #52	@ 0x34
 800294e:	f7ff fea1 	bl	8002694 <__NVIC_SetPriority>
	  NVIC_EnableIRQ(UART4_IRQn);
 8002952:	2034      	movs	r0, #52	@ 0x34
 8002954:	f7ff fe80 	bl	8002658 <__NVIC_EnableIRQ>

	  /* USER CODE BEGIN UART4_Init 1 */

	  /* USER CODE END UART4_Init 1 */
	  USART_InitStruct.BaudRate = 9600;
 8002958:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800295c:	61fb      	str	r3, [r7, #28]
	  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800295e:	2300      	movs	r3, #0
 8002960:	623b      	str	r3, [r7, #32]
	  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002962:	2300      	movs	r3, #0
 8002964:	627b      	str	r3, [r7, #36]	@ 0x24
	  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002966:	2300      	movs	r3, #0
 8002968:	62bb      	str	r3, [r7, #40]	@ 0x28
	  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800296a:	230c      	movs	r3, #12
 800296c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800296e:	2300      	movs	r3, #0
 8002970:	633b      	str	r3, [r7, #48]	@ 0x30
	  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002972:	2300      	movs	r3, #0
 8002974:	637b      	str	r3, [r7, #52]	@ 0x34
	  LL_USART_Init(UART4, &USART_InitStruct);
 8002976:	f107 031c 	add.w	r3, r7, #28
 800297a:	4619      	mov	r1, r3
 800297c:	4807      	ldr	r0, [pc, #28]	@ (800299c <N8M_UART4_Initialization+0xc0>)
 800297e:	f005 fa07 	bl	8007d90 <LL_USART_Init>
	  LL_USART_ConfigAsyncMode(UART4);
 8002982:	4806      	ldr	r0, [pc, #24]	@ (800299c <N8M_UART4_Initialization+0xc0>)
 8002984:	f7ff fef3 	bl	800276e <LL_USART_ConfigAsyncMode>
	  LL_USART_Enable(UART4);
 8002988:	4804      	ldr	r0, [pc, #16]	@ (800299c <N8M_UART4_Initialization+0xc0>)
 800298a:	f7ff fee0 	bl	800274e <LL_USART_Enable>
}
 800298e:	bf00      	nop
 8002990:	3738      	adds	r7, #56	@ 0x38
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40020800 	.word	0x40020800
 800299c:	40004c00 	.word	0x40004c00

080029a0 <Quaternion_Update>:
float BNO080_Roll;
float BNO080_Pitch;
float BNO080_Yaw;

void Quaternion_Update(float* q)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b088      	sub	sp, #32
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;
	float norm;

	norm = invSqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);    // normalize quaternion
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	ed93 7a00 	vldr	s14, [r3]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	edd3 7a00 	vldr	s15, [r3]
 80029b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3304      	adds	r3, #4
 80029bc:	edd3 6a00 	vldr	s13, [r3]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3304      	adds	r3, #4
 80029c4:	edd3 7a00 	vldr	s15, [r3]
 80029c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3308      	adds	r3, #8
 80029d4:	edd3 6a00 	vldr	s13, [r3]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3308      	adds	r3, #8
 80029dc:	edd3 7a00 	vldr	s15, [r3]
 80029e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	330c      	adds	r3, #12
 80029ec:	edd3 6a00 	vldr	s13, [r3]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	330c      	adds	r3, #12
 80029f4:	edd3 7a00 	vldr	s15, [r3]
 80029f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a00:	eeb0 0a67 	vmov.f32	s0, s15
 8002a04:	f000 f90e 	bl	8002c24 <invSqrt>
 8002a08:	ed87 0a07 	vstr	s0, [r7, #28]
	
	q1 = q[0] * norm; //x
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	edd3 7a00 	vldr	s15, [r3]
 8002a12:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a1a:	edc7 7a06 	vstr	s15, [r7, #24]
	q2 = q[1] * norm; //y
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	3304      	adds	r3, #4
 8002a22:	edd3 7a00 	vldr	s15, [r3]
 8002a26:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a2e:	edc7 7a05 	vstr	s15, [r7, #20]
	q3 = q[2] * norm; //z
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3308      	adds	r3, #8
 8002a36:	edd3 7a00 	vldr	s15, [r3]
 8002a3a:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a42:	edc7 7a04 	vstr	s15, [r7, #16]
	q4 = q[3] * norm; //w
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	330c      	adds	r3, #12
 8002a4a:	edd3 7a00 	vldr	s15, [r3]
 8002a4e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a56:	edc7 7a03 	vstr	s15, [r7, #12]

	BNO080_Pitch = atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 8002a5a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a66:	edd7 6a06 	vldr	s13, [r7, #24]
 8002a6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a76:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002a7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a7e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002a82:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a86:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002a8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a92:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002a96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a9e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002aa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aa6:	eef0 0a67 	vmov.f32	s1, s15
 8002aaa:	eeb0 0a66 	vmov.f32	s0, s13
 8002aae:	f007 ff0d 	bl	800a8cc <atan2f>
 8002ab2:	eef0 7a40 	vmov.f32	s15, s0
 8002ab6:	4b55      	ldr	r3, [pc, #340]	@ (8002c0c <Quaternion_Update+0x26c>)
 8002ab8:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  = -asinf(2.0f * (q2*q4 - q1*q3));
 8002abc:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ac0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ac4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ac8:	edd7 6a06 	vldr	s13, [r7, #24]
 8002acc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ad0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ad4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ad8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002adc:	eeb0 0a67 	vmov.f32	s0, s15
 8002ae0:	f007 fec8 	bl	800a874 <asinf>
 8002ae4:	eef0 7a40 	vmov.f32	s15, s0
 8002ae8:	eef1 7a67 	vneg.f32	s15, s15
 8002aec:	4b48      	ldr	r3, [pc, #288]	@ (8002c10 <Quaternion_Update+0x270>)
 8002aee:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   = atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 8002af2:	ed97 7a06 	vldr	s14, [r7, #24]
 8002af6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002afa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002afe:	edd7 6a04 	vldr	s13, [r7, #16]
 8002b02:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b0e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002b12:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b16:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002b1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b1e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002b22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b26:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b2a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002b2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b32:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b36:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002b3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b3e:	eef0 0a67 	vmov.f32	s1, s15
 8002b42:	eeb0 0a66 	vmov.f32	s0, s13
 8002b46:	f007 fec1 	bl	800a8cc <atan2f>
 8002b4a:	eef0 7a40 	vmov.f32	s15, s0
 8002b4e:	4b31      	ldr	r3, [pc, #196]	@ (8002c14 <Quaternion_Update+0x274>)
 8002b50:	edc3 7a00 	vstr	s15, [r3]

	BNO080_Pitch *= _180_DIV_PI;
 8002b54:	4b2d      	ldr	r3, [pc, #180]	@ (8002c0c <Quaternion_Update+0x26c>)
 8002b56:	edd3 7a00 	vldr	s15, [r3]
 8002b5a:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002c18 <Quaternion_Update+0x278>
 8002b5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b62:	4b2a      	ldr	r3, [pc, #168]	@ (8002c0c <Quaternion_Update+0x26c>)
 8002b64:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  *= _180_DIV_PI;
 8002b68:	4b29      	ldr	r3, [pc, #164]	@ (8002c10 <Quaternion_Update+0x270>)
 8002b6a:	edd3 7a00 	vldr	s15, [r3]
 8002b6e:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002c18 <Quaternion_Update+0x278>
 8002b72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b76:	4b26      	ldr	r3, [pc, #152]	@ (8002c10 <Quaternion_Update+0x270>)
 8002b78:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   *= _180_DIV_PI;
 8002b7c:	4b25      	ldr	r3, [pc, #148]	@ (8002c14 <Quaternion_Update+0x274>)
 8002b7e:	edd3 7a00 	vldr	s15, [r3]
 8002b82:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8002c18 <Quaternion_Update+0x278>
 8002b86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b8a:	4b22      	ldr	r3, [pc, #136]	@ (8002c14 <Quaternion_Update+0x274>)
 8002b8c:	edc3 7a00 	vstr	s15, [r3]
	
	if(BNO080_Yaw>=0)
 8002b90:	4b20      	ldr	r3, [pc, #128]	@ (8002c14 <Quaternion_Update+0x274>)
 8002b92:	edd3 7a00 	vldr	s15, [r3]
 8002b96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b9e:	db0a      	blt.n	8002bb6 <Quaternion_Update+0x216>
		BNO080_Yaw = 360.f - BNO080_Yaw;
 8002ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8002c14 <Quaternion_Update+0x274>)
 8002ba2:	edd3 7a00 	vldr	s15, [r3]
 8002ba6:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8002c1c <Quaternion_Update+0x27c>
 8002baa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bae:	4b19      	ldr	r3, [pc, #100]	@ (8002c14 <Quaternion_Update+0x274>)
 8002bb0:	edc3 7a00 	vstr	s15, [r3]
 8002bb4:	e007      	b.n	8002bc6 <Quaternion_Update+0x226>
	else	
		BNO080_Yaw = -BNO080_Yaw;
 8002bb6:	4b17      	ldr	r3, [pc, #92]	@ (8002c14 <Quaternion_Update+0x274>)
 8002bb8:	edd3 7a00 	vldr	s15, [r3]
 8002bbc:	eef1 7a67 	vneg.f32	s15, s15
 8002bc0:	4b14      	ldr	r3, [pc, #80]	@ (8002c14 <Quaternion_Update+0x274>)
 8002bc2:	edc3 7a00 	vstr	s15, [r3]
	
	
	if(BNO080_Pitch>=0)
 8002bc6:	4b11      	ldr	r3, [pc, #68]	@ (8002c0c <Quaternion_Update+0x26c>)
 8002bc8:	edd3 7a00 	vldr	s15, [r3]
 8002bcc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd4:	db0a      	blt.n	8002bec <Quaternion_Update+0x24c>
		BNO080_Pitch = 180.f - BNO080_Pitch;
 8002bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8002c0c <Quaternion_Update+0x26c>)
 8002bd8:	edd3 7a00 	vldr	s15, [r3]
 8002bdc:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002c20 <Quaternion_Update+0x280>
 8002be0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002be4:	4b09      	ldr	r3, [pc, #36]	@ (8002c0c <Quaternion_Update+0x26c>)
 8002be6:	edc3 7a00 	vstr	s15, [r3]
	else
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
}
 8002bea:	e00b      	b.n	8002c04 <Quaternion_Update+0x264>
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
 8002bec:	4b07      	ldr	r3, [pc, #28]	@ (8002c0c <Quaternion_Update+0x26c>)
 8002bee:	edd3 7a00 	vldr	s15, [r3]
 8002bf2:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002c20 <Quaternion_Update+0x280>
 8002bf6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bfa:	eef1 7a67 	vneg.f32	s15, s15
 8002bfe:	4b03      	ldr	r3, [pc, #12]	@ (8002c0c <Quaternion_Update+0x26c>)
 8002c00:	edc3 7a00 	vstr	s15, [r3]
}
 8002c04:	bf00      	nop
 8002c06:	3720      	adds	r7, #32
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	200002dc 	.word	0x200002dc
 8002c10:	200002d8 	.word	0x200002d8
 8002c14:	200002e0 	.word	0x200002e0
 8002c18:	42652ee1 	.word	0x42652ee1
 8002c1c:	43b40000 	.word	0x43b40000
 8002c20:	43340000 	.word	0x43340000

08002c24 <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b087      	sub	sp, #28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8002c2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c32:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002c36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c3a:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8002c42:	f107 0310 	add.w	r3, r7, #16
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	105a      	asrs	r2, r3, #1
 8002c4e:	4b12      	ldr	r3, [pc, #72]	@ (8002c98 <invSqrt+0x74>)
 8002c50:	1a9b      	subs	r3, r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8002c54:	f107 030c 	add.w	r3, r7, #12
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002c5c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c60:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c68:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c70:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8002c74:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c78:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c80:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	ee07 3a90 	vmov	s15, r3
}
 8002c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c8e:	371c      	adds	r7, #28
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	5f3759df 	.word	0x5f3759df

08002c9c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002ca2:	463b      	mov	r3, r7
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002cae:	4b21      	ldr	r3, [pc, #132]	@ (8002d34 <MX_ADC1_Init+0x98>)
 8002cb0:	4a21      	ldr	r2, [pc, #132]	@ (8002d38 <MX_ADC1_Init+0x9c>)
 8002cb2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8002d34 <MX_ADC1_Init+0x98>)
 8002cb6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002cba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8002d34 <MX_ADC1_Init+0x98>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8002d34 <MX_ADC1_Init+0x98>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d34 <MX_ADC1_Init+0x98>)
 8002cca:	2201      	movs	r2, #1
 8002ccc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002cce:	4b19      	ldr	r3, [pc, #100]	@ (8002d34 <MX_ADC1_Init+0x98>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002cd6:	4b17      	ldr	r3, [pc, #92]	@ (8002d34 <MX_ADC1_Init+0x98>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002cdc:	4b15      	ldr	r3, [pc, #84]	@ (8002d34 <MX_ADC1_Init+0x98>)
 8002cde:	4a17      	ldr	r2, [pc, #92]	@ (8002d3c <MX_ADC1_Init+0xa0>)
 8002ce0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ce2:	4b14      	ldr	r3, [pc, #80]	@ (8002d34 <MX_ADC1_Init+0x98>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002ce8:	4b12      	ldr	r3, [pc, #72]	@ (8002d34 <MX_ADC1_Init+0x98>)
 8002cea:	2201      	movs	r2, #1
 8002cec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002cee:	4b11      	ldr	r3, [pc, #68]	@ (8002d34 <MX_ADC1_Init+0x98>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8002d34 <MX_ADC1_Init+0x98>)
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002cfc:	480d      	ldr	r0, [pc, #52]	@ (8002d34 <MX_ADC1_Init+0x98>)
 8002cfe:	f001 ff79 	bl	8004bf4 <HAL_ADC_Init>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002d08:	f000 fec0 	bl	8003a8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002d0c:	2308      	movs	r3, #8
 8002d0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002d10:	2301      	movs	r3, #1
 8002d12:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002d14:	2307      	movs	r3, #7
 8002d16:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d18:	463b      	mov	r3, r7
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4805      	ldr	r0, [pc, #20]	@ (8002d34 <MX_ADC1_Init+0x98>)
 8002d1e:	f002 f8db 	bl	8004ed8 <HAL_ADC_ConfigChannel>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002d28:	f000 feb0 	bl	8003a8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002d2c:	bf00      	nop
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	200002e4 	.word	0x200002e4
 8002d38:	40012000 	.word	0x40012000
 8002d3c:	0f000001 	.word	0x0f000001

08002d40 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08a      	sub	sp, #40	@ 0x28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d48:	f107 0314 	add.w	r3, r7, #20
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	605a      	str	r2, [r3, #4]
 8002d52:	609a      	str	r2, [r3, #8]
 8002d54:	60da      	str	r2, [r3, #12]
 8002d56:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a2e      	ldr	r2, [pc, #184]	@ (8002e18 <HAL_ADC_MspInit+0xd8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d156      	bne.n	8002e10 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	613b      	str	r3, [r7, #16]
 8002d66:	4b2d      	ldr	r3, [pc, #180]	@ (8002e1c <HAL_ADC_MspInit+0xdc>)
 8002d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6a:	4a2c      	ldr	r2, [pc, #176]	@ (8002e1c <HAL_ADC_MspInit+0xdc>)
 8002d6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d70:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d72:	4b2a      	ldr	r3, [pc, #168]	@ (8002e1c <HAL_ADC_MspInit+0xdc>)
 8002d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d7a:	613b      	str	r3, [r7, #16]
 8002d7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	4b26      	ldr	r3, [pc, #152]	@ (8002e1c <HAL_ADC_MspInit+0xdc>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d86:	4a25      	ldr	r2, [pc, #148]	@ (8002e1c <HAL_ADC_MspInit+0xdc>)
 8002d88:	f043 0302 	orr.w	r3, r3, #2
 8002d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d8e:	4b23      	ldr	r3, [pc, #140]	@ (8002e1c <HAL_ADC_MspInit+0xdc>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da6:	f107 0314 	add.w	r3, r7, #20
 8002daa:	4619      	mov	r1, r3
 8002dac:	481c      	ldr	r0, [pc, #112]	@ (8002e20 <HAL_ADC_MspInit+0xe0>)
 8002dae:	f002 ffb5 	bl	8005d1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002db2:	4b1c      	ldr	r3, [pc, #112]	@ (8002e24 <HAL_ADC_MspInit+0xe4>)
 8002db4:	4a1c      	ldr	r2, [pc, #112]	@ (8002e28 <HAL_ADC_MspInit+0xe8>)
 8002db6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002db8:	4b1a      	ldr	r3, [pc, #104]	@ (8002e24 <HAL_ADC_MspInit+0xe4>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dbe:	4b19      	ldr	r3, [pc, #100]	@ (8002e24 <HAL_ADC_MspInit+0xe4>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dc4:	4b17      	ldr	r3, [pc, #92]	@ (8002e24 <HAL_ADC_MspInit+0xe4>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8002dca:	4b16      	ldr	r3, [pc, #88]	@ (8002e24 <HAL_ADC_MspInit+0xe4>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002dd0:	4b14      	ldr	r3, [pc, #80]	@ (8002e24 <HAL_ADC_MspInit+0xe4>)
 8002dd2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002dd6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002dd8:	4b12      	ldr	r3, [pc, #72]	@ (8002e24 <HAL_ADC_MspInit+0xe4>)
 8002dda:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002dde:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002de0:	4b10      	ldr	r3, [pc, #64]	@ (8002e24 <HAL_ADC_MspInit+0xe4>)
 8002de2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002de6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002de8:	4b0e      	ldr	r3, [pc, #56]	@ (8002e24 <HAL_ADC_MspInit+0xe4>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dee:	4b0d      	ldr	r3, [pc, #52]	@ (8002e24 <HAL_ADC_MspInit+0xe4>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002df4:	480b      	ldr	r0, [pc, #44]	@ (8002e24 <HAL_ADC_MspInit+0xe4>)
 8002df6:	f002 fc21 	bl	800563c <HAL_DMA_Init>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002e00:	f000 fe44 	bl	8003a8c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a07      	ldr	r2, [pc, #28]	@ (8002e24 <HAL_ADC_MspInit+0xe4>)
 8002e08:	639a      	str	r2, [r3, #56]	@ 0x38
 8002e0a:	4a06      	ldr	r2, [pc, #24]	@ (8002e24 <HAL_ADC_MspInit+0xe4>)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002e10:	bf00      	nop
 8002e12:	3728      	adds	r7, #40	@ 0x28
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40012000 	.word	0x40012000
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	40020400 	.word	0x40020400
 8002e24:	2000032c 	.word	0x2000032c
 8002e28:	40026410 	.word	0x40026410

08002e2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002e32:	2300      	movs	r3, #0
 8002e34:	607b      	str	r3, [r7, #4]
 8002e36:	4b0c      	ldr	r3, [pc, #48]	@ (8002e68 <MX_DMA_Init+0x3c>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3a:	4a0b      	ldr	r2, [pc, #44]	@ (8002e68 <MX_DMA_Init+0x3c>)
 8002e3c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e42:	4b09      	ldr	r3, [pc, #36]	@ (8002e68 <MX_DMA_Init+0x3c>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e4a:	607b      	str	r3, [r7, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002e4e:	2200      	movs	r2, #0
 8002e50:	2100      	movs	r1, #0
 8002e52:	2038      	movs	r0, #56	@ 0x38
 8002e54:	f002 fbbb 	bl	80055ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002e58:	2038      	movs	r0, #56	@ 0x38
 8002e5a:	f002 fbd4 	bl	8005606 <HAL_NVIC_EnableIRQ>

}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40023800 	.word	0x40023800

08002e6c <LL_GPIO_SetOutputPin>:
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	619a      	str	r2, [r3, #24]
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <LL_GPIO_ResetOutputPin>:
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	041a      	lsls	r2, r3, #16
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	619a      	str	r2, [r3, #24]
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
	...

08002ea8 <LL_AHB1_GRP1_EnableClock>:
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002eb0:	4b08      	ldr	r3, [pc, #32]	@ (8002ed4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002eb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002eb4:	4907      	ldr	r1, [pc, #28]	@ (8002ed4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002ebc:	4b05      	ldr	r3, [pc, #20]	@ (8002ed4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002ebe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
}
 8002ec8:	bf00      	nop
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	40023800 	.word	0x40023800

08002ed8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ede:	463b      	mov	r3, r7
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	605a      	str	r2, [r3, #4]
 8002ee6:	609a      	str	r2, [r3, #8]
 8002ee8:	60da      	str	r2, [r3, #12]
 8002eea:	611a      	str	r2, [r3, #16]
 8002eec:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002eee:	2004      	movs	r0, #4
 8002ef0:	f7ff ffda 	bl	8002ea8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8002ef4:	2080      	movs	r0, #128	@ 0x80
 8002ef6:	f7ff ffd7 	bl	8002ea8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002efa:	2001      	movs	r0, #1
 8002efc:	f7ff ffd4 	bl	8002ea8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002f00:	2002      	movs	r0, #2
 8002f02:	f7ff ffd1 	bl	8002ea8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8002f06:	2008      	movs	r0, #8
 8002f08:	f7ff ffce 	bl	8002ea8 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8002f0c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002f10:	482e      	ldr	r0, [pc, #184]	@ (8002fcc <MX_GPIO_Init+0xf4>)
 8002f12:	f7ff ffab 	bl	8002e6c <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4
 8002f16:	f240 2117 	movw	r1, #535	@ 0x217
 8002f1a:	482c      	ldr	r0, [pc, #176]	@ (8002fcc <MX_GPIO_Init+0xf4>)
 8002f1c:	f7ff ffb4 	bl	8002e88 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_6);
 8002f20:	f44f 5182 	mov.w	r1, #4160	@ 0x1040
 8002f24:	482a      	ldr	r0, [pc, #168]	@ (8002fd0 <MX_GPIO_Init+0xf8>)
 8002f26:	f7ff ffaf 	bl	8002e88 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8002f2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f2e:	4829      	ldr	r0, [pc, #164]	@ (8002fd4 <MX_GPIO_Init+0xfc>)
 8002f30:	f7ff ffaa 	bl	8002e88 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2
 8002f34:	f242 2317 	movw	r3, #8727	@ 0x2217
 8002f38:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002f46:	2300      	movs	r3, #0
 8002f48:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f4a:	463b      	mov	r3, r7
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	481f      	ldr	r0, [pc, #124]	@ (8002fcc <MX_GPIO_Init+0xf4>)
 8002f50:	f003 ff93 	bl	8006e7a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_8;
 8002f54:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8002f58:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f62:	463b      	mov	r3, r7
 8002f64:	4619      	mov	r1, r3
 8002f66:	4819      	ldr	r0, [pc, #100]	@ (8002fcc <MX_GPIO_Init+0xf4>)
 8002f68:	f003 ff87 	bl	8006e7a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_6;
 8002f6c:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 8002f70:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002f72:	2301      	movs	r3, #1
 8002f74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002f76:	2300      	movs	r3, #0
 8002f78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f82:	463b      	mov	r3, r7
 8002f84:	4619      	mov	r1, r3
 8002f86:	4812      	ldr	r0, [pc, #72]	@ (8002fd0 <MX_GPIO_Init+0xf8>)
 8002f88:	f003 ff77 	bl	8006e7a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8002f8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f90:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002f92:	2301      	movs	r3, #1
 8002f94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002f96:	2300      	movs	r3, #0
 8002f98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa2:	463b      	mov	r3, r7
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	480b      	ldr	r0, [pc, #44]	@ (8002fd4 <MX_GPIO_Init+0xfc>)
 8002fa8:	f003 ff67 	bl	8006e7a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8002fac:	2380      	movs	r3, #128	@ 0x80
 8002fae:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fb8:	463b      	mov	r3, r7
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4804      	ldr	r0, [pc, #16]	@ (8002fd0 <MX_GPIO_Init+0xf8>)
 8002fbe:	f003 ff5c 	bl	8006e7a <LL_GPIO_Init>

}
 8002fc2:	bf00      	nop
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40020800 	.word	0x40020800
 8002fd0:	40020400 	.word	0x40020400
 8002fd4:	40020000 	.word	0x40020000

08002fd8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002fdc:	4b12      	ldr	r3, [pc, #72]	@ (8003028 <MX_I2C1_Init+0x50>)
 8002fde:	4a13      	ldr	r2, [pc, #76]	@ (800302c <MX_I2C1_Init+0x54>)
 8002fe0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002fe2:	4b11      	ldr	r3, [pc, #68]	@ (8003028 <MX_I2C1_Init+0x50>)
 8002fe4:	4a12      	ldr	r2, [pc, #72]	@ (8003030 <MX_I2C1_Init+0x58>)
 8002fe6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8003028 <MX_I2C1_Init+0x50>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002fee:	4b0e      	ldr	r3, [pc, #56]	@ (8003028 <MX_I2C1_Init+0x50>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8003028 <MX_I2C1_Init+0x50>)
 8002ff6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002ffa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8003028 <MX_I2C1_Init+0x50>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003002:	4b09      	ldr	r3, [pc, #36]	@ (8003028 <MX_I2C1_Init+0x50>)
 8003004:	2200      	movs	r2, #0
 8003006:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003008:	4b07      	ldr	r3, [pc, #28]	@ (8003028 <MX_I2C1_Init+0x50>)
 800300a:	2200      	movs	r2, #0
 800300c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800300e:	4b06      	ldr	r3, [pc, #24]	@ (8003028 <MX_I2C1_Init+0x50>)
 8003010:	2200      	movs	r2, #0
 8003012:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003014:	4804      	ldr	r0, [pc, #16]	@ (8003028 <MX_I2C1_Init+0x50>)
 8003016:	f003 f81d 	bl	8006054 <HAL_I2C_Init>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003020:	f000 fd34 	bl	8003a8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003024:	bf00      	nop
 8003026:	bd80      	pop	{r7, pc}
 8003028:	2000038c 	.word	0x2000038c
 800302c:	40005400 	.word	0x40005400
 8003030:	00061a80 	.word	0x00061a80

08003034 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b08a      	sub	sp, #40	@ 0x28
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800303c:	f107 0314 	add.w	r3, r7, #20
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	609a      	str	r2, [r3, #8]
 8003048:	60da      	str	r2, [r3, #12]
 800304a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a19      	ldr	r2, [pc, #100]	@ (80030b8 <HAL_I2C_MspInit+0x84>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d12c      	bne.n	80030b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	613b      	str	r3, [r7, #16]
 800305a:	4b18      	ldr	r3, [pc, #96]	@ (80030bc <HAL_I2C_MspInit+0x88>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305e:	4a17      	ldr	r2, [pc, #92]	@ (80030bc <HAL_I2C_MspInit+0x88>)
 8003060:	f043 0302 	orr.w	r3, r3, #2
 8003064:	6313      	str	r3, [r2, #48]	@ 0x30
 8003066:	4b15      	ldr	r3, [pc, #84]	@ (80030bc <HAL_I2C_MspInit+0x88>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003072:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003078:	2312      	movs	r3, #18
 800307a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307c:	2300      	movs	r3, #0
 800307e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003080:	2303      	movs	r3, #3
 8003082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003084:	2304      	movs	r3, #4
 8003086:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003088:	f107 0314 	add.w	r3, r7, #20
 800308c:	4619      	mov	r1, r3
 800308e:	480c      	ldr	r0, [pc, #48]	@ (80030c0 <HAL_I2C_MspInit+0x8c>)
 8003090:	f002 fe44 	bl	8005d1c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003094:	2300      	movs	r3, #0
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	4b08      	ldr	r3, [pc, #32]	@ (80030bc <HAL_I2C_MspInit+0x88>)
 800309a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309c:	4a07      	ldr	r2, [pc, #28]	@ (80030bc <HAL_I2C_MspInit+0x88>)
 800309e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80030a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80030a4:	4b05      	ldr	r3, [pc, #20]	@ (80030bc <HAL_I2C_MspInit+0x88>)
 80030a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80030b0:	bf00      	nop
 80030b2:	3728      	adds	r7, #40	@ 0x28
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40005400 	.word	0x40005400
 80030bc:	40023800 	.word	0x40023800
 80030c0:	40020400 	.word	0x40020400

080030c4 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f043 0201 	orr.w	r2, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	601a      	str	r2, [r3, #0]
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a1a      	ldr	r2, [r3, #32]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	621a      	str	r2, [r3, #32]
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a1a      	ldr	r2, [r3, #32]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	43db      	mvns	r3, r3
 8003118:	401a      	ands	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	621a      	str	r2, [r3, #32]
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <LL_USART_IsActiveFlag_TXE>:
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800313a:	2b80      	cmp	r3, #128	@ 0x80
 800313c:	bf0c      	ite	eq
 800313e:	2301      	moveq	r3, #1
 8003140:	2300      	movne	r3, #0
 8003142:	b2db      	uxtb	r3, r3
}
 8003144:	4618      	mov	r0, r3
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <LL_USART_EnableIT_RXNE>:
{
 8003150:	b480      	push	{r7}
 8003152:	b089      	sub	sp, #36	@ 0x24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	330c      	adds	r3, #12
 800315c:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	e853 3f00 	ldrex	r3, [r3]
 8003164:	60bb      	str	r3, [r7, #8]
   return(result);
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	f043 0320 	orr.w	r3, r3, #32
 800316c:	61fb      	str	r3, [r7, #28]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	330c      	adds	r3, #12
 8003172:	69fa      	ldr	r2, [r7, #28]
 8003174:	61ba      	str	r2, [r7, #24]
 8003176:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003178:	6979      	ldr	r1, [r7, #20]
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	e841 2300 	strex	r3, r2, [r1]
 8003180:	613b      	str	r3, [r7, #16]
   return(result);
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1e7      	bne.n	8003158 <LL_USART_EnableIT_RXNE+0x8>
}
 8003188:	bf00      	nop
 800318a:	bf00      	nop
 800318c:	3724      	adds	r7, #36	@ 0x24
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <LL_USART_TransmitData8>:
{
 8003196:	b480      	push	{r7}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
 800319e:	460b      	mov	r3, r1
 80031a0:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80031a2:	78fa      	ldrb	r2, [r7, #3]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	605a      	str	r2, [r3, #4]
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <LL_GPIO_SetOutputPin>:
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	619a      	str	r2, [r3, #24]
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <LL_GPIO_ResetOutputPin>:
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	041a      	lsls	r2, r3, #16
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	619a      	str	r2, [r3, #24]
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b085      	sub	sp, #20
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	4013      	ands	r3, r2
 8003204:	041a      	lsls	r2, r3, #16
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	43d9      	mvns	r1, r3
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	400b      	ands	r3, r1
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	619a      	str	r2, [r3, #24]
}
 8003214:	bf00      	nop
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char* p, int len)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++)
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]
 8003230:	e011      	b.n	8003256 <_write+0x36>
	{
		while(!LL_USART_IsActiveFlag_TXE(USART6));
 8003232:	bf00      	nop
 8003234:	480c      	ldr	r0, [pc, #48]	@ (8003268 <_write+0x48>)
 8003236:	f7ff ff78 	bl	800312a <LL_USART_IsActiveFlag_TXE>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0f9      	beq.n	8003234 <_write+0x14>
		LL_USART_TransmitData8(USART6, *(p+i));
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	4413      	add	r3, r2
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	4619      	mov	r1, r3
 800324a:	4807      	ldr	r0, [pc, #28]	@ (8003268 <_write+0x48>)
 800324c:	f7ff ffa3 	bl	8003196 <LL_USART_TransmitData8>
	for(int i=0; i<len; i++)
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	3301      	adds	r3, #1
 8003254:	617b      	str	r3, [r7, #20]
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	429a      	cmp	r2, r3
 800325c:	dbe9      	blt.n	8003232 <_write+0x12>
	}
	return len;
 800325e:	687b      	ldr	r3, [r7, #4]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3718      	adds	r7, #24
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40011400 	.word	0x40011400

0800326c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800326c:	b5b0      	push	{r4, r5, r7, lr}
 800326e:	b092      	sub	sp, #72	@ 0x48
 8003270:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	float q[4];
	float quatRadianAccuracy;
	unsigned char buf_read[16] = {0};
 8003272:	2300      	movs	r3, #0
 8003274:	61bb      	str	r3, [r7, #24]
 8003276:	f107 031c 	add.w	r3, r7, #28
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	605a      	str	r2, [r3, #4]
 8003280:	609a      	str	r2, [r3, #8]
	unsigned char buf_write[16] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};
 8003282:	4bc9      	ldr	r3, [pc, #804]	@ (80035a8 <main+0x33c>)
 8003284:	f107 0408 	add.w	r4, r7, #8
 8003288:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800328a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800328e:	f001 fc1b 	bl	8004ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003292:	f000 f9af 	bl	80035f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003296:	f7ff fe1f 	bl	8002ed8 <MX_GPIO_Init>
  MX_DMA_Init();
 800329a:	f7ff fdc7 	bl	8002e2c <MX_DMA_Init>
  MX_TIM3_Init();
 800329e:	f001 f8a1 	bl	80043e4 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 80032a2:	f001 fb87 	bl	80049b4 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 80032a6:	f000 fca5 	bl	8003bf4 <MX_SPI2_Init>
  MX_SPI1_Init();
 80032aa:	f000 fc51 	bl	8003b50 <MX_SPI1_Init>
  MX_SPI3_Init();
 80032ae:	f000 fcf5 	bl	8003c9c <MX_SPI3_Init>
  MX_UART4_Init();
 80032b2:	f001 faa5 	bl	8004800 <MX_UART4_Init>
  MX_UART5_Init();
 80032b6:	f001 fb05 	bl	80048c4 <MX_UART5_Init>
  MX_TIM5_Init();
 80032ba:	f001 f907 	bl	80044cc <MX_TIM5_Init>
  MX_I2C1_Init();
 80032be:	f7ff fe8b 	bl	8002fd8 <MX_I2C1_Init>
  MX_ADC1_Init();
 80032c2:	f7ff fceb 	bl	8002c9c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM3);
 80032c6:	48b9      	ldr	r0, [pc, #740]	@ (80035ac <main+0x340>)
 80032c8:	f7ff fefc 	bl	80030c4 <LL_TIM_EnableCounter>

  LL_USART_EnableIT_RXNE(USART6);
 80032cc:	48b8      	ldr	r0, [pc, #736]	@ (80035b0 <main+0x344>)
 80032ce:	f7ff ff3f 	bl	8003150 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART4);
 80032d2:	48b8      	ldr	r0, [pc, #736]	@ (80035b4 <main+0x348>)
 80032d4:	f7ff ff3c 	bl	8003150 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART5);
 80032d8:	48b7      	ldr	r0, [pc, #732]	@ (80035b8 <main+0x34c>)
 80032da:	f7ff ff39 	bl	8003150 <LL_USART_EnableIT_RXNE>

  BNO080_Initialization();
 80032de:	f7fd ff61 	bl	80011a4 <BNO080_Initialization>
  BNO080_enableRotationVector(2500); // 400Hz
 80032e2:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80032e6:	f7fe fa9c 	bl	8001822 <BNO080_enableRotationVector>

  ICM20602_Initialization();
 80032ea:	f7fe ff07 	bl	80020fc <ICM20602_Initialization>
  LPS22HH_Initialization();
 80032ee:	f7ff f915 	bl	800251c <LPS22HH_Initialization>
  M8N_Initialization();
 80032f2:	f7ff facb 	bl	800288c <M8N_Initialization>

  LL_TIM_EnableCounter(TIM5);
 80032f6:	48b1      	ldr	r0, [pc, #708]	@ (80035bc <main+0x350>)
 80032f8:	f7ff fee4 	bl	80030c4 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM5,LL_TIM_CHANNEL_CH1);
 80032fc:	2101      	movs	r1, #1
 80032fe:	48af      	ldr	r0, [pc, #700]	@ (80035bc <main+0x350>)
 8003300:	f7ff fef0 	bl	80030e4 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5,LL_TIM_CHANNEL_CH2);
 8003304:	2110      	movs	r1, #16
 8003306:	48ad      	ldr	r0, [pc, #692]	@ (80035bc <main+0x350>)
 8003308:	f7ff feec 	bl	80030e4 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5,LL_TIM_CHANNEL_CH3);
 800330c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003310:	48aa      	ldr	r0, [pc, #680]	@ (80035bc <main+0x350>)
 8003312:	f7ff fee7 	bl	80030e4 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5,LL_TIM_CHANNEL_CH4);
 8003316:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800331a:	48a8      	ldr	r0, [pc, #672]	@ (80035bc <main+0x350>)
 800331c:	f7ff fee2 	bl	80030e4 <LL_TIM_CC_EnableChannel>

  HAL_ADC_Start_DMA(&hadc1, &adcVal, 1);
 8003320:	1dbb      	adds	r3, r7, #6
 8003322:	2201      	movs	r2, #1
 8003324:	4619      	mov	r1, r3
 8003326:	48a6      	ldr	r0, [pc, #664]	@ (80035c0 <main+0x354>)
 8003328:	f001 fca8 	bl	8004c7c <HAL_ADC_Start_DMA>



  while(Is_iBus_Received() == 0)
 800332c:	e013      	b.n	8003356 <main+0xea>
  {
	  LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4);
 800332e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003332:	489e      	ldr	r0, [pc, #632]	@ (80035ac <main+0x340>)
 8003334:	f7ff fed6 	bl	80030e4 <LL_TIM_CC_EnableChannel>
	  TIM3->PSC = 3000; // buzzer pwm
 8003338:	4b9c      	ldr	r3, [pc, #624]	@ (80035ac <main+0x340>)
 800333a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800333e:	629a      	str	r2, [r3, #40]	@ 0x28
	  HAL_Delay(200);
 8003340:	20c8      	movs	r0, #200	@ 0xc8
 8003342:	f001 fc33 	bl	8004bac <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003346:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800334a:	4898      	ldr	r0, [pc, #608]	@ (80035ac <main+0x340>)
 800334c:	f7ff fedb 	bl	8003106 <LL_TIM_CC_DisableChannel>
	  HAL_Delay(200);
 8003350:	20c8      	movs	r0, #200	@ 0xc8
 8003352:	f001 fc2b 	bl	8004bac <HAL_Delay>
  while(Is_iBus_Received() == 0)
 8003356:	f000 f9dd 	bl	8003714 <Is_iBus_Received>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0e6      	beq.n	800332e <main+0xc2>
  }

  if(iBus.SwC == 2000)
 8003360:	4b98      	ldr	r3, [pc, #608]	@ (80035c4 <main+0x358>)
 8003362:	899b      	ldrh	r3, [r3, #12]
 8003364:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003368:	d12f      	bne.n	80033ca <main+0x15e>
  {
	  LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4);
 800336a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800336e:	488f      	ldr	r0, [pc, #572]	@ (80035ac <main+0x340>)
 8003370:	f7ff feb8 	bl	80030e4 <LL_TIM_CC_EnableChannel>
	  TIM3->PSC = 1500;
 8003374:	4b8d      	ldr	r3, [pc, #564]	@ (80035ac <main+0x340>)
 8003376:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800337a:	629a      	str	r2, [r3, #40]	@ 0x28
	  HAL_Delay(200);
 800337c:	20c8      	movs	r0, #200	@ 0xc8
 800337e:	f001 fc15 	bl	8004bac <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003382:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003386:	4889      	ldr	r0, [pc, #548]	@ (80035ac <main+0x340>)
 8003388:	f7ff febd 	bl	8003106 <LL_TIM_CC_DisableChannel>

	  ESC_Calibration();
 800338c:	f000 f9e2 	bl	8003754 <ESC_Calibration>
	  while(iBus.SwC != 1000)
 8003390:	e015      	b.n	80033be <main+0x152>
	  {
		  Is_iBus_Received();
 8003392:	f000 f9bf 	bl	8003714 <Is_iBus_Received>

		  LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4);
 8003396:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800339a:	4884      	ldr	r0, [pc, #528]	@ (80035ac <main+0x340>)
 800339c:	f7ff fea2 	bl	80030e4 <LL_TIM_CC_EnableChannel>
		  TIM3->PSC = 1500;
 80033a0:	4b82      	ldr	r3, [pc, #520]	@ (80035ac <main+0x340>)
 80033a2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80033a6:	629a      	str	r2, [r3, #40]	@ 0x28
		  HAL_Delay(200);
 80033a8:	20c8      	movs	r0, #200	@ 0xc8
 80033aa:	f001 fbff 	bl	8004bac <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80033ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80033b2:	487e      	ldr	r0, [pc, #504]	@ (80035ac <main+0x340>)
 80033b4:	f7ff fea7 	bl	8003106 <LL_TIM_CC_DisableChannel>
		  HAL_Delay(200);
 80033b8:	20c8      	movs	r0, #200	@ 0xc8
 80033ba:	f001 fbf7 	bl	8004bac <HAL_Delay>
	  while(iBus.SwC != 1000)
 80033be:	4b81      	ldr	r3, [pc, #516]	@ (80035c4 <main+0x358>)
 80033c0:	899b      	ldrh	r3, [r3, #12]
 80033c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80033c6:	d1e4      	bne.n	8003392 <main+0x126>
 80033c8:	e049      	b.n	800345e <main+0x1f2>
	  }
  }
  else if(iBus.SwC == 1500)
 80033ca:	4b7e      	ldr	r3, [pc, #504]	@ (80035c4 <main+0x358>)
 80033cc:	899b      	ldrh	r3, [r3, #12]
 80033ce:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d143      	bne.n	800345e <main+0x1f2>
  {
	  LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4);
 80033d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80033da:	4874      	ldr	r0, [pc, #464]	@ (80035ac <main+0x340>)
 80033dc:	f7ff fe82 	bl	80030e4 <LL_TIM_CC_EnableChannel>
	  TIM3->PSC = 1500;
 80033e0:	4b72      	ldr	r3, [pc, #456]	@ (80035ac <main+0x340>)
 80033e2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80033e6:	629a      	str	r2, [r3, #40]	@ 0x28
	  HAL_Delay(200);
 80033e8:	20c8      	movs	r0, #200	@ 0xc8
 80033ea:	f001 fbdf 	bl	8004bac <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80033ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80033f2:	486e      	ldr	r0, [pc, #440]	@ (80035ac <main+0x340>)
 80033f4:	f7ff fe87 	bl	8003106 <LL_TIM_CC_DisableChannel>

	  BNO080_Calibration();
 80033f8:	f000 f9da 	bl	80037b0 <BNO080_Calibration>
	  while(iBus.SwC != 1000)
 80033fc:	e015      	b.n	800342a <main+0x1be>
	  {
		  Is_iBus_Received();
 80033fe:	f000 f989 	bl	8003714 <Is_iBus_Received>

		  LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4);
 8003402:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003406:	4869      	ldr	r0, [pc, #420]	@ (80035ac <main+0x340>)
 8003408:	f7ff fe6c 	bl	80030e4 <LL_TIM_CC_EnableChannel>
		  TIM3->PSC = 1500;
 800340c:	4b67      	ldr	r3, [pc, #412]	@ (80035ac <main+0x340>)
 800340e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003412:	629a      	str	r2, [r3, #40]	@ 0x28
		  HAL_Delay(200);
 8003414:	20c8      	movs	r0, #200	@ 0xc8
 8003416:	f001 fbc9 	bl	8004bac <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800341a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800341e:	4863      	ldr	r0, [pc, #396]	@ (80035ac <main+0x340>)
 8003420:	f7ff fe71 	bl	8003106 <LL_TIM_CC_DisableChannel>
		  HAL_Delay(200);
 8003424:	20c8      	movs	r0, #200	@ 0xc8
 8003426:	f001 fbc1 	bl	8004bac <HAL_Delay>
	  while(iBus.SwC != 1000)
 800342a:	4b66      	ldr	r3, [pc, #408]	@ (80035c4 <main+0x358>)
 800342c:	899b      	ldrh	r3, [r3, #12]
 800342e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003432:	d1e4      	bne.n	80033fe <main+0x192>
	  }
  }

  while(Is_iBus_Throttle_Min() == 0)
 8003434:	e013      	b.n	800345e <main+0x1f2>
  {
	  LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4);
 8003436:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800343a:	485c      	ldr	r0, [pc, #368]	@ (80035ac <main+0x340>)
 800343c:	f7ff fe52 	bl	80030e4 <LL_TIM_CC_EnableChannel>
	  TIM3->PSC = 1000;
 8003440:	4b5a      	ldr	r3, [pc, #360]	@ (80035ac <main+0x340>)
 8003442:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003446:	629a      	str	r2, [r3, #40]	@ 0x28
	  HAL_Delay(150);
 8003448:	2096      	movs	r0, #150	@ 0x96
 800344a:	f001 fbaf 	bl	8004bac <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800344e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003452:	4856      	ldr	r0, [pc, #344]	@ (80035ac <main+0x340>)
 8003454:	f7ff fe57 	bl	8003106 <LL_TIM_CC_DisableChannel>
	  HAL_Delay(150);
 8003458:	2096      	movs	r0, #150	@ 0x96
 800345a:	f001 fba7 	bl	8004bac <HAL_Delay>
  while(Is_iBus_Throttle_Min() == 0)
 800345e:	f000 f933 	bl	80036c8 <Is_iBus_Throttle_Min>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0e6      	beq.n	8003436 <main+0x1ca>
//  float p = 0.0, i = 0.0, d = 0.0;
//  EP_PIDGain_Read(0, &p, &i, &d);
//  printf("%f %f %f", p, i, d);

  // buzzer on
  LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4);
 8003468:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800346c:	484f      	ldr	r0, [pc, #316]	@ (80035ac <main+0x340>)
 800346e:	f7ff fe39 	bl	80030e4 <LL_TIM_CC_EnableChannel>
  TIM3->PSC = 2000; // buzzer pwm
 8003472:	4b4e      	ldr	r3, [pc, #312]	@ (80035ac <main+0x340>)
 8003474:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003478:	629a      	str	r2, [r3, #40]	@ 0x28
  //TIM3->CCR4 = TIM3->ARR/2; // PWM Width
  HAL_Delay(100);
 800347a:	2064      	movs	r0, #100	@ 0x64
 800347c:	f001 fb96 	bl	8004bac <HAL_Delay>
  TIM3->PSC = 1500; // buzzer pwm
 8003480:	4b4a      	ldr	r3, [pc, #296]	@ (80035ac <main+0x340>)
 8003482:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003486:	629a      	str	r2, [r3, #40]	@ 0x28
   HAL_Delay(100);
 8003488:	2064      	movs	r0, #100	@ 0x64
 800348a:	f001 fb8f 	bl	8004bac <HAL_Delay>
  TIM3->PSC = 1000; // buzzer pwm
 800348e:	4b47      	ldr	r3, [pc, #284]	@ (80035ac <main+0x340>)
 8003490:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003494:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_Delay(100);
 8003496:	2064      	movs	r0, #100	@ 0x64
 8003498:	f001 fb88 	bl	8004bac <HAL_Delay>
  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800349c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80034a0:	4842      	ldr	r0, [pc, #264]	@ (80035ac <main+0x340>)
 80034a2:	f7ff fe30 	bl	8003106 <LL_TIM_CC_DisableChannel>
  {

	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */
	  batVolt = adcVal * 0.003619f;
 80034a6:	88fb      	ldrh	r3, [r7, #6]
 80034a8:	ee07 3a90 	vmov	s15, r3
 80034ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034b0:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80035c8 <main+0x35c>
 80034b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034b8:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
	  //printf("%d\t%.2f\n", adcVal, batVolt);
	  if(batVolt < 10.0f)
 80034bc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80034c0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80034c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034cc:	d509      	bpl.n	80034e2 <main+0x276>
	  {
		  TIM3->PSC = 1000;
 80034ce:	4b37      	ldr	r3, [pc, #220]	@ (80035ac <main+0x340>)
 80034d0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80034d4:	629a      	str	r2, [r3, #40]	@ 0x28
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80034d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80034da:	4834      	ldr	r0, [pc, #208]	@ (80035ac <main+0x340>)
 80034dc:	f7ff fe02 	bl	80030e4 <LL_TIM_CC_EnableChannel>
 80034e0:	e004      	b.n	80034ec <main+0x280>
	  }
	  else
	  {
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80034e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80034e6:	4831      	ldr	r0, [pc, #196]	@ (80035ac <main+0x340>)
 80034e8:	f7ff fe0d 	bl	8003106 <LL_TIM_CC_DisableChannel>
	  }

	  if(BNO080_dataAvailable() == 1)
 80034ec:	f7fd fef0 	bl	80012d0 <BNO080_dataAvailable>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d135      	bne.n	8003562 <main+0x2f6>
	  {
		  q[0] = BNO080_getQuatI();
 80034f6:	f7fe f8a5 	bl	8001644 <BNO080_getQuatI>
 80034fa:	eef0 7a40 	vmov.f32	s15, s0
 80034fe:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		  q[1] = BNO080_getQuatJ();
 8003502:	f7fe f8b5 	bl	8001670 <BNO080_getQuatJ>
 8003506:	eef0 7a40 	vmov.f32	s15, s0
 800350a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		  q[2] = BNO080_getQuatK();
 800350e:	f7fe f8c5 	bl	800169c <BNO080_getQuatK>
 8003512:	eef0 7a40 	vmov.f32	s15, s0
 8003516:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		  q[3] = BNO080_getQuatReal();
 800351a:	f7fe f8d5 	bl	80016c8 <BNO080_getQuatReal>
 800351e:	eef0 7a40 	vmov.f32	s15, s0
 8003522:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		  quatRadianAccuracy = BNO080_getQuatRadianAccuracy();
 8003526:	f7fe f8e5 	bl	80016f4 <BNO080_getQuatRadianAccuracy>
 800352a:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38

		  Quaternion_Update(&q[0]);
 800352e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003532:	4618      	mov	r0, r3
 8003534:	f7ff fa34 	bl	80029a0 <Quaternion_Update>

		 printf("%.2f\t%.2f\n", BNO080_Roll, BNO080_Pitch);
 8003538:	4b24      	ldr	r3, [pc, #144]	@ (80035cc <main+0x360>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f7fd f803 	bl	8000548 <__aeabi_f2d>
 8003542:	4604      	mov	r4, r0
 8003544:	460d      	mov	r5, r1
 8003546:	4b22      	ldr	r3, [pc, #136]	@ (80035d0 <main+0x364>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f7fc fffc 	bl	8000548 <__aeabi_f2d>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	e9cd 2300 	strd	r2, r3, [sp]
 8003558:	4622      	mov	r2, r4
 800355a:	462b      	mov	r3, r5
 800355c:	481d      	ldr	r0, [pc, #116]	@ (80035d4 <main+0x368>)
 800355e:	f005 f9b1 	bl	80088c4 <iprintf>
	  //
	  //			  printf("LAT : %ld\t LON: %ld\t height : %ld",posllh.lat, posllh.lon, posllh.height);
	  //		  }
	  //	  }

	  if(ibus_rx_cplt_flag == 1)
 8003562:	4b1d      	ldr	r3, [pc, #116]	@ (80035d8 <main+0x36c>)
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d19d      	bne.n	80034a6 <main+0x23a>
	  {
		  ibus_rx_cplt_flag = 0;
 800356a:	4b1b      	ldr	r3, [pc, #108]	@ (80035d8 <main+0x36c>)
 800356c:	2200      	movs	r2, #0
 800356e:	701a      	strb	r2, [r3, #0]
		  if(iBus_Check_CHKSUM(&ibus_rx_buf[0],32) == 1)
 8003570:	2120      	movs	r1, #32
 8003572:	481a      	ldr	r0, [pc, #104]	@ (80035dc <main+0x370>)
 8003574:	f7fe fb6e 	bl	8001c54 <iBus_Check_CHKSUM>
 8003578:	4603      	mov	r3, r0
 800357a:	2b01      	cmp	r3, #1
 800357c:	d193      	bne.n	80034a6 <main+0x23a>
		  {
			  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 800357e:	2104      	movs	r1, #4
 8003580:	4817      	ldr	r0, [pc, #92]	@ (80035e0 <main+0x374>)
 8003582:	f7ff fe34 	bl	80031ee <LL_GPIO_TogglePin>
			  iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8003586:	490f      	ldr	r1, [pc, #60]	@ (80035c4 <main+0x358>)
 8003588:	4814      	ldr	r0, [pc, #80]	@ (80035dc <main+0x370>)
 800358a:	f7fe fb98 	bl	8001cbe <iBus_Parsing>

			  if(iBus_isActiveFailsafe(&iBus) == 1)
 800358e:	480d      	ldr	r0, [pc, #52]	@ (80035c4 <main+0x358>)
 8003590:	f7fe fc0d 	bl	8001dae <iBus_isActiveFailsafe>
 8003594:	4603      	mov	r3, r0
 8003596:	2b01      	cmp	r3, #1
 8003598:	d124      	bne.n	80035e4 <main+0x378>
			  {
				  LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4);
 800359a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800359e:	4803      	ldr	r0, [pc, #12]	@ (80035ac <main+0x340>)
 80035a0:	f7ff fda0 	bl	80030e4 <LL_TIM_CC_EnableChannel>
 80035a4:	e77f      	b.n	80034a6 <main+0x23a>
 80035a6:	bf00      	nop
 80035a8:	0800b6bc 	.word	0x0800b6bc
 80035ac:	40000400 	.word	0x40000400
 80035b0:	40011400 	.word	0x40011400
 80035b4:	40004c00 	.word	0x40004c00
 80035b8:	40005000 	.word	0x40005000
 80035bc:	40000c00 	.word	0x40000c00
 80035c0:	200002e4 	.word	0x200002e4
 80035c4:	200002c0 	.word	0x200002c0
 80035c8:	3b6d2cbf 	.word	0x3b6d2cbf
 80035cc:	200002d8 	.word	0x200002d8
 80035d0:	200002dc 	.word	0x200002dc
 80035d4:	0800b6b0 	.word	0x0800b6b0
 80035d8:	20000430 	.word	0x20000430
 80035dc:	20000410 	.word	0x20000410
 80035e0:	40020800 	.word	0x40020800
			  }
			  else
			  {
				  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80035e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80035e8:	4801      	ldr	r0, [pc, #4]	@ (80035f0 <main+0x384>)
 80035ea:	f7ff fd8c 	bl	8003106 <LL_TIM_CC_DisableChannel>
	  batVolt = adcVal * 0.003619f;
 80035ee:	e75a      	b.n	80034a6 <main+0x23a>
 80035f0:	40000400 	.word	0x40000400

080035f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b094      	sub	sp, #80	@ 0x50
 80035f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035fa:	f107 0320 	add.w	r3, r7, #32
 80035fe:	2230      	movs	r2, #48	@ 0x30
 8003600:	2100      	movs	r1, #0
 8003602:	4618      	mov	r0, r3
 8003604:	f005 faa6 	bl	8008b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003608:	f107 030c 	add.w	r3, r7, #12
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	609a      	str	r2, [r3, #8]
 8003614:	60da      	str	r2, [r3, #12]
 8003616:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003618:	2300      	movs	r3, #0
 800361a:	60bb      	str	r3, [r7, #8]
 800361c:	4b28      	ldr	r3, [pc, #160]	@ (80036c0 <SystemClock_Config+0xcc>)
 800361e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003620:	4a27      	ldr	r2, [pc, #156]	@ (80036c0 <SystemClock_Config+0xcc>)
 8003622:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003626:	6413      	str	r3, [r2, #64]	@ 0x40
 8003628:	4b25      	ldr	r3, [pc, #148]	@ (80036c0 <SystemClock_Config+0xcc>)
 800362a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003634:	2300      	movs	r3, #0
 8003636:	607b      	str	r3, [r7, #4]
 8003638:	4b22      	ldr	r3, [pc, #136]	@ (80036c4 <SystemClock_Config+0xd0>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a21      	ldr	r2, [pc, #132]	@ (80036c4 <SystemClock_Config+0xd0>)
 800363e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003642:	6013      	str	r3, [r2, #0]
 8003644:	4b1f      	ldr	r3, [pc, #124]	@ (80036c4 <SystemClock_Config+0xd0>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800364c:	607b      	str	r3, [r7, #4]
 800364e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003650:	2301      	movs	r3, #1
 8003652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003654:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003658:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800365a:	2302      	movs	r3, #2
 800365c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800365e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003662:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003664:	2304      	movs	r3, #4
 8003666:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003668:	23a8      	movs	r3, #168	@ 0xa8
 800366a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800366c:	2302      	movs	r3, #2
 800366e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003670:	2304      	movs	r3, #4
 8003672:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003674:	f107 0320 	add.w	r3, r7, #32
 8003678:	4618      	mov	r0, r3
 800367a:	f002 fe2f 	bl	80062dc <HAL_RCC_OscConfig>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003684:	f000 fa02 	bl	8003a8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003688:	230f      	movs	r3, #15
 800368a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800368c:	2302      	movs	r3, #2
 800368e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003690:	2300      	movs	r3, #0
 8003692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003694:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003698:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800369a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800369e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80036a0:	f107 030c 	add.w	r3, r7, #12
 80036a4:	2105      	movs	r1, #5
 80036a6:	4618      	mov	r0, r3
 80036a8:	f003 f890 	bl	80067cc <HAL_RCC_ClockConfig>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80036b2:	f000 f9eb 	bl	8003a8c <Error_Handler>
  }
}
 80036b6:	bf00      	nop
 80036b8:	3750      	adds	r7, #80	@ 0x50
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40023800 	.word	0x40023800
 80036c4:	40007000 	.word	0x40007000

080036c8 <Is_iBus_Throttle_Min>:

/* USER CODE BEGIN 4 */
int Is_iBus_Throttle_Min(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag == 1)
 80036cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003708 <Is_iBus_Throttle_Min+0x40>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d115      	bne.n	8003700 <Is_iBus_Throttle_Min+0x38>
	{
		ibus_rx_cplt_flag = 0;
 80036d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003708 <Is_iBus_Throttle_Min+0x40>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	701a      	strb	r2, [r3, #0]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0],32) == 1)
 80036da:	2120      	movs	r1, #32
 80036dc:	480b      	ldr	r0, [pc, #44]	@ (800370c <Is_iBus_Throttle_Min+0x44>)
 80036de:	f7fe fab9 	bl	8001c54 <iBus_Check_CHKSUM>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d10b      	bne.n	8003700 <Is_iBus_Throttle_Min+0x38>
		{
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 80036e8:	4909      	ldr	r1, [pc, #36]	@ (8003710 <Is_iBus_Throttle_Min+0x48>)
 80036ea:	4808      	ldr	r0, [pc, #32]	@ (800370c <Is_iBus_Throttle_Min+0x44>)
 80036ec:	f7fe fae7 	bl	8001cbe <iBus_Parsing>

			if(iBus.LV < 1010) return 1;
 80036f0:	4b07      	ldr	r3, [pc, #28]	@ (8003710 <Is_iBus_Throttle_Min+0x48>)
 80036f2:	889b      	ldrh	r3, [r3, #4]
 80036f4:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d801      	bhi.n	8003700 <Is_iBus_Throttle_Min+0x38>
 80036fc:	2301      	movs	r3, #1
 80036fe:	e000      	b.n	8003702 <Is_iBus_Throttle_Min+0x3a>
		}
	}
	return 0;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	20000430 	.word	0x20000430
 800370c:	20000410 	.word	0x20000410
 8003710:	200002c0 	.word	0x200002c0

08003714 <Is_iBus_Received>:

int Is_iBus_Received(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag == 1)
 8003718:	4b0b      	ldr	r3, [pc, #44]	@ (8003748 <Is_iBus_Received+0x34>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d10f      	bne.n	8003740 <Is_iBus_Received+0x2c>
		{
			ibus_rx_cplt_flag = 0;
 8003720:	4b09      	ldr	r3, [pc, #36]	@ (8003748 <Is_iBus_Received+0x34>)
 8003722:	2200      	movs	r2, #0
 8003724:	701a      	strb	r2, [r3, #0]
			if(iBus_Check_CHKSUM(&ibus_rx_buf[0],32) == 1)
 8003726:	2120      	movs	r1, #32
 8003728:	4808      	ldr	r0, [pc, #32]	@ (800374c <Is_iBus_Received+0x38>)
 800372a:	f7fe fa93 	bl	8001c54 <iBus_Check_CHKSUM>
 800372e:	4603      	mov	r3, r0
 8003730:	2b01      	cmp	r3, #1
 8003732:	d105      	bne.n	8003740 <Is_iBus_Received+0x2c>
			{
				iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8003734:	4906      	ldr	r1, [pc, #24]	@ (8003750 <Is_iBus_Received+0x3c>)
 8003736:	4805      	ldr	r0, [pc, #20]	@ (800374c <Is_iBus_Received+0x38>)
 8003738:	f7fe fac1 	bl	8001cbe <iBus_Parsing>

				return 1;
 800373c:	2301      	movs	r3, #1
 800373e:	e000      	b.n	8003742 <Is_iBus_Received+0x2e>
			}
		}
		return 0;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	20000430 	.word	0x20000430
 800374c:	20000410 	.word	0x20000410
 8003750:	200002c0 	.word	0x200002c0

08003754 <ESC_Calibration>:

void ESC_Calibration(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
	 TIM5->CCR1 = 21000;
 8003758:	4b14      	ldr	r3, [pc, #80]	@ (80037ac <ESC_Calibration+0x58>)
 800375a:	f245 2208 	movw	r2, #21000	@ 0x5208
 800375e:	635a      	str	r2, [r3, #52]	@ 0x34
	  TIM5->CCR2 = 21000;
 8003760:	4b12      	ldr	r3, [pc, #72]	@ (80037ac <ESC_Calibration+0x58>)
 8003762:	f245 2208 	movw	r2, #21000	@ 0x5208
 8003766:	639a      	str	r2, [r3, #56]	@ 0x38
	  TIM5->CCR3 = 21000;
 8003768:	4b10      	ldr	r3, [pc, #64]	@ (80037ac <ESC_Calibration+0x58>)
 800376a:	f245 2208 	movw	r2, #21000	@ 0x5208
 800376e:	63da      	str	r2, [r3, #60]	@ 0x3c
	  TIM5->CCR4 = 21000;
 8003770:	4b0e      	ldr	r3, [pc, #56]	@ (80037ac <ESC_Calibration+0x58>)
 8003772:	f245 2208 	movw	r2, #21000	@ 0x5208
 8003776:	641a      	str	r2, [r3, #64]	@ 0x40
	  HAL_Delay(7000);
 8003778:	f641 3058 	movw	r0, #7000	@ 0x1b58
 800377c:	f001 fa16 	bl	8004bac <HAL_Delay>
	  TIM5->CCR1 = 10500;
 8003780:	4b0a      	ldr	r3, [pc, #40]	@ (80037ac <ESC_Calibration+0x58>)
 8003782:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003786:	635a      	str	r2, [r3, #52]	@ 0x34
	  TIM5->CCR2 = 10500;
 8003788:	4b08      	ldr	r3, [pc, #32]	@ (80037ac <ESC_Calibration+0x58>)
 800378a:	f642 1204 	movw	r2, #10500	@ 0x2904
 800378e:	639a      	str	r2, [r3, #56]	@ 0x38
	  TIM5->CCR3 = 10500;
 8003790:	4b06      	ldr	r3, [pc, #24]	@ (80037ac <ESC_Calibration+0x58>)
 8003792:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003796:	63da      	str	r2, [r3, #60]	@ 0x3c
	  TIM5->CCR4 = 10500;
 8003798:	4b04      	ldr	r3, [pc, #16]	@ (80037ac <ESC_Calibration+0x58>)
 800379a:	f642 1204 	movw	r2, #10500	@ 0x2904
 800379e:	641a      	str	r2, [r3, #64]	@ 0x40
	  HAL_Delay(8000);
 80037a0:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 80037a4:	f001 fa02 	bl	8004bac <HAL_Delay>
}
 80037a8:	bf00      	nop
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40000c00 	.word	0x40000c00

080037b0 <BNO080_Calibration>:

void BNO080_Calibration(void)
{
 80037b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037b4:	b090      	sub	sp, #64	@ 0x40
 80037b6:	af06      	add	r7, sp, #24
	//Resets BNO080 to disable All output
	BNO080_Initialization();
 80037b8:	f7fd fcf4 	bl	80011a4 <BNO080_Initialization>

	//BNO080/BNO085 Configuration
	//Enable dynamic calibration for accelerometer, gyroscope, and magnetometer
	//Enable Game Rotation Vector output
	//Enable Magnetic Field output
	BNO080_calibrateAll(); //Turn on cal for Accel, Gyro, and Mag
 80037bc:	f7fe f85e 	bl	800187c <BNO080_calibrateAll>
	BNO080_enableGameRotationVector(20000); //Send data update every 20ms (50Hz)
 80037c0:	f644 6020 	movw	r0, #20000	@ 0x4e20
 80037c4:	f7fe f83c 	bl	8001840 <BNO080_enableGameRotationVector>
	BNO080_enableMagnetometer(20000); //Send data update every 20ms (50Hz)
 80037c8:	f644 6020 	movw	r0, #20000	@ 0x4e20
 80037cc:	f7fe f847 	bl	800185e <BNO080_enableMagnetometer>

	//Once magnetic field is 2 or 3, run the Save DCD Now command
  	printf("Calibrating BNO080. Pull up FS-i6 SWC to end calibration and save to flash\n");
 80037d0:	489d      	ldr	r0, [pc, #628]	@ (8003a48 <BNO080_Calibration+0x298>)
 80037d2:	f005 f8df 	bl	8008994 <puts>
  	printf("Output in form x, y, z, in uTesla\n\n");
 80037d6:	489d      	ldr	r0, [pc, #628]	@ (8003a4c <BNO080_Calibration+0x29c>)
 80037d8:	f005 f8dc 	bl	8008994 <puts>

	//while loop for calibration procedure
	//Iterates until iBus.SwC is mid point (1500)
	//Calibration procedure should be done while this loop is in iteration.
	while(iBus.SwC == 1500)
 80037dc:	e0b8      	b.n	8003950 <BNO080_Calibration+0x1a0>
	{
		if(BNO080_dataAvailable() == 1)
 80037de:	f7fd fd77 	bl	80012d0 <BNO080_dataAvailable>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	f040 80ae 	bne.w	8003946 <BNO080_Calibration+0x196>
		{
			//Observing the status bit of the magnetic field output
			float x = BNO080_getMagX();
 80037ea:	f7fd ffa5 	bl	8001738 <BNO080_getMagX>
 80037ee:	ed87 0a08 	vstr	s0, [r7, #32]
			float y = BNO080_getMagY();
 80037f2:	f7fd ffb7 	bl	8001764 <BNO080_getMagY>
 80037f6:	ed87 0a07 	vstr	s0, [r7, #28]
			float z = BNO080_getMagZ();
 80037fa:	f7fd ffc9 	bl	8001790 <BNO080_getMagZ>
 80037fe:	ed87 0a06 	vstr	s0, [r7, #24]
			unsigned char accuracy = BNO080_getMagAccuracy();
 8003802:	f7fd ffdb 	bl	80017bc <BNO080_getMagAccuracy>
 8003806:	4603      	mov	r3, r0
 8003808:	75fb      	strb	r3, [r7, #23]

			float quatI = BNO080_getQuatI();
 800380a:	f7fd ff1b 	bl	8001644 <BNO080_getQuatI>
 800380e:	ed87 0a04 	vstr	s0, [r7, #16]
			float quatJ = BNO080_getQuatJ();
 8003812:	f7fd ff2d 	bl	8001670 <BNO080_getQuatJ>
 8003816:	ed87 0a03 	vstr	s0, [r7, #12]
			float quatK = BNO080_getQuatK();
 800381a:	f7fd ff3f 	bl	800169c <BNO080_getQuatK>
 800381e:	ed87 0a02 	vstr	s0, [r7, #8]
			float quatReal = BNO080_getQuatReal();
 8003822:	f7fd ff51 	bl	80016c8 <BNO080_getQuatReal>
 8003826:	ed87 0a01 	vstr	s0, [r7, #4]
			unsigned char sensorAccuracy = BNO080_getQuatAccuracy();
 800382a:	f7fd ff79 	bl	8001720 <BNO080_getQuatAccuracy>
 800382e:	4603      	mov	r3, r0
 8003830:	70fb      	strb	r3, [r7, #3]

			printf("%f,%f,%f,", x, y, z);
 8003832:	6a38      	ldr	r0, [r7, #32]
 8003834:	f7fc fe88 	bl	8000548 <__aeabi_f2d>
 8003838:	4680      	mov	r8, r0
 800383a:	4689      	mov	r9, r1
 800383c:	69f8      	ldr	r0, [r7, #28]
 800383e:	f7fc fe83 	bl	8000548 <__aeabi_f2d>
 8003842:	4604      	mov	r4, r0
 8003844:	460d      	mov	r5, r1
 8003846:	69b8      	ldr	r0, [r7, #24]
 8003848:	f7fc fe7e 	bl	8000548 <__aeabi_f2d>
 800384c:	4602      	mov	r2, r0
 800384e:	460b      	mov	r3, r1
 8003850:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003854:	e9cd 4500 	strd	r4, r5, [sp]
 8003858:	4642      	mov	r2, r8
 800385a:	464b      	mov	r3, r9
 800385c:	487c      	ldr	r0, [pc, #496]	@ (8003a50 <BNO080_Calibration+0x2a0>)
 800385e:	f005 f831 	bl	80088c4 <iprintf>
			if (accuracy == 0) printf("Unreliable\t");
 8003862:	7dfb      	ldrb	r3, [r7, #23]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d103      	bne.n	8003870 <BNO080_Calibration+0xc0>
 8003868:	487a      	ldr	r0, [pc, #488]	@ (8003a54 <BNO080_Calibration+0x2a4>)
 800386a:	f005 f82b 	bl	80088c4 <iprintf>
 800386e:	e013      	b.n	8003898 <BNO080_Calibration+0xe8>
			else if (accuracy == 1) printf("Low\t");
 8003870:	7dfb      	ldrb	r3, [r7, #23]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d103      	bne.n	800387e <BNO080_Calibration+0xce>
 8003876:	4878      	ldr	r0, [pc, #480]	@ (8003a58 <BNO080_Calibration+0x2a8>)
 8003878:	f005 f824 	bl	80088c4 <iprintf>
 800387c:	e00c      	b.n	8003898 <BNO080_Calibration+0xe8>
			else if (accuracy == 2) printf("Medium\t");
 800387e:	7dfb      	ldrb	r3, [r7, #23]
 8003880:	2b02      	cmp	r3, #2
 8003882:	d103      	bne.n	800388c <BNO080_Calibration+0xdc>
 8003884:	4875      	ldr	r0, [pc, #468]	@ (8003a5c <BNO080_Calibration+0x2ac>)
 8003886:	f005 f81d 	bl	80088c4 <iprintf>
 800388a:	e005      	b.n	8003898 <BNO080_Calibration+0xe8>
			else if (accuracy == 3) printf("High\t");
 800388c:	7dfb      	ldrb	r3, [r7, #23]
 800388e:	2b03      	cmp	r3, #3
 8003890:	d102      	bne.n	8003898 <BNO080_Calibration+0xe8>
 8003892:	4873      	ldr	r0, [pc, #460]	@ (8003a60 <BNO080_Calibration+0x2b0>)
 8003894:	f005 f816 	bl	80088c4 <iprintf>

			printf("\t%f,%f,%f,%f,", quatI, quatI, quatI, quatReal);
 8003898:	6938      	ldr	r0, [r7, #16]
 800389a:	f7fc fe55 	bl	8000548 <__aeabi_f2d>
 800389e:	4682      	mov	sl, r0
 80038a0:	468b      	mov	fp, r1
 80038a2:	6938      	ldr	r0, [r7, #16]
 80038a4:	f7fc fe50 	bl	8000548 <__aeabi_f2d>
 80038a8:	4604      	mov	r4, r0
 80038aa:	460d      	mov	r5, r1
 80038ac:	6938      	ldr	r0, [r7, #16]
 80038ae:	f7fc fe4b 	bl	8000548 <__aeabi_f2d>
 80038b2:	4680      	mov	r8, r0
 80038b4:	4689      	mov	r9, r1
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7fc fe46 	bl	8000548 <__aeabi_f2d>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80038c4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80038c8:	e9cd 4500 	strd	r4, r5, [sp]
 80038cc:	4652      	mov	r2, sl
 80038ce:	465b      	mov	r3, fp
 80038d0:	4864      	ldr	r0, [pc, #400]	@ (8003a64 <BNO080_Calibration+0x2b4>)
 80038d2:	f004 fff7 	bl	80088c4 <iprintf>
			if (sensorAccuracy == 0) printf("Unreliable\n");
 80038d6:	78fb      	ldrb	r3, [r7, #3]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d103      	bne.n	80038e4 <BNO080_Calibration+0x134>
 80038dc:	4862      	ldr	r0, [pc, #392]	@ (8003a68 <BNO080_Calibration+0x2b8>)
 80038de:	f005 f859 	bl	8008994 <puts>
 80038e2:	e013      	b.n	800390c <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 1) printf("Low\n");
 80038e4:	78fb      	ldrb	r3, [r7, #3]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d103      	bne.n	80038f2 <BNO080_Calibration+0x142>
 80038ea:	4860      	ldr	r0, [pc, #384]	@ (8003a6c <BNO080_Calibration+0x2bc>)
 80038ec:	f005 f852 	bl	8008994 <puts>
 80038f0:	e00c      	b.n	800390c <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 2) printf("Medium\n");
 80038f2:	78fb      	ldrb	r3, [r7, #3]
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d103      	bne.n	8003900 <BNO080_Calibration+0x150>
 80038f8:	485d      	ldr	r0, [pc, #372]	@ (8003a70 <BNO080_Calibration+0x2c0>)
 80038fa:	f005 f84b 	bl	8008994 <puts>
 80038fe:	e005      	b.n	800390c <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 3) printf("High\n");
 8003900:	78fb      	ldrb	r3, [r7, #3]
 8003902:	2b03      	cmp	r3, #3
 8003904:	d102      	bne.n	800390c <BNO080_Calibration+0x15c>
 8003906:	485b      	ldr	r0, [pc, #364]	@ (8003a74 <BNO080_Calibration+0x2c4>)
 8003908:	f005 f844 	bl	8008994 <puts>

			//Turn the LED and buzzer on when both accuracy and sensorAccuracy is high
			if(accuracy == 3 && sensorAccuracy == 3)
 800390c:	7dfb      	ldrb	r3, [r7, #23]
 800390e:	2b03      	cmp	r3, #3
 8003910:	d110      	bne.n	8003934 <BNO080_Calibration+0x184>
 8003912:	78fb      	ldrb	r3, [r7, #3]
 8003914:	2b03      	cmp	r3, #3
 8003916:	d10d      	bne.n	8003934 <BNO080_Calibration+0x184>
			{
				LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 8003918:	2107      	movs	r1, #7
 800391a:	4857      	ldr	r0, [pc, #348]	@ (8003a78 <BNO080_Calibration+0x2c8>)
 800391c:	f7ff fc4a 	bl	80031b4 <LL_GPIO_SetOutputPin>
				TIM3->PSC = 65000; //Very low frequency
 8003920:	4b56      	ldr	r3, [pc, #344]	@ (8003a7c <BNO080_Calibration+0x2cc>)
 8003922:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 8003926:	629a      	str	r2, [r3, #40]	@ 0x28
				LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003928:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800392c:	4853      	ldr	r0, [pc, #332]	@ (8003a7c <BNO080_Calibration+0x2cc>)
 800392e:	f7ff fbd9 	bl	80030e4 <LL_TIM_CC_EnableChannel>
 8003932:	e008      	b.n	8003946 <BNO080_Calibration+0x196>
			}
			else
			{
				LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 8003934:	2107      	movs	r1, #7
 8003936:	4850      	ldr	r0, [pc, #320]	@ (8003a78 <BNO080_Calibration+0x2c8>)
 8003938:	f7ff fc4a 	bl	80031d0 <LL_GPIO_ResetOutputPin>
				LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800393c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003940:	484e      	ldr	r0, [pc, #312]	@ (8003a7c <BNO080_Calibration+0x2cc>)
 8003942:	f7ff fbe0 	bl	8003106 <LL_TIM_CC_DisableChannel>
			}
		}

		Is_iBus_Received(); //Refreshes iBus Data for iBus.SwC
 8003946:	f7ff fee5 	bl	8003714 <Is_iBus_Received>
		HAL_Delay(100);
 800394a:	2064      	movs	r0, #100	@ 0x64
 800394c:	f001 f92e 	bl	8004bac <HAL_Delay>
	while(iBus.SwC == 1500)
 8003950:	4b4b      	ldr	r3, [pc, #300]	@ (8003a80 <BNO080_Calibration+0x2d0>)
 8003952:	899b      	ldrh	r3, [r3, #12]
 8003954:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003958:	4293      	cmp	r3, r2
 800395a:	f43f af40 	beq.w	80037de <BNO080_Calibration+0x2e>
	}

	//Ends the loop when iBus.SwC is not mid point
	//Turn the LED and buzzer off
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 800395e:	2107      	movs	r1, #7
 8003960:	4845      	ldr	r0, [pc, #276]	@ (8003a78 <BNO080_Calibration+0x2c8>)
 8003962:	f7ff fc35 	bl	80031d0 <LL_GPIO_ResetOutputPin>
	LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003966:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800396a:	4844      	ldr	r0, [pc, #272]	@ (8003a7c <BNO080_Calibration+0x2cc>)
 800396c:	f7ff fbcb 	bl	8003106 <LL_TIM_CC_DisableChannel>

	//Saves the current dynamic calibration data (DCD) to memory
	//Sends command to get the latest calibration status
	BNO080_saveCalibration();
 8003970:	f7fe f872 	bl	8001a58 <BNO080_saveCalibration>
	BNO080_requestCalibrationStatus();
 8003974:	f7fe f854 	bl	8001a20 <BNO080_requestCalibrationStatus>

	//Wait for calibration response, timeout if no response
	int counter = 100;
 8003978:	2364      	movs	r3, #100	@ 0x64
 800397a:	627b      	str	r3, [r7, #36]	@ 0x24
	while(1)
	{
		if(--counter == 0) break;
 800397c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397e:	3b01      	subs	r3, #1
 8003980:	627b      	str	r3, [r7, #36]	@ 0x24
 8003982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003984:	2b00      	cmp	r3, #0
 8003986:	d02f      	beq.n	80039e8 <BNO080_Calibration+0x238>
		if(BNO080_dataAvailable())
 8003988:	f7fd fca2 	bl	80012d0 <BNO080_dataAvailable>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d026      	beq.n	80039e0 <BNO080_Calibration+0x230>
		{
			//The IMU can report many different things. We must wait
			//for the ME Calibration Response Status byte to go to zero
			if(BNO080_calibrationComplete() == 1)
 8003992:	f7fd ff7b 	bl	800188c <BNO080_calibrationComplete>
 8003996:	4603      	mov	r3, r0
 8003998:	2b01      	cmp	r3, #1
 800399a:	d121      	bne.n	80039e0 <BNO080_Calibration+0x230>
			{
				printf("\nCalibration data successfully stored\n");
 800399c:	4839      	ldr	r0, [pc, #228]	@ (8003a84 <BNO080_Calibration+0x2d4>)
 800399e:	f004 fff9 	bl	8008994 <puts>
				LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80039a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80039a6:	4835      	ldr	r0, [pc, #212]	@ (8003a7c <BNO080_Calibration+0x2cc>)
 80039a8:	f7ff fb9c 	bl	80030e4 <LL_TIM_CC_EnableChannel>
				TIM3->PSC = 2000;
 80039ac:	4b33      	ldr	r3, [pc, #204]	@ (8003a7c <BNO080_Calibration+0x2cc>)
 80039ae:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80039b2:	629a      	str	r2, [r3, #40]	@ 0x28
				HAL_Delay(300);
 80039b4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80039b8:	f001 f8f8 	bl	8004bac <HAL_Delay>
				TIM3->PSC = 1500;
 80039bc:	4b2f      	ldr	r3, [pc, #188]	@ (8003a7c <BNO080_Calibration+0x2cc>)
 80039be:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80039c2:	629a      	str	r2, [r3, #40]	@ 0x28
				HAL_Delay(300);
 80039c4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80039c8:	f001 f8f0 	bl	8004bac <HAL_Delay>
				LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80039cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80039d0:	482a      	ldr	r0, [pc, #168]	@ (8003a7c <BNO080_Calibration+0x2cc>)
 80039d2:	f7ff fb98 	bl	8003106 <LL_TIM_CC_DisableChannel>
				HAL_Delay(1000);
 80039d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80039da:	f001 f8e7 	bl	8004bac <HAL_Delay>
				break;
 80039de:	e004      	b.n	80039ea <BNO080_Calibration+0x23a>
			}
		}
		HAL_Delay(10);
 80039e0:	200a      	movs	r0, #10
 80039e2:	f001 f8e3 	bl	8004bac <HAL_Delay>
		if(--counter == 0) break;
 80039e6:	e7c9      	b.n	800397c <BNO080_Calibration+0x1cc>
 80039e8:	bf00      	nop
	}
	if(counter == 0)
 80039ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d120      	bne.n	8003a32 <BNO080_Calibration+0x282>
	{
		printf("\nCalibration data failed to store. Please try again.\n");
 80039f0:	4825      	ldr	r0, [pc, #148]	@ (8003a88 <BNO080_Calibration+0x2d8>)
 80039f2:	f004 ffcf 	bl	8008994 <puts>
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80039f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80039fa:	4820      	ldr	r0, [pc, #128]	@ (8003a7c <BNO080_Calibration+0x2cc>)
 80039fc:	f7ff fb72 	bl	80030e4 <LL_TIM_CC_EnableChannel>
		TIM3->PSC = 1500;
 8003a00:	4b1e      	ldr	r3, [pc, #120]	@ (8003a7c <BNO080_Calibration+0x2cc>)
 8003a02:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003a06:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(300);
 8003a08:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003a0c:	f001 f8ce 	bl	8004bac <HAL_Delay>
		TIM3->PSC = 2000;
 8003a10:	4b1a      	ldr	r3, [pc, #104]	@ (8003a7c <BNO080_Calibration+0x2cc>)
 8003a12:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003a16:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(300);
 8003a18:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003a1c:	f001 f8c6 	bl	8004bac <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003a20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003a24:	4815      	ldr	r0, [pc, #84]	@ (8003a7c <BNO080_Calibration+0x2cc>)
 8003a26:	f7ff fb6e 	bl	8003106 <LL_TIM_CC_DisableChannel>
		HAL_Delay(1000);
 8003a2a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003a2e:	f001 f8bd 	bl	8004bac <HAL_Delay>
	//In general, calibration should be left on at all times. The BNO080
	//auto-calibrates and auto-records cal data roughly every 5 minutes

	//Resets BNO080 to disable Game Rotation Vector and Magnetometer
	//Enables Rotation Vector
	BNO080_Initialization();
 8003a32:	f7fd fbb7 	bl	80011a4 <BNO080_Initialization>
	BNO080_enableRotationVector(2500); //Send data update every 2.5ms (400Hz)
 8003a36:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8003a3a:	f7fd fef2 	bl	8001822 <BNO080_enableRotationVector>
}
 8003a3e:	bf00      	nop
 8003a40:	3728      	adds	r7, #40	@ 0x28
 8003a42:	46bd      	mov	sp, r7
 8003a44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a48:	0800b6cc 	.word	0x0800b6cc
 8003a4c:	0800b718 	.word	0x0800b718
 8003a50:	0800b73c 	.word	0x0800b73c
 8003a54:	0800b748 	.word	0x0800b748
 8003a58:	0800b754 	.word	0x0800b754
 8003a5c:	0800b75c 	.word	0x0800b75c
 8003a60:	0800b764 	.word	0x0800b764
 8003a64:	0800b76c 	.word	0x0800b76c
 8003a68:	0800b77c 	.word	0x0800b77c
 8003a6c:	0800b788 	.word	0x0800b788
 8003a70:	0800b78c 	.word	0x0800b78c
 8003a74:	0800b794 	.word	0x0800b794
 8003a78:	40020800 	.word	0x40020800
 8003a7c:	40000400 	.word	0x40000400
 8003a80:	200002c0 	.word	0x200002c0
 8003a84:	0800b79c 	.word	0x0800b79c
 8003a88:	0800b7c4 	.word	0x0800b7c4

08003a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a90:	b672      	cpsid	i
}
 8003a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a94:	bf00      	nop
 8003a96:	e7fd      	b.n	8003a94 <Error_Handler+0x8>

08003a98 <LL_SPI_SetStandard>:
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f023 0210 	bic.w	r2, r3, #16
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	431a      	orrs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	605a      	str	r2, [r3, #4]
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
	...

08003ac0 <LL_AHB1_GRP1_EnableClock>:
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003ac8:	4b08      	ldr	r3, [pc, #32]	@ (8003aec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003aca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003acc:	4907      	ldr	r1, [pc, #28]	@ (8003aec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003ad4:	4b05      	ldr	r3, [pc, #20]	@ (8003aec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003ad6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4013      	ands	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003ade:	68fb      	ldr	r3, [r7, #12]
}
 8003ae0:	bf00      	nop
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	40023800 	.word	0x40023800

08003af0 <LL_APB1_GRP1_EnableClock>:
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003af8:	4b08      	ldr	r3, [pc, #32]	@ (8003b1c <LL_APB1_GRP1_EnableClock+0x2c>)
 8003afa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003afc:	4907      	ldr	r1, [pc, #28]	@ (8003b1c <LL_APB1_GRP1_EnableClock+0x2c>)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003b04:	4b05      	ldr	r3, [pc, #20]	@ (8003b1c <LL_APB1_GRP1_EnableClock+0x2c>)
 8003b06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
}
 8003b10:	bf00      	nop
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	40023800 	.word	0x40023800

08003b20 <LL_APB2_GRP1_EnableClock>:
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003b28:	4b08      	ldr	r3, [pc, #32]	@ (8003b4c <LL_APB2_GRP1_EnableClock+0x2c>)
 8003b2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b2c:	4907      	ldr	r1, [pc, #28]	@ (8003b4c <LL_APB2_GRP1_EnableClock+0x2c>)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003b34:	4b05      	ldr	r3, [pc, #20]	@ (8003b4c <LL_APB2_GRP1_EnableClock+0x2c>)
 8003b36:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
}
 8003b40:	bf00      	nop
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	40023800 	.word	0x40023800

08003b50 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b090      	sub	sp, #64	@ 0x40
 8003b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003b56:	f107 0318 	add.w	r3, r7, #24
 8003b5a:	2228      	movs	r2, #40	@ 0x28
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f004 fff8 	bl	8008b54 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b64:	463b      	mov	r3, r7
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	605a      	str	r2, [r3, #4]
 8003b6c:	609a      	str	r2, [r3, #8]
 8003b6e:	60da      	str	r2, [r3, #12]
 8003b70:	611a      	str	r2, [r3, #16]
 8003b72:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8003b74:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003b78:	f7ff ffd2 	bl	8003b20 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003b7c:	2001      	movs	r0, #1
 8003b7e:	f7ff ff9f 	bl	8003ac0 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8003b82:	23e0      	movs	r3, #224	@ 0xe0
 8003b84:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003b86:	2302      	movs	r3, #2
 8003b88:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003b92:	2300      	movs	r3, #0
 8003b94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003b96:	2305      	movs	r3, #5
 8003b98:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b9a:	463b      	mov	r3, r7
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	4813      	ldr	r0, [pc, #76]	@ (8003bec <MX_SPI1_Init+0x9c>)
 8003ba0:	f003 f96b 	bl	8006e7a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003ba8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8003bac:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003bba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8003bc0:	2310      	movs	r3, #16
 8003bc2:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8003bcc:	230a      	movs	r3, #10
 8003bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8003bd0:	f107 0318 	add.w	r3, r7, #24
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4806      	ldr	r0, [pc, #24]	@ (8003bf0 <MX_SPI1_Init+0xa0>)
 8003bd8:	f003 fb2d 	bl	8007236 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8003bdc:	2100      	movs	r1, #0
 8003bde:	4804      	ldr	r0, [pc, #16]	@ (8003bf0 <MX_SPI1_Init+0xa0>)
 8003be0:	f7ff ff5a 	bl	8003a98 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003be4:	bf00      	nop
 8003be6:	3740      	adds	r7, #64	@ 0x40
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40020000 	.word	0x40020000
 8003bf0:	40013000 	.word	0x40013000

08003bf4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b090      	sub	sp, #64	@ 0x40
 8003bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003bfa:	f107 0318 	add.w	r3, r7, #24
 8003bfe:	2228      	movs	r2, #40	@ 0x28
 8003c00:	2100      	movs	r1, #0
 8003c02:	4618      	mov	r0, r3
 8003c04:	f004 ffa6 	bl	8008b54 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c08:	463b      	mov	r3, r7
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	605a      	str	r2, [r3, #4]
 8003c10:	609a      	str	r2, [r3, #8]
 8003c12:	60da      	str	r2, [r3, #12]
 8003c14:	611a      	str	r2, [r3, #16]
 8003c16:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8003c18:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003c1c:	f7ff ff68 	bl	8003af0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003c20:	2002      	movs	r0, #2
 8003c22:	f7ff ff4d 	bl	8003ac0 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8003c26:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003c2a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003c30:	2303      	movs	r3, #3
 8003c32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003c34:	2300      	movs	r3, #0
 8003c36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003c3c:	2305      	movs	r3, #5
 8003c3e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c40:	463b      	mov	r3, r7
 8003c42:	4619      	mov	r1, r3
 8003c44:	4813      	ldr	r0, [pc, #76]	@ (8003c94 <MX_SPI2_Init+0xa0>)
 8003c46:	f003 f918 	bl	8006e7a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003c4e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8003c52:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003c54:	2300      	movs	r3, #0
 8003c56:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003c58:	2302      	movs	r3, #2
 8003c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003c60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8003c66:	2318      	movs	r3, #24
 8003c68:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8003c72:	230a      	movs	r3, #10
 8003c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8003c76:	f107 0318 	add.w	r3, r7, #24
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	4806      	ldr	r0, [pc, #24]	@ (8003c98 <MX_SPI2_Init+0xa4>)
 8003c7e:	f003 fada 	bl	8007236 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8003c82:	2100      	movs	r1, #0
 8003c84:	4804      	ldr	r0, [pc, #16]	@ (8003c98 <MX_SPI2_Init+0xa4>)
 8003c86:	f7ff ff07 	bl	8003a98 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003c8a:	bf00      	nop
 8003c8c:	3740      	adds	r7, #64	@ 0x40
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40020400 	.word	0x40020400
 8003c98:	40003800 	.word	0x40003800

08003c9c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b090      	sub	sp, #64	@ 0x40
 8003ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003ca2:	f107 0318 	add.w	r3, r7, #24
 8003ca6:	2228      	movs	r2, #40	@ 0x28
 8003ca8:	2100      	movs	r1, #0
 8003caa:	4618      	mov	r0, r3
 8003cac:	f004 ff52 	bl	8008b54 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb0:	463b      	mov	r3, r7
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	605a      	str	r2, [r3, #4]
 8003cb8:	609a      	str	r2, [r3, #8]
 8003cba:	60da      	str	r2, [r3, #12]
 8003cbc:	611a      	str	r2, [r3, #16]
 8003cbe:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8003cc0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003cc4:	f7ff ff14 	bl	8003af0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003cc8:	2002      	movs	r0, #2
 8003cca:	f7ff fef9 	bl	8003ac0 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8003cce:	2338      	movs	r3, #56	@ 0x38
 8003cd0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8003ce2:	2306      	movs	r3, #6
 8003ce4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ce6:	463b      	mov	r3, r7
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4813      	ldr	r0, [pc, #76]	@ (8003d38 <MX_SPI3_Init+0x9c>)
 8003cec:	f003 f8c5 	bl	8006e7a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003cf4:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8003cf8:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003cfe:	2302      	movs	r3, #2
 8003d00:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003d02:	2301      	movs	r3, #1
 8003d04:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003d06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8003d0c:	2308      	movs	r3, #8
 8003d0e:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003d10:	2300      	movs	r3, #0
 8003d12:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003d14:	2300      	movs	r3, #0
 8003d16:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8003d18:	230a      	movs	r3, #10
 8003d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8003d1c:	f107 0318 	add.w	r3, r7, #24
 8003d20:	4619      	mov	r1, r3
 8003d22:	4806      	ldr	r0, [pc, #24]	@ (8003d3c <MX_SPI3_Init+0xa0>)
 8003d24:	f003 fa87 	bl	8007236 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8003d28:	2100      	movs	r1, #0
 8003d2a:	4804      	ldr	r0, [pc, #16]	@ (8003d3c <MX_SPI3_Init+0xa0>)
 8003d2c:	f7ff feb4 	bl	8003a98 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003d30:	bf00      	nop
 8003d32:	3740      	adds	r7, #64	@ 0x40
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	40020400 	.word	0x40020400
 8003d3c:	40003c00 	.word	0x40003c00

08003d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d46:	2300      	movs	r3, #0
 8003d48:	607b      	str	r3, [r7, #4]
 8003d4a:	4b10      	ldr	r3, [pc, #64]	@ (8003d8c <HAL_MspInit+0x4c>)
 8003d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d4e:	4a0f      	ldr	r2, [pc, #60]	@ (8003d8c <HAL_MspInit+0x4c>)
 8003d50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d54:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d56:	4b0d      	ldr	r3, [pc, #52]	@ (8003d8c <HAL_MspInit+0x4c>)
 8003d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d5e:	607b      	str	r3, [r7, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d62:	2300      	movs	r3, #0
 8003d64:	603b      	str	r3, [r7, #0]
 8003d66:	4b09      	ldr	r3, [pc, #36]	@ (8003d8c <HAL_MspInit+0x4c>)
 8003d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6a:	4a08      	ldr	r2, [pc, #32]	@ (8003d8c <HAL_MspInit+0x4c>)
 8003d6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d70:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d72:	4b06      	ldr	r3, [pc, #24]	@ (8003d8c <HAL_MspInit+0x4c>)
 8003d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d7a:	603b      	str	r3, [r7, #0]
 8003d7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d7e:	bf00      	nop
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	40023800 	.word	0x40023800

08003d90 <LL_USART_IsActiveFlag_RXNE>:
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0320 	and.w	r3, r3, #32
 8003da0:	2b20      	cmp	r3, #32
 8003da2:	bf0c      	ite	eq
 8003da4:	2301      	moveq	r3, #1
 8003da6:	2300      	movne	r3, #0
 8003da8:	b2db      	uxtb	r3, r3
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <LL_USART_ClearFlag_RXNE>:
{
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f06f 0220 	mvn.w	r2, #32
 8003dc4:	601a      	str	r2, [r3, #0]
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <LL_USART_ReceiveData8>:
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	b2db      	uxtb	r3, r3
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003df0:	bf00      	nop
 8003df2:	e7fd      	b.n	8003df0 <NMI_Handler+0x4>

08003df4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003df8:	bf00      	nop
 8003dfa:	e7fd      	b.n	8003df8 <HardFault_Handler+0x4>

08003dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e00:	bf00      	nop
 8003e02:	e7fd      	b.n	8003e00 <MemManage_Handler+0x4>

08003e04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e08:	bf00      	nop
 8003e0a:	e7fd      	b.n	8003e08 <BusFault_Handler+0x4>

08003e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e10:	bf00      	nop
 8003e12:	e7fd      	b.n	8003e10 <UsageFault_Handler+0x4>

08003e14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e18:	bf00      	nop
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e22:	b480      	push	{r7}
 8003e24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e26:	bf00      	nop
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e34:	bf00      	nop
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e42:	f000 fe93 	bl	8004b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e46:	bf00      	nop
 8003e48:	bd80      	pop	{r7, pc}
	...

08003e4c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	static unsigned char cnt =0;

	if(LL_USART_IsActiveFlag_RXNE(UART4))
 8003e50:	4832      	ldr	r0, [pc, #200]	@ (8003f1c <UART4_IRQHandler+0xd0>)
 8003e52:	f7ff ff9d 	bl	8003d90 <LL_USART_IsActiveFlag_RXNE>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d05c      	beq.n	8003f16 <UART4_IRQHandler+0xca>
	{
		LL_USART_ClearFlag_RXNE(UART4);
 8003e5c:	482f      	ldr	r0, [pc, #188]	@ (8003f1c <UART4_IRQHandler+0xd0>)
 8003e5e:	f7ff ffaa 	bl	8003db6 <LL_USART_ClearFlag_RXNE>
		uart4_rx_data = LL_USART_ReceiveData8(UART4);
 8003e62:	482e      	ldr	r0, [pc, #184]	@ (8003f1c <UART4_IRQHandler+0xd0>)
 8003e64:	f7ff ffb5 	bl	8003dd2 <LL_USART_ReceiveData8>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	4b2c      	ldr	r3, [pc, #176]	@ (8003f20 <UART4_IRQHandler+0xd4>)
 8003e6e:	701a      	strb	r2, [r3, #0]
		uart4_rx_flag = 1;
 8003e70:	4b2c      	ldr	r3, [pc, #176]	@ (8003f24 <UART4_IRQHandler+0xd8>)
 8003e72:	2201      	movs	r2, #1
 8003e74:	701a      	strb	r2, [r3, #0]

		//LL_USART_TransmitData8(USART6, uart4_rx_data);

		switch(cnt)
 8003e76:	4b2c      	ldr	r3, [pc, #176]	@ (8003f28 <UART4_IRQHandler+0xdc>)
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	2b23      	cmp	r3, #35	@ 0x23
 8003e7c:	d02e      	beq.n	8003edc <UART4_IRQHandler+0x90>
 8003e7e:	2b23      	cmp	r3, #35	@ 0x23
 8003e80:	dc3a      	bgt.n	8003ef8 <UART4_IRQHandler+0xac>
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <UART4_IRQHandler+0x40>
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d012      	beq.n	8003eb0 <UART4_IRQHandler+0x64>
 8003e8a:	e035      	b.n	8003ef8 <UART4_IRQHandler+0xac>
		{
		case 0:
			if(uart4_rx_data == 0xb5)
 8003e8c:	4b24      	ldr	r3, [pc, #144]	@ (8003f20 <UART4_IRQHandler+0xd4>)
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	2bb5      	cmp	r3, #181	@ 0xb5
 8003e92:	d13f      	bne.n	8003f14 <UART4_IRQHandler+0xc8>
			{
				m8n_rx_buf[cnt] = uart4_rx_data;
 8003e94:	4b24      	ldr	r3, [pc, #144]	@ (8003f28 <UART4_IRQHandler+0xdc>)
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	461a      	mov	r2, r3
 8003e9a:	4b21      	ldr	r3, [pc, #132]	@ (8003f20 <UART4_IRQHandler+0xd4>)
 8003e9c:	7819      	ldrb	r1, [r3, #0]
 8003e9e:	4b23      	ldr	r3, [pc, #140]	@ (8003f2c <UART4_IRQHandler+0xe0>)
 8003ea0:	5499      	strb	r1, [r3, r2]
				cnt++;
 8003ea2:	4b21      	ldr	r3, [pc, #132]	@ (8003f28 <UART4_IRQHandler+0xdc>)
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8003f28 <UART4_IRQHandler+0xdc>)
 8003eac:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003eae:	e031      	b.n	8003f14 <UART4_IRQHandler+0xc8>
		case 1:
			if(uart4_rx_data == 0x62)
 8003eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8003f20 <UART4_IRQHandler+0xd4>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	2b62      	cmp	r3, #98	@ 0x62
 8003eb6:	d10d      	bne.n	8003ed4 <UART4_IRQHandler+0x88>
			{
				m8n_rx_buf[cnt] = uart4_rx_data;
 8003eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f28 <UART4_IRQHandler+0xdc>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	4b18      	ldr	r3, [pc, #96]	@ (8003f20 <UART4_IRQHandler+0xd4>)
 8003ec0:	7819      	ldrb	r1, [r3, #0]
 8003ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8003f2c <UART4_IRQHandler+0xe0>)
 8003ec4:	5499      	strb	r1, [r3, r2]
				cnt++;
 8003ec6:	4b18      	ldr	r3, [pc, #96]	@ (8003f28 <UART4_IRQHandler+0xdc>)
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	4b16      	ldr	r3, [pc, #88]	@ (8003f28 <UART4_IRQHandler+0xdc>)
 8003ed0:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				cnt = 0;
			}
			break;
 8003ed2:	e020      	b.n	8003f16 <UART4_IRQHandler+0xca>
				cnt = 0;
 8003ed4:	4b14      	ldr	r3, [pc, #80]	@ (8003f28 <UART4_IRQHandler+0xdc>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	701a      	strb	r2, [r3, #0]
			break;
 8003eda:	e01c      	b.n	8003f16 <UART4_IRQHandler+0xca>
		case 35:
			m8n_rx_buf[cnt] = uart4_rx_data;
 8003edc:	4b12      	ldr	r3, [pc, #72]	@ (8003f28 <UART4_IRQHandler+0xdc>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8003f20 <UART4_IRQHandler+0xd4>)
 8003ee4:	7819      	ldrb	r1, [r3, #0]
 8003ee6:	4b11      	ldr	r3, [pc, #68]	@ (8003f2c <UART4_IRQHandler+0xe0>)
 8003ee8:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8003eea:	4b0f      	ldr	r3, [pc, #60]	@ (8003f28 <UART4_IRQHandler+0xdc>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	701a      	strb	r2, [r3, #0]
			m8n_rx_cplt_flag = 1;
 8003ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8003f30 <UART4_IRQHandler+0xe4>)
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	701a      	strb	r2, [r3, #0]
			break;
 8003ef6:	e00e      	b.n	8003f16 <UART4_IRQHandler+0xca>
		default :
			m8n_rx_buf[cnt] = uart4_rx_data;
 8003ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8003f28 <UART4_IRQHandler+0xdc>)
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	461a      	mov	r2, r3
 8003efe:	4b08      	ldr	r3, [pc, #32]	@ (8003f20 <UART4_IRQHandler+0xd4>)
 8003f00:	7819      	ldrb	r1, [r3, #0]
 8003f02:	4b0a      	ldr	r3, [pc, #40]	@ (8003f2c <UART4_IRQHandler+0xe0>)
 8003f04:	5499      	strb	r1, [r3, r2]
			cnt++;
 8003f06:	4b08      	ldr	r3, [pc, #32]	@ (8003f28 <UART4_IRQHandler+0xdc>)
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	4b06      	ldr	r3, [pc, #24]	@ (8003f28 <UART4_IRQHandler+0xdc>)
 8003f10:	701a      	strb	r2, [r3, #0]
			break;
 8003f12:	e000      	b.n	8003f16 <UART4_IRQHandler+0xca>
			break;
 8003f14:	bf00      	nop
	}
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003f16:	bf00      	nop
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40004c00 	.word	0x40004c00
 8003f20:	200003e3 	.word	0x200003e3
 8003f24:	200003e2 	.word	0x200003e2
 8003f28:	20000431 	.word	0x20000431
 8003f2c:	200003e8 	.word	0x200003e8
 8003f30:	2000040c 	.word	0x2000040c

08003f34 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	static unsigned char ibus_cnt =0;

	if(LL_USART_IsActiveFlag_RXNE(UART5))
 8003f38:	4832      	ldr	r0, [pc, #200]	@ (8004004 <UART5_IRQHandler+0xd0>)
 8003f3a:	f7ff ff29 	bl	8003d90 <LL_USART_IsActiveFlag_RXNE>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d05c      	beq.n	8003ffe <UART5_IRQHandler+0xca>
	{
		LL_USART_ClearFlag_RXNE(UART5);
 8003f44:	482f      	ldr	r0, [pc, #188]	@ (8004004 <UART5_IRQHandler+0xd0>)
 8003f46:	f7ff ff36 	bl	8003db6 <LL_USART_ClearFlag_RXNE>
		uart5_rx_data = LL_USART_ReceiveData8(UART5);
 8003f4a:	482e      	ldr	r0, [pc, #184]	@ (8004004 <UART5_IRQHandler+0xd0>)
 8003f4c:	f7ff ff41 	bl	8003dd2 <LL_USART_ReceiveData8>
 8003f50:	4603      	mov	r3, r0
 8003f52:	461a      	mov	r2, r3
 8003f54:	4b2c      	ldr	r3, [pc, #176]	@ (8004008 <UART5_IRQHandler+0xd4>)
 8003f56:	701a      	strb	r2, [r3, #0]
		uart5_rx_flag = 1;
 8003f58:	4b2c      	ldr	r3, [pc, #176]	@ (800400c <UART5_IRQHandler+0xd8>)
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	701a      	strb	r2, [r3, #0]

//		while(!LL_USART_IsActiveFlag_TXE(USART6));
//		LL_USART_TransmitData8(USART6, uart5_rx_data);

		switch(ibus_cnt)
 8003f5e:	4b2c      	ldr	r3, [pc, #176]	@ (8004010 <UART5_IRQHandler+0xdc>)
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	2b1f      	cmp	r3, #31
 8003f64:	d02e      	beq.n	8003fc4 <UART5_IRQHandler+0x90>
 8003f66:	2b1f      	cmp	r3, #31
 8003f68:	dc3a      	bgt.n	8003fe0 <UART5_IRQHandler+0xac>
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d002      	beq.n	8003f74 <UART5_IRQHandler+0x40>
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d012      	beq.n	8003f98 <UART5_IRQHandler+0x64>
 8003f72:	e035      	b.n	8003fe0 <UART5_IRQHandler+0xac>
		{
		case 0 :
			if(uart5_rx_data == 0x20)
 8003f74:	4b24      	ldr	r3, [pc, #144]	@ (8004008 <UART5_IRQHandler+0xd4>)
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	2b20      	cmp	r3, #32
 8003f7a:	d13f      	bne.n	8003ffc <UART5_IRQHandler+0xc8>
			{
				ibus_rx_buf[ibus_cnt] = uart5_rx_data;
 8003f7c:	4b24      	ldr	r3, [pc, #144]	@ (8004010 <UART5_IRQHandler+0xdc>)
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	461a      	mov	r2, r3
 8003f82:	4b21      	ldr	r3, [pc, #132]	@ (8004008 <UART5_IRQHandler+0xd4>)
 8003f84:	7819      	ldrb	r1, [r3, #0]
 8003f86:	4b23      	ldr	r3, [pc, #140]	@ (8004014 <UART5_IRQHandler+0xe0>)
 8003f88:	5499      	strb	r1, [r3, r2]
				ibus_cnt++;
 8003f8a:	4b21      	ldr	r3, [pc, #132]	@ (8004010 <UART5_IRQHandler+0xdc>)
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	4b1f      	ldr	r3, [pc, #124]	@ (8004010 <UART5_IRQHandler+0xdc>)
 8003f94:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003f96:	e031      	b.n	8003ffc <UART5_IRQHandler+0xc8>
		case 1:
			if(uart5_rx_data == 0x40)
 8003f98:	4b1b      	ldr	r3, [pc, #108]	@ (8004008 <UART5_IRQHandler+0xd4>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b40      	cmp	r3, #64	@ 0x40
 8003f9e:	d10d      	bne.n	8003fbc <UART5_IRQHandler+0x88>
			{
				ibus_rx_buf[ibus_cnt] = uart5_rx_data;
 8003fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8004010 <UART5_IRQHandler+0xdc>)
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	4b18      	ldr	r3, [pc, #96]	@ (8004008 <UART5_IRQHandler+0xd4>)
 8003fa8:	7819      	ldrb	r1, [r3, #0]
 8003faa:	4b1a      	ldr	r3, [pc, #104]	@ (8004014 <UART5_IRQHandler+0xe0>)
 8003fac:	5499      	strb	r1, [r3, r2]
				ibus_cnt++;
 8003fae:	4b18      	ldr	r3, [pc, #96]	@ (8004010 <UART5_IRQHandler+0xdc>)
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	4b16      	ldr	r3, [pc, #88]	@ (8004010 <UART5_IRQHandler+0xdc>)
 8003fb8:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				ibus_cnt = 0;
			}
			break;
 8003fba:	e020      	b.n	8003ffe <UART5_IRQHandler+0xca>
				ibus_cnt = 0;
 8003fbc:	4b14      	ldr	r3, [pc, #80]	@ (8004010 <UART5_IRQHandler+0xdc>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	701a      	strb	r2, [r3, #0]
			break;
 8003fc2:	e01c      	b.n	8003ffe <UART5_IRQHandler+0xca>
		case 31:
			ibus_rx_buf[ibus_cnt] = uart5_rx_data;
 8003fc4:	4b12      	ldr	r3, [pc, #72]	@ (8004010 <UART5_IRQHandler+0xdc>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	461a      	mov	r2, r3
 8003fca:	4b0f      	ldr	r3, [pc, #60]	@ (8004008 <UART5_IRQHandler+0xd4>)
 8003fcc:	7819      	ldrb	r1, [r3, #0]
 8003fce:	4b11      	ldr	r3, [pc, #68]	@ (8004014 <UART5_IRQHandler+0xe0>)
 8003fd0:	5499      	strb	r1, [r3, r2]
			ibus_cnt = 0;
 8003fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8004010 <UART5_IRQHandler+0xdc>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 8003fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8004018 <UART5_IRQHandler+0xe4>)
 8003fda:	2201      	movs	r2, #1
 8003fdc:	701a      	strb	r2, [r3, #0]
			break;
 8003fde:	e00e      	b.n	8003ffe <UART5_IRQHandler+0xca>
		default:
			ibus_rx_buf[ibus_cnt] = uart5_rx_data;
 8003fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8004010 <UART5_IRQHandler+0xdc>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	4b08      	ldr	r3, [pc, #32]	@ (8004008 <UART5_IRQHandler+0xd4>)
 8003fe8:	7819      	ldrb	r1, [r3, #0]
 8003fea:	4b0a      	ldr	r3, [pc, #40]	@ (8004014 <UART5_IRQHandler+0xe0>)
 8003fec:	5499      	strb	r1, [r3, r2]
			ibus_cnt++;
 8003fee:	4b08      	ldr	r3, [pc, #32]	@ (8004010 <UART5_IRQHandler+0xdc>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	4b06      	ldr	r3, [pc, #24]	@ (8004010 <UART5_IRQHandler+0xdc>)
 8003ff8:	701a      	strb	r2, [r3, #0]
			break;
 8003ffa:	e000      	b.n	8003ffe <UART5_IRQHandler+0xca>
			break;
 8003ffc:	bf00      	nop
	}
  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003ffe:	bf00      	nop
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	40005000 	.word	0x40005000
 8004008:	200003e5 	.word	0x200003e5
 800400c:	200003e4 	.word	0x200003e4
 8004010:	20000432 	.word	0x20000432
 8004014:	20000410 	.word	0x20000410
 8004018:	20000430 	.word	0x20000430

0800401c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004020:	4802      	ldr	r0, [pc, #8]	@ (800402c <DMA2_Stream0_IRQHandler+0x10>)
 8004022:	f001 fc11 	bl	8005848 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004026:	bf00      	nop
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	2000032c 	.word	0x2000032c

08004030 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6))
 8004034:	480a      	ldr	r0, [pc, #40]	@ (8004060 <USART6_IRQHandler+0x30>)
 8004036:	f7ff feab 	bl	8003d90 <LL_USART_IsActiveFlag_RXNE>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00c      	beq.n	800405a <USART6_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART6);
 8004040:	4807      	ldr	r0, [pc, #28]	@ (8004060 <USART6_IRQHandler+0x30>)
 8004042:	f7ff feb8 	bl	8003db6 <LL_USART_ClearFlag_RXNE>
		uart6_rx_data = LL_USART_ReceiveData8(USART6);
 8004046:	4806      	ldr	r0, [pc, #24]	@ (8004060 <USART6_IRQHandler+0x30>)
 8004048:	f7ff fec3 	bl	8003dd2 <LL_USART_ReceiveData8>
 800404c:	4603      	mov	r3, r0
 800404e:	461a      	mov	r2, r3
 8004050:	4b04      	ldr	r3, [pc, #16]	@ (8004064 <USART6_IRQHandler+0x34>)
 8004052:	701a      	strb	r2, [r3, #0]
		uart6_rx_flag = 1;
 8004054:	4b04      	ldr	r3, [pc, #16]	@ (8004068 <USART6_IRQHandler+0x38>)
 8004056:	2201      	movs	r2, #1
 8004058:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800405a:	bf00      	nop
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40011400 	.word	0x40011400
 8004064:	200003e1 	.word	0x200003e1
 8004068:	200003e0 	.word	0x200003e0

0800406c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  return 1;
 8004070:	2301      	movs	r3, #1
}
 8004072:	4618      	mov	r0, r3
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <_kill>:

int _kill(int pid, int sig)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004086:	f004 fdb7 	bl	8008bf8 <__errno>
 800408a:	4603      	mov	r3, r0
 800408c:	2216      	movs	r2, #22
 800408e:	601a      	str	r2, [r3, #0]
  return -1;
 8004090:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004094:	4618      	mov	r0, r3
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <_exit>:

void _exit (int status)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80040a4:	f04f 31ff 	mov.w	r1, #4294967295
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f7ff ffe7 	bl	800407c <_kill>
  while (1) {}    /* Make sure we hang here */
 80040ae:	bf00      	nop
 80040b0:	e7fd      	b.n	80040ae <_exit+0x12>

080040b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b086      	sub	sp, #24
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	60f8      	str	r0, [r7, #12]
 80040ba:	60b9      	str	r1, [r7, #8]
 80040bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040be:	2300      	movs	r3, #0
 80040c0:	617b      	str	r3, [r7, #20]
 80040c2:	e00a      	b.n	80040da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80040c4:	f3af 8000 	nop.w
 80040c8:	4601      	mov	r1, r0
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	1c5a      	adds	r2, r3, #1
 80040ce:	60ba      	str	r2, [r7, #8]
 80040d0:	b2ca      	uxtb	r2, r1
 80040d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	3301      	adds	r3, #1
 80040d8:	617b      	str	r3, [r7, #20]
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	429a      	cmp	r2, r3
 80040e0:	dbf0      	blt.n	80040c4 <_read+0x12>
  }

  return len;
 80040e2:	687b      	ldr	r3, [r7, #4]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3718      	adds	r7, #24
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <_close>:
  }
  return len;
}

int _close(int file)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80040f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004114:	605a      	str	r2, [r3, #4]
  return 0;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <_isatty>:

int _isatty(int file)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800412c:	2301      	movs	r3, #1
}
 800412e:	4618      	mov	r0, r3
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800413a:	b480      	push	{r7}
 800413c:	b085      	sub	sp, #20
 800413e:	af00      	add	r7, sp, #0
 8004140:	60f8      	str	r0, [r7, #12]
 8004142:	60b9      	str	r1, [r7, #8]
 8004144:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800415c:	4a14      	ldr	r2, [pc, #80]	@ (80041b0 <_sbrk+0x5c>)
 800415e:	4b15      	ldr	r3, [pc, #84]	@ (80041b4 <_sbrk+0x60>)
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004168:	4b13      	ldr	r3, [pc, #76]	@ (80041b8 <_sbrk+0x64>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d102      	bne.n	8004176 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004170:	4b11      	ldr	r3, [pc, #68]	@ (80041b8 <_sbrk+0x64>)
 8004172:	4a12      	ldr	r2, [pc, #72]	@ (80041bc <_sbrk+0x68>)
 8004174:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004176:	4b10      	ldr	r3, [pc, #64]	@ (80041b8 <_sbrk+0x64>)
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4413      	add	r3, r2
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	429a      	cmp	r2, r3
 8004182:	d207      	bcs.n	8004194 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004184:	f004 fd38 	bl	8008bf8 <__errno>
 8004188:	4603      	mov	r3, r0
 800418a:	220c      	movs	r2, #12
 800418c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800418e:	f04f 33ff 	mov.w	r3, #4294967295
 8004192:	e009      	b.n	80041a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004194:	4b08      	ldr	r3, [pc, #32]	@ (80041b8 <_sbrk+0x64>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800419a:	4b07      	ldr	r3, [pc, #28]	@ (80041b8 <_sbrk+0x64>)
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4413      	add	r3, r2
 80041a2:	4a05      	ldr	r2, [pc, #20]	@ (80041b8 <_sbrk+0x64>)
 80041a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041a6:	68fb      	ldr	r3, [r7, #12]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3718      	adds	r7, #24
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	20020000 	.word	0x20020000
 80041b4:	00000400 	.word	0x00000400
 80041b8:	20000434 	.word	0x20000434
 80041bc:	20000588 	.word	0x20000588

080041c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041c4:	4b06      	ldr	r3, [pc, #24]	@ (80041e0 <SystemInit+0x20>)
 80041c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ca:	4a05      	ldr	r2, [pc, #20]	@ (80041e0 <SystemInit+0x20>)
 80041cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80041d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80041d4:	bf00      	nop
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	e000ed00 	.word	0xe000ed00

080041e4 <LL_TIM_EnableARRPreload>:
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	601a      	str	r2, [r3, #0]
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <LL_TIM_OC_EnableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d01c      	beq.n	800424e <LL_TIM_OC_EnableFast+0x4a>
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	2b04      	cmp	r3, #4
 8004218:	d017      	beq.n	800424a <LL_TIM_OC_EnableFast+0x46>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b10      	cmp	r3, #16
 800421e:	d012      	beq.n	8004246 <LL_TIM_OC_EnableFast+0x42>
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	2b40      	cmp	r3, #64	@ 0x40
 8004224:	d00d      	beq.n	8004242 <LL_TIM_OC_EnableFast+0x3e>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800422c:	d007      	beq.n	800423e <LL_TIM_OC_EnableFast+0x3a>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004234:	d101      	bne.n	800423a <LL_TIM_OC_EnableFast+0x36>
 8004236:	2305      	movs	r3, #5
 8004238:	e00a      	b.n	8004250 <LL_TIM_OC_EnableFast+0x4c>
 800423a:	2306      	movs	r3, #6
 800423c:	e008      	b.n	8004250 <LL_TIM_OC_EnableFast+0x4c>
 800423e:	2304      	movs	r3, #4
 8004240:	e006      	b.n	8004250 <LL_TIM_OC_EnableFast+0x4c>
 8004242:	2303      	movs	r3, #3
 8004244:	e004      	b.n	8004250 <LL_TIM_OC_EnableFast+0x4c>
 8004246:	2302      	movs	r3, #2
 8004248:	e002      	b.n	8004250 <LL_TIM_OC_EnableFast+0x4c>
 800424a:	2301      	movs	r3, #1
 800424c:	e000      	b.n	8004250 <LL_TIM_OC_EnableFast+0x4c>
 800424e:	2300      	movs	r3, #0
 8004250:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	3318      	adds	r3, #24
 8004256:	4619      	mov	r1, r3
 8004258:	7bfb      	ldrb	r3, [r7, #15]
 800425a:	4a0a      	ldr	r2, [pc, #40]	@ (8004284 <LL_TIM_OC_EnableFast+0x80>)
 800425c:	5cd3      	ldrb	r3, [r2, r3]
 800425e:	440b      	add	r3, r1
 8004260:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	7bfb      	ldrb	r3, [r7, #15]
 8004268:	4907      	ldr	r1, [pc, #28]	@ (8004288 <LL_TIM_OC_EnableFast+0x84>)
 800426a:	5ccb      	ldrb	r3, [r1, r3]
 800426c:	4619      	mov	r1, r3
 800426e:	2304      	movs	r3, #4
 8004270:	408b      	lsls	r3, r1
 8004272:	431a      	orrs	r2, r3
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	601a      	str	r2, [r3, #0]

}
 8004278:	bf00      	nop
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	0800b868 	.word	0x0800b868
 8004288:	0800b870 	.word	0x0800b870

0800428c <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d01c      	beq.n	80042d6 <LL_TIM_OC_EnablePreload+0x4a>
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	2b04      	cmp	r3, #4
 80042a0:	d017      	beq.n	80042d2 <LL_TIM_OC_EnablePreload+0x46>
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	2b10      	cmp	r3, #16
 80042a6:	d012      	beq.n	80042ce <LL_TIM_OC_EnablePreload+0x42>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	2b40      	cmp	r3, #64	@ 0x40
 80042ac:	d00d      	beq.n	80042ca <LL_TIM_OC_EnablePreload+0x3e>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042b4:	d007      	beq.n	80042c6 <LL_TIM_OC_EnablePreload+0x3a>
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042bc:	d101      	bne.n	80042c2 <LL_TIM_OC_EnablePreload+0x36>
 80042be:	2305      	movs	r3, #5
 80042c0:	e00a      	b.n	80042d8 <LL_TIM_OC_EnablePreload+0x4c>
 80042c2:	2306      	movs	r3, #6
 80042c4:	e008      	b.n	80042d8 <LL_TIM_OC_EnablePreload+0x4c>
 80042c6:	2304      	movs	r3, #4
 80042c8:	e006      	b.n	80042d8 <LL_TIM_OC_EnablePreload+0x4c>
 80042ca:	2303      	movs	r3, #3
 80042cc:	e004      	b.n	80042d8 <LL_TIM_OC_EnablePreload+0x4c>
 80042ce:	2302      	movs	r3, #2
 80042d0:	e002      	b.n	80042d8 <LL_TIM_OC_EnablePreload+0x4c>
 80042d2:	2301      	movs	r3, #1
 80042d4:	e000      	b.n	80042d8 <LL_TIM_OC_EnablePreload+0x4c>
 80042d6:	2300      	movs	r3, #0
 80042d8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	3318      	adds	r3, #24
 80042de:	4619      	mov	r1, r3
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
 80042e2:	4a0a      	ldr	r2, [pc, #40]	@ (800430c <LL_TIM_OC_EnablePreload+0x80>)
 80042e4:	5cd3      	ldrb	r3, [r2, r3]
 80042e6:	440b      	add	r3, r1
 80042e8:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	7bfb      	ldrb	r3, [r7, #15]
 80042f0:	4907      	ldr	r1, [pc, #28]	@ (8004310 <LL_TIM_OC_EnablePreload+0x84>)
 80042f2:	5ccb      	ldrb	r3, [r1, r3]
 80042f4:	4619      	mov	r1, r3
 80042f6:	2308      	movs	r3, #8
 80042f8:	408b      	lsls	r3, r1
 80042fa:	431a      	orrs	r2, r3
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	601a      	str	r2, [r3, #0]
}
 8004300:	bf00      	nop
 8004302:	3714      	adds	r7, #20
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	0800b868 	.word	0x0800b868
 8004310:	0800b870 	.word	0x0800b870

08004314 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004326:	f023 0307 	bic.w	r3, r3, #7
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	431a      	orrs	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	609a      	str	r2, [r3, #8]
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
 8004346:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	605a      	str	r2, [r3, #4]
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	609a      	str	r2, [r3, #8]
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <LL_AHB1_GRP1_EnableClock>:
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800438c:	4b08      	ldr	r3, [pc, #32]	@ (80043b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800438e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004390:	4907      	ldr	r1, [pc, #28]	@ (80043b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4313      	orrs	r3, r2
 8004396:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004398:	4b05      	ldr	r3, [pc, #20]	@ (80043b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800439a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4013      	ands	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80043a2:	68fb      	ldr	r3, [r7, #12]
}
 80043a4:	bf00      	nop
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	40023800 	.word	0x40023800

080043b4 <LL_APB1_GRP1_EnableClock>:
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80043bc:	4b08      	ldr	r3, [pc, #32]	@ (80043e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80043be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043c0:	4907      	ldr	r1, [pc, #28]	@ (80043e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80043c8:	4b05      	ldr	r3, [pc, #20]	@ (80043e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80043ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4013      	ands	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80043d2:	68fb      	ldr	r3, [r7, #12]
}
 80043d4:	bf00      	nop
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr
 80043e0:	40023800 	.word	0x40023800

080043e4 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b094      	sub	sp, #80	@ 0x50
 80043e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80043ea:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	605a      	str	r2, [r3, #4]
 80043f4:	609a      	str	r2, [r3, #8]
 80043f6:	60da      	str	r2, [r3, #12]
 80043f8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80043fa:	f107 031c 	add.w	r3, r7, #28
 80043fe:	2220      	movs	r2, #32
 8004400:	2100      	movs	r1, #0
 8004402:	4618      	mov	r0, r3
 8004404:	f004 fba6 	bl	8008b54 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004408:	1d3b      	adds	r3, r7, #4
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	605a      	str	r2, [r3, #4]
 8004410:	609a      	str	r2, [r3, #8]
 8004412:	60da      	str	r2, [r3, #12]
 8004414:	611a      	str	r2, [r3, #16]
 8004416:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8004418:	2002      	movs	r0, #2
 800441a:	f7ff ffcb 	bl	80043b4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 1000-LL_TIM_IC_FILTER_FDIV1_N2;
 800441e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004422:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004424:	2300      	movs	r3, #0
 8004426:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 21-LL_TIM_IC_FILTER_FDIV1_N2;
 8004428:	4b25      	ldr	r3, [pc, #148]	@ (80044c0 <MX_TIM3_Init+0xdc>)
 800442a:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800442c:	2300      	movs	r3, #0
 800442e:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8004430:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004434:	4619      	mov	r1, r3
 8004436:	4823      	ldr	r0, [pc, #140]	@ (80044c4 <MX_TIM3_Init+0xe0>)
 8004438:	f002 ffc2 	bl	80073c0 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 800443c:	4821      	ldr	r0, [pc, #132]	@ (80044c4 <MX_TIM3_Init+0xe0>)
 800443e:	f7ff fed1 	bl	80041e4 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8004442:	2100      	movs	r1, #0
 8004444:	481f      	ldr	r0, [pc, #124]	@ (80044c4 <MX_TIM3_Init+0xe0>)
 8004446:	f7ff ff65 	bl	8004314 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 800444a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800444e:	481d      	ldr	r0, [pc, #116]	@ (80044c4 <MX_TIM3_Init+0xe0>)
 8004450:	f7ff ff1c 	bl	800428c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8004454:	2360      	movs	r3, #96	@ 0x60
 8004456:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004458:	2300      	movs	r3, #0
 800445a:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800445c:	2300      	movs	r3, #0
 800445e:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 8004460:	230a      	movs	r3, #10
 8004462:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004464:	2300      	movs	r3, #0
 8004466:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8004468:	f107 031c 	add.w	r3, r7, #28
 800446c:	461a      	mov	r2, r3
 800446e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004472:	4814      	ldr	r0, [pc, #80]	@ (80044c4 <MX_TIM3_Init+0xe0>)
 8004474:	f003 f83e 	bl	80074f4 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8004478:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800447c:	4811      	ldr	r0, [pc, #68]	@ (80044c4 <MX_TIM3_Init+0xe0>)
 800447e:	f7ff fec1 	bl	8004204 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8004482:	2100      	movs	r1, #0
 8004484:	480f      	ldr	r0, [pc, #60]	@ (80044c4 <MX_TIM3_Init+0xe0>)
 8004486:	f7ff ff5a 	bl	800433e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 800448a:	480e      	ldr	r0, [pc, #56]	@ (80044c4 <MX_TIM3_Init+0xe0>)
 800448c:	f7ff ff6a 	bl	8004364 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8004490:	2002      	movs	r0, #2
 8004492:	f7ff ff77 	bl	8004384 <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8004496:	2302      	movs	r3, #2
 8004498:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800449a:	2302      	movs	r3, #2
 800449c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800449e:	2300      	movs	r3, #0
 80044a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80044a2:	2300      	movs	r3, #0
 80044a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80044a6:	2300      	movs	r3, #0
 80044a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80044aa:	2302      	movs	r3, #2
 80044ac:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044ae:	1d3b      	adds	r3, r7, #4
 80044b0:	4619      	mov	r1, r3
 80044b2:	4805      	ldr	r0, [pc, #20]	@ (80044c8 <MX_TIM3_Init+0xe4>)
 80044b4:	f002 fce1 	bl	8006e7a <LL_GPIO_Init>

}
 80044b8:	bf00      	nop
 80044ba:	3750      	adds	r7, #80	@ 0x50
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	fff00015 	.word	0xfff00015
 80044c4:	40000400 	.word	0x40000400
 80044c8:	40020400 	.word	0x40020400

080044cc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b094      	sub	sp, #80	@ 0x50
 80044d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80044d2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80044d6:	2200      	movs	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	605a      	str	r2, [r3, #4]
 80044dc:	609a      	str	r2, [r3, #8]
 80044de:	60da      	str	r2, [r3, #12]
 80044e0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80044e2:	f107 031c 	add.w	r3, r7, #28
 80044e6:	2220      	movs	r2, #32
 80044e8:	2100      	movs	r1, #0
 80044ea:	4618      	mov	r0, r3
 80044ec:	f004 fb32 	bl	8008b54 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044f0:	1d3b      	adds	r3, r7, #4
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	605a      	str	r2, [r3, #4]
 80044f8:	609a      	str	r2, [r3, #8]
 80044fa:	60da      	str	r2, [r3, #12]
 80044fc:	611a      	str	r2, [r3, #16]
 80044fe:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 8004500:	2008      	movs	r0, #8
 8004502:	f7ff ff57 	bl	80043b4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8004506:	2300      	movs	r3, #0
 8004508:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800450a:	2300      	movs	r3, #0
 800450c:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 41999;
 800450e:	f24a 430f 	movw	r3, #41999	@ 0xa40f
 8004512:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004514:	2300      	movs	r3, #0
 8004516:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 8004518:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800451c:	4619      	mov	r1, r3
 800451e:	483a      	ldr	r0, [pc, #232]	@ (8004608 <MX_TIM5_Init+0x13c>)
 8004520:	f002 ff4e 	bl	80073c0 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM5);
 8004524:	4838      	ldr	r0, [pc, #224]	@ (8004608 <MX_TIM5_Init+0x13c>)
 8004526:	f7ff fe5d 	bl	80041e4 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 800452a:	2100      	movs	r1, #0
 800452c:	4836      	ldr	r0, [pc, #216]	@ (8004608 <MX_TIM5_Init+0x13c>)
 800452e:	f7ff fef1 	bl	8004314 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH1);
 8004532:	2101      	movs	r1, #1
 8004534:	4834      	ldr	r0, [pc, #208]	@ (8004608 <MX_TIM5_Init+0x13c>)
 8004536:	f7ff fea9 	bl	800428c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800453a:	2360      	movs	r3, #96	@ 0x60
 800453c:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800453e:	2300      	movs	r3, #0
 8004540:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004542:	2300      	movs	r3, #0
 8004544:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8004546:	2300      	movs	r3, #0
 8004548:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800454a:	2300      	movs	r3, #0
 800454c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800454e:	f107 031c 	add.w	r3, r7, #28
 8004552:	461a      	mov	r2, r3
 8004554:	2101      	movs	r1, #1
 8004556:	482c      	ldr	r0, [pc, #176]	@ (8004608 <MX_TIM5_Init+0x13c>)
 8004558:	f002 ffcc 	bl	80074f4 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH1);
 800455c:	2101      	movs	r1, #1
 800455e:	482a      	ldr	r0, [pc, #168]	@ (8004608 <MX_TIM5_Init+0x13c>)
 8004560:	f7ff fe50 	bl	8004204 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH2);
 8004564:	2110      	movs	r1, #16
 8004566:	4828      	ldr	r0, [pc, #160]	@ (8004608 <MX_TIM5_Init+0x13c>)
 8004568:	f7ff fe90 	bl	800428c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800456c:	f107 031c 	add.w	r3, r7, #28
 8004570:	461a      	mov	r2, r3
 8004572:	2110      	movs	r1, #16
 8004574:	4824      	ldr	r0, [pc, #144]	@ (8004608 <MX_TIM5_Init+0x13c>)
 8004576:	f002 ffbd 	bl	80074f4 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH2);
 800457a:	2110      	movs	r1, #16
 800457c:	4822      	ldr	r0, [pc, #136]	@ (8004608 <MX_TIM5_Init+0x13c>)
 800457e:	f7ff fe41 	bl	8004204 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH3);
 8004582:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004586:	4820      	ldr	r0, [pc, #128]	@ (8004608 <MX_TIM5_Init+0x13c>)
 8004588:	f7ff fe80 	bl	800428c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 800458c:	f107 031c 	add.w	r3, r7, #28
 8004590:	461a      	mov	r2, r3
 8004592:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004596:	481c      	ldr	r0, [pc, #112]	@ (8004608 <MX_TIM5_Init+0x13c>)
 8004598:	f002 ffac 	bl	80074f4 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH3);
 800459c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80045a0:	4819      	ldr	r0, [pc, #100]	@ (8004608 <MX_TIM5_Init+0x13c>)
 80045a2:	f7ff fe2f 	bl	8004204 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH4);
 80045a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80045aa:	4817      	ldr	r0, [pc, #92]	@ (8004608 <MX_TIM5_Init+0x13c>)
 80045ac:	f7ff fe6e 	bl	800428c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80045b0:	f107 031c 	add.w	r3, r7, #28
 80045b4:	461a      	mov	r2, r3
 80045b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80045ba:	4813      	ldr	r0, [pc, #76]	@ (8004608 <MX_TIM5_Init+0x13c>)
 80045bc:	f002 ff9a 	bl	80074f4 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH4);
 80045c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80045c4:	4810      	ldr	r0, [pc, #64]	@ (8004608 <MX_TIM5_Init+0x13c>)
 80045c6:	f7ff fe1d 	bl	8004204 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 80045ca:	2100      	movs	r1, #0
 80045cc:	480e      	ldr	r0, [pc, #56]	@ (8004608 <MX_TIM5_Init+0x13c>)
 80045ce:	f7ff feb6 	bl	800433e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 80045d2:	480d      	ldr	r0, [pc, #52]	@ (8004608 <MX_TIM5_Init+0x13c>)
 80045d4:	f7ff fec6 	bl	8004364 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80045d8:	2001      	movs	r0, #1
 80045da:	f7ff fed3 	bl	8004384 <LL_AHB1_GRP1_EnableClock>
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 80045de:	230f      	movs	r3, #15
 80045e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80045e2:	2302      	movs	r3, #2
 80045e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80045e6:	2300      	movs	r3, #0
 80045e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80045ea:	2300      	movs	r3, #0
 80045ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80045ee:	2300      	movs	r3, #0
 80045f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80045f2:	2302      	movs	r3, #2
 80045f4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045f6:	1d3b      	adds	r3, r7, #4
 80045f8:	4619      	mov	r1, r3
 80045fa:	4804      	ldr	r0, [pc, #16]	@ (800460c <MX_TIM5_Init+0x140>)
 80045fc:	f002 fc3d 	bl	8006e7a <LL_GPIO_Init>

}
 8004600:	bf00      	nop
 8004602:	3750      	adds	r7, #80	@ 0x50
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	40000c00 	.word	0x40000c00
 800460c:	40020000 	.word	0x40020000

08004610 <__NVIC_GetPriorityGrouping>:
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004614:	4b04      	ldr	r3, [pc, #16]	@ (8004628 <__NVIC_GetPriorityGrouping+0x18>)
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	0a1b      	lsrs	r3, r3, #8
 800461a:	f003 0307 	and.w	r3, r3, #7
}
 800461e:	4618      	mov	r0, r3
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr
 8004628:	e000ed00 	.word	0xe000ed00

0800462c <__NVIC_EnableIRQ>:
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	4603      	mov	r3, r0
 8004634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800463a:	2b00      	cmp	r3, #0
 800463c:	db0b      	blt.n	8004656 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800463e:	79fb      	ldrb	r3, [r7, #7]
 8004640:	f003 021f 	and.w	r2, r3, #31
 8004644:	4907      	ldr	r1, [pc, #28]	@ (8004664 <__NVIC_EnableIRQ+0x38>)
 8004646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800464a:	095b      	lsrs	r3, r3, #5
 800464c:	2001      	movs	r0, #1
 800464e:	fa00 f202 	lsl.w	r2, r0, r2
 8004652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004656:	bf00      	nop
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	e000e100 	.word	0xe000e100

08004668 <__NVIC_SetPriority>:
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	4603      	mov	r3, r0
 8004670:	6039      	str	r1, [r7, #0]
 8004672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004678:	2b00      	cmp	r3, #0
 800467a:	db0a      	blt.n	8004692 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	b2da      	uxtb	r2, r3
 8004680:	490c      	ldr	r1, [pc, #48]	@ (80046b4 <__NVIC_SetPriority+0x4c>)
 8004682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004686:	0112      	lsls	r2, r2, #4
 8004688:	b2d2      	uxtb	r2, r2
 800468a:	440b      	add	r3, r1
 800468c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004690:	e00a      	b.n	80046a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	b2da      	uxtb	r2, r3
 8004696:	4908      	ldr	r1, [pc, #32]	@ (80046b8 <__NVIC_SetPriority+0x50>)
 8004698:	79fb      	ldrb	r3, [r7, #7]
 800469a:	f003 030f 	and.w	r3, r3, #15
 800469e:	3b04      	subs	r3, #4
 80046a0:	0112      	lsls	r2, r2, #4
 80046a2:	b2d2      	uxtb	r2, r2
 80046a4:	440b      	add	r3, r1
 80046a6:	761a      	strb	r2, [r3, #24]
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr
 80046b4:	e000e100 	.word	0xe000e100
 80046b8:	e000ed00 	.word	0xe000ed00

080046bc <NVIC_EncodePriority>:
{
 80046bc:	b480      	push	{r7}
 80046be:	b089      	sub	sp, #36	@ 0x24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	f1c3 0307 	rsb	r3, r3, #7
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	bf28      	it	cs
 80046da:	2304      	movcs	r3, #4
 80046dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	3304      	adds	r3, #4
 80046e2:	2b06      	cmp	r3, #6
 80046e4:	d902      	bls.n	80046ec <NVIC_EncodePriority+0x30>
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	3b03      	subs	r3, #3
 80046ea:	e000      	b.n	80046ee <NVIC_EncodePriority+0x32>
 80046ec:	2300      	movs	r3, #0
 80046ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046f0:	f04f 32ff 	mov.w	r2, #4294967295
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	43da      	mvns	r2, r3
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	401a      	ands	r2, r3
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004704:	f04f 31ff 	mov.w	r1, #4294967295
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	fa01 f303 	lsl.w	r3, r1, r3
 800470e:	43d9      	mvns	r1, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004714:	4313      	orrs	r3, r2
}
 8004716:	4618      	mov	r0, r3
 8004718:	3724      	adds	r7, #36	@ 0x24
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <LL_USART_Enable>:
{
 8004722:	b480      	push	{r7}
 8004724:	b083      	sub	sp, #12
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	60da      	str	r2, [r3, #12]
}
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <LL_USART_ConfigAsyncMode>:
{
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	615a      	str	r2, [r3, #20]
}
 8004762:	bf00      	nop
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
	...

08004770 <LL_AHB1_GRP1_EnableClock>:
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004778:	4b08      	ldr	r3, [pc, #32]	@ (800479c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800477a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800477c:	4907      	ldr	r1, [pc, #28]	@ (800479c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4313      	orrs	r3, r2
 8004782:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004784:	4b05      	ldr	r3, [pc, #20]	@ (800479c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004786:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4013      	ands	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800478e:	68fb      	ldr	r3, [r7, #12]
}
 8004790:	bf00      	nop
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	40023800 	.word	0x40023800

080047a0 <LL_APB1_GRP1_EnableClock>:
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80047a8:	4b08      	ldr	r3, [pc, #32]	@ (80047cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80047aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047ac:	4907      	ldr	r1, [pc, #28]	@ (80047cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80047b4:	4b05      	ldr	r3, [pc, #20]	@ (80047cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80047b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4013      	ands	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80047be:	68fb      	ldr	r3, [r7, #12]
}
 80047c0:	bf00      	nop
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	40023800 	.word	0x40023800

080047d0 <LL_APB2_GRP1_EnableClock>:
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80047d8:	4b08      	ldr	r3, [pc, #32]	@ (80047fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80047da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047dc:	4907      	ldr	r1, [pc, #28]	@ (80047fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80047e4:	4b05      	ldr	r3, [pc, #20]	@ (80047fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80047e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4013      	ands	r3, r2
 80047ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80047ee:	68fb      	ldr	r3, [r7, #12]
}
 80047f0:	bf00      	nop
 80047f2:	3714      	adds	r7, #20
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	40023800 	.word	0x40023800

08004800 <MX_UART4_Init>:

/* USER CODE END 0 */

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b08e      	sub	sp, #56	@ 0x38
 8004804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004806:	f107 031c 	add.w	r3, r7, #28
 800480a:	2200      	movs	r2, #0
 800480c:	601a      	str	r2, [r3, #0]
 800480e:	605a      	str	r2, [r3, #4]
 8004810:	609a      	str	r2, [r3, #8]
 8004812:	60da      	str	r2, [r3, #12]
 8004814:	611a      	str	r2, [r3, #16]
 8004816:	615a      	str	r2, [r3, #20]
 8004818:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800481a:	1d3b      	adds	r3, r7, #4
 800481c:	2200      	movs	r2, #0
 800481e:	601a      	str	r2, [r3, #0]
 8004820:	605a      	str	r2, [r3, #4]
 8004822:	609a      	str	r2, [r3, #8]
 8004824:	60da      	str	r2, [r3, #12]
 8004826:	611a      	str	r2, [r3, #16]
 8004828:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 800482a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800482e:	f7ff ffb7 	bl	80047a0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8004832:	2004      	movs	r0, #4
 8004834:	f7ff ff9c 	bl	8004770 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 8004838:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800483c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800483e:	2302      	movs	r3, #2
 8004840:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004842:	2303      	movs	r3, #3
 8004844:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004846:	2300      	movs	r3, #0
 8004848:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800484a:	2300      	movs	r3, #0
 800484c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800484e:	2308      	movs	r3, #8
 8004850:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004852:	1d3b      	adds	r3, r7, #4
 8004854:	4619      	mov	r1, r3
 8004856:	4819      	ldr	r0, [pc, #100]	@ (80048bc <MX_UART4_Init+0xbc>)
 8004858:	f002 fb0f 	bl	8006e7a <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800485c:	f7ff fed8 	bl	8004610 <__NVIC_GetPriorityGrouping>
 8004860:	4603      	mov	r3, r0
 8004862:	2200      	movs	r2, #0
 8004864:	2100      	movs	r1, #0
 8004866:	4618      	mov	r0, r3
 8004868:	f7ff ff28 	bl	80046bc <NVIC_EncodePriority>
 800486c:	4603      	mov	r3, r0
 800486e:	4619      	mov	r1, r3
 8004870:	2034      	movs	r0, #52	@ 0x34
 8004872:	f7ff fef9 	bl	8004668 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 8004876:	2034      	movs	r0, #52	@ 0x34
 8004878:	f7ff fed8 	bl	800462c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 800487c:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8004880:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004882:	2300      	movs	r3, #0
 8004884:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004886:	2300      	movs	r3, #0
 8004888:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800488a:	2300      	movs	r3, #0
 800488c:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800488e:	230c      	movs	r3, #12
 8004890:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004892:	2300      	movs	r3, #0
 8004894:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004896:	2300      	movs	r3, #0
 8004898:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 800489a:	f107 031c 	add.w	r3, r7, #28
 800489e:	4619      	mov	r1, r3
 80048a0:	4807      	ldr	r0, [pc, #28]	@ (80048c0 <MX_UART4_Init+0xc0>)
 80048a2:	f003 fa75 	bl	8007d90 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 80048a6:	4806      	ldr	r0, [pc, #24]	@ (80048c0 <MX_UART4_Init+0xc0>)
 80048a8:	f7ff ff4b 	bl	8004742 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 80048ac:	4804      	ldr	r0, [pc, #16]	@ (80048c0 <MX_UART4_Init+0xc0>)
 80048ae:	f7ff ff38 	bl	8004722 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80048b2:	bf00      	nop
 80048b4:	3738      	adds	r7, #56	@ 0x38
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	40020800 	.word	0x40020800
 80048c0:	40004c00 	.word	0x40004c00

080048c4 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b08e      	sub	sp, #56	@ 0x38
 80048c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80048ca:	f107 031c 	add.w	r3, r7, #28
 80048ce:	2200      	movs	r2, #0
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	605a      	str	r2, [r3, #4]
 80048d4:	609a      	str	r2, [r3, #8]
 80048d6:	60da      	str	r2, [r3, #12]
 80048d8:	611a      	str	r2, [r3, #16]
 80048da:	615a      	str	r2, [r3, #20]
 80048dc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048de:	1d3b      	adds	r3, r7, #4
 80048e0:	2200      	movs	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	605a      	str	r2, [r3, #4]
 80048e6:	609a      	str	r2, [r3, #8]
 80048e8:	60da      	str	r2, [r3, #12]
 80048ea:	611a      	str	r2, [r3, #16]
 80048ec:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 80048ee:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80048f2:	f7ff ff55 	bl	80047a0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80048f6:	2004      	movs	r0, #4
 80048f8:	f7ff ff3a 	bl	8004770 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80048fc:	2008      	movs	r0, #8
 80048fe:	f7ff ff37 	bl	8004770 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8004902:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004906:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004908:	2302      	movs	r3, #2
 800490a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800490c:	2303      	movs	r3, #3
 800490e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004910:	2300      	movs	r3, #0
 8004912:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004914:	2300      	movs	r3, #0
 8004916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8004918:	2308      	movs	r3, #8
 800491a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800491c:	1d3b      	adds	r3, r7, #4
 800491e:	4619      	mov	r1, r3
 8004920:	4821      	ldr	r0, [pc, #132]	@ (80049a8 <MX_UART5_Init+0xe4>)
 8004922:	f002 faaa 	bl	8006e7a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8004926:	2304      	movs	r3, #4
 8004928:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800492a:	2302      	movs	r3, #2
 800492c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800492e:	2303      	movs	r3, #3
 8004930:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004932:	2300      	movs	r3, #0
 8004934:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004936:	2300      	movs	r3, #0
 8004938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800493a:	2308      	movs	r3, #8
 800493c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800493e:	1d3b      	adds	r3, r7, #4
 8004940:	4619      	mov	r1, r3
 8004942:	481a      	ldr	r0, [pc, #104]	@ (80049ac <MX_UART5_Init+0xe8>)
 8004944:	f002 fa99 	bl	8006e7a <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004948:	f7ff fe62 	bl	8004610 <__NVIC_GetPriorityGrouping>
 800494c:	4603      	mov	r3, r0
 800494e:	2200      	movs	r2, #0
 8004950:	2100      	movs	r1, #0
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff feb2 	bl	80046bc <NVIC_EncodePriority>
 8004958:	4603      	mov	r3, r0
 800495a:	4619      	mov	r1, r3
 800495c:	2035      	movs	r0, #53	@ 0x35
 800495e:	f7ff fe83 	bl	8004668 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8004962:	2035      	movs	r0, #53	@ 0x35
 8004964:	f7ff fe62 	bl	800462c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8004968:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800496c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800496e:	2300      	movs	r3, #0
 8004970:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004972:	2300      	movs	r3, #0
 8004974:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004976:	2300      	movs	r3, #0
 8004978:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 800497a:	2304      	movs	r3, #4
 800497c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800497e:	2300      	movs	r3, #0
 8004980:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004982:	2300      	movs	r3, #0
 8004984:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 8004986:	f107 031c 	add.w	r3, r7, #28
 800498a:	4619      	mov	r1, r3
 800498c:	4808      	ldr	r0, [pc, #32]	@ (80049b0 <MX_UART5_Init+0xec>)
 800498e:	f003 f9ff 	bl	8007d90 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8004992:	4807      	ldr	r0, [pc, #28]	@ (80049b0 <MX_UART5_Init+0xec>)
 8004994:	f7ff fed5 	bl	8004742 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 8004998:	4805      	ldr	r0, [pc, #20]	@ (80049b0 <MX_UART5_Init+0xec>)
 800499a:	f7ff fec2 	bl	8004722 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800499e:	bf00      	nop
 80049a0:	3738      	adds	r7, #56	@ 0x38
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	40020800 	.word	0x40020800
 80049ac:	40020c00 	.word	0x40020c00
 80049b0:	40005000 	.word	0x40005000

080049b4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08e      	sub	sp, #56	@ 0x38
 80049b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80049ba:	f107 031c 	add.w	r3, r7, #28
 80049be:	2200      	movs	r2, #0
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	605a      	str	r2, [r3, #4]
 80049c4:	609a      	str	r2, [r3, #8]
 80049c6:	60da      	str	r2, [r3, #12]
 80049c8:	611a      	str	r2, [r3, #16]
 80049ca:	615a      	str	r2, [r3, #20]
 80049cc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049ce:	1d3b      	adds	r3, r7, #4
 80049d0:	2200      	movs	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	605a      	str	r2, [r3, #4]
 80049d6:	609a      	str	r2, [r3, #8]
 80049d8:	60da      	str	r2, [r3, #12]
 80049da:	611a      	str	r2, [r3, #16]
 80049dc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 80049de:	2020      	movs	r0, #32
 80049e0:	f7ff fef6 	bl	80047d0 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80049e4:	2004      	movs	r0, #4
 80049e6:	f7ff fec3 	bl	8004770 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80049ea:	23c0      	movs	r3, #192	@ 0xc0
 80049ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80049ee:	2302      	movs	r3, #2
 80049f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80049f2:	2303      	movs	r3, #3
 80049f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80049f6:	2300      	movs	r3, #0
 80049f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80049fa:	2300      	movs	r3, #0
 80049fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80049fe:	2308      	movs	r3, #8
 8004a00:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a02:	1d3b      	adds	r3, r7, #4
 8004a04:	4619      	mov	r1, r3
 8004a06:	4819      	ldr	r0, [pc, #100]	@ (8004a6c <MX_USART6_UART_Init+0xb8>)
 8004a08:	f002 fa37 	bl	8006e7a <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004a0c:	f7ff fe00 	bl	8004610 <__NVIC_GetPriorityGrouping>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2200      	movs	r2, #0
 8004a14:	2100      	movs	r1, #0
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7ff fe50 	bl	80046bc <NVIC_EncodePriority>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	4619      	mov	r1, r3
 8004a20:	2047      	movs	r0, #71	@ 0x47
 8004a22:	f7ff fe21 	bl	8004668 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8004a26:	2047      	movs	r0, #71	@ 0x47
 8004a28:	f7ff fe00 	bl	800462c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8004a2c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8004a30:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004a32:	2300      	movs	r3, #0
 8004a34:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004a36:	2300      	movs	r3, #0
 8004a38:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004a3e:	230c      	movs	r3, #12
 8004a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004a42:	2300      	movs	r3, #0
 8004a44:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004a46:	2300      	movs	r3, #0
 8004a48:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8004a4a:	f107 031c 	add.w	r3, r7, #28
 8004a4e:	4619      	mov	r1, r3
 8004a50:	4807      	ldr	r0, [pc, #28]	@ (8004a70 <MX_USART6_UART_Init+0xbc>)
 8004a52:	f003 f99d 	bl	8007d90 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8004a56:	4806      	ldr	r0, [pc, #24]	@ (8004a70 <MX_USART6_UART_Init+0xbc>)
 8004a58:	f7ff fe73 	bl	8004742 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8004a5c:	4804      	ldr	r0, [pc, #16]	@ (8004a70 <MX_USART6_UART_Init+0xbc>)
 8004a5e:	f7ff fe60 	bl	8004722 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004a62:	bf00      	nop
 8004a64:	3738      	adds	r7, #56	@ 0x38
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	40020800 	.word	0x40020800
 8004a70:	40011400 	.word	0x40011400

08004a74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004a74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004aac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004a78:	f7ff fba2 	bl	80041c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004a7c:	480c      	ldr	r0, [pc, #48]	@ (8004ab0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004a7e:	490d      	ldr	r1, [pc, #52]	@ (8004ab4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004a80:	4a0d      	ldr	r2, [pc, #52]	@ (8004ab8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a84:	e002      	b.n	8004a8c <LoopCopyDataInit>

08004a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a8a:	3304      	adds	r3, #4

08004a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a90:	d3f9      	bcc.n	8004a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a92:	4a0a      	ldr	r2, [pc, #40]	@ (8004abc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004a94:	4c0a      	ldr	r4, [pc, #40]	@ (8004ac0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a98:	e001      	b.n	8004a9e <LoopFillZerobss>

08004a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a9c:	3204      	adds	r2, #4

08004a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004aa0:	d3fb      	bcc.n	8004a9a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8004aa2:	f004 f8af 	bl	8008c04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004aa6:	f7fe fbe1 	bl	800326c <main>
  bx  lr    
 8004aaa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004aac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ab4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8004ab8:	0800bc50 	.word	0x0800bc50
  ldr r2, =_sbss
 8004abc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8004ac0:	20000588 	.word	0x20000588

08004ac4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ac4:	e7fe      	b.n	8004ac4 <ADC_IRQHandler>
	...

08004ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004acc:	4b0e      	ldr	r3, [pc, #56]	@ (8004b08 <HAL_Init+0x40>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8004b08 <HAL_Init+0x40>)
 8004ad2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ad6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8004b08 <HAL_Init+0x40>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a0a      	ldr	r2, [pc, #40]	@ (8004b08 <HAL_Init+0x40>)
 8004ade:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ae2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ae4:	4b08      	ldr	r3, [pc, #32]	@ (8004b08 <HAL_Init+0x40>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a07      	ldr	r2, [pc, #28]	@ (8004b08 <HAL_Init+0x40>)
 8004aea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004aee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004af0:	2003      	movs	r0, #3
 8004af2:	f000 fd61 	bl	80055b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004af6:	200f      	movs	r0, #15
 8004af8:	f000 f808 	bl	8004b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004afc:	f7ff f920 	bl	8003d40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	40023c00 	.word	0x40023c00

08004b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b14:	4b12      	ldr	r3, [pc, #72]	@ (8004b60 <HAL_InitTick+0x54>)
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	4b12      	ldr	r3, [pc, #72]	@ (8004b64 <HAL_InitTick+0x58>)
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 fd79 	bl	8005622 <HAL_SYSTICK_Config>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e00e      	b.n	8004b58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b0f      	cmp	r3, #15
 8004b3e:	d80a      	bhi.n	8004b56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b40:	2200      	movs	r2, #0
 8004b42:	6879      	ldr	r1, [r7, #4]
 8004b44:	f04f 30ff 	mov.w	r0, #4294967295
 8004b48:	f000 fd41 	bl	80055ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b4c:	4a06      	ldr	r2, [pc, #24]	@ (8004b68 <HAL_InitTick+0x5c>)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
 8004b54:	e000      	b.n	8004b58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	20000004 	.word	0x20000004
 8004b64:	2000000c 	.word	0x2000000c
 8004b68:	20000008 	.word	0x20000008

08004b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b70:	4b06      	ldr	r3, [pc, #24]	@ (8004b8c <HAL_IncTick+0x20>)
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	461a      	mov	r2, r3
 8004b76:	4b06      	ldr	r3, [pc, #24]	@ (8004b90 <HAL_IncTick+0x24>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	4a04      	ldr	r2, [pc, #16]	@ (8004b90 <HAL_IncTick+0x24>)
 8004b7e:	6013      	str	r3, [r2, #0]
}
 8004b80:	bf00      	nop
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	2000000c 	.word	0x2000000c
 8004b90:	20000438 	.word	0x20000438

08004b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
  return uwTick;
 8004b98:	4b03      	ldr	r3, [pc, #12]	@ (8004ba8 <HAL_GetTick+0x14>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	20000438 	.word	0x20000438

08004bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004bb4:	f7ff ffee 	bl	8004b94 <HAL_GetTick>
 8004bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc4:	d005      	beq.n	8004bd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8004bf0 <HAL_Delay+0x44>)
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4413      	add	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004bd2:	bf00      	nop
 8004bd4:	f7ff ffde 	bl	8004b94 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d8f7      	bhi.n	8004bd4 <HAL_Delay+0x28>
  {
  }
}
 8004be4:	bf00      	nop
 8004be6:	bf00      	nop
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	2000000c 	.word	0x2000000c

08004bf4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e033      	b.n	8004c72 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d109      	bne.n	8004c26 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7fe f894 	bl	8002d40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2a:	f003 0310 	and.w	r3, r3, #16
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d118      	bne.n	8004c64 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c36:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004c3a:	f023 0302 	bic.w	r3, r3, #2
 8004c3e:	f043 0202 	orr.w	r2, r3, #2
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 fa68 	bl	800511c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c56:	f023 0303 	bic.w	r3, r3, #3
 8004c5a:	f043 0201 	orr.w	r2, r3, #1
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	641a      	str	r2, [r3, #64]	@ 0x40
 8004c62:	e001      	b.n	8004c68 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
	...

08004c7c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d101      	bne.n	8004c9a <HAL_ADC_Start_DMA+0x1e>
 8004c96:	2302      	movs	r3, #2
 8004c98:	e0e9      	b.n	8004e6e <HAL_ADC_Start_DMA+0x1f2>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d018      	beq.n	8004ce2 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689a      	ldr	r2, [r3, #8]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0201 	orr.w	r2, r2, #1
 8004cbe:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004cc0:	4b6d      	ldr	r3, [pc, #436]	@ (8004e78 <HAL_ADC_Start_DMA+0x1fc>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a6d      	ldr	r2, [pc, #436]	@ (8004e7c <HAL_ADC_Start_DMA+0x200>)
 8004cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cca:	0c9a      	lsrs	r2, r3, #18
 8004ccc:	4613      	mov	r3, r2
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	4413      	add	r3, r2
 8004cd2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004cd4:	e002      	b.n	8004cdc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1f9      	bne.n	8004cd6 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cf0:	d107      	bne.n	8004d02 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689a      	ldr	r2, [r3, #8]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d00:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	f040 80a1 	bne.w	8004e54 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d16:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004d1a:	f023 0301 	bic.w	r3, r3, #1
 8004d1e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d007      	beq.n	8004d44 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d38:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004d3c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d50:	d106      	bne.n	8004d60 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d56:	f023 0206 	bic.w	r2, r3, #6
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	645a      	str	r2, [r3, #68]	@ 0x44
 8004d5e:	e002      	b.n	8004d66 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d6e:	4b44      	ldr	r3, [pc, #272]	@ (8004e80 <HAL_ADC_Start_DMA+0x204>)
 8004d70:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d76:	4a43      	ldr	r2, [pc, #268]	@ (8004e84 <HAL_ADC_Start_DMA+0x208>)
 8004d78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7e:	4a42      	ldr	r2, [pc, #264]	@ (8004e88 <HAL_ADC_Start_DMA+0x20c>)
 8004d80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d86:	4a41      	ldr	r2, [pc, #260]	@ (8004e8c <HAL_ADC_Start_DMA+0x210>)
 8004d88:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004d92:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004da2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689a      	ldr	r2, [r3, #8]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004db2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	334c      	adds	r3, #76	@ 0x4c
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f000 fce8 	bl	8005798 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f003 031f 	and.w	r3, r3, #31
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d12a      	bne.n	8004e2a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a2d      	ldr	r2, [pc, #180]	@ (8004e90 <HAL_ADC_Start_DMA+0x214>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d015      	beq.n	8004e0a <HAL_ADC_Start_DMA+0x18e>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a2c      	ldr	r2, [pc, #176]	@ (8004e94 <HAL_ADC_Start_DMA+0x218>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d105      	bne.n	8004df4 <HAL_ADC_Start_DMA+0x178>
 8004de8:	4b25      	ldr	r3, [pc, #148]	@ (8004e80 <HAL_ADC_Start_DMA+0x204>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f003 031f 	and.w	r3, r3, #31
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00a      	beq.n	8004e0a <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a27      	ldr	r2, [pc, #156]	@ (8004e98 <HAL_ADC_Start_DMA+0x21c>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d136      	bne.n	8004e6c <HAL_ADC_Start_DMA+0x1f0>
 8004dfe:	4b20      	ldr	r3, [pc, #128]	@ (8004e80 <HAL_ADC_Start_DMA+0x204>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f003 0310 	and.w	r3, r3, #16
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d130      	bne.n	8004e6c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d129      	bne.n	8004e6c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689a      	ldr	r2, [r3, #8]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004e26:	609a      	str	r2, [r3, #8]
 8004e28:	e020      	b.n	8004e6c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a18      	ldr	r2, [pc, #96]	@ (8004e90 <HAL_ADC_Start_DMA+0x214>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d11b      	bne.n	8004e6c <HAL_ADC_Start_DMA+0x1f0>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d114      	bne.n	8004e6c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004e50:	609a      	str	r2, [r3, #8]
 8004e52:	e00b      	b.n	8004e6c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e58:	f043 0210 	orr.w	r2, r3, #16
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e64:	f043 0201 	orr.w	r2, r3, #1
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3718      	adds	r7, #24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	20000004 	.word	0x20000004
 8004e7c:	431bde83 	.word	0x431bde83
 8004e80:	40012300 	.word	0x40012300
 8004e84:	08005315 	.word	0x08005315
 8004e88:	080053cf 	.word	0x080053cf
 8004e8c:	080053eb 	.word	0x080053eb
 8004e90:	40012000 	.word	0x40012000
 8004e94:	40012100 	.word	0x40012100
 8004e98:	40012200 	.word	0x40012200

08004e9c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d101      	bne.n	8004ef4 <HAL_ADC_ConfigChannel+0x1c>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	e105      	b.n	8005100 <HAL_ADC_ConfigChannel+0x228>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b09      	cmp	r3, #9
 8004f02:	d925      	bls.n	8004f50 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68d9      	ldr	r1, [r3, #12]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	461a      	mov	r2, r3
 8004f12:	4613      	mov	r3, r2
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	4413      	add	r3, r2
 8004f18:	3b1e      	subs	r3, #30
 8004f1a:	2207      	movs	r2, #7
 8004f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f20:	43da      	mvns	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	400a      	ands	r2, r1
 8004f28:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68d9      	ldr	r1, [r3, #12]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	689a      	ldr	r2, [r3, #8]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	4403      	add	r3, r0
 8004f42:	3b1e      	subs	r3, #30
 8004f44:	409a      	lsls	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	60da      	str	r2, [r3, #12]
 8004f4e:	e022      	b.n	8004f96 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6919      	ldr	r1, [r3, #16]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	4613      	mov	r3, r2
 8004f60:	005b      	lsls	r3, r3, #1
 8004f62:	4413      	add	r3, r2
 8004f64:	2207      	movs	r2, #7
 8004f66:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6a:	43da      	mvns	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	400a      	ands	r2, r1
 8004f72:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6919      	ldr	r1, [r3, #16]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	689a      	ldr	r2, [r3, #8]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	4618      	mov	r0, r3
 8004f86:	4603      	mov	r3, r0
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	4403      	add	r3, r0
 8004f8c:	409a      	lsls	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	2b06      	cmp	r3, #6
 8004f9c:	d824      	bhi.n	8004fe8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	3b05      	subs	r3, #5
 8004fb0:	221f      	movs	r2, #31
 8004fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb6:	43da      	mvns	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	400a      	ands	r2, r1
 8004fbe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	4618      	mov	r0, r3
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	3b05      	subs	r3, #5
 8004fda:	fa00 f203 	lsl.w	r2, r0, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	635a      	str	r2, [r3, #52]	@ 0x34
 8004fe6:	e04c      	b.n	8005082 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	2b0c      	cmp	r3, #12
 8004fee:	d824      	bhi.n	800503a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4413      	add	r3, r2
 8005000:	3b23      	subs	r3, #35	@ 0x23
 8005002:	221f      	movs	r2, #31
 8005004:	fa02 f303 	lsl.w	r3, r2, r3
 8005008:	43da      	mvns	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	400a      	ands	r2, r1
 8005010:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	b29b      	uxth	r3, r3
 800501e:	4618      	mov	r0, r3
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	4613      	mov	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4413      	add	r3, r2
 800502a:	3b23      	subs	r3, #35	@ 0x23
 800502c:	fa00 f203 	lsl.w	r2, r0, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	631a      	str	r2, [r3, #48]	@ 0x30
 8005038:	e023      	b.n	8005082 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	4613      	mov	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4413      	add	r3, r2
 800504a:	3b41      	subs	r3, #65	@ 0x41
 800504c:	221f      	movs	r2, #31
 800504e:	fa02 f303 	lsl.w	r3, r2, r3
 8005052:	43da      	mvns	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	400a      	ands	r2, r1
 800505a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	b29b      	uxth	r3, r3
 8005068:	4618      	mov	r0, r3
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	4613      	mov	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4413      	add	r3, r2
 8005074:	3b41      	subs	r3, #65	@ 0x41
 8005076:	fa00 f203 	lsl.w	r2, r0, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005082:	4b22      	ldr	r3, [pc, #136]	@ (800510c <HAL_ADC_ConfigChannel+0x234>)
 8005084:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a21      	ldr	r2, [pc, #132]	@ (8005110 <HAL_ADC_ConfigChannel+0x238>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d109      	bne.n	80050a4 <HAL_ADC_ConfigChannel+0x1cc>
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2b12      	cmp	r3, #18
 8005096:	d105      	bne.n	80050a4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a19      	ldr	r2, [pc, #100]	@ (8005110 <HAL_ADC_ConfigChannel+0x238>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d123      	bne.n	80050f6 <HAL_ADC_ConfigChannel+0x21e>
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2b10      	cmp	r3, #16
 80050b4:	d003      	beq.n	80050be <HAL_ADC_ConfigChannel+0x1e6>
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2b11      	cmp	r3, #17
 80050bc:	d11b      	bne.n	80050f6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b10      	cmp	r3, #16
 80050d0:	d111      	bne.n	80050f6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80050d2:	4b10      	ldr	r3, [pc, #64]	@ (8005114 <HAL_ADC_ConfigChannel+0x23c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a10      	ldr	r2, [pc, #64]	@ (8005118 <HAL_ADC_ConfigChannel+0x240>)
 80050d8:	fba2 2303 	umull	r2, r3, r2, r3
 80050dc:	0c9a      	lsrs	r2, r3, #18
 80050de:	4613      	mov	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80050e8:	e002      	b.n	80050f0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	3b01      	subs	r3, #1
 80050ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1f9      	bne.n	80050ea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3714      	adds	r7, #20
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	40012300 	.word	0x40012300
 8005110:	40012000 	.word	0x40012000
 8005114:	20000004 	.word	0x20000004
 8005118:	431bde83 	.word	0x431bde83

0800511c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005124:	4b79      	ldr	r3, [pc, #484]	@ (800530c <ADC_Init+0x1f0>)
 8005126:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	431a      	orrs	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005150:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6859      	ldr	r1, [r3, #4]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	021a      	lsls	r2, r3, #8
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005174:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6859      	ldr	r1, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005196:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6899      	ldr	r1, [r3, #8]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68da      	ldr	r2, [r3, #12]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ae:	4a58      	ldr	r2, [pc, #352]	@ (8005310 <ADC_Init+0x1f4>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d022      	beq.n	80051fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689a      	ldr	r2, [r3, #8]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80051c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6899      	ldr	r1, [r3, #8]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	689a      	ldr	r2, [r3, #8]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80051e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6899      	ldr	r1, [r3, #8]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	609a      	str	r2, [r3, #8]
 80051f8:	e00f      	b.n	800521a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005208:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	689a      	ldr	r2, [r3, #8]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005218:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 0202 	bic.w	r2, r2, #2
 8005228:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6899      	ldr	r1, [r3, #8]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	7e1b      	ldrb	r3, [r3, #24]
 8005234:	005a      	lsls	r2, r3, #1
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d01b      	beq.n	8005280 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005256:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005266:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6859      	ldr	r1, [r3, #4]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005272:	3b01      	subs	r3, #1
 8005274:	035a      	lsls	r2, r3, #13
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	605a      	str	r2, [r3, #4]
 800527e:	e007      	b.n	8005290 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	685a      	ldr	r2, [r3, #4]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800528e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800529e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	3b01      	subs	r3, #1
 80052ac:	051a      	lsls	r2, r3, #20
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689a      	ldr	r2, [r3, #8]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80052c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	6899      	ldr	r1, [r3, #8]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80052d2:	025a      	lsls	r2, r3, #9
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	430a      	orrs	r2, r1
 80052da:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689a      	ldr	r2, [r3, #8]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6899      	ldr	r1, [r3, #8]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	029a      	lsls	r2, r3, #10
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	609a      	str	r2, [r3, #8]
}
 8005300:	bf00      	nop
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	40012300 	.word	0x40012300
 8005310:	0f000001 	.word	0x0f000001

08005314 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005320:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005326:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800532a:	2b00      	cmp	r3, #0
 800532c:	d13c      	bne.n	80053a8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005332:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d12b      	bne.n	80053a0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800534c:	2b00      	cmp	r3, #0
 800534e:	d127      	bne.n	80053a0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005356:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800535a:	2b00      	cmp	r3, #0
 800535c:	d006      	beq.n	800536c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005368:	2b00      	cmp	r3, #0
 800536a:	d119      	bne.n	80053a0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 0220 	bic.w	r2, r2, #32
 800537a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005380:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800538c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d105      	bne.n	80053a0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005398:	f043 0201 	orr.w	r2, r3, #1
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f7ff fd7b 	bl	8004e9c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80053a6:	e00e      	b.n	80053c6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ac:	f003 0310 	and.w	r3, r3, #16
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f7ff fd85 	bl	8004ec4 <HAL_ADC_ErrorCallback>
}
 80053ba:	e004      	b.n	80053c6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	4798      	blx	r3
}
 80053c6:	bf00      	nop
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b084      	sub	sp, #16
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053da:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f7ff fd67 	bl	8004eb0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80053e2:	bf00      	nop
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b084      	sub	sp, #16
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2240      	movs	r2, #64	@ 0x40
 80053fc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005402:	f043 0204 	orr.w	r2, r3, #4
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f7ff fd5a 	bl	8004ec4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005410:	bf00      	nop
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <__NVIC_SetPriorityGrouping>:
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f003 0307 	and.w	r3, r3, #7
 8005426:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005428:	4b0c      	ldr	r3, [pc, #48]	@ (800545c <__NVIC_SetPriorityGrouping+0x44>)
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005434:	4013      	ands	r3, r2
 8005436:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005440:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005444:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005448:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800544a:	4a04      	ldr	r2, [pc, #16]	@ (800545c <__NVIC_SetPriorityGrouping+0x44>)
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	60d3      	str	r3, [r2, #12]
}
 8005450:	bf00      	nop
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	e000ed00 	.word	0xe000ed00

08005460 <__NVIC_GetPriorityGrouping>:
{
 8005460:	b480      	push	{r7}
 8005462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005464:	4b04      	ldr	r3, [pc, #16]	@ (8005478 <__NVIC_GetPriorityGrouping+0x18>)
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	0a1b      	lsrs	r3, r3, #8
 800546a:	f003 0307 	and.w	r3, r3, #7
}
 800546e:	4618      	mov	r0, r3
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	e000ed00 	.word	0xe000ed00

0800547c <__NVIC_EnableIRQ>:
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	4603      	mov	r3, r0
 8005484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800548a:	2b00      	cmp	r3, #0
 800548c:	db0b      	blt.n	80054a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800548e:	79fb      	ldrb	r3, [r7, #7]
 8005490:	f003 021f 	and.w	r2, r3, #31
 8005494:	4907      	ldr	r1, [pc, #28]	@ (80054b4 <__NVIC_EnableIRQ+0x38>)
 8005496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800549a:	095b      	lsrs	r3, r3, #5
 800549c:	2001      	movs	r0, #1
 800549e:	fa00 f202 	lsl.w	r2, r0, r2
 80054a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80054a6:	bf00      	nop
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	e000e100 	.word	0xe000e100

080054b8 <__NVIC_SetPriority>:
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	4603      	mov	r3, r0
 80054c0:	6039      	str	r1, [r7, #0]
 80054c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	db0a      	blt.n	80054e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	b2da      	uxtb	r2, r3
 80054d0:	490c      	ldr	r1, [pc, #48]	@ (8005504 <__NVIC_SetPriority+0x4c>)
 80054d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054d6:	0112      	lsls	r2, r2, #4
 80054d8:	b2d2      	uxtb	r2, r2
 80054da:	440b      	add	r3, r1
 80054dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80054e0:	e00a      	b.n	80054f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	4908      	ldr	r1, [pc, #32]	@ (8005508 <__NVIC_SetPriority+0x50>)
 80054e8:	79fb      	ldrb	r3, [r7, #7]
 80054ea:	f003 030f 	and.w	r3, r3, #15
 80054ee:	3b04      	subs	r3, #4
 80054f0:	0112      	lsls	r2, r2, #4
 80054f2:	b2d2      	uxtb	r2, r2
 80054f4:	440b      	add	r3, r1
 80054f6:	761a      	strb	r2, [r3, #24]
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	e000e100 	.word	0xe000e100
 8005508:	e000ed00 	.word	0xe000ed00

0800550c <NVIC_EncodePriority>:
{
 800550c:	b480      	push	{r7}
 800550e:	b089      	sub	sp, #36	@ 0x24
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f003 0307 	and.w	r3, r3, #7
 800551e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	f1c3 0307 	rsb	r3, r3, #7
 8005526:	2b04      	cmp	r3, #4
 8005528:	bf28      	it	cs
 800552a:	2304      	movcs	r3, #4
 800552c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	3304      	adds	r3, #4
 8005532:	2b06      	cmp	r3, #6
 8005534:	d902      	bls.n	800553c <NVIC_EncodePriority+0x30>
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	3b03      	subs	r3, #3
 800553a:	e000      	b.n	800553e <NVIC_EncodePriority+0x32>
 800553c:	2300      	movs	r3, #0
 800553e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005540:	f04f 32ff 	mov.w	r2, #4294967295
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	fa02 f303 	lsl.w	r3, r2, r3
 800554a:	43da      	mvns	r2, r3
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	401a      	ands	r2, r3
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005554:	f04f 31ff 	mov.w	r1, #4294967295
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	fa01 f303 	lsl.w	r3, r1, r3
 800555e:	43d9      	mvns	r1, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005564:	4313      	orrs	r3, r2
}
 8005566:	4618      	mov	r0, r3
 8005568:	3724      	adds	r7, #36	@ 0x24
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
	...

08005574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	3b01      	subs	r3, #1
 8005580:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005584:	d301      	bcc.n	800558a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005586:	2301      	movs	r3, #1
 8005588:	e00f      	b.n	80055aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800558a:	4a0a      	ldr	r2, [pc, #40]	@ (80055b4 <SysTick_Config+0x40>)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	3b01      	subs	r3, #1
 8005590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005592:	210f      	movs	r1, #15
 8005594:	f04f 30ff 	mov.w	r0, #4294967295
 8005598:	f7ff ff8e 	bl	80054b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800559c:	4b05      	ldr	r3, [pc, #20]	@ (80055b4 <SysTick_Config+0x40>)
 800559e:	2200      	movs	r2, #0
 80055a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055a2:	4b04      	ldr	r3, [pc, #16]	@ (80055b4 <SysTick_Config+0x40>)
 80055a4:	2207      	movs	r2, #7
 80055a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	e000e010 	.word	0xe000e010

080055b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f7ff ff29 	bl	8005418 <__NVIC_SetPriorityGrouping>
}
 80055c6:	bf00      	nop
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b086      	sub	sp, #24
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	4603      	mov	r3, r0
 80055d6:	60b9      	str	r1, [r7, #8]
 80055d8:	607a      	str	r2, [r7, #4]
 80055da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80055dc:	2300      	movs	r3, #0
 80055de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80055e0:	f7ff ff3e 	bl	8005460 <__NVIC_GetPriorityGrouping>
 80055e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	68b9      	ldr	r1, [r7, #8]
 80055ea:	6978      	ldr	r0, [r7, #20]
 80055ec:	f7ff ff8e 	bl	800550c <NVIC_EncodePriority>
 80055f0:	4602      	mov	r2, r0
 80055f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055f6:	4611      	mov	r1, r2
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7ff ff5d 	bl	80054b8 <__NVIC_SetPriority>
}
 80055fe:	bf00      	nop
 8005600:	3718      	adds	r7, #24
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b082      	sub	sp, #8
 800560a:	af00      	add	r7, sp, #0
 800560c:	4603      	mov	r3, r0
 800560e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005614:	4618      	mov	r0, r3
 8005616:	f7ff ff31 	bl	800547c <__NVIC_EnableIRQ>
}
 800561a:	bf00      	nop
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b082      	sub	sp, #8
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7ff ffa2 	bl	8005574 <SysTick_Config>
 8005630:	4603      	mov	r3, r0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
	...

0800563c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005648:	f7ff faa4 	bl	8004b94 <HAL_GetTick>
 800564c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d101      	bne.n	8005658 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e099      	b.n	800578c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2202      	movs	r2, #2
 800565c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f022 0201 	bic.w	r2, r2, #1
 8005676:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005678:	e00f      	b.n	800569a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800567a:	f7ff fa8b 	bl	8004b94 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	2b05      	cmp	r3, #5
 8005686:	d908      	bls.n	800569a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2220      	movs	r2, #32
 800568c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2203      	movs	r2, #3
 8005692:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e078      	b.n	800578c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1e8      	bne.n	800567a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	4b38      	ldr	r3, [pc, #224]	@ (8005794 <HAL_DMA_Init+0x158>)
 80056b4:	4013      	ands	r3, r2
 80056b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f0:	2b04      	cmp	r3, #4
 80056f2:	d107      	bne.n	8005704 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056fc:	4313      	orrs	r3, r2
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	4313      	orrs	r3, r2
 8005702:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f023 0307 	bic.w	r3, r3, #7
 800571a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	4313      	orrs	r3, r2
 8005724:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800572a:	2b04      	cmp	r3, #4
 800572c:	d117      	bne.n	800575e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	4313      	orrs	r3, r2
 8005736:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00e      	beq.n	800575e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 fa6f 	bl	8005c24 <DMA_CheckFifoParam>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d008      	beq.n	800575e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2240      	movs	r2, #64	@ 0x40
 8005750:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800575a:	2301      	movs	r3, #1
 800575c:	e016      	b.n	800578c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 fa26 	bl	8005bb8 <DMA_CalcBaseAndBitshift>
 800576c:	4603      	mov	r3, r0
 800576e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005774:	223f      	movs	r2, #63	@ 0x3f
 8005776:	409a      	lsls	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3718      	adds	r7, #24
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	f010803f 	.word	0xf010803f

08005798 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
 80057a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057a6:	2300      	movs	r3, #0
 80057a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d101      	bne.n	80057be <HAL_DMA_Start_IT+0x26>
 80057ba:	2302      	movs	r3, #2
 80057bc:	e040      	b.n	8005840 <HAL_DMA_Start_IT+0xa8>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d12f      	bne.n	8005832 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2202      	movs	r2, #2
 80057d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	68b9      	ldr	r1, [r7, #8]
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 f9b8 	bl	8005b5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057f0:	223f      	movs	r2, #63	@ 0x3f
 80057f2:	409a      	lsls	r2, r3
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f042 0216 	orr.w	r2, r2, #22
 8005806:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580c:	2b00      	cmp	r3, #0
 800580e:	d007      	beq.n	8005820 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f042 0208 	orr.w	r2, r2, #8
 800581e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 0201 	orr.w	r2, r2, #1
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	e005      	b.n	800583e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800583a:	2302      	movs	r3, #2
 800583c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800583e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005840:	4618      	mov	r0, r3
 8005842:	3718      	adds	r7, #24
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005850:	2300      	movs	r3, #0
 8005852:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005854:	4b8e      	ldr	r3, [pc, #568]	@ (8005a90 <HAL_DMA_IRQHandler+0x248>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a8e      	ldr	r2, [pc, #568]	@ (8005a94 <HAL_DMA_IRQHandler+0x24c>)
 800585a:	fba2 2303 	umull	r2, r3, r2, r3
 800585e:	0a9b      	lsrs	r3, r3, #10
 8005860:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005866:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005872:	2208      	movs	r2, #8
 8005874:	409a      	lsls	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	4013      	ands	r3, r2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d01a      	beq.n	80058b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0304 	and.w	r3, r3, #4
 8005888:	2b00      	cmp	r3, #0
 800588a:	d013      	beq.n	80058b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f022 0204 	bic.w	r2, r2, #4
 800589a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058a0:	2208      	movs	r2, #8
 80058a2:	409a      	lsls	r2, r3
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ac:	f043 0201 	orr.w	r2, r3, #1
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058b8:	2201      	movs	r2, #1
 80058ba:	409a      	lsls	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4013      	ands	r3, r2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d012      	beq.n	80058ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00b      	beq.n	80058ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058d6:	2201      	movs	r2, #1
 80058d8:	409a      	lsls	r2, r3
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058e2:	f043 0202 	orr.w	r2, r3, #2
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058ee:	2204      	movs	r2, #4
 80058f0:	409a      	lsls	r2, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	4013      	ands	r3, r2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d012      	beq.n	8005920 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00b      	beq.n	8005920 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800590c:	2204      	movs	r2, #4
 800590e:	409a      	lsls	r2, r3
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005918:	f043 0204 	orr.w	r2, r3, #4
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005924:	2210      	movs	r2, #16
 8005926:	409a      	lsls	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4013      	ands	r3, r2
 800592c:	2b00      	cmp	r3, #0
 800592e:	d043      	beq.n	80059b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0308 	and.w	r3, r3, #8
 800593a:	2b00      	cmp	r3, #0
 800593c:	d03c      	beq.n	80059b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005942:	2210      	movs	r2, #16
 8005944:	409a      	lsls	r2, r3
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d018      	beq.n	800598a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d108      	bne.n	8005978 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596a:	2b00      	cmp	r3, #0
 800596c:	d024      	beq.n	80059b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	4798      	blx	r3
 8005976:	e01f      	b.n	80059b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800597c:	2b00      	cmp	r3, #0
 800597e:	d01b      	beq.n	80059b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	4798      	blx	r3
 8005988:	e016      	b.n	80059b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005994:	2b00      	cmp	r3, #0
 8005996:	d107      	bne.n	80059a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f022 0208 	bic.w	r2, r2, #8
 80059a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d003      	beq.n	80059b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059bc:	2220      	movs	r2, #32
 80059be:	409a      	lsls	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4013      	ands	r3, r2
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 808f 	beq.w	8005ae8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0310 	and.w	r3, r3, #16
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 8087 	beq.w	8005ae8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059de:	2220      	movs	r2, #32
 80059e0:	409a      	lsls	r2, r3
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b05      	cmp	r3, #5
 80059f0:	d136      	bne.n	8005a60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f022 0216 	bic.w	r2, r2, #22
 8005a00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	695a      	ldr	r2, [r3, #20]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d103      	bne.n	8005a22 <HAL_DMA_IRQHandler+0x1da>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d007      	beq.n	8005a32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f022 0208 	bic.w	r2, r2, #8
 8005a30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a36:	223f      	movs	r2, #63	@ 0x3f
 8005a38:	409a      	lsls	r2, r3
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d07e      	beq.n	8005b54 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	4798      	blx	r3
        }
        return;
 8005a5e:	e079      	b.n	8005b54 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d01d      	beq.n	8005aaa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10d      	bne.n	8005a98 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d031      	beq.n	8005ae8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	4798      	blx	r3
 8005a8c:	e02c      	b.n	8005ae8 <HAL_DMA_IRQHandler+0x2a0>
 8005a8e:	bf00      	nop
 8005a90:	20000004 	.word	0x20000004
 8005a94:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d023      	beq.n	8005ae8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	4798      	blx	r3
 8005aa8:	e01e      	b.n	8005ae8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10f      	bne.n	8005ad8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f022 0210 	bic.w	r2, r2, #16
 8005ac6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d003      	beq.n	8005ae8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d032      	beq.n	8005b56 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d022      	beq.n	8005b42 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2205      	movs	r2, #5
 8005b00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 0201 	bic.w	r2, r2, #1
 8005b12:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	3301      	adds	r3, #1
 8005b18:	60bb      	str	r3, [r7, #8]
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d307      	bcc.n	8005b30 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1f2      	bne.n	8005b14 <HAL_DMA_IRQHandler+0x2cc>
 8005b2e:	e000      	b.n	8005b32 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005b30:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d005      	beq.n	8005b56 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	4798      	blx	r3
 8005b52:	e000      	b.n	8005b56 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005b54:	bf00      	nop
    }
  }
}
 8005b56:	3718      	adds	r7, #24
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
 8005b68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005b78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	2b40      	cmp	r3, #64	@ 0x40
 8005b88:	d108      	bne.n	8005b9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005b9a:	e007      	b.n	8005bac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	60da      	str	r2, [r3, #12]
}
 8005bac:	bf00      	nop
 8005bae:	3714      	adds	r7, #20
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	3b10      	subs	r3, #16
 8005bc8:	4a14      	ldr	r2, [pc, #80]	@ (8005c1c <DMA_CalcBaseAndBitshift+0x64>)
 8005bca:	fba2 2303 	umull	r2, r3, r2, r3
 8005bce:	091b      	lsrs	r3, r3, #4
 8005bd0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005bd2:	4a13      	ldr	r2, [pc, #76]	@ (8005c20 <DMA_CalcBaseAndBitshift+0x68>)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	461a      	mov	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2b03      	cmp	r3, #3
 8005be4:	d909      	bls.n	8005bfa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005bee:	f023 0303 	bic.w	r3, r3, #3
 8005bf2:	1d1a      	adds	r2, r3, #4
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	659a      	str	r2, [r3, #88]	@ 0x58
 8005bf8:	e007      	b.n	8005c0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005c02:	f023 0303 	bic.w	r3, r3, #3
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	aaaaaaab 	.word	0xaaaaaaab
 8005c20:	0800b878 	.word	0x0800b878

08005c24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d11f      	bne.n	8005c7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d856      	bhi.n	8005cf2 <DMA_CheckFifoParam+0xce>
 8005c44:	a201      	add	r2, pc, #4	@ (adr r2, 8005c4c <DMA_CheckFifoParam+0x28>)
 8005c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4a:	bf00      	nop
 8005c4c:	08005c5d 	.word	0x08005c5d
 8005c50:	08005c6f 	.word	0x08005c6f
 8005c54:	08005c5d 	.word	0x08005c5d
 8005c58:	08005cf3 	.word	0x08005cf3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d046      	beq.n	8005cf6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c6c:	e043      	b.n	8005cf6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c72:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005c76:	d140      	bne.n	8005cfa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c7c:	e03d      	b.n	8005cfa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c86:	d121      	bne.n	8005ccc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	2b03      	cmp	r3, #3
 8005c8c:	d837      	bhi.n	8005cfe <DMA_CheckFifoParam+0xda>
 8005c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c94 <DMA_CheckFifoParam+0x70>)
 8005c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c94:	08005ca5 	.word	0x08005ca5
 8005c98:	08005cab 	.word	0x08005cab
 8005c9c:	08005ca5 	.word	0x08005ca5
 8005ca0:	08005cbd 	.word	0x08005cbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ca8:	e030      	b.n	8005d0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d025      	beq.n	8005d02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cba:	e022      	b.n	8005d02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005cc4:	d11f      	bne.n	8005d06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005cca:	e01c      	b.n	8005d06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d903      	bls.n	8005cda <DMA_CheckFifoParam+0xb6>
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	2b03      	cmp	r3, #3
 8005cd6:	d003      	beq.n	8005ce0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005cd8:	e018      	b.n	8005d0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	73fb      	strb	r3, [r7, #15]
      break;
 8005cde:	e015      	b.n	8005d0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00e      	beq.n	8005d0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	73fb      	strb	r3, [r7, #15]
      break;
 8005cf0:	e00b      	b.n	8005d0a <DMA_CheckFifoParam+0xe6>
      break;
 8005cf2:	bf00      	nop
 8005cf4:	e00a      	b.n	8005d0c <DMA_CheckFifoParam+0xe8>
      break;
 8005cf6:	bf00      	nop
 8005cf8:	e008      	b.n	8005d0c <DMA_CheckFifoParam+0xe8>
      break;
 8005cfa:	bf00      	nop
 8005cfc:	e006      	b.n	8005d0c <DMA_CheckFifoParam+0xe8>
      break;
 8005cfe:	bf00      	nop
 8005d00:	e004      	b.n	8005d0c <DMA_CheckFifoParam+0xe8>
      break;
 8005d02:	bf00      	nop
 8005d04:	e002      	b.n	8005d0c <DMA_CheckFifoParam+0xe8>
      break;   
 8005d06:	bf00      	nop
 8005d08:	e000      	b.n	8005d0c <DMA_CheckFifoParam+0xe8>
      break;
 8005d0a:	bf00      	nop
    }
  } 
  
  return status; 
 8005d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop

08005d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b089      	sub	sp, #36	@ 0x24
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d26:	2300      	movs	r3, #0
 8005d28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d32:	2300      	movs	r3, #0
 8005d34:	61fb      	str	r3, [r7, #28]
 8005d36:	e16b      	b.n	8006010 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005d38:	2201      	movs	r2, #1
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	4013      	ands	r3, r2
 8005d4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	f040 815a 	bne.w	800600a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	f003 0303 	and.w	r3, r3, #3
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d005      	beq.n	8005d6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d130      	bne.n	8005dd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	2203      	movs	r2, #3
 8005d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7e:	43db      	mvns	r3, r3
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	4013      	ands	r3, r2
 8005d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	68da      	ldr	r2, [r3, #12]
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005da4:	2201      	movs	r2, #1
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dac:	43db      	mvns	r3, r3
 8005dae:	69ba      	ldr	r2, [r7, #24]
 8005db0:	4013      	ands	r3, r2
 8005db2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	091b      	lsrs	r3, r3, #4
 8005dba:	f003 0201 	and.w	r2, r3, #1
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f003 0303 	and.w	r3, r3, #3
 8005dd8:	2b03      	cmp	r3, #3
 8005dda:	d017      	beq.n	8005e0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	005b      	lsls	r3, r3, #1
 8005de6:	2203      	movs	r2, #3
 8005de8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dec:	43db      	mvns	r3, r3
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	4013      	ands	r3, r2
 8005df2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	689a      	ldr	r2, [r3, #8]
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	005b      	lsls	r3, r3, #1
 8005dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	69ba      	ldr	r2, [r7, #24]
 8005e0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f003 0303 	and.w	r3, r3, #3
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d123      	bne.n	8005e60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	08da      	lsrs	r2, r3, #3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	3208      	adds	r2, #8
 8005e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	f003 0307 	and.w	r3, r3, #7
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	220f      	movs	r2, #15
 8005e30:	fa02 f303 	lsl.w	r3, r2, r3
 8005e34:	43db      	mvns	r3, r3
 8005e36:	69ba      	ldr	r2, [r7, #24]
 8005e38:	4013      	ands	r3, r2
 8005e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	691a      	ldr	r2, [r3, #16]
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	f003 0307 	and.w	r3, r3, #7
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	08da      	lsrs	r2, r3, #3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	3208      	adds	r2, #8
 8005e5a:	69b9      	ldr	r1, [r7, #24]
 8005e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	2203      	movs	r2, #3
 8005e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e70:	43db      	mvns	r3, r3
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	4013      	ands	r3, r2
 8005e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f003 0203 	and.w	r2, r3, #3
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	005b      	lsls	r3, r3, #1
 8005e84:	fa02 f303 	lsl.w	r3, r2, r3
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	69ba      	ldr	r2, [r7, #24]
 8005e92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f000 80b4 	beq.w	800600a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60fb      	str	r3, [r7, #12]
 8005ea6:	4b60      	ldr	r3, [pc, #384]	@ (8006028 <HAL_GPIO_Init+0x30c>)
 8005ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eaa:	4a5f      	ldr	r2, [pc, #380]	@ (8006028 <HAL_GPIO_Init+0x30c>)
 8005eac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005eb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8005eb2:	4b5d      	ldr	r3, [pc, #372]	@ (8006028 <HAL_GPIO_Init+0x30c>)
 8005eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ebe:	4a5b      	ldr	r2, [pc, #364]	@ (800602c <HAL_GPIO_Init+0x310>)
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	089b      	lsrs	r3, r3, #2
 8005ec4:	3302      	adds	r3, #2
 8005ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	f003 0303 	and.w	r3, r3, #3
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	220f      	movs	r2, #15
 8005ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eda:	43db      	mvns	r3, r3
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	4013      	ands	r3, r2
 8005ee0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a52      	ldr	r2, [pc, #328]	@ (8006030 <HAL_GPIO_Init+0x314>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d02b      	beq.n	8005f42 <HAL_GPIO_Init+0x226>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a51      	ldr	r2, [pc, #324]	@ (8006034 <HAL_GPIO_Init+0x318>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d025      	beq.n	8005f3e <HAL_GPIO_Init+0x222>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a50      	ldr	r2, [pc, #320]	@ (8006038 <HAL_GPIO_Init+0x31c>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d01f      	beq.n	8005f3a <HAL_GPIO_Init+0x21e>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a4f      	ldr	r2, [pc, #316]	@ (800603c <HAL_GPIO_Init+0x320>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d019      	beq.n	8005f36 <HAL_GPIO_Init+0x21a>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a4e      	ldr	r2, [pc, #312]	@ (8006040 <HAL_GPIO_Init+0x324>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d013      	beq.n	8005f32 <HAL_GPIO_Init+0x216>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a4d      	ldr	r2, [pc, #308]	@ (8006044 <HAL_GPIO_Init+0x328>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d00d      	beq.n	8005f2e <HAL_GPIO_Init+0x212>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a4c      	ldr	r2, [pc, #304]	@ (8006048 <HAL_GPIO_Init+0x32c>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d007      	beq.n	8005f2a <HAL_GPIO_Init+0x20e>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a4b      	ldr	r2, [pc, #300]	@ (800604c <HAL_GPIO_Init+0x330>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d101      	bne.n	8005f26 <HAL_GPIO_Init+0x20a>
 8005f22:	2307      	movs	r3, #7
 8005f24:	e00e      	b.n	8005f44 <HAL_GPIO_Init+0x228>
 8005f26:	2308      	movs	r3, #8
 8005f28:	e00c      	b.n	8005f44 <HAL_GPIO_Init+0x228>
 8005f2a:	2306      	movs	r3, #6
 8005f2c:	e00a      	b.n	8005f44 <HAL_GPIO_Init+0x228>
 8005f2e:	2305      	movs	r3, #5
 8005f30:	e008      	b.n	8005f44 <HAL_GPIO_Init+0x228>
 8005f32:	2304      	movs	r3, #4
 8005f34:	e006      	b.n	8005f44 <HAL_GPIO_Init+0x228>
 8005f36:	2303      	movs	r3, #3
 8005f38:	e004      	b.n	8005f44 <HAL_GPIO_Init+0x228>
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	e002      	b.n	8005f44 <HAL_GPIO_Init+0x228>
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e000      	b.n	8005f44 <HAL_GPIO_Init+0x228>
 8005f42:	2300      	movs	r3, #0
 8005f44:	69fa      	ldr	r2, [r7, #28]
 8005f46:	f002 0203 	and.w	r2, r2, #3
 8005f4a:	0092      	lsls	r2, r2, #2
 8005f4c:	4093      	lsls	r3, r2
 8005f4e:	69ba      	ldr	r2, [r7, #24]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f54:	4935      	ldr	r1, [pc, #212]	@ (800602c <HAL_GPIO_Init+0x310>)
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	089b      	lsrs	r3, r3, #2
 8005f5a:	3302      	adds	r3, #2
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f62:	4b3b      	ldr	r3, [pc, #236]	@ (8006050 <HAL_GPIO_Init+0x334>)
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	43db      	mvns	r3, r3
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	4013      	ands	r3, r2
 8005f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d003      	beq.n	8005f86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005f86:	4a32      	ldr	r2, [pc, #200]	@ (8006050 <HAL_GPIO_Init+0x334>)
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005f8c:	4b30      	ldr	r3, [pc, #192]	@ (8006050 <HAL_GPIO_Init+0x334>)
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	43db      	mvns	r3, r3
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	4013      	ands	r3, r2
 8005f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d003      	beq.n	8005fb0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005fa8:	69ba      	ldr	r2, [r7, #24]
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005fb0:	4a27      	ldr	r2, [pc, #156]	@ (8006050 <HAL_GPIO_Init+0x334>)
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005fb6:	4b26      	ldr	r3, [pc, #152]	@ (8006050 <HAL_GPIO_Init+0x334>)
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	43db      	mvns	r3, r3
 8005fc0:	69ba      	ldr	r2, [r7, #24]
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d003      	beq.n	8005fda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005fd2:	69ba      	ldr	r2, [r7, #24]
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005fda:	4a1d      	ldr	r2, [pc, #116]	@ (8006050 <HAL_GPIO_Init+0x334>)
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8006050 <HAL_GPIO_Init+0x334>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	43db      	mvns	r3, r3
 8005fea:	69ba      	ldr	r2, [r7, #24]
 8005fec:	4013      	ands	r3, r2
 8005fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d003      	beq.n	8006004 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005ffc:	69ba      	ldr	r2, [r7, #24]
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	4313      	orrs	r3, r2
 8006002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006004:	4a12      	ldr	r2, [pc, #72]	@ (8006050 <HAL_GPIO_Init+0x334>)
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	3301      	adds	r3, #1
 800600e:	61fb      	str	r3, [r7, #28]
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	2b0f      	cmp	r3, #15
 8006014:	f67f ae90 	bls.w	8005d38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006018:	bf00      	nop
 800601a:	bf00      	nop
 800601c:	3724      	adds	r7, #36	@ 0x24
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	40023800 	.word	0x40023800
 800602c:	40013800 	.word	0x40013800
 8006030:	40020000 	.word	0x40020000
 8006034:	40020400 	.word	0x40020400
 8006038:	40020800 	.word	0x40020800
 800603c:	40020c00 	.word	0x40020c00
 8006040:	40021000 	.word	0x40021000
 8006044:	40021400 	.word	0x40021400
 8006048:	40021800 	.word	0x40021800
 800604c:	40021c00 	.word	0x40021c00
 8006050:	40013c00 	.word	0x40013c00

08006054 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e12b      	b.n	80062be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d106      	bne.n	8006080 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7fc ffda 	bl	8003034 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2224      	movs	r2, #36	@ 0x24
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f022 0201 	bic.w	r2, r2, #1
 8006096:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80060a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80060b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80060b8:	f000 fd80 	bl	8006bbc <HAL_RCC_GetPCLK1Freq>
 80060bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	4a81      	ldr	r2, [pc, #516]	@ (80062c8 <HAL_I2C_Init+0x274>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d807      	bhi.n	80060d8 <HAL_I2C_Init+0x84>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	4a80      	ldr	r2, [pc, #512]	@ (80062cc <HAL_I2C_Init+0x278>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	bf94      	ite	ls
 80060d0:	2301      	movls	r3, #1
 80060d2:	2300      	movhi	r3, #0
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	e006      	b.n	80060e6 <HAL_I2C_Init+0x92>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	4a7d      	ldr	r2, [pc, #500]	@ (80062d0 <HAL_I2C_Init+0x27c>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	bf94      	ite	ls
 80060e0:	2301      	movls	r3, #1
 80060e2:	2300      	movhi	r3, #0
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d001      	beq.n	80060ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e0e7      	b.n	80062be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	4a78      	ldr	r2, [pc, #480]	@ (80062d4 <HAL_I2C_Init+0x280>)
 80060f2:	fba2 2303 	umull	r2, r3, r2, r3
 80060f6:	0c9b      	lsrs	r3, r3, #18
 80060f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	430a      	orrs	r2, r1
 800610c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	6a1b      	ldr	r3, [r3, #32]
 8006114:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	4a6a      	ldr	r2, [pc, #424]	@ (80062c8 <HAL_I2C_Init+0x274>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d802      	bhi.n	8006128 <HAL_I2C_Init+0xd4>
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	3301      	adds	r3, #1
 8006126:	e009      	b.n	800613c <HAL_I2C_Init+0xe8>
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800612e:	fb02 f303 	mul.w	r3, r2, r3
 8006132:	4a69      	ldr	r2, [pc, #420]	@ (80062d8 <HAL_I2C_Init+0x284>)
 8006134:	fba2 2303 	umull	r2, r3, r2, r3
 8006138:	099b      	lsrs	r3, r3, #6
 800613a:	3301      	adds	r3, #1
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	6812      	ldr	r2, [r2, #0]
 8006140:	430b      	orrs	r3, r1
 8006142:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800614e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	495c      	ldr	r1, [pc, #368]	@ (80062c8 <HAL_I2C_Init+0x274>)
 8006158:	428b      	cmp	r3, r1
 800615a:	d819      	bhi.n	8006190 <HAL_I2C_Init+0x13c>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	1e59      	subs	r1, r3, #1
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	005b      	lsls	r3, r3, #1
 8006166:	fbb1 f3f3 	udiv	r3, r1, r3
 800616a:	1c59      	adds	r1, r3, #1
 800616c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006170:	400b      	ands	r3, r1
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00a      	beq.n	800618c <HAL_I2C_Init+0x138>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	1e59      	subs	r1, r3, #1
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	005b      	lsls	r3, r3, #1
 8006180:	fbb1 f3f3 	udiv	r3, r1, r3
 8006184:	3301      	adds	r3, #1
 8006186:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800618a:	e051      	b.n	8006230 <HAL_I2C_Init+0x1dc>
 800618c:	2304      	movs	r3, #4
 800618e:	e04f      	b.n	8006230 <HAL_I2C_Init+0x1dc>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d111      	bne.n	80061bc <HAL_I2C_Init+0x168>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	1e58      	subs	r0, r3, #1
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6859      	ldr	r1, [r3, #4]
 80061a0:	460b      	mov	r3, r1
 80061a2:	005b      	lsls	r3, r3, #1
 80061a4:	440b      	add	r3, r1
 80061a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80061aa:	3301      	adds	r3, #1
 80061ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	bf0c      	ite	eq
 80061b4:	2301      	moveq	r3, #1
 80061b6:	2300      	movne	r3, #0
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	e012      	b.n	80061e2 <HAL_I2C_Init+0x18e>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	1e58      	subs	r0, r3, #1
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6859      	ldr	r1, [r3, #4]
 80061c4:	460b      	mov	r3, r1
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	440b      	add	r3, r1
 80061ca:	0099      	lsls	r1, r3, #2
 80061cc:	440b      	add	r3, r1
 80061ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80061d2:	3301      	adds	r3, #1
 80061d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061d8:	2b00      	cmp	r3, #0
 80061da:	bf0c      	ite	eq
 80061dc:	2301      	moveq	r3, #1
 80061de:	2300      	movne	r3, #0
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d001      	beq.n	80061ea <HAL_I2C_Init+0x196>
 80061e6:	2301      	movs	r3, #1
 80061e8:	e022      	b.n	8006230 <HAL_I2C_Init+0x1dc>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10e      	bne.n	8006210 <HAL_I2C_Init+0x1bc>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	1e58      	subs	r0, r3, #1
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6859      	ldr	r1, [r3, #4]
 80061fa:	460b      	mov	r3, r1
 80061fc:	005b      	lsls	r3, r3, #1
 80061fe:	440b      	add	r3, r1
 8006200:	fbb0 f3f3 	udiv	r3, r0, r3
 8006204:	3301      	adds	r3, #1
 8006206:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800620a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800620e:	e00f      	b.n	8006230 <HAL_I2C_Init+0x1dc>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	1e58      	subs	r0, r3, #1
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6859      	ldr	r1, [r3, #4]
 8006218:	460b      	mov	r3, r1
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	440b      	add	r3, r1
 800621e:	0099      	lsls	r1, r3, #2
 8006220:	440b      	add	r3, r1
 8006222:	fbb0 f3f3 	udiv	r3, r0, r3
 8006226:	3301      	adds	r3, #1
 8006228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800622c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006230:	6879      	ldr	r1, [r7, #4]
 8006232:	6809      	ldr	r1, [r1, #0]
 8006234:	4313      	orrs	r3, r2
 8006236:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	69da      	ldr	r2, [r3, #28]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	431a      	orrs	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	430a      	orrs	r2, r1
 8006252:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800625e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	6911      	ldr	r1, [r2, #16]
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	68d2      	ldr	r2, [r2, #12]
 800626a:	4311      	orrs	r1, r2
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	6812      	ldr	r2, [r2, #0]
 8006270:	430b      	orrs	r3, r1
 8006272:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	695a      	ldr	r2, [r3, #20]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	431a      	orrs	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	430a      	orrs	r2, r1
 800628e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f042 0201 	orr.w	r2, r2, #1
 800629e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2220      	movs	r2, #32
 80062aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	000186a0 	.word	0x000186a0
 80062cc:	001e847f 	.word	0x001e847f
 80062d0:	003d08ff 	.word	0x003d08ff
 80062d4:	431bde83 	.word	0x431bde83
 80062d8:	10624dd3 	.word	0x10624dd3

080062dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b086      	sub	sp, #24
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e267      	b.n	80067be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d075      	beq.n	80063e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80062fa:	4b88      	ldr	r3, [pc, #544]	@ (800651c <HAL_RCC_OscConfig+0x240>)
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f003 030c 	and.w	r3, r3, #12
 8006302:	2b04      	cmp	r3, #4
 8006304:	d00c      	beq.n	8006320 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006306:	4b85      	ldr	r3, [pc, #532]	@ (800651c <HAL_RCC_OscConfig+0x240>)
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800630e:	2b08      	cmp	r3, #8
 8006310:	d112      	bne.n	8006338 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006312:	4b82      	ldr	r3, [pc, #520]	@ (800651c <HAL_RCC_OscConfig+0x240>)
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800631a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800631e:	d10b      	bne.n	8006338 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006320:	4b7e      	ldr	r3, [pc, #504]	@ (800651c <HAL_RCC_OscConfig+0x240>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d05b      	beq.n	80063e4 <HAL_RCC_OscConfig+0x108>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d157      	bne.n	80063e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e242      	b.n	80067be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006340:	d106      	bne.n	8006350 <HAL_RCC_OscConfig+0x74>
 8006342:	4b76      	ldr	r3, [pc, #472]	@ (800651c <HAL_RCC_OscConfig+0x240>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a75      	ldr	r2, [pc, #468]	@ (800651c <HAL_RCC_OscConfig+0x240>)
 8006348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800634c:	6013      	str	r3, [r2, #0]
 800634e:	e01d      	b.n	800638c <HAL_RCC_OscConfig+0xb0>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006358:	d10c      	bne.n	8006374 <HAL_RCC_OscConfig+0x98>
 800635a:	4b70      	ldr	r3, [pc, #448]	@ (800651c <HAL_RCC_OscConfig+0x240>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a6f      	ldr	r2, [pc, #444]	@ (800651c <HAL_RCC_OscConfig+0x240>)
 8006360:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006364:	6013      	str	r3, [r2, #0]
 8006366:	4b6d      	ldr	r3, [pc, #436]	@ (800651c <HAL_RCC_OscConfig+0x240>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a6c      	ldr	r2, [pc, #432]	@ (800651c <HAL_RCC_OscConfig+0x240>)
 800636c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006370:	6013      	str	r3, [r2, #0]
 8006372:	e00b      	b.n	800638c <HAL_RCC_OscConfig+0xb0>
 8006374:	4b69      	ldr	r3, [pc, #420]	@ (800651c <HAL_RCC_OscConfig+0x240>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a68      	ldr	r2, [pc, #416]	@ (800651c <HAL_RCC_OscConfig+0x240>)
 800637a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800637e:	6013      	str	r3, [r2, #0]
 8006380:	4b66      	ldr	r3, [pc, #408]	@ (800651c <HAL_RCC_OscConfig+0x240>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a65      	ldr	r2, [pc, #404]	@ (800651c <HAL_RCC_OscConfig+0x240>)
 8006386:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800638a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d013      	beq.n	80063bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006394:	f7fe fbfe 	bl	8004b94 <HAL_GetTick>
 8006398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800639a:	e008      	b.n	80063ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800639c:	f7fe fbfa 	bl	8004b94 <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	2b64      	cmp	r3, #100	@ 0x64
 80063a8:	d901      	bls.n	80063ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e207      	b.n	80067be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063ae:	4b5b      	ldr	r3, [pc, #364]	@ (800651c <HAL_RCC_OscConfig+0x240>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d0f0      	beq.n	800639c <HAL_RCC_OscConfig+0xc0>
 80063ba:	e014      	b.n	80063e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063bc:	f7fe fbea 	bl	8004b94 <HAL_GetTick>
 80063c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063c2:	e008      	b.n	80063d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063c4:	f7fe fbe6 	bl	8004b94 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	2b64      	cmp	r3, #100	@ 0x64
 80063d0:	d901      	bls.n	80063d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e1f3      	b.n	80067be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063d6:	4b51      	ldr	r3, [pc, #324]	@ (800651c <HAL_RCC_OscConfig+0x240>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1f0      	bne.n	80063c4 <HAL_RCC_OscConfig+0xe8>
 80063e2:	e000      	b.n	80063e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d063      	beq.n	80064ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80063f2:	4b4a      	ldr	r3, [pc, #296]	@ (800651c <HAL_RCC_OscConfig+0x240>)
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f003 030c 	and.w	r3, r3, #12
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00b      	beq.n	8006416 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063fe:	4b47      	ldr	r3, [pc, #284]	@ (800651c <HAL_RCC_OscConfig+0x240>)
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006406:	2b08      	cmp	r3, #8
 8006408:	d11c      	bne.n	8006444 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800640a:	4b44      	ldr	r3, [pc, #272]	@ (800651c <HAL_RCC_OscConfig+0x240>)
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d116      	bne.n	8006444 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006416:	4b41      	ldr	r3, [pc, #260]	@ (800651c <HAL_RCC_OscConfig+0x240>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d005      	beq.n	800642e <HAL_RCC_OscConfig+0x152>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d001      	beq.n	800642e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e1c7      	b.n	80067be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800642e:	4b3b      	ldr	r3, [pc, #236]	@ (800651c <HAL_RCC_OscConfig+0x240>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	00db      	lsls	r3, r3, #3
 800643c:	4937      	ldr	r1, [pc, #220]	@ (800651c <HAL_RCC_OscConfig+0x240>)
 800643e:	4313      	orrs	r3, r2
 8006440:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006442:	e03a      	b.n	80064ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d020      	beq.n	800648e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800644c:	4b34      	ldr	r3, [pc, #208]	@ (8006520 <HAL_RCC_OscConfig+0x244>)
 800644e:	2201      	movs	r2, #1
 8006450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006452:	f7fe fb9f 	bl	8004b94 <HAL_GetTick>
 8006456:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006458:	e008      	b.n	800646c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800645a:	f7fe fb9b 	bl	8004b94 <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	2b02      	cmp	r3, #2
 8006466:	d901      	bls.n	800646c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e1a8      	b.n	80067be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800646c:	4b2b      	ldr	r3, [pc, #172]	@ (800651c <HAL_RCC_OscConfig+0x240>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0302 	and.w	r3, r3, #2
 8006474:	2b00      	cmp	r3, #0
 8006476:	d0f0      	beq.n	800645a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006478:	4b28      	ldr	r3, [pc, #160]	@ (800651c <HAL_RCC_OscConfig+0x240>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	00db      	lsls	r3, r3, #3
 8006486:	4925      	ldr	r1, [pc, #148]	@ (800651c <HAL_RCC_OscConfig+0x240>)
 8006488:	4313      	orrs	r3, r2
 800648a:	600b      	str	r3, [r1, #0]
 800648c:	e015      	b.n	80064ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800648e:	4b24      	ldr	r3, [pc, #144]	@ (8006520 <HAL_RCC_OscConfig+0x244>)
 8006490:	2200      	movs	r2, #0
 8006492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006494:	f7fe fb7e 	bl	8004b94 <HAL_GetTick>
 8006498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800649a:	e008      	b.n	80064ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800649c:	f7fe fb7a 	bl	8004b94 <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d901      	bls.n	80064ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e187      	b.n	80067be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064ae:	4b1b      	ldr	r3, [pc, #108]	@ (800651c <HAL_RCC_OscConfig+0x240>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0302 	and.w	r3, r3, #2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1f0      	bne.n	800649c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0308 	and.w	r3, r3, #8
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d036      	beq.n	8006534 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d016      	beq.n	80064fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064ce:	4b15      	ldr	r3, [pc, #84]	@ (8006524 <HAL_RCC_OscConfig+0x248>)
 80064d0:	2201      	movs	r2, #1
 80064d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064d4:	f7fe fb5e 	bl	8004b94 <HAL_GetTick>
 80064d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064da:	e008      	b.n	80064ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064dc:	f7fe fb5a 	bl	8004b94 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d901      	bls.n	80064ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e167      	b.n	80067be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064ee:	4b0b      	ldr	r3, [pc, #44]	@ (800651c <HAL_RCC_OscConfig+0x240>)
 80064f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064f2:	f003 0302 	and.w	r3, r3, #2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d0f0      	beq.n	80064dc <HAL_RCC_OscConfig+0x200>
 80064fa:	e01b      	b.n	8006534 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064fc:	4b09      	ldr	r3, [pc, #36]	@ (8006524 <HAL_RCC_OscConfig+0x248>)
 80064fe:	2200      	movs	r2, #0
 8006500:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006502:	f7fe fb47 	bl	8004b94 <HAL_GetTick>
 8006506:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006508:	e00e      	b.n	8006528 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800650a:	f7fe fb43 	bl	8004b94 <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	2b02      	cmp	r3, #2
 8006516:	d907      	bls.n	8006528 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e150      	b.n	80067be <HAL_RCC_OscConfig+0x4e2>
 800651c:	40023800 	.word	0x40023800
 8006520:	42470000 	.word	0x42470000
 8006524:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006528:	4b88      	ldr	r3, [pc, #544]	@ (800674c <HAL_RCC_OscConfig+0x470>)
 800652a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800652c:	f003 0302 	and.w	r3, r3, #2
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1ea      	bne.n	800650a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0304 	and.w	r3, r3, #4
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 8097 	beq.w	8006670 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006542:	2300      	movs	r3, #0
 8006544:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006546:	4b81      	ldr	r3, [pc, #516]	@ (800674c <HAL_RCC_OscConfig+0x470>)
 8006548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800654a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10f      	bne.n	8006572 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006552:	2300      	movs	r3, #0
 8006554:	60bb      	str	r3, [r7, #8]
 8006556:	4b7d      	ldr	r3, [pc, #500]	@ (800674c <HAL_RCC_OscConfig+0x470>)
 8006558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800655a:	4a7c      	ldr	r2, [pc, #496]	@ (800674c <HAL_RCC_OscConfig+0x470>)
 800655c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006560:	6413      	str	r3, [r2, #64]	@ 0x40
 8006562:	4b7a      	ldr	r3, [pc, #488]	@ (800674c <HAL_RCC_OscConfig+0x470>)
 8006564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800656a:	60bb      	str	r3, [r7, #8]
 800656c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800656e:	2301      	movs	r3, #1
 8006570:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006572:	4b77      	ldr	r3, [pc, #476]	@ (8006750 <HAL_RCC_OscConfig+0x474>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800657a:	2b00      	cmp	r3, #0
 800657c:	d118      	bne.n	80065b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800657e:	4b74      	ldr	r3, [pc, #464]	@ (8006750 <HAL_RCC_OscConfig+0x474>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a73      	ldr	r2, [pc, #460]	@ (8006750 <HAL_RCC_OscConfig+0x474>)
 8006584:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800658a:	f7fe fb03 	bl	8004b94 <HAL_GetTick>
 800658e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006590:	e008      	b.n	80065a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006592:	f7fe faff 	bl	8004b94 <HAL_GetTick>
 8006596:	4602      	mov	r2, r0
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	2b02      	cmp	r3, #2
 800659e:	d901      	bls.n	80065a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e10c      	b.n	80067be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065a4:	4b6a      	ldr	r3, [pc, #424]	@ (8006750 <HAL_RCC_OscConfig+0x474>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d0f0      	beq.n	8006592 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d106      	bne.n	80065c6 <HAL_RCC_OscConfig+0x2ea>
 80065b8:	4b64      	ldr	r3, [pc, #400]	@ (800674c <HAL_RCC_OscConfig+0x470>)
 80065ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065bc:	4a63      	ldr	r2, [pc, #396]	@ (800674c <HAL_RCC_OscConfig+0x470>)
 80065be:	f043 0301 	orr.w	r3, r3, #1
 80065c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80065c4:	e01c      	b.n	8006600 <HAL_RCC_OscConfig+0x324>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	2b05      	cmp	r3, #5
 80065cc:	d10c      	bne.n	80065e8 <HAL_RCC_OscConfig+0x30c>
 80065ce:	4b5f      	ldr	r3, [pc, #380]	@ (800674c <HAL_RCC_OscConfig+0x470>)
 80065d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065d2:	4a5e      	ldr	r2, [pc, #376]	@ (800674c <HAL_RCC_OscConfig+0x470>)
 80065d4:	f043 0304 	orr.w	r3, r3, #4
 80065d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80065da:	4b5c      	ldr	r3, [pc, #368]	@ (800674c <HAL_RCC_OscConfig+0x470>)
 80065dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065de:	4a5b      	ldr	r2, [pc, #364]	@ (800674c <HAL_RCC_OscConfig+0x470>)
 80065e0:	f043 0301 	orr.w	r3, r3, #1
 80065e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80065e6:	e00b      	b.n	8006600 <HAL_RCC_OscConfig+0x324>
 80065e8:	4b58      	ldr	r3, [pc, #352]	@ (800674c <HAL_RCC_OscConfig+0x470>)
 80065ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ec:	4a57      	ldr	r2, [pc, #348]	@ (800674c <HAL_RCC_OscConfig+0x470>)
 80065ee:	f023 0301 	bic.w	r3, r3, #1
 80065f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80065f4:	4b55      	ldr	r3, [pc, #340]	@ (800674c <HAL_RCC_OscConfig+0x470>)
 80065f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065f8:	4a54      	ldr	r2, [pc, #336]	@ (800674c <HAL_RCC_OscConfig+0x470>)
 80065fa:	f023 0304 	bic.w	r3, r3, #4
 80065fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d015      	beq.n	8006634 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006608:	f7fe fac4 	bl	8004b94 <HAL_GetTick>
 800660c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800660e:	e00a      	b.n	8006626 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006610:	f7fe fac0 	bl	8004b94 <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800661e:	4293      	cmp	r3, r2
 8006620:	d901      	bls.n	8006626 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e0cb      	b.n	80067be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006626:	4b49      	ldr	r3, [pc, #292]	@ (800674c <HAL_RCC_OscConfig+0x470>)
 8006628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800662a:	f003 0302 	and.w	r3, r3, #2
 800662e:	2b00      	cmp	r3, #0
 8006630:	d0ee      	beq.n	8006610 <HAL_RCC_OscConfig+0x334>
 8006632:	e014      	b.n	800665e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006634:	f7fe faae 	bl	8004b94 <HAL_GetTick>
 8006638:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800663a:	e00a      	b.n	8006652 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800663c:	f7fe faaa 	bl	8004b94 <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	f241 3288 	movw	r2, #5000	@ 0x1388
 800664a:	4293      	cmp	r3, r2
 800664c:	d901      	bls.n	8006652 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e0b5      	b.n	80067be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006652:	4b3e      	ldr	r3, [pc, #248]	@ (800674c <HAL_RCC_OscConfig+0x470>)
 8006654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006656:	f003 0302 	and.w	r3, r3, #2
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1ee      	bne.n	800663c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800665e:	7dfb      	ldrb	r3, [r7, #23]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d105      	bne.n	8006670 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006664:	4b39      	ldr	r3, [pc, #228]	@ (800674c <HAL_RCC_OscConfig+0x470>)
 8006666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006668:	4a38      	ldr	r2, [pc, #224]	@ (800674c <HAL_RCC_OscConfig+0x470>)
 800666a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800666e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	2b00      	cmp	r3, #0
 8006676:	f000 80a1 	beq.w	80067bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800667a:	4b34      	ldr	r3, [pc, #208]	@ (800674c <HAL_RCC_OscConfig+0x470>)
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f003 030c 	and.w	r3, r3, #12
 8006682:	2b08      	cmp	r3, #8
 8006684:	d05c      	beq.n	8006740 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	2b02      	cmp	r3, #2
 800668c:	d141      	bne.n	8006712 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800668e:	4b31      	ldr	r3, [pc, #196]	@ (8006754 <HAL_RCC_OscConfig+0x478>)
 8006690:	2200      	movs	r2, #0
 8006692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006694:	f7fe fa7e 	bl	8004b94 <HAL_GetTick>
 8006698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800669a:	e008      	b.n	80066ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800669c:	f7fe fa7a 	bl	8004b94 <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d901      	bls.n	80066ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e087      	b.n	80067be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066ae:	4b27      	ldr	r3, [pc, #156]	@ (800674c <HAL_RCC_OscConfig+0x470>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1f0      	bne.n	800669c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	69da      	ldr	r2, [r3, #28]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	431a      	orrs	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066c8:	019b      	lsls	r3, r3, #6
 80066ca:	431a      	orrs	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066d0:	085b      	lsrs	r3, r3, #1
 80066d2:	3b01      	subs	r3, #1
 80066d4:	041b      	lsls	r3, r3, #16
 80066d6:	431a      	orrs	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066dc:	061b      	lsls	r3, r3, #24
 80066de:	491b      	ldr	r1, [pc, #108]	@ (800674c <HAL_RCC_OscConfig+0x470>)
 80066e0:	4313      	orrs	r3, r2
 80066e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006754 <HAL_RCC_OscConfig+0x478>)
 80066e6:	2201      	movs	r2, #1
 80066e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066ea:	f7fe fa53 	bl	8004b94 <HAL_GetTick>
 80066ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066f0:	e008      	b.n	8006704 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066f2:	f7fe fa4f 	bl	8004b94 <HAL_GetTick>
 80066f6:	4602      	mov	r2, r0
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d901      	bls.n	8006704 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	e05c      	b.n	80067be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006704:	4b11      	ldr	r3, [pc, #68]	@ (800674c <HAL_RCC_OscConfig+0x470>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d0f0      	beq.n	80066f2 <HAL_RCC_OscConfig+0x416>
 8006710:	e054      	b.n	80067bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006712:	4b10      	ldr	r3, [pc, #64]	@ (8006754 <HAL_RCC_OscConfig+0x478>)
 8006714:	2200      	movs	r2, #0
 8006716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006718:	f7fe fa3c 	bl	8004b94 <HAL_GetTick>
 800671c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800671e:	e008      	b.n	8006732 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006720:	f7fe fa38 	bl	8004b94 <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	2b02      	cmp	r3, #2
 800672c:	d901      	bls.n	8006732 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e045      	b.n	80067be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006732:	4b06      	ldr	r3, [pc, #24]	@ (800674c <HAL_RCC_OscConfig+0x470>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1f0      	bne.n	8006720 <HAL_RCC_OscConfig+0x444>
 800673e:	e03d      	b.n	80067bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d107      	bne.n	8006758 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e038      	b.n	80067be <HAL_RCC_OscConfig+0x4e2>
 800674c:	40023800 	.word	0x40023800
 8006750:	40007000 	.word	0x40007000
 8006754:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006758:	4b1b      	ldr	r3, [pc, #108]	@ (80067c8 <HAL_RCC_OscConfig+0x4ec>)
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d028      	beq.n	80067b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006770:	429a      	cmp	r2, r3
 8006772:	d121      	bne.n	80067b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800677e:	429a      	cmp	r2, r3
 8006780:	d11a      	bne.n	80067b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006788:	4013      	ands	r3, r2
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800678e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006790:	4293      	cmp	r3, r2
 8006792:	d111      	bne.n	80067b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800679e:	085b      	lsrs	r3, r3, #1
 80067a0:	3b01      	subs	r3, #1
 80067a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d107      	bne.n	80067b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d001      	beq.n	80067bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e000      	b.n	80067be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3718      	adds	r7, #24
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	40023800 	.word	0x40023800

080067cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d101      	bne.n	80067e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e0cc      	b.n	800697a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80067e0:	4b68      	ldr	r3, [pc, #416]	@ (8006984 <HAL_RCC_ClockConfig+0x1b8>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0307 	and.w	r3, r3, #7
 80067e8:	683a      	ldr	r2, [r7, #0]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d90c      	bls.n	8006808 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ee:	4b65      	ldr	r3, [pc, #404]	@ (8006984 <HAL_RCC_ClockConfig+0x1b8>)
 80067f0:	683a      	ldr	r2, [r7, #0]
 80067f2:	b2d2      	uxtb	r2, r2
 80067f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067f6:	4b63      	ldr	r3, [pc, #396]	@ (8006984 <HAL_RCC_ClockConfig+0x1b8>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0307 	and.w	r3, r3, #7
 80067fe:	683a      	ldr	r2, [r7, #0]
 8006800:	429a      	cmp	r2, r3
 8006802:	d001      	beq.n	8006808 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e0b8      	b.n	800697a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0302 	and.w	r3, r3, #2
 8006810:	2b00      	cmp	r3, #0
 8006812:	d020      	beq.n	8006856 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0304 	and.w	r3, r3, #4
 800681c:	2b00      	cmp	r3, #0
 800681e:	d005      	beq.n	800682c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006820:	4b59      	ldr	r3, [pc, #356]	@ (8006988 <HAL_RCC_ClockConfig+0x1bc>)
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	4a58      	ldr	r2, [pc, #352]	@ (8006988 <HAL_RCC_ClockConfig+0x1bc>)
 8006826:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800682a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0308 	and.w	r3, r3, #8
 8006834:	2b00      	cmp	r3, #0
 8006836:	d005      	beq.n	8006844 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006838:	4b53      	ldr	r3, [pc, #332]	@ (8006988 <HAL_RCC_ClockConfig+0x1bc>)
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	4a52      	ldr	r2, [pc, #328]	@ (8006988 <HAL_RCC_ClockConfig+0x1bc>)
 800683e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006842:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006844:	4b50      	ldr	r3, [pc, #320]	@ (8006988 <HAL_RCC_ClockConfig+0x1bc>)
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	494d      	ldr	r1, [pc, #308]	@ (8006988 <HAL_RCC_ClockConfig+0x1bc>)
 8006852:	4313      	orrs	r3, r2
 8006854:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b00      	cmp	r3, #0
 8006860:	d044      	beq.n	80068ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d107      	bne.n	800687a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800686a:	4b47      	ldr	r3, [pc, #284]	@ (8006988 <HAL_RCC_ClockConfig+0x1bc>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d119      	bne.n	80068aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e07f      	b.n	800697a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	2b02      	cmp	r3, #2
 8006880:	d003      	beq.n	800688a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006886:	2b03      	cmp	r3, #3
 8006888:	d107      	bne.n	800689a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800688a:	4b3f      	ldr	r3, [pc, #252]	@ (8006988 <HAL_RCC_ClockConfig+0x1bc>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d109      	bne.n	80068aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e06f      	b.n	800697a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800689a:	4b3b      	ldr	r3, [pc, #236]	@ (8006988 <HAL_RCC_ClockConfig+0x1bc>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0302 	and.w	r3, r3, #2
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e067      	b.n	800697a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068aa:	4b37      	ldr	r3, [pc, #220]	@ (8006988 <HAL_RCC_ClockConfig+0x1bc>)
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f023 0203 	bic.w	r2, r3, #3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	4934      	ldr	r1, [pc, #208]	@ (8006988 <HAL_RCC_ClockConfig+0x1bc>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80068bc:	f7fe f96a 	bl	8004b94 <HAL_GetTick>
 80068c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068c2:	e00a      	b.n	80068da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068c4:	f7fe f966 	bl	8004b94 <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d901      	bls.n	80068da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e04f      	b.n	800697a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068da:	4b2b      	ldr	r3, [pc, #172]	@ (8006988 <HAL_RCC_ClockConfig+0x1bc>)
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f003 020c 	and.w	r2, r3, #12
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d1eb      	bne.n	80068c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80068ec:	4b25      	ldr	r3, [pc, #148]	@ (8006984 <HAL_RCC_ClockConfig+0x1b8>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0307 	and.w	r3, r3, #7
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d20c      	bcs.n	8006914 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068fa:	4b22      	ldr	r3, [pc, #136]	@ (8006984 <HAL_RCC_ClockConfig+0x1b8>)
 80068fc:	683a      	ldr	r2, [r7, #0]
 80068fe:	b2d2      	uxtb	r2, r2
 8006900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006902:	4b20      	ldr	r3, [pc, #128]	@ (8006984 <HAL_RCC_ClockConfig+0x1b8>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0307 	and.w	r3, r3, #7
 800690a:	683a      	ldr	r2, [r7, #0]
 800690c:	429a      	cmp	r2, r3
 800690e:	d001      	beq.n	8006914 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e032      	b.n	800697a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 0304 	and.w	r3, r3, #4
 800691c:	2b00      	cmp	r3, #0
 800691e:	d008      	beq.n	8006932 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006920:	4b19      	ldr	r3, [pc, #100]	@ (8006988 <HAL_RCC_ClockConfig+0x1bc>)
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	4916      	ldr	r1, [pc, #88]	@ (8006988 <HAL_RCC_ClockConfig+0x1bc>)
 800692e:	4313      	orrs	r3, r2
 8006930:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0308 	and.w	r3, r3, #8
 800693a:	2b00      	cmp	r3, #0
 800693c:	d009      	beq.n	8006952 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800693e:	4b12      	ldr	r3, [pc, #72]	@ (8006988 <HAL_RCC_ClockConfig+0x1bc>)
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	00db      	lsls	r3, r3, #3
 800694c:	490e      	ldr	r1, [pc, #56]	@ (8006988 <HAL_RCC_ClockConfig+0x1bc>)
 800694e:	4313      	orrs	r3, r2
 8006950:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006952:	f000 f821 	bl	8006998 <HAL_RCC_GetSysClockFreq>
 8006956:	4602      	mov	r2, r0
 8006958:	4b0b      	ldr	r3, [pc, #44]	@ (8006988 <HAL_RCC_ClockConfig+0x1bc>)
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	091b      	lsrs	r3, r3, #4
 800695e:	f003 030f 	and.w	r3, r3, #15
 8006962:	490a      	ldr	r1, [pc, #40]	@ (800698c <HAL_RCC_ClockConfig+0x1c0>)
 8006964:	5ccb      	ldrb	r3, [r1, r3]
 8006966:	fa22 f303 	lsr.w	r3, r2, r3
 800696a:	4a09      	ldr	r2, [pc, #36]	@ (8006990 <HAL_RCC_ClockConfig+0x1c4>)
 800696c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800696e:	4b09      	ldr	r3, [pc, #36]	@ (8006994 <HAL_RCC_ClockConfig+0x1c8>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4618      	mov	r0, r3
 8006974:	f7fe f8ca 	bl	8004b0c <HAL_InitTick>

  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	40023c00 	.word	0x40023c00
 8006988:	40023800 	.word	0x40023800
 800698c:	0800b850 	.word	0x0800b850
 8006990:	20000004 	.word	0x20000004
 8006994:	20000008 	.word	0x20000008

08006998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800699c:	b094      	sub	sp, #80	@ 0x50
 800699e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80069a0:	2300      	movs	r3, #0
 80069a2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80069a4:	2300      	movs	r3, #0
 80069a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80069a8:	2300      	movs	r3, #0
 80069aa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80069ac:	2300      	movs	r3, #0
 80069ae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069b0:	4b79      	ldr	r3, [pc, #484]	@ (8006b98 <HAL_RCC_GetSysClockFreq+0x200>)
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	f003 030c 	and.w	r3, r3, #12
 80069b8:	2b08      	cmp	r3, #8
 80069ba:	d00d      	beq.n	80069d8 <HAL_RCC_GetSysClockFreq+0x40>
 80069bc:	2b08      	cmp	r3, #8
 80069be:	f200 80e1 	bhi.w	8006b84 <HAL_RCC_GetSysClockFreq+0x1ec>
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d002      	beq.n	80069cc <HAL_RCC_GetSysClockFreq+0x34>
 80069c6:	2b04      	cmp	r3, #4
 80069c8:	d003      	beq.n	80069d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80069ca:	e0db      	b.n	8006b84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80069cc:	4b73      	ldr	r3, [pc, #460]	@ (8006b9c <HAL_RCC_GetSysClockFreq+0x204>)
 80069ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80069d0:	e0db      	b.n	8006b8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80069d2:	4b73      	ldr	r3, [pc, #460]	@ (8006ba0 <HAL_RCC_GetSysClockFreq+0x208>)
 80069d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80069d6:	e0d8      	b.n	8006b8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80069d8:	4b6f      	ldr	r3, [pc, #444]	@ (8006b98 <HAL_RCC_GetSysClockFreq+0x200>)
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069e0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80069e2:	4b6d      	ldr	r3, [pc, #436]	@ (8006b98 <HAL_RCC_GetSysClockFreq+0x200>)
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d063      	beq.n	8006ab6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069ee:	4b6a      	ldr	r3, [pc, #424]	@ (8006b98 <HAL_RCC_GetSysClockFreq+0x200>)
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	099b      	lsrs	r3, r3, #6
 80069f4:	2200      	movs	r2, #0
 80069f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80069f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80069fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a00:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a02:	2300      	movs	r3, #0
 8006a04:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006a0a:	4622      	mov	r2, r4
 8006a0c:	462b      	mov	r3, r5
 8006a0e:	f04f 0000 	mov.w	r0, #0
 8006a12:	f04f 0100 	mov.w	r1, #0
 8006a16:	0159      	lsls	r1, r3, #5
 8006a18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a1c:	0150      	lsls	r0, r2, #5
 8006a1e:	4602      	mov	r2, r0
 8006a20:	460b      	mov	r3, r1
 8006a22:	4621      	mov	r1, r4
 8006a24:	1a51      	subs	r1, r2, r1
 8006a26:	6139      	str	r1, [r7, #16]
 8006a28:	4629      	mov	r1, r5
 8006a2a:	eb63 0301 	sbc.w	r3, r3, r1
 8006a2e:	617b      	str	r3, [r7, #20]
 8006a30:	f04f 0200 	mov.w	r2, #0
 8006a34:	f04f 0300 	mov.w	r3, #0
 8006a38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a3c:	4659      	mov	r1, fp
 8006a3e:	018b      	lsls	r3, r1, #6
 8006a40:	4651      	mov	r1, sl
 8006a42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a46:	4651      	mov	r1, sl
 8006a48:	018a      	lsls	r2, r1, #6
 8006a4a:	4651      	mov	r1, sl
 8006a4c:	ebb2 0801 	subs.w	r8, r2, r1
 8006a50:	4659      	mov	r1, fp
 8006a52:	eb63 0901 	sbc.w	r9, r3, r1
 8006a56:	f04f 0200 	mov.w	r2, #0
 8006a5a:	f04f 0300 	mov.w	r3, #0
 8006a5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a6a:	4690      	mov	r8, r2
 8006a6c:	4699      	mov	r9, r3
 8006a6e:	4623      	mov	r3, r4
 8006a70:	eb18 0303 	adds.w	r3, r8, r3
 8006a74:	60bb      	str	r3, [r7, #8]
 8006a76:	462b      	mov	r3, r5
 8006a78:	eb49 0303 	adc.w	r3, r9, r3
 8006a7c:	60fb      	str	r3, [r7, #12]
 8006a7e:	f04f 0200 	mov.w	r2, #0
 8006a82:	f04f 0300 	mov.w	r3, #0
 8006a86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006a8a:	4629      	mov	r1, r5
 8006a8c:	024b      	lsls	r3, r1, #9
 8006a8e:	4621      	mov	r1, r4
 8006a90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006a94:	4621      	mov	r1, r4
 8006a96:	024a      	lsls	r2, r1, #9
 8006a98:	4610      	mov	r0, r2
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006aa2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006aa4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006aa8:	f7fa f87e 	bl	8000ba8 <__aeabi_uldivmod>
 8006aac:	4602      	mov	r2, r0
 8006aae:	460b      	mov	r3, r1
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ab4:	e058      	b.n	8006b68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ab6:	4b38      	ldr	r3, [pc, #224]	@ (8006b98 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	099b      	lsrs	r3, r3, #6
 8006abc:	2200      	movs	r2, #0
 8006abe:	4618      	mov	r0, r3
 8006ac0:	4611      	mov	r1, r2
 8006ac2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006ac6:	623b      	str	r3, [r7, #32]
 8006ac8:	2300      	movs	r3, #0
 8006aca:	627b      	str	r3, [r7, #36]	@ 0x24
 8006acc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006ad0:	4642      	mov	r2, r8
 8006ad2:	464b      	mov	r3, r9
 8006ad4:	f04f 0000 	mov.w	r0, #0
 8006ad8:	f04f 0100 	mov.w	r1, #0
 8006adc:	0159      	lsls	r1, r3, #5
 8006ade:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ae2:	0150      	lsls	r0, r2, #5
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	4641      	mov	r1, r8
 8006aea:	ebb2 0a01 	subs.w	sl, r2, r1
 8006aee:	4649      	mov	r1, r9
 8006af0:	eb63 0b01 	sbc.w	fp, r3, r1
 8006af4:	f04f 0200 	mov.w	r2, #0
 8006af8:	f04f 0300 	mov.w	r3, #0
 8006afc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006b00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006b04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006b08:	ebb2 040a 	subs.w	r4, r2, sl
 8006b0c:	eb63 050b 	sbc.w	r5, r3, fp
 8006b10:	f04f 0200 	mov.w	r2, #0
 8006b14:	f04f 0300 	mov.w	r3, #0
 8006b18:	00eb      	lsls	r3, r5, #3
 8006b1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b1e:	00e2      	lsls	r2, r4, #3
 8006b20:	4614      	mov	r4, r2
 8006b22:	461d      	mov	r5, r3
 8006b24:	4643      	mov	r3, r8
 8006b26:	18e3      	adds	r3, r4, r3
 8006b28:	603b      	str	r3, [r7, #0]
 8006b2a:	464b      	mov	r3, r9
 8006b2c:	eb45 0303 	adc.w	r3, r5, r3
 8006b30:	607b      	str	r3, [r7, #4]
 8006b32:	f04f 0200 	mov.w	r2, #0
 8006b36:	f04f 0300 	mov.w	r3, #0
 8006b3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b3e:	4629      	mov	r1, r5
 8006b40:	028b      	lsls	r3, r1, #10
 8006b42:	4621      	mov	r1, r4
 8006b44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b48:	4621      	mov	r1, r4
 8006b4a:	028a      	lsls	r2, r1, #10
 8006b4c:	4610      	mov	r0, r2
 8006b4e:	4619      	mov	r1, r3
 8006b50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b52:	2200      	movs	r2, #0
 8006b54:	61bb      	str	r3, [r7, #24]
 8006b56:	61fa      	str	r2, [r7, #28]
 8006b58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b5c:	f7fa f824 	bl	8000ba8 <__aeabi_uldivmod>
 8006b60:	4602      	mov	r2, r0
 8006b62:	460b      	mov	r3, r1
 8006b64:	4613      	mov	r3, r2
 8006b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006b68:	4b0b      	ldr	r3, [pc, #44]	@ (8006b98 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	0c1b      	lsrs	r3, r3, #16
 8006b6e:	f003 0303 	and.w	r3, r3, #3
 8006b72:	3301      	adds	r3, #1
 8006b74:	005b      	lsls	r3, r3, #1
 8006b76:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006b78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b82:	e002      	b.n	8006b8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b84:	4b05      	ldr	r3, [pc, #20]	@ (8006b9c <HAL_RCC_GetSysClockFreq+0x204>)
 8006b86:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3750      	adds	r7, #80	@ 0x50
 8006b90:	46bd      	mov	sp, r7
 8006b92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b96:	bf00      	nop
 8006b98:	40023800 	.word	0x40023800
 8006b9c:	00f42400 	.word	0x00f42400
 8006ba0:	007a1200 	.word	0x007a1200

08006ba4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ba8:	4b03      	ldr	r3, [pc, #12]	@ (8006bb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006baa:	681b      	ldr	r3, [r3, #0]
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	20000004 	.word	0x20000004

08006bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006bc0:	f7ff fff0 	bl	8006ba4 <HAL_RCC_GetHCLKFreq>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	4b05      	ldr	r3, [pc, #20]	@ (8006bdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	0a9b      	lsrs	r3, r3, #10
 8006bcc:	f003 0307 	and.w	r3, r3, #7
 8006bd0:	4903      	ldr	r1, [pc, #12]	@ (8006be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bd2:	5ccb      	ldrb	r3, [r1, r3]
 8006bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	40023800 	.word	0x40023800
 8006be0:	0800b860 	.word	0x0800b860

08006be4 <LL_GPIO_SetPinMode>:
{
 8006be4:	b480      	push	{r7}
 8006be6:	b08b      	sub	sp, #44	@ 0x2c
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	fa93 f3a3 	rbit	r3, r3
 8006bfe:	613b      	str	r3, [r7, #16]
  return result;
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8006c0a:	2320      	movs	r3, #32
 8006c0c:	e003      	b.n	8006c16 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	fab3 f383 	clz	r3, r3
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	005b      	lsls	r3, r3, #1
 8006c18:	2103      	movs	r1, #3
 8006c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c1e:	43db      	mvns	r3, r3
 8006c20:	401a      	ands	r2, r3
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c26:	6a3b      	ldr	r3, [r7, #32]
 8006c28:	fa93 f3a3 	rbit	r3, r3
 8006c2c:	61fb      	str	r3, [r7, #28]
  return result;
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d101      	bne.n	8006c3c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006c38:	2320      	movs	r3, #32
 8006c3a:	e003      	b.n	8006c44 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3e:	fab3 f383 	clz	r3, r3
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	005b      	lsls	r3, r3, #1
 8006c46:	6879      	ldr	r1, [r7, #4]
 8006c48:	fa01 f303 	lsl.w	r3, r1, r3
 8006c4c:	431a      	orrs	r2, r3
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	601a      	str	r2, [r3, #0]
}
 8006c52:	bf00      	nop
 8006c54:	372c      	adds	r7, #44	@ 0x2c
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <LL_GPIO_SetPinOutputType>:
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b085      	sub	sp, #20
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	60f8      	str	r0, [r7, #12]
 8006c66:	60b9      	str	r1, [r7, #8]
 8006c68:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	685a      	ldr	r2, [r3, #4]
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	43db      	mvns	r3, r3
 8006c72:	401a      	ands	r2, r3
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	6879      	ldr	r1, [r7, #4]
 8006c78:	fb01 f303 	mul.w	r3, r1, r3
 8006c7c:	431a      	orrs	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	605a      	str	r2, [r3, #4]
}
 8006c82:	bf00      	nop
 8006c84:	3714      	adds	r7, #20
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr

08006c8e <LL_GPIO_SetPinSpeed>:
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b08b      	sub	sp, #44	@ 0x2c
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	60f8      	str	r0, [r7, #12]
 8006c96:	60b9      	str	r1, [r7, #8]
 8006c98:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	689a      	ldr	r2, [r3, #8]
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	fa93 f3a3 	rbit	r3, r3
 8006ca8:	613b      	str	r3, [r7, #16]
  return result;
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d101      	bne.n	8006cb8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8006cb4:	2320      	movs	r3, #32
 8006cb6:	e003      	b.n	8006cc0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	fab3 f383 	clz	r3, r3
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	005b      	lsls	r3, r3, #1
 8006cc2:	2103      	movs	r1, #3
 8006cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8006cc8:	43db      	mvns	r3, r3
 8006cca:	401a      	ands	r2, r3
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cd0:	6a3b      	ldr	r3, [r7, #32]
 8006cd2:	fa93 f3a3 	rbit	r3, r3
 8006cd6:	61fb      	str	r3, [r7, #28]
  return result;
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d101      	bne.n	8006ce6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8006ce2:	2320      	movs	r3, #32
 8006ce4:	e003      	b.n	8006cee <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce8:	fab3 f383 	clz	r3, r3
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	005b      	lsls	r3, r3, #1
 8006cf0:	6879      	ldr	r1, [r7, #4]
 8006cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8006cf6:	431a      	orrs	r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	609a      	str	r2, [r3, #8]
}
 8006cfc:	bf00      	nop
 8006cfe:	372c      	adds	r7, #44	@ 0x2c
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <LL_GPIO_SetPinPull>:
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b08b      	sub	sp, #44	@ 0x2c
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	68da      	ldr	r2, [r3, #12]
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	fa93 f3a3 	rbit	r3, r3
 8006d22:	613b      	str	r3, [r7, #16]
  return result;
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d101      	bne.n	8006d32 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8006d2e:	2320      	movs	r3, #32
 8006d30:	e003      	b.n	8006d3a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	fab3 f383 	clz	r3, r3
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	005b      	lsls	r3, r3, #1
 8006d3c:	2103      	movs	r1, #3
 8006d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d42:	43db      	mvns	r3, r3
 8006d44:	401a      	ands	r2, r3
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d4a:	6a3b      	ldr	r3, [r7, #32]
 8006d4c:	fa93 f3a3 	rbit	r3, r3
 8006d50:	61fb      	str	r3, [r7, #28]
  return result;
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d101      	bne.n	8006d60 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8006d5c:	2320      	movs	r3, #32
 8006d5e:	e003      	b.n	8006d68 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8006d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d62:	fab3 f383 	clz	r3, r3
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	005b      	lsls	r3, r3, #1
 8006d6a:	6879      	ldr	r1, [r7, #4]
 8006d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d70:	431a      	orrs	r2, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	60da      	str	r2, [r3, #12]
}
 8006d76:	bf00      	nop
 8006d78:	372c      	adds	r7, #44	@ 0x2c
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <LL_GPIO_SetAFPin_0_7>:
{
 8006d82:	b480      	push	{r7}
 8006d84:	b08b      	sub	sp, #44	@ 0x2c
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	60f8      	str	r0, [r7, #12]
 8006d8a:	60b9      	str	r1, [r7, #8]
 8006d8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6a1a      	ldr	r2, [r3, #32]
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	fa93 f3a3 	rbit	r3, r3
 8006d9c:	613b      	str	r3, [r7, #16]
  return result;
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d101      	bne.n	8006dac <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8006da8:	2320      	movs	r3, #32
 8006daa:	e003      	b.n	8006db4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	fab3 f383 	clz	r3, r3
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	210f      	movs	r1, #15
 8006db8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dbc:	43db      	mvns	r3, r3
 8006dbe:	401a      	ands	r2, r3
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dc4:	6a3b      	ldr	r3, [r7, #32]
 8006dc6:	fa93 f3a3 	rbit	r3, r3
 8006dca:	61fb      	str	r3, [r7, #28]
  return result;
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d101      	bne.n	8006dda <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8006dd6:	2320      	movs	r3, #32
 8006dd8:	e003      	b.n	8006de2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8006dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ddc:	fab3 f383 	clz	r3, r3
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	6879      	ldr	r1, [r7, #4]
 8006de6:	fa01 f303 	lsl.w	r3, r1, r3
 8006dea:	431a      	orrs	r2, r3
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	621a      	str	r2, [r3, #32]
}
 8006df0:	bf00      	nop
 8006df2:	372c      	adds	r7, #44	@ 0x2c
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <LL_GPIO_SetAFPin_8_15>:
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b08b      	sub	sp, #44	@ 0x2c
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	0a1b      	lsrs	r3, r3, #8
 8006e10:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	fa93 f3a3 	rbit	r3, r3
 8006e18:	613b      	str	r3, [r7, #16]
  return result;
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d101      	bne.n	8006e28 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8006e24:	2320      	movs	r3, #32
 8006e26:	e003      	b.n	8006e30 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	fab3 f383 	clz	r3, r3
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	210f      	movs	r1, #15
 8006e34:	fa01 f303 	lsl.w	r3, r1, r3
 8006e38:	43db      	mvns	r3, r3
 8006e3a:	401a      	ands	r2, r3
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	0a1b      	lsrs	r3, r3, #8
 8006e40:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e42:	6a3b      	ldr	r3, [r7, #32]
 8006e44:	fa93 f3a3 	rbit	r3, r3
 8006e48:	61fb      	str	r3, [r7, #28]
  return result;
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8006e54:	2320      	movs	r3, #32
 8006e56:	e003      	b.n	8006e60 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8006e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e5a:	fab3 f383 	clz	r3, r3
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	6879      	ldr	r1, [r7, #4]
 8006e64:	fa01 f303 	lsl.w	r3, r1, r3
 8006e68:	431a      	orrs	r2, r3
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8006e6e:	bf00      	nop
 8006e70:	372c      	adds	r7, #44	@ 0x2c
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b08a      	sub	sp, #40	@ 0x28
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
 8006e82:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8006e84:	2300      	movs	r3, #0
 8006e86:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	fa93 f3a3 	rbit	r3, r3
 8006e98:	617b      	str	r3, [r7, #20]
  return result;
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d101      	bne.n	8006ea8 <LL_GPIO_Init+0x2e>
    return 32U;
 8006ea4:	2320      	movs	r3, #32
 8006ea6:	e003      	b.n	8006eb0 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	fab3 f383 	clz	r3, r3
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006eb2:	e057      	b.n	8006f64 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	2101      	movs	r1, #1
 8006eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8006ec4:	6a3b      	ldr	r3, [r7, #32]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d049      	beq.n	8006f5e <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d003      	beq.n	8006eda <LL_GPIO_Init+0x60>
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d10d      	bne.n	8006ef6 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	461a      	mov	r2, r3
 8006ee0:	6a39      	ldr	r1, [r7, #32]
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f7ff fed3 	bl	8006c8e <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	461a      	mov	r2, r3
 8006eee:	6a39      	ldr	r1, [r7, #32]
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f7ff feb4 	bl	8006c5e <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	461a      	mov	r2, r3
 8006efc:	6a39      	ldr	r1, [r7, #32]
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f7ff ff02 	bl	8006d08 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d121      	bne.n	8006f50 <LL_GPIO_Init+0xd6>
 8006f0c:	6a3b      	ldr	r3, [r7, #32]
 8006f0e:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	fa93 f3a3 	rbit	r3, r3
 8006f16:	60bb      	str	r3, [r7, #8]
  return result;
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <LL_GPIO_Init+0xac>
    return 32U;
 8006f22:	2320      	movs	r3, #32
 8006f24:	e003      	b.n	8006f2e <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	fab3 f383 	clz	r3, r3
 8006f2c:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8006f2e:	2b07      	cmp	r3, #7
 8006f30:	d807      	bhi.n	8006f42 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	695b      	ldr	r3, [r3, #20]
 8006f36:	461a      	mov	r2, r3
 8006f38:	6a39      	ldr	r1, [r7, #32]
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f7ff ff21 	bl	8006d82 <LL_GPIO_SetAFPin_0_7>
 8006f40:	e006      	b.n	8006f50 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	695b      	ldr	r3, [r3, #20]
 8006f46:	461a      	mov	r2, r3
 8006f48:	6a39      	ldr	r1, [r7, #32]
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f7ff ff56 	bl	8006dfc <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	461a      	mov	r2, r3
 8006f56:	6a39      	ldr	r1, [r7, #32]
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f7ff fe43 	bl	8006be4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f60:	3301      	adds	r3, #1
 8006f62:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1a0      	bne.n	8006eb4 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3728      	adds	r7, #40	@ 0x28
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006f80:	4b04      	ldr	r3, [pc, #16]	@ (8006f94 <LL_RCC_GetSysClkSource+0x18>)
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	f003 030c 	and.w	r3, r3, #12
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	40023800 	.word	0x40023800

08006f98 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006f9c:	4b04      	ldr	r3, [pc, #16]	@ (8006fb0 <LL_RCC_GetAHBPrescaler+0x18>)
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	40023800 	.word	0x40023800

08006fb4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006fb8:	4b04      	ldr	r3, [pc, #16]	@ (8006fcc <LL_RCC_GetAPB1Prescaler+0x18>)
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	40023800 	.word	0x40023800

08006fd0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006fd4:	4b04      	ldr	r3, [pc, #16]	@ (8006fe8 <LL_RCC_GetAPB2Prescaler+0x18>)
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	40023800 	.word	0x40023800

08006fec <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006fec:	b480      	push	{r7}
 8006fee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006ff0:	4b04      	ldr	r3, [pc, #16]	@ (8007004 <LL_RCC_PLL_GetMainSource+0x18>)
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	40023800 	.word	0x40023800

08007008 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007008:	b480      	push	{r7}
 800700a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800700c:	4b04      	ldr	r3, [pc, #16]	@ (8007020 <LL_RCC_PLL_GetN+0x18>)
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	099b      	lsrs	r3, r3, #6
 8007012:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8007016:	4618      	mov	r0, r3
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr
 8007020:	40023800 	.word	0x40023800

08007024 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8007024:	b480      	push	{r7}
 8007026:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8007028:	4b04      	ldr	r3, [pc, #16]	@ (800703c <LL_RCC_PLL_GetP+0x18>)
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8007030:	4618      	mov	r0, r3
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	40023800 	.word	0x40023800

08007040 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007040:	b480      	push	{r7}
 8007042:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007044:	4b04      	ldr	r3, [pc, #16]	@ (8007058 <LL_RCC_PLL_GetDivider+0x18>)
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800704c:	4618      	mov	r0, r3
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	40023800 	.word	0x40023800

0800705c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8007064:	f000 f820 	bl	80070a8 <RCC_GetSystemClockFreq>
 8007068:	4602      	mov	r2, r0
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4618      	mov	r0, r3
 8007074:	f000 f840 	bl	80070f8 <RCC_GetHCLKClockFreq>
 8007078:	4602      	mov	r2, r0
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	4618      	mov	r0, r3
 8007084:	f000 f84e 	bl	8007124 <RCC_GetPCLK1ClockFreq>
 8007088:	4602      	mov	r2, r0
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	4618      	mov	r0, r3
 8007094:	f000 f85a 	bl	800714c <RCC_GetPCLK2ClockFreq>
 8007098:	4602      	mov	r2, r0
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	60da      	str	r2, [r3, #12]
}
 800709e:	bf00      	nop
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
	...

080070a8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80070ae:	2300      	movs	r3, #0
 80070b0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80070b2:	f7ff ff63 	bl	8006f7c <LL_RCC_GetSysClkSource>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b08      	cmp	r3, #8
 80070ba:	d00c      	beq.n	80070d6 <RCC_GetSystemClockFreq+0x2e>
 80070bc:	2b08      	cmp	r3, #8
 80070be:	d80f      	bhi.n	80070e0 <RCC_GetSystemClockFreq+0x38>
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d002      	beq.n	80070ca <RCC_GetSystemClockFreq+0x22>
 80070c4:	2b04      	cmp	r3, #4
 80070c6:	d003      	beq.n	80070d0 <RCC_GetSystemClockFreq+0x28>
 80070c8:	e00a      	b.n	80070e0 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80070ca:	4b09      	ldr	r3, [pc, #36]	@ (80070f0 <RCC_GetSystemClockFreq+0x48>)
 80070cc:	607b      	str	r3, [r7, #4]
      break;
 80070ce:	e00a      	b.n	80070e6 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80070d0:	4b08      	ldr	r3, [pc, #32]	@ (80070f4 <RCC_GetSystemClockFreq+0x4c>)
 80070d2:	607b      	str	r3, [r7, #4]
      break;
 80070d4:	e007      	b.n	80070e6 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80070d6:	2008      	movs	r0, #8
 80070d8:	f000 f84c 	bl	8007174 <RCC_PLL_GetFreqDomain_SYS>
 80070dc:	6078      	str	r0, [r7, #4]
      break;
 80070de:	e002      	b.n	80070e6 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80070e0:	4b03      	ldr	r3, [pc, #12]	@ (80070f0 <RCC_GetSystemClockFreq+0x48>)
 80070e2:	607b      	str	r3, [r7, #4]
      break;
 80070e4:	bf00      	nop
  }

  return frequency;
 80070e6:	687b      	ldr	r3, [r7, #4]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	00f42400 	.word	0x00f42400
 80070f4:	007a1200 	.word	0x007a1200

080070f8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8007100:	f7ff ff4a 	bl	8006f98 <LL_RCC_GetAHBPrescaler>
 8007104:	4603      	mov	r3, r0
 8007106:	091b      	lsrs	r3, r3, #4
 8007108:	f003 030f 	and.w	r3, r3, #15
 800710c:	4a04      	ldr	r2, [pc, #16]	@ (8007120 <RCC_GetHCLKClockFreq+0x28>)
 800710e:	5cd3      	ldrb	r3, [r2, r3]
 8007110:	461a      	mov	r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	40d3      	lsrs	r3, r2
}
 8007116:	4618      	mov	r0, r3
 8007118:	3708      	adds	r7, #8
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	0800b850 	.word	0x0800b850

08007124 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800712c:	f7ff ff42 	bl	8006fb4 <LL_RCC_GetAPB1Prescaler>
 8007130:	4603      	mov	r3, r0
 8007132:	0a9b      	lsrs	r3, r3, #10
 8007134:	4a04      	ldr	r2, [pc, #16]	@ (8007148 <RCC_GetPCLK1ClockFreq+0x24>)
 8007136:	5cd3      	ldrb	r3, [r2, r3]
 8007138:	461a      	mov	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	40d3      	lsrs	r3, r2
}
 800713e:	4618      	mov	r0, r3
 8007140:	3708      	adds	r7, #8
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	0800b860 	.word	0x0800b860

0800714c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8007154:	f7ff ff3c 	bl	8006fd0 <LL_RCC_GetAPB2Prescaler>
 8007158:	4603      	mov	r3, r0
 800715a:	0b5b      	lsrs	r3, r3, #13
 800715c:	4a04      	ldr	r2, [pc, #16]	@ (8007170 <RCC_GetPCLK2ClockFreq+0x24>)
 800715e:	5cd3      	ldrb	r3, [r2, r3]
 8007160:	461a      	mov	r2, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	40d3      	lsrs	r3, r2
}
 8007166:	4618      	mov	r0, r3
 8007168:	3708      	adds	r7, #8
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	0800b860 	.word	0x0800b860

08007174 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8007174:	b590      	push	{r4, r7, lr}
 8007176:	b087      	sub	sp, #28
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 800717c:	2300      	movs	r3, #0
 800717e:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8007180:	2300      	movs	r3, #0
 8007182:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8007184:	2300      	movs	r3, #0
 8007186:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8007188:	f7ff ff30 	bl	8006fec <LL_RCC_PLL_GetMainSource>
 800718c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d004      	beq.n	800719e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800719a:	d003      	beq.n	80071a4 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800719c:	e005      	b.n	80071aa <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800719e:	4b12      	ldr	r3, [pc, #72]	@ (80071e8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80071a0:	617b      	str	r3, [r7, #20]
      break;
 80071a2:	e005      	b.n	80071b0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80071a4:	4b11      	ldr	r3, [pc, #68]	@ (80071ec <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80071a6:	617b      	str	r3, [r7, #20]
      break;
 80071a8:	e002      	b.n	80071b0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80071aa:	4b0f      	ldr	r3, [pc, #60]	@ (80071e8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80071ac:	617b      	str	r3, [r7, #20]
      break;
 80071ae:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2b08      	cmp	r3, #8
 80071b4:	d113      	bne.n	80071de <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80071b6:	f7ff ff43 	bl	8007040 <LL_RCC_PLL_GetDivider>
 80071ba:	4602      	mov	r2, r0
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	fbb3 f4f2 	udiv	r4, r3, r2
 80071c2:	f7ff ff21 	bl	8007008 <LL_RCC_PLL_GetN>
 80071c6:	4603      	mov	r3, r0
 80071c8:	fb03 f404 	mul.w	r4, r3, r4
 80071cc:	f7ff ff2a 	bl	8007024 <LL_RCC_PLL_GetP>
 80071d0:	4603      	mov	r3, r0
 80071d2:	0c1b      	lsrs	r3, r3, #16
 80071d4:	3301      	adds	r3, #1
 80071d6:	005b      	lsls	r3, r3, #1
 80071d8:	fbb4 f3f3 	udiv	r3, r4, r3
 80071dc:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80071de:	693b      	ldr	r3, [r7, #16]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	371c      	adds	r7, #28
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd90      	pop	{r4, r7, pc}
 80071e8:	00f42400 	.word	0x00f42400
 80071ec:	007a1200 	.word	0x007a1200

080071f0 <LL_SPI_IsEnabled>:
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007200:	2b40      	cmp	r3, #64	@ 0x40
 8007202:	d101      	bne.n	8007208 <LL_SPI_IsEnabled+0x18>
 8007204:	2301      	movs	r3, #1
 8007206:	e000      	b.n	800720a <LL_SPI_IsEnabled+0x1a>
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	370c      	adds	r7, #12
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <LL_SPI_SetCRCPolynomial>:
{
 8007216:	b480      	push	{r7}
 8007218:	b083      	sub	sp, #12
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
 800721e:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	b29b      	uxth	r3, r3
 8007224:	461a      	mov	r2, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	611a      	str	r2, [r3, #16]
}
 800722a:	bf00      	nop
 800722c:	370c      	adds	r7, #12
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b084      	sub	sp, #16
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
 800723e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f7ff ffd3 	bl	80071f0 <LL_SPI_IsEnabled>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d139      	bne.n	80072c4 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007258:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 800725c:	683a      	ldr	r2, [r7, #0]
 800725e:	6811      	ldr	r1, [r2, #0]
 8007260:	683a      	ldr	r2, [r7, #0]
 8007262:	6852      	ldr	r2, [r2, #4]
 8007264:	4311      	orrs	r1, r2
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	6892      	ldr	r2, [r2, #8]
 800726a:	4311      	orrs	r1, r2
 800726c:	683a      	ldr	r2, [r7, #0]
 800726e:	68d2      	ldr	r2, [r2, #12]
 8007270:	4311      	orrs	r1, r2
 8007272:	683a      	ldr	r2, [r7, #0]
 8007274:	6912      	ldr	r2, [r2, #16]
 8007276:	4311      	orrs	r1, r2
 8007278:	683a      	ldr	r2, [r7, #0]
 800727a:	6952      	ldr	r2, [r2, #20]
 800727c:	4311      	orrs	r1, r2
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	6992      	ldr	r2, [r2, #24]
 8007282:	4311      	orrs	r1, r2
 8007284:	683a      	ldr	r2, [r7, #0]
 8007286:	69d2      	ldr	r2, [r2, #28]
 8007288:	4311      	orrs	r1, r2
 800728a:	683a      	ldr	r2, [r7, #0]
 800728c:	6a12      	ldr	r2, [r2, #32]
 800728e:	430a      	orrs	r2, r1
 8007290:	431a      	orrs	r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	f023 0204 	bic.w	r2, r3, #4
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	0c1b      	lsrs	r3, r3, #16
 80072a4:	431a      	orrs	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	6a1b      	ldr	r3, [r3, #32]
 80072ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072b2:	d105      	bne.n	80072c0 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072b8:	4619      	mov	r1, r3
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f7ff ffab 	bl	8007216 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80072c0:	2300      	movs	r3, #0
 80072c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	69db      	ldr	r3, [r3, #28]
 80072c8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	61da      	str	r2, [r3, #28]
  return status;
 80072d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <LL_TIM_SetPrescaler>:
{
 80072da:	b480      	push	{r7}
 80072dc:	b083      	sub	sp, #12
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
 80072e2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	683a      	ldr	r2, [r7, #0]
 80072e8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80072ea:	bf00      	nop
 80072ec:	370c      	adds	r7, #12
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr

080072f6 <LL_TIM_SetAutoReload>:
{
 80072f6:	b480      	push	{r7}
 80072f8:	b083      	sub	sp, #12
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
 80072fe:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	683a      	ldr	r2, [r7, #0]
 8007304:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007306:	bf00      	nop
 8007308:	370c      	adds	r7, #12
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr

08007312 <LL_TIM_SetRepetitionCounter>:
{
 8007312:	b480      	push	{r7}
 8007314:	b083      	sub	sp, #12
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
 800731a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007322:	bf00      	nop
 8007324:	370c      	adds	r7, #12
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr

0800732e <LL_TIM_OC_SetCompareCH1>:
{
 800732e:	b480      	push	{r7}
 8007330:	b083      	sub	sp, #12
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
 8007336:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	683a      	ldr	r2, [r7, #0]
 800733c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800733e:	bf00      	nop
 8007340:	370c      	adds	r7, #12
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr

0800734a <LL_TIM_OC_SetCompareCH2>:
{
 800734a:	b480      	push	{r7}
 800734c:	b083      	sub	sp, #12
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
 8007352:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	683a      	ldr	r2, [r7, #0]
 8007358:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800735a:	bf00      	nop
 800735c:	370c      	adds	r7, #12
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <LL_TIM_OC_SetCompareCH3>:
{
 8007366:	b480      	push	{r7}
 8007368:	b083      	sub	sp, #12
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
 800736e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	683a      	ldr	r2, [r7, #0]
 8007374:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8007376:	bf00      	nop
 8007378:	370c      	adds	r7, #12
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr

08007382 <LL_TIM_OC_SetCompareCH4>:
{
 8007382:	b480      	push	{r7}
 8007384:	b083      	sub	sp, #12
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
 800738a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	683a      	ldr	r2, [r7, #0]
 8007390:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007392:	bf00      	nop
 8007394:	370c      	adds	r7, #12
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr

0800739e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800739e:	b480      	push	{r7}
 80073a0:	b083      	sub	sp, #12
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	f043 0201 	orr.w	r2, r3, #1
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	615a      	str	r2, [r3, #20]
}
 80073b2:	bf00      	nop
 80073b4:	370c      	adds	r7, #12
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
	...

080073c0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a3d      	ldr	r2, [pc, #244]	@ (80074c8 <LL_TIM_Init+0x108>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d013      	beq.n	8007400 <LL_TIM_Init+0x40>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073de:	d00f      	beq.n	8007400 <LL_TIM_Init+0x40>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a3a      	ldr	r2, [pc, #232]	@ (80074cc <LL_TIM_Init+0x10c>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d00b      	beq.n	8007400 <LL_TIM_Init+0x40>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a39      	ldr	r2, [pc, #228]	@ (80074d0 <LL_TIM_Init+0x110>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d007      	beq.n	8007400 <LL_TIM_Init+0x40>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a38      	ldr	r2, [pc, #224]	@ (80074d4 <LL_TIM_Init+0x114>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d003      	beq.n	8007400 <LL_TIM_Init+0x40>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a37      	ldr	r2, [pc, #220]	@ (80074d8 <LL_TIM_Init+0x118>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d106      	bne.n	800740e <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	4313      	orrs	r3, r2
 800740c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4a2d      	ldr	r2, [pc, #180]	@ (80074c8 <LL_TIM_Init+0x108>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d02b      	beq.n	800746e <LL_TIM_Init+0xae>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800741c:	d027      	beq.n	800746e <LL_TIM_Init+0xae>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a2a      	ldr	r2, [pc, #168]	@ (80074cc <LL_TIM_Init+0x10c>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d023      	beq.n	800746e <LL_TIM_Init+0xae>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a29      	ldr	r2, [pc, #164]	@ (80074d0 <LL_TIM_Init+0x110>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d01f      	beq.n	800746e <LL_TIM_Init+0xae>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a28      	ldr	r2, [pc, #160]	@ (80074d4 <LL_TIM_Init+0x114>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d01b      	beq.n	800746e <LL_TIM_Init+0xae>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a27      	ldr	r2, [pc, #156]	@ (80074d8 <LL_TIM_Init+0x118>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d017      	beq.n	800746e <LL_TIM_Init+0xae>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a26      	ldr	r2, [pc, #152]	@ (80074dc <LL_TIM_Init+0x11c>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d013      	beq.n	800746e <LL_TIM_Init+0xae>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a25      	ldr	r2, [pc, #148]	@ (80074e0 <LL_TIM_Init+0x120>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d00f      	beq.n	800746e <LL_TIM_Init+0xae>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4a24      	ldr	r2, [pc, #144]	@ (80074e4 <LL_TIM_Init+0x124>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d00b      	beq.n	800746e <LL_TIM_Init+0xae>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a23      	ldr	r2, [pc, #140]	@ (80074e8 <LL_TIM_Init+0x128>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d007      	beq.n	800746e <LL_TIM_Init+0xae>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a22      	ldr	r2, [pc, #136]	@ (80074ec <LL_TIM_Init+0x12c>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d003      	beq.n	800746e <LL_TIM_Init+0xae>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a21      	ldr	r2, [pc, #132]	@ (80074f0 <LL_TIM_Init+0x130>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d106      	bne.n	800747c <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	4313      	orrs	r3, r2
 800747a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	68fa      	ldr	r2, [r7, #12]
 8007480:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	4619      	mov	r1, r3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f7ff ff34 	bl	80072f6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	881b      	ldrh	r3, [r3, #0]
 8007492:	4619      	mov	r1, r3
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f7ff ff20 	bl	80072da <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a0a      	ldr	r2, [pc, #40]	@ (80074c8 <LL_TIM_Init+0x108>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d003      	beq.n	80074aa <LL_TIM_Init+0xea>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a0c      	ldr	r2, [pc, #48]	@ (80074d8 <LL_TIM_Init+0x118>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d105      	bne.n	80074b6 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	4619      	mov	r1, r3
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f7ff ff2e 	bl	8007312 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7ff ff71 	bl	800739e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	40010000 	.word	0x40010000
 80074cc:	40000400 	.word	0x40000400
 80074d0:	40000800 	.word	0x40000800
 80074d4:	40000c00 	.word	0x40000c00
 80074d8:	40010400 	.word	0x40010400
 80074dc:	40014000 	.word	0x40014000
 80074e0:	40014400 	.word	0x40014400
 80074e4:	40014800 	.word	0x40014800
 80074e8:	40001800 	.word	0x40001800
 80074ec:	40001c00 	.word	0x40001c00
 80074f0:	40002000 	.word	0x40002000

080074f4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800750a:	d027      	beq.n	800755c <LL_TIM_OC_Init+0x68>
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007512:	d82a      	bhi.n	800756a <LL_TIM_OC_Init+0x76>
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800751a:	d018      	beq.n	800754e <LL_TIM_OC_Init+0x5a>
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007522:	d822      	bhi.n	800756a <LL_TIM_OC_Init+0x76>
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	2b01      	cmp	r3, #1
 8007528:	d003      	beq.n	8007532 <LL_TIM_OC_Init+0x3e>
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	2b10      	cmp	r3, #16
 800752e:	d007      	beq.n	8007540 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8007530:	e01b      	b.n	800756a <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8007532:	6879      	ldr	r1, [r7, #4]
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f000 f81f 	bl	8007578 <OC1Config>
 800753a:	4603      	mov	r3, r0
 800753c:	75fb      	strb	r3, [r7, #23]
      break;
 800753e:	e015      	b.n	800756c <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8007540:	6879      	ldr	r1, [r7, #4]
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f000 f884 	bl	8007650 <OC2Config>
 8007548:	4603      	mov	r3, r0
 800754a:	75fb      	strb	r3, [r7, #23]
      break;
 800754c:	e00e      	b.n	800756c <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800754e:	6879      	ldr	r1, [r7, #4]
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 f8ed 	bl	8007730 <OC3Config>
 8007556:	4603      	mov	r3, r0
 8007558:	75fb      	strb	r3, [r7, #23]
      break;
 800755a:	e007      	b.n	800756c <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800755c:	6879      	ldr	r1, [r7, #4]
 800755e:	68f8      	ldr	r0, [r7, #12]
 8007560:	f000 f956 	bl	8007810 <OC4Config>
 8007564:	4603      	mov	r3, r0
 8007566:	75fb      	strb	r3, [r7, #23]
      break;
 8007568:	e000      	b.n	800756c <LL_TIM_OC_Init+0x78>
      break;
 800756a:	bf00      	nop
  }

  return result;
 800756c:	7dfb      	ldrb	r3, [r7, #23]
}
 800756e:	4618      	mov	r0, r3
 8007570:	3718      	adds	r7, #24
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
	...

08007578 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b086      	sub	sp, #24
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a1b      	ldr	r3, [r3, #32]
 8007586:	f023 0201 	bic.w	r2, r3, #1
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a1b      	ldr	r3, [r3, #32]
 8007592:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	699b      	ldr	r3, [r3, #24]
 800759e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f023 0303 	bic.w	r3, r3, #3
 80075a6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	f023 0202 	bic.w	r2, r3, #2
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	f023 0201 	bic.w	r2, r3, #1
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a1c      	ldr	r2, [pc, #112]	@ (8007648 <OC1Config+0xd0>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d003      	beq.n	80075e2 <OC1Config+0x6a>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a1b      	ldr	r2, [pc, #108]	@ (800764c <OC1Config+0xd4>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d11e      	bne.n	8007620 <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	f023 0208 	bic.w	r2, r3, #8
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	695b      	ldr	r3, [r3, #20]
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4313      	orrs	r3, r2
 80075f0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	f023 0204 	bic.w	r2, r3, #4
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4313      	orrs	r3, r2
 8007600:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	4313      	orrs	r3, r2
 800760e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	69db      	ldr	r3, [r3, #28]
 800761a:	005b      	lsls	r3, r3, #1
 800761c:	4313      	orrs	r3, r2
 800761e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	693a      	ldr	r2, [r7, #16]
 8007624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	4619      	mov	r1, r3
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7ff fe7b 	bl	800732e <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3718      	adds	r7, #24
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	40010000 	.word	0x40010000
 800764c:	40010400 	.word	0x40010400

08007650 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b086      	sub	sp, #24
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a1b      	ldr	r3, [r3, #32]
 800765e:	f023 0210 	bic.w	r2, r3, #16
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a1b      	ldr	r3, [r3, #32]
 800766a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800767e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	021b      	lsls	r3, r3, #8
 800768c:	4313      	orrs	r3, r2
 800768e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	f023 0220 	bic.w	r2, r3, #32
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	011b      	lsls	r3, r3, #4
 800769c:	4313      	orrs	r3, r2
 800769e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	f023 0210 	bic.w	r2, r3, #16
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	011b      	lsls	r3, r3, #4
 80076ac:	4313      	orrs	r3, r2
 80076ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a1d      	ldr	r2, [pc, #116]	@ (8007728 <OC2Config+0xd8>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d003      	beq.n	80076c0 <OC2Config+0x70>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a1c      	ldr	r2, [pc, #112]	@ (800772c <OC2Config+0xdc>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d11f      	bne.n	8007700 <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	695b      	ldr	r3, [r3, #20]
 80076ca:	019b      	lsls	r3, r3, #6
 80076cc:	4313      	orrs	r3, r2
 80076ce:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	019b      	lsls	r3, r3, #6
 80076dc:	4313      	orrs	r3, r2
 80076de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	4313      	orrs	r3, r2
 80076ee:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	69db      	ldr	r3, [r3, #28]
 80076fa:	00db      	lsls	r3, r3, #3
 80076fc:	4313      	orrs	r3, r2
 80076fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	4619      	mov	r1, r3
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7ff fe19 	bl	800734a <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3718      	adds	r7, #24
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	40010000 	.word	0x40010000
 800772c:	40010400 	.word	0x40010400

08007730 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a1b      	ldr	r3, [r3, #32]
 800773e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a1b      	ldr	r3, [r3, #32]
 800774a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	69db      	ldr	r3, [r3, #28]
 8007756:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f023 0303 	bic.w	r3, r3, #3
 800775e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4313      	orrs	r3, r2
 800776c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	691b      	ldr	r3, [r3, #16]
 8007778:	021b      	lsls	r3, r3, #8
 800777a:	4313      	orrs	r3, r2
 800777c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	021b      	lsls	r3, r3, #8
 800778a:	4313      	orrs	r3, r2
 800778c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a1d      	ldr	r2, [pc, #116]	@ (8007808 <OC3Config+0xd8>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d003      	beq.n	800779e <OC3Config+0x6e>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a1c      	ldr	r2, [pc, #112]	@ (800780c <OC3Config+0xdc>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d11f      	bne.n	80077de <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	695b      	ldr	r3, [r3, #20]
 80077a8:	029b      	lsls	r3, r3, #10
 80077aa:	4313      	orrs	r3, r2
 80077ac:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	029b      	lsls	r3, r3, #10
 80077ba:	4313      	orrs	r3, r2
 80077bc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	011b      	lsls	r3, r3, #4
 80077ca:	4313      	orrs	r3, r2
 80077cc:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	69db      	ldr	r3, [r3, #28]
 80077d8:	015b      	lsls	r3, r3, #5
 80077da:	4313      	orrs	r3, r2
 80077dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	693a      	ldr	r2, [r7, #16]
 80077e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	4619      	mov	r1, r3
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f7ff fdb8 	bl	8007366 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	697a      	ldr	r2, [r7, #20]
 80077fa:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3718      	adds	r7, #24
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	40010000 	.word	0x40010000
 800780c:	40010400 	.word	0x40010400

08007810 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b086      	sub	sp, #24
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a1b      	ldr	r3, [r3, #32]
 800781e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	69db      	ldr	r3, [r3, #28]
 8007836:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800783e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	021b      	lsls	r3, r3, #8
 800784c:	4313      	orrs	r3, r2
 800784e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	031b      	lsls	r3, r3, #12
 800785c:	4313      	orrs	r3, r2
 800785e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	031b      	lsls	r3, r3, #12
 800786c:	4313      	orrs	r3, r2
 800786e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a11      	ldr	r2, [pc, #68]	@ (80078b8 <OC4Config+0xa8>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d003      	beq.n	8007880 <OC4Config+0x70>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a10      	ldr	r2, [pc, #64]	@ (80078bc <OC4Config+0xac>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d107      	bne.n	8007890 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	699b      	ldr	r3, [r3, #24]
 800788a:	019b      	lsls	r3, r3, #6
 800788c:	4313      	orrs	r3, r2
 800788e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	697a      	ldr	r2, [r7, #20]
 8007894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	4619      	mov	r1, r3
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f7ff fd6d 	bl	8007382 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3718      	adds	r7, #24
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	40010000 	.word	0x40010000
 80078bc:	40010400 	.word	0x40010400

080078c0 <LL_USART_IsEnabled>:
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80078d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078d4:	bf0c      	ite	eq
 80078d6:	2301      	moveq	r3, #1
 80078d8:	2300      	movne	r3, #0
 80078da:	b2db      	uxtb	r3, r3
}
 80078dc:	4618      	mov	r0, r3
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <LL_USART_SetStopBitsLength>:
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	431a      	orrs	r2, r3
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	611a      	str	r2, [r3, #16]
}
 8007902:	bf00      	nop
 8007904:	370c      	adds	r7, #12
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr

0800790e <LL_USART_SetHWFlowCtrl>:
{
 800790e:	b480      	push	{r7}
 8007910:	b083      	sub	sp, #12
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
 8007916:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	695b      	ldr	r3, [r3, #20]
 800791c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	431a      	orrs	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	615a      	str	r2, [r3, #20]
}
 8007928:	bf00      	nop
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <LL_USART_SetBaudRate>:
{
 8007934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007938:	b0c0      	sub	sp, #256	@ 0x100
 800793a:	af00      	add	r7, sp, #0
 800793c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007940:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8007944:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8007948:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800794c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007950:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007954:	f040 810c 	bne.w	8007b70 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8007958:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800795c:	2200      	movs	r2, #0
 800795e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007962:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007966:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800796a:	4622      	mov	r2, r4
 800796c:	462b      	mov	r3, r5
 800796e:	1891      	adds	r1, r2, r2
 8007970:	6639      	str	r1, [r7, #96]	@ 0x60
 8007972:	415b      	adcs	r3, r3
 8007974:	667b      	str	r3, [r7, #100]	@ 0x64
 8007976:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800797a:	4621      	mov	r1, r4
 800797c:	eb12 0801 	adds.w	r8, r2, r1
 8007980:	4629      	mov	r1, r5
 8007982:	eb43 0901 	adc.w	r9, r3, r1
 8007986:	f04f 0200 	mov.w	r2, #0
 800798a:	f04f 0300 	mov.w	r3, #0
 800798e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007992:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007996:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800799a:	4690      	mov	r8, r2
 800799c:	4699      	mov	r9, r3
 800799e:	4623      	mov	r3, r4
 80079a0:	eb18 0303 	adds.w	r3, r8, r3
 80079a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80079a8:	462b      	mov	r3, r5
 80079aa:	eb49 0303 	adc.w	r3, r9, r3
 80079ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80079b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80079b6:	2200      	movs	r2, #0
 80079b8:	469a      	mov	sl, r3
 80079ba:	4693      	mov	fp, r2
 80079bc:	eb1a 030a 	adds.w	r3, sl, sl
 80079c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80079c2:	eb4b 030b 	adc.w	r3, fp, fp
 80079c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80079cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80079d0:	f7f9 f8ea 	bl	8000ba8 <__aeabi_uldivmod>
 80079d4:	4602      	mov	r2, r0
 80079d6:	460b      	mov	r3, r1
 80079d8:	4b64      	ldr	r3, [pc, #400]	@ (8007b6c <LL_USART_SetBaudRate+0x238>)
 80079da:	fba3 2302 	umull	r2, r3, r3, r2
 80079de:	095b      	lsrs	r3, r3, #5
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	011b      	lsls	r3, r3, #4
 80079e4:	b29c      	uxth	r4, r3
 80079e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80079ea:	2200      	movs	r2, #0
 80079ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80079f0:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80079f4:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 80079f8:	4642      	mov	r2, r8
 80079fa:	464b      	mov	r3, r9
 80079fc:	1891      	adds	r1, r2, r2
 80079fe:	6539      	str	r1, [r7, #80]	@ 0x50
 8007a00:	415b      	adcs	r3, r3
 8007a02:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007a08:	4641      	mov	r1, r8
 8007a0a:	1851      	adds	r1, r2, r1
 8007a0c:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007a0e:	4649      	mov	r1, r9
 8007a10:	414b      	adcs	r3, r1
 8007a12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a14:	f04f 0200 	mov.w	r2, #0
 8007a18:	f04f 0300 	mov.w	r3, #0
 8007a1c:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8007a20:	4659      	mov	r1, fp
 8007a22:	00cb      	lsls	r3, r1, #3
 8007a24:	4651      	mov	r1, sl
 8007a26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a2a:	4651      	mov	r1, sl
 8007a2c:	00ca      	lsls	r2, r1, #3
 8007a2e:	4610      	mov	r0, r2
 8007a30:	4619      	mov	r1, r3
 8007a32:	4603      	mov	r3, r0
 8007a34:	4642      	mov	r2, r8
 8007a36:	189b      	adds	r3, r3, r2
 8007a38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a3c:	464b      	mov	r3, r9
 8007a3e:	460a      	mov	r2, r1
 8007a40:	eb42 0303 	adc.w	r3, r2, r3
 8007a44:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007a48:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a52:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8007a56:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	18db      	adds	r3, r3, r3
 8007a5e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a60:	4613      	mov	r3, r2
 8007a62:	eb42 0303 	adc.w	r3, r2, r3
 8007a66:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a68:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007a6c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8007a70:	f7f9 f89a 	bl	8000ba8 <__aeabi_uldivmod>
 8007a74:	4602      	mov	r2, r0
 8007a76:	460b      	mov	r3, r1
 8007a78:	4611      	mov	r1, r2
 8007a7a:	4b3c      	ldr	r3, [pc, #240]	@ (8007b6c <LL_USART_SetBaudRate+0x238>)
 8007a7c:	fba3 2301 	umull	r2, r3, r3, r1
 8007a80:	095b      	lsrs	r3, r3, #5
 8007a82:	2264      	movs	r2, #100	@ 0x64
 8007a84:	fb02 f303 	mul.w	r3, r2, r3
 8007a88:	1acb      	subs	r3, r1, r3
 8007a8a:	00db      	lsls	r3, r3, #3
 8007a8c:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007a90:	4b36      	ldr	r3, [pc, #216]	@ (8007b6c <LL_USART_SetBaudRate+0x238>)
 8007a92:	fba3 2302 	umull	r2, r3, r3, r2
 8007a96:	095b      	lsrs	r3, r3, #5
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	005b      	lsls	r3, r3, #1
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	4423      	add	r3, r4
 8007aa6:	b29c      	uxth	r4, r3
 8007aa8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007aac:	2200      	movs	r2, #0
 8007aae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007ab2:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007ab6:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8007aba:	4642      	mov	r2, r8
 8007abc:	464b      	mov	r3, r9
 8007abe:	1891      	adds	r1, r2, r2
 8007ac0:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007ac2:	415b      	adcs	r3, r3
 8007ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ac6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007aca:	4641      	mov	r1, r8
 8007acc:	1851      	adds	r1, r2, r1
 8007ace:	6339      	str	r1, [r7, #48]	@ 0x30
 8007ad0:	4649      	mov	r1, r9
 8007ad2:	414b      	adcs	r3, r1
 8007ad4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ad6:	f04f 0200 	mov.w	r2, #0
 8007ada:	f04f 0300 	mov.w	r3, #0
 8007ade:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007ae2:	4659      	mov	r1, fp
 8007ae4:	00cb      	lsls	r3, r1, #3
 8007ae6:	4651      	mov	r1, sl
 8007ae8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007aec:	4651      	mov	r1, sl
 8007aee:	00ca      	lsls	r2, r1, #3
 8007af0:	4610      	mov	r0, r2
 8007af2:	4619      	mov	r1, r3
 8007af4:	4603      	mov	r3, r0
 8007af6:	4642      	mov	r2, r8
 8007af8:	189b      	adds	r3, r3, r2
 8007afa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007afe:	464b      	mov	r3, r9
 8007b00:	460a      	mov	r2, r1
 8007b02:	eb42 0303 	adc.w	r3, r2, r3
 8007b06:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007b0a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b14:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8007b18:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	18db      	adds	r3, r3, r3
 8007b20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b22:	4613      	mov	r3, r2
 8007b24:	eb42 0303 	adc.w	r3, r2, r3
 8007b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007b2e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8007b32:	f7f9 f839 	bl	8000ba8 <__aeabi_uldivmod>
 8007b36:	4602      	mov	r2, r0
 8007b38:	460b      	mov	r3, r1
 8007b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8007b6c <LL_USART_SetBaudRate+0x238>)
 8007b3c:	fba3 1302 	umull	r1, r3, r3, r2
 8007b40:	095b      	lsrs	r3, r3, #5
 8007b42:	2164      	movs	r1, #100	@ 0x64
 8007b44:	fb01 f303 	mul.w	r3, r1, r3
 8007b48:	1ad3      	subs	r3, r2, r3
 8007b4a:	00db      	lsls	r3, r3, #3
 8007b4c:	3332      	adds	r3, #50	@ 0x32
 8007b4e:	4a07      	ldr	r2, [pc, #28]	@ (8007b6c <LL_USART_SetBaudRate+0x238>)
 8007b50:	fba2 2303 	umull	r2, r3, r2, r3
 8007b54:	095b      	lsrs	r3, r3, #5
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	f003 0307 	and.w	r3, r3, #7
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	4423      	add	r3, r4
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	461a      	mov	r2, r3
 8007b64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b68:	609a      	str	r2, [r3, #8]
}
 8007b6a:	e108      	b.n	8007d7e <LL_USART_SetBaudRate+0x44a>
 8007b6c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007b70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007b74:	2200      	movs	r2, #0
 8007b76:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007b7a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007b7e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8007b82:	4642      	mov	r2, r8
 8007b84:	464b      	mov	r3, r9
 8007b86:	1891      	adds	r1, r2, r2
 8007b88:	6239      	str	r1, [r7, #32]
 8007b8a:	415b      	adcs	r3, r3
 8007b8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b92:	4641      	mov	r1, r8
 8007b94:	1854      	adds	r4, r2, r1
 8007b96:	4649      	mov	r1, r9
 8007b98:	eb43 0501 	adc.w	r5, r3, r1
 8007b9c:	f04f 0200 	mov.w	r2, #0
 8007ba0:	f04f 0300 	mov.w	r3, #0
 8007ba4:	00eb      	lsls	r3, r5, #3
 8007ba6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007baa:	00e2      	lsls	r2, r4, #3
 8007bac:	4614      	mov	r4, r2
 8007bae:	461d      	mov	r5, r3
 8007bb0:	4643      	mov	r3, r8
 8007bb2:	18e3      	adds	r3, r4, r3
 8007bb4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007bb8:	464b      	mov	r3, r9
 8007bba:	eb45 0303 	adc.w	r3, r5, r3
 8007bbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007bc2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007bcc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8007bd0:	f04f 0200 	mov.w	r2, #0
 8007bd4:	f04f 0300 	mov.w	r3, #0
 8007bd8:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8007bdc:	4629      	mov	r1, r5
 8007bde:	008b      	lsls	r3, r1, #2
 8007be0:	4621      	mov	r1, r4
 8007be2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007be6:	4621      	mov	r1, r4
 8007be8:	008a      	lsls	r2, r1, #2
 8007bea:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8007bee:	f7f8 ffdb 	bl	8000ba8 <__aeabi_uldivmod>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	4b65      	ldr	r3, [pc, #404]	@ (8007d8c <LL_USART_SetBaudRate+0x458>)
 8007bf8:	fba3 2302 	umull	r2, r3, r3, r2
 8007bfc:	095b      	lsrs	r3, r3, #5
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	011b      	lsls	r3, r3, #4
 8007c02:	b29c      	uxth	r4, r3
 8007c04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c0e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007c12:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8007c16:	4642      	mov	r2, r8
 8007c18:	464b      	mov	r3, r9
 8007c1a:	1891      	adds	r1, r2, r2
 8007c1c:	61b9      	str	r1, [r7, #24]
 8007c1e:	415b      	adcs	r3, r3
 8007c20:	61fb      	str	r3, [r7, #28]
 8007c22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c26:	4641      	mov	r1, r8
 8007c28:	1851      	adds	r1, r2, r1
 8007c2a:	6139      	str	r1, [r7, #16]
 8007c2c:	4649      	mov	r1, r9
 8007c2e:	414b      	adcs	r3, r1
 8007c30:	617b      	str	r3, [r7, #20]
 8007c32:	f04f 0200 	mov.w	r2, #0
 8007c36:	f04f 0300 	mov.w	r3, #0
 8007c3a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c3e:	4659      	mov	r1, fp
 8007c40:	00cb      	lsls	r3, r1, #3
 8007c42:	4651      	mov	r1, sl
 8007c44:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c48:	4651      	mov	r1, sl
 8007c4a:	00ca      	lsls	r2, r1, #3
 8007c4c:	4610      	mov	r0, r2
 8007c4e:	4619      	mov	r1, r3
 8007c50:	4603      	mov	r3, r0
 8007c52:	4642      	mov	r2, r8
 8007c54:	189b      	adds	r3, r3, r2
 8007c56:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007c5a:	464b      	mov	r3, r9
 8007c5c:	460a      	mov	r2, r1
 8007c5e:	eb42 0303 	adc.w	r3, r2, r3
 8007c62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007c66:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c70:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8007c74:	f04f 0200 	mov.w	r2, #0
 8007c78:	f04f 0300 	mov.w	r3, #0
 8007c7c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8007c80:	4649      	mov	r1, r9
 8007c82:	008b      	lsls	r3, r1, #2
 8007c84:	4641      	mov	r1, r8
 8007c86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c8a:	4641      	mov	r1, r8
 8007c8c:	008a      	lsls	r2, r1, #2
 8007c8e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8007c92:	f7f8 ff89 	bl	8000ba8 <__aeabi_uldivmod>
 8007c96:	4602      	mov	r2, r0
 8007c98:	460b      	mov	r3, r1
 8007c9a:	4611      	mov	r1, r2
 8007c9c:	4b3b      	ldr	r3, [pc, #236]	@ (8007d8c <LL_USART_SetBaudRate+0x458>)
 8007c9e:	fba3 2301 	umull	r2, r3, r3, r1
 8007ca2:	095b      	lsrs	r3, r3, #5
 8007ca4:	2264      	movs	r2, #100	@ 0x64
 8007ca6:	fb02 f303 	mul.w	r3, r2, r3
 8007caa:	1acb      	subs	r3, r1, r3
 8007cac:	011b      	lsls	r3, r3, #4
 8007cae:	3332      	adds	r3, #50	@ 0x32
 8007cb0:	4a36      	ldr	r2, [pc, #216]	@ (8007d8c <LL_USART_SetBaudRate+0x458>)
 8007cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007cb6:	095b      	lsrs	r3, r3, #5
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	4423      	add	r3, r4
 8007cc2:	b29c      	uxth	r4, r3
 8007cc4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007cc8:	2200      	movs	r2, #0
 8007cca:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ccc:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007cce:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007cd2:	4642      	mov	r2, r8
 8007cd4:	464b      	mov	r3, r9
 8007cd6:	1891      	adds	r1, r2, r2
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	415b      	adcs	r3, r3
 8007cdc:	60fb      	str	r3, [r7, #12]
 8007cde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ce2:	4641      	mov	r1, r8
 8007ce4:	1851      	adds	r1, r2, r1
 8007ce6:	6039      	str	r1, [r7, #0]
 8007ce8:	4649      	mov	r1, r9
 8007cea:	414b      	adcs	r3, r1
 8007cec:	607b      	str	r3, [r7, #4]
 8007cee:	f04f 0200 	mov.w	r2, #0
 8007cf2:	f04f 0300 	mov.w	r3, #0
 8007cf6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007cfa:	4659      	mov	r1, fp
 8007cfc:	00cb      	lsls	r3, r1, #3
 8007cfe:	4651      	mov	r1, sl
 8007d00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d04:	4651      	mov	r1, sl
 8007d06:	00ca      	lsls	r2, r1, #3
 8007d08:	4610      	mov	r0, r2
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	4642      	mov	r2, r8
 8007d10:	189b      	adds	r3, r3, r2
 8007d12:	673b      	str	r3, [r7, #112]	@ 0x70
 8007d14:	464b      	mov	r3, r9
 8007d16:	460a      	mov	r2, r1
 8007d18:	eb42 0303 	adc.w	r3, r2, r3
 8007d1c:	677b      	str	r3, [r7, #116]	@ 0x74
 8007d1e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007d22:	2200      	movs	r2, #0
 8007d24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007d28:	f04f 0200 	mov.w	r2, #0
 8007d2c:	f04f 0300 	mov.w	r3, #0
 8007d30:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8007d34:	4649      	mov	r1, r9
 8007d36:	008b      	lsls	r3, r1, #2
 8007d38:	4641      	mov	r1, r8
 8007d3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d3e:	4641      	mov	r1, r8
 8007d40:	008a      	lsls	r2, r1, #2
 8007d42:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8007d46:	f7f8 ff2f 	bl	8000ba8 <__aeabi_uldivmod>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8007d8c <LL_USART_SetBaudRate+0x458>)
 8007d50:	fba3 1302 	umull	r1, r3, r3, r2
 8007d54:	095b      	lsrs	r3, r3, #5
 8007d56:	2164      	movs	r1, #100	@ 0x64
 8007d58:	fb01 f303 	mul.w	r3, r1, r3
 8007d5c:	1ad3      	subs	r3, r2, r3
 8007d5e:	011b      	lsls	r3, r3, #4
 8007d60:	3332      	adds	r3, #50	@ 0x32
 8007d62:	4a0a      	ldr	r2, [pc, #40]	@ (8007d8c <LL_USART_SetBaudRate+0x458>)
 8007d64:	fba2 2303 	umull	r2, r3, r2, r3
 8007d68:	095b      	lsrs	r3, r3, #5
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	f003 030f 	and.w	r3, r3, #15
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	4423      	add	r3, r4
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	461a      	mov	r2, r3
 8007d78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d7c:	609a      	str	r2, [r3, #8]
}
 8007d7e:	bf00      	nop
 8007d80:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007d84:	46bd      	mov	sp, r7
 8007d86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d8a:	bf00      	nop
 8007d8c:	51eb851f 	.word	0x51eb851f

08007d90 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b088      	sub	sp, #32
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f7ff fd8c 	bl	80078c0 <LL_USART_IsEnabled>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d15e      	bne.n	8007e6c <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8007db6:	f023 030c 	bic.w	r3, r3, #12
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	6851      	ldr	r1, [r2, #4]
 8007dbe:	683a      	ldr	r2, [r7, #0]
 8007dc0:	68d2      	ldr	r2, [r2, #12]
 8007dc2:	4311      	orrs	r1, r2
 8007dc4:	683a      	ldr	r2, [r7, #0]
 8007dc6:	6912      	ldr	r2, [r2, #16]
 8007dc8:	4311      	orrs	r1, r2
 8007dca:	683a      	ldr	r2, [r7, #0]
 8007dcc:	6992      	ldr	r2, [r2, #24]
 8007dce:	430a      	orrs	r2, r1
 8007dd0:	431a      	orrs	r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	4619      	mov	r1, r3
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f7ff fd83 	bl	80078e8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	695b      	ldr	r3, [r3, #20]
 8007de6:	4619      	mov	r1, r3
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f7ff fd90 	bl	800790e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8007dee:	f107 0308 	add.w	r3, r7, #8
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7ff f932 	bl	800705c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4a1f      	ldr	r2, [pc, #124]	@ (8007e78 <LL_USART_Init+0xe8>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d102      	bne.n	8007e06 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	61bb      	str	r3, [r7, #24]
 8007e04:	e021      	b.n	8007e4a <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4a1c      	ldr	r2, [pc, #112]	@ (8007e7c <LL_USART_Init+0xec>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d102      	bne.n	8007e14 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	61bb      	str	r3, [r7, #24]
 8007e12:	e01a      	b.n	8007e4a <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a1a      	ldr	r2, [pc, #104]	@ (8007e80 <LL_USART_Init+0xf0>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d102      	bne.n	8007e22 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	61bb      	str	r3, [r7, #24]
 8007e20:	e013      	b.n	8007e4a <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a17      	ldr	r2, [pc, #92]	@ (8007e84 <LL_USART_Init+0xf4>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d102      	bne.n	8007e30 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	61bb      	str	r3, [r7, #24]
 8007e2e:	e00c      	b.n	8007e4a <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	4a15      	ldr	r2, [pc, #84]	@ (8007e88 <LL_USART_Init+0xf8>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d102      	bne.n	8007e3e <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	61bb      	str	r3, [r7, #24]
 8007e3c:	e005      	b.n	8007e4a <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a12      	ldr	r2, [pc, #72]	@ (8007e8c <LL_USART_Init+0xfc>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d101      	bne.n	8007e4a <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00d      	beq.n	8007e6c <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d009      	beq.n	8007e6c <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8007e64:	69b9      	ldr	r1, [r7, #24]
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f7ff fd64 	bl	8007934 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8007e6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3720      	adds	r7, #32
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	40011000 	.word	0x40011000
 8007e7c:	40004400 	.word	0x40004400
 8007e80:	40004800 	.word	0x40004800
 8007e84:	40011400 	.word	0x40011400
 8007e88:	40004c00 	.word	0x40004c00
 8007e8c:	40005000 	.word	0x40005000

08007e90 <__cvt>:
 8007e90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e94:	ec57 6b10 	vmov	r6, r7, d0
 8007e98:	2f00      	cmp	r7, #0
 8007e9a:	460c      	mov	r4, r1
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	463b      	mov	r3, r7
 8007ea0:	bfbb      	ittet	lt
 8007ea2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007ea6:	461f      	movlt	r7, r3
 8007ea8:	2300      	movge	r3, #0
 8007eaa:	232d      	movlt	r3, #45	@ 0x2d
 8007eac:	700b      	strb	r3, [r1, #0]
 8007eae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007eb0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007eb4:	4691      	mov	r9, r2
 8007eb6:	f023 0820 	bic.w	r8, r3, #32
 8007eba:	bfbc      	itt	lt
 8007ebc:	4632      	movlt	r2, r6
 8007ebe:	4616      	movlt	r6, r2
 8007ec0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007ec4:	d005      	beq.n	8007ed2 <__cvt+0x42>
 8007ec6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007eca:	d100      	bne.n	8007ece <__cvt+0x3e>
 8007ecc:	3401      	adds	r4, #1
 8007ece:	2102      	movs	r1, #2
 8007ed0:	e000      	b.n	8007ed4 <__cvt+0x44>
 8007ed2:	2103      	movs	r1, #3
 8007ed4:	ab03      	add	r3, sp, #12
 8007ed6:	9301      	str	r3, [sp, #4]
 8007ed8:	ab02      	add	r3, sp, #8
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	ec47 6b10 	vmov	d0, r6, r7
 8007ee0:	4653      	mov	r3, sl
 8007ee2:	4622      	mov	r2, r4
 8007ee4:	f000 ff40 	bl	8008d68 <_dtoa_r>
 8007ee8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007eec:	4605      	mov	r5, r0
 8007eee:	d119      	bne.n	8007f24 <__cvt+0x94>
 8007ef0:	f019 0f01 	tst.w	r9, #1
 8007ef4:	d00e      	beq.n	8007f14 <__cvt+0x84>
 8007ef6:	eb00 0904 	add.w	r9, r0, r4
 8007efa:	2200      	movs	r2, #0
 8007efc:	2300      	movs	r3, #0
 8007efe:	4630      	mov	r0, r6
 8007f00:	4639      	mov	r1, r7
 8007f02:	f7f8 fde1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f06:	b108      	cbz	r0, 8007f0c <__cvt+0x7c>
 8007f08:	f8cd 900c 	str.w	r9, [sp, #12]
 8007f0c:	2230      	movs	r2, #48	@ 0x30
 8007f0e:	9b03      	ldr	r3, [sp, #12]
 8007f10:	454b      	cmp	r3, r9
 8007f12:	d31e      	bcc.n	8007f52 <__cvt+0xc2>
 8007f14:	9b03      	ldr	r3, [sp, #12]
 8007f16:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f18:	1b5b      	subs	r3, r3, r5
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	6013      	str	r3, [r2, #0]
 8007f1e:	b004      	add	sp, #16
 8007f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f24:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007f28:	eb00 0904 	add.w	r9, r0, r4
 8007f2c:	d1e5      	bne.n	8007efa <__cvt+0x6a>
 8007f2e:	7803      	ldrb	r3, [r0, #0]
 8007f30:	2b30      	cmp	r3, #48	@ 0x30
 8007f32:	d10a      	bne.n	8007f4a <__cvt+0xba>
 8007f34:	2200      	movs	r2, #0
 8007f36:	2300      	movs	r3, #0
 8007f38:	4630      	mov	r0, r6
 8007f3a:	4639      	mov	r1, r7
 8007f3c:	f7f8 fdc4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f40:	b918      	cbnz	r0, 8007f4a <__cvt+0xba>
 8007f42:	f1c4 0401 	rsb	r4, r4, #1
 8007f46:	f8ca 4000 	str.w	r4, [sl]
 8007f4a:	f8da 3000 	ldr.w	r3, [sl]
 8007f4e:	4499      	add	r9, r3
 8007f50:	e7d3      	b.n	8007efa <__cvt+0x6a>
 8007f52:	1c59      	adds	r1, r3, #1
 8007f54:	9103      	str	r1, [sp, #12]
 8007f56:	701a      	strb	r2, [r3, #0]
 8007f58:	e7d9      	b.n	8007f0e <__cvt+0x7e>

08007f5a <__exponent>:
 8007f5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f5c:	2900      	cmp	r1, #0
 8007f5e:	bfba      	itte	lt
 8007f60:	4249      	neglt	r1, r1
 8007f62:	232d      	movlt	r3, #45	@ 0x2d
 8007f64:	232b      	movge	r3, #43	@ 0x2b
 8007f66:	2909      	cmp	r1, #9
 8007f68:	7002      	strb	r2, [r0, #0]
 8007f6a:	7043      	strb	r3, [r0, #1]
 8007f6c:	dd29      	ble.n	8007fc2 <__exponent+0x68>
 8007f6e:	f10d 0307 	add.w	r3, sp, #7
 8007f72:	461d      	mov	r5, r3
 8007f74:	270a      	movs	r7, #10
 8007f76:	461a      	mov	r2, r3
 8007f78:	fbb1 f6f7 	udiv	r6, r1, r7
 8007f7c:	fb07 1416 	mls	r4, r7, r6, r1
 8007f80:	3430      	adds	r4, #48	@ 0x30
 8007f82:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007f86:	460c      	mov	r4, r1
 8007f88:	2c63      	cmp	r4, #99	@ 0x63
 8007f8a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007f8e:	4631      	mov	r1, r6
 8007f90:	dcf1      	bgt.n	8007f76 <__exponent+0x1c>
 8007f92:	3130      	adds	r1, #48	@ 0x30
 8007f94:	1e94      	subs	r4, r2, #2
 8007f96:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007f9a:	1c41      	adds	r1, r0, #1
 8007f9c:	4623      	mov	r3, r4
 8007f9e:	42ab      	cmp	r3, r5
 8007fa0:	d30a      	bcc.n	8007fb8 <__exponent+0x5e>
 8007fa2:	f10d 0309 	add.w	r3, sp, #9
 8007fa6:	1a9b      	subs	r3, r3, r2
 8007fa8:	42ac      	cmp	r4, r5
 8007faa:	bf88      	it	hi
 8007fac:	2300      	movhi	r3, #0
 8007fae:	3302      	adds	r3, #2
 8007fb0:	4403      	add	r3, r0
 8007fb2:	1a18      	subs	r0, r3, r0
 8007fb4:	b003      	add	sp, #12
 8007fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fb8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007fbc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007fc0:	e7ed      	b.n	8007f9e <__exponent+0x44>
 8007fc2:	2330      	movs	r3, #48	@ 0x30
 8007fc4:	3130      	adds	r1, #48	@ 0x30
 8007fc6:	7083      	strb	r3, [r0, #2]
 8007fc8:	70c1      	strb	r1, [r0, #3]
 8007fca:	1d03      	adds	r3, r0, #4
 8007fcc:	e7f1      	b.n	8007fb2 <__exponent+0x58>
	...

08007fd0 <_printf_float>:
 8007fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd4:	b08d      	sub	sp, #52	@ 0x34
 8007fd6:	460c      	mov	r4, r1
 8007fd8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007fdc:	4616      	mov	r6, r2
 8007fde:	461f      	mov	r7, r3
 8007fe0:	4605      	mov	r5, r0
 8007fe2:	f000 fdbf 	bl	8008b64 <_localeconv_r>
 8007fe6:	6803      	ldr	r3, [r0, #0]
 8007fe8:	9304      	str	r3, [sp, #16]
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7f8 f940 	bl	8000270 <strlen>
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ff4:	f8d8 3000 	ldr.w	r3, [r8]
 8007ff8:	9005      	str	r0, [sp, #20]
 8007ffa:	3307      	adds	r3, #7
 8007ffc:	f023 0307 	bic.w	r3, r3, #7
 8008000:	f103 0208 	add.w	r2, r3, #8
 8008004:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008008:	f8d4 b000 	ldr.w	fp, [r4]
 800800c:	f8c8 2000 	str.w	r2, [r8]
 8008010:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008014:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008018:	9307      	str	r3, [sp, #28]
 800801a:	f8cd 8018 	str.w	r8, [sp, #24]
 800801e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008022:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008026:	4b9c      	ldr	r3, [pc, #624]	@ (8008298 <_printf_float+0x2c8>)
 8008028:	f04f 32ff 	mov.w	r2, #4294967295
 800802c:	f7f8 fd7e 	bl	8000b2c <__aeabi_dcmpun>
 8008030:	bb70      	cbnz	r0, 8008090 <_printf_float+0xc0>
 8008032:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008036:	4b98      	ldr	r3, [pc, #608]	@ (8008298 <_printf_float+0x2c8>)
 8008038:	f04f 32ff 	mov.w	r2, #4294967295
 800803c:	f7f8 fd58 	bl	8000af0 <__aeabi_dcmple>
 8008040:	bb30      	cbnz	r0, 8008090 <_printf_float+0xc0>
 8008042:	2200      	movs	r2, #0
 8008044:	2300      	movs	r3, #0
 8008046:	4640      	mov	r0, r8
 8008048:	4649      	mov	r1, r9
 800804a:	f7f8 fd47 	bl	8000adc <__aeabi_dcmplt>
 800804e:	b110      	cbz	r0, 8008056 <_printf_float+0x86>
 8008050:	232d      	movs	r3, #45	@ 0x2d
 8008052:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008056:	4a91      	ldr	r2, [pc, #580]	@ (800829c <_printf_float+0x2cc>)
 8008058:	4b91      	ldr	r3, [pc, #580]	@ (80082a0 <_printf_float+0x2d0>)
 800805a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800805e:	bf94      	ite	ls
 8008060:	4690      	movls	r8, r2
 8008062:	4698      	movhi	r8, r3
 8008064:	2303      	movs	r3, #3
 8008066:	6123      	str	r3, [r4, #16]
 8008068:	f02b 0304 	bic.w	r3, fp, #4
 800806c:	6023      	str	r3, [r4, #0]
 800806e:	f04f 0900 	mov.w	r9, #0
 8008072:	9700      	str	r7, [sp, #0]
 8008074:	4633      	mov	r3, r6
 8008076:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008078:	4621      	mov	r1, r4
 800807a:	4628      	mov	r0, r5
 800807c:	f000 f9d2 	bl	8008424 <_printf_common>
 8008080:	3001      	adds	r0, #1
 8008082:	f040 808d 	bne.w	80081a0 <_printf_float+0x1d0>
 8008086:	f04f 30ff 	mov.w	r0, #4294967295
 800808a:	b00d      	add	sp, #52	@ 0x34
 800808c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008090:	4642      	mov	r2, r8
 8008092:	464b      	mov	r3, r9
 8008094:	4640      	mov	r0, r8
 8008096:	4649      	mov	r1, r9
 8008098:	f7f8 fd48 	bl	8000b2c <__aeabi_dcmpun>
 800809c:	b140      	cbz	r0, 80080b0 <_printf_float+0xe0>
 800809e:	464b      	mov	r3, r9
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	bfbc      	itt	lt
 80080a4:	232d      	movlt	r3, #45	@ 0x2d
 80080a6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80080aa:	4a7e      	ldr	r2, [pc, #504]	@ (80082a4 <_printf_float+0x2d4>)
 80080ac:	4b7e      	ldr	r3, [pc, #504]	@ (80082a8 <_printf_float+0x2d8>)
 80080ae:	e7d4      	b.n	800805a <_printf_float+0x8a>
 80080b0:	6863      	ldr	r3, [r4, #4]
 80080b2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80080b6:	9206      	str	r2, [sp, #24]
 80080b8:	1c5a      	adds	r2, r3, #1
 80080ba:	d13b      	bne.n	8008134 <_printf_float+0x164>
 80080bc:	2306      	movs	r3, #6
 80080be:	6063      	str	r3, [r4, #4]
 80080c0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80080c4:	2300      	movs	r3, #0
 80080c6:	6022      	str	r2, [r4, #0]
 80080c8:	9303      	str	r3, [sp, #12]
 80080ca:	ab0a      	add	r3, sp, #40	@ 0x28
 80080cc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80080d0:	ab09      	add	r3, sp, #36	@ 0x24
 80080d2:	9300      	str	r3, [sp, #0]
 80080d4:	6861      	ldr	r1, [r4, #4]
 80080d6:	ec49 8b10 	vmov	d0, r8, r9
 80080da:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80080de:	4628      	mov	r0, r5
 80080e0:	f7ff fed6 	bl	8007e90 <__cvt>
 80080e4:	9b06      	ldr	r3, [sp, #24]
 80080e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80080e8:	2b47      	cmp	r3, #71	@ 0x47
 80080ea:	4680      	mov	r8, r0
 80080ec:	d129      	bne.n	8008142 <_printf_float+0x172>
 80080ee:	1cc8      	adds	r0, r1, #3
 80080f0:	db02      	blt.n	80080f8 <_printf_float+0x128>
 80080f2:	6863      	ldr	r3, [r4, #4]
 80080f4:	4299      	cmp	r1, r3
 80080f6:	dd41      	ble.n	800817c <_printf_float+0x1ac>
 80080f8:	f1aa 0a02 	sub.w	sl, sl, #2
 80080fc:	fa5f fa8a 	uxtb.w	sl, sl
 8008100:	3901      	subs	r1, #1
 8008102:	4652      	mov	r2, sl
 8008104:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008108:	9109      	str	r1, [sp, #36]	@ 0x24
 800810a:	f7ff ff26 	bl	8007f5a <__exponent>
 800810e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008110:	1813      	adds	r3, r2, r0
 8008112:	2a01      	cmp	r2, #1
 8008114:	4681      	mov	r9, r0
 8008116:	6123      	str	r3, [r4, #16]
 8008118:	dc02      	bgt.n	8008120 <_printf_float+0x150>
 800811a:	6822      	ldr	r2, [r4, #0]
 800811c:	07d2      	lsls	r2, r2, #31
 800811e:	d501      	bpl.n	8008124 <_printf_float+0x154>
 8008120:	3301      	adds	r3, #1
 8008122:	6123      	str	r3, [r4, #16]
 8008124:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008128:	2b00      	cmp	r3, #0
 800812a:	d0a2      	beq.n	8008072 <_printf_float+0xa2>
 800812c:	232d      	movs	r3, #45	@ 0x2d
 800812e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008132:	e79e      	b.n	8008072 <_printf_float+0xa2>
 8008134:	9a06      	ldr	r2, [sp, #24]
 8008136:	2a47      	cmp	r2, #71	@ 0x47
 8008138:	d1c2      	bne.n	80080c0 <_printf_float+0xf0>
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1c0      	bne.n	80080c0 <_printf_float+0xf0>
 800813e:	2301      	movs	r3, #1
 8008140:	e7bd      	b.n	80080be <_printf_float+0xee>
 8008142:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008146:	d9db      	bls.n	8008100 <_printf_float+0x130>
 8008148:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800814c:	d118      	bne.n	8008180 <_printf_float+0x1b0>
 800814e:	2900      	cmp	r1, #0
 8008150:	6863      	ldr	r3, [r4, #4]
 8008152:	dd0b      	ble.n	800816c <_printf_float+0x19c>
 8008154:	6121      	str	r1, [r4, #16]
 8008156:	b913      	cbnz	r3, 800815e <_printf_float+0x18e>
 8008158:	6822      	ldr	r2, [r4, #0]
 800815a:	07d0      	lsls	r0, r2, #31
 800815c:	d502      	bpl.n	8008164 <_printf_float+0x194>
 800815e:	3301      	adds	r3, #1
 8008160:	440b      	add	r3, r1
 8008162:	6123      	str	r3, [r4, #16]
 8008164:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008166:	f04f 0900 	mov.w	r9, #0
 800816a:	e7db      	b.n	8008124 <_printf_float+0x154>
 800816c:	b913      	cbnz	r3, 8008174 <_printf_float+0x1a4>
 800816e:	6822      	ldr	r2, [r4, #0]
 8008170:	07d2      	lsls	r2, r2, #31
 8008172:	d501      	bpl.n	8008178 <_printf_float+0x1a8>
 8008174:	3302      	adds	r3, #2
 8008176:	e7f4      	b.n	8008162 <_printf_float+0x192>
 8008178:	2301      	movs	r3, #1
 800817a:	e7f2      	b.n	8008162 <_printf_float+0x192>
 800817c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008180:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008182:	4299      	cmp	r1, r3
 8008184:	db05      	blt.n	8008192 <_printf_float+0x1c2>
 8008186:	6823      	ldr	r3, [r4, #0]
 8008188:	6121      	str	r1, [r4, #16]
 800818a:	07d8      	lsls	r0, r3, #31
 800818c:	d5ea      	bpl.n	8008164 <_printf_float+0x194>
 800818e:	1c4b      	adds	r3, r1, #1
 8008190:	e7e7      	b.n	8008162 <_printf_float+0x192>
 8008192:	2900      	cmp	r1, #0
 8008194:	bfd4      	ite	le
 8008196:	f1c1 0202 	rsble	r2, r1, #2
 800819a:	2201      	movgt	r2, #1
 800819c:	4413      	add	r3, r2
 800819e:	e7e0      	b.n	8008162 <_printf_float+0x192>
 80081a0:	6823      	ldr	r3, [r4, #0]
 80081a2:	055a      	lsls	r2, r3, #21
 80081a4:	d407      	bmi.n	80081b6 <_printf_float+0x1e6>
 80081a6:	6923      	ldr	r3, [r4, #16]
 80081a8:	4642      	mov	r2, r8
 80081aa:	4631      	mov	r1, r6
 80081ac:	4628      	mov	r0, r5
 80081ae:	47b8      	blx	r7
 80081b0:	3001      	adds	r0, #1
 80081b2:	d12b      	bne.n	800820c <_printf_float+0x23c>
 80081b4:	e767      	b.n	8008086 <_printf_float+0xb6>
 80081b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80081ba:	f240 80dd 	bls.w	8008378 <_printf_float+0x3a8>
 80081be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80081c2:	2200      	movs	r2, #0
 80081c4:	2300      	movs	r3, #0
 80081c6:	f7f8 fc7f 	bl	8000ac8 <__aeabi_dcmpeq>
 80081ca:	2800      	cmp	r0, #0
 80081cc:	d033      	beq.n	8008236 <_printf_float+0x266>
 80081ce:	4a37      	ldr	r2, [pc, #220]	@ (80082ac <_printf_float+0x2dc>)
 80081d0:	2301      	movs	r3, #1
 80081d2:	4631      	mov	r1, r6
 80081d4:	4628      	mov	r0, r5
 80081d6:	47b8      	blx	r7
 80081d8:	3001      	adds	r0, #1
 80081da:	f43f af54 	beq.w	8008086 <_printf_float+0xb6>
 80081de:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80081e2:	4543      	cmp	r3, r8
 80081e4:	db02      	blt.n	80081ec <_printf_float+0x21c>
 80081e6:	6823      	ldr	r3, [r4, #0]
 80081e8:	07d8      	lsls	r0, r3, #31
 80081ea:	d50f      	bpl.n	800820c <_printf_float+0x23c>
 80081ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081f0:	4631      	mov	r1, r6
 80081f2:	4628      	mov	r0, r5
 80081f4:	47b8      	blx	r7
 80081f6:	3001      	adds	r0, #1
 80081f8:	f43f af45 	beq.w	8008086 <_printf_float+0xb6>
 80081fc:	f04f 0900 	mov.w	r9, #0
 8008200:	f108 38ff 	add.w	r8, r8, #4294967295
 8008204:	f104 0a1a 	add.w	sl, r4, #26
 8008208:	45c8      	cmp	r8, r9
 800820a:	dc09      	bgt.n	8008220 <_printf_float+0x250>
 800820c:	6823      	ldr	r3, [r4, #0]
 800820e:	079b      	lsls	r3, r3, #30
 8008210:	f100 8103 	bmi.w	800841a <_printf_float+0x44a>
 8008214:	68e0      	ldr	r0, [r4, #12]
 8008216:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008218:	4298      	cmp	r0, r3
 800821a:	bfb8      	it	lt
 800821c:	4618      	movlt	r0, r3
 800821e:	e734      	b.n	800808a <_printf_float+0xba>
 8008220:	2301      	movs	r3, #1
 8008222:	4652      	mov	r2, sl
 8008224:	4631      	mov	r1, r6
 8008226:	4628      	mov	r0, r5
 8008228:	47b8      	blx	r7
 800822a:	3001      	adds	r0, #1
 800822c:	f43f af2b 	beq.w	8008086 <_printf_float+0xb6>
 8008230:	f109 0901 	add.w	r9, r9, #1
 8008234:	e7e8      	b.n	8008208 <_printf_float+0x238>
 8008236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008238:	2b00      	cmp	r3, #0
 800823a:	dc39      	bgt.n	80082b0 <_printf_float+0x2e0>
 800823c:	4a1b      	ldr	r2, [pc, #108]	@ (80082ac <_printf_float+0x2dc>)
 800823e:	2301      	movs	r3, #1
 8008240:	4631      	mov	r1, r6
 8008242:	4628      	mov	r0, r5
 8008244:	47b8      	blx	r7
 8008246:	3001      	adds	r0, #1
 8008248:	f43f af1d 	beq.w	8008086 <_printf_float+0xb6>
 800824c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008250:	ea59 0303 	orrs.w	r3, r9, r3
 8008254:	d102      	bne.n	800825c <_printf_float+0x28c>
 8008256:	6823      	ldr	r3, [r4, #0]
 8008258:	07d9      	lsls	r1, r3, #31
 800825a:	d5d7      	bpl.n	800820c <_printf_float+0x23c>
 800825c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008260:	4631      	mov	r1, r6
 8008262:	4628      	mov	r0, r5
 8008264:	47b8      	blx	r7
 8008266:	3001      	adds	r0, #1
 8008268:	f43f af0d 	beq.w	8008086 <_printf_float+0xb6>
 800826c:	f04f 0a00 	mov.w	sl, #0
 8008270:	f104 0b1a 	add.w	fp, r4, #26
 8008274:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008276:	425b      	negs	r3, r3
 8008278:	4553      	cmp	r3, sl
 800827a:	dc01      	bgt.n	8008280 <_printf_float+0x2b0>
 800827c:	464b      	mov	r3, r9
 800827e:	e793      	b.n	80081a8 <_printf_float+0x1d8>
 8008280:	2301      	movs	r3, #1
 8008282:	465a      	mov	r2, fp
 8008284:	4631      	mov	r1, r6
 8008286:	4628      	mov	r0, r5
 8008288:	47b8      	blx	r7
 800828a:	3001      	adds	r0, #1
 800828c:	f43f aefb 	beq.w	8008086 <_printf_float+0xb6>
 8008290:	f10a 0a01 	add.w	sl, sl, #1
 8008294:	e7ee      	b.n	8008274 <_printf_float+0x2a4>
 8008296:	bf00      	nop
 8008298:	7fefffff 	.word	0x7fefffff
 800829c:	0800b880 	.word	0x0800b880
 80082a0:	0800b884 	.word	0x0800b884
 80082a4:	0800b888 	.word	0x0800b888
 80082a8:	0800b88c 	.word	0x0800b88c
 80082ac:	0800b890 	.word	0x0800b890
 80082b0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80082b2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80082b6:	4553      	cmp	r3, sl
 80082b8:	bfa8      	it	ge
 80082ba:	4653      	movge	r3, sl
 80082bc:	2b00      	cmp	r3, #0
 80082be:	4699      	mov	r9, r3
 80082c0:	dc36      	bgt.n	8008330 <_printf_float+0x360>
 80082c2:	f04f 0b00 	mov.w	fp, #0
 80082c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80082ca:	f104 021a 	add.w	r2, r4, #26
 80082ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80082d0:	9306      	str	r3, [sp, #24]
 80082d2:	eba3 0309 	sub.w	r3, r3, r9
 80082d6:	455b      	cmp	r3, fp
 80082d8:	dc31      	bgt.n	800833e <_printf_float+0x36e>
 80082da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082dc:	459a      	cmp	sl, r3
 80082de:	dc3a      	bgt.n	8008356 <_printf_float+0x386>
 80082e0:	6823      	ldr	r3, [r4, #0]
 80082e2:	07da      	lsls	r2, r3, #31
 80082e4:	d437      	bmi.n	8008356 <_printf_float+0x386>
 80082e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082e8:	ebaa 0903 	sub.w	r9, sl, r3
 80082ec:	9b06      	ldr	r3, [sp, #24]
 80082ee:	ebaa 0303 	sub.w	r3, sl, r3
 80082f2:	4599      	cmp	r9, r3
 80082f4:	bfa8      	it	ge
 80082f6:	4699      	movge	r9, r3
 80082f8:	f1b9 0f00 	cmp.w	r9, #0
 80082fc:	dc33      	bgt.n	8008366 <_printf_float+0x396>
 80082fe:	f04f 0800 	mov.w	r8, #0
 8008302:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008306:	f104 0b1a 	add.w	fp, r4, #26
 800830a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800830c:	ebaa 0303 	sub.w	r3, sl, r3
 8008310:	eba3 0309 	sub.w	r3, r3, r9
 8008314:	4543      	cmp	r3, r8
 8008316:	f77f af79 	ble.w	800820c <_printf_float+0x23c>
 800831a:	2301      	movs	r3, #1
 800831c:	465a      	mov	r2, fp
 800831e:	4631      	mov	r1, r6
 8008320:	4628      	mov	r0, r5
 8008322:	47b8      	blx	r7
 8008324:	3001      	adds	r0, #1
 8008326:	f43f aeae 	beq.w	8008086 <_printf_float+0xb6>
 800832a:	f108 0801 	add.w	r8, r8, #1
 800832e:	e7ec      	b.n	800830a <_printf_float+0x33a>
 8008330:	4642      	mov	r2, r8
 8008332:	4631      	mov	r1, r6
 8008334:	4628      	mov	r0, r5
 8008336:	47b8      	blx	r7
 8008338:	3001      	adds	r0, #1
 800833a:	d1c2      	bne.n	80082c2 <_printf_float+0x2f2>
 800833c:	e6a3      	b.n	8008086 <_printf_float+0xb6>
 800833e:	2301      	movs	r3, #1
 8008340:	4631      	mov	r1, r6
 8008342:	4628      	mov	r0, r5
 8008344:	9206      	str	r2, [sp, #24]
 8008346:	47b8      	blx	r7
 8008348:	3001      	adds	r0, #1
 800834a:	f43f ae9c 	beq.w	8008086 <_printf_float+0xb6>
 800834e:	9a06      	ldr	r2, [sp, #24]
 8008350:	f10b 0b01 	add.w	fp, fp, #1
 8008354:	e7bb      	b.n	80082ce <_printf_float+0x2fe>
 8008356:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800835a:	4631      	mov	r1, r6
 800835c:	4628      	mov	r0, r5
 800835e:	47b8      	blx	r7
 8008360:	3001      	adds	r0, #1
 8008362:	d1c0      	bne.n	80082e6 <_printf_float+0x316>
 8008364:	e68f      	b.n	8008086 <_printf_float+0xb6>
 8008366:	9a06      	ldr	r2, [sp, #24]
 8008368:	464b      	mov	r3, r9
 800836a:	4442      	add	r2, r8
 800836c:	4631      	mov	r1, r6
 800836e:	4628      	mov	r0, r5
 8008370:	47b8      	blx	r7
 8008372:	3001      	adds	r0, #1
 8008374:	d1c3      	bne.n	80082fe <_printf_float+0x32e>
 8008376:	e686      	b.n	8008086 <_printf_float+0xb6>
 8008378:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800837c:	f1ba 0f01 	cmp.w	sl, #1
 8008380:	dc01      	bgt.n	8008386 <_printf_float+0x3b6>
 8008382:	07db      	lsls	r3, r3, #31
 8008384:	d536      	bpl.n	80083f4 <_printf_float+0x424>
 8008386:	2301      	movs	r3, #1
 8008388:	4642      	mov	r2, r8
 800838a:	4631      	mov	r1, r6
 800838c:	4628      	mov	r0, r5
 800838e:	47b8      	blx	r7
 8008390:	3001      	adds	r0, #1
 8008392:	f43f ae78 	beq.w	8008086 <_printf_float+0xb6>
 8008396:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800839a:	4631      	mov	r1, r6
 800839c:	4628      	mov	r0, r5
 800839e:	47b8      	blx	r7
 80083a0:	3001      	adds	r0, #1
 80083a2:	f43f ae70 	beq.w	8008086 <_printf_float+0xb6>
 80083a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80083aa:	2200      	movs	r2, #0
 80083ac:	2300      	movs	r3, #0
 80083ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80083b2:	f7f8 fb89 	bl	8000ac8 <__aeabi_dcmpeq>
 80083b6:	b9c0      	cbnz	r0, 80083ea <_printf_float+0x41a>
 80083b8:	4653      	mov	r3, sl
 80083ba:	f108 0201 	add.w	r2, r8, #1
 80083be:	4631      	mov	r1, r6
 80083c0:	4628      	mov	r0, r5
 80083c2:	47b8      	blx	r7
 80083c4:	3001      	adds	r0, #1
 80083c6:	d10c      	bne.n	80083e2 <_printf_float+0x412>
 80083c8:	e65d      	b.n	8008086 <_printf_float+0xb6>
 80083ca:	2301      	movs	r3, #1
 80083cc:	465a      	mov	r2, fp
 80083ce:	4631      	mov	r1, r6
 80083d0:	4628      	mov	r0, r5
 80083d2:	47b8      	blx	r7
 80083d4:	3001      	adds	r0, #1
 80083d6:	f43f ae56 	beq.w	8008086 <_printf_float+0xb6>
 80083da:	f108 0801 	add.w	r8, r8, #1
 80083de:	45d0      	cmp	r8, sl
 80083e0:	dbf3      	blt.n	80083ca <_printf_float+0x3fa>
 80083e2:	464b      	mov	r3, r9
 80083e4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80083e8:	e6df      	b.n	80081aa <_printf_float+0x1da>
 80083ea:	f04f 0800 	mov.w	r8, #0
 80083ee:	f104 0b1a 	add.w	fp, r4, #26
 80083f2:	e7f4      	b.n	80083de <_printf_float+0x40e>
 80083f4:	2301      	movs	r3, #1
 80083f6:	4642      	mov	r2, r8
 80083f8:	e7e1      	b.n	80083be <_printf_float+0x3ee>
 80083fa:	2301      	movs	r3, #1
 80083fc:	464a      	mov	r2, r9
 80083fe:	4631      	mov	r1, r6
 8008400:	4628      	mov	r0, r5
 8008402:	47b8      	blx	r7
 8008404:	3001      	adds	r0, #1
 8008406:	f43f ae3e 	beq.w	8008086 <_printf_float+0xb6>
 800840a:	f108 0801 	add.w	r8, r8, #1
 800840e:	68e3      	ldr	r3, [r4, #12]
 8008410:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008412:	1a5b      	subs	r3, r3, r1
 8008414:	4543      	cmp	r3, r8
 8008416:	dcf0      	bgt.n	80083fa <_printf_float+0x42a>
 8008418:	e6fc      	b.n	8008214 <_printf_float+0x244>
 800841a:	f04f 0800 	mov.w	r8, #0
 800841e:	f104 0919 	add.w	r9, r4, #25
 8008422:	e7f4      	b.n	800840e <_printf_float+0x43e>

08008424 <_printf_common>:
 8008424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008428:	4616      	mov	r6, r2
 800842a:	4698      	mov	r8, r3
 800842c:	688a      	ldr	r2, [r1, #8]
 800842e:	690b      	ldr	r3, [r1, #16]
 8008430:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008434:	4293      	cmp	r3, r2
 8008436:	bfb8      	it	lt
 8008438:	4613      	movlt	r3, r2
 800843a:	6033      	str	r3, [r6, #0]
 800843c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008440:	4607      	mov	r7, r0
 8008442:	460c      	mov	r4, r1
 8008444:	b10a      	cbz	r2, 800844a <_printf_common+0x26>
 8008446:	3301      	adds	r3, #1
 8008448:	6033      	str	r3, [r6, #0]
 800844a:	6823      	ldr	r3, [r4, #0]
 800844c:	0699      	lsls	r1, r3, #26
 800844e:	bf42      	ittt	mi
 8008450:	6833      	ldrmi	r3, [r6, #0]
 8008452:	3302      	addmi	r3, #2
 8008454:	6033      	strmi	r3, [r6, #0]
 8008456:	6825      	ldr	r5, [r4, #0]
 8008458:	f015 0506 	ands.w	r5, r5, #6
 800845c:	d106      	bne.n	800846c <_printf_common+0x48>
 800845e:	f104 0a19 	add.w	sl, r4, #25
 8008462:	68e3      	ldr	r3, [r4, #12]
 8008464:	6832      	ldr	r2, [r6, #0]
 8008466:	1a9b      	subs	r3, r3, r2
 8008468:	42ab      	cmp	r3, r5
 800846a:	dc26      	bgt.n	80084ba <_printf_common+0x96>
 800846c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008470:	6822      	ldr	r2, [r4, #0]
 8008472:	3b00      	subs	r3, #0
 8008474:	bf18      	it	ne
 8008476:	2301      	movne	r3, #1
 8008478:	0692      	lsls	r2, r2, #26
 800847a:	d42b      	bmi.n	80084d4 <_printf_common+0xb0>
 800847c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008480:	4641      	mov	r1, r8
 8008482:	4638      	mov	r0, r7
 8008484:	47c8      	blx	r9
 8008486:	3001      	adds	r0, #1
 8008488:	d01e      	beq.n	80084c8 <_printf_common+0xa4>
 800848a:	6823      	ldr	r3, [r4, #0]
 800848c:	6922      	ldr	r2, [r4, #16]
 800848e:	f003 0306 	and.w	r3, r3, #6
 8008492:	2b04      	cmp	r3, #4
 8008494:	bf02      	ittt	eq
 8008496:	68e5      	ldreq	r5, [r4, #12]
 8008498:	6833      	ldreq	r3, [r6, #0]
 800849a:	1aed      	subeq	r5, r5, r3
 800849c:	68a3      	ldr	r3, [r4, #8]
 800849e:	bf0c      	ite	eq
 80084a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084a4:	2500      	movne	r5, #0
 80084a6:	4293      	cmp	r3, r2
 80084a8:	bfc4      	itt	gt
 80084aa:	1a9b      	subgt	r3, r3, r2
 80084ac:	18ed      	addgt	r5, r5, r3
 80084ae:	2600      	movs	r6, #0
 80084b0:	341a      	adds	r4, #26
 80084b2:	42b5      	cmp	r5, r6
 80084b4:	d11a      	bne.n	80084ec <_printf_common+0xc8>
 80084b6:	2000      	movs	r0, #0
 80084b8:	e008      	b.n	80084cc <_printf_common+0xa8>
 80084ba:	2301      	movs	r3, #1
 80084bc:	4652      	mov	r2, sl
 80084be:	4641      	mov	r1, r8
 80084c0:	4638      	mov	r0, r7
 80084c2:	47c8      	blx	r9
 80084c4:	3001      	adds	r0, #1
 80084c6:	d103      	bne.n	80084d0 <_printf_common+0xac>
 80084c8:	f04f 30ff 	mov.w	r0, #4294967295
 80084cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084d0:	3501      	adds	r5, #1
 80084d2:	e7c6      	b.n	8008462 <_printf_common+0x3e>
 80084d4:	18e1      	adds	r1, r4, r3
 80084d6:	1c5a      	adds	r2, r3, #1
 80084d8:	2030      	movs	r0, #48	@ 0x30
 80084da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80084de:	4422      	add	r2, r4
 80084e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80084e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80084e8:	3302      	adds	r3, #2
 80084ea:	e7c7      	b.n	800847c <_printf_common+0x58>
 80084ec:	2301      	movs	r3, #1
 80084ee:	4622      	mov	r2, r4
 80084f0:	4641      	mov	r1, r8
 80084f2:	4638      	mov	r0, r7
 80084f4:	47c8      	blx	r9
 80084f6:	3001      	adds	r0, #1
 80084f8:	d0e6      	beq.n	80084c8 <_printf_common+0xa4>
 80084fa:	3601      	adds	r6, #1
 80084fc:	e7d9      	b.n	80084b2 <_printf_common+0x8e>
	...

08008500 <_printf_i>:
 8008500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008504:	7e0f      	ldrb	r7, [r1, #24]
 8008506:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008508:	2f78      	cmp	r7, #120	@ 0x78
 800850a:	4691      	mov	r9, r2
 800850c:	4680      	mov	r8, r0
 800850e:	460c      	mov	r4, r1
 8008510:	469a      	mov	sl, r3
 8008512:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008516:	d807      	bhi.n	8008528 <_printf_i+0x28>
 8008518:	2f62      	cmp	r7, #98	@ 0x62
 800851a:	d80a      	bhi.n	8008532 <_printf_i+0x32>
 800851c:	2f00      	cmp	r7, #0
 800851e:	f000 80d2 	beq.w	80086c6 <_printf_i+0x1c6>
 8008522:	2f58      	cmp	r7, #88	@ 0x58
 8008524:	f000 80b9 	beq.w	800869a <_printf_i+0x19a>
 8008528:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800852c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008530:	e03a      	b.n	80085a8 <_printf_i+0xa8>
 8008532:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008536:	2b15      	cmp	r3, #21
 8008538:	d8f6      	bhi.n	8008528 <_printf_i+0x28>
 800853a:	a101      	add	r1, pc, #4	@ (adr r1, 8008540 <_printf_i+0x40>)
 800853c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008540:	08008599 	.word	0x08008599
 8008544:	080085ad 	.word	0x080085ad
 8008548:	08008529 	.word	0x08008529
 800854c:	08008529 	.word	0x08008529
 8008550:	08008529 	.word	0x08008529
 8008554:	08008529 	.word	0x08008529
 8008558:	080085ad 	.word	0x080085ad
 800855c:	08008529 	.word	0x08008529
 8008560:	08008529 	.word	0x08008529
 8008564:	08008529 	.word	0x08008529
 8008568:	08008529 	.word	0x08008529
 800856c:	080086ad 	.word	0x080086ad
 8008570:	080085d7 	.word	0x080085d7
 8008574:	08008667 	.word	0x08008667
 8008578:	08008529 	.word	0x08008529
 800857c:	08008529 	.word	0x08008529
 8008580:	080086cf 	.word	0x080086cf
 8008584:	08008529 	.word	0x08008529
 8008588:	080085d7 	.word	0x080085d7
 800858c:	08008529 	.word	0x08008529
 8008590:	08008529 	.word	0x08008529
 8008594:	0800866f 	.word	0x0800866f
 8008598:	6833      	ldr	r3, [r6, #0]
 800859a:	1d1a      	adds	r2, r3, #4
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	6032      	str	r2, [r6, #0]
 80085a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80085a8:	2301      	movs	r3, #1
 80085aa:	e09d      	b.n	80086e8 <_printf_i+0x1e8>
 80085ac:	6833      	ldr	r3, [r6, #0]
 80085ae:	6820      	ldr	r0, [r4, #0]
 80085b0:	1d19      	adds	r1, r3, #4
 80085b2:	6031      	str	r1, [r6, #0]
 80085b4:	0606      	lsls	r6, r0, #24
 80085b6:	d501      	bpl.n	80085bc <_printf_i+0xbc>
 80085b8:	681d      	ldr	r5, [r3, #0]
 80085ba:	e003      	b.n	80085c4 <_printf_i+0xc4>
 80085bc:	0645      	lsls	r5, r0, #25
 80085be:	d5fb      	bpl.n	80085b8 <_printf_i+0xb8>
 80085c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80085c4:	2d00      	cmp	r5, #0
 80085c6:	da03      	bge.n	80085d0 <_printf_i+0xd0>
 80085c8:	232d      	movs	r3, #45	@ 0x2d
 80085ca:	426d      	negs	r5, r5
 80085cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085d0:	4859      	ldr	r0, [pc, #356]	@ (8008738 <_printf_i+0x238>)
 80085d2:	230a      	movs	r3, #10
 80085d4:	e011      	b.n	80085fa <_printf_i+0xfa>
 80085d6:	6821      	ldr	r1, [r4, #0]
 80085d8:	6833      	ldr	r3, [r6, #0]
 80085da:	0608      	lsls	r0, r1, #24
 80085dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80085e0:	d402      	bmi.n	80085e8 <_printf_i+0xe8>
 80085e2:	0649      	lsls	r1, r1, #25
 80085e4:	bf48      	it	mi
 80085e6:	b2ad      	uxthmi	r5, r5
 80085e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80085ea:	4853      	ldr	r0, [pc, #332]	@ (8008738 <_printf_i+0x238>)
 80085ec:	6033      	str	r3, [r6, #0]
 80085ee:	bf14      	ite	ne
 80085f0:	230a      	movne	r3, #10
 80085f2:	2308      	moveq	r3, #8
 80085f4:	2100      	movs	r1, #0
 80085f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80085fa:	6866      	ldr	r6, [r4, #4]
 80085fc:	60a6      	str	r6, [r4, #8]
 80085fe:	2e00      	cmp	r6, #0
 8008600:	bfa2      	ittt	ge
 8008602:	6821      	ldrge	r1, [r4, #0]
 8008604:	f021 0104 	bicge.w	r1, r1, #4
 8008608:	6021      	strge	r1, [r4, #0]
 800860a:	b90d      	cbnz	r5, 8008610 <_printf_i+0x110>
 800860c:	2e00      	cmp	r6, #0
 800860e:	d04b      	beq.n	80086a8 <_printf_i+0x1a8>
 8008610:	4616      	mov	r6, r2
 8008612:	fbb5 f1f3 	udiv	r1, r5, r3
 8008616:	fb03 5711 	mls	r7, r3, r1, r5
 800861a:	5dc7      	ldrb	r7, [r0, r7]
 800861c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008620:	462f      	mov	r7, r5
 8008622:	42bb      	cmp	r3, r7
 8008624:	460d      	mov	r5, r1
 8008626:	d9f4      	bls.n	8008612 <_printf_i+0x112>
 8008628:	2b08      	cmp	r3, #8
 800862a:	d10b      	bne.n	8008644 <_printf_i+0x144>
 800862c:	6823      	ldr	r3, [r4, #0]
 800862e:	07df      	lsls	r7, r3, #31
 8008630:	d508      	bpl.n	8008644 <_printf_i+0x144>
 8008632:	6923      	ldr	r3, [r4, #16]
 8008634:	6861      	ldr	r1, [r4, #4]
 8008636:	4299      	cmp	r1, r3
 8008638:	bfde      	ittt	le
 800863a:	2330      	movle	r3, #48	@ 0x30
 800863c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008640:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008644:	1b92      	subs	r2, r2, r6
 8008646:	6122      	str	r2, [r4, #16]
 8008648:	f8cd a000 	str.w	sl, [sp]
 800864c:	464b      	mov	r3, r9
 800864e:	aa03      	add	r2, sp, #12
 8008650:	4621      	mov	r1, r4
 8008652:	4640      	mov	r0, r8
 8008654:	f7ff fee6 	bl	8008424 <_printf_common>
 8008658:	3001      	adds	r0, #1
 800865a:	d14a      	bne.n	80086f2 <_printf_i+0x1f2>
 800865c:	f04f 30ff 	mov.w	r0, #4294967295
 8008660:	b004      	add	sp, #16
 8008662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008666:	6823      	ldr	r3, [r4, #0]
 8008668:	f043 0320 	orr.w	r3, r3, #32
 800866c:	6023      	str	r3, [r4, #0]
 800866e:	4833      	ldr	r0, [pc, #204]	@ (800873c <_printf_i+0x23c>)
 8008670:	2778      	movs	r7, #120	@ 0x78
 8008672:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008676:	6823      	ldr	r3, [r4, #0]
 8008678:	6831      	ldr	r1, [r6, #0]
 800867a:	061f      	lsls	r7, r3, #24
 800867c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008680:	d402      	bmi.n	8008688 <_printf_i+0x188>
 8008682:	065f      	lsls	r7, r3, #25
 8008684:	bf48      	it	mi
 8008686:	b2ad      	uxthmi	r5, r5
 8008688:	6031      	str	r1, [r6, #0]
 800868a:	07d9      	lsls	r1, r3, #31
 800868c:	bf44      	itt	mi
 800868e:	f043 0320 	orrmi.w	r3, r3, #32
 8008692:	6023      	strmi	r3, [r4, #0]
 8008694:	b11d      	cbz	r5, 800869e <_printf_i+0x19e>
 8008696:	2310      	movs	r3, #16
 8008698:	e7ac      	b.n	80085f4 <_printf_i+0xf4>
 800869a:	4827      	ldr	r0, [pc, #156]	@ (8008738 <_printf_i+0x238>)
 800869c:	e7e9      	b.n	8008672 <_printf_i+0x172>
 800869e:	6823      	ldr	r3, [r4, #0]
 80086a0:	f023 0320 	bic.w	r3, r3, #32
 80086a4:	6023      	str	r3, [r4, #0]
 80086a6:	e7f6      	b.n	8008696 <_printf_i+0x196>
 80086a8:	4616      	mov	r6, r2
 80086aa:	e7bd      	b.n	8008628 <_printf_i+0x128>
 80086ac:	6833      	ldr	r3, [r6, #0]
 80086ae:	6825      	ldr	r5, [r4, #0]
 80086b0:	6961      	ldr	r1, [r4, #20]
 80086b2:	1d18      	adds	r0, r3, #4
 80086b4:	6030      	str	r0, [r6, #0]
 80086b6:	062e      	lsls	r6, r5, #24
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	d501      	bpl.n	80086c0 <_printf_i+0x1c0>
 80086bc:	6019      	str	r1, [r3, #0]
 80086be:	e002      	b.n	80086c6 <_printf_i+0x1c6>
 80086c0:	0668      	lsls	r0, r5, #25
 80086c2:	d5fb      	bpl.n	80086bc <_printf_i+0x1bc>
 80086c4:	8019      	strh	r1, [r3, #0]
 80086c6:	2300      	movs	r3, #0
 80086c8:	6123      	str	r3, [r4, #16]
 80086ca:	4616      	mov	r6, r2
 80086cc:	e7bc      	b.n	8008648 <_printf_i+0x148>
 80086ce:	6833      	ldr	r3, [r6, #0]
 80086d0:	1d1a      	adds	r2, r3, #4
 80086d2:	6032      	str	r2, [r6, #0]
 80086d4:	681e      	ldr	r6, [r3, #0]
 80086d6:	6862      	ldr	r2, [r4, #4]
 80086d8:	2100      	movs	r1, #0
 80086da:	4630      	mov	r0, r6
 80086dc:	f7f7 fd78 	bl	80001d0 <memchr>
 80086e0:	b108      	cbz	r0, 80086e6 <_printf_i+0x1e6>
 80086e2:	1b80      	subs	r0, r0, r6
 80086e4:	6060      	str	r0, [r4, #4]
 80086e6:	6863      	ldr	r3, [r4, #4]
 80086e8:	6123      	str	r3, [r4, #16]
 80086ea:	2300      	movs	r3, #0
 80086ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086f0:	e7aa      	b.n	8008648 <_printf_i+0x148>
 80086f2:	6923      	ldr	r3, [r4, #16]
 80086f4:	4632      	mov	r2, r6
 80086f6:	4649      	mov	r1, r9
 80086f8:	4640      	mov	r0, r8
 80086fa:	47d0      	blx	sl
 80086fc:	3001      	adds	r0, #1
 80086fe:	d0ad      	beq.n	800865c <_printf_i+0x15c>
 8008700:	6823      	ldr	r3, [r4, #0]
 8008702:	079b      	lsls	r3, r3, #30
 8008704:	d413      	bmi.n	800872e <_printf_i+0x22e>
 8008706:	68e0      	ldr	r0, [r4, #12]
 8008708:	9b03      	ldr	r3, [sp, #12]
 800870a:	4298      	cmp	r0, r3
 800870c:	bfb8      	it	lt
 800870e:	4618      	movlt	r0, r3
 8008710:	e7a6      	b.n	8008660 <_printf_i+0x160>
 8008712:	2301      	movs	r3, #1
 8008714:	4632      	mov	r2, r6
 8008716:	4649      	mov	r1, r9
 8008718:	4640      	mov	r0, r8
 800871a:	47d0      	blx	sl
 800871c:	3001      	adds	r0, #1
 800871e:	d09d      	beq.n	800865c <_printf_i+0x15c>
 8008720:	3501      	adds	r5, #1
 8008722:	68e3      	ldr	r3, [r4, #12]
 8008724:	9903      	ldr	r1, [sp, #12]
 8008726:	1a5b      	subs	r3, r3, r1
 8008728:	42ab      	cmp	r3, r5
 800872a:	dcf2      	bgt.n	8008712 <_printf_i+0x212>
 800872c:	e7eb      	b.n	8008706 <_printf_i+0x206>
 800872e:	2500      	movs	r5, #0
 8008730:	f104 0619 	add.w	r6, r4, #25
 8008734:	e7f5      	b.n	8008722 <_printf_i+0x222>
 8008736:	bf00      	nop
 8008738:	0800b892 	.word	0x0800b892
 800873c:	0800b8a3 	.word	0x0800b8a3

08008740 <std>:
 8008740:	2300      	movs	r3, #0
 8008742:	b510      	push	{r4, lr}
 8008744:	4604      	mov	r4, r0
 8008746:	e9c0 3300 	strd	r3, r3, [r0]
 800874a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800874e:	6083      	str	r3, [r0, #8]
 8008750:	8181      	strh	r1, [r0, #12]
 8008752:	6643      	str	r3, [r0, #100]	@ 0x64
 8008754:	81c2      	strh	r2, [r0, #14]
 8008756:	6183      	str	r3, [r0, #24]
 8008758:	4619      	mov	r1, r3
 800875a:	2208      	movs	r2, #8
 800875c:	305c      	adds	r0, #92	@ 0x5c
 800875e:	f000 f9f9 	bl	8008b54 <memset>
 8008762:	4b0d      	ldr	r3, [pc, #52]	@ (8008798 <std+0x58>)
 8008764:	6263      	str	r3, [r4, #36]	@ 0x24
 8008766:	4b0d      	ldr	r3, [pc, #52]	@ (800879c <std+0x5c>)
 8008768:	62a3      	str	r3, [r4, #40]	@ 0x28
 800876a:	4b0d      	ldr	r3, [pc, #52]	@ (80087a0 <std+0x60>)
 800876c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800876e:	4b0d      	ldr	r3, [pc, #52]	@ (80087a4 <std+0x64>)
 8008770:	6323      	str	r3, [r4, #48]	@ 0x30
 8008772:	4b0d      	ldr	r3, [pc, #52]	@ (80087a8 <std+0x68>)
 8008774:	6224      	str	r4, [r4, #32]
 8008776:	429c      	cmp	r4, r3
 8008778:	d006      	beq.n	8008788 <std+0x48>
 800877a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800877e:	4294      	cmp	r4, r2
 8008780:	d002      	beq.n	8008788 <std+0x48>
 8008782:	33d0      	adds	r3, #208	@ 0xd0
 8008784:	429c      	cmp	r4, r3
 8008786:	d105      	bne.n	8008794 <std+0x54>
 8008788:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800878c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008790:	f000 ba5c 	b.w	8008c4c <__retarget_lock_init_recursive>
 8008794:	bd10      	pop	{r4, pc}
 8008796:	bf00      	nop
 8008798:	080089a5 	.word	0x080089a5
 800879c:	080089c7 	.word	0x080089c7
 80087a0:	080089ff 	.word	0x080089ff
 80087a4:	08008a23 	.word	0x08008a23
 80087a8:	2000043c 	.word	0x2000043c

080087ac <stdio_exit_handler>:
 80087ac:	4a02      	ldr	r2, [pc, #8]	@ (80087b8 <stdio_exit_handler+0xc>)
 80087ae:	4903      	ldr	r1, [pc, #12]	@ (80087bc <stdio_exit_handler+0x10>)
 80087b0:	4803      	ldr	r0, [pc, #12]	@ (80087c0 <stdio_exit_handler+0x14>)
 80087b2:	f000 b869 	b.w	8008888 <_fwalk_sglue>
 80087b6:	bf00      	nop
 80087b8:	20000010 	.word	0x20000010
 80087bc:	0800a581 	.word	0x0800a581
 80087c0:	20000020 	.word	0x20000020

080087c4 <cleanup_stdio>:
 80087c4:	6841      	ldr	r1, [r0, #4]
 80087c6:	4b0c      	ldr	r3, [pc, #48]	@ (80087f8 <cleanup_stdio+0x34>)
 80087c8:	4299      	cmp	r1, r3
 80087ca:	b510      	push	{r4, lr}
 80087cc:	4604      	mov	r4, r0
 80087ce:	d001      	beq.n	80087d4 <cleanup_stdio+0x10>
 80087d0:	f001 fed6 	bl	800a580 <_fflush_r>
 80087d4:	68a1      	ldr	r1, [r4, #8]
 80087d6:	4b09      	ldr	r3, [pc, #36]	@ (80087fc <cleanup_stdio+0x38>)
 80087d8:	4299      	cmp	r1, r3
 80087da:	d002      	beq.n	80087e2 <cleanup_stdio+0x1e>
 80087dc:	4620      	mov	r0, r4
 80087de:	f001 fecf 	bl	800a580 <_fflush_r>
 80087e2:	68e1      	ldr	r1, [r4, #12]
 80087e4:	4b06      	ldr	r3, [pc, #24]	@ (8008800 <cleanup_stdio+0x3c>)
 80087e6:	4299      	cmp	r1, r3
 80087e8:	d004      	beq.n	80087f4 <cleanup_stdio+0x30>
 80087ea:	4620      	mov	r0, r4
 80087ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087f0:	f001 bec6 	b.w	800a580 <_fflush_r>
 80087f4:	bd10      	pop	{r4, pc}
 80087f6:	bf00      	nop
 80087f8:	2000043c 	.word	0x2000043c
 80087fc:	200004a4 	.word	0x200004a4
 8008800:	2000050c 	.word	0x2000050c

08008804 <global_stdio_init.part.0>:
 8008804:	b510      	push	{r4, lr}
 8008806:	4b0b      	ldr	r3, [pc, #44]	@ (8008834 <global_stdio_init.part.0+0x30>)
 8008808:	4c0b      	ldr	r4, [pc, #44]	@ (8008838 <global_stdio_init.part.0+0x34>)
 800880a:	4a0c      	ldr	r2, [pc, #48]	@ (800883c <global_stdio_init.part.0+0x38>)
 800880c:	601a      	str	r2, [r3, #0]
 800880e:	4620      	mov	r0, r4
 8008810:	2200      	movs	r2, #0
 8008812:	2104      	movs	r1, #4
 8008814:	f7ff ff94 	bl	8008740 <std>
 8008818:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800881c:	2201      	movs	r2, #1
 800881e:	2109      	movs	r1, #9
 8008820:	f7ff ff8e 	bl	8008740 <std>
 8008824:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008828:	2202      	movs	r2, #2
 800882a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800882e:	2112      	movs	r1, #18
 8008830:	f7ff bf86 	b.w	8008740 <std>
 8008834:	20000574 	.word	0x20000574
 8008838:	2000043c 	.word	0x2000043c
 800883c:	080087ad 	.word	0x080087ad

08008840 <__sfp_lock_acquire>:
 8008840:	4801      	ldr	r0, [pc, #4]	@ (8008848 <__sfp_lock_acquire+0x8>)
 8008842:	f000 ba04 	b.w	8008c4e <__retarget_lock_acquire_recursive>
 8008846:	bf00      	nop
 8008848:	2000057d 	.word	0x2000057d

0800884c <__sfp_lock_release>:
 800884c:	4801      	ldr	r0, [pc, #4]	@ (8008854 <__sfp_lock_release+0x8>)
 800884e:	f000 b9ff 	b.w	8008c50 <__retarget_lock_release_recursive>
 8008852:	bf00      	nop
 8008854:	2000057d 	.word	0x2000057d

08008858 <__sinit>:
 8008858:	b510      	push	{r4, lr}
 800885a:	4604      	mov	r4, r0
 800885c:	f7ff fff0 	bl	8008840 <__sfp_lock_acquire>
 8008860:	6a23      	ldr	r3, [r4, #32]
 8008862:	b11b      	cbz	r3, 800886c <__sinit+0x14>
 8008864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008868:	f7ff bff0 	b.w	800884c <__sfp_lock_release>
 800886c:	4b04      	ldr	r3, [pc, #16]	@ (8008880 <__sinit+0x28>)
 800886e:	6223      	str	r3, [r4, #32]
 8008870:	4b04      	ldr	r3, [pc, #16]	@ (8008884 <__sinit+0x2c>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d1f5      	bne.n	8008864 <__sinit+0xc>
 8008878:	f7ff ffc4 	bl	8008804 <global_stdio_init.part.0>
 800887c:	e7f2      	b.n	8008864 <__sinit+0xc>
 800887e:	bf00      	nop
 8008880:	080087c5 	.word	0x080087c5
 8008884:	20000574 	.word	0x20000574

08008888 <_fwalk_sglue>:
 8008888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800888c:	4607      	mov	r7, r0
 800888e:	4688      	mov	r8, r1
 8008890:	4614      	mov	r4, r2
 8008892:	2600      	movs	r6, #0
 8008894:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008898:	f1b9 0901 	subs.w	r9, r9, #1
 800889c:	d505      	bpl.n	80088aa <_fwalk_sglue+0x22>
 800889e:	6824      	ldr	r4, [r4, #0]
 80088a0:	2c00      	cmp	r4, #0
 80088a2:	d1f7      	bne.n	8008894 <_fwalk_sglue+0xc>
 80088a4:	4630      	mov	r0, r6
 80088a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088aa:	89ab      	ldrh	r3, [r5, #12]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d907      	bls.n	80088c0 <_fwalk_sglue+0x38>
 80088b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088b4:	3301      	adds	r3, #1
 80088b6:	d003      	beq.n	80088c0 <_fwalk_sglue+0x38>
 80088b8:	4629      	mov	r1, r5
 80088ba:	4638      	mov	r0, r7
 80088bc:	47c0      	blx	r8
 80088be:	4306      	orrs	r6, r0
 80088c0:	3568      	adds	r5, #104	@ 0x68
 80088c2:	e7e9      	b.n	8008898 <_fwalk_sglue+0x10>

080088c4 <iprintf>:
 80088c4:	b40f      	push	{r0, r1, r2, r3}
 80088c6:	b507      	push	{r0, r1, r2, lr}
 80088c8:	4906      	ldr	r1, [pc, #24]	@ (80088e4 <iprintf+0x20>)
 80088ca:	ab04      	add	r3, sp, #16
 80088cc:	6808      	ldr	r0, [r1, #0]
 80088ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80088d2:	6881      	ldr	r1, [r0, #8]
 80088d4:	9301      	str	r3, [sp, #4]
 80088d6:	f001 fcb7 	bl	800a248 <_vfiprintf_r>
 80088da:	b003      	add	sp, #12
 80088dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80088e0:	b004      	add	sp, #16
 80088e2:	4770      	bx	lr
 80088e4:	2000001c 	.word	0x2000001c

080088e8 <_puts_r>:
 80088e8:	6a03      	ldr	r3, [r0, #32]
 80088ea:	b570      	push	{r4, r5, r6, lr}
 80088ec:	6884      	ldr	r4, [r0, #8]
 80088ee:	4605      	mov	r5, r0
 80088f0:	460e      	mov	r6, r1
 80088f2:	b90b      	cbnz	r3, 80088f8 <_puts_r+0x10>
 80088f4:	f7ff ffb0 	bl	8008858 <__sinit>
 80088f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80088fa:	07db      	lsls	r3, r3, #31
 80088fc:	d405      	bmi.n	800890a <_puts_r+0x22>
 80088fe:	89a3      	ldrh	r3, [r4, #12]
 8008900:	0598      	lsls	r0, r3, #22
 8008902:	d402      	bmi.n	800890a <_puts_r+0x22>
 8008904:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008906:	f000 f9a2 	bl	8008c4e <__retarget_lock_acquire_recursive>
 800890a:	89a3      	ldrh	r3, [r4, #12]
 800890c:	0719      	lsls	r1, r3, #28
 800890e:	d502      	bpl.n	8008916 <_puts_r+0x2e>
 8008910:	6923      	ldr	r3, [r4, #16]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d135      	bne.n	8008982 <_puts_r+0x9a>
 8008916:	4621      	mov	r1, r4
 8008918:	4628      	mov	r0, r5
 800891a:	f000 f8c5 	bl	8008aa8 <__swsetup_r>
 800891e:	b380      	cbz	r0, 8008982 <_puts_r+0x9a>
 8008920:	f04f 35ff 	mov.w	r5, #4294967295
 8008924:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008926:	07da      	lsls	r2, r3, #31
 8008928:	d405      	bmi.n	8008936 <_puts_r+0x4e>
 800892a:	89a3      	ldrh	r3, [r4, #12]
 800892c:	059b      	lsls	r3, r3, #22
 800892e:	d402      	bmi.n	8008936 <_puts_r+0x4e>
 8008930:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008932:	f000 f98d 	bl	8008c50 <__retarget_lock_release_recursive>
 8008936:	4628      	mov	r0, r5
 8008938:	bd70      	pop	{r4, r5, r6, pc}
 800893a:	2b00      	cmp	r3, #0
 800893c:	da04      	bge.n	8008948 <_puts_r+0x60>
 800893e:	69a2      	ldr	r2, [r4, #24]
 8008940:	429a      	cmp	r2, r3
 8008942:	dc17      	bgt.n	8008974 <_puts_r+0x8c>
 8008944:	290a      	cmp	r1, #10
 8008946:	d015      	beq.n	8008974 <_puts_r+0x8c>
 8008948:	6823      	ldr	r3, [r4, #0]
 800894a:	1c5a      	adds	r2, r3, #1
 800894c:	6022      	str	r2, [r4, #0]
 800894e:	7019      	strb	r1, [r3, #0]
 8008950:	68a3      	ldr	r3, [r4, #8]
 8008952:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008956:	3b01      	subs	r3, #1
 8008958:	60a3      	str	r3, [r4, #8]
 800895a:	2900      	cmp	r1, #0
 800895c:	d1ed      	bne.n	800893a <_puts_r+0x52>
 800895e:	2b00      	cmp	r3, #0
 8008960:	da11      	bge.n	8008986 <_puts_r+0x9e>
 8008962:	4622      	mov	r2, r4
 8008964:	210a      	movs	r1, #10
 8008966:	4628      	mov	r0, r5
 8008968:	f000 f85f 	bl	8008a2a <__swbuf_r>
 800896c:	3001      	adds	r0, #1
 800896e:	d0d7      	beq.n	8008920 <_puts_r+0x38>
 8008970:	250a      	movs	r5, #10
 8008972:	e7d7      	b.n	8008924 <_puts_r+0x3c>
 8008974:	4622      	mov	r2, r4
 8008976:	4628      	mov	r0, r5
 8008978:	f000 f857 	bl	8008a2a <__swbuf_r>
 800897c:	3001      	adds	r0, #1
 800897e:	d1e7      	bne.n	8008950 <_puts_r+0x68>
 8008980:	e7ce      	b.n	8008920 <_puts_r+0x38>
 8008982:	3e01      	subs	r6, #1
 8008984:	e7e4      	b.n	8008950 <_puts_r+0x68>
 8008986:	6823      	ldr	r3, [r4, #0]
 8008988:	1c5a      	adds	r2, r3, #1
 800898a:	6022      	str	r2, [r4, #0]
 800898c:	220a      	movs	r2, #10
 800898e:	701a      	strb	r2, [r3, #0]
 8008990:	e7ee      	b.n	8008970 <_puts_r+0x88>
	...

08008994 <puts>:
 8008994:	4b02      	ldr	r3, [pc, #8]	@ (80089a0 <puts+0xc>)
 8008996:	4601      	mov	r1, r0
 8008998:	6818      	ldr	r0, [r3, #0]
 800899a:	f7ff bfa5 	b.w	80088e8 <_puts_r>
 800899e:	bf00      	nop
 80089a0:	2000001c 	.word	0x2000001c

080089a4 <__sread>:
 80089a4:	b510      	push	{r4, lr}
 80089a6:	460c      	mov	r4, r1
 80089a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ac:	f000 f900 	bl	8008bb0 <_read_r>
 80089b0:	2800      	cmp	r0, #0
 80089b2:	bfab      	itete	ge
 80089b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80089b6:	89a3      	ldrhlt	r3, [r4, #12]
 80089b8:	181b      	addge	r3, r3, r0
 80089ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80089be:	bfac      	ite	ge
 80089c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80089c2:	81a3      	strhlt	r3, [r4, #12]
 80089c4:	bd10      	pop	{r4, pc}

080089c6 <__swrite>:
 80089c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ca:	461f      	mov	r7, r3
 80089cc:	898b      	ldrh	r3, [r1, #12]
 80089ce:	05db      	lsls	r3, r3, #23
 80089d0:	4605      	mov	r5, r0
 80089d2:	460c      	mov	r4, r1
 80089d4:	4616      	mov	r6, r2
 80089d6:	d505      	bpl.n	80089e4 <__swrite+0x1e>
 80089d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089dc:	2302      	movs	r3, #2
 80089de:	2200      	movs	r2, #0
 80089e0:	f000 f8d4 	bl	8008b8c <_lseek_r>
 80089e4:	89a3      	ldrh	r3, [r4, #12]
 80089e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80089ee:	81a3      	strh	r3, [r4, #12]
 80089f0:	4632      	mov	r2, r6
 80089f2:	463b      	mov	r3, r7
 80089f4:	4628      	mov	r0, r5
 80089f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089fa:	f000 b8eb 	b.w	8008bd4 <_write_r>

080089fe <__sseek>:
 80089fe:	b510      	push	{r4, lr}
 8008a00:	460c      	mov	r4, r1
 8008a02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a06:	f000 f8c1 	bl	8008b8c <_lseek_r>
 8008a0a:	1c43      	adds	r3, r0, #1
 8008a0c:	89a3      	ldrh	r3, [r4, #12]
 8008a0e:	bf15      	itete	ne
 8008a10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008a12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008a16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008a1a:	81a3      	strheq	r3, [r4, #12]
 8008a1c:	bf18      	it	ne
 8008a1e:	81a3      	strhne	r3, [r4, #12]
 8008a20:	bd10      	pop	{r4, pc}

08008a22 <__sclose>:
 8008a22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a26:	f000 b8a1 	b.w	8008b6c <_close_r>

08008a2a <__swbuf_r>:
 8008a2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a2c:	460e      	mov	r6, r1
 8008a2e:	4614      	mov	r4, r2
 8008a30:	4605      	mov	r5, r0
 8008a32:	b118      	cbz	r0, 8008a3c <__swbuf_r+0x12>
 8008a34:	6a03      	ldr	r3, [r0, #32]
 8008a36:	b90b      	cbnz	r3, 8008a3c <__swbuf_r+0x12>
 8008a38:	f7ff ff0e 	bl	8008858 <__sinit>
 8008a3c:	69a3      	ldr	r3, [r4, #24]
 8008a3e:	60a3      	str	r3, [r4, #8]
 8008a40:	89a3      	ldrh	r3, [r4, #12]
 8008a42:	071a      	lsls	r2, r3, #28
 8008a44:	d501      	bpl.n	8008a4a <__swbuf_r+0x20>
 8008a46:	6923      	ldr	r3, [r4, #16]
 8008a48:	b943      	cbnz	r3, 8008a5c <__swbuf_r+0x32>
 8008a4a:	4621      	mov	r1, r4
 8008a4c:	4628      	mov	r0, r5
 8008a4e:	f000 f82b 	bl	8008aa8 <__swsetup_r>
 8008a52:	b118      	cbz	r0, 8008a5c <__swbuf_r+0x32>
 8008a54:	f04f 37ff 	mov.w	r7, #4294967295
 8008a58:	4638      	mov	r0, r7
 8008a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a5c:	6823      	ldr	r3, [r4, #0]
 8008a5e:	6922      	ldr	r2, [r4, #16]
 8008a60:	1a98      	subs	r0, r3, r2
 8008a62:	6963      	ldr	r3, [r4, #20]
 8008a64:	b2f6      	uxtb	r6, r6
 8008a66:	4283      	cmp	r3, r0
 8008a68:	4637      	mov	r7, r6
 8008a6a:	dc05      	bgt.n	8008a78 <__swbuf_r+0x4e>
 8008a6c:	4621      	mov	r1, r4
 8008a6e:	4628      	mov	r0, r5
 8008a70:	f001 fd86 	bl	800a580 <_fflush_r>
 8008a74:	2800      	cmp	r0, #0
 8008a76:	d1ed      	bne.n	8008a54 <__swbuf_r+0x2a>
 8008a78:	68a3      	ldr	r3, [r4, #8]
 8008a7a:	3b01      	subs	r3, #1
 8008a7c:	60a3      	str	r3, [r4, #8]
 8008a7e:	6823      	ldr	r3, [r4, #0]
 8008a80:	1c5a      	adds	r2, r3, #1
 8008a82:	6022      	str	r2, [r4, #0]
 8008a84:	701e      	strb	r6, [r3, #0]
 8008a86:	6962      	ldr	r2, [r4, #20]
 8008a88:	1c43      	adds	r3, r0, #1
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d004      	beq.n	8008a98 <__swbuf_r+0x6e>
 8008a8e:	89a3      	ldrh	r3, [r4, #12]
 8008a90:	07db      	lsls	r3, r3, #31
 8008a92:	d5e1      	bpl.n	8008a58 <__swbuf_r+0x2e>
 8008a94:	2e0a      	cmp	r6, #10
 8008a96:	d1df      	bne.n	8008a58 <__swbuf_r+0x2e>
 8008a98:	4621      	mov	r1, r4
 8008a9a:	4628      	mov	r0, r5
 8008a9c:	f001 fd70 	bl	800a580 <_fflush_r>
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	d0d9      	beq.n	8008a58 <__swbuf_r+0x2e>
 8008aa4:	e7d6      	b.n	8008a54 <__swbuf_r+0x2a>
	...

08008aa8 <__swsetup_r>:
 8008aa8:	b538      	push	{r3, r4, r5, lr}
 8008aaa:	4b29      	ldr	r3, [pc, #164]	@ (8008b50 <__swsetup_r+0xa8>)
 8008aac:	4605      	mov	r5, r0
 8008aae:	6818      	ldr	r0, [r3, #0]
 8008ab0:	460c      	mov	r4, r1
 8008ab2:	b118      	cbz	r0, 8008abc <__swsetup_r+0x14>
 8008ab4:	6a03      	ldr	r3, [r0, #32]
 8008ab6:	b90b      	cbnz	r3, 8008abc <__swsetup_r+0x14>
 8008ab8:	f7ff fece 	bl	8008858 <__sinit>
 8008abc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ac0:	0719      	lsls	r1, r3, #28
 8008ac2:	d422      	bmi.n	8008b0a <__swsetup_r+0x62>
 8008ac4:	06da      	lsls	r2, r3, #27
 8008ac6:	d407      	bmi.n	8008ad8 <__swsetup_r+0x30>
 8008ac8:	2209      	movs	r2, #9
 8008aca:	602a      	str	r2, [r5, #0]
 8008acc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ad0:	81a3      	strh	r3, [r4, #12]
 8008ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ad6:	e033      	b.n	8008b40 <__swsetup_r+0x98>
 8008ad8:	0758      	lsls	r0, r3, #29
 8008ada:	d512      	bpl.n	8008b02 <__swsetup_r+0x5a>
 8008adc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ade:	b141      	cbz	r1, 8008af2 <__swsetup_r+0x4a>
 8008ae0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ae4:	4299      	cmp	r1, r3
 8008ae6:	d002      	beq.n	8008aee <__swsetup_r+0x46>
 8008ae8:	4628      	mov	r0, r5
 8008aea:	f000 ff01 	bl	80098f0 <_free_r>
 8008aee:	2300      	movs	r3, #0
 8008af0:	6363      	str	r3, [r4, #52]	@ 0x34
 8008af2:	89a3      	ldrh	r3, [r4, #12]
 8008af4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008af8:	81a3      	strh	r3, [r4, #12]
 8008afa:	2300      	movs	r3, #0
 8008afc:	6063      	str	r3, [r4, #4]
 8008afe:	6923      	ldr	r3, [r4, #16]
 8008b00:	6023      	str	r3, [r4, #0]
 8008b02:	89a3      	ldrh	r3, [r4, #12]
 8008b04:	f043 0308 	orr.w	r3, r3, #8
 8008b08:	81a3      	strh	r3, [r4, #12]
 8008b0a:	6923      	ldr	r3, [r4, #16]
 8008b0c:	b94b      	cbnz	r3, 8008b22 <__swsetup_r+0x7a>
 8008b0e:	89a3      	ldrh	r3, [r4, #12]
 8008b10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008b14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b18:	d003      	beq.n	8008b22 <__swsetup_r+0x7a>
 8008b1a:	4621      	mov	r1, r4
 8008b1c:	4628      	mov	r0, r5
 8008b1e:	f001 fd7d 	bl	800a61c <__smakebuf_r>
 8008b22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b26:	f013 0201 	ands.w	r2, r3, #1
 8008b2a:	d00a      	beq.n	8008b42 <__swsetup_r+0x9a>
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	60a2      	str	r2, [r4, #8]
 8008b30:	6962      	ldr	r2, [r4, #20]
 8008b32:	4252      	negs	r2, r2
 8008b34:	61a2      	str	r2, [r4, #24]
 8008b36:	6922      	ldr	r2, [r4, #16]
 8008b38:	b942      	cbnz	r2, 8008b4c <__swsetup_r+0xa4>
 8008b3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008b3e:	d1c5      	bne.n	8008acc <__swsetup_r+0x24>
 8008b40:	bd38      	pop	{r3, r4, r5, pc}
 8008b42:	0799      	lsls	r1, r3, #30
 8008b44:	bf58      	it	pl
 8008b46:	6962      	ldrpl	r2, [r4, #20]
 8008b48:	60a2      	str	r2, [r4, #8]
 8008b4a:	e7f4      	b.n	8008b36 <__swsetup_r+0x8e>
 8008b4c:	2000      	movs	r0, #0
 8008b4e:	e7f7      	b.n	8008b40 <__swsetup_r+0x98>
 8008b50:	2000001c 	.word	0x2000001c

08008b54 <memset>:
 8008b54:	4402      	add	r2, r0
 8008b56:	4603      	mov	r3, r0
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d100      	bne.n	8008b5e <memset+0xa>
 8008b5c:	4770      	bx	lr
 8008b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8008b62:	e7f9      	b.n	8008b58 <memset+0x4>

08008b64 <_localeconv_r>:
 8008b64:	4800      	ldr	r0, [pc, #0]	@ (8008b68 <_localeconv_r+0x4>)
 8008b66:	4770      	bx	lr
 8008b68:	2000015c 	.word	0x2000015c

08008b6c <_close_r>:
 8008b6c:	b538      	push	{r3, r4, r5, lr}
 8008b6e:	4d06      	ldr	r5, [pc, #24]	@ (8008b88 <_close_r+0x1c>)
 8008b70:	2300      	movs	r3, #0
 8008b72:	4604      	mov	r4, r0
 8008b74:	4608      	mov	r0, r1
 8008b76:	602b      	str	r3, [r5, #0]
 8008b78:	f7fb fab8 	bl	80040ec <_close>
 8008b7c:	1c43      	adds	r3, r0, #1
 8008b7e:	d102      	bne.n	8008b86 <_close_r+0x1a>
 8008b80:	682b      	ldr	r3, [r5, #0]
 8008b82:	b103      	cbz	r3, 8008b86 <_close_r+0x1a>
 8008b84:	6023      	str	r3, [r4, #0]
 8008b86:	bd38      	pop	{r3, r4, r5, pc}
 8008b88:	20000578 	.word	0x20000578

08008b8c <_lseek_r>:
 8008b8c:	b538      	push	{r3, r4, r5, lr}
 8008b8e:	4d07      	ldr	r5, [pc, #28]	@ (8008bac <_lseek_r+0x20>)
 8008b90:	4604      	mov	r4, r0
 8008b92:	4608      	mov	r0, r1
 8008b94:	4611      	mov	r1, r2
 8008b96:	2200      	movs	r2, #0
 8008b98:	602a      	str	r2, [r5, #0]
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	f7fb facd 	bl	800413a <_lseek>
 8008ba0:	1c43      	adds	r3, r0, #1
 8008ba2:	d102      	bne.n	8008baa <_lseek_r+0x1e>
 8008ba4:	682b      	ldr	r3, [r5, #0]
 8008ba6:	b103      	cbz	r3, 8008baa <_lseek_r+0x1e>
 8008ba8:	6023      	str	r3, [r4, #0]
 8008baa:	bd38      	pop	{r3, r4, r5, pc}
 8008bac:	20000578 	.word	0x20000578

08008bb0 <_read_r>:
 8008bb0:	b538      	push	{r3, r4, r5, lr}
 8008bb2:	4d07      	ldr	r5, [pc, #28]	@ (8008bd0 <_read_r+0x20>)
 8008bb4:	4604      	mov	r4, r0
 8008bb6:	4608      	mov	r0, r1
 8008bb8:	4611      	mov	r1, r2
 8008bba:	2200      	movs	r2, #0
 8008bbc:	602a      	str	r2, [r5, #0]
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	f7fb fa77 	bl	80040b2 <_read>
 8008bc4:	1c43      	adds	r3, r0, #1
 8008bc6:	d102      	bne.n	8008bce <_read_r+0x1e>
 8008bc8:	682b      	ldr	r3, [r5, #0]
 8008bca:	b103      	cbz	r3, 8008bce <_read_r+0x1e>
 8008bcc:	6023      	str	r3, [r4, #0]
 8008bce:	bd38      	pop	{r3, r4, r5, pc}
 8008bd0:	20000578 	.word	0x20000578

08008bd4 <_write_r>:
 8008bd4:	b538      	push	{r3, r4, r5, lr}
 8008bd6:	4d07      	ldr	r5, [pc, #28]	@ (8008bf4 <_write_r+0x20>)
 8008bd8:	4604      	mov	r4, r0
 8008bda:	4608      	mov	r0, r1
 8008bdc:	4611      	mov	r1, r2
 8008bde:	2200      	movs	r2, #0
 8008be0:	602a      	str	r2, [r5, #0]
 8008be2:	461a      	mov	r2, r3
 8008be4:	f7fa fb1c 	bl	8003220 <_write>
 8008be8:	1c43      	adds	r3, r0, #1
 8008bea:	d102      	bne.n	8008bf2 <_write_r+0x1e>
 8008bec:	682b      	ldr	r3, [r5, #0]
 8008bee:	b103      	cbz	r3, 8008bf2 <_write_r+0x1e>
 8008bf0:	6023      	str	r3, [r4, #0]
 8008bf2:	bd38      	pop	{r3, r4, r5, pc}
 8008bf4:	20000578 	.word	0x20000578

08008bf8 <__errno>:
 8008bf8:	4b01      	ldr	r3, [pc, #4]	@ (8008c00 <__errno+0x8>)
 8008bfa:	6818      	ldr	r0, [r3, #0]
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop
 8008c00:	2000001c 	.word	0x2000001c

08008c04 <__libc_init_array>:
 8008c04:	b570      	push	{r4, r5, r6, lr}
 8008c06:	4d0d      	ldr	r5, [pc, #52]	@ (8008c3c <__libc_init_array+0x38>)
 8008c08:	4c0d      	ldr	r4, [pc, #52]	@ (8008c40 <__libc_init_array+0x3c>)
 8008c0a:	1b64      	subs	r4, r4, r5
 8008c0c:	10a4      	asrs	r4, r4, #2
 8008c0e:	2600      	movs	r6, #0
 8008c10:	42a6      	cmp	r6, r4
 8008c12:	d109      	bne.n	8008c28 <__libc_init_array+0x24>
 8008c14:	4d0b      	ldr	r5, [pc, #44]	@ (8008c44 <__libc_init_array+0x40>)
 8008c16:	4c0c      	ldr	r4, [pc, #48]	@ (8008c48 <__libc_init_array+0x44>)
 8008c18:	f002 fc82 	bl	800b520 <_init>
 8008c1c:	1b64      	subs	r4, r4, r5
 8008c1e:	10a4      	asrs	r4, r4, #2
 8008c20:	2600      	movs	r6, #0
 8008c22:	42a6      	cmp	r6, r4
 8008c24:	d105      	bne.n	8008c32 <__libc_init_array+0x2e>
 8008c26:	bd70      	pop	{r4, r5, r6, pc}
 8008c28:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c2c:	4798      	blx	r3
 8008c2e:	3601      	adds	r6, #1
 8008c30:	e7ee      	b.n	8008c10 <__libc_init_array+0xc>
 8008c32:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c36:	4798      	blx	r3
 8008c38:	3601      	adds	r6, #1
 8008c3a:	e7f2      	b.n	8008c22 <__libc_init_array+0x1e>
 8008c3c:	0800bc48 	.word	0x0800bc48
 8008c40:	0800bc48 	.word	0x0800bc48
 8008c44:	0800bc48 	.word	0x0800bc48
 8008c48:	0800bc4c 	.word	0x0800bc4c

08008c4c <__retarget_lock_init_recursive>:
 8008c4c:	4770      	bx	lr

08008c4e <__retarget_lock_acquire_recursive>:
 8008c4e:	4770      	bx	lr

08008c50 <__retarget_lock_release_recursive>:
 8008c50:	4770      	bx	lr

08008c52 <quorem>:
 8008c52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c56:	6903      	ldr	r3, [r0, #16]
 8008c58:	690c      	ldr	r4, [r1, #16]
 8008c5a:	42a3      	cmp	r3, r4
 8008c5c:	4607      	mov	r7, r0
 8008c5e:	db7e      	blt.n	8008d5e <quorem+0x10c>
 8008c60:	3c01      	subs	r4, #1
 8008c62:	f101 0814 	add.w	r8, r1, #20
 8008c66:	00a3      	lsls	r3, r4, #2
 8008c68:	f100 0514 	add.w	r5, r0, #20
 8008c6c:	9300      	str	r3, [sp, #0]
 8008c6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c72:	9301      	str	r3, [sp, #4]
 8008c74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008c78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008c84:	fbb2 f6f3 	udiv	r6, r2, r3
 8008c88:	d32e      	bcc.n	8008ce8 <quorem+0x96>
 8008c8a:	f04f 0a00 	mov.w	sl, #0
 8008c8e:	46c4      	mov	ip, r8
 8008c90:	46ae      	mov	lr, r5
 8008c92:	46d3      	mov	fp, sl
 8008c94:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008c98:	b298      	uxth	r0, r3
 8008c9a:	fb06 a000 	mla	r0, r6, r0, sl
 8008c9e:	0c02      	lsrs	r2, r0, #16
 8008ca0:	0c1b      	lsrs	r3, r3, #16
 8008ca2:	fb06 2303 	mla	r3, r6, r3, r2
 8008ca6:	f8de 2000 	ldr.w	r2, [lr]
 8008caa:	b280      	uxth	r0, r0
 8008cac:	b292      	uxth	r2, r2
 8008cae:	1a12      	subs	r2, r2, r0
 8008cb0:	445a      	add	r2, fp
 8008cb2:	f8de 0000 	ldr.w	r0, [lr]
 8008cb6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008cc0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008cc4:	b292      	uxth	r2, r2
 8008cc6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008cca:	45e1      	cmp	r9, ip
 8008ccc:	f84e 2b04 	str.w	r2, [lr], #4
 8008cd0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008cd4:	d2de      	bcs.n	8008c94 <quorem+0x42>
 8008cd6:	9b00      	ldr	r3, [sp, #0]
 8008cd8:	58eb      	ldr	r3, [r5, r3]
 8008cda:	b92b      	cbnz	r3, 8008ce8 <quorem+0x96>
 8008cdc:	9b01      	ldr	r3, [sp, #4]
 8008cde:	3b04      	subs	r3, #4
 8008ce0:	429d      	cmp	r5, r3
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	d32f      	bcc.n	8008d46 <quorem+0xf4>
 8008ce6:	613c      	str	r4, [r7, #16]
 8008ce8:	4638      	mov	r0, r7
 8008cea:	f001 f97b 	bl	8009fe4 <__mcmp>
 8008cee:	2800      	cmp	r0, #0
 8008cf0:	db25      	blt.n	8008d3e <quorem+0xec>
 8008cf2:	4629      	mov	r1, r5
 8008cf4:	2000      	movs	r0, #0
 8008cf6:	f858 2b04 	ldr.w	r2, [r8], #4
 8008cfa:	f8d1 c000 	ldr.w	ip, [r1]
 8008cfe:	fa1f fe82 	uxth.w	lr, r2
 8008d02:	fa1f f38c 	uxth.w	r3, ip
 8008d06:	eba3 030e 	sub.w	r3, r3, lr
 8008d0a:	4403      	add	r3, r0
 8008d0c:	0c12      	lsrs	r2, r2, #16
 8008d0e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008d12:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d1c:	45c1      	cmp	r9, r8
 8008d1e:	f841 3b04 	str.w	r3, [r1], #4
 8008d22:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008d26:	d2e6      	bcs.n	8008cf6 <quorem+0xa4>
 8008d28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d30:	b922      	cbnz	r2, 8008d3c <quorem+0xea>
 8008d32:	3b04      	subs	r3, #4
 8008d34:	429d      	cmp	r5, r3
 8008d36:	461a      	mov	r2, r3
 8008d38:	d30b      	bcc.n	8008d52 <quorem+0x100>
 8008d3a:	613c      	str	r4, [r7, #16]
 8008d3c:	3601      	adds	r6, #1
 8008d3e:	4630      	mov	r0, r6
 8008d40:	b003      	add	sp, #12
 8008d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d46:	6812      	ldr	r2, [r2, #0]
 8008d48:	3b04      	subs	r3, #4
 8008d4a:	2a00      	cmp	r2, #0
 8008d4c:	d1cb      	bne.n	8008ce6 <quorem+0x94>
 8008d4e:	3c01      	subs	r4, #1
 8008d50:	e7c6      	b.n	8008ce0 <quorem+0x8e>
 8008d52:	6812      	ldr	r2, [r2, #0]
 8008d54:	3b04      	subs	r3, #4
 8008d56:	2a00      	cmp	r2, #0
 8008d58:	d1ef      	bne.n	8008d3a <quorem+0xe8>
 8008d5a:	3c01      	subs	r4, #1
 8008d5c:	e7ea      	b.n	8008d34 <quorem+0xe2>
 8008d5e:	2000      	movs	r0, #0
 8008d60:	e7ee      	b.n	8008d40 <quorem+0xee>
 8008d62:	0000      	movs	r0, r0
 8008d64:	0000      	movs	r0, r0
	...

08008d68 <_dtoa_r>:
 8008d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d6c:	69c7      	ldr	r7, [r0, #28]
 8008d6e:	b099      	sub	sp, #100	@ 0x64
 8008d70:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008d74:	ec55 4b10 	vmov	r4, r5, d0
 8008d78:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008d7a:	9109      	str	r1, [sp, #36]	@ 0x24
 8008d7c:	4683      	mov	fp, r0
 8008d7e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d80:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008d82:	b97f      	cbnz	r7, 8008da4 <_dtoa_r+0x3c>
 8008d84:	2010      	movs	r0, #16
 8008d86:	f000 fdfd 	bl	8009984 <malloc>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008d90:	b920      	cbnz	r0, 8008d9c <_dtoa_r+0x34>
 8008d92:	4ba7      	ldr	r3, [pc, #668]	@ (8009030 <_dtoa_r+0x2c8>)
 8008d94:	21ef      	movs	r1, #239	@ 0xef
 8008d96:	48a7      	ldr	r0, [pc, #668]	@ (8009034 <_dtoa_r+0x2cc>)
 8008d98:	f001 fcbc 	bl	800a714 <__assert_func>
 8008d9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008da0:	6007      	str	r7, [r0, #0]
 8008da2:	60c7      	str	r7, [r0, #12]
 8008da4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008da8:	6819      	ldr	r1, [r3, #0]
 8008daa:	b159      	cbz	r1, 8008dc4 <_dtoa_r+0x5c>
 8008dac:	685a      	ldr	r2, [r3, #4]
 8008dae:	604a      	str	r2, [r1, #4]
 8008db0:	2301      	movs	r3, #1
 8008db2:	4093      	lsls	r3, r2
 8008db4:	608b      	str	r3, [r1, #8]
 8008db6:	4658      	mov	r0, fp
 8008db8:	f000 feda 	bl	8009b70 <_Bfree>
 8008dbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	601a      	str	r2, [r3, #0]
 8008dc4:	1e2b      	subs	r3, r5, #0
 8008dc6:	bfb9      	ittee	lt
 8008dc8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008dcc:	9303      	strlt	r3, [sp, #12]
 8008dce:	2300      	movge	r3, #0
 8008dd0:	6033      	strge	r3, [r6, #0]
 8008dd2:	9f03      	ldr	r7, [sp, #12]
 8008dd4:	4b98      	ldr	r3, [pc, #608]	@ (8009038 <_dtoa_r+0x2d0>)
 8008dd6:	bfbc      	itt	lt
 8008dd8:	2201      	movlt	r2, #1
 8008dda:	6032      	strlt	r2, [r6, #0]
 8008ddc:	43bb      	bics	r3, r7
 8008dde:	d112      	bne.n	8008e06 <_dtoa_r+0x9e>
 8008de0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008de2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008de6:	6013      	str	r3, [r2, #0]
 8008de8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008dec:	4323      	orrs	r3, r4
 8008dee:	f000 854d 	beq.w	800988c <_dtoa_r+0xb24>
 8008df2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008df4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800904c <_dtoa_r+0x2e4>
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	f000 854f 	beq.w	800989c <_dtoa_r+0xb34>
 8008dfe:	f10a 0303 	add.w	r3, sl, #3
 8008e02:	f000 bd49 	b.w	8009898 <_dtoa_r+0xb30>
 8008e06:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	ec51 0b17 	vmov	r0, r1, d7
 8008e10:	2300      	movs	r3, #0
 8008e12:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008e16:	f7f7 fe57 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e1a:	4680      	mov	r8, r0
 8008e1c:	b158      	cbz	r0, 8008e36 <_dtoa_r+0xce>
 8008e1e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008e20:	2301      	movs	r3, #1
 8008e22:	6013      	str	r3, [r2, #0]
 8008e24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008e26:	b113      	cbz	r3, 8008e2e <_dtoa_r+0xc6>
 8008e28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008e2a:	4b84      	ldr	r3, [pc, #528]	@ (800903c <_dtoa_r+0x2d4>)
 8008e2c:	6013      	str	r3, [r2, #0]
 8008e2e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009050 <_dtoa_r+0x2e8>
 8008e32:	f000 bd33 	b.w	800989c <_dtoa_r+0xb34>
 8008e36:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008e3a:	aa16      	add	r2, sp, #88	@ 0x58
 8008e3c:	a917      	add	r1, sp, #92	@ 0x5c
 8008e3e:	4658      	mov	r0, fp
 8008e40:	f001 f980 	bl	800a144 <__d2b>
 8008e44:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008e48:	4681      	mov	r9, r0
 8008e4a:	2e00      	cmp	r6, #0
 8008e4c:	d077      	beq.n	8008f3e <_dtoa_r+0x1d6>
 8008e4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008e50:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008e54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e5c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008e60:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008e64:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008e68:	4619      	mov	r1, r3
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	4b74      	ldr	r3, [pc, #464]	@ (8009040 <_dtoa_r+0x2d8>)
 8008e6e:	f7f7 fa0b 	bl	8000288 <__aeabi_dsub>
 8008e72:	a369      	add	r3, pc, #420	@ (adr r3, 8009018 <_dtoa_r+0x2b0>)
 8008e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e78:	f7f7 fbbe 	bl	80005f8 <__aeabi_dmul>
 8008e7c:	a368      	add	r3, pc, #416	@ (adr r3, 8009020 <_dtoa_r+0x2b8>)
 8008e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e82:	f7f7 fa03 	bl	800028c <__adddf3>
 8008e86:	4604      	mov	r4, r0
 8008e88:	4630      	mov	r0, r6
 8008e8a:	460d      	mov	r5, r1
 8008e8c:	f7f7 fb4a 	bl	8000524 <__aeabi_i2d>
 8008e90:	a365      	add	r3, pc, #404	@ (adr r3, 8009028 <_dtoa_r+0x2c0>)
 8008e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e96:	f7f7 fbaf 	bl	80005f8 <__aeabi_dmul>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	4629      	mov	r1, r5
 8008ea2:	f7f7 f9f3 	bl	800028c <__adddf3>
 8008ea6:	4604      	mov	r4, r0
 8008ea8:	460d      	mov	r5, r1
 8008eaa:	f7f7 fe55 	bl	8000b58 <__aeabi_d2iz>
 8008eae:	2200      	movs	r2, #0
 8008eb0:	4607      	mov	r7, r0
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	4629      	mov	r1, r5
 8008eb8:	f7f7 fe10 	bl	8000adc <__aeabi_dcmplt>
 8008ebc:	b140      	cbz	r0, 8008ed0 <_dtoa_r+0x168>
 8008ebe:	4638      	mov	r0, r7
 8008ec0:	f7f7 fb30 	bl	8000524 <__aeabi_i2d>
 8008ec4:	4622      	mov	r2, r4
 8008ec6:	462b      	mov	r3, r5
 8008ec8:	f7f7 fdfe 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ecc:	b900      	cbnz	r0, 8008ed0 <_dtoa_r+0x168>
 8008ece:	3f01      	subs	r7, #1
 8008ed0:	2f16      	cmp	r7, #22
 8008ed2:	d851      	bhi.n	8008f78 <_dtoa_r+0x210>
 8008ed4:	4b5b      	ldr	r3, [pc, #364]	@ (8009044 <_dtoa_r+0x2dc>)
 8008ed6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ede:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ee2:	f7f7 fdfb 	bl	8000adc <__aeabi_dcmplt>
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	d048      	beq.n	8008f7c <_dtoa_r+0x214>
 8008eea:	3f01      	subs	r7, #1
 8008eec:	2300      	movs	r3, #0
 8008eee:	9312      	str	r3, [sp, #72]	@ 0x48
 8008ef0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008ef2:	1b9b      	subs	r3, r3, r6
 8008ef4:	1e5a      	subs	r2, r3, #1
 8008ef6:	bf44      	itt	mi
 8008ef8:	f1c3 0801 	rsbmi	r8, r3, #1
 8008efc:	2300      	movmi	r3, #0
 8008efe:	9208      	str	r2, [sp, #32]
 8008f00:	bf54      	ite	pl
 8008f02:	f04f 0800 	movpl.w	r8, #0
 8008f06:	9308      	strmi	r3, [sp, #32]
 8008f08:	2f00      	cmp	r7, #0
 8008f0a:	db39      	blt.n	8008f80 <_dtoa_r+0x218>
 8008f0c:	9b08      	ldr	r3, [sp, #32]
 8008f0e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008f10:	443b      	add	r3, r7
 8008f12:	9308      	str	r3, [sp, #32]
 8008f14:	2300      	movs	r3, #0
 8008f16:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f1a:	2b09      	cmp	r3, #9
 8008f1c:	d864      	bhi.n	8008fe8 <_dtoa_r+0x280>
 8008f1e:	2b05      	cmp	r3, #5
 8008f20:	bfc4      	itt	gt
 8008f22:	3b04      	subgt	r3, #4
 8008f24:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008f26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f28:	f1a3 0302 	sub.w	r3, r3, #2
 8008f2c:	bfcc      	ite	gt
 8008f2e:	2400      	movgt	r4, #0
 8008f30:	2401      	movle	r4, #1
 8008f32:	2b03      	cmp	r3, #3
 8008f34:	d863      	bhi.n	8008ffe <_dtoa_r+0x296>
 8008f36:	e8df f003 	tbb	[pc, r3]
 8008f3a:	372a      	.short	0x372a
 8008f3c:	5535      	.short	0x5535
 8008f3e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008f42:	441e      	add	r6, r3
 8008f44:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008f48:	2b20      	cmp	r3, #32
 8008f4a:	bfc1      	itttt	gt
 8008f4c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008f50:	409f      	lslgt	r7, r3
 8008f52:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008f56:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008f5a:	bfd6      	itet	le
 8008f5c:	f1c3 0320 	rsble	r3, r3, #32
 8008f60:	ea47 0003 	orrgt.w	r0, r7, r3
 8008f64:	fa04 f003 	lslle.w	r0, r4, r3
 8008f68:	f7f7 facc 	bl	8000504 <__aeabi_ui2d>
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008f72:	3e01      	subs	r6, #1
 8008f74:	9214      	str	r2, [sp, #80]	@ 0x50
 8008f76:	e777      	b.n	8008e68 <_dtoa_r+0x100>
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e7b8      	b.n	8008eee <_dtoa_r+0x186>
 8008f7c:	9012      	str	r0, [sp, #72]	@ 0x48
 8008f7e:	e7b7      	b.n	8008ef0 <_dtoa_r+0x188>
 8008f80:	427b      	negs	r3, r7
 8008f82:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f84:	2300      	movs	r3, #0
 8008f86:	eba8 0807 	sub.w	r8, r8, r7
 8008f8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008f8c:	e7c4      	b.n	8008f18 <_dtoa_r+0x1b0>
 8008f8e:	2300      	movs	r3, #0
 8008f90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	dc35      	bgt.n	8009004 <_dtoa_r+0x29c>
 8008f98:	2301      	movs	r3, #1
 8008f9a:	9300      	str	r3, [sp, #0]
 8008f9c:	9307      	str	r3, [sp, #28]
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008fa2:	e00b      	b.n	8008fbc <_dtoa_r+0x254>
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	e7f3      	b.n	8008f90 <_dtoa_r+0x228>
 8008fa8:	2300      	movs	r3, #0
 8008faa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008fac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008fae:	18fb      	adds	r3, r7, r3
 8008fb0:	9300      	str	r3, [sp, #0]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	9307      	str	r3, [sp, #28]
 8008fb8:	bfb8      	it	lt
 8008fba:	2301      	movlt	r3, #1
 8008fbc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	2204      	movs	r2, #4
 8008fc4:	f102 0514 	add.w	r5, r2, #20
 8008fc8:	429d      	cmp	r5, r3
 8008fca:	d91f      	bls.n	800900c <_dtoa_r+0x2a4>
 8008fcc:	6041      	str	r1, [r0, #4]
 8008fce:	4658      	mov	r0, fp
 8008fd0:	f000 fd8e 	bl	8009af0 <_Balloc>
 8008fd4:	4682      	mov	sl, r0
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	d13c      	bne.n	8009054 <_dtoa_r+0x2ec>
 8008fda:	4b1b      	ldr	r3, [pc, #108]	@ (8009048 <_dtoa_r+0x2e0>)
 8008fdc:	4602      	mov	r2, r0
 8008fde:	f240 11af 	movw	r1, #431	@ 0x1af
 8008fe2:	e6d8      	b.n	8008d96 <_dtoa_r+0x2e>
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e7e0      	b.n	8008faa <_dtoa_r+0x242>
 8008fe8:	2401      	movs	r4, #1
 8008fea:	2300      	movs	r3, #0
 8008fec:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fee:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ff4:	9300      	str	r3, [sp, #0]
 8008ff6:	9307      	str	r3, [sp, #28]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	2312      	movs	r3, #18
 8008ffc:	e7d0      	b.n	8008fa0 <_dtoa_r+0x238>
 8008ffe:	2301      	movs	r3, #1
 8009000:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009002:	e7f5      	b.n	8008ff0 <_dtoa_r+0x288>
 8009004:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009006:	9300      	str	r3, [sp, #0]
 8009008:	9307      	str	r3, [sp, #28]
 800900a:	e7d7      	b.n	8008fbc <_dtoa_r+0x254>
 800900c:	3101      	adds	r1, #1
 800900e:	0052      	lsls	r2, r2, #1
 8009010:	e7d8      	b.n	8008fc4 <_dtoa_r+0x25c>
 8009012:	bf00      	nop
 8009014:	f3af 8000 	nop.w
 8009018:	636f4361 	.word	0x636f4361
 800901c:	3fd287a7 	.word	0x3fd287a7
 8009020:	8b60c8b3 	.word	0x8b60c8b3
 8009024:	3fc68a28 	.word	0x3fc68a28
 8009028:	509f79fb 	.word	0x509f79fb
 800902c:	3fd34413 	.word	0x3fd34413
 8009030:	0800b8c1 	.word	0x0800b8c1
 8009034:	0800b8d8 	.word	0x0800b8d8
 8009038:	7ff00000 	.word	0x7ff00000
 800903c:	0800b891 	.word	0x0800b891
 8009040:	3ff80000 	.word	0x3ff80000
 8009044:	0800b9d0 	.word	0x0800b9d0
 8009048:	0800b930 	.word	0x0800b930
 800904c:	0800b8bd 	.word	0x0800b8bd
 8009050:	0800b890 	.word	0x0800b890
 8009054:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009058:	6018      	str	r0, [r3, #0]
 800905a:	9b07      	ldr	r3, [sp, #28]
 800905c:	2b0e      	cmp	r3, #14
 800905e:	f200 80a4 	bhi.w	80091aa <_dtoa_r+0x442>
 8009062:	2c00      	cmp	r4, #0
 8009064:	f000 80a1 	beq.w	80091aa <_dtoa_r+0x442>
 8009068:	2f00      	cmp	r7, #0
 800906a:	dd33      	ble.n	80090d4 <_dtoa_r+0x36c>
 800906c:	4bad      	ldr	r3, [pc, #692]	@ (8009324 <_dtoa_r+0x5bc>)
 800906e:	f007 020f 	and.w	r2, r7, #15
 8009072:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009076:	ed93 7b00 	vldr	d7, [r3]
 800907a:	05f8      	lsls	r0, r7, #23
 800907c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009080:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009084:	d516      	bpl.n	80090b4 <_dtoa_r+0x34c>
 8009086:	4ba8      	ldr	r3, [pc, #672]	@ (8009328 <_dtoa_r+0x5c0>)
 8009088:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800908c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009090:	f7f7 fbdc 	bl	800084c <__aeabi_ddiv>
 8009094:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009098:	f004 040f 	and.w	r4, r4, #15
 800909c:	2603      	movs	r6, #3
 800909e:	4da2      	ldr	r5, [pc, #648]	@ (8009328 <_dtoa_r+0x5c0>)
 80090a0:	b954      	cbnz	r4, 80090b8 <_dtoa_r+0x350>
 80090a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090aa:	f7f7 fbcf 	bl	800084c <__aeabi_ddiv>
 80090ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090b2:	e028      	b.n	8009106 <_dtoa_r+0x39e>
 80090b4:	2602      	movs	r6, #2
 80090b6:	e7f2      	b.n	800909e <_dtoa_r+0x336>
 80090b8:	07e1      	lsls	r1, r4, #31
 80090ba:	d508      	bpl.n	80090ce <_dtoa_r+0x366>
 80090bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80090c4:	f7f7 fa98 	bl	80005f8 <__aeabi_dmul>
 80090c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090cc:	3601      	adds	r6, #1
 80090ce:	1064      	asrs	r4, r4, #1
 80090d0:	3508      	adds	r5, #8
 80090d2:	e7e5      	b.n	80090a0 <_dtoa_r+0x338>
 80090d4:	f000 80d2 	beq.w	800927c <_dtoa_r+0x514>
 80090d8:	427c      	negs	r4, r7
 80090da:	4b92      	ldr	r3, [pc, #584]	@ (8009324 <_dtoa_r+0x5bc>)
 80090dc:	4d92      	ldr	r5, [pc, #584]	@ (8009328 <_dtoa_r+0x5c0>)
 80090de:	f004 020f 	and.w	r2, r4, #15
 80090e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80090ee:	f7f7 fa83 	bl	80005f8 <__aeabi_dmul>
 80090f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090f6:	1124      	asrs	r4, r4, #4
 80090f8:	2300      	movs	r3, #0
 80090fa:	2602      	movs	r6, #2
 80090fc:	2c00      	cmp	r4, #0
 80090fe:	f040 80b2 	bne.w	8009266 <_dtoa_r+0x4fe>
 8009102:	2b00      	cmp	r3, #0
 8009104:	d1d3      	bne.n	80090ae <_dtoa_r+0x346>
 8009106:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009108:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800910c:	2b00      	cmp	r3, #0
 800910e:	f000 80b7 	beq.w	8009280 <_dtoa_r+0x518>
 8009112:	4b86      	ldr	r3, [pc, #536]	@ (800932c <_dtoa_r+0x5c4>)
 8009114:	2200      	movs	r2, #0
 8009116:	4620      	mov	r0, r4
 8009118:	4629      	mov	r1, r5
 800911a:	f7f7 fcdf 	bl	8000adc <__aeabi_dcmplt>
 800911e:	2800      	cmp	r0, #0
 8009120:	f000 80ae 	beq.w	8009280 <_dtoa_r+0x518>
 8009124:	9b07      	ldr	r3, [sp, #28]
 8009126:	2b00      	cmp	r3, #0
 8009128:	f000 80aa 	beq.w	8009280 <_dtoa_r+0x518>
 800912c:	9b00      	ldr	r3, [sp, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	dd37      	ble.n	80091a2 <_dtoa_r+0x43a>
 8009132:	1e7b      	subs	r3, r7, #1
 8009134:	9304      	str	r3, [sp, #16]
 8009136:	4620      	mov	r0, r4
 8009138:	4b7d      	ldr	r3, [pc, #500]	@ (8009330 <_dtoa_r+0x5c8>)
 800913a:	2200      	movs	r2, #0
 800913c:	4629      	mov	r1, r5
 800913e:	f7f7 fa5b 	bl	80005f8 <__aeabi_dmul>
 8009142:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009146:	9c00      	ldr	r4, [sp, #0]
 8009148:	3601      	adds	r6, #1
 800914a:	4630      	mov	r0, r6
 800914c:	f7f7 f9ea 	bl	8000524 <__aeabi_i2d>
 8009150:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009154:	f7f7 fa50 	bl	80005f8 <__aeabi_dmul>
 8009158:	4b76      	ldr	r3, [pc, #472]	@ (8009334 <_dtoa_r+0x5cc>)
 800915a:	2200      	movs	r2, #0
 800915c:	f7f7 f896 	bl	800028c <__adddf3>
 8009160:	4605      	mov	r5, r0
 8009162:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009166:	2c00      	cmp	r4, #0
 8009168:	f040 808d 	bne.w	8009286 <_dtoa_r+0x51e>
 800916c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009170:	4b71      	ldr	r3, [pc, #452]	@ (8009338 <_dtoa_r+0x5d0>)
 8009172:	2200      	movs	r2, #0
 8009174:	f7f7 f888 	bl	8000288 <__aeabi_dsub>
 8009178:	4602      	mov	r2, r0
 800917a:	460b      	mov	r3, r1
 800917c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009180:	462a      	mov	r2, r5
 8009182:	4633      	mov	r3, r6
 8009184:	f7f7 fcc8 	bl	8000b18 <__aeabi_dcmpgt>
 8009188:	2800      	cmp	r0, #0
 800918a:	f040 828b 	bne.w	80096a4 <_dtoa_r+0x93c>
 800918e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009192:	462a      	mov	r2, r5
 8009194:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009198:	f7f7 fca0 	bl	8000adc <__aeabi_dcmplt>
 800919c:	2800      	cmp	r0, #0
 800919e:	f040 8128 	bne.w	80093f2 <_dtoa_r+0x68a>
 80091a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80091a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80091aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f2c0 815a 	blt.w	8009466 <_dtoa_r+0x6fe>
 80091b2:	2f0e      	cmp	r7, #14
 80091b4:	f300 8157 	bgt.w	8009466 <_dtoa_r+0x6fe>
 80091b8:	4b5a      	ldr	r3, [pc, #360]	@ (8009324 <_dtoa_r+0x5bc>)
 80091ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80091be:	ed93 7b00 	vldr	d7, [r3]
 80091c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	ed8d 7b00 	vstr	d7, [sp]
 80091ca:	da03      	bge.n	80091d4 <_dtoa_r+0x46c>
 80091cc:	9b07      	ldr	r3, [sp, #28]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	f340 8101 	ble.w	80093d6 <_dtoa_r+0x66e>
 80091d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80091d8:	4656      	mov	r6, sl
 80091da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091de:	4620      	mov	r0, r4
 80091e0:	4629      	mov	r1, r5
 80091e2:	f7f7 fb33 	bl	800084c <__aeabi_ddiv>
 80091e6:	f7f7 fcb7 	bl	8000b58 <__aeabi_d2iz>
 80091ea:	4680      	mov	r8, r0
 80091ec:	f7f7 f99a 	bl	8000524 <__aeabi_i2d>
 80091f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091f4:	f7f7 fa00 	bl	80005f8 <__aeabi_dmul>
 80091f8:	4602      	mov	r2, r0
 80091fa:	460b      	mov	r3, r1
 80091fc:	4620      	mov	r0, r4
 80091fe:	4629      	mov	r1, r5
 8009200:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009204:	f7f7 f840 	bl	8000288 <__aeabi_dsub>
 8009208:	f806 4b01 	strb.w	r4, [r6], #1
 800920c:	9d07      	ldr	r5, [sp, #28]
 800920e:	eba6 040a 	sub.w	r4, r6, sl
 8009212:	42a5      	cmp	r5, r4
 8009214:	4602      	mov	r2, r0
 8009216:	460b      	mov	r3, r1
 8009218:	f040 8117 	bne.w	800944a <_dtoa_r+0x6e2>
 800921c:	f7f7 f836 	bl	800028c <__adddf3>
 8009220:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009224:	4604      	mov	r4, r0
 8009226:	460d      	mov	r5, r1
 8009228:	f7f7 fc76 	bl	8000b18 <__aeabi_dcmpgt>
 800922c:	2800      	cmp	r0, #0
 800922e:	f040 80f9 	bne.w	8009424 <_dtoa_r+0x6bc>
 8009232:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009236:	4620      	mov	r0, r4
 8009238:	4629      	mov	r1, r5
 800923a:	f7f7 fc45 	bl	8000ac8 <__aeabi_dcmpeq>
 800923e:	b118      	cbz	r0, 8009248 <_dtoa_r+0x4e0>
 8009240:	f018 0f01 	tst.w	r8, #1
 8009244:	f040 80ee 	bne.w	8009424 <_dtoa_r+0x6bc>
 8009248:	4649      	mov	r1, r9
 800924a:	4658      	mov	r0, fp
 800924c:	f000 fc90 	bl	8009b70 <_Bfree>
 8009250:	2300      	movs	r3, #0
 8009252:	7033      	strb	r3, [r6, #0]
 8009254:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009256:	3701      	adds	r7, #1
 8009258:	601f      	str	r7, [r3, #0]
 800925a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800925c:	2b00      	cmp	r3, #0
 800925e:	f000 831d 	beq.w	800989c <_dtoa_r+0xb34>
 8009262:	601e      	str	r6, [r3, #0]
 8009264:	e31a      	b.n	800989c <_dtoa_r+0xb34>
 8009266:	07e2      	lsls	r2, r4, #31
 8009268:	d505      	bpl.n	8009276 <_dtoa_r+0x50e>
 800926a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800926e:	f7f7 f9c3 	bl	80005f8 <__aeabi_dmul>
 8009272:	3601      	adds	r6, #1
 8009274:	2301      	movs	r3, #1
 8009276:	1064      	asrs	r4, r4, #1
 8009278:	3508      	adds	r5, #8
 800927a:	e73f      	b.n	80090fc <_dtoa_r+0x394>
 800927c:	2602      	movs	r6, #2
 800927e:	e742      	b.n	8009106 <_dtoa_r+0x39e>
 8009280:	9c07      	ldr	r4, [sp, #28]
 8009282:	9704      	str	r7, [sp, #16]
 8009284:	e761      	b.n	800914a <_dtoa_r+0x3e2>
 8009286:	4b27      	ldr	r3, [pc, #156]	@ (8009324 <_dtoa_r+0x5bc>)
 8009288:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800928a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800928e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009292:	4454      	add	r4, sl
 8009294:	2900      	cmp	r1, #0
 8009296:	d053      	beq.n	8009340 <_dtoa_r+0x5d8>
 8009298:	4928      	ldr	r1, [pc, #160]	@ (800933c <_dtoa_r+0x5d4>)
 800929a:	2000      	movs	r0, #0
 800929c:	f7f7 fad6 	bl	800084c <__aeabi_ddiv>
 80092a0:	4633      	mov	r3, r6
 80092a2:	462a      	mov	r2, r5
 80092a4:	f7f6 fff0 	bl	8000288 <__aeabi_dsub>
 80092a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80092ac:	4656      	mov	r6, sl
 80092ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092b2:	f7f7 fc51 	bl	8000b58 <__aeabi_d2iz>
 80092b6:	4605      	mov	r5, r0
 80092b8:	f7f7 f934 	bl	8000524 <__aeabi_i2d>
 80092bc:	4602      	mov	r2, r0
 80092be:	460b      	mov	r3, r1
 80092c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092c4:	f7f6 ffe0 	bl	8000288 <__aeabi_dsub>
 80092c8:	3530      	adds	r5, #48	@ 0x30
 80092ca:	4602      	mov	r2, r0
 80092cc:	460b      	mov	r3, r1
 80092ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80092d2:	f806 5b01 	strb.w	r5, [r6], #1
 80092d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80092da:	f7f7 fbff 	bl	8000adc <__aeabi_dcmplt>
 80092de:	2800      	cmp	r0, #0
 80092e0:	d171      	bne.n	80093c6 <_dtoa_r+0x65e>
 80092e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092e6:	4911      	ldr	r1, [pc, #68]	@ (800932c <_dtoa_r+0x5c4>)
 80092e8:	2000      	movs	r0, #0
 80092ea:	f7f6 ffcd 	bl	8000288 <__aeabi_dsub>
 80092ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80092f2:	f7f7 fbf3 	bl	8000adc <__aeabi_dcmplt>
 80092f6:	2800      	cmp	r0, #0
 80092f8:	f040 8095 	bne.w	8009426 <_dtoa_r+0x6be>
 80092fc:	42a6      	cmp	r6, r4
 80092fe:	f43f af50 	beq.w	80091a2 <_dtoa_r+0x43a>
 8009302:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009306:	4b0a      	ldr	r3, [pc, #40]	@ (8009330 <_dtoa_r+0x5c8>)
 8009308:	2200      	movs	r2, #0
 800930a:	f7f7 f975 	bl	80005f8 <__aeabi_dmul>
 800930e:	4b08      	ldr	r3, [pc, #32]	@ (8009330 <_dtoa_r+0x5c8>)
 8009310:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009314:	2200      	movs	r2, #0
 8009316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800931a:	f7f7 f96d 	bl	80005f8 <__aeabi_dmul>
 800931e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009322:	e7c4      	b.n	80092ae <_dtoa_r+0x546>
 8009324:	0800b9d0 	.word	0x0800b9d0
 8009328:	0800b9a8 	.word	0x0800b9a8
 800932c:	3ff00000 	.word	0x3ff00000
 8009330:	40240000 	.word	0x40240000
 8009334:	401c0000 	.word	0x401c0000
 8009338:	40140000 	.word	0x40140000
 800933c:	3fe00000 	.word	0x3fe00000
 8009340:	4631      	mov	r1, r6
 8009342:	4628      	mov	r0, r5
 8009344:	f7f7 f958 	bl	80005f8 <__aeabi_dmul>
 8009348:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800934c:	9415      	str	r4, [sp, #84]	@ 0x54
 800934e:	4656      	mov	r6, sl
 8009350:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009354:	f7f7 fc00 	bl	8000b58 <__aeabi_d2iz>
 8009358:	4605      	mov	r5, r0
 800935a:	f7f7 f8e3 	bl	8000524 <__aeabi_i2d>
 800935e:	4602      	mov	r2, r0
 8009360:	460b      	mov	r3, r1
 8009362:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009366:	f7f6 ff8f 	bl	8000288 <__aeabi_dsub>
 800936a:	3530      	adds	r5, #48	@ 0x30
 800936c:	f806 5b01 	strb.w	r5, [r6], #1
 8009370:	4602      	mov	r2, r0
 8009372:	460b      	mov	r3, r1
 8009374:	42a6      	cmp	r6, r4
 8009376:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800937a:	f04f 0200 	mov.w	r2, #0
 800937e:	d124      	bne.n	80093ca <_dtoa_r+0x662>
 8009380:	4bac      	ldr	r3, [pc, #688]	@ (8009634 <_dtoa_r+0x8cc>)
 8009382:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009386:	f7f6 ff81 	bl	800028c <__adddf3>
 800938a:	4602      	mov	r2, r0
 800938c:	460b      	mov	r3, r1
 800938e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009392:	f7f7 fbc1 	bl	8000b18 <__aeabi_dcmpgt>
 8009396:	2800      	cmp	r0, #0
 8009398:	d145      	bne.n	8009426 <_dtoa_r+0x6be>
 800939a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800939e:	49a5      	ldr	r1, [pc, #660]	@ (8009634 <_dtoa_r+0x8cc>)
 80093a0:	2000      	movs	r0, #0
 80093a2:	f7f6 ff71 	bl	8000288 <__aeabi_dsub>
 80093a6:	4602      	mov	r2, r0
 80093a8:	460b      	mov	r3, r1
 80093aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093ae:	f7f7 fb95 	bl	8000adc <__aeabi_dcmplt>
 80093b2:	2800      	cmp	r0, #0
 80093b4:	f43f aef5 	beq.w	80091a2 <_dtoa_r+0x43a>
 80093b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80093ba:	1e73      	subs	r3, r6, #1
 80093bc:	9315      	str	r3, [sp, #84]	@ 0x54
 80093be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80093c2:	2b30      	cmp	r3, #48	@ 0x30
 80093c4:	d0f8      	beq.n	80093b8 <_dtoa_r+0x650>
 80093c6:	9f04      	ldr	r7, [sp, #16]
 80093c8:	e73e      	b.n	8009248 <_dtoa_r+0x4e0>
 80093ca:	4b9b      	ldr	r3, [pc, #620]	@ (8009638 <_dtoa_r+0x8d0>)
 80093cc:	f7f7 f914 	bl	80005f8 <__aeabi_dmul>
 80093d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093d4:	e7bc      	b.n	8009350 <_dtoa_r+0x5e8>
 80093d6:	d10c      	bne.n	80093f2 <_dtoa_r+0x68a>
 80093d8:	4b98      	ldr	r3, [pc, #608]	@ (800963c <_dtoa_r+0x8d4>)
 80093da:	2200      	movs	r2, #0
 80093dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093e0:	f7f7 f90a 	bl	80005f8 <__aeabi_dmul>
 80093e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093e8:	f7f7 fb8c 	bl	8000b04 <__aeabi_dcmpge>
 80093ec:	2800      	cmp	r0, #0
 80093ee:	f000 8157 	beq.w	80096a0 <_dtoa_r+0x938>
 80093f2:	2400      	movs	r4, #0
 80093f4:	4625      	mov	r5, r4
 80093f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093f8:	43db      	mvns	r3, r3
 80093fa:	9304      	str	r3, [sp, #16]
 80093fc:	4656      	mov	r6, sl
 80093fe:	2700      	movs	r7, #0
 8009400:	4621      	mov	r1, r4
 8009402:	4658      	mov	r0, fp
 8009404:	f000 fbb4 	bl	8009b70 <_Bfree>
 8009408:	2d00      	cmp	r5, #0
 800940a:	d0dc      	beq.n	80093c6 <_dtoa_r+0x65e>
 800940c:	b12f      	cbz	r7, 800941a <_dtoa_r+0x6b2>
 800940e:	42af      	cmp	r7, r5
 8009410:	d003      	beq.n	800941a <_dtoa_r+0x6b2>
 8009412:	4639      	mov	r1, r7
 8009414:	4658      	mov	r0, fp
 8009416:	f000 fbab 	bl	8009b70 <_Bfree>
 800941a:	4629      	mov	r1, r5
 800941c:	4658      	mov	r0, fp
 800941e:	f000 fba7 	bl	8009b70 <_Bfree>
 8009422:	e7d0      	b.n	80093c6 <_dtoa_r+0x65e>
 8009424:	9704      	str	r7, [sp, #16]
 8009426:	4633      	mov	r3, r6
 8009428:	461e      	mov	r6, r3
 800942a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800942e:	2a39      	cmp	r2, #57	@ 0x39
 8009430:	d107      	bne.n	8009442 <_dtoa_r+0x6da>
 8009432:	459a      	cmp	sl, r3
 8009434:	d1f8      	bne.n	8009428 <_dtoa_r+0x6c0>
 8009436:	9a04      	ldr	r2, [sp, #16]
 8009438:	3201      	adds	r2, #1
 800943a:	9204      	str	r2, [sp, #16]
 800943c:	2230      	movs	r2, #48	@ 0x30
 800943e:	f88a 2000 	strb.w	r2, [sl]
 8009442:	781a      	ldrb	r2, [r3, #0]
 8009444:	3201      	adds	r2, #1
 8009446:	701a      	strb	r2, [r3, #0]
 8009448:	e7bd      	b.n	80093c6 <_dtoa_r+0x65e>
 800944a:	4b7b      	ldr	r3, [pc, #492]	@ (8009638 <_dtoa_r+0x8d0>)
 800944c:	2200      	movs	r2, #0
 800944e:	f7f7 f8d3 	bl	80005f8 <__aeabi_dmul>
 8009452:	2200      	movs	r2, #0
 8009454:	2300      	movs	r3, #0
 8009456:	4604      	mov	r4, r0
 8009458:	460d      	mov	r5, r1
 800945a:	f7f7 fb35 	bl	8000ac8 <__aeabi_dcmpeq>
 800945e:	2800      	cmp	r0, #0
 8009460:	f43f aebb 	beq.w	80091da <_dtoa_r+0x472>
 8009464:	e6f0      	b.n	8009248 <_dtoa_r+0x4e0>
 8009466:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009468:	2a00      	cmp	r2, #0
 800946a:	f000 80db 	beq.w	8009624 <_dtoa_r+0x8bc>
 800946e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009470:	2a01      	cmp	r2, #1
 8009472:	f300 80bf 	bgt.w	80095f4 <_dtoa_r+0x88c>
 8009476:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009478:	2a00      	cmp	r2, #0
 800947a:	f000 80b7 	beq.w	80095ec <_dtoa_r+0x884>
 800947e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009482:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009484:	4646      	mov	r6, r8
 8009486:	9a08      	ldr	r2, [sp, #32]
 8009488:	2101      	movs	r1, #1
 800948a:	441a      	add	r2, r3
 800948c:	4658      	mov	r0, fp
 800948e:	4498      	add	r8, r3
 8009490:	9208      	str	r2, [sp, #32]
 8009492:	f000 fc21 	bl	8009cd8 <__i2b>
 8009496:	4605      	mov	r5, r0
 8009498:	b15e      	cbz	r6, 80094b2 <_dtoa_r+0x74a>
 800949a:	9b08      	ldr	r3, [sp, #32]
 800949c:	2b00      	cmp	r3, #0
 800949e:	dd08      	ble.n	80094b2 <_dtoa_r+0x74a>
 80094a0:	42b3      	cmp	r3, r6
 80094a2:	9a08      	ldr	r2, [sp, #32]
 80094a4:	bfa8      	it	ge
 80094a6:	4633      	movge	r3, r6
 80094a8:	eba8 0803 	sub.w	r8, r8, r3
 80094ac:	1af6      	subs	r6, r6, r3
 80094ae:	1ad3      	subs	r3, r2, r3
 80094b0:	9308      	str	r3, [sp, #32]
 80094b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094b4:	b1f3      	cbz	r3, 80094f4 <_dtoa_r+0x78c>
 80094b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f000 80b7 	beq.w	800962c <_dtoa_r+0x8c4>
 80094be:	b18c      	cbz	r4, 80094e4 <_dtoa_r+0x77c>
 80094c0:	4629      	mov	r1, r5
 80094c2:	4622      	mov	r2, r4
 80094c4:	4658      	mov	r0, fp
 80094c6:	f000 fcc7 	bl	8009e58 <__pow5mult>
 80094ca:	464a      	mov	r2, r9
 80094cc:	4601      	mov	r1, r0
 80094ce:	4605      	mov	r5, r0
 80094d0:	4658      	mov	r0, fp
 80094d2:	f000 fc17 	bl	8009d04 <__multiply>
 80094d6:	4649      	mov	r1, r9
 80094d8:	9004      	str	r0, [sp, #16]
 80094da:	4658      	mov	r0, fp
 80094dc:	f000 fb48 	bl	8009b70 <_Bfree>
 80094e0:	9b04      	ldr	r3, [sp, #16]
 80094e2:	4699      	mov	r9, r3
 80094e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094e6:	1b1a      	subs	r2, r3, r4
 80094e8:	d004      	beq.n	80094f4 <_dtoa_r+0x78c>
 80094ea:	4649      	mov	r1, r9
 80094ec:	4658      	mov	r0, fp
 80094ee:	f000 fcb3 	bl	8009e58 <__pow5mult>
 80094f2:	4681      	mov	r9, r0
 80094f4:	2101      	movs	r1, #1
 80094f6:	4658      	mov	r0, fp
 80094f8:	f000 fbee 	bl	8009cd8 <__i2b>
 80094fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094fe:	4604      	mov	r4, r0
 8009500:	2b00      	cmp	r3, #0
 8009502:	f000 81cf 	beq.w	80098a4 <_dtoa_r+0xb3c>
 8009506:	461a      	mov	r2, r3
 8009508:	4601      	mov	r1, r0
 800950a:	4658      	mov	r0, fp
 800950c:	f000 fca4 	bl	8009e58 <__pow5mult>
 8009510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009512:	2b01      	cmp	r3, #1
 8009514:	4604      	mov	r4, r0
 8009516:	f300 8095 	bgt.w	8009644 <_dtoa_r+0x8dc>
 800951a:	9b02      	ldr	r3, [sp, #8]
 800951c:	2b00      	cmp	r3, #0
 800951e:	f040 8087 	bne.w	8009630 <_dtoa_r+0x8c8>
 8009522:	9b03      	ldr	r3, [sp, #12]
 8009524:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009528:	2b00      	cmp	r3, #0
 800952a:	f040 8089 	bne.w	8009640 <_dtoa_r+0x8d8>
 800952e:	9b03      	ldr	r3, [sp, #12]
 8009530:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009534:	0d1b      	lsrs	r3, r3, #20
 8009536:	051b      	lsls	r3, r3, #20
 8009538:	b12b      	cbz	r3, 8009546 <_dtoa_r+0x7de>
 800953a:	9b08      	ldr	r3, [sp, #32]
 800953c:	3301      	adds	r3, #1
 800953e:	9308      	str	r3, [sp, #32]
 8009540:	f108 0801 	add.w	r8, r8, #1
 8009544:	2301      	movs	r3, #1
 8009546:	930a      	str	r3, [sp, #40]	@ 0x28
 8009548:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800954a:	2b00      	cmp	r3, #0
 800954c:	f000 81b0 	beq.w	80098b0 <_dtoa_r+0xb48>
 8009550:	6923      	ldr	r3, [r4, #16]
 8009552:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009556:	6918      	ldr	r0, [r3, #16]
 8009558:	f000 fb72 	bl	8009c40 <__hi0bits>
 800955c:	f1c0 0020 	rsb	r0, r0, #32
 8009560:	9b08      	ldr	r3, [sp, #32]
 8009562:	4418      	add	r0, r3
 8009564:	f010 001f 	ands.w	r0, r0, #31
 8009568:	d077      	beq.n	800965a <_dtoa_r+0x8f2>
 800956a:	f1c0 0320 	rsb	r3, r0, #32
 800956e:	2b04      	cmp	r3, #4
 8009570:	dd6b      	ble.n	800964a <_dtoa_r+0x8e2>
 8009572:	9b08      	ldr	r3, [sp, #32]
 8009574:	f1c0 001c 	rsb	r0, r0, #28
 8009578:	4403      	add	r3, r0
 800957a:	4480      	add	r8, r0
 800957c:	4406      	add	r6, r0
 800957e:	9308      	str	r3, [sp, #32]
 8009580:	f1b8 0f00 	cmp.w	r8, #0
 8009584:	dd05      	ble.n	8009592 <_dtoa_r+0x82a>
 8009586:	4649      	mov	r1, r9
 8009588:	4642      	mov	r2, r8
 800958a:	4658      	mov	r0, fp
 800958c:	f000 fcbe 	bl	8009f0c <__lshift>
 8009590:	4681      	mov	r9, r0
 8009592:	9b08      	ldr	r3, [sp, #32]
 8009594:	2b00      	cmp	r3, #0
 8009596:	dd05      	ble.n	80095a4 <_dtoa_r+0x83c>
 8009598:	4621      	mov	r1, r4
 800959a:	461a      	mov	r2, r3
 800959c:	4658      	mov	r0, fp
 800959e:	f000 fcb5 	bl	8009f0c <__lshift>
 80095a2:	4604      	mov	r4, r0
 80095a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d059      	beq.n	800965e <_dtoa_r+0x8f6>
 80095aa:	4621      	mov	r1, r4
 80095ac:	4648      	mov	r0, r9
 80095ae:	f000 fd19 	bl	8009fe4 <__mcmp>
 80095b2:	2800      	cmp	r0, #0
 80095b4:	da53      	bge.n	800965e <_dtoa_r+0x8f6>
 80095b6:	1e7b      	subs	r3, r7, #1
 80095b8:	9304      	str	r3, [sp, #16]
 80095ba:	4649      	mov	r1, r9
 80095bc:	2300      	movs	r3, #0
 80095be:	220a      	movs	r2, #10
 80095c0:	4658      	mov	r0, fp
 80095c2:	f000 faf7 	bl	8009bb4 <__multadd>
 80095c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095c8:	4681      	mov	r9, r0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f000 8172 	beq.w	80098b4 <_dtoa_r+0xb4c>
 80095d0:	2300      	movs	r3, #0
 80095d2:	4629      	mov	r1, r5
 80095d4:	220a      	movs	r2, #10
 80095d6:	4658      	mov	r0, fp
 80095d8:	f000 faec 	bl	8009bb4 <__multadd>
 80095dc:	9b00      	ldr	r3, [sp, #0]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	4605      	mov	r5, r0
 80095e2:	dc67      	bgt.n	80096b4 <_dtoa_r+0x94c>
 80095e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095e6:	2b02      	cmp	r3, #2
 80095e8:	dc41      	bgt.n	800966e <_dtoa_r+0x906>
 80095ea:	e063      	b.n	80096b4 <_dtoa_r+0x94c>
 80095ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80095ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80095f2:	e746      	b.n	8009482 <_dtoa_r+0x71a>
 80095f4:	9b07      	ldr	r3, [sp, #28]
 80095f6:	1e5c      	subs	r4, r3, #1
 80095f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095fa:	42a3      	cmp	r3, r4
 80095fc:	bfbf      	itttt	lt
 80095fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009600:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009602:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009604:	1ae3      	sublt	r3, r4, r3
 8009606:	bfb4      	ite	lt
 8009608:	18d2      	addlt	r2, r2, r3
 800960a:	1b1c      	subge	r4, r3, r4
 800960c:	9b07      	ldr	r3, [sp, #28]
 800960e:	bfbc      	itt	lt
 8009610:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009612:	2400      	movlt	r4, #0
 8009614:	2b00      	cmp	r3, #0
 8009616:	bfb5      	itete	lt
 8009618:	eba8 0603 	sublt.w	r6, r8, r3
 800961c:	9b07      	ldrge	r3, [sp, #28]
 800961e:	2300      	movlt	r3, #0
 8009620:	4646      	movge	r6, r8
 8009622:	e730      	b.n	8009486 <_dtoa_r+0x71e>
 8009624:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009626:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009628:	4646      	mov	r6, r8
 800962a:	e735      	b.n	8009498 <_dtoa_r+0x730>
 800962c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800962e:	e75c      	b.n	80094ea <_dtoa_r+0x782>
 8009630:	2300      	movs	r3, #0
 8009632:	e788      	b.n	8009546 <_dtoa_r+0x7de>
 8009634:	3fe00000 	.word	0x3fe00000
 8009638:	40240000 	.word	0x40240000
 800963c:	40140000 	.word	0x40140000
 8009640:	9b02      	ldr	r3, [sp, #8]
 8009642:	e780      	b.n	8009546 <_dtoa_r+0x7de>
 8009644:	2300      	movs	r3, #0
 8009646:	930a      	str	r3, [sp, #40]	@ 0x28
 8009648:	e782      	b.n	8009550 <_dtoa_r+0x7e8>
 800964a:	d099      	beq.n	8009580 <_dtoa_r+0x818>
 800964c:	9a08      	ldr	r2, [sp, #32]
 800964e:	331c      	adds	r3, #28
 8009650:	441a      	add	r2, r3
 8009652:	4498      	add	r8, r3
 8009654:	441e      	add	r6, r3
 8009656:	9208      	str	r2, [sp, #32]
 8009658:	e792      	b.n	8009580 <_dtoa_r+0x818>
 800965a:	4603      	mov	r3, r0
 800965c:	e7f6      	b.n	800964c <_dtoa_r+0x8e4>
 800965e:	9b07      	ldr	r3, [sp, #28]
 8009660:	9704      	str	r7, [sp, #16]
 8009662:	2b00      	cmp	r3, #0
 8009664:	dc20      	bgt.n	80096a8 <_dtoa_r+0x940>
 8009666:	9300      	str	r3, [sp, #0]
 8009668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800966a:	2b02      	cmp	r3, #2
 800966c:	dd1e      	ble.n	80096ac <_dtoa_r+0x944>
 800966e:	9b00      	ldr	r3, [sp, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	f47f aec0 	bne.w	80093f6 <_dtoa_r+0x68e>
 8009676:	4621      	mov	r1, r4
 8009678:	2205      	movs	r2, #5
 800967a:	4658      	mov	r0, fp
 800967c:	f000 fa9a 	bl	8009bb4 <__multadd>
 8009680:	4601      	mov	r1, r0
 8009682:	4604      	mov	r4, r0
 8009684:	4648      	mov	r0, r9
 8009686:	f000 fcad 	bl	8009fe4 <__mcmp>
 800968a:	2800      	cmp	r0, #0
 800968c:	f77f aeb3 	ble.w	80093f6 <_dtoa_r+0x68e>
 8009690:	4656      	mov	r6, sl
 8009692:	2331      	movs	r3, #49	@ 0x31
 8009694:	f806 3b01 	strb.w	r3, [r6], #1
 8009698:	9b04      	ldr	r3, [sp, #16]
 800969a:	3301      	adds	r3, #1
 800969c:	9304      	str	r3, [sp, #16]
 800969e:	e6ae      	b.n	80093fe <_dtoa_r+0x696>
 80096a0:	9c07      	ldr	r4, [sp, #28]
 80096a2:	9704      	str	r7, [sp, #16]
 80096a4:	4625      	mov	r5, r4
 80096a6:	e7f3      	b.n	8009690 <_dtoa_r+0x928>
 80096a8:	9b07      	ldr	r3, [sp, #28]
 80096aa:	9300      	str	r3, [sp, #0]
 80096ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	f000 8104 	beq.w	80098bc <_dtoa_r+0xb54>
 80096b4:	2e00      	cmp	r6, #0
 80096b6:	dd05      	ble.n	80096c4 <_dtoa_r+0x95c>
 80096b8:	4629      	mov	r1, r5
 80096ba:	4632      	mov	r2, r6
 80096bc:	4658      	mov	r0, fp
 80096be:	f000 fc25 	bl	8009f0c <__lshift>
 80096c2:	4605      	mov	r5, r0
 80096c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d05a      	beq.n	8009780 <_dtoa_r+0xa18>
 80096ca:	6869      	ldr	r1, [r5, #4]
 80096cc:	4658      	mov	r0, fp
 80096ce:	f000 fa0f 	bl	8009af0 <_Balloc>
 80096d2:	4606      	mov	r6, r0
 80096d4:	b928      	cbnz	r0, 80096e2 <_dtoa_r+0x97a>
 80096d6:	4b84      	ldr	r3, [pc, #528]	@ (80098e8 <_dtoa_r+0xb80>)
 80096d8:	4602      	mov	r2, r0
 80096da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80096de:	f7ff bb5a 	b.w	8008d96 <_dtoa_r+0x2e>
 80096e2:	692a      	ldr	r2, [r5, #16]
 80096e4:	3202      	adds	r2, #2
 80096e6:	0092      	lsls	r2, r2, #2
 80096e8:	f105 010c 	add.w	r1, r5, #12
 80096ec:	300c      	adds	r0, #12
 80096ee:	f001 f803 	bl	800a6f8 <memcpy>
 80096f2:	2201      	movs	r2, #1
 80096f4:	4631      	mov	r1, r6
 80096f6:	4658      	mov	r0, fp
 80096f8:	f000 fc08 	bl	8009f0c <__lshift>
 80096fc:	f10a 0301 	add.w	r3, sl, #1
 8009700:	9307      	str	r3, [sp, #28]
 8009702:	9b00      	ldr	r3, [sp, #0]
 8009704:	4453      	add	r3, sl
 8009706:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009708:	9b02      	ldr	r3, [sp, #8]
 800970a:	f003 0301 	and.w	r3, r3, #1
 800970e:	462f      	mov	r7, r5
 8009710:	930a      	str	r3, [sp, #40]	@ 0x28
 8009712:	4605      	mov	r5, r0
 8009714:	9b07      	ldr	r3, [sp, #28]
 8009716:	4621      	mov	r1, r4
 8009718:	3b01      	subs	r3, #1
 800971a:	4648      	mov	r0, r9
 800971c:	9300      	str	r3, [sp, #0]
 800971e:	f7ff fa98 	bl	8008c52 <quorem>
 8009722:	4639      	mov	r1, r7
 8009724:	9002      	str	r0, [sp, #8]
 8009726:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800972a:	4648      	mov	r0, r9
 800972c:	f000 fc5a 	bl	8009fe4 <__mcmp>
 8009730:	462a      	mov	r2, r5
 8009732:	9008      	str	r0, [sp, #32]
 8009734:	4621      	mov	r1, r4
 8009736:	4658      	mov	r0, fp
 8009738:	f000 fc70 	bl	800a01c <__mdiff>
 800973c:	68c2      	ldr	r2, [r0, #12]
 800973e:	4606      	mov	r6, r0
 8009740:	bb02      	cbnz	r2, 8009784 <_dtoa_r+0xa1c>
 8009742:	4601      	mov	r1, r0
 8009744:	4648      	mov	r0, r9
 8009746:	f000 fc4d 	bl	8009fe4 <__mcmp>
 800974a:	4602      	mov	r2, r0
 800974c:	4631      	mov	r1, r6
 800974e:	4658      	mov	r0, fp
 8009750:	920e      	str	r2, [sp, #56]	@ 0x38
 8009752:	f000 fa0d 	bl	8009b70 <_Bfree>
 8009756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009758:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800975a:	9e07      	ldr	r6, [sp, #28]
 800975c:	ea43 0102 	orr.w	r1, r3, r2
 8009760:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009762:	4319      	orrs	r1, r3
 8009764:	d110      	bne.n	8009788 <_dtoa_r+0xa20>
 8009766:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800976a:	d029      	beq.n	80097c0 <_dtoa_r+0xa58>
 800976c:	9b08      	ldr	r3, [sp, #32]
 800976e:	2b00      	cmp	r3, #0
 8009770:	dd02      	ble.n	8009778 <_dtoa_r+0xa10>
 8009772:	9b02      	ldr	r3, [sp, #8]
 8009774:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009778:	9b00      	ldr	r3, [sp, #0]
 800977a:	f883 8000 	strb.w	r8, [r3]
 800977e:	e63f      	b.n	8009400 <_dtoa_r+0x698>
 8009780:	4628      	mov	r0, r5
 8009782:	e7bb      	b.n	80096fc <_dtoa_r+0x994>
 8009784:	2201      	movs	r2, #1
 8009786:	e7e1      	b.n	800974c <_dtoa_r+0x9e4>
 8009788:	9b08      	ldr	r3, [sp, #32]
 800978a:	2b00      	cmp	r3, #0
 800978c:	db04      	blt.n	8009798 <_dtoa_r+0xa30>
 800978e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009790:	430b      	orrs	r3, r1
 8009792:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009794:	430b      	orrs	r3, r1
 8009796:	d120      	bne.n	80097da <_dtoa_r+0xa72>
 8009798:	2a00      	cmp	r2, #0
 800979a:	dded      	ble.n	8009778 <_dtoa_r+0xa10>
 800979c:	4649      	mov	r1, r9
 800979e:	2201      	movs	r2, #1
 80097a0:	4658      	mov	r0, fp
 80097a2:	f000 fbb3 	bl	8009f0c <__lshift>
 80097a6:	4621      	mov	r1, r4
 80097a8:	4681      	mov	r9, r0
 80097aa:	f000 fc1b 	bl	8009fe4 <__mcmp>
 80097ae:	2800      	cmp	r0, #0
 80097b0:	dc03      	bgt.n	80097ba <_dtoa_r+0xa52>
 80097b2:	d1e1      	bne.n	8009778 <_dtoa_r+0xa10>
 80097b4:	f018 0f01 	tst.w	r8, #1
 80097b8:	d0de      	beq.n	8009778 <_dtoa_r+0xa10>
 80097ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80097be:	d1d8      	bne.n	8009772 <_dtoa_r+0xa0a>
 80097c0:	9a00      	ldr	r2, [sp, #0]
 80097c2:	2339      	movs	r3, #57	@ 0x39
 80097c4:	7013      	strb	r3, [r2, #0]
 80097c6:	4633      	mov	r3, r6
 80097c8:	461e      	mov	r6, r3
 80097ca:	3b01      	subs	r3, #1
 80097cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80097d0:	2a39      	cmp	r2, #57	@ 0x39
 80097d2:	d052      	beq.n	800987a <_dtoa_r+0xb12>
 80097d4:	3201      	adds	r2, #1
 80097d6:	701a      	strb	r2, [r3, #0]
 80097d8:	e612      	b.n	8009400 <_dtoa_r+0x698>
 80097da:	2a00      	cmp	r2, #0
 80097dc:	dd07      	ble.n	80097ee <_dtoa_r+0xa86>
 80097de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80097e2:	d0ed      	beq.n	80097c0 <_dtoa_r+0xa58>
 80097e4:	9a00      	ldr	r2, [sp, #0]
 80097e6:	f108 0301 	add.w	r3, r8, #1
 80097ea:	7013      	strb	r3, [r2, #0]
 80097ec:	e608      	b.n	8009400 <_dtoa_r+0x698>
 80097ee:	9b07      	ldr	r3, [sp, #28]
 80097f0:	9a07      	ldr	r2, [sp, #28]
 80097f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80097f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d028      	beq.n	800984e <_dtoa_r+0xae6>
 80097fc:	4649      	mov	r1, r9
 80097fe:	2300      	movs	r3, #0
 8009800:	220a      	movs	r2, #10
 8009802:	4658      	mov	r0, fp
 8009804:	f000 f9d6 	bl	8009bb4 <__multadd>
 8009808:	42af      	cmp	r7, r5
 800980a:	4681      	mov	r9, r0
 800980c:	f04f 0300 	mov.w	r3, #0
 8009810:	f04f 020a 	mov.w	r2, #10
 8009814:	4639      	mov	r1, r7
 8009816:	4658      	mov	r0, fp
 8009818:	d107      	bne.n	800982a <_dtoa_r+0xac2>
 800981a:	f000 f9cb 	bl	8009bb4 <__multadd>
 800981e:	4607      	mov	r7, r0
 8009820:	4605      	mov	r5, r0
 8009822:	9b07      	ldr	r3, [sp, #28]
 8009824:	3301      	adds	r3, #1
 8009826:	9307      	str	r3, [sp, #28]
 8009828:	e774      	b.n	8009714 <_dtoa_r+0x9ac>
 800982a:	f000 f9c3 	bl	8009bb4 <__multadd>
 800982e:	4629      	mov	r1, r5
 8009830:	4607      	mov	r7, r0
 8009832:	2300      	movs	r3, #0
 8009834:	220a      	movs	r2, #10
 8009836:	4658      	mov	r0, fp
 8009838:	f000 f9bc 	bl	8009bb4 <__multadd>
 800983c:	4605      	mov	r5, r0
 800983e:	e7f0      	b.n	8009822 <_dtoa_r+0xaba>
 8009840:	9b00      	ldr	r3, [sp, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	bfcc      	ite	gt
 8009846:	461e      	movgt	r6, r3
 8009848:	2601      	movle	r6, #1
 800984a:	4456      	add	r6, sl
 800984c:	2700      	movs	r7, #0
 800984e:	4649      	mov	r1, r9
 8009850:	2201      	movs	r2, #1
 8009852:	4658      	mov	r0, fp
 8009854:	f000 fb5a 	bl	8009f0c <__lshift>
 8009858:	4621      	mov	r1, r4
 800985a:	4681      	mov	r9, r0
 800985c:	f000 fbc2 	bl	8009fe4 <__mcmp>
 8009860:	2800      	cmp	r0, #0
 8009862:	dcb0      	bgt.n	80097c6 <_dtoa_r+0xa5e>
 8009864:	d102      	bne.n	800986c <_dtoa_r+0xb04>
 8009866:	f018 0f01 	tst.w	r8, #1
 800986a:	d1ac      	bne.n	80097c6 <_dtoa_r+0xa5e>
 800986c:	4633      	mov	r3, r6
 800986e:	461e      	mov	r6, r3
 8009870:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009874:	2a30      	cmp	r2, #48	@ 0x30
 8009876:	d0fa      	beq.n	800986e <_dtoa_r+0xb06>
 8009878:	e5c2      	b.n	8009400 <_dtoa_r+0x698>
 800987a:	459a      	cmp	sl, r3
 800987c:	d1a4      	bne.n	80097c8 <_dtoa_r+0xa60>
 800987e:	9b04      	ldr	r3, [sp, #16]
 8009880:	3301      	adds	r3, #1
 8009882:	9304      	str	r3, [sp, #16]
 8009884:	2331      	movs	r3, #49	@ 0x31
 8009886:	f88a 3000 	strb.w	r3, [sl]
 800988a:	e5b9      	b.n	8009400 <_dtoa_r+0x698>
 800988c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800988e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80098ec <_dtoa_r+0xb84>
 8009892:	b11b      	cbz	r3, 800989c <_dtoa_r+0xb34>
 8009894:	f10a 0308 	add.w	r3, sl, #8
 8009898:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800989a:	6013      	str	r3, [r2, #0]
 800989c:	4650      	mov	r0, sl
 800989e:	b019      	add	sp, #100	@ 0x64
 80098a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	f77f ae37 	ble.w	800951a <_dtoa_r+0x7b2>
 80098ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80098b0:	2001      	movs	r0, #1
 80098b2:	e655      	b.n	8009560 <_dtoa_r+0x7f8>
 80098b4:	9b00      	ldr	r3, [sp, #0]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	f77f aed6 	ble.w	8009668 <_dtoa_r+0x900>
 80098bc:	4656      	mov	r6, sl
 80098be:	4621      	mov	r1, r4
 80098c0:	4648      	mov	r0, r9
 80098c2:	f7ff f9c6 	bl	8008c52 <quorem>
 80098c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80098ca:	f806 8b01 	strb.w	r8, [r6], #1
 80098ce:	9b00      	ldr	r3, [sp, #0]
 80098d0:	eba6 020a 	sub.w	r2, r6, sl
 80098d4:	4293      	cmp	r3, r2
 80098d6:	ddb3      	ble.n	8009840 <_dtoa_r+0xad8>
 80098d8:	4649      	mov	r1, r9
 80098da:	2300      	movs	r3, #0
 80098dc:	220a      	movs	r2, #10
 80098de:	4658      	mov	r0, fp
 80098e0:	f000 f968 	bl	8009bb4 <__multadd>
 80098e4:	4681      	mov	r9, r0
 80098e6:	e7ea      	b.n	80098be <_dtoa_r+0xb56>
 80098e8:	0800b930 	.word	0x0800b930
 80098ec:	0800b8b4 	.word	0x0800b8b4

080098f0 <_free_r>:
 80098f0:	b538      	push	{r3, r4, r5, lr}
 80098f2:	4605      	mov	r5, r0
 80098f4:	2900      	cmp	r1, #0
 80098f6:	d041      	beq.n	800997c <_free_r+0x8c>
 80098f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098fc:	1f0c      	subs	r4, r1, #4
 80098fe:	2b00      	cmp	r3, #0
 8009900:	bfb8      	it	lt
 8009902:	18e4      	addlt	r4, r4, r3
 8009904:	f000 f8e8 	bl	8009ad8 <__malloc_lock>
 8009908:	4a1d      	ldr	r2, [pc, #116]	@ (8009980 <_free_r+0x90>)
 800990a:	6813      	ldr	r3, [r2, #0]
 800990c:	b933      	cbnz	r3, 800991c <_free_r+0x2c>
 800990e:	6063      	str	r3, [r4, #4]
 8009910:	6014      	str	r4, [r2, #0]
 8009912:	4628      	mov	r0, r5
 8009914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009918:	f000 b8e4 	b.w	8009ae4 <__malloc_unlock>
 800991c:	42a3      	cmp	r3, r4
 800991e:	d908      	bls.n	8009932 <_free_r+0x42>
 8009920:	6820      	ldr	r0, [r4, #0]
 8009922:	1821      	adds	r1, r4, r0
 8009924:	428b      	cmp	r3, r1
 8009926:	bf01      	itttt	eq
 8009928:	6819      	ldreq	r1, [r3, #0]
 800992a:	685b      	ldreq	r3, [r3, #4]
 800992c:	1809      	addeq	r1, r1, r0
 800992e:	6021      	streq	r1, [r4, #0]
 8009930:	e7ed      	b.n	800990e <_free_r+0x1e>
 8009932:	461a      	mov	r2, r3
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	b10b      	cbz	r3, 800993c <_free_r+0x4c>
 8009938:	42a3      	cmp	r3, r4
 800993a:	d9fa      	bls.n	8009932 <_free_r+0x42>
 800993c:	6811      	ldr	r1, [r2, #0]
 800993e:	1850      	adds	r0, r2, r1
 8009940:	42a0      	cmp	r0, r4
 8009942:	d10b      	bne.n	800995c <_free_r+0x6c>
 8009944:	6820      	ldr	r0, [r4, #0]
 8009946:	4401      	add	r1, r0
 8009948:	1850      	adds	r0, r2, r1
 800994a:	4283      	cmp	r3, r0
 800994c:	6011      	str	r1, [r2, #0]
 800994e:	d1e0      	bne.n	8009912 <_free_r+0x22>
 8009950:	6818      	ldr	r0, [r3, #0]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	6053      	str	r3, [r2, #4]
 8009956:	4408      	add	r0, r1
 8009958:	6010      	str	r0, [r2, #0]
 800995a:	e7da      	b.n	8009912 <_free_r+0x22>
 800995c:	d902      	bls.n	8009964 <_free_r+0x74>
 800995e:	230c      	movs	r3, #12
 8009960:	602b      	str	r3, [r5, #0]
 8009962:	e7d6      	b.n	8009912 <_free_r+0x22>
 8009964:	6820      	ldr	r0, [r4, #0]
 8009966:	1821      	adds	r1, r4, r0
 8009968:	428b      	cmp	r3, r1
 800996a:	bf04      	itt	eq
 800996c:	6819      	ldreq	r1, [r3, #0]
 800996e:	685b      	ldreq	r3, [r3, #4]
 8009970:	6063      	str	r3, [r4, #4]
 8009972:	bf04      	itt	eq
 8009974:	1809      	addeq	r1, r1, r0
 8009976:	6021      	streq	r1, [r4, #0]
 8009978:	6054      	str	r4, [r2, #4]
 800997a:	e7ca      	b.n	8009912 <_free_r+0x22>
 800997c:	bd38      	pop	{r3, r4, r5, pc}
 800997e:	bf00      	nop
 8009980:	20000584 	.word	0x20000584

08009984 <malloc>:
 8009984:	4b02      	ldr	r3, [pc, #8]	@ (8009990 <malloc+0xc>)
 8009986:	4601      	mov	r1, r0
 8009988:	6818      	ldr	r0, [r3, #0]
 800998a:	f000 b825 	b.w	80099d8 <_malloc_r>
 800998e:	bf00      	nop
 8009990:	2000001c 	.word	0x2000001c

08009994 <sbrk_aligned>:
 8009994:	b570      	push	{r4, r5, r6, lr}
 8009996:	4e0f      	ldr	r6, [pc, #60]	@ (80099d4 <sbrk_aligned+0x40>)
 8009998:	460c      	mov	r4, r1
 800999a:	6831      	ldr	r1, [r6, #0]
 800999c:	4605      	mov	r5, r0
 800999e:	b911      	cbnz	r1, 80099a6 <sbrk_aligned+0x12>
 80099a0:	f000 fe9a 	bl	800a6d8 <_sbrk_r>
 80099a4:	6030      	str	r0, [r6, #0]
 80099a6:	4621      	mov	r1, r4
 80099a8:	4628      	mov	r0, r5
 80099aa:	f000 fe95 	bl	800a6d8 <_sbrk_r>
 80099ae:	1c43      	adds	r3, r0, #1
 80099b0:	d103      	bne.n	80099ba <sbrk_aligned+0x26>
 80099b2:	f04f 34ff 	mov.w	r4, #4294967295
 80099b6:	4620      	mov	r0, r4
 80099b8:	bd70      	pop	{r4, r5, r6, pc}
 80099ba:	1cc4      	adds	r4, r0, #3
 80099bc:	f024 0403 	bic.w	r4, r4, #3
 80099c0:	42a0      	cmp	r0, r4
 80099c2:	d0f8      	beq.n	80099b6 <sbrk_aligned+0x22>
 80099c4:	1a21      	subs	r1, r4, r0
 80099c6:	4628      	mov	r0, r5
 80099c8:	f000 fe86 	bl	800a6d8 <_sbrk_r>
 80099cc:	3001      	adds	r0, #1
 80099ce:	d1f2      	bne.n	80099b6 <sbrk_aligned+0x22>
 80099d0:	e7ef      	b.n	80099b2 <sbrk_aligned+0x1e>
 80099d2:	bf00      	nop
 80099d4:	20000580 	.word	0x20000580

080099d8 <_malloc_r>:
 80099d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099dc:	1ccd      	adds	r5, r1, #3
 80099de:	f025 0503 	bic.w	r5, r5, #3
 80099e2:	3508      	adds	r5, #8
 80099e4:	2d0c      	cmp	r5, #12
 80099e6:	bf38      	it	cc
 80099e8:	250c      	movcc	r5, #12
 80099ea:	2d00      	cmp	r5, #0
 80099ec:	4606      	mov	r6, r0
 80099ee:	db01      	blt.n	80099f4 <_malloc_r+0x1c>
 80099f0:	42a9      	cmp	r1, r5
 80099f2:	d904      	bls.n	80099fe <_malloc_r+0x26>
 80099f4:	230c      	movs	r3, #12
 80099f6:	6033      	str	r3, [r6, #0]
 80099f8:	2000      	movs	r0, #0
 80099fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009ad4 <_malloc_r+0xfc>
 8009a02:	f000 f869 	bl	8009ad8 <__malloc_lock>
 8009a06:	f8d8 3000 	ldr.w	r3, [r8]
 8009a0a:	461c      	mov	r4, r3
 8009a0c:	bb44      	cbnz	r4, 8009a60 <_malloc_r+0x88>
 8009a0e:	4629      	mov	r1, r5
 8009a10:	4630      	mov	r0, r6
 8009a12:	f7ff ffbf 	bl	8009994 <sbrk_aligned>
 8009a16:	1c43      	adds	r3, r0, #1
 8009a18:	4604      	mov	r4, r0
 8009a1a:	d158      	bne.n	8009ace <_malloc_r+0xf6>
 8009a1c:	f8d8 4000 	ldr.w	r4, [r8]
 8009a20:	4627      	mov	r7, r4
 8009a22:	2f00      	cmp	r7, #0
 8009a24:	d143      	bne.n	8009aae <_malloc_r+0xd6>
 8009a26:	2c00      	cmp	r4, #0
 8009a28:	d04b      	beq.n	8009ac2 <_malloc_r+0xea>
 8009a2a:	6823      	ldr	r3, [r4, #0]
 8009a2c:	4639      	mov	r1, r7
 8009a2e:	4630      	mov	r0, r6
 8009a30:	eb04 0903 	add.w	r9, r4, r3
 8009a34:	f000 fe50 	bl	800a6d8 <_sbrk_r>
 8009a38:	4581      	cmp	r9, r0
 8009a3a:	d142      	bne.n	8009ac2 <_malloc_r+0xea>
 8009a3c:	6821      	ldr	r1, [r4, #0]
 8009a3e:	1a6d      	subs	r5, r5, r1
 8009a40:	4629      	mov	r1, r5
 8009a42:	4630      	mov	r0, r6
 8009a44:	f7ff ffa6 	bl	8009994 <sbrk_aligned>
 8009a48:	3001      	adds	r0, #1
 8009a4a:	d03a      	beq.n	8009ac2 <_malloc_r+0xea>
 8009a4c:	6823      	ldr	r3, [r4, #0]
 8009a4e:	442b      	add	r3, r5
 8009a50:	6023      	str	r3, [r4, #0]
 8009a52:	f8d8 3000 	ldr.w	r3, [r8]
 8009a56:	685a      	ldr	r2, [r3, #4]
 8009a58:	bb62      	cbnz	r2, 8009ab4 <_malloc_r+0xdc>
 8009a5a:	f8c8 7000 	str.w	r7, [r8]
 8009a5e:	e00f      	b.n	8009a80 <_malloc_r+0xa8>
 8009a60:	6822      	ldr	r2, [r4, #0]
 8009a62:	1b52      	subs	r2, r2, r5
 8009a64:	d420      	bmi.n	8009aa8 <_malloc_r+0xd0>
 8009a66:	2a0b      	cmp	r2, #11
 8009a68:	d917      	bls.n	8009a9a <_malloc_r+0xc2>
 8009a6a:	1961      	adds	r1, r4, r5
 8009a6c:	42a3      	cmp	r3, r4
 8009a6e:	6025      	str	r5, [r4, #0]
 8009a70:	bf18      	it	ne
 8009a72:	6059      	strne	r1, [r3, #4]
 8009a74:	6863      	ldr	r3, [r4, #4]
 8009a76:	bf08      	it	eq
 8009a78:	f8c8 1000 	streq.w	r1, [r8]
 8009a7c:	5162      	str	r2, [r4, r5]
 8009a7e:	604b      	str	r3, [r1, #4]
 8009a80:	4630      	mov	r0, r6
 8009a82:	f000 f82f 	bl	8009ae4 <__malloc_unlock>
 8009a86:	f104 000b 	add.w	r0, r4, #11
 8009a8a:	1d23      	adds	r3, r4, #4
 8009a8c:	f020 0007 	bic.w	r0, r0, #7
 8009a90:	1ac2      	subs	r2, r0, r3
 8009a92:	bf1c      	itt	ne
 8009a94:	1a1b      	subne	r3, r3, r0
 8009a96:	50a3      	strne	r3, [r4, r2]
 8009a98:	e7af      	b.n	80099fa <_malloc_r+0x22>
 8009a9a:	6862      	ldr	r2, [r4, #4]
 8009a9c:	42a3      	cmp	r3, r4
 8009a9e:	bf0c      	ite	eq
 8009aa0:	f8c8 2000 	streq.w	r2, [r8]
 8009aa4:	605a      	strne	r2, [r3, #4]
 8009aa6:	e7eb      	b.n	8009a80 <_malloc_r+0xa8>
 8009aa8:	4623      	mov	r3, r4
 8009aaa:	6864      	ldr	r4, [r4, #4]
 8009aac:	e7ae      	b.n	8009a0c <_malloc_r+0x34>
 8009aae:	463c      	mov	r4, r7
 8009ab0:	687f      	ldr	r7, [r7, #4]
 8009ab2:	e7b6      	b.n	8009a22 <_malloc_r+0x4a>
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	42a3      	cmp	r3, r4
 8009aba:	d1fb      	bne.n	8009ab4 <_malloc_r+0xdc>
 8009abc:	2300      	movs	r3, #0
 8009abe:	6053      	str	r3, [r2, #4]
 8009ac0:	e7de      	b.n	8009a80 <_malloc_r+0xa8>
 8009ac2:	230c      	movs	r3, #12
 8009ac4:	6033      	str	r3, [r6, #0]
 8009ac6:	4630      	mov	r0, r6
 8009ac8:	f000 f80c 	bl	8009ae4 <__malloc_unlock>
 8009acc:	e794      	b.n	80099f8 <_malloc_r+0x20>
 8009ace:	6005      	str	r5, [r0, #0]
 8009ad0:	e7d6      	b.n	8009a80 <_malloc_r+0xa8>
 8009ad2:	bf00      	nop
 8009ad4:	20000584 	.word	0x20000584

08009ad8 <__malloc_lock>:
 8009ad8:	4801      	ldr	r0, [pc, #4]	@ (8009ae0 <__malloc_lock+0x8>)
 8009ada:	f7ff b8b8 	b.w	8008c4e <__retarget_lock_acquire_recursive>
 8009ade:	bf00      	nop
 8009ae0:	2000057c 	.word	0x2000057c

08009ae4 <__malloc_unlock>:
 8009ae4:	4801      	ldr	r0, [pc, #4]	@ (8009aec <__malloc_unlock+0x8>)
 8009ae6:	f7ff b8b3 	b.w	8008c50 <__retarget_lock_release_recursive>
 8009aea:	bf00      	nop
 8009aec:	2000057c 	.word	0x2000057c

08009af0 <_Balloc>:
 8009af0:	b570      	push	{r4, r5, r6, lr}
 8009af2:	69c6      	ldr	r6, [r0, #28]
 8009af4:	4604      	mov	r4, r0
 8009af6:	460d      	mov	r5, r1
 8009af8:	b976      	cbnz	r6, 8009b18 <_Balloc+0x28>
 8009afa:	2010      	movs	r0, #16
 8009afc:	f7ff ff42 	bl	8009984 <malloc>
 8009b00:	4602      	mov	r2, r0
 8009b02:	61e0      	str	r0, [r4, #28]
 8009b04:	b920      	cbnz	r0, 8009b10 <_Balloc+0x20>
 8009b06:	4b18      	ldr	r3, [pc, #96]	@ (8009b68 <_Balloc+0x78>)
 8009b08:	4818      	ldr	r0, [pc, #96]	@ (8009b6c <_Balloc+0x7c>)
 8009b0a:	216b      	movs	r1, #107	@ 0x6b
 8009b0c:	f000 fe02 	bl	800a714 <__assert_func>
 8009b10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b14:	6006      	str	r6, [r0, #0]
 8009b16:	60c6      	str	r6, [r0, #12]
 8009b18:	69e6      	ldr	r6, [r4, #28]
 8009b1a:	68f3      	ldr	r3, [r6, #12]
 8009b1c:	b183      	cbz	r3, 8009b40 <_Balloc+0x50>
 8009b1e:	69e3      	ldr	r3, [r4, #28]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b26:	b9b8      	cbnz	r0, 8009b58 <_Balloc+0x68>
 8009b28:	2101      	movs	r1, #1
 8009b2a:	fa01 f605 	lsl.w	r6, r1, r5
 8009b2e:	1d72      	adds	r2, r6, #5
 8009b30:	0092      	lsls	r2, r2, #2
 8009b32:	4620      	mov	r0, r4
 8009b34:	f000 fe0c 	bl	800a750 <_calloc_r>
 8009b38:	b160      	cbz	r0, 8009b54 <_Balloc+0x64>
 8009b3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b3e:	e00e      	b.n	8009b5e <_Balloc+0x6e>
 8009b40:	2221      	movs	r2, #33	@ 0x21
 8009b42:	2104      	movs	r1, #4
 8009b44:	4620      	mov	r0, r4
 8009b46:	f000 fe03 	bl	800a750 <_calloc_r>
 8009b4a:	69e3      	ldr	r3, [r4, #28]
 8009b4c:	60f0      	str	r0, [r6, #12]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1e4      	bne.n	8009b1e <_Balloc+0x2e>
 8009b54:	2000      	movs	r0, #0
 8009b56:	bd70      	pop	{r4, r5, r6, pc}
 8009b58:	6802      	ldr	r2, [r0, #0]
 8009b5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b5e:	2300      	movs	r3, #0
 8009b60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b64:	e7f7      	b.n	8009b56 <_Balloc+0x66>
 8009b66:	bf00      	nop
 8009b68:	0800b8c1 	.word	0x0800b8c1
 8009b6c:	0800b941 	.word	0x0800b941

08009b70 <_Bfree>:
 8009b70:	b570      	push	{r4, r5, r6, lr}
 8009b72:	69c6      	ldr	r6, [r0, #28]
 8009b74:	4605      	mov	r5, r0
 8009b76:	460c      	mov	r4, r1
 8009b78:	b976      	cbnz	r6, 8009b98 <_Bfree+0x28>
 8009b7a:	2010      	movs	r0, #16
 8009b7c:	f7ff ff02 	bl	8009984 <malloc>
 8009b80:	4602      	mov	r2, r0
 8009b82:	61e8      	str	r0, [r5, #28]
 8009b84:	b920      	cbnz	r0, 8009b90 <_Bfree+0x20>
 8009b86:	4b09      	ldr	r3, [pc, #36]	@ (8009bac <_Bfree+0x3c>)
 8009b88:	4809      	ldr	r0, [pc, #36]	@ (8009bb0 <_Bfree+0x40>)
 8009b8a:	218f      	movs	r1, #143	@ 0x8f
 8009b8c:	f000 fdc2 	bl	800a714 <__assert_func>
 8009b90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b94:	6006      	str	r6, [r0, #0]
 8009b96:	60c6      	str	r6, [r0, #12]
 8009b98:	b13c      	cbz	r4, 8009baa <_Bfree+0x3a>
 8009b9a:	69eb      	ldr	r3, [r5, #28]
 8009b9c:	6862      	ldr	r2, [r4, #4]
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ba4:	6021      	str	r1, [r4, #0]
 8009ba6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009baa:	bd70      	pop	{r4, r5, r6, pc}
 8009bac:	0800b8c1 	.word	0x0800b8c1
 8009bb0:	0800b941 	.word	0x0800b941

08009bb4 <__multadd>:
 8009bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bb8:	690d      	ldr	r5, [r1, #16]
 8009bba:	4607      	mov	r7, r0
 8009bbc:	460c      	mov	r4, r1
 8009bbe:	461e      	mov	r6, r3
 8009bc0:	f101 0c14 	add.w	ip, r1, #20
 8009bc4:	2000      	movs	r0, #0
 8009bc6:	f8dc 3000 	ldr.w	r3, [ip]
 8009bca:	b299      	uxth	r1, r3
 8009bcc:	fb02 6101 	mla	r1, r2, r1, r6
 8009bd0:	0c1e      	lsrs	r6, r3, #16
 8009bd2:	0c0b      	lsrs	r3, r1, #16
 8009bd4:	fb02 3306 	mla	r3, r2, r6, r3
 8009bd8:	b289      	uxth	r1, r1
 8009bda:	3001      	adds	r0, #1
 8009bdc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009be0:	4285      	cmp	r5, r0
 8009be2:	f84c 1b04 	str.w	r1, [ip], #4
 8009be6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009bea:	dcec      	bgt.n	8009bc6 <__multadd+0x12>
 8009bec:	b30e      	cbz	r6, 8009c32 <__multadd+0x7e>
 8009bee:	68a3      	ldr	r3, [r4, #8]
 8009bf0:	42ab      	cmp	r3, r5
 8009bf2:	dc19      	bgt.n	8009c28 <__multadd+0x74>
 8009bf4:	6861      	ldr	r1, [r4, #4]
 8009bf6:	4638      	mov	r0, r7
 8009bf8:	3101      	adds	r1, #1
 8009bfa:	f7ff ff79 	bl	8009af0 <_Balloc>
 8009bfe:	4680      	mov	r8, r0
 8009c00:	b928      	cbnz	r0, 8009c0e <__multadd+0x5a>
 8009c02:	4602      	mov	r2, r0
 8009c04:	4b0c      	ldr	r3, [pc, #48]	@ (8009c38 <__multadd+0x84>)
 8009c06:	480d      	ldr	r0, [pc, #52]	@ (8009c3c <__multadd+0x88>)
 8009c08:	21ba      	movs	r1, #186	@ 0xba
 8009c0a:	f000 fd83 	bl	800a714 <__assert_func>
 8009c0e:	6922      	ldr	r2, [r4, #16]
 8009c10:	3202      	adds	r2, #2
 8009c12:	f104 010c 	add.w	r1, r4, #12
 8009c16:	0092      	lsls	r2, r2, #2
 8009c18:	300c      	adds	r0, #12
 8009c1a:	f000 fd6d 	bl	800a6f8 <memcpy>
 8009c1e:	4621      	mov	r1, r4
 8009c20:	4638      	mov	r0, r7
 8009c22:	f7ff ffa5 	bl	8009b70 <_Bfree>
 8009c26:	4644      	mov	r4, r8
 8009c28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c2c:	3501      	adds	r5, #1
 8009c2e:	615e      	str	r6, [r3, #20]
 8009c30:	6125      	str	r5, [r4, #16]
 8009c32:	4620      	mov	r0, r4
 8009c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c38:	0800b930 	.word	0x0800b930
 8009c3c:	0800b941 	.word	0x0800b941

08009c40 <__hi0bits>:
 8009c40:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009c44:	4603      	mov	r3, r0
 8009c46:	bf36      	itet	cc
 8009c48:	0403      	lslcc	r3, r0, #16
 8009c4a:	2000      	movcs	r0, #0
 8009c4c:	2010      	movcc	r0, #16
 8009c4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009c52:	bf3c      	itt	cc
 8009c54:	021b      	lslcc	r3, r3, #8
 8009c56:	3008      	addcc	r0, #8
 8009c58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c5c:	bf3c      	itt	cc
 8009c5e:	011b      	lslcc	r3, r3, #4
 8009c60:	3004      	addcc	r0, #4
 8009c62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c66:	bf3c      	itt	cc
 8009c68:	009b      	lslcc	r3, r3, #2
 8009c6a:	3002      	addcc	r0, #2
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	db05      	blt.n	8009c7c <__hi0bits+0x3c>
 8009c70:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009c74:	f100 0001 	add.w	r0, r0, #1
 8009c78:	bf08      	it	eq
 8009c7a:	2020      	moveq	r0, #32
 8009c7c:	4770      	bx	lr

08009c7e <__lo0bits>:
 8009c7e:	6803      	ldr	r3, [r0, #0]
 8009c80:	4602      	mov	r2, r0
 8009c82:	f013 0007 	ands.w	r0, r3, #7
 8009c86:	d00b      	beq.n	8009ca0 <__lo0bits+0x22>
 8009c88:	07d9      	lsls	r1, r3, #31
 8009c8a:	d421      	bmi.n	8009cd0 <__lo0bits+0x52>
 8009c8c:	0798      	lsls	r0, r3, #30
 8009c8e:	bf49      	itett	mi
 8009c90:	085b      	lsrmi	r3, r3, #1
 8009c92:	089b      	lsrpl	r3, r3, #2
 8009c94:	2001      	movmi	r0, #1
 8009c96:	6013      	strmi	r3, [r2, #0]
 8009c98:	bf5c      	itt	pl
 8009c9a:	6013      	strpl	r3, [r2, #0]
 8009c9c:	2002      	movpl	r0, #2
 8009c9e:	4770      	bx	lr
 8009ca0:	b299      	uxth	r1, r3
 8009ca2:	b909      	cbnz	r1, 8009ca8 <__lo0bits+0x2a>
 8009ca4:	0c1b      	lsrs	r3, r3, #16
 8009ca6:	2010      	movs	r0, #16
 8009ca8:	b2d9      	uxtb	r1, r3
 8009caa:	b909      	cbnz	r1, 8009cb0 <__lo0bits+0x32>
 8009cac:	3008      	adds	r0, #8
 8009cae:	0a1b      	lsrs	r3, r3, #8
 8009cb0:	0719      	lsls	r1, r3, #28
 8009cb2:	bf04      	itt	eq
 8009cb4:	091b      	lsreq	r3, r3, #4
 8009cb6:	3004      	addeq	r0, #4
 8009cb8:	0799      	lsls	r1, r3, #30
 8009cba:	bf04      	itt	eq
 8009cbc:	089b      	lsreq	r3, r3, #2
 8009cbe:	3002      	addeq	r0, #2
 8009cc0:	07d9      	lsls	r1, r3, #31
 8009cc2:	d403      	bmi.n	8009ccc <__lo0bits+0x4e>
 8009cc4:	085b      	lsrs	r3, r3, #1
 8009cc6:	f100 0001 	add.w	r0, r0, #1
 8009cca:	d003      	beq.n	8009cd4 <__lo0bits+0x56>
 8009ccc:	6013      	str	r3, [r2, #0]
 8009cce:	4770      	bx	lr
 8009cd0:	2000      	movs	r0, #0
 8009cd2:	4770      	bx	lr
 8009cd4:	2020      	movs	r0, #32
 8009cd6:	4770      	bx	lr

08009cd8 <__i2b>:
 8009cd8:	b510      	push	{r4, lr}
 8009cda:	460c      	mov	r4, r1
 8009cdc:	2101      	movs	r1, #1
 8009cde:	f7ff ff07 	bl	8009af0 <_Balloc>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	b928      	cbnz	r0, 8009cf2 <__i2b+0x1a>
 8009ce6:	4b05      	ldr	r3, [pc, #20]	@ (8009cfc <__i2b+0x24>)
 8009ce8:	4805      	ldr	r0, [pc, #20]	@ (8009d00 <__i2b+0x28>)
 8009cea:	f240 1145 	movw	r1, #325	@ 0x145
 8009cee:	f000 fd11 	bl	800a714 <__assert_func>
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	6144      	str	r4, [r0, #20]
 8009cf6:	6103      	str	r3, [r0, #16]
 8009cf8:	bd10      	pop	{r4, pc}
 8009cfa:	bf00      	nop
 8009cfc:	0800b930 	.word	0x0800b930
 8009d00:	0800b941 	.word	0x0800b941

08009d04 <__multiply>:
 8009d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d08:	4614      	mov	r4, r2
 8009d0a:	690a      	ldr	r2, [r1, #16]
 8009d0c:	6923      	ldr	r3, [r4, #16]
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	bfa8      	it	ge
 8009d12:	4623      	movge	r3, r4
 8009d14:	460f      	mov	r7, r1
 8009d16:	bfa4      	itt	ge
 8009d18:	460c      	movge	r4, r1
 8009d1a:	461f      	movge	r7, r3
 8009d1c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009d20:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009d24:	68a3      	ldr	r3, [r4, #8]
 8009d26:	6861      	ldr	r1, [r4, #4]
 8009d28:	eb0a 0609 	add.w	r6, sl, r9
 8009d2c:	42b3      	cmp	r3, r6
 8009d2e:	b085      	sub	sp, #20
 8009d30:	bfb8      	it	lt
 8009d32:	3101      	addlt	r1, #1
 8009d34:	f7ff fedc 	bl	8009af0 <_Balloc>
 8009d38:	b930      	cbnz	r0, 8009d48 <__multiply+0x44>
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	4b44      	ldr	r3, [pc, #272]	@ (8009e50 <__multiply+0x14c>)
 8009d3e:	4845      	ldr	r0, [pc, #276]	@ (8009e54 <__multiply+0x150>)
 8009d40:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009d44:	f000 fce6 	bl	800a714 <__assert_func>
 8009d48:	f100 0514 	add.w	r5, r0, #20
 8009d4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009d50:	462b      	mov	r3, r5
 8009d52:	2200      	movs	r2, #0
 8009d54:	4543      	cmp	r3, r8
 8009d56:	d321      	bcc.n	8009d9c <__multiply+0x98>
 8009d58:	f107 0114 	add.w	r1, r7, #20
 8009d5c:	f104 0214 	add.w	r2, r4, #20
 8009d60:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009d64:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009d68:	9302      	str	r3, [sp, #8]
 8009d6a:	1b13      	subs	r3, r2, r4
 8009d6c:	3b15      	subs	r3, #21
 8009d6e:	f023 0303 	bic.w	r3, r3, #3
 8009d72:	3304      	adds	r3, #4
 8009d74:	f104 0715 	add.w	r7, r4, #21
 8009d78:	42ba      	cmp	r2, r7
 8009d7a:	bf38      	it	cc
 8009d7c:	2304      	movcc	r3, #4
 8009d7e:	9301      	str	r3, [sp, #4]
 8009d80:	9b02      	ldr	r3, [sp, #8]
 8009d82:	9103      	str	r1, [sp, #12]
 8009d84:	428b      	cmp	r3, r1
 8009d86:	d80c      	bhi.n	8009da2 <__multiply+0x9e>
 8009d88:	2e00      	cmp	r6, #0
 8009d8a:	dd03      	ble.n	8009d94 <__multiply+0x90>
 8009d8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d05b      	beq.n	8009e4c <__multiply+0x148>
 8009d94:	6106      	str	r6, [r0, #16]
 8009d96:	b005      	add	sp, #20
 8009d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d9c:	f843 2b04 	str.w	r2, [r3], #4
 8009da0:	e7d8      	b.n	8009d54 <__multiply+0x50>
 8009da2:	f8b1 a000 	ldrh.w	sl, [r1]
 8009da6:	f1ba 0f00 	cmp.w	sl, #0
 8009daa:	d024      	beq.n	8009df6 <__multiply+0xf2>
 8009dac:	f104 0e14 	add.w	lr, r4, #20
 8009db0:	46a9      	mov	r9, r5
 8009db2:	f04f 0c00 	mov.w	ip, #0
 8009db6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009dba:	f8d9 3000 	ldr.w	r3, [r9]
 8009dbe:	fa1f fb87 	uxth.w	fp, r7
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	fb0a 330b 	mla	r3, sl, fp, r3
 8009dc8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009dcc:	f8d9 7000 	ldr.w	r7, [r9]
 8009dd0:	4463      	add	r3, ip
 8009dd2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009dd6:	fb0a c70b 	mla	r7, sl, fp, ip
 8009dda:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009de4:	4572      	cmp	r2, lr
 8009de6:	f849 3b04 	str.w	r3, [r9], #4
 8009dea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009dee:	d8e2      	bhi.n	8009db6 <__multiply+0xb2>
 8009df0:	9b01      	ldr	r3, [sp, #4]
 8009df2:	f845 c003 	str.w	ip, [r5, r3]
 8009df6:	9b03      	ldr	r3, [sp, #12]
 8009df8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009dfc:	3104      	adds	r1, #4
 8009dfe:	f1b9 0f00 	cmp.w	r9, #0
 8009e02:	d021      	beq.n	8009e48 <__multiply+0x144>
 8009e04:	682b      	ldr	r3, [r5, #0]
 8009e06:	f104 0c14 	add.w	ip, r4, #20
 8009e0a:	46ae      	mov	lr, r5
 8009e0c:	f04f 0a00 	mov.w	sl, #0
 8009e10:	f8bc b000 	ldrh.w	fp, [ip]
 8009e14:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009e18:	fb09 770b 	mla	r7, r9, fp, r7
 8009e1c:	4457      	add	r7, sl
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009e24:	f84e 3b04 	str.w	r3, [lr], #4
 8009e28:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009e2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e30:	f8be 3000 	ldrh.w	r3, [lr]
 8009e34:	fb09 330a 	mla	r3, r9, sl, r3
 8009e38:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009e3c:	4562      	cmp	r2, ip
 8009e3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e42:	d8e5      	bhi.n	8009e10 <__multiply+0x10c>
 8009e44:	9f01      	ldr	r7, [sp, #4]
 8009e46:	51eb      	str	r3, [r5, r7]
 8009e48:	3504      	adds	r5, #4
 8009e4a:	e799      	b.n	8009d80 <__multiply+0x7c>
 8009e4c:	3e01      	subs	r6, #1
 8009e4e:	e79b      	b.n	8009d88 <__multiply+0x84>
 8009e50:	0800b930 	.word	0x0800b930
 8009e54:	0800b941 	.word	0x0800b941

08009e58 <__pow5mult>:
 8009e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e5c:	4615      	mov	r5, r2
 8009e5e:	f012 0203 	ands.w	r2, r2, #3
 8009e62:	4607      	mov	r7, r0
 8009e64:	460e      	mov	r6, r1
 8009e66:	d007      	beq.n	8009e78 <__pow5mult+0x20>
 8009e68:	4c25      	ldr	r4, [pc, #148]	@ (8009f00 <__pow5mult+0xa8>)
 8009e6a:	3a01      	subs	r2, #1
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e72:	f7ff fe9f 	bl	8009bb4 <__multadd>
 8009e76:	4606      	mov	r6, r0
 8009e78:	10ad      	asrs	r5, r5, #2
 8009e7a:	d03d      	beq.n	8009ef8 <__pow5mult+0xa0>
 8009e7c:	69fc      	ldr	r4, [r7, #28]
 8009e7e:	b97c      	cbnz	r4, 8009ea0 <__pow5mult+0x48>
 8009e80:	2010      	movs	r0, #16
 8009e82:	f7ff fd7f 	bl	8009984 <malloc>
 8009e86:	4602      	mov	r2, r0
 8009e88:	61f8      	str	r0, [r7, #28]
 8009e8a:	b928      	cbnz	r0, 8009e98 <__pow5mult+0x40>
 8009e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8009f04 <__pow5mult+0xac>)
 8009e8e:	481e      	ldr	r0, [pc, #120]	@ (8009f08 <__pow5mult+0xb0>)
 8009e90:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009e94:	f000 fc3e 	bl	800a714 <__assert_func>
 8009e98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e9c:	6004      	str	r4, [r0, #0]
 8009e9e:	60c4      	str	r4, [r0, #12]
 8009ea0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009ea4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ea8:	b94c      	cbnz	r4, 8009ebe <__pow5mult+0x66>
 8009eaa:	f240 2171 	movw	r1, #625	@ 0x271
 8009eae:	4638      	mov	r0, r7
 8009eb0:	f7ff ff12 	bl	8009cd8 <__i2b>
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	f8c8 0008 	str.w	r0, [r8, #8]
 8009eba:	4604      	mov	r4, r0
 8009ebc:	6003      	str	r3, [r0, #0]
 8009ebe:	f04f 0900 	mov.w	r9, #0
 8009ec2:	07eb      	lsls	r3, r5, #31
 8009ec4:	d50a      	bpl.n	8009edc <__pow5mult+0x84>
 8009ec6:	4631      	mov	r1, r6
 8009ec8:	4622      	mov	r2, r4
 8009eca:	4638      	mov	r0, r7
 8009ecc:	f7ff ff1a 	bl	8009d04 <__multiply>
 8009ed0:	4631      	mov	r1, r6
 8009ed2:	4680      	mov	r8, r0
 8009ed4:	4638      	mov	r0, r7
 8009ed6:	f7ff fe4b 	bl	8009b70 <_Bfree>
 8009eda:	4646      	mov	r6, r8
 8009edc:	106d      	asrs	r5, r5, #1
 8009ede:	d00b      	beq.n	8009ef8 <__pow5mult+0xa0>
 8009ee0:	6820      	ldr	r0, [r4, #0]
 8009ee2:	b938      	cbnz	r0, 8009ef4 <__pow5mult+0x9c>
 8009ee4:	4622      	mov	r2, r4
 8009ee6:	4621      	mov	r1, r4
 8009ee8:	4638      	mov	r0, r7
 8009eea:	f7ff ff0b 	bl	8009d04 <__multiply>
 8009eee:	6020      	str	r0, [r4, #0]
 8009ef0:	f8c0 9000 	str.w	r9, [r0]
 8009ef4:	4604      	mov	r4, r0
 8009ef6:	e7e4      	b.n	8009ec2 <__pow5mult+0x6a>
 8009ef8:	4630      	mov	r0, r6
 8009efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009efe:	bf00      	nop
 8009f00:	0800b99c 	.word	0x0800b99c
 8009f04:	0800b8c1 	.word	0x0800b8c1
 8009f08:	0800b941 	.word	0x0800b941

08009f0c <__lshift>:
 8009f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f10:	460c      	mov	r4, r1
 8009f12:	6849      	ldr	r1, [r1, #4]
 8009f14:	6923      	ldr	r3, [r4, #16]
 8009f16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f1a:	68a3      	ldr	r3, [r4, #8]
 8009f1c:	4607      	mov	r7, r0
 8009f1e:	4691      	mov	r9, r2
 8009f20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f24:	f108 0601 	add.w	r6, r8, #1
 8009f28:	42b3      	cmp	r3, r6
 8009f2a:	db0b      	blt.n	8009f44 <__lshift+0x38>
 8009f2c:	4638      	mov	r0, r7
 8009f2e:	f7ff fddf 	bl	8009af0 <_Balloc>
 8009f32:	4605      	mov	r5, r0
 8009f34:	b948      	cbnz	r0, 8009f4a <__lshift+0x3e>
 8009f36:	4602      	mov	r2, r0
 8009f38:	4b28      	ldr	r3, [pc, #160]	@ (8009fdc <__lshift+0xd0>)
 8009f3a:	4829      	ldr	r0, [pc, #164]	@ (8009fe0 <__lshift+0xd4>)
 8009f3c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009f40:	f000 fbe8 	bl	800a714 <__assert_func>
 8009f44:	3101      	adds	r1, #1
 8009f46:	005b      	lsls	r3, r3, #1
 8009f48:	e7ee      	b.n	8009f28 <__lshift+0x1c>
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	f100 0114 	add.w	r1, r0, #20
 8009f50:	f100 0210 	add.w	r2, r0, #16
 8009f54:	4618      	mov	r0, r3
 8009f56:	4553      	cmp	r3, sl
 8009f58:	db33      	blt.n	8009fc2 <__lshift+0xb6>
 8009f5a:	6920      	ldr	r0, [r4, #16]
 8009f5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f60:	f104 0314 	add.w	r3, r4, #20
 8009f64:	f019 091f 	ands.w	r9, r9, #31
 8009f68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009f70:	d02b      	beq.n	8009fca <__lshift+0xbe>
 8009f72:	f1c9 0e20 	rsb	lr, r9, #32
 8009f76:	468a      	mov	sl, r1
 8009f78:	2200      	movs	r2, #0
 8009f7a:	6818      	ldr	r0, [r3, #0]
 8009f7c:	fa00 f009 	lsl.w	r0, r0, r9
 8009f80:	4310      	orrs	r0, r2
 8009f82:	f84a 0b04 	str.w	r0, [sl], #4
 8009f86:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f8a:	459c      	cmp	ip, r3
 8009f8c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009f90:	d8f3      	bhi.n	8009f7a <__lshift+0x6e>
 8009f92:	ebac 0304 	sub.w	r3, ip, r4
 8009f96:	3b15      	subs	r3, #21
 8009f98:	f023 0303 	bic.w	r3, r3, #3
 8009f9c:	3304      	adds	r3, #4
 8009f9e:	f104 0015 	add.w	r0, r4, #21
 8009fa2:	4584      	cmp	ip, r0
 8009fa4:	bf38      	it	cc
 8009fa6:	2304      	movcc	r3, #4
 8009fa8:	50ca      	str	r2, [r1, r3]
 8009faa:	b10a      	cbz	r2, 8009fb0 <__lshift+0xa4>
 8009fac:	f108 0602 	add.w	r6, r8, #2
 8009fb0:	3e01      	subs	r6, #1
 8009fb2:	4638      	mov	r0, r7
 8009fb4:	612e      	str	r6, [r5, #16]
 8009fb6:	4621      	mov	r1, r4
 8009fb8:	f7ff fdda 	bl	8009b70 <_Bfree>
 8009fbc:	4628      	mov	r0, r5
 8009fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fc2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	e7c5      	b.n	8009f56 <__lshift+0x4a>
 8009fca:	3904      	subs	r1, #4
 8009fcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fd0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009fd4:	459c      	cmp	ip, r3
 8009fd6:	d8f9      	bhi.n	8009fcc <__lshift+0xc0>
 8009fd8:	e7ea      	b.n	8009fb0 <__lshift+0xa4>
 8009fda:	bf00      	nop
 8009fdc:	0800b930 	.word	0x0800b930
 8009fe0:	0800b941 	.word	0x0800b941

08009fe4 <__mcmp>:
 8009fe4:	690a      	ldr	r2, [r1, #16]
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	6900      	ldr	r0, [r0, #16]
 8009fea:	1a80      	subs	r0, r0, r2
 8009fec:	b530      	push	{r4, r5, lr}
 8009fee:	d10e      	bne.n	800a00e <__mcmp+0x2a>
 8009ff0:	3314      	adds	r3, #20
 8009ff2:	3114      	adds	r1, #20
 8009ff4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009ff8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009ffc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a000:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a004:	4295      	cmp	r5, r2
 800a006:	d003      	beq.n	800a010 <__mcmp+0x2c>
 800a008:	d205      	bcs.n	800a016 <__mcmp+0x32>
 800a00a:	f04f 30ff 	mov.w	r0, #4294967295
 800a00e:	bd30      	pop	{r4, r5, pc}
 800a010:	42a3      	cmp	r3, r4
 800a012:	d3f3      	bcc.n	8009ffc <__mcmp+0x18>
 800a014:	e7fb      	b.n	800a00e <__mcmp+0x2a>
 800a016:	2001      	movs	r0, #1
 800a018:	e7f9      	b.n	800a00e <__mcmp+0x2a>
	...

0800a01c <__mdiff>:
 800a01c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a020:	4689      	mov	r9, r1
 800a022:	4606      	mov	r6, r0
 800a024:	4611      	mov	r1, r2
 800a026:	4648      	mov	r0, r9
 800a028:	4614      	mov	r4, r2
 800a02a:	f7ff ffdb 	bl	8009fe4 <__mcmp>
 800a02e:	1e05      	subs	r5, r0, #0
 800a030:	d112      	bne.n	800a058 <__mdiff+0x3c>
 800a032:	4629      	mov	r1, r5
 800a034:	4630      	mov	r0, r6
 800a036:	f7ff fd5b 	bl	8009af0 <_Balloc>
 800a03a:	4602      	mov	r2, r0
 800a03c:	b928      	cbnz	r0, 800a04a <__mdiff+0x2e>
 800a03e:	4b3f      	ldr	r3, [pc, #252]	@ (800a13c <__mdiff+0x120>)
 800a040:	f240 2137 	movw	r1, #567	@ 0x237
 800a044:	483e      	ldr	r0, [pc, #248]	@ (800a140 <__mdiff+0x124>)
 800a046:	f000 fb65 	bl	800a714 <__assert_func>
 800a04a:	2301      	movs	r3, #1
 800a04c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a050:	4610      	mov	r0, r2
 800a052:	b003      	add	sp, #12
 800a054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a058:	bfbc      	itt	lt
 800a05a:	464b      	movlt	r3, r9
 800a05c:	46a1      	movlt	r9, r4
 800a05e:	4630      	mov	r0, r6
 800a060:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a064:	bfba      	itte	lt
 800a066:	461c      	movlt	r4, r3
 800a068:	2501      	movlt	r5, #1
 800a06a:	2500      	movge	r5, #0
 800a06c:	f7ff fd40 	bl	8009af0 <_Balloc>
 800a070:	4602      	mov	r2, r0
 800a072:	b918      	cbnz	r0, 800a07c <__mdiff+0x60>
 800a074:	4b31      	ldr	r3, [pc, #196]	@ (800a13c <__mdiff+0x120>)
 800a076:	f240 2145 	movw	r1, #581	@ 0x245
 800a07a:	e7e3      	b.n	800a044 <__mdiff+0x28>
 800a07c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a080:	6926      	ldr	r6, [r4, #16]
 800a082:	60c5      	str	r5, [r0, #12]
 800a084:	f109 0310 	add.w	r3, r9, #16
 800a088:	f109 0514 	add.w	r5, r9, #20
 800a08c:	f104 0e14 	add.w	lr, r4, #20
 800a090:	f100 0b14 	add.w	fp, r0, #20
 800a094:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a098:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a09c:	9301      	str	r3, [sp, #4]
 800a09e:	46d9      	mov	r9, fp
 800a0a0:	f04f 0c00 	mov.w	ip, #0
 800a0a4:	9b01      	ldr	r3, [sp, #4]
 800a0a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a0aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a0ae:	9301      	str	r3, [sp, #4]
 800a0b0:	fa1f f38a 	uxth.w	r3, sl
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	b283      	uxth	r3, r0
 800a0b8:	1acb      	subs	r3, r1, r3
 800a0ba:	0c00      	lsrs	r0, r0, #16
 800a0bc:	4463      	add	r3, ip
 800a0be:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a0c2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a0cc:	4576      	cmp	r6, lr
 800a0ce:	f849 3b04 	str.w	r3, [r9], #4
 800a0d2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a0d6:	d8e5      	bhi.n	800a0a4 <__mdiff+0x88>
 800a0d8:	1b33      	subs	r3, r6, r4
 800a0da:	3b15      	subs	r3, #21
 800a0dc:	f023 0303 	bic.w	r3, r3, #3
 800a0e0:	3415      	adds	r4, #21
 800a0e2:	3304      	adds	r3, #4
 800a0e4:	42a6      	cmp	r6, r4
 800a0e6:	bf38      	it	cc
 800a0e8:	2304      	movcc	r3, #4
 800a0ea:	441d      	add	r5, r3
 800a0ec:	445b      	add	r3, fp
 800a0ee:	461e      	mov	r6, r3
 800a0f0:	462c      	mov	r4, r5
 800a0f2:	4544      	cmp	r4, r8
 800a0f4:	d30e      	bcc.n	800a114 <__mdiff+0xf8>
 800a0f6:	f108 0103 	add.w	r1, r8, #3
 800a0fa:	1b49      	subs	r1, r1, r5
 800a0fc:	f021 0103 	bic.w	r1, r1, #3
 800a100:	3d03      	subs	r5, #3
 800a102:	45a8      	cmp	r8, r5
 800a104:	bf38      	it	cc
 800a106:	2100      	movcc	r1, #0
 800a108:	440b      	add	r3, r1
 800a10a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a10e:	b191      	cbz	r1, 800a136 <__mdiff+0x11a>
 800a110:	6117      	str	r7, [r2, #16]
 800a112:	e79d      	b.n	800a050 <__mdiff+0x34>
 800a114:	f854 1b04 	ldr.w	r1, [r4], #4
 800a118:	46e6      	mov	lr, ip
 800a11a:	0c08      	lsrs	r0, r1, #16
 800a11c:	fa1c fc81 	uxtah	ip, ip, r1
 800a120:	4471      	add	r1, lr
 800a122:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a126:	b289      	uxth	r1, r1
 800a128:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a12c:	f846 1b04 	str.w	r1, [r6], #4
 800a130:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a134:	e7dd      	b.n	800a0f2 <__mdiff+0xd6>
 800a136:	3f01      	subs	r7, #1
 800a138:	e7e7      	b.n	800a10a <__mdiff+0xee>
 800a13a:	bf00      	nop
 800a13c:	0800b930 	.word	0x0800b930
 800a140:	0800b941 	.word	0x0800b941

0800a144 <__d2b>:
 800a144:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a148:	460f      	mov	r7, r1
 800a14a:	2101      	movs	r1, #1
 800a14c:	ec59 8b10 	vmov	r8, r9, d0
 800a150:	4616      	mov	r6, r2
 800a152:	f7ff fccd 	bl	8009af0 <_Balloc>
 800a156:	4604      	mov	r4, r0
 800a158:	b930      	cbnz	r0, 800a168 <__d2b+0x24>
 800a15a:	4602      	mov	r2, r0
 800a15c:	4b23      	ldr	r3, [pc, #140]	@ (800a1ec <__d2b+0xa8>)
 800a15e:	4824      	ldr	r0, [pc, #144]	@ (800a1f0 <__d2b+0xac>)
 800a160:	f240 310f 	movw	r1, #783	@ 0x30f
 800a164:	f000 fad6 	bl	800a714 <__assert_func>
 800a168:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a16c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a170:	b10d      	cbz	r5, 800a176 <__d2b+0x32>
 800a172:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a176:	9301      	str	r3, [sp, #4]
 800a178:	f1b8 0300 	subs.w	r3, r8, #0
 800a17c:	d023      	beq.n	800a1c6 <__d2b+0x82>
 800a17e:	4668      	mov	r0, sp
 800a180:	9300      	str	r3, [sp, #0]
 800a182:	f7ff fd7c 	bl	8009c7e <__lo0bits>
 800a186:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a18a:	b1d0      	cbz	r0, 800a1c2 <__d2b+0x7e>
 800a18c:	f1c0 0320 	rsb	r3, r0, #32
 800a190:	fa02 f303 	lsl.w	r3, r2, r3
 800a194:	430b      	orrs	r3, r1
 800a196:	40c2      	lsrs	r2, r0
 800a198:	6163      	str	r3, [r4, #20]
 800a19a:	9201      	str	r2, [sp, #4]
 800a19c:	9b01      	ldr	r3, [sp, #4]
 800a19e:	61a3      	str	r3, [r4, #24]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	bf0c      	ite	eq
 800a1a4:	2201      	moveq	r2, #1
 800a1a6:	2202      	movne	r2, #2
 800a1a8:	6122      	str	r2, [r4, #16]
 800a1aa:	b1a5      	cbz	r5, 800a1d6 <__d2b+0x92>
 800a1ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a1b0:	4405      	add	r5, r0
 800a1b2:	603d      	str	r5, [r7, #0]
 800a1b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a1b8:	6030      	str	r0, [r6, #0]
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	b003      	add	sp, #12
 800a1be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1c2:	6161      	str	r1, [r4, #20]
 800a1c4:	e7ea      	b.n	800a19c <__d2b+0x58>
 800a1c6:	a801      	add	r0, sp, #4
 800a1c8:	f7ff fd59 	bl	8009c7e <__lo0bits>
 800a1cc:	9b01      	ldr	r3, [sp, #4]
 800a1ce:	6163      	str	r3, [r4, #20]
 800a1d0:	3020      	adds	r0, #32
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	e7e8      	b.n	800a1a8 <__d2b+0x64>
 800a1d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a1da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a1de:	6038      	str	r0, [r7, #0]
 800a1e0:	6918      	ldr	r0, [r3, #16]
 800a1e2:	f7ff fd2d 	bl	8009c40 <__hi0bits>
 800a1e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a1ea:	e7e5      	b.n	800a1b8 <__d2b+0x74>
 800a1ec:	0800b930 	.word	0x0800b930
 800a1f0:	0800b941 	.word	0x0800b941

0800a1f4 <__sfputc_r>:
 800a1f4:	6893      	ldr	r3, [r2, #8]
 800a1f6:	3b01      	subs	r3, #1
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	b410      	push	{r4}
 800a1fc:	6093      	str	r3, [r2, #8]
 800a1fe:	da08      	bge.n	800a212 <__sfputc_r+0x1e>
 800a200:	6994      	ldr	r4, [r2, #24]
 800a202:	42a3      	cmp	r3, r4
 800a204:	db01      	blt.n	800a20a <__sfputc_r+0x16>
 800a206:	290a      	cmp	r1, #10
 800a208:	d103      	bne.n	800a212 <__sfputc_r+0x1e>
 800a20a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a20e:	f7fe bc0c 	b.w	8008a2a <__swbuf_r>
 800a212:	6813      	ldr	r3, [r2, #0]
 800a214:	1c58      	adds	r0, r3, #1
 800a216:	6010      	str	r0, [r2, #0]
 800a218:	7019      	strb	r1, [r3, #0]
 800a21a:	4608      	mov	r0, r1
 800a21c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a220:	4770      	bx	lr

0800a222 <__sfputs_r>:
 800a222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a224:	4606      	mov	r6, r0
 800a226:	460f      	mov	r7, r1
 800a228:	4614      	mov	r4, r2
 800a22a:	18d5      	adds	r5, r2, r3
 800a22c:	42ac      	cmp	r4, r5
 800a22e:	d101      	bne.n	800a234 <__sfputs_r+0x12>
 800a230:	2000      	movs	r0, #0
 800a232:	e007      	b.n	800a244 <__sfputs_r+0x22>
 800a234:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a238:	463a      	mov	r2, r7
 800a23a:	4630      	mov	r0, r6
 800a23c:	f7ff ffda 	bl	800a1f4 <__sfputc_r>
 800a240:	1c43      	adds	r3, r0, #1
 800a242:	d1f3      	bne.n	800a22c <__sfputs_r+0xa>
 800a244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a248 <_vfiprintf_r>:
 800a248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a24c:	460d      	mov	r5, r1
 800a24e:	b09d      	sub	sp, #116	@ 0x74
 800a250:	4614      	mov	r4, r2
 800a252:	4698      	mov	r8, r3
 800a254:	4606      	mov	r6, r0
 800a256:	b118      	cbz	r0, 800a260 <_vfiprintf_r+0x18>
 800a258:	6a03      	ldr	r3, [r0, #32]
 800a25a:	b90b      	cbnz	r3, 800a260 <_vfiprintf_r+0x18>
 800a25c:	f7fe fafc 	bl	8008858 <__sinit>
 800a260:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a262:	07d9      	lsls	r1, r3, #31
 800a264:	d405      	bmi.n	800a272 <_vfiprintf_r+0x2a>
 800a266:	89ab      	ldrh	r3, [r5, #12]
 800a268:	059a      	lsls	r2, r3, #22
 800a26a:	d402      	bmi.n	800a272 <_vfiprintf_r+0x2a>
 800a26c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a26e:	f7fe fcee 	bl	8008c4e <__retarget_lock_acquire_recursive>
 800a272:	89ab      	ldrh	r3, [r5, #12]
 800a274:	071b      	lsls	r3, r3, #28
 800a276:	d501      	bpl.n	800a27c <_vfiprintf_r+0x34>
 800a278:	692b      	ldr	r3, [r5, #16]
 800a27a:	b99b      	cbnz	r3, 800a2a4 <_vfiprintf_r+0x5c>
 800a27c:	4629      	mov	r1, r5
 800a27e:	4630      	mov	r0, r6
 800a280:	f7fe fc12 	bl	8008aa8 <__swsetup_r>
 800a284:	b170      	cbz	r0, 800a2a4 <_vfiprintf_r+0x5c>
 800a286:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a288:	07dc      	lsls	r4, r3, #31
 800a28a:	d504      	bpl.n	800a296 <_vfiprintf_r+0x4e>
 800a28c:	f04f 30ff 	mov.w	r0, #4294967295
 800a290:	b01d      	add	sp, #116	@ 0x74
 800a292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a296:	89ab      	ldrh	r3, [r5, #12]
 800a298:	0598      	lsls	r0, r3, #22
 800a29a:	d4f7      	bmi.n	800a28c <_vfiprintf_r+0x44>
 800a29c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a29e:	f7fe fcd7 	bl	8008c50 <__retarget_lock_release_recursive>
 800a2a2:	e7f3      	b.n	800a28c <_vfiprintf_r+0x44>
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2a8:	2320      	movs	r3, #32
 800a2aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a2ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2b2:	2330      	movs	r3, #48	@ 0x30
 800a2b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a464 <_vfiprintf_r+0x21c>
 800a2b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a2bc:	f04f 0901 	mov.w	r9, #1
 800a2c0:	4623      	mov	r3, r4
 800a2c2:	469a      	mov	sl, r3
 800a2c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2c8:	b10a      	cbz	r2, 800a2ce <_vfiprintf_r+0x86>
 800a2ca:	2a25      	cmp	r2, #37	@ 0x25
 800a2cc:	d1f9      	bne.n	800a2c2 <_vfiprintf_r+0x7a>
 800a2ce:	ebba 0b04 	subs.w	fp, sl, r4
 800a2d2:	d00b      	beq.n	800a2ec <_vfiprintf_r+0xa4>
 800a2d4:	465b      	mov	r3, fp
 800a2d6:	4622      	mov	r2, r4
 800a2d8:	4629      	mov	r1, r5
 800a2da:	4630      	mov	r0, r6
 800a2dc:	f7ff ffa1 	bl	800a222 <__sfputs_r>
 800a2e0:	3001      	adds	r0, #1
 800a2e2:	f000 80a7 	beq.w	800a434 <_vfiprintf_r+0x1ec>
 800a2e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2e8:	445a      	add	r2, fp
 800a2ea:	9209      	str	r2, [sp, #36]	@ 0x24
 800a2ec:	f89a 3000 	ldrb.w	r3, [sl]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	f000 809f 	beq.w	800a434 <_vfiprintf_r+0x1ec>
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	f04f 32ff 	mov.w	r2, #4294967295
 800a2fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a300:	f10a 0a01 	add.w	sl, sl, #1
 800a304:	9304      	str	r3, [sp, #16]
 800a306:	9307      	str	r3, [sp, #28]
 800a308:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a30c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a30e:	4654      	mov	r4, sl
 800a310:	2205      	movs	r2, #5
 800a312:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a316:	4853      	ldr	r0, [pc, #332]	@ (800a464 <_vfiprintf_r+0x21c>)
 800a318:	f7f5 ff5a 	bl	80001d0 <memchr>
 800a31c:	9a04      	ldr	r2, [sp, #16]
 800a31e:	b9d8      	cbnz	r0, 800a358 <_vfiprintf_r+0x110>
 800a320:	06d1      	lsls	r1, r2, #27
 800a322:	bf44      	itt	mi
 800a324:	2320      	movmi	r3, #32
 800a326:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a32a:	0713      	lsls	r3, r2, #28
 800a32c:	bf44      	itt	mi
 800a32e:	232b      	movmi	r3, #43	@ 0x2b
 800a330:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a334:	f89a 3000 	ldrb.w	r3, [sl]
 800a338:	2b2a      	cmp	r3, #42	@ 0x2a
 800a33a:	d015      	beq.n	800a368 <_vfiprintf_r+0x120>
 800a33c:	9a07      	ldr	r2, [sp, #28]
 800a33e:	4654      	mov	r4, sl
 800a340:	2000      	movs	r0, #0
 800a342:	f04f 0c0a 	mov.w	ip, #10
 800a346:	4621      	mov	r1, r4
 800a348:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a34c:	3b30      	subs	r3, #48	@ 0x30
 800a34e:	2b09      	cmp	r3, #9
 800a350:	d94b      	bls.n	800a3ea <_vfiprintf_r+0x1a2>
 800a352:	b1b0      	cbz	r0, 800a382 <_vfiprintf_r+0x13a>
 800a354:	9207      	str	r2, [sp, #28]
 800a356:	e014      	b.n	800a382 <_vfiprintf_r+0x13a>
 800a358:	eba0 0308 	sub.w	r3, r0, r8
 800a35c:	fa09 f303 	lsl.w	r3, r9, r3
 800a360:	4313      	orrs	r3, r2
 800a362:	9304      	str	r3, [sp, #16]
 800a364:	46a2      	mov	sl, r4
 800a366:	e7d2      	b.n	800a30e <_vfiprintf_r+0xc6>
 800a368:	9b03      	ldr	r3, [sp, #12]
 800a36a:	1d19      	adds	r1, r3, #4
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	9103      	str	r1, [sp, #12]
 800a370:	2b00      	cmp	r3, #0
 800a372:	bfbb      	ittet	lt
 800a374:	425b      	neglt	r3, r3
 800a376:	f042 0202 	orrlt.w	r2, r2, #2
 800a37a:	9307      	strge	r3, [sp, #28]
 800a37c:	9307      	strlt	r3, [sp, #28]
 800a37e:	bfb8      	it	lt
 800a380:	9204      	strlt	r2, [sp, #16]
 800a382:	7823      	ldrb	r3, [r4, #0]
 800a384:	2b2e      	cmp	r3, #46	@ 0x2e
 800a386:	d10a      	bne.n	800a39e <_vfiprintf_r+0x156>
 800a388:	7863      	ldrb	r3, [r4, #1]
 800a38a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a38c:	d132      	bne.n	800a3f4 <_vfiprintf_r+0x1ac>
 800a38e:	9b03      	ldr	r3, [sp, #12]
 800a390:	1d1a      	adds	r2, r3, #4
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	9203      	str	r2, [sp, #12]
 800a396:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a39a:	3402      	adds	r4, #2
 800a39c:	9305      	str	r3, [sp, #20]
 800a39e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a474 <_vfiprintf_r+0x22c>
 800a3a2:	7821      	ldrb	r1, [r4, #0]
 800a3a4:	2203      	movs	r2, #3
 800a3a6:	4650      	mov	r0, sl
 800a3a8:	f7f5 ff12 	bl	80001d0 <memchr>
 800a3ac:	b138      	cbz	r0, 800a3be <_vfiprintf_r+0x176>
 800a3ae:	9b04      	ldr	r3, [sp, #16]
 800a3b0:	eba0 000a 	sub.w	r0, r0, sl
 800a3b4:	2240      	movs	r2, #64	@ 0x40
 800a3b6:	4082      	lsls	r2, r0
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	3401      	adds	r4, #1
 800a3bc:	9304      	str	r3, [sp, #16]
 800a3be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3c2:	4829      	ldr	r0, [pc, #164]	@ (800a468 <_vfiprintf_r+0x220>)
 800a3c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a3c8:	2206      	movs	r2, #6
 800a3ca:	f7f5 ff01 	bl	80001d0 <memchr>
 800a3ce:	2800      	cmp	r0, #0
 800a3d0:	d03f      	beq.n	800a452 <_vfiprintf_r+0x20a>
 800a3d2:	4b26      	ldr	r3, [pc, #152]	@ (800a46c <_vfiprintf_r+0x224>)
 800a3d4:	bb1b      	cbnz	r3, 800a41e <_vfiprintf_r+0x1d6>
 800a3d6:	9b03      	ldr	r3, [sp, #12]
 800a3d8:	3307      	adds	r3, #7
 800a3da:	f023 0307 	bic.w	r3, r3, #7
 800a3de:	3308      	adds	r3, #8
 800a3e0:	9303      	str	r3, [sp, #12]
 800a3e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3e4:	443b      	add	r3, r7
 800a3e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3e8:	e76a      	b.n	800a2c0 <_vfiprintf_r+0x78>
 800a3ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3ee:	460c      	mov	r4, r1
 800a3f0:	2001      	movs	r0, #1
 800a3f2:	e7a8      	b.n	800a346 <_vfiprintf_r+0xfe>
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	3401      	adds	r4, #1
 800a3f8:	9305      	str	r3, [sp, #20]
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	f04f 0c0a 	mov.w	ip, #10
 800a400:	4620      	mov	r0, r4
 800a402:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a406:	3a30      	subs	r2, #48	@ 0x30
 800a408:	2a09      	cmp	r2, #9
 800a40a:	d903      	bls.n	800a414 <_vfiprintf_r+0x1cc>
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d0c6      	beq.n	800a39e <_vfiprintf_r+0x156>
 800a410:	9105      	str	r1, [sp, #20]
 800a412:	e7c4      	b.n	800a39e <_vfiprintf_r+0x156>
 800a414:	fb0c 2101 	mla	r1, ip, r1, r2
 800a418:	4604      	mov	r4, r0
 800a41a:	2301      	movs	r3, #1
 800a41c:	e7f0      	b.n	800a400 <_vfiprintf_r+0x1b8>
 800a41e:	ab03      	add	r3, sp, #12
 800a420:	9300      	str	r3, [sp, #0]
 800a422:	462a      	mov	r2, r5
 800a424:	4b12      	ldr	r3, [pc, #72]	@ (800a470 <_vfiprintf_r+0x228>)
 800a426:	a904      	add	r1, sp, #16
 800a428:	4630      	mov	r0, r6
 800a42a:	f7fd fdd1 	bl	8007fd0 <_printf_float>
 800a42e:	4607      	mov	r7, r0
 800a430:	1c78      	adds	r0, r7, #1
 800a432:	d1d6      	bne.n	800a3e2 <_vfiprintf_r+0x19a>
 800a434:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a436:	07d9      	lsls	r1, r3, #31
 800a438:	d405      	bmi.n	800a446 <_vfiprintf_r+0x1fe>
 800a43a:	89ab      	ldrh	r3, [r5, #12]
 800a43c:	059a      	lsls	r2, r3, #22
 800a43e:	d402      	bmi.n	800a446 <_vfiprintf_r+0x1fe>
 800a440:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a442:	f7fe fc05 	bl	8008c50 <__retarget_lock_release_recursive>
 800a446:	89ab      	ldrh	r3, [r5, #12]
 800a448:	065b      	lsls	r3, r3, #25
 800a44a:	f53f af1f 	bmi.w	800a28c <_vfiprintf_r+0x44>
 800a44e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a450:	e71e      	b.n	800a290 <_vfiprintf_r+0x48>
 800a452:	ab03      	add	r3, sp, #12
 800a454:	9300      	str	r3, [sp, #0]
 800a456:	462a      	mov	r2, r5
 800a458:	4b05      	ldr	r3, [pc, #20]	@ (800a470 <_vfiprintf_r+0x228>)
 800a45a:	a904      	add	r1, sp, #16
 800a45c:	4630      	mov	r0, r6
 800a45e:	f7fe f84f 	bl	8008500 <_printf_i>
 800a462:	e7e4      	b.n	800a42e <_vfiprintf_r+0x1e6>
 800a464:	0800ba98 	.word	0x0800ba98
 800a468:	0800baa2 	.word	0x0800baa2
 800a46c:	08007fd1 	.word	0x08007fd1
 800a470:	0800a223 	.word	0x0800a223
 800a474:	0800ba9e 	.word	0x0800ba9e

0800a478 <__sflush_r>:
 800a478:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a480:	0716      	lsls	r6, r2, #28
 800a482:	4605      	mov	r5, r0
 800a484:	460c      	mov	r4, r1
 800a486:	d454      	bmi.n	800a532 <__sflush_r+0xba>
 800a488:	684b      	ldr	r3, [r1, #4]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	dc02      	bgt.n	800a494 <__sflush_r+0x1c>
 800a48e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a490:	2b00      	cmp	r3, #0
 800a492:	dd48      	ble.n	800a526 <__sflush_r+0xae>
 800a494:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a496:	2e00      	cmp	r6, #0
 800a498:	d045      	beq.n	800a526 <__sflush_r+0xae>
 800a49a:	2300      	movs	r3, #0
 800a49c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a4a0:	682f      	ldr	r7, [r5, #0]
 800a4a2:	6a21      	ldr	r1, [r4, #32]
 800a4a4:	602b      	str	r3, [r5, #0]
 800a4a6:	d030      	beq.n	800a50a <__sflush_r+0x92>
 800a4a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a4aa:	89a3      	ldrh	r3, [r4, #12]
 800a4ac:	0759      	lsls	r1, r3, #29
 800a4ae:	d505      	bpl.n	800a4bc <__sflush_r+0x44>
 800a4b0:	6863      	ldr	r3, [r4, #4]
 800a4b2:	1ad2      	subs	r2, r2, r3
 800a4b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a4b6:	b10b      	cbz	r3, 800a4bc <__sflush_r+0x44>
 800a4b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a4ba:	1ad2      	subs	r2, r2, r3
 800a4bc:	2300      	movs	r3, #0
 800a4be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a4c0:	6a21      	ldr	r1, [r4, #32]
 800a4c2:	4628      	mov	r0, r5
 800a4c4:	47b0      	blx	r6
 800a4c6:	1c43      	adds	r3, r0, #1
 800a4c8:	89a3      	ldrh	r3, [r4, #12]
 800a4ca:	d106      	bne.n	800a4da <__sflush_r+0x62>
 800a4cc:	6829      	ldr	r1, [r5, #0]
 800a4ce:	291d      	cmp	r1, #29
 800a4d0:	d82b      	bhi.n	800a52a <__sflush_r+0xb2>
 800a4d2:	4a2a      	ldr	r2, [pc, #168]	@ (800a57c <__sflush_r+0x104>)
 800a4d4:	410a      	asrs	r2, r1
 800a4d6:	07d6      	lsls	r6, r2, #31
 800a4d8:	d427      	bmi.n	800a52a <__sflush_r+0xb2>
 800a4da:	2200      	movs	r2, #0
 800a4dc:	6062      	str	r2, [r4, #4]
 800a4de:	04d9      	lsls	r1, r3, #19
 800a4e0:	6922      	ldr	r2, [r4, #16]
 800a4e2:	6022      	str	r2, [r4, #0]
 800a4e4:	d504      	bpl.n	800a4f0 <__sflush_r+0x78>
 800a4e6:	1c42      	adds	r2, r0, #1
 800a4e8:	d101      	bne.n	800a4ee <__sflush_r+0x76>
 800a4ea:	682b      	ldr	r3, [r5, #0]
 800a4ec:	b903      	cbnz	r3, 800a4f0 <__sflush_r+0x78>
 800a4ee:	6560      	str	r0, [r4, #84]	@ 0x54
 800a4f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a4f2:	602f      	str	r7, [r5, #0]
 800a4f4:	b1b9      	cbz	r1, 800a526 <__sflush_r+0xae>
 800a4f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a4fa:	4299      	cmp	r1, r3
 800a4fc:	d002      	beq.n	800a504 <__sflush_r+0x8c>
 800a4fe:	4628      	mov	r0, r5
 800a500:	f7ff f9f6 	bl	80098f0 <_free_r>
 800a504:	2300      	movs	r3, #0
 800a506:	6363      	str	r3, [r4, #52]	@ 0x34
 800a508:	e00d      	b.n	800a526 <__sflush_r+0xae>
 800a50a:	2301      	movs	r3, #1
 800a50c:	4628      	mov	r0, r5
 800a50e:	47b0      	blx	r6
 800a510:	4602      	mov	r2, r0
 800a512:	1c50      	adds	r0, r2, #1
 800a514:	d1c9      	bne.n	800a4aa <__sflush_r+0x32>
 800a516:	682b      	ldr	r3, [r5, #0]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d0c6      	beq.n	800a4aa <__sflush_r+0x32>
 800a51c:	2b1d      	cmp	r3, #29
 800a51e:	d001      	beq.n	800a524 <__sflush_r+0xac>
 800a520:	2b16      	cmp	r3, #22
 800a522:	d11e      	bne.n	800a562 <__sflush_r+0xea>
 800a524:	602f      	str	r7, [r5, #0]
 800a526:	2000      	movs	r0, #0
 800a528:	e022      	b.n	800a570 <__sflush_r+0xf8>
 800a52a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a52e:	b21b      	sxth	r3, r3
 800a530:	e01b      	b.n	800a56a <__sflush_r+0xf2>
 800a532:	690f      	ldr	r7, [r1, #16]
 800a534:	2f00      	cmp	r7, #0
 800a536:	d0f6      	beq.n	800a526 <__sflush_r+0xae>
 800a538:	0793      	lsls	r3, r2, #30
 800a53a:	680e      	ldr	r6, [r1, #0]
 800a53c:	bf08      	it	eq
 800a53e:	694b      	ldreq	r3, [r1, #20]
 800a540:	600f      	str	r7, [r1, #0]
 800a542:	bf18      	it	ne
 800a544:	2300      	movne	r3, #0
 800a546:	eba6 0807 	sub.w	r8, r6, r7
 800a54a:	608b      	str	r3, [r1, #8]
 800a54c:	f1b8 0f00 	cmp.w	r8, #0
 800a550:	dde9      	ble.n	800a526 <__sflush_r+0xae>
 800a552:	6a21      	ldr	r1, [r4, #32]
 800a554:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a556:	4643      	mov	r3, r8
 800a558:	463a      	mov	r2, r7
 800a55a:	4628      	mov	r0, r5
 800a55c:	47b0      	blx	r6
 800a55e:	2800      	cmp	r0, #0
 800a560:	dc08      	bgt.n	800a574 <__sflush_r+0xfc>
 800a562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a566:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a56a:	81a3      	strh	r3, [r4, #12]
 800a56c:	f04f 30ff 	mov.w	r0, #4294967295
 800a570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a574:	4407      	add	r7, r0
 800a576:	eba8 0800 	sub.w	r8, r8, r0
 800a57a:	e7e7      	b.n	800a54c <__sflush_r+0xd4>
 800a57c:	dfbffffe 	.word	0xdfbffffe

0800a580 <_fflush_r>:
 800a580:	b538      	push	{r3, r4, r5, lr}
 800a582:	690b      	ldr	r3, [r1, #16]
 800a584:	4605      	mov	r5, r0
 800a586:	460c      	mov	r4, r1
 800a588:	b913      	cbnz	r3, 800a590 <_fflush_r+0x10>
 800a58a:	2500      	movs	r5, #0
 800a58c:	4628      	mov	r0, r5
 800a58e:	bd38      	pop	{r3, r4, r5, pc}
 800a590:	b118      	cbz	r0, 800a59a <_fflush_r+0x1a>
 800a592:	6a03      	ldr	r3, [r0, #32]
 800a594:	b90b      	cbnz	r3, 800a59a <_fflush_r+0x1a>
 800a596:	f7fe f95f 	bl	8008858 <__sinit>
 800a59a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d0f3      	beq.n	800a58a <_fflush_r+0xa>
 800a5a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a5a4:	07d0      	lsls	r0, r2, #31
 800a5a6:	d404      	bmi.n	800a5b2 <_fflush_r+0x32>
 800a5a8:	0599      	lsls	r1, r3, #22
 800a5aa:	d402      	bmi.n	800a5b2 <_fflush_r+0x32>
 800a5ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5ae:	f7fe fb4e 	bl	8008c4e <__retarget_lock_acquire_recursive>
 800a5b2:	4628      	mov	r0, r5
 800a5b4:	4621      	mov	r1, r4
 800a5b6:	f7ff ff5f 	bl	800a478 <__sflush_r>
 800a5ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a5bc:	07da      	lsls	r2, r3, #31
 800a5be:	4605      	mov	r5, r0
 800a5c0:	d4e4      	bmi.n	800a58c <_fflush_r+0xc>
 800a5c2:	89a3      	ldrh	r3, [r4, #12]
 800a5c4:	059b      	lsls	r3, r3, #22
 800a5c6:	d4e1      	bmi.n	800a58c <_fflush_r+0xc>
 800a5c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5ca:	f7fe fb41 	bl	8008c50 <__retarget_lock_release_recursive>
 800a5ce:	e7dd      	b.n	800a58c <_fflush_r+0xc>

0800a5d0 <__swhatbuf_r>:
 800a5d0:	b570      	push	{r4, r5, r6, lr}
 800a5d2:	460c      	mov	r4, r1
 800a5d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5d8:	2900      	cmp	r1, #0
 800a5da:	b096      	sub	sp, #88	@ 0x58
 800a5dc:	4615      	mov	r5, r2
 800a5de:	461e      	mov	r6, r3
 800a5e0:	da0d      	bge.n	800a5fe <__swhatbuf_r+0x2e>
 800a5e2:	89a3      	ldrh	r3, [r4, #12]
 800a5e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a5e8:	f04f 0100 	mov.w	r1, #0
 800a5ec:	bf14      	ite	ne
 800a5ee:	2340      	movne	r3, #64	@ 0x40
 800a5f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a5f4:	2000      	movs	r0, #0
 800a5f6:	6031      	str	r1, [r6, #0]
 800a5f8:	602b      	str	r3, [r5, #0]
 800a5fa:	b016      	add	sp, #88	@ 0x58
 800a5fc:	bd70      	pop	{r4, r5, r6, pc}
 800a5fe:	466a      	mov	r2, sp
 800a600:	f000 f848 	bl	800a694 <_fstat_r>
 800a604:	2800      	cmp	r0, #0
 800a606:	dbec      	blt.n	800a5e2 <__swhatbuf_r+0x12>
 800a608:	9901      	ldr	r1, [sp, #4]
 800a60a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a60e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a612:	4259      	negs	r1, r3
 800a614:	4159      	adcs	r1, r3
 800a616:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a61a:	e7eb      	b.n	800a5f4 <__swhatbuf_r+0x24>

0800a61c <__smakebuf_r>:
 800a61c:	898b      	ldrh	r3, [r1, #12]
 800a61e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a620:	079d      	lsls	r5, r3, #30
 800a622:	4606      	mov	r6, r0
 800a624:	460c      	mov	r4, r1
 800a626:	d507      	bpl.n	800a638 <__smakebuf_r+0x1c>
 800a628:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a62c:	6023      	str	r3, [r4, #0]
 800a62e:	6123      	str	r3, [r4, #16]
 800a630:	2301      	movs	r3, #1
 800a632:	6163      	str	r3, [r4, #20]
 800a634:	b003      	add	sp, #12
 800a636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a638:	ab01      	add	r3, sp, #4
 800a63a:	466a      	mov	r2, sp
 800a63c:	f7ff ffc8 	bl	800a5d0 <__swhatbuf_r>
 800a640:	9f00      	ldr	r7, [sp, #0]
 800a642:	4605      	mov	r5, r0
 800a644:	4639      	mov	r1, r7
 800a646:	4630      	mov	r0, r6
 800a648:	f7ff f9c6 	bl	80099d8 <_malloc_r>
 800a64c:	b948      	cbnz	r0, 800a662 <__smakebuf_r+0x46>
 800a64e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a652:	059a      	lsls	r2, r3, #22
 800a654:	d4ee      	bmi.n	800a634 <__smakebuf_r+0x18>
 800a656:	f023 0303 	bic.w	r3, r3, #3
 800a65a:	f043 0302 	orr.w	r3, r3, #2
 800a65e:	81a3      	strh	r3, [r4, #12]
 800a660:	e7e2      	b.n	800a628 <__smakebuf_r+0xc>
 800a662:	89a3      	ldrh	r3, [r4, #12]
 800a664:	6020      	str	r0, [r4, #0]
 800a666:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a66a:	81a3      	strh	r3, [r4, #12]
 800a66c:	9b01      	ldr	r3, [sp, #4]
 800a66e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a672:	b15b      	cbz	r3, 800a68c <__smakebuf_r+0x70>
 800a674:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a678:	4630      	mov	r0, r6
 800a67a:	f000 f81d 	bl	800a6b8 <_isatty_r>
 800a67e:	b128      	cbz	r0, 800a68c <__smakebuf_r+0x70>
 800a680:	89a3      	ldrh	r3, [r4, #12]
 800a682:	f023 0303 	bic.w	r3, r3, #3
 800a686:	f043 0301 	orr.w	r3, r3, #1
 800a68a:	81a3      	strh	r3, [r4, #12]
 800a68c:	89a3      	ldrh	r3, [r4, #12]
 800a68e:	431d      	orrs	r5, r3
 800a690:	81a5      	strh	r5, [r4, #12]
 800a692:	e7cf      	b.n	800a634 <__smakebuf_r+0x18>

0800a694 <_fstat_r>:
 800a694:	b538      	push	{r3, r4, r5, lr}
 800a696:	4d07      	ldr	r5, [pc, #28]	@ (800a6b4 <_fstat_r+0x20>)
 800a698:	2300      	movs	r3, #0
 800a69a:	4604      	mov	r4, r0
 800a69c:	4608      	mov	r0, r1
 800a69e:	4611      	mov	r1, r2
 800a6a0:	602b      	str	r3, [r5, #0]
 800a6a2:	f7f9 fd2f 	bl	8004104 <_fstat>
 800a6a6:	1c43      	adds	r3, r0, #1
 800a6a8:	d102      	bne.n	800a6b0 <_fstat_r+0x1c>
 800a6aa:	682b      	ldr	r3, [r5, #0]
 800a6ac:	b103      	cbz	r3, 800a6b0 <_fstat_r+0x1c>
 800a6ae:	6023      	str	r3, [r4, #0]
 800a6b0:	bd38      	pop	{r3, r4, r5, pc}
 800a6b2:	bf00      	nop
 800a6b4:	20000578 	.word	0x20000578

0800a6b8 <_isatty_r>:
 800a6b8:	b538      	push	{r3, r4, r5, lr}
 800a6ba:	4d06      	ldr	r5, [pc, #24]	@ (800a6d4 <_isatty_r+0x1c>)
 800a6bc:	2300      	movs	r3, #0
 800a6be:	4604      	mov	r4, r0
 800a6c0:	4608      	mov	r0, r1
 800a6c2:	602b      	str	r3, [r5, #0]
 800a6c4:	f7f9 fd2e 	bl	8004124 <_isatty>
 800a6c8:	1c43      	adds	r3, r0, #1
 800a6ca:	d102      	bne.n	800a6d2 <_isatty_r+0x1a>
 800a6cc:	682b      	ldr	r3, [r5, #0]
 800a6ce:	b103      	cbz	r3, 800a6d2 <_isatty_r+0x1a>
 800a6d0:	6023      	str	r3, [r4, #0]
 800a6d2:	bd38      	pop	{r3, r4, r5, pc}
 800a6d4:	20000578 	.word	0x20000578

0800a6d8 <_sbrk_r>:
 800a6d8:	b538      	push	{r3, r4, r5, lr}
 800a6da:	4d06      	ldr	r5, [pc, #24]	@ (800a6f4 <_sbrk_r+0x1c>)
 800a6dc:	2300      	movs	r3, #0
 800a6de:	4604      	mov	r4, r0
 800a6e0:	4608      	mov	r0, r1
 800a6e2:	602b      	str	r3, [r5, #0]
 800a6e4:	f7f9 fd36 	bl	8004154 <_sbrk>
 800a6e8:	1c43      	adds	r3, r0, #1
 800a6ea:	d102      	bne.n	800a6f2 <_sbrk_r+0x1a>
 800a6ec:	682b      	ldr	r3, [r5, #0]
 800a6ee:	b103      	cbz	r3, 800a6f2 <_sbrk_r+0x1a>
 800a6f0:	6023      	str	r3, [r4, #0]
 800a6f2:	bd38      	pop	{r3, r4, r5, pc}
 800a6f4:	20000578 	.word	0x20000578

0800a6f8 <memcpy>:
 800a6f8:	440a      	add	r2, r1
 800a6fa:	4291      	cmp	r1, r2
 800a6fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a700:	d100      	bne.n	800a704 <memcpy+0xc>
 800a702:	4770      	bx	lr
 800a704:	b510      	push	{r4, lr}
 800a706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a70a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a70e:	4291      	cmp	r1, r2
 800a710:	d1f9      	bne.n	800a706 <memcpy+0xe>
 800a712:	bd10      	pop	{r4, pc}

0800a714 <__assert_func>:
 800a714:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a716:	4614      	mov	r4, r2
 800a718:	461a      	mov	r2, r3
 800a71a:	4b09      	ldr	r3, [pc, #36]	@ (800a740 <__assert_func+0x2c>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4605      	mov	r5, r0
 800a720:	68d8      	ldr	r0, [r3, #12]
 800a722:	b954      	cbnz	r4, 800a73a <__assert_func+0x26>
 800a724:	4b07      	ldr	r3, [pc, #28]	@ (800a744 <__assert_func+0x30>)
 800a726:	461c      	mov	r4, r3
 800a728:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a72c:	9100      	str	r1, [sp, #0]
 800a72e:	462b      	mov	r3, r5
 800a730:	4905      	ldr	r1, [pc, #20]	@ (800a748 <__assert_func+0x34>)
 800a732:	f000 f841 	bl	800a7b8 <fiprintf>
 800a736:	f000 f851 	bl	800a7dc <abort>
 800a73a:	4b04      	ldr	r3, [pc, #16]	@ (800a74c <__assert_func+0x38>)
 800a73c:	e7f4      	b.n	800a728 <__assert_func+0x14>
 800a73e:	bf00      	nop
 800a740:	2000001c 	.word	0x2000001c
 800a744:	0800baee 	.word	0x0800baee
 800a748:	0800bac0 	.word	0x0800bac0
 800a74c:	0800bab3 	.word	0x0800bab3

0800a750 <_calloc_r>:
 800a750:	b570      	push	{r4, r5, r6, lr}
 800a752:	fba1 5402 	umull	r5, r4, r1, r2
 800a756:	b93c      	cbnz	r4, 800a768 <_calloc_r+0x18>
 800a758:	4629      	mov	r1, r5
 800a75a:	f7ff f93d 	bl	80099d8 <_malloc_r>
 800a75e:	4606      	mov	r6, r0
 800a760:	b928      	cbnz	r0, 800a76e <_calloc_r+0x1e>
 800a762:	2600      	movs	r6, #0
 800a764:	4630      	mov	r0, r6
 800a766:	bd70      	pop	{r4, r5, r6, pc}
 800a768:	220c      	movs	r2, #12
 800a76a:	6002      	str	r2, [r0, #0]
 800a76c:	e7f9      	b.n	800a762 <_calloc_r+0x12>
 800a76e:	462a      	mov	r2, r5
 800a770:	4621      	mov	r1, r4
 800a772:	f7fe f9ef 	bl	8008b54 <memset>
 800a776:	e7f5      	b.n	800a764 <_calloc_r+0x14>

0800a778 <__ascii_mbtowc>:
 800a778:	b082      	sub	sp, #8
 800a77a:	b901      	cbnz	r1, 800a77e <__ascii_mbtowc+0x6>
 800a77c:	a901      	add	r1, sp, #4
 800a77e:	b142      	cbz	r2, 800a792 <__ascii_mbtowc+0x1a>
 800a780:	b14b      	cbz	r3, 800a796 <__ascii_mbtowc+0x1e>
 800a782:	7813      	ldrb	r3, [r2, #0]
 800a784:	600b      	str	r3, [r1, #0]
 800a786:	7812      	ldrb	r2, [r2, #0]
 800a788:	1e10      	subs	r0, r2, #0
 800a78a:	bf18      	it	ne
 800a78c:	2001      	movne	r0, #1
 800a78e:	b002      	add	sp, #8
 800a790:	4770      	bx	lr
 800a792:	4610      	mov	r0, r2
 800a794:	e7fb      	b.n	800a78e <__ascii_mbtowc+0x16>
 800a796:	f06f 0001 	mvn.w	r0, #1
 800a79a:	e7f8      	b.n	800a78e <__ascii_mbtowc+0x16>

0800a79c <__ascii_wctomb>:
 800a79c:	4603      	mov	r3, r0
 800a79e:	4608      	mov	r0, r1
 800a7a0:	b141      	cbz	r1, 800a7b4 <__ascii_wctomb+0x18>
 800a7a2:	2aff      	cmp	r2, #255	@ 0xff
 800a7a4:	d904      	bls.n	800a7b0 <__ascii_wctomb+0x14>
 800a7a6:	228a      	movs	r2, #138	@ 0x8a
 800a7a8:	601a      	str	r2, [r3, #0]
 800a7aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a7ae:	4770      	bx	lr
 800a7b0:	700a      	strb	r2, [r1, #0]
 800a7b2:	2001      	movs	r0, #1
 800a7b4:	4770      	bx	lr
	...

0800a7b8 <fiprintf>:
 800a7b8:	b40e      	push	{r1, r2, r3}
 800a7ba:	b503      	push	{r0, r1, lr}
 800a7bc:	4601      	mov	r1, r0
 800a7be:	ab03      	add	r3, sp, #12
 800a7c0:	4805      	ldr	r0, [pc, #20]	@ (800a7d8 <fiprintf+0x20>)
 800a7c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7c6:	6800      	ldr	r0, [r0, #0]
 800a7c8:	9301      	str	r3, [sp, #4]
 800a7ca:	f7ff fd3d 	bl	800a248 <_vfiprintf_r>
 800a7ce:	b002      	add	sp, #8
 800a7d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7d4:	b003      	add	sp, #12
 800a7d6:	4770      	bx	lr
 800a7d8:	2000001c 	.word	0x2000001c

0800a7dc <abort>:
 800a7dc:	b508      	push	{r3, lr}
 800a7de:	2006      	movs	r0, #6
 800a7e0:	f000 f82c 	bl	800a83c <raise>
 800a7e4:	2001      	movs	r0, #1
 800a7e6:	f7f9 fc59 	bl	800409c <_exit>

0800a7ea <_raise_r>:
 800a7ea:	291f      	cmp	r1, #31
 800a7ec:	b538      	push	{r3, r4, r5, lr}
 800a7ee:	4605      	mov	r5, r0
 800a7f0:	460c      	mov	r4, r1
 800a7f2:	d904      	bls.n	800a7fe <_raise_r+0x14>
 800a7f4:	2316      	movs	r3, #22
 800a7f6:	6003      	str	r3, [r0, #0]
 800a7f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7fc:	bd38      	pop	{r3, r4, r5, pc}
 800a7fe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a800:	b112      	cbz	r2, 800a808 <_raise_r+0x1e>
 800a802:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a806:	b94b      	cbnz	r3, 800a81c <_raise_r+0x32>
 800a808:	4628      	mov	r0, r5
 800a80a:	f000 f831 	bl	800a870 <_getpid_r>
 800a80e:	4622      	mov	r2, r4
 800a810:	4601      	mov	r1, r0
 800a812:	4628      	mov	r0, r5
 800a814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a818:	f000 b818 	b.w	800a84c <_kill_r>
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	d00a      	beq.n	800a836 <_raise_r+0x4c>
 800a820:	1c59      	adds	r1, r3, #1
 800a822:	d103      	bne.n	800a82c <_raise_r+0x42>
 800a824:	2316      	movs	r3, #22
 800a826:	6003      	str	r3, [r0, #0]
 800a828:	2001      	movs	r0, #1
 800a82a:	e7e7      	b.n	800a7fc <_raise_r+0x12>
 800a82c:	2100      	movs	r1, #0
 800a82e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a832:	4620      	mov	r0, r4
 800a834:	4798      	blx	r3
 800a836:	2000      	movs	r0, #0
 800a838:	e7e0      	b.n	800a7fc <_raise_r+0x12>
	...

0800a83c <raise>:
 800a83c:	4b02      	ldr	r3, [pc, #8]	@ (800a848 <raise+0xc>)
 800a83e:	4601      	mov	r1, r0
 800a840:	6818      	ldr	r0, [r3, #0]
 800a842:	f7ff bfd2 	b.w	800a7ea <_raise_r>
 800a846:	bf00      	nop
 800a848:	2000001c 	.word	0x2000001c

0800a84c <_kill_r>:
 800a84c:	b538      	push	{r3, r4, r5, lr}
 800a84e:	4d07      	ldr	r5, [pc, #28]	@ (800a86c <_kill_r+0x20>)
 800a850:	2300      	movs	r3, #0
 800a852:	4604      	mov	r4, r0
 800a854:	4608      	mov	r0, r1
 800a856:	4611      	mov	r1, r2
 800a858:	602b      	str	r3, [r5, #0]
 800a85a:	f7f9 fc0f 	bl	800407c <_kill>
 800a85e:	1c43      	adds	r3, r0, #1
 800a860:	d102      	bne.n	800a868 <_kill_r+0x1c>
 800a862:	682b      	ldr	r3, [r5, #0]
 800a864:	b103      	cbz	r3, 800a868 <_kill_r+0x1c>
 800a866:	6023      	str	r3, [r4, #0]
 800a868:	bd38      	pop	{r3, r4, r5, pc}
 800a86a:	bf00      	nop
 800a86c:	20000578 	.word	0x20000578

0800a870 <_getpid_r>:
 800a870:	f7f9 bbfc 	b.w	800406c <_getpid>

0800a874 <asinf>:
 800a874:	b508      	push	{r3, lr}
 800a876:	ed2d 8b02 	vpush	{d8}
 800a87a:	eeb0 8a40 	vmov.f32	s16, s0
 800a87e:	f000 f895 	bl	800a9ac <__ieee754_asinf>
 800a882:	eeb4 8a48 	vcmp.f32	s16, s16
 800a886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a88a:	eef0 8a40 	vmov.f32	s17, s0
 800a88e:	d615      	bvs.n	800a8bc <asinf+0x48>
 800a890:	eeb0 0a48 	vmov.f32	s0, s16
 800a894:	f000 f873 	bl	800a97e <fabsf>
 800a898:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a89c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a8a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8a4:	dd0a      	ble.n	800a8bc <asinf+0x48>
 800a8a6:	f7fe f9a7 	bl	8008bf8 <__errno>
 800a8aa:	ecbd 8b02 	vpop	{d8}
 800a8ae:	2321      	movs	r3, #33	@ 0x21
 800a8b0:	6003      	str	r3, [r0, #0]
 800a8b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a8b6:	4804      	ldr	r0, [pc, #16]	@ (800a8c8 <asinf+0x54>)
 800a8b8:	f000 b872 	b.w	800a9a0 <nanf>
 800a8bc:	eeb0 0a68 	vmov.f32	s0, s17
 800a8c0:	ecbd 8b02 	vpop	{d8}
 800a8c4:	bd08      	pop	{r3, pc}
 800a8c6:	bf00      	nop
 800a8c8:	0800baee 	.word	0x0800baee

0800a8cc <atan2f>:
 800a8cc:	f000 b954 	b.w	800ab78 <__ieee754_atan2f>

0800a8d0 <powf>:
 800a8d0:	b508      	push	{r3, lr}
 800a8d2:	ed2d 8b04 	vpush	{d8-d9}
 800a8d6:	eeb0 8a60 	vmov.f32	s16, s1
 800a8da:	eeb0 9a40 	vmov.f32	s18, s0
 800a8de:	f000 f9eb 	bl	800acb8 <__ieee754_powf>
 800a8e2:	eeb4 8a48 	vcmp.f32	s16, s16
 800a8e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8ea:	eef0 8a40 	vmov.f32	s17, s0
 800a8ee:	d63e      	bvs.n	800a96e <powf+0x9e>
 800a8f0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800a8f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8f8:	d112      	bne.n	800a920 <powf+0x50>
 800a8fa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a8fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a902:	d039      	beq.n	800a978 <powf+0xa8>
 800a904:	eeb0 0a48 	vmov.f32	s0, s16
 800a908:	f000 f840 	bl	800a98c <finitef>
 800a90c:	b378      	cbz	r0, 800a96e <powf+0x9e>
 800a90e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a916:	d52a      	bpl.n	800a96e <powf+0x9e>
 800a918:	f7fe f96e 	bl	8008bf8 <__errno>
 800a91c:	2322      	movs	r3, #34	@ 0x22
 800a91e:	e014      	b.n	800a94a <powf+0x7a>
 800a920:	f000 f834 	bl	800a98c <finitef>
 800a924:	b998      	cbnz	r0, 800a94e <powf+0x7e>
 800a926:	eeb0 0a49 	vmov.f32	s0, s18
 800a92a:	f000 f82f 	bl	800a98c <finitef>
 800a92e:	b170      	cbz	r0, 800a94e <powf+0x7e>
 800a930:	eeb0 0a48 	vmov.f32	s0, s16
 800a934:	f000 f82a 	bl	800a98c <finitef>
 800a938:	b148      	cbz	r0, 800a94e <powf+0x7e>
 800a93a:	eef4 8a68 	vcmp.f32	s17, s17
 800a93e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a942:	d7e9      	bvc.n	800a918 <powf+0x48>
 800a944:	f7fe f958 	bl	8008bf8 <__errno>
 800a948:	2321      	movs	r3, #33	@ 0x21
 800a94a:	6003      	str	r3, [r0, #0]
 800a94c:	e00f      	b.n	800a96e <powf+0x9e>
 800a94e:	eef5 8a40 	vcmp.f32	s17, #0.0
 800a952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a956:	d10a      	bne.n	800a96e <powf+0x9e>
 800a958:	eeb0 0a49 	vmov.f32	s0, s18
 800a95c:	f000 f816 	bl	800a98c <finitef>
 800a960:	b128      	cbz	r0, 800a96e <powf+0x9e>
 800a962:	eeb0 0a48 	vmov.f32	s0, s16
 800a966:	f000 f811 	bl	800a98c <finitef>
 800a96a:	2800      	cmp	r0, #0
 800a96c:	d1d4      	bne.n	800a918 <powf+0x48>
 800a96e:	eeb0 0a68 	vmov.f32	s0, s17
 800a972:	ecbd 8b04 	vpop	{d8-d9}
 800a976:	bd08      	pop	{r3, pc}
 800a978:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800a97c:	e7f7      	b.n	800a96e <powf+0x9e>

0800a97e <fabsf>:
 800a97e:	ee10 3a10 	vmov	r3, s0
 800a982:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a986:	ee00 3a10 	vmov	s0, r3
 800a98a:	4770      	bx	lr

0800a98c <finitef>:
 800a98c:	ee10 3a10 	vmov	r3, s0
 800a990:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800a994:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800a998:	bfac      	ite	ge
 800a99a:	2000      	movge	r0, #0
 800a99c:	2001      	movlt	r0, #1
 800a99e:	4770      	bx	lr

0800a9a0 <nanf>:
 800a9a0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a9a8 <nanf+0x8>
 800a9a4:	4770      	bx	lr
 800a9a6:	bf00      	nop
 800a9a8:	7fc00000 	.word	0x7fc00000

0800a9ac <__ieee754_asinf>:
 800a9ac:	b538      	push	{r3, r4, r5, lr}
 800a9ae:	ee10 5a10 	vmov	r5, s0
 800a9b2:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800a9b6:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 800a9ba:	ed2d 8b04 	vpush	{d8-d9}
 800a9be:	d10c      	bne.n	800a9da <__ieee754_asinf+0x2e>
 800a9c0:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 800ab38 <__ieee754_asinf+0x18c>
 800a9c4:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 800ab3c <__ieee754_asinf+0x190>
 800a9c8:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a9cc:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a9d0:	eeb0 0a67 	vmov.f32	s0, s15
 800a9d4:	ecbd 8b04 	vpop	{d8-d9}
 800a9d8:	bd38      	pop	{r3, r4, r5, pc}
 800a9da:	d904      	bls.n	800a9e6 <__ieee754_asinf+0x3a>
 800a9dc:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a9e0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a9e4:	e7f6      	b.n	800a9d4 <__ieee754_asinf+0x28>
 800a9e6:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800a9ea:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800a9ee:	d20b      	bcs.n	800aa08 <__ieee754_asinf+0x5c>
 800a9f0:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 800a9f4:	d252      	bcs.n	800aa9c <__ieee754_asinf+0xf0>
 800a9f6:	eddf 7a52 	vldr	s15, [pc, #328]	@ 800ab40 <__ieee754_asinf+0x194>
 800a9fa:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a9fe:	eef4 7ae8 	vcmpe.f32	s15, s17
 800aa02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa06:	dce5      	bgt.n	800a9d4 <__ieee754_asinf+0x28>
 800aa08:	f7ff ffb9 	bl	800a97e <fabsf>
 800aa0c:	ee38 8ac0 	vsub.f32	s16, s17, s0
 800aa10:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800aa14:	ee28 8a27 	vmul.f32	s16, s16, s15
 800aa18:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800ab44 <__ieee754_asinf+0x198>
 800aa1c:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 800ab48 <__ieee754_asinf+0x19c>
 800aa20:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 800ab4c <__ieee754_asinf+0x1a0>
 800aa24:	eea8 7a27 	vfma.f32	s14, s16, s15
 800aa28:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800ab50 <__ieee754_asinf+0x1a4>
 800aa2c:	eee7 7a08 	vfma.f32	s15, s14, s16
 800aa30:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800ab54 <__ieee754_asinf+0x1a8>
 800aa34:	eea7 7a88 	vfma.f32	s14, s15, s16
 800aa38:	eddf 7a47 	vldr	s15, [pc, #284]	@ 800ab58 <__ieee754_asinf+0x1ac>
 800aa3c:	eee7 7a08 	vfma.f32	s15, s14, s16
 800aa40:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800ab5c <__ieee754_asinf+0x1b0>
 800aa44:	eea7 9a88 	vfma.f32	s18, s15, s16
 800aa48:	eddf 7a45 	vldr	s15, [pc, #276]	@ 800ab60 <__ieee754_asinf+0x1b4>
 800aa4c:	eee8 7a07 	vfma.f32	s15, s16, s14
 800aa50:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800ab64 <__ieee754_asinf+0x1b8>
 800aa54:	eea7 7a88 	vfma.f32	s14, s15, s16
 800aa58:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800ab68 <__ieee754_asinf+0x1bc>
 800aa5c:	eee7 7a08 	vfma.f32	s15, s14, s16
 800aa60:	eeb0 0a48 	vmov.f32	s0, s16
 800aa64:	eee7 8a88 	vfma.f32	s17, s15, s16
 800aa68:	f000 fd56 	bl	800b518 <__ieee754_sqrtf>
 800aa6c:	4b3f      	ldr	r3, [pc, #252]	@ (800ab6c <__ieee754_asinf+0x1c0>)
 800aa6e:	ee29 9a08 	vmul.f32	s18, s18, s16
 800aa72:	429c      	cmp	r4, r3
 800aa74:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800aa78:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800aa7c:	d93d      	bls.n	800aafa <__ieee754_asinf+0x14e>
 800aa7e:	eea0 0a06 	vfma.f32	s0, s0, s12
 800aa82:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 800ab70 <__ieee754_asinf+0x1c4>
 800aa86:	eee0 7a26 	vfma.f32	s15, s0, s13
 800aa8a:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 800ab3c <__ieee754_asinf+0x190>
 800aa8e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800aa92:	2d00      	cmp	r5, #0
 800aa94:	bfd8      	it	le
 800aa96:	eeb1 0a40 	vnegle.f32	s0, s0
 800aa9a:	e79b      	b.n	800a9d4 <__ieee754_asinf+0x28>
 800aa9c:	ee60 7a00 	vmul.f32	s15, s0, s0
 800aaa0:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800ab48 <__ieee754_asinf+0x19c>
 800aaa4:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800ab44 <__ieee754_asinf+0x198>
 800aaa8:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 800ab5c <__ieee754_asinf+0x1b0>
 800aaac:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800aab0:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800ab50 <__ieee754_asinf+0x1a4>
 800aab4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800aab8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800ab54 <__ieee754_asinf+0x1a8>
 800aabc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800aac0:	eddf 6a25 	vldr	s13, [pc, #148]	@ 800ab58 <__ieee754_asinf+0x1ac>
 800aac4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800aac8:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800ab4c <__ieee754_asinf+0x1a0>
 800aacc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800aad0:	eddf 6a23 	vldr	s13, [pc, #140]	@ 800ab60 <__ieee754_asinf+0x1b4>
 800aad4:	eee7 6a86 	vfma.f32	s13, s15, s12
 800aad8:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800ab64 <__ieee754_asinf+0x1b8>
 800aadc:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800aae0:	eddf 6a21 	vldr	s13, [pc, #132]	@ 800ab68 <__ieee754_asinf+0x1bc>
 800aae4:	eee6 6a27 	vfma.f32	s13, s12, s15
 800aae8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aaec:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800aaf0:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800aaf4:	eea0 0a27 	vfma.f32	s0, s0, s15
 800aaf8:	e76c      	b.n	800a9d4 <__ieee754_asinf+0x28>
 800aafa:	ee10 3a10 	vmov	r3, s0
 800aafe:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800ab02:	f023 030f 	bic.w	r3, r3, #15
 800ab06:	ee07 3a10 	vmov	s14, r3
 800ab0a:	eea7 8a47 	vfms.f32	s16, s14, s14
 800ab0e:	ee70 5a00 	vadd.f32	s11, s0, s0
 800ab12:	ee30 0a07 	vadd.f32	s0, s0, s14
 800ab16:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800ab38 <__ieee754_asinf+0x18c>
 800ab1a:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800ab1e:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800ab74 <__ieee754_asinf+0x1c8>
 800ab22:	eee5 7a66 	vfms.f32	s15, s10, s13
 800ab26:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800ab2a:	eeb0 6a40 	vmov.f32	s12, s0
 800ab2e:	eea7 6a66 	vfms.f32	s12, s14, s13
 800ab32:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ab36:	e7aa      	b.n	800aa8e <__ieee754_asinf+0xe2>
 800ab38:	b33bbd2e 	.word	0xb33bbd2e
 800ab3c:	3fc90fdb 	.word	0x3fc90fdb
 800ab40:	7149f2ca 	.word	0x7149f2ca
 800ab44:	3a4f7f04 	.word	0x3a4f7f04
 800ab48:	3811ef08 	.word	0x3811ef08
 800ab4c:	3e2aaaab 	.word	0x3e2aaaab
 800ab50:	bd241146 	.word	0xbd241146
 800ab54:	3e4e0aa8 	.word	0x3e4e0aa8
 800ab58:	bea6b090 	.word	0xbea6b090
 800ab5c:	3d9dc62e 	.word	0x3d9dc62e
 800ab60:	bf303361 	.word	0xbf303361
 800ab64:	4001572d 	.word	0x4001572d
 800ab68:	c019d139 	.word	0xc019d139
 800ab6c:	3f799999 	.word	0x3f799999
 800ab70:	333bbd2e 	.word	0x333bbd2e
 800ab74:	3f490fdb 	.word	0x3f490fdb

0800ab78 <__ieee754_atan2f>:
 800ab78:	ee10 2a90 	vmov	r2, s1
 800ab7c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800ab80:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800ab84:	b510      	push	{r4, lr}
 800ab86:	eef0 7a40 	vmov.f32	s15, s0
 800ab8a:	d806      	bhi.n	800ab9a <__ieee754_atan2f+0x22>
 800ab8c:	ee10 0a10 	vmov	r0, s0
 800ab90:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800ab94:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ab98:	d904      	bls.n	800aba4 <__ieee754_atan2f+0x2c>
 800ab9a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800ab9e:	eeb0 0a67 	vmov.f32	s0, s15
 800aba2:	bd10      	pop	{r4, pc}
 800aba4:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800aba8:	d103      	bne.n	800abb2 <__ieee754_atan2f+0x3a>
 800abaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abae:	f000 bb53 	b.w	800b258 <atanf>
 800abb2:	1794      	asrs	r4, r2, #30
 800abb4:	f004 0402 	and.w	r4, r4, #2
 800abb8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800abbc:	b943      	cbnz	r3, 800abd0 <__ieee754_atan2f+0x58>
 800abbe:	2c02      	cmp	r4, #2
 800abc0:	d05e      	beq.n	800ac80 <__ieee754_atan2f+0x108>
 800abc2:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800ac94 <__ieee754_atan2f+0x11c>
 800abc6:	2c03      	cmp	r4, #3
 800abc8:	bf08      	it	eq
 800abca:	eef0 7a47 	vmoveq.f32	s15, s14
 800abce:	e7e6      	b.n	800ab9e <__ieee754_atan2f+0x26>
 800abd0:	b941      	cbnz	r1, 800abe4 <__ieee754_atan2f+0x6c>
 800abd2:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800ac98 <__ieee754_atan2f+0x120>
 800abd6:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800ac9c <__ieee754_atan2f+0x124>
 800abda:	2800      	cmp	r0, #0
 800abdc:	bfb8      	it	lt
 800abde:	eef0 7a47 	vmovlt.f32	s15, s14
 800abe2:	e7dc      	b.n	800ab9e <__ieee754_atan2f+0x26>
 800abe4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800abe8:	d110      	bne.n	800ac0c <__ieee754_atan2f+0x94>
 800abea:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800abee:	f104 34ff 	add.w	r4, r4, #4294967295
 800abf2:	d107      	bne.n	800ac04 <__ieee754_atan2f+0x8c>
 800abf4:	2c02      	cmp	r4, #2
 800abf6:	d846      	bhi.n	800ac86 <__ieee754_atan2f+0x10e>
 800abf8:	4b29      	ldr	r3, [pc, #164]	@ (800aca0 <__ieee754_atan2f+0x128>)
 800abfa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800abfe:	edd3 7a00 	vldr	s15, [r3]
 800ac02:	e7cc      	b.n	800ab9e <__ieee754_atan2f+0x26>
 800ac04:	2c02      	cmp	r4, #2
 800ac06:	d841      	bhi.n	800ac8c <__ieee754_atan2f+0x114>
 800ac08:	4b26      	ldr	r3, [pc, #152]	@ (800aca4 <__ieee754_atan2f+0x12c>)
 800ac0a:	e7f6      	b.n	800abfa <__ieee754_atan2f+0x82>
 800ac0c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ac10:	d0df      	beq.n	800abd2 <__ieee754_atan2f+0x5a>
 800ac12:	1a5b      	subs	r3, r3, r1
 800ac14:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800ac18:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800ac1c:	da1a      	bge.n	800ac54 <__ieee754_atan2f+0xdc>
 800ac1e:	2a00      	cmp	r2, #0
 800ac20:	da01      	bge.n	800ac26 <__ieee754_atan2f+0xae>
 800ac22:	313c      	adds	r1, #60	@ 0x3c
 800ac24:	db19      	blt.n	800ac5a <__ieee754_atan2f+0xe2>
 800ac26:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800ac2a:	f7ff fea8 	bl	800a97e <fabsf>
 800ac2e:	f000 fb13 	bl	800b258 <atanf>
 800ac32:	eef0 7a40 	vmov.f32	s15, s0
 800ac36:	2c01      	cmp	r4, #1
 800ac38:	d012      	beq.n	800ac60 <__ieee754_atan2f+0xe8>
 800ac3a:	2c02      	cmp	r4, #2
 800ac3c:	d017      	beq.n	800ac6e <__ieee754_atan2f+0xf6>
 800ac3e:	2c00      	cmp	r4, #0
 800ac40:	d0ad      	beq.n	800ab9e <__ieee754_atan2f+0x26>
 800ac42:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800aca8 <__ieee754_atan2f+0x130>
 800ac46:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ac4a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800acac <__ieee754_atan2f+0x134>
 800ac4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ac52:	e7a4      	b.n	800ab9e <__ieee754_atan2f+0x26>
 800ac54:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800ac98 <__ieee754_atan2f+0x120>
 800ac58:	e7ed      	b.n	800ac36 <__ieee754_atan2f+0xbe>
 800ac5a:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800acb0 <__ieee754_atan2f+0x138>
 800ac5e:	e7ea      	b.n	800ac36 <__ieee754_atan2f+0xbe>
 800ac60:	ee17 3a90 	vmov	r3, s15
 800ac64:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ac68:	ee07 3a90 	vmov	s15, r3
 800ac6c:	e797      	b.n	800ab9e <__ieee754_atan2f+0x26>
 800ac6e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800aca8 <__ieee754_atan2f+0x130>
 800ac72:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ac76:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800acac <__ieee754_atan2f+0x134>
 800ac7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac7e:	e78e      	b.n	800ab9e <__ieee754_atan2f+0x26>
 800ac80:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800acac <__ieee754_atan2f+0x134>
 800ac84:	e78b      	b.n	800ab9e <__ieee754_atan2f+0x26>
 800ac86:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800acb4 <__ieee754_atan2f+0x13c>
 800ac8a:	e788      	b.n	800ab9e <__ieee754_atan2f+0x26>
 800ac8c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800acb0 <__ieee754_atan2f+0x138>
 800ac90:	e785      	b.n	800ab9e <__ieee754_atan2f+0x26>
 800ac92:	bf00      	nop
 800ac94:	c0490fdb 	.word	0xc0490fdb
 800ac98:	3fc90fdb 	.word	0x3fc90fdb
 800ac9c:	bfc90fdb 	.word	0xbfc90fdb
 800aca0:	0800bbfc 	.word	0x0800bbfc
 800aca4:	0800bbf0 	.word	0x0800bbf0
 800aca8:	33bbbd2e 	.word	0x33bbbd2e
 800acac:	40490fdb 	.word	0x40490fdb
 800acb0:	00000000 	.word	0x00000000
 800acb4:	3f490fdb 	.word	0x3f490fdb

0800acb8 <__ieee754_powf>:
 800acb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acbc:	ee10 4a90 	vmov	r4, s1
 800acc0:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800acc4:	ed2d 8b02 	vpush	{d8}
 800acc8:	ee10 6a10 	vmov	r6, s0
 800accc:	eeb0 8a40 	vmov.f32	s16, s0
 800acd0:	eef0 8a60 	vmov.f32	s17, s1
 800acd4:	d10c      	bne.n	800acf0 <__ieee754_powf+0x38>
 800acd6:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800acda:	0076      	lsls	r6, r6, #1
 800acdc:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800ace0:	f240 829c 	bls.w	800b21c <__ieee754_powf+0x564>
 800ace4:	ee38 0a28 	vadd.f32	s0, s16, s17
 800ace8:	ecbd 8b02 	vpop	{d8}
 800acec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acf0:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800acf4:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800acf8:	d802      	bhi.n	800ad00 <__ieee754_powf+0x48>
 800acfa:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800acfe:	d908      	bls.n	800ad12 <__ieee754_powf+0x5a>
 800ad00:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800ad04:	d1ee      	bne.n	800ace4 <__ieee754_powf+0x2c>
 800ad06:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800ad0a:	0064      	lsls	r4, r4, #1
 800ad0c:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800ad10:	e7e6      	b.n	800ace0 <__ieee754_powf+0x28>
 800ad12:	2e00      	cmp	r6, #0
 800ad14:	da1e      	bge.n	800ad54 <__ieee754_powf+0x9c>
 800ad16:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800ad1a:	d22b      	bcs.n	800ad74 <__ieee754_powf+0xbc>
 800ad1c:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800ad20:	d332      	bcc.n	800ad88 <__ieee754_powf+0xd0>
 800ad22:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800ad26:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800ad2a:	fa49 f503 	asr.w	r5, r9, r3
 800ad2e:	fa05 f303 	lsl.w	r3, r5, r3
 800ad32:	454b      	cmp	r3, r9
 800ad34:	d126      	bne.n	800ad84 <__ieee754_powf+0xcc>
 800ad36:	f005 0501 	and.w	r5, r5, #1
 800ad3a:	f1c5 0502 	rsb	r5, r5, #2
 800ad3e:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800ad42:	d122      	bne.n	800ad8a <__ieee754_powf+0xd2>
 800ad44:	2c00      	cmp	r4, #0
 800ad46:	f280 826f 	bge.w	800b228 <__ieee754_powf+0x570>
 800ad4a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ad4e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800ad52:	e7c9      	b.n	800ace8 <__ieee754_powf+0x30>
 800ad54:	2500      	movs	r5, #0
 800ad56:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800ad5a:	d1f0      	bne.n	800ad3e <__ieee754_powf+0x86>
 800ad5c:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800ad60:	f000 825c 	beq.w	800b21c <__ieee754_powf+0x564>
 800ad64:	d908      	bls.n	800ad78 <__ieee754_powf+0xc0>
 800ad66:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800b0c8 <__ieee754_powf+0x410>
 800ad6a:	2c00      	cmp	r4, #0
 800ad6c:	bfa8      	it	ge
 800ad6e:	eeb0 0a68 	vmovge.f32	s0, s17
 800ad72:	e7b9      	b.n	800ace8 <__ieee754_powf+0x30>
 800ad74:	2502      	movs	r5, #2
 800ad76:	e7ee      	b.n	800ad56 <__ieee754_powf+0x9e>
 800ad78:	2c00      	cmp	r4, #0
 800ad7a:	f280 8252 	bge.w	800b222 <__ieee754_powf+0x56a>
 800ad7e:	eeb1 0a68 	vneg.f32	s0, s17
 800ad82:	e7b1      	b.n	800ace8 <__ieee754_powf+0x30>
 800ad84:	2500      	movs	r5, #0
 800ad86:	e7da      	b.n	800ad3e <__ieee754_powf+0x86>
 800ad88:	2500      	movs	r5, #0
 800ad8a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800ad8e:	d102      	bne.n	800ad96 <__ieee754_powf+0xde>
 800ad90:	ee28 0a08 	vmul.f32	s0, s16, s16
 800ad94:	e7a8      	b.n	800ace8 <__ieee754_powf+0x30>
 800ad96:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800ad9a:	d109      	bne.n	800adb0 <__ieee754_powf+0xf8>
 800ad9c:	2e00      	cmp	r6, #0
 800ad9e:	db07      	blt.n	800adb0 <__ieee754_powf+0xf8>
 800ada0:	eeb0 0a48 	vmov.f32	s0, s16
 800ada4:	ecbd 8b02 	vpop	{d8}
 800ada8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adac:	f000 bbb4 	b.w	800b518 <__ieee754_sqrtf>
 800adb0:	eeb0 0a48 	vmov.f32	s0, s16
 800adb4:	f7ff fde3 	bl	800a97e <fabsf>
 800adb8:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800adbc:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800adc0:	4647      	mov	r7, r8
 800adc2:	d002      	beq.n	800adca <__ieee754_powf+0x112>
 800adc4:	f1b8 0f00 	cmp.w	r8, #0
 800adc8:	d117      	bne.n	800adfa <__ieee754_powf+0x142>
 800adca:	2c00      	cmp	r4, #0
 800adcc:	bfbc      	itt	lt
 800adce:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800add2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800add6:	2e00      	cmp	r6, #0
 800add8:	da86      	bge.n	800ace8 <__ieee754_powf+0x30>
 800adda:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800adde:	ea58 0805 	orrs.w	r8, r8, r5
 800ade2:	d104      	bne.n	800adee <__ieee754_powf+0x136>
 800ade4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ade8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800adec:	e77c      	b.n	800ace8 <__ieee754_powf+0x30>
 800adee:	2d01      	cmp	r5, #1
 800adf0:	f47f af7a 	bne.w	800ace8 <__ieee754_powf+0x30>
 800adf4:	eeb1 0a40 	vneg.f32	s0, s0
 800adf8:	e776      	b.n	800ace8 <__ieee754_powf+0x30>
 800adfa:	0ff0      	lsrs	r0, r6, #31
 800adfc:	3801      	subs	r0, #1
 800adfe:	ea55 0300 	orrs.w	r3, r5, r0
 800ae02:	d104      	bne.n	800ae0e <__ieee754_powf+0x156>
 800ae04:	ee38 8a48 	vsub.f32	s16, s16, s16
 800ae08:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800ae0c:	e76c      	b.n	800ace8 <__ieee754_powf+0x30>
 800ae0e:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800ae12:	d973      	bls.n	800aefc <__ieee754_powf+0x244>
 800ae14:	4bad      	ldr	r3, [pc, #692]	@ (800b0cc <__ieee754_powf+0x414>)
 800ae16:	4598      	cmp	r8, r3
 800ae18:	d808      	bhi.n	800ae2c <__ieee754_powf+0x174>
 800ae1a:	2c00      	cmp	r4, #0
 800ae1c:	da0b      	bge.n	800ae36 <__ieee754_powf+0x17e>
 800ae1e:	2000      	movs	r0, #0
 800ae20:	ecbd 8b02 	vpop	{d8}
 800ae24:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae28:	f000 bb70 	b.w	800b50c <__math_oflowf>
 800ae2c:	4ba8      	ldr	r3, [pc, #672]	@ (800b0d0 <__ieee754_powf+0x418>)
 800ae2e:	4598      	cmp	r8, r3
 800ae30:	d908      	bls.n	800ae44 <__ieee754_powf+0x18c>
 800ae32:	2c00      	cmp	r4, #0
 800ae34:	dcf3      	bgt.n	800ae1e <__ieee754_powf+0x166>
 800ae36:	2000      	movs	r0, #0
 800ae38:	ecbd 8b02 	vpop	{d8}
 800ae3c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae40:	f000 bb5e 	b.w	800b500 <__math_uflowf>
 800ae44:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ae48:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ae4c:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800b0d4 <__ieee754_powf+0x41c>
 800ae50:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800ae54:	eee0 6a67 	vfms.f32	s13, s0, s15
 800ae58:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ae5c:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800ae60:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ae64:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ae68:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800b0d8 <__ieee754_powf+0x420>
 800ae6c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800ae70:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800b0dc <__ieee754_powf+0x424>
 800ae74:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ae78:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800b0e0 <__ieee754_powf+0x428>
 800ae7c:	eef0 6a67 	vmov.f32	s13, s15
 800ae80:	eee0 6a07 	vfma.f32	s13, s0, s14
 800ae84:	ee16 3a90 	vmov	r3, s13
 800ae88:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800ae8c:	f023 030f 	bic.w	r3, r3, #15
 800ae90:	ee06 3a90 	vmov	s13, r3
 800ae94:	eee0 6a47 	vfms.f32	s13, s0, s14
 800ae98:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ae9c:	3d01      	subs	r5, #1
 800ae9e:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800aea2:	4305      	orrs	r5, r0
 800aea4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aea8:	f024 040f 	bic.w	r4, r4, #15
 800aeac:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800aeb0:	bf18      	it	ne
 800aeb2:	eeb0 8a47 	vmovne.f32	s16, s14
 800aeb6:	ee07 4a10 	vmov	s14, r4
 800aeba:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800aebe:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800aec2:	ee07 3a90 	vmov	s15, r3
 800aec6:	eee7 0a27 	vfma.f32	s1, s14, s15
 800aeca:	ee07 4a10 	vmov	s14, r4
 800aece:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aed2:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800aed6:	ee17 1a10 	vmov	r1, s14
 800aeda:	2900      	cmp	r1, #0
 800aedc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800aee0:	f340 80dd 	ble.w	800b09e <__ieee754_powf+0x3e6>
 800aee4:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800aee8:	f240 80ca 	bls.w	800b080 <__ieee754_powf+0x3c8>
 800aeec:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800aef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aef4:	bf4c      	ite	mi
 800aef6:	2001      	movmi	r0, #1
 800aef8:	2000      	movpl	r0, #0
 800aefa:	e791      	b.n	800ae20 <__ieee754_powf+0x168>
 800aefc:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800af00:	bf01      	itttt	eq
 800af02:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800b0e4 <__ieee754_powf+0x42c>
 800af06:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800af0a:	f06f 0317 	mvneq.w	r3, #23
 800af0e:	ee17 7a90 	vmoveq	r7, s15
 800af12:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800af16:	bf18      	it	ne
 800af18:	2300      	movne	r3, #0
 800af1a:	3a7f      	subs	r2, #127	@ 0x7f
 800af1c:	441a      	add	r2, r3
 800af1e:	4b72      	ldr	r3, [pc, #456]	@ (800b0e8 <__ieee754_powf+0x430>)
 800af20:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800af24:	429f      	cmp	r7, r3
 800af26:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800af2a:	dd06      	ble.n	800af3a <__ieee754_powf+0x282>
 800af2c:	4b6f      	ldr	r3, [pc, #444]	@ (800b0ec <__ieee754_powf+0x434>)
 800af2e:	429f      	cmp	r7, r3
 800af30:	f340 80a4 	ble.w	800b07c <__ieee754_powf+0x3c4>
 800af34:	3201      	adds	r2, #1
 800af36:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800af3a:	2600      	movs	r6, #0
 800af3c:	4b6c      	ldr	r3, [pc, #432]	@ (800b0f0 <__ieee754_powf+0x438>)
 800af3e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800af42:	ee07 1a10 	vmov	s14, r1
 800af46:	edd3 5a00 	vldr	s11, [r3]
 800af4a:	4b6a      	ldr	r3, [pc, #424]	@ (800b0f4 <__ieee754_powf+0x43c>)
 800af4c:	ee75 7a87 	vadd.f32	s15, s11, s14
 800af50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af54:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800af58:	1049      	asrs	r1, r1, #1
 800af5a:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800af5e:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800af62:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800af66:	ee37 6a65 	vsub.f32	s12, s14, s11
 800af6a:	ee07 1a90 	vmov	s15, r1
 800af6e:	ee26 5a24 	vmul.f32	s10, s12, s9
 800af72:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800af76:	ee15 7a10 	vmov	r7, s10
 800af7a:	401f      	ands	r7, r3
 800af7c:	ee06 7a90 	vmov	s13, r7
 800af80:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800af84:	ee37 7a65 	vsub.f32	s14, s14, s11
 800af88:	ee65 7a05 	vmul.f32	s15, s10, s10
 800af8c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800af90:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800b0f8 <__ieee754_powf+0x440>
 800af94:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800b0fc <__ieee754_powf+0x444>
 800af98:	eee7 5a87 	vfma.f32	s11, s15, s14
 800af9c:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800b100 <__ieee754_powf+0x448>
 800afa0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800afa4:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800b0d4 <__ieee754_powf+0x41c>
 800afa8:	eee7 5a27 	vfma.f32	s11, s14, s15
 800afac:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800b104 <__ieee754_powf+0x44c>
 800afb0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800afb4:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800b108 <__ieee754_powf+0x450>
 800afb8:	ee26 6a24 	vmul.f32	s12, s12, s9
 800afbc:	eee7 5a27 	vfma.f32	s11, s14, s15
 800afc0:	ee35 7a26 	vadd.f32	s14, s10, s13
 800afc4:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800afc8:	ee27 7a06 	vmul.f32	s14, s14, s12
 800afcc:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800afd0:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800afd4:	eef0 5a67 	vmov.f32	s11, s15
 800afd8:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800afdc:	ee75 5a87 	vadd.f32	s11, s11, s14
 800afe0:	ee15 1a90 	vmov	r1, s11
 800afe4:	4019      	ands	r1, r3
 800afe6:	ee05 1a90 	vmov	s11, r1
 800afea:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800afee:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800aff2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aff6:	ee67 7a85 	vmul.f32	s15, s15, s10
 800affa:	eee6 7a25 	vfma.f32	s15, s12, s11
 800affe:	eeb0 6a67 	vmov.f32	s12, s15
 800b002:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800b006:	ee16 1a10 	vmov	r1, s12
 800b00a:	4019      	ands	r1, r3
 800b00c:	ee06 1a10 	vmov	s12, r1
 800b010:	eeb0 7a46 	vmov.f32	s14, s12
 800b014:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800b018:	493c      	ldr	r1, [pc, #240]	@ (800b10c <__ieee754_powf+0x454>)
 800b01a:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800b01e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b022:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800b110 <__ieee754_powf+0x458>
 800b026:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800b114 <__ieee754_powf+0x45c>
 800b02a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b02e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800b118 <__ieee754_powf+0x460>
 800b032:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b036:	ed91 7a00 	vldr	s14, [r1]
 800b03a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b03e:	ee07 2a10 	vmov	s14, r2
 800b042:	eef0 6a67 	vmov.f32	s13, s15
 800b046:	4a35      	ldr	r2, [pc, #212]	@ (800b11c <__ieee754_powf+0x464>)
 800b048:	eee6 6a25 	vfma.f32	s13, s12, s11
 800b04c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800b050:	ed92 5a00 	vldr	s10, [r2]
 800b054:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b058:	ee76 6a85 	vadd.f32	s13, s13, s10
 800b05c:	ee76 6a87 	vadd.f32	s13, s13, s14
 800b060:	ee16 2a90 	vmov	r2, s13
 800b064:	4013      	ands	r3, r2
 800b066:	ee06 3a90 	vmov	s13, r3
 800b06a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b06e:	ee37 7a45 	vsub.f32	s14, s14, s10
 800b072:	eea6 7a65 	vfms.f32	s14, s12, s11
 800b076:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b07a:	e70f      	b.n	800ae9c <__ieee754_powf+0x1e4>
 800b07c:	2601      	movs	r6, #1
 800b07e:	e75d      	b.n	800af3c <__ieee754_powf+0x284>
 800b080:	d152      	bne.n	800b128 <__ieee754_powf+0x470>
 800b082:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800b120 <__ieee754_powf+0x468>
 800b086:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b08a:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800b08e:	eef4 6ac7 	vcmpe.f32	s13, s14
 800b092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b096:	f73f af29 	bgt.w	800aeec <__ieee754_powf+0x234>
 800b09a:	2386      	movs	r3, #134	@ 0x86
 800b09c:	e048      	b.n	800b130 <__ieee754_powf+0x478>
 800b09e:	4a21      	ldr	r2, [pc, #132]	@ (800b124 <__ieee754_powf+0x46c>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d907      	bls.n	800b0b4 <__ieee754_powf+0x3fc>
 800b0a4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b0a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0ac:	bf4c      	ite	mi
 800b0ae:	2001      	movmi	r0, #1
 800b0b0:	2000      	movpl	r0, #0
 800b0b2:	e6c1      	b.n	800ae38 <__ieee754_powf+0x180>
 800b0b4:	d138      	bne.n	800b128 <__ieee754_powf+0x470>
 800b0b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b0ba:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800b0be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0c2:	dbea      	blt.n	800b09a <__ieee754_powf+0x3e2>
 800b0c4:	e7ee      	b.n	800b0a4 <__ieee754_powf+0x3ec>
 800b0c6:	bf00      	nop
 800b0c8:	00000000 	.word	0x00000000
 800b0cc:	3f7ffff3 	.word	0x3f7ffff3
 800b0d0:	3f800007 	.word	0x3f800007
 800b0d4:	3eaaaaab 	.word	0x3eaaaaab
 800b0d8:	3fb8aa3b 	.word	0x3fb8aa3b
 800b0dc:	36eca570 	.word	0x36eca570
 800b0e0:	3fb8aa00 	.word	0x3fb8aa00
 800b0e4:	4b800000 	.word	0x4b800000
 800b0e8:	001cc471 	.word	0x001cc471
 800b0ec:	005db3d6 	.word	0x005db3d6
 800b0f0:	0800bc18 	.word	0x0800bc18
 800b0f4:	fffff000 	.word	0xfffff000
 800b0f8:	3e6c3255 	.word	0x3e6c3255
 800b0fc:	3e53f142 	.word	0x3e53f142
 800b100:	3e8ba305 	.word	0x3e8ba305
 800b104:	3edb6db7 	.word	0x3edb6db7
 800b108:	3f19999a 	.word	0x3f19999a
 800b10c:	0800bc08 	.word	0x0800bc08
 800b110:	3f76384f 	.word	0x3f76384f
 800b114:	3f763800 	.word	0x3f763800
 800b118:	369dc3a0 	.word	0x369dc3a0
 800b11c:	0800bc10 	.word	0x0800bc10
 800b120:	3338aa3c 	.word	0x3338aa3c
 800b124:	43160000 	.word	0x43160000
 800b128:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800b12c:	d971      	bls.n	800b212 <__ieee754_powf+0x55a>
 800b12e:	15db      	asrs	r3, r3, #23
 800b130:	3b7e      	subs	r3, #126	@ 0x7e
 800b132:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800b136:	4118      	asrs	r0, r3
 800b138:	4408      	add	r0, r1
 800b13a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b13e:	4a3c      	ldr	r2, [pc, #240]	@ (800b230 <__ieee754_powf+0x578>)
 800b140:	3b7f      	subs	r3, #127	@ 0x7f
 800b142:	411a      	asrs	r2, r3
 800b144:	4002      	ands	r2, r0
 800b146:	ee07 2a10 	vmov	s14, r2
 800b14a:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800b14e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800b152:	f1c3 0317 	rsb	r3, r3, #23
 800b156:	4118      	asrs	r0, r3
 800b158:	2900      	cmp	r1, #0
 800b15a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b15e:	bfb8      	it	lt
 800b160:	4240      	neglt	r0, r0
 800b162:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800b166:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800b234 <__ieee754_powf+0x57c>
 800b16a:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800b238 <__ieee754_powf+0x580>
 800b16e:	ee17 3a10 	vmov	r3, s14
 800b172:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800b176:	f023 030f 	bic.w	r3, r3, #15
 800b17a:	ee07 3a10 	vmov	s14, r3
 800b17e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b182:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b186:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800b18a:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800b23c <__ieee754_powf+0x584>
 800b18e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b192:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800b196:	eef0 6a67 	vmov.f32	s13, s15
 800b19a:	eee7 6a06 	vfma.f32	s13, s14, s12
 800b19e:	eef0 5a66 	vmov.f32	s11, s13
 800b1a2:	eee7 5a46 	vfms.f32	s11, s14, s12
 800b1a6:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800b1aa:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800b1ae:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800b240 <__ieee754_powf+0x588>
 800b1b2:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800b244 <__ieee754_powf+0x58c>
 800b1b6:	eea7 6a25 	vfma.f32	s12, s14, s11
 800b1ba:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800b248 <__ieee754_powf+0x590>
 800b1be:	eee6 5a07 	vfma.f32	s11, s12, s14
 800b1c2:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800b24c <__ieee754_powf+0x594>
 800b1c6:	eea5 6a87 	vfma.f32	s12, s11, s14
 800b1ca:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800b250 <__ieee754_powf+0x598>
 800b1ce:	eee6 5a07 	vfma.f32	s11, s12, s14
 800b1d2:	eeb0 6a66 	vmov.f32	s12, s13
 800b1d6:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800b1da:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800b1de:	ee66 5a86 	vmul.f32	s11, s13, s12
 800b1e2:	ee36 6a47 	vsub.f32	s12, s12, s14
 800b1e6:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800b1ea:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800b1ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b1f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b1f6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b1fa:	ee10 3a10 	vmov	r3, s0
 800b1fe:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800b202:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b206:	da06      	bge.n	800b216 <__ieee754_powf+0x55e>
 800b208:	f000 f8fa 	bl	800b400 <scalbnf>
 800b20c:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b210:	e56a      	b.n	800ace8 <__ieee754_powf+0x30>
 800b212:	2000      	movs	r0, #0
 800b214:	e7a5      	b.n	800b162 <__ieee754_powf+0x4aa>
 800b216:	ee00 3a10 	vmov	s0, r3
 800b21a:	e7f7      	b.n	800b20c <__ieee754_powf+0x554>
 800b21c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b220:	e562      	b.n	800ace8 <__ieee754_powf+0x30>
 800b222:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800b254 <__ieee754_powf+0x59c>
 800b226:	e55f      	b.n	800ace8 <__ieee754_powf+0x30>
 800b228:	eeb0 0a48 	vmov.f32	s0, s16
 800b22c:	e55c      	b.n	800ace8 <__ieee754_powf+0x30>
 800b22e:	bf00      	nop
 800b230:	ff800000 	.word	0xff800000
 800b234:	3f317218 	.word	0x3f317218
 800b238:	3f317200 	.word	0x3f317200
 800b23c:	35bfbe8c 	.word	0x35bfbe8c
 800b240:	b5ddea0e 	.word	0xb5ddea0e
 800b244:	3331bb4c 	.word	0x3331bb4c
 800b248:	388ab355 	.word	0x388ab355
 800b24c:	bb360b61 	.word	0xbb360b61
 800b250:	3e2aaaab 	.word	0x3e2aaaab
 800b254:	00000000 	.word	0x00000000

0800b258 <atanf>:
 800b258:	b538      	push	{r3, r4, r5, lr}
 800b25a:	ee10 5a10 	vmov	r5, s0
 800b25e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800b262:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800b266:	eef0 7a40 	vmov.f32	s15, s0
 800b26a:	d310      	bcc.n	800b28e <atanf+0x36>
 800b26c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800b270:	d904      	bls.n	800b27c <atanf+0x24>
 800b272:	ee70 7a00 	vadd.f32	s15, s0, s0
 800b276:	eeb0 0a67 	vmov.f32	s0, s15
 800b27a:	bd38      	pop	{r3, r4, r5, pc}
 800b27c:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800b3b4 <atanf+0x15c>
 800b280:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800b3b8 <atanf+0x160>
 800b284:	2d00      	cmp	r5, #0
 800b286:	bfc8      	it	gt
 800b288:	eef0 7a47 	vmovgt.f32	s15, s14
 800b28c:	e7f3      	b.n	800b276 <atanf+0x1e>
 800b28e:	4b4b      	ldr	r3, [pc, #300]	@ (800b3bc <atanf+0x164>)
 800b290:	429c      	cmp	r4, r3
 800b292:	d810      	bhi.n	800b2b6 <atanf+0x5e>
 800b294:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800b298:	d20a      	bcs.n	800b2b0 <atanf+0x58>
 800b29a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800b3c0 <atanf+0x168>
 800b29e:	ee30 7a07 	vadd.f32	s14, s0, s14
 800b2a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2a6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800b2aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2ae:	dce2      	bgt.n	800b276 <atanf+0x1e>
 800b2b0:	f04f 33ff 	mov.w	r3, #4294967295
 800b2b4:	e013      	b.n	800b2de <atanf+0x86>
 800b2b6:	f7ff fb62 	bl	800a97e <fabsf>
 800b2ba:	4b42      	ldr	r3, [pc, #264]	@ (800b3c4 <atanf+0x16c>)
 800b2bc:	429c      	cmp	r4, r3
 800b2be:	d84f      	bhi.n	800b360 <atanf+0x108>
 800b2c0:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800b2c4:	429c      	cmp	r4, r3
 800b2c6:	d841      	bhi.n	800b34c <atanf+0xf4>
 800b2c8:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800b2cc:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800b2d0:	eea0 7a27 	vfma.f32	s14, s0, s15
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b2da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b2de:	1c5a      	adds	r2, r3, #1
 800b2e0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800b2e4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800b3c8 <atanf+0x170>
 800b2e8:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800b3cc <atanf+0x174>
 800b2ec:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800b3d0 <atanf+0x178>
 800b2f0:	ee66 6a06 	vmul.f32	s13, s12, s12
 800b2f4:	eee6 5a87 	vfma.f32	s11, s13, s14
 800b2f8:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800b3d4 <atanf+0x17c>
 800b2fc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b300:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800b3d8 <atanf+0x180>
 800b304:	eee7 5a26 	vfma.f32	s11, s14, s13
 800b308:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800b3dc <atanf+0x184>
 800b30c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b310:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b3e0 <atanf+0x188>
 800b314:	eee7 5a26 	vfma.f32	s11, s14, s13
 800b318:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800b3e4 <atanf+0x18c>
 800b31c:	eea6 5a87 	vfma.f32	s10, s13, s14
 800b320:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800b3e8 <atanf+0x190>
 800b324:	eea5 7a26 	vfma.f32	s14, s10, s13
 800b328:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800b3ec <atanf+0x194>
 800b32c:	eea7 5a26 	vfma.f32	s10, s14, s13
 800b330:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800b3f0 <atanf+0x198>
 800b334:	eea5 7a26 	vfma.f32	s14, s10, s13
 800b338:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b33c:	eea5 7a86 	vfma.f32	s14, s11, s12
 800b340:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b344:	d121      	bne.n	800b38a <atanf+0x132>
 800b346:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b34a:	e794      	b.n	800b276 <atanf+0x1e>
 800b34c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b350:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b354:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b358:	2301      	movs	r3, #1
 800b35a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b35e:	e7be      	b.n	800b2de <atanf+0x86>
 800b360:	4b24      	ldr	r3, [pc, #144]	@ (800b3f4 <atanf+0x19c>)
 800b362:	429c      	cmp	r4, r3
 800b364:	d80b      	bhi.n	800b37e <atanf+0x126>
 800b366:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800b36a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b36e:	eea0 7a27 	vfma.f32	s14, s0, s15
 800b372:	2302      	movs	r3, #2
 800b374:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b378:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b37c:	e7af      	b.n	800b2de <atanf+0x86>
 800b37e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800b382:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b386:	2303      	movs	r3, #3
 800b388:	e7a9      	b.n	800b2de <atanf+0x86>
 800b38a:	4a1b      	ldr	r2, [pc, #108]	@ (800b3f8 <atanf+0x1a0>)
 800b38c:	491b      	ldr	r1, [pc, #108]	@ (800b3fc <atanf+0x1a4>)
 800b38e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b392:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800b396:	edd3 6a00 	vldr	s13, [r3]
 800b39a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800b39e:	2d00      	cmp	r5, #0
 800b3a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b3a4:	edd2 7a00 	vldr	s15, [r2]
 800b3a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b3ac:	bfb8      	it	lt
 800b3ae:	eef1 7a67 	vneglt.f32	s15, s15
 800b3b2:	e760      	b.n	800b276 <atanf+0x1e>
 800b3b4:	bfc90fdb 	.word	0xbfc90fdb
 800b3b8:	3fc90fdb 	.word	0x3fc90fdb
 800b3bc:	3edfffff 	.word	0x3edfffff
 800b3c0:	7149f2ca 	.word	0x7149f2ca
 800b3c4:	3f97ffff 	.word	0x3f97ffff
 800b3c8:	3c8569d7 	.word	0x3c8569d7
 800b3cc:	3d4bda59 	.word	0x3d4bda59
 800b3d0:	bd6ef16b 	.word	0xbd6ef16b
 800b3d4:	3d886b35 	.word	0x3d886b35
 800b3d8:	3dba2e6e 	.word	0x3dba2e6e
 800b3dc:	3e124925 	.word	0x3e124925
 800b3e0:	3eaaaaab 	.word	0x3eaaaaab
 800b3e4:	bd15a221 	.word	0xbd15a221
 800b3e8:	bd9d8795 	.word	0xbd9d8795
 800b3ec:	bde38e38 	.word	0xbde38e38
 800b3f0:	be4ccccd 	.word	0xbe4ccccd
 800b3f4:	401bffff 	.word	0x401bffff
 800b3f8:	0800bc30 	.word	0x0800bc30
 800b3fc:	0800bc20 	.word	0x0800bc20

0800b400 <scalbnf>:
 800b400:	ee10 3a10 	vmov	r3, s0
 800b404:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800b408:	d02b      	beq.n	800b462 <scalbnf+0x62>
 800b40a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b40e:	d302      	bcc.n	800b416 <scalbnf+0x16>
 800b410:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b414:	4770      	bx	lr
 800b416:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800b41a:	d123      	bne.n	800b464 <scalbnf+0x64>
 800b41c:	4b24      	ldr	r3, [pc, #144]	@ (800b4b0 <scalbnf+0xb0>)
 800b41e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800b4b4 <scalbnf+0xb4>
 800b422:	4298      	cmp	r0, r3
 800b424:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b428:	db17      	blt.n	800b45a <scalbnf+0x5a>
 800b42a:	ee10 3a10 	vmov	r3, s0
 800b42e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b432:	3a19      	subs	r2, #25
 800b434:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800b438:	4288      	cmp	r0, r1
 800b43a:	dd15      	ble.n	800b468 <scalbnf+0x68>
 800b43c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800b4b8 <scalbnf+0xb8>
 800b440:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800b4bc <scalbnf+0xbc>
 800b444:	ee10 3a10 	vmov	r3, s0
 800b448:	eeb0 7a67 	vmov.f32	s14, s15
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	bfb8      	it	lt
 800b450:	eef0 7a66 	vmovlt.f32	s15, s13
 800b454:	ee27 0a87 	vmul.f32	s0, s15, s14
 800b458:	4770      	bx	lr
 800b45a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b4c0 <scalbnf+0xc0>
 800b45e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b462:	4770      	bx	lr
 800b464:	0dd2      	lsrs	r2, r2, #23
 800b466:	e7e5      	b.n	800b434 <scalbnf+0x34>
 800b468:	4410      	add	r0, r2
 800b46a:	28fe      	cmp	r0, #254	@ 0xfe
 800b46c:	dce6      	bgt.n	800b43c <scalbnf+0x3c>
 800b46e:	2800      	cmp	r0, #0
 800b470:	dd06      	ble.n	800b480 <scalbnf+0x80>
 800b472:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b476:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b47a:	ee00 3a10 	vmov	s0, r3
 800b47e:	4770      	bx	lr
 800b480:	f110 0f16 	cmn.w	r0, #22
 800b484:	da09      	bge.n	800b49a <scalbnf+0x9a>
 800b486:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800b4c0 <scalbnf+0xc0>
 800b48a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800b4c4 <scalbnf+0xc4>
 800b48e:	ee10 3a10 	vmov	r3, s0
 800b492:	eeb0 7a67 	vmov.f32	s14, s15
 800b496:	2b00      	cmp	r3, #0
 800b498:	e7d9      	b.n	800b44e <scalbnf+0x4e>
 800b49a:	3019      	adds	r0, #25
 800b49c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b4a0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b4a4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800b4c8 <scalbnf+0xc8>
 800b4a8:	ee07 3a90 	vmov	s15, r3
 800b4ac:	e7d7      	b.n	800b45e <scalbnf+0x5e>
 800b4ae:	bf00      	nop
 800b4b0:	ffff3cb0 	.word	0xffff3cb0
 800b4b4:	4c000000 	.word	0x4c000000
 800b4b8:	7149f2ca 	.word	0x7149f2ca
 800b4bc:	f149f2ca 	.word	0xf149f2ca
 800b4c0:	0da24260 	.word	0x0da24260
 800b4c4:	8da24260 	.word	0x8da24260
 800b4c8:	33000000 	.word	0x33000000

0800b4cc <with_errnof>:
 800b4cc:	b510      	push	{r4, lr}
 800b4ce:	ed2d 8b02 	vpush	{d8}
 800b4d2:	eeb0 8a40 	vmov.f32	s16, s0
 800b4d6:	4604      	mov	r4, r0
 800b4d8:	f7fd fb8e 	bl	8008bf8 <__errno>
 800b4dc:	eeb0 0a48 	vmov.f32	s0, s16
 800b4e0:	ecbd 8b02 	vpop	{d8}
 800b4e4:	6004      	str	r4, [r0, #0]
 800b4e6:	bd10      	pop	{r4, pc}

0800b4e8 <xflowf>:
 800b4e8:	b130      	cbz	r0, 800b4f8 <xflowf+0x10>
 800b4ea:	eef1 7a40 	vneg.f32	s15, s0
 800b4ee:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b4f2:	2022      	movs	r0, #34	@ 0x22
 800b4f4:	f7ff bfea 	b.w	800b4cc <with_errnof>
 800b4f8:	eef0 7a40 	vmov.f32	s15, s0
 800b4fc:	e7f7      	b.n	800b4ee <xflowf+0x6>
	...

0800b500 <__math_uflowf>:
 800b500:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b508 <__math_uflowf+0x8>
 800b504:	f7ff bff0 	b.w	800b4e8 <xflowf>
 800b508:	10000000 	.word	0x10000000

0800b50c <__math_oflowf>:
 800b50c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b514 <__math_oflowf+0x8>
 800b510:	f7ff bfea 	b.w	800b4e8 <xflowf>
 800b514:	70000000 	.word	0x70000000

0800b518 <__ieee754_sqrtf>:
 800b518:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b51c:	4770      	bx	lr
	...

0800b520 <_init>:
 800b520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b522:	bf00      	nop
 800b524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b526:	bc08      	pop	{r3}
 800b528:	469e      	mov	lr, r3
 800b52a:	4770      	bx	lr

0800b52c <_fini>:
 800b52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b52e:	bf00      	nop
 800b530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b532:	bc08      	pop	{r3}
 800b534:	469e      	mov	lr, r3
 800b536:	4770      	bx	lr
