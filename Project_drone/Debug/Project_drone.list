
Project_drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa84  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  0800ac18  0800ac18  0000bc18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1b0  0800b1b0  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b1b0  0800b1b0  0000c1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b1b8  0800b1b8  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1b8  0800b1b8  0000c1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b1bc  0800b1bc  0000c1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b1c0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1d4  2**0
                  CONTENTS
 10 .bss          00000364  200001d4  200001d4  0000d1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000538  20000538  0000d1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000146ae  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000428a  00000000  00000000  000218b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001490  00000000  00000000  00025b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f73  00000000  00000000  00026fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026ff3  00000000  00000000  00027f43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000197cd  00000000  00000000  0004ef36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da61d  00000000  00000000  00068703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00142d20  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006384  00000000  00000000  00142d64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  001490e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800abfc 	.word	0x0800abfc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800abfc 	.word	0x0800abfc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	683a      	ldr	r2, [r7, #0]
 8000ea6:	619a      	str	r2, [r3, #24]
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	041a      	lsls	r2, r3, #16
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	619a      	str	r2, [r3, #24]
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
	...

08000ed4 <AT24C08_Page_Write>:

#include "AT24C08.h"
#include "i2c.h"

void AT24C08_Page_Write(unsigned char page, unsigned char* data, unsigned char len)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af04      	add	r7, sp, #16
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	71bb      	strb	r3, [r7, #6]
	unsigned char devAddress = ((page*16)>>8<<1) | 0xA0;
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	011b      	lsls	r3, r3, #4
 8000ee8:	121b      	asrs	r3, r3, #8
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	b25b      	sxtb	r3, r3
 8000eee:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8000ef2:	b25b      	sxtb	r3, r3
 8000ef4:	73fb      	strb	r3, [r7, #15]
	unsigned char wordAddress = (page * 16) & 0xff;
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	011b      	lsls	r3, r3, #4
 8000efa:	73bb      	strb	r3, [r7, #14]
	// 쓰기 금지 해제
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8000efc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f00:	480e      	ldr	r0, [pc, #56]	@ (8000f3c <AT24C08_Page_Write+0x68>)
 8000f02:	f7ff ffd7 	bl	8000eb4 <LL_GPIO_ResetOutputPin>
	HAL_I2C_Mem_Write(&hi2c1, devAddress, wordAddress, I2C_MEMADD_SIZE_8BIT, &data[0], 16, 1);
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	b299      	uxth	r1, r3
 8000f0a:	7bbb      	ldrb	r3, [r7, #14]
 8000f0c:	b29a      	uxth	r2, r3
 8000f0e:	2301      	movs	r3, #1
 8000f10:	9302      	str	r3, [sp, #8]
 8000f12:	2310      	movs	r3, #16
 8000f14:	9301      	str	r3, [sp, #4]
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	4808      	ldr	r0, [pc, #32]	@ (8000f40 <AT24C08_Page_Write+0x6c>)
 8000f1e:	f004 fcc3 	bl	80058a8 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000f22:	2001      	movs	r0, #1
 8000f24:	f003 f928 	bl	8004178 <HAL_Delay>
	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8000f28:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f2c:	4803      	ldr	r0, [pc, #12]	@ (8000f3c <AT24C08_Page_Write+0x68>)
 8000f2e:	f7ff ffb3 	bl	8000e98 <LL_GPIO_SetOutputPin>
}
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40020800 	.word	0x40020800
 8000f40:	2000033c 	.word	0x2000033c

08000f44 <AT24C08_Page_Read>:

void AT24C08_Page_Read(unsigned char page, unsigned char* data, unsigned char len)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af04      	add	r7, sp, #16
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	71fb      	strb	r3, [r7, #7]
 8000f50:	4613      	mov	r3, r2
 8000f52:	71bb      	strb	r3, [r7, #6]
	unsigned char devAddress = ((page*16)>>8<<1) | 0xA0;
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	121b      	asrs	r3, r3, #8
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	b25b      	sxtb	r3, r3
 8000f5e:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8000f62:	b25b      	sxtb	r3, r3
 8000f64:	73fb      	strb	r3, [r7, #15]
	unsigned char wordAddress = (page * 16) & 0xff;
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	011b      	lsls	r3, r3, #4
 8000f6a:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Read(&hi2c1, devAddress, wordAddress, I2C_MEMADD_SIZE_8BIT, &data[0], 16, 1);
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	b299      	uxth	r1, r3
 8000f70:	7bbb      	ldrb	r3, [r7, #14]
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	2301      	movs	r3, #1
 8000f76:	9302      	str	r3, [sp, #8]
 8000f78:	2310      	movs	r3, #16
 8000f7a:	9301      	str	r3, [sp, #4]
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	2301      	movs	r3, #1
 8000f82:	4803      	ldr	r0, [pc, #12]	@ (8000f90 <AT24C08_Page_Read+0x4c>)
 8000f84:	f004 fd8a 	bl	8005a9c <HAL_I2C_Mem_Read>
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	2000033c 	.word	0x2000033c

08000f94 <EP_PIDGain_Write>:


void EP_PIDGain_Write(unsigned char id, float PGain, float IGain, float DGain)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08c      	sub	sp, #48	@ 0x30
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000fa0:	edc7 0a01 	vstr	s1, [r7, #4]
 8000fa4:	ed87 1a00 	vstr	s2, [r7]
 8000fa8:	73fb      	strb	r3, [r7, #15]
	unsigned char buf_write[16];
	Parser parser;
	unsigned char chksum = 0xff;
 8000faa:	23ff      	movs	r3, #255	@ 0xff
 8000fac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	buf_write[0] = 0x45;
 8000fb0:	2345      	movs	r3, #69	@ 0x45
 8000fb2:	763b      	strb	r3, [r7, #24]
	buf_write[1] = 0x50;
 8000fb4:	2350      	movs	r3, #80	@ 0x50
 8000fb6:	767b      	strb	r3, [r7, #25]
	buf_write[2] = id;
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
 8000fba:	76bb      	strb	r3, [r7, #26]

	parser.f = PGain; //float 바이트 단위로 쪼개기
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	617b      	str	r3, [r7, #20]
	buf_write[3] = parser.byte[0];
 8000fc0:	7d3b      	ldrb	r3, [r7, #20]
 8000fc2:	76fb      	strb	r3, [r7, #27]
	buf_write[4] = parser.byte[1];
 8000fc4:	7d7b      	ldrb	r3, [r7, #21]
 8000fc6:	773b      	strb	r3, [r7, #28]
	buf_write[5] = parser.byte[2];
 8000fc8:	7dbb      	ldrb	r3, [r7, #22]
 8000fca:	777b      	strb	r3, [r7, #29]
	buf_write[6] = parser.byte[3];
 8000fcc:	7dfb      	ldrb	r3, [r7, #23]
 8000fce:	77bb      	strb	r3, [r7, #30]
	parser.f = PGain;
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	617b      	str	r3, [r7, #20]
	buf_write[7] = parser.byte[0];
 8000fd4:	7d3b      	ldrb	r3, [r7, #20]
 8000fd6:	77fb      	strb	r3, [r7, #31]
	buf_write[8] = parser.byte[1];
 8000fd8:	7d7b      	ldrb	r3, [r7, #21]
 8000fda:	f887 3020 	strb.w	r3, [r7, #32]
	buf_write[9] = parser.byte[2];
 8000fde:	7dbb      	ldrb	r3, [r7, #22]
 8000fe0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	buf_write[10] = parser.byte[3];
 8000fe4:	7dfb      	ldrb	r3, [r7, #23]
 8000fe6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	parser.f = PGain;
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	617b      	str	r3, [r7, #20]
	buf_write[11] = parser.byte[0];
 8000fee:	7d3b      	ldrb	r3, [r7, #20]
 8000ff0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	buf_write[12] = parser.byte[1];
 8000ff4:	7d7b      	ldrb	r3, [r7, #21]
 8000ff6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	buf_write[13] = parser.byte[2];
 8000ffa:	7dbb      	ldrb	r3, [r7, #22]
 8000ffc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	buf_write[14] = parser.byte[3];
 8001000:	7dfb      	ldrb	r3, [r7, #23]
 8001002:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	for(int i=0; i<15; i++)
 8001006:	2300      	movs	r3, #0
 8001008:	62bb      	str	r3, [r7, #40]	@ 0x28
 800100a:	e00c      	b.n	8001026 <EP_PIDGain_Write+0x92>
	{
		chksum -= buf_write[i];
 800100c:	f107 0218 	add.w	r2, r7, #24
 8001010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001012:	4413      	add	r3, r2
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for(int i=0; i<15; i++)
 8001020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001022:	3301      	adds	r3, #1
 8001024:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001028:	2b0e      	cmp	r3, #14
 800102a:	ddef      	ble.n	800100c <EP_PIDGain_Write+0x78>
	}
	buf_write[15] = chksum;
 800102c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001030:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	switch(id)
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	2b05      	cmp	r3, #5
 8001038:	d83e      	bhi.n	80010b8 <EP_PIDGain_Write+0x124>
 800103a:	a201      	add	r2, pc, #4	@ (adr r2, 8001040 <EP_PIDGain_Write+0xac>)
 800103c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001040:	08001059 	.word	0x08001059
 8001044:	08001069 	.word	0x08001069
 8001048:	08001079 	.word	0x08001079
 800104c:	08001089 	.word	0x08001089
 8001050:	08001099 	.word	0x08001099
 8001054:	080010a9 	.word	0x080010a9
	{
	case 0:
		AT24C08_Page_Write(0,&buf_write[0],16);
 8001058:	f107 0318 	add.w	r3, r7, #24
 800105c:	2210      	movs	r2, #16
 800105e:	4619      	mov	r1, r3
 8001060:	2000      	movs	r0, #0
 8001062:	f7ff ff37 	bl	8000ed4 <AT24C08_Page_Write>
		break;
 8001066:	e027      	b.n	80010b8 <EP_PIDGain_Write+0x124>
	case 1:
		AT24C08_Page_Write(1,&buf_write[0],16);
 8001068:	f107 0318 	add.w	r3, r7, #24
 800106c:	2210      	movs	r2, #16
 800106e:	4619      	mov	r1, r3
 8001070:	2001      	movs	r0, #1
 8001072:	f7ff ff2f 	bl	8000ed4 <AT24C08_Page_Write>
		break;
 8001076:	e01f      	b.n	80010b8 <EP_PIDGain_Write+0x124>
	case 2:
		AT24C08_Page_Write(2,&buf_write[0],16);
 8001078:	f107 0318 	add.w	r3, r7, #24
 800107c:	2210      	movs	r2, #16
 800107e:	4619      	mov	r1, r3
 8001080:	2002      	movs	r0, #2
 8001082:	f7ff ff27 	bl	8000ed4 <AT24C08_Page_Write>
		break;
 8001086:	e017      	b.n	80010b8 <EP_PIDGain_Write+0x124>
	case 3:
		AT24C08_Page_Write(3,&buf_write[0],16);
 8001088:	f107 0318 	add.w	r3, r7, #24
 800108c:	2210      	movs	r2, #16
 800108e:	4619      	mov	r1, r3
 8001090:	2003      	movs	r0, #3
 8001092:	f7ff ff1f 	bl	8000ed4 <AT24C08_Page_Write>
		break;
 8001096:	e00f      	b.n	80010b8 <EP_PIDGain_Write+0x124>
	case 4:
		AT24C08_Page_Write(4,&buf_write[0],16);
 8001098:	f107 0318 	add.w	r3, r7, #24
 800109c:	2210      	movs	r2, #16
 800109e:	4619      	mov	r1, r3
 80010a0:	2004      	movs	r0, #4
 80010a2:	f7ff ff17 	bl	8000ed4 <AT24C08_Page_Write>
		break;
 80010a6:	e007      	b.n	80010b8 <EP_PIDGain_Write+0x124>
	case 5:
		AT24C08_Page_Write(5,&buf_write[0],16);
 80010a8:	f107 0318 	add.w	r3, r7, #24
 80010ac:	2210      	movs	r2, #16
 80010ae:	4619      	mov	r1, r3
 80010b0:	2005      	movs	r0, #5
 80010b2:	f7ff ff0f 	bl	8000ed4 <AT24C08_Page_Write>
		break;
 80010b6:	bf00      	nop
	}

}
 80010b8:	bf00      	nop
 80010ba:	3730      	adds	r7, #48	@ 0x30
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <EP_PIDGain_Read>:

unsigned char EP_PIDGain_Read(unsigned char id, float* PGain, float* IGain, float* DGain )
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08c      	sub	sp, #48	@ 0x30
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	4603      	mov	r3, r0
 80010ce:	73fb      	strb	r3, [r7, #15]
	unsigned char buf_read[16];
	Parser parser;

	switch(id)
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	2b05      	cmp	r3, #5
 80010d4:	d83e      	bhi.n	8001154 <EP_PIDGain_Read+0x94>
 80010d6:	a201      	add	r2, pc, #4	@ (adr r2, 80010dc <EP_PIDGain_Read+0x1c>)
 80010d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010dc:	080010f5 	.word	0x080010f5
 80010e0:	08001105 	.word	0x08001105
 80010e4:	08001115 	.word	0x08001115
 80010e8:	08001125 	.word	0x08001125
 80010ec:	08001135 	.word	0x08001135
 80010f0:	08001145 	.word	0x08001145
	{
	case 0:
		AT24C08_Page_Read(0,&buf_read[0],16);
 80010f4:	f107 0318 	add.w	r3, r7, #24
 80010f8:	2210      	movs	r2, #16
 80010fa:	4619      	mov	r1, r3
 80010fc:	2000      	movs	r0, #0
 80010fe:	f7ff ff21 	bl	8000f44 <AT24C08_Page_Read>
		break;
 8001102:	e027      	b.n	8001154 <EP_PIDGain_Read+0x94>
	case 1:
		AT24C08_Page_Read(1,&buf_read[0],16);
 8001104:	f107 0318 	add.w	r3, r7, #24
 8001108:	2210      	movs	r2, #16
 800110a:	4619      	mov	r1, r3
 800110c:	2001      	movs	r0, #1
 800110e:	f7ff ff19 	bl	8000f44 <AT24C08_Page_Read>
		break;
 8001112:	e01f      	b.n	8001154 <EP_PIDGain_Read+0x94>
	case 2:
		AT24C08_Page_Read(2,&buf_read[0],16);
 8001114:	f107 0318 	add.w	r3, r7, #24
 8001118:	2210      	movs	r2, #16
 800111a:	4619      	mov	r1, r3
 800111c:	2002      	movs	r0, #2
 800111e:	f7ff ff11 	bl	8000f44 <AT24C08_Page_Read>
		break;
 8001122:	e017      	b.n	8001154 <EP_PIDGain_Read+0x94>
	case 3:
		AT24C08_Page_Read(3,&buf_read[0],16);
 8001124:	f107 0318 	add.w	r3, r7, #24
 8001128:	2210      	movs	r2, #16
 800112a:	4619      	mov	r1, r3
 800112c:	2003      	movs	r0, #3
 800112e:	f7ff ff09 	bl	8000f44 <AT24C08_Page_Read>
		break;
 8001132:	e00f      	b.n	8001154 <EP_PIDGain_Read+0x94>
	case 4:
		AT24C08_Page_Read(4,&buf_read[0],16);
 8001134:	f107 0318 	add.w	r3, r7, #24
 8001138:	2210      	movs	r2, #16
 800113a:	4619      	mov	r1, r3
 800113c:	2004      	movs	r0, #4
 800113e:	f7ff ff01 	bl	8000f44 <AT24C08_Page_Read>
		break;
 8001142:	e007      	b.n	8001154 <EP_PIDGain_Read+0x94>
	case 5:
		AT24C08_Page_Read(5,&buf_read[0],16);
 8001144:	f107 0318 	add.w	r3, r7, #24
 8001148:	2210      	movs	r2, #16
 800114a:	4619      	mov	r1, r3
 800114c:	2005      	movs	r0, #5
 800114e:	f7ff fef9 	bl	8000f44 <AT24C08_Page_Read>
		break;
 8001152:	bf00      	nop
	}

	unsigned char chksum = 0xff;
 8001154:	23ff      	movs	r3, #255	@ 0xff
 8001156:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for(int i=0; i<15; i++)
 800115a:	2300      	movs	r3, #0
 800115c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800115e:	e00c      	b.n	800117a <EP_PIDGain_Read+0xba>
	{
		chksum -= buf_read[i];
 8001160:	f107 0218 	add.w	r2, r7, #24
 8001164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001166:	4413      	add	r3, r2
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for(int i=0; i<15; i++)
 8001174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001176:	3301      	adds	r3, #1
 8001178:	62bb      	str	r3, [r7, #40]	@ 0x28
 800117a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800117c:	2b0e      	cmp	r3, #14
 800117e:	ddef      	ble.n	8001160 <EP_PIDGain_Read+0xa0>
	}

	if(buf_read[15] == chksum && buf_read[0] == 0x45 && buf_read[1] == 0x50)
 8001180:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001184:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001188:	429a      	cmp	r2, r3
 800118a:	d12f      	bne.n	80011ec <EP_PIDGain_Read+0x12c>
 800118c:	7e3b      	ldrb	r3, [r7, #24]
 800118e:	2b45      	cmp	r3, #69	@ 0x45
 8001190:	d12c      	bne.n	80011ec <EP_PIDGain_Read+0x12c>
 8001192:	7e7b      	ldrb	r3, [r7, #25]
 8001194:	2b50      	cmp	r3, #80	@ 0x50
 8001196:	d129      	bne.n	80011ec <EP_PIDGain_Read+0x12c>
	{
		parser.byte[0] = buf_read[3];
 8001198:	7efb      	ldrb	r3, [r7, #27]
 800119a:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[4];
 800119c:	7f3b      	ldrb	r3, [r7, #28]
 800119e:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[5];
 80011a0:	7f7b      	ldrb	r3, [r7, #29]
 80011a2:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[6];
 80011a4:	7fbb      	ldrb	r3, [r7, #30]
 80011a6:	75fb      	strb	r3, [r7, #23]
		*PGain = parser.f;
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	601a      	str	r2, [r3, #0]

		parser.byte[0] = buf_read[7];
 80011ae:	7ffb      	ldrb	r3, [r7, #31]
 80011b0:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[8];
 80011b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011b6:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[9];
 80011b8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80011bc:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[10];
 80011be:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80011c2:	75fb      	strb	r3, [r7, #23]
		*IGain = parser.f;
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	601a      	str	r2, [r3, #0]

		parser.byte[0] = buf_read[11];
 80011ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80011ce:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[12];
 80011d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80011d4:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[13];
 80011d6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80011da:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[14];
 80011dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80011e0:	75fb      	strb	r3, [r7, #23]
		*DGain = parser.f;
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	601a      	str	r2, [r3, #0]

		return 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	e000      	b.n	80011ee <EP_PIDGain_Read+0x12e>
	}
	return 1;
 80011ec:	2301      	movs	r3, #1
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3730      	adds	r7, #48	@ 0x30
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop

080011f8 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	601a      	str	r2, [r3, #0]
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f023 0210 	bic.w	r2, r3, #16
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	431a      	orrs	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	605a      	str	r2, [r3, #4]
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(const SPI_TypeDef *SPIx)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b01      	cmp	r3, #1
 8001250:	d101      	bne.n	8001256 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b02      	cmp	r3, #2
 8001276:	d101      	bne.n	800127c <LL_SPI_IsActiveFlag_TXE+0x18>
 8001278:	2301      	movs	r3, #1
 800127a:	e000      	b.n	800127e <LL_SPI_IsActiveFlag_TXE+0x1a>
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	330c      	adds	r3, #12
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	b2db      	uxtb	r3, r3
}
 800129a:	4618      	mov	r0, r3
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b085      	sub	sp, #20
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
 80012ae:	460b      	mov	r3, r1
 80012b0:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	330c      	adds	r3, #12
 80012b6:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	78fa      	ldrb	r2, [r7, #3]
 80012bc:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80012be:	bf00      	nop
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <LL_GPIO_IsInputPinSet>:
{
 80012ca:	b480      	push	{r7}
 80012cc:	b083      	sub	sp, #12
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	691a      	ldr	r2, [r3, #16]
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	4013      	ands	r3, r2
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	429a      	cmp	r2, r3
 80012e0:	bf0c      	ite	eq
 80012e2:	2301      	moveq	r3, #1
 80012e4:	2300      	movne	r3, #0
 80012e6:	b2db      	uxtb	r3, r3
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <LL_GPIO_SetOutputPin>:
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	619a      	str	r2, [r3, #24]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <LL_GPIO_ResetOutputPin>:
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	041a      	lsls	r2, r3, #16
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	619a      	str	r2, [r3, #24]
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001338:	4b08      	ldr	r3, [pc, #32]	@ (800135c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800133a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800133c:	4907      	ldr	r1, [pc, #28]	@ (800135c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4313      	orrs	r3, r2
 8001342:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001344:	4b05      	ldr	r3, [pc, #20]	@ (800135c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001346:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4013      	ands	r3, r2
 800134c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800134e:	68fb      	ldr	r3, [r7, #12]
}
 8001350:	bf00      	nop
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	40023800 	.word	0x40023800

08001360 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001368:	4b08      	ldr	r3, [pc, #32]	@ (800138c <LL_APB1_GRP1_EnableClock+0x2c>)
 800136a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800136c:	4907      	ldr	r1, [pc, #28]	@ (800138c <LL_APB1_GRP1_EnableClock+0x2c>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4313      	orrs	r3, r2
 8001372:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001374:	4b05      	ldr	r3, [pc, #20]	@ (800138c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001376:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4013      	ands	r3, r2
 800137c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800137e:	68fb      	ldr	r3, [r7, #12]
}
 8001380:	bf00      	nop
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	40023800 	.word	0x40023800

08001390 <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b090      	sub	sp, #64	@ 0x40
 8001394:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001396:	f107 0318 	add.w	r3, r7, #24
 800139a:	2228      	movs	r2, #40	@ 0x28
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f007 fd9e 	bl	8008ee0 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	463b      	mov	r3, r7
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]
 80013b2:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80013b4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80013b8:	f7ff ffd2 	bl	8001360 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80013bc:	2002      	movs	r0, #2
 80013be:	f7ff ffb7 	bl	8001330 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80013c2:	2004      	movs	r0, #4
 80013c4:	f7ff ffb4 	bl	8001330 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80013c8:	2001      	movs	r0, #1
 80013ca:	f7ff ffb1 	bl	8001330 <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 80013ce:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80013d2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013d4:	2302      	movs	r3, #2
 80013d6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013e0:	2300      	movs	r3, #0
 80013e2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80013e4:	2305      	movs	r3, #5
 80013e6:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e8:	463b      	mov	r3, r7
 80013ea:	4619      	mov	r1, r3
 80013ec:	4841      	ldr	r0, [pc, #260]	@ (80014f4 <BNO080_GPIO_SPI_Initialization+0x164>)
 80013ee:	f005 ff0a 	bl	8007206 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80013f6:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80013fa:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80013fc:	2300      	movs	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001400:	2302      	movs	r3, #2
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001404:	2301      	movs	r3, #1
 8001406:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001408:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800140c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800140e:	2318      	movs	r3, #24
 8001410:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001412:	2300      	movs	r3, #0
 8001414:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001416:	2300      	movs	r3, #0
 8001418:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 800141a:	230a      	movs	r3, #10
 800141c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 800141e:	f107 0318 	add.w	r3, r7, #24
 8001422:	4619      	mov	r1, r3
 8001424:	4834      	ldr	r0, [pc, #208]	@ (80014f8 <BNO080_GPIO_SPI_Initialization+0x168>)
 8001426:	f006 f8cc 	bl	80075c2 <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800142a:	2100      	movs	r1, #0
 800142c:	4832      	ldr	r0, [pc, #200]	@ (80014f8 <BNO080_GPIO_SPI_Initialization+0x168>)
 800142e:	f7ff fef3 	bl	8001218 <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 8001432:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001436:	4831      	ldr	r0, [pc, #196]	@ (80014fc <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001438:	f7ff ff6a 	bl	8001310 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 800143c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001440:	482c      	ldr	r0, [pc, #176]	@ (80014f4 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001442:	f7ff ff65 	bl	8001310 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 8001446:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800144a:	482d      	ldr	r0, [pc, #180]	@ (8001500 <BNO080_GPIO_SPI_Initialization+0x170>)
 800144c:	f7ff ff60 	bl	8001310 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 8001450:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001454:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001456:	2301      	movs	r3, #1
 8001458:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 8001466:	463b      	mov	r3, r7
 8001468:	4619      	mov	r1, r3
 800146a:	4822      	ldr	r0, [pc, #136]	@ (80014f4 <BNO080_GPIO_SPI_Initialization+0x164>)
 800146c:	f005 fecb 	bl	8007206 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 8001470:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001474:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001476:	2301      	movs	r3, #1
 8001478:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 8001486:	463b      	mov	r3, r7
 8001488:	4619      	mov	r1, r3
 800148a:	481c      	ldr	r0, [pc, #112]	@ (80014fc <BNO080_GPIO_SPI_Initialization+0x16c>)
 800148c:	f005 febb 	bl	8007206 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 8001490:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001494:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001496:	2301      	movs	r3, #1
 8001498:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 80014a6:	463b      	mov	r3, r7
 80014a8:	4619      	mov	r1, r3
 80014aa:	4815      	ldr	r0, [pc, #84]	@ (8001500 <BNO080_GPIO_SPI_Initialization+0x170>)
 80014ac:	f005 feab 	bl	8007206 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 80014b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014b4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80014ba:	2301      	movs	r3, #1
 80014bc:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 80014be:	463b      	mov	r3, r7
 80014c0:	4619      	mov	r1, r3
 80014c2:	480e      	ldr	r0, [pc, #56]	@ (80014fc <BNO080_GPIO_SPI_Initialization+0x16c>)
 80014c4:	f005 fe9f 	bl	8007206 <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 80014c8:	480b      	ldr	r0, [pc, #44]	@ (80014f8 <BNO080_GPIO_SPI_Initialization+0x168>)
 80014ca:	f7ff fe95 	bl	80011f8 <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 80014ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014d2:	4808      	ldr	r0, [pc, #32]	@ (80014f4 <BNO080_GPIO_SPI_Initialization+0x164>)
 80014d4:	f7ff ff0e 	bl	80012f4 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 80014d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014dc:	4808      	ldr	r0, [pc, #32]	@ (8001500 <BNO080_GPIO_SPI_Initialization+0x170>)
 80014de:	f7ff ff09 	bl	80012f4 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 80014e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014e6:	4805      	ldr	r0, [pc, #20]	@ (80014fc <BNO080_GPIO_SPI_Initialization+0x16c>)
 80014e8:	f7ff ff04 	bl	80012f4 <LL_GPIO_SetOutputPin>
}
 80014ec:	bf00      	nop
 80014ee:	3740      	adds	r7, #64	@ 0x40
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40020400 	.word	0x40020400
 80014f8:	40003800 	.word	0x40003800
 80014fc:	40020800 	.word	0x40020800
 8001500:	40020000 	.word	0x40020000

08001504 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 800150a:	f7ff ff41 	bl	8001390 <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 800150e:	482e      	ldr	r0, [pc, #184]	@ (80015c8 <BNO080_Initialization+0xc4>)
 8001510:	f007 fb9e 	bl	8008c50 <iprintf>
	
	CHIP_DESELECT(BNO080);
 8001514:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001518:	482c      	ldr	r0, [pc, #176]	@ (80015cc <BNO080_Initialization+0xc8>)
 800151a:	f7ff feeb 	bl	80012f4 <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 800151e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001522:	482b      	ldr	r0, [pc, #172]	@ (80015d0 <BNO080_Initialization+0xcc>)
 8001524:	f7ff fee6 	bl	80012f4 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 8001528:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800152c:	4829      	ldr	r0, [pc, #164]	@ (80015d4 <BNO080_Initialization+0xd0>)
 800152e:	f7ff feef 	bl	8001310 <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 8001532:	20c8      	movs	r0, #200	@ 0xc8
 8001534:	f002 fe20 	bl	8004178 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 8001538:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800153c:	4825      	ldr	r0, [pc, #148]	@ (80015d4 <BNO080_Initialization+0xd0>)
 800153e:	f7ff fed9 	bl	80012f4 <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 8001542:	f000 f8d7 	bl	80016f4 <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 8001546:	f000 f8d5 	bl	80016f4 <BNO080_waitForSPI>
	BNO080_receivePacket();
 800154a:	f000 f8f7 	bl	800173c <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 800154e:	f000 f8d1 	bl	80016f4 <BNO080_waitForSPI>
	BNO080_receivePacket();
 8001552:	f000 f8f3 	bl	800173c <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8001556:	4b20      	ldr	r3, [pc, #128]	@ (80015d8 <BNO080_Initialization+0xd4>)
 8001558:	22f9      	movs	r2, #249	@ 0xf9
 800155a:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 800155c:	4b1e      	ldr	r3, [pc, #120]	@ (80015d8 <BNO080_Initialization+0xd4>)
 800155e:	2200      	movs	r2, #0
 8001560:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 8001562:	2102      	movs	r1, #2
 8001564:	2002      	movs	r0, #2
 8001566:	f000 f959 	bl	800181c <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 800156a:	f000 f8c3 	bl	80016f4 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 800156e:	f000 f8e5 	bl	800173c <BNO080_receivePacket>
 8001572:	4603      	mov	r3, r0
 8001574:	2b01      	cmp	r3, #1
 8001576:	d11b      	bne.n	80015b0 <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 8001578:	4b18      	ldr	r3, [pc, #96]	@ (80015dc <BNO080_Initialization+0xd8>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4619      	mov	r1, r3
 800157e:	4b17      	ldr	r3, [pc, #92]	@ (80015dc <BNO080_Initialization+0xd8>)
 8001580:	785b      	ldrb	r3, [r3, #1]
 8001582:	461a      	mov	r2, r3
 8001584:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <BNO080_Initialization+0xd8>)
 8001586:	789b      	ldrb	r3, [r3, #2]
 8001588:	4618      	mov	r0, r3
 800158a:	4b14      	ldr	r3, [pc, #80]	@ (80015dc <BNO080_Initialization+0xd8>)
 800158c:	78db      	ldrb	r3, [r3, #3]
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	4603      	mov	r3, r0
 8001592:	4813      	ldr	r0, [pc, #76]	@ (80015e0 <BNO080_Initialization+0xdc>)
 8001594:	f007 fb5c 	bl	8008c50 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8001598:	4b0f      	ldr	r3, [pc, #60]	@ (80015d8 <BNO080_Initialization+0xd4>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2bf8      	cmp	r3, #248	@ 0xf8
 800159e:	d107      	bne.n	80015b0 <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 80015a0:	4b0d      	ldr	r3, [pc, #52]	@ (80015d8 <BNO080_Initialization+0xd4>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	4619      	mov	r1, r3
 80015a6:	480f      	ldr	r0, [pc, #60]	@ (80015e4 <BNO080_Initialization+0xe0>)
 80015a8:	f007 fb52 	bl	8008c50 <iprintf>
			return (0);
 80015ac:	2300      	movs	r3, #0
 80015ae:	e007      	b.n	80015c0 <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 80015b0:	4b09      	ldr	r3, [pc, #36]	@ (80015d8 <BNO080_Initialization+0xd4>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	22f8      	movs	r2, #248	@ 0xf8
 80015b6:	4619      	mov	r1, r3
 80015b8:	480b      	ldr	r0, [pc, #44]	@ (80015e8 <BNO080_Initialization+0xe4>)
 80015ba:	f007 fb49 	bl	8008c50 <iprintf>
	return (1); //Something went wrong
 80015be:	2301      	movs	r3, #1
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	0800ac18 	.word	0x0800ac18
 80015cc:	40020400 	.word	0x40020400
 80015d0:	40020000 	.word	0x40020000
 80015d4:	40020800 	.word	0x40020800
 80015d8:	200001f4 	.word	0x200001f4
 80015dc:	200001f0 	.word	0x200001f0
 80015e0:	0800ac2c 	.word	0x0800ac2c
 80015e4:	0800ac44 	.word	0x0800ac44
 80015e8:	0800ac64 	.word	0x0800ac64

080015ec <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 80015f6:	bf00      	nop
 80015f8:	480c      	ldr	r0, [pc, #48]	@ (800162c <SPI2_SendByte+0x40>)
 80015fa:	f7ff fe33 	bl	8001264 <LL_SPI_IsActiveFlag_TXE>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0f9      	beq.n	80015f8 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	4619      	mov	r1, r3
 8001608:	4808      	ldr	r0, [pc, #32]	@ (800162c <SPI2_SendByte+0x40>)
 800160a:	f7ff fe4c 	bl	80012a6 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 800160e:	bf00      	nop
 8001610:	4806      	ldr	r0, [pc, #24]	@ (800162c <SPI2_SendByte+0x40>)
 8001612:	f7ff fe14 	bl	800123e <LL_SPI_IsActiveFlag_RXNE>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0f9      	beq.n	8001610 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 800161c:	4803      	ldr	r0, [pc, #12]	@ (800162c <SPI2_SendByte+0x40>)
 800161e:	f7ff fe34 	bl	800128a <LL_SPI_ReceiveData8>
 8001622:	4603      	mov	r3, r0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40003800 	.word	0x40003800

08001630 <BNO080_enableRotationVector>:
	return fixedPointValue * powf(2, qPoint * -1);
}

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 800163a:	88fb      	ldrh	r3, [r7, #6]
 800163c:	2200      	movs	r2, #0
 800163e:	4619      	mov	r1, r3
 8001640:	2005      	movs	r0, #5
 8001642:	f000 f805 	bl	8001650 <BNO080_setFeatureCommand>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
 800165c:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 800165e:	4b24      	ldr	r3, [pc, #144]	@ (80016f0 <BNO080_setFeatureCommand+0xa0>)
 8001660:	22fd      	movs	r2, #253	@ 0xfd
 8001662:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8001664:	4a22      	ldr	r2, [pc, #136]	@ (80016f0 <BNO080_setFeatureCommand+0xa0>)
 8001666:	7bfb      	ldrb	r3, [r7, #15]
 8001668:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 800166a:	4b21      	ldr	r3, [pc, #132]	@ (80016f0 <BNO080_setFeatureCommand+0xa0>)
 800166c:	2200      	movs	r2, #0
 800166e:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 8001670:	4b1f      	ldr	r3, [pc, #124]	@ (80016f0 <BNO080_setFeatureCommand+0xa0>)
 8001672:	2200      	movs	r2, #0
 8001674:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8001676:	4b1e      	ldr	r3, [pc, #120]	@ (80016f0 <BNO080_setFeatureCommand+0xa0>)
 8001678:	2200      	movs	r2, #0
 800167a:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	4b1b      	ldr	r3, [pc, #108]	@ (80016f0 <BNO080_setFeatureCommand+0xa0>)
 8001682:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	0a1b      	lsrs	r3, r3, #8
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4b19      	ldr	r3, [pc, #100]	@ (80016f0 <BNO080_setFeatureCommand+0xa0>)
 800168c:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	0c1b      	lsrs	r3, r3, #16
 8001692:	b2da      	uxtb	r2, r3
 8001694:	4b16      	ldr	r3, [pc, #88]	@ (80016f0 <BNO080_setFeatureCommand+0xa0>)
 8001696:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	0e1b      	lsrs	r3, r3, #24
 800169c:	b2da      	uxtb	r2, r3
 800169e:	4b14      	ldr	r3, [pc, #80]	@ (80016f0 <BNO080_setFeatureCommand+0xa0>)
 80016a0:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 80016a2:	4b13      	ldr	r3, [pc, #76]	@ (80016f0 <BNO080_setFeatureCommand+0xa0>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 80016a8:	4b11      	ldr	r3, [pc, #68]	@ (80016f0 <BNO080_setFeatureCommand+0xa0>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 80016ae:	4b10      	ldr	r3, [pc, #64]	@ (80016f0 <BNO080_setFeatureCommand+0xa0>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 80016b4:	4b0e      	ldr	r3, [pc, #56]	@ (80016f0 <BNO080_setFeatureCommand+0xa0>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <BNO080_setFeatureCommand+0xa0>)
 80016c0:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	0a1b      	lsrs	r3, r3, #8
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	4b09      	ldr	r3, [pc, #36]	@ (80016f0 <BNO080_setFeatureCommand+0xa0>)
 80016ca:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	0c1b      	lsrs	r3, r3, #16
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	4b07      	ldr	r3, [pc, #28]	@ (80016f0 <BNO080_setFeatureCommand+0xa0>)
 80016d4:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	0e1b      	lsrs	r3, r3, #24
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	4b04      	ldr	r3, [pc, #16]	@ (80016f0 <BNO080_setFeatureCommand+0xa0>)
 80016de:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 80016e0:	2111      	movs	r1, #17
 80016e2:	2002      	movs	r0, #2
 80016e4:	f000 f89a 	bl	800181c <BNO080_sendPacket>
}
 80016e8:	bf00      	nop
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	200001f4 	.word	0x200001f4

080016f4 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	e00c      	b.n	800171a <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 8001700:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001704:	480b      	ldr	r0, [pc, #44]	@ (8001734 <BNO080_waitForSPI+0x40>)
 8001706:	f7ff fde0 	bl	80012ca <LL_GPIO_IsInputPinSet>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 8001710:	2301      	movs	r3, #1
 8001712:	e00a      	b.n	800172a <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3301      	adds	r3, #1
 8001718:	607b      	str	r3, [r7, #4]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001720:	d1ee      	bne.n	8001700 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 8001722:	4805      	ldr	r0, [pc, #20]	@ (8001738 <BNO080_waitForSPI+0x44>)
 8001724:	f007 fafc 	bl	8008d20 <puts>
	return (0);
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40020800 	.word	0x40020800
 8001738:	0800acb0 	.word	0x0800acb0

0800173c <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8001742:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001746:	4831      	ldr	r0, [pc, #196]	@ (800180c <BNO080_receivePacket+0xd0>)
 8001748:	f7ff fdbf 	bl	80012ca <LL_GPIO_IsInputPinSet>
 800174c:	4603      	mov	r3, r0
 800174e:	2b01      	cmp	r3, #1
 8001750:	d101      	bne.n	8001756 <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 8001752:	2300      	movs	r3, #0
 8001754:	e056      	b.n	8001804 <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 8001756:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800175a:	482d      	ldr	r0, [pc, #180]	@ (8001810 <BNO080_receivePacket+0xd4>)
 800175c:	f7ff fdd8 	bl	8001310 <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8001760:	2000      	movs	r0, #0
 8001762:	f7ff ff43 	bl	80015ec <SPI2_SendByte>
 8001766:	4603      	mov	r3, r0
 8001768:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 800176a:	2000      	movs	r0, #0
 800176c:	f7ff ff3e 	bl	80015ec <SPI2_SendByte>
 8001770:	4603      	mov	r3, r0
 8001772:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8001774:	2000      	movs	r0, #0
 8001776:	f7ff ff39 	bl	80015ec <SPI2_SendByte>
 800177a:	4603      	mov	r3, r0
 800177c:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 800177e:	2000      	movs	r0, #0
 8001780:	f7ff ff34 	bl	80015ec <SPI2_SendByte>
 8001784:	4603      	mov	r3, r0
 8001786:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8001788:	4a22      	ldr	r2, [pc, #136]	@ (8001814 <BNO080_receivePacket+0xd8>)
 800178a:	7b7b      	ldrb	r3, [r7, #13]
 800178c:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 800178e:	4a21      	ldr	r2, [pc, #132]	@ (8001814 <BNO080_receivePacket+0xd8>)
 8001790:	7b3b      	ldrb	r3, [r7, #12]
 8001792:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8001794:	4a1f      	ldr	r2, [pc, #124]	@ (8001814 <BNO080_receivePacket+0xd8>)
 8001796:	7afb      	ldrb	r3, [r7, #11]
 8001798:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 800179a:	4a1e      	ldr	r2, [pc, #120]	@ (8001814 <BNO080_receivePacket+0xd8>)
 800179c:	7abb      	ldrb	r3, [r7, #10]
 800179e:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 80017a0:	7b3b      	ldrb	r3, [r7, #12]
 80017a2:	021b      	lsls	r3, r3, #8
 80017a4:	b21a      	sxth	r2, r3
 80017a6:	7b7b      	ldrb	r3, [r7, #13]
 80017a8:	b21b      	sxth	r3, r3
 80017aa:	4313      	orrs	r3, r2
 80017ac:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 80017ae:	893b      	ldrh	r3, [r7, #8]
 80017b0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80017b4:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 80017b6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 80017be:	2300      	movs	r3, #0
 80017c0:	e020      	b.n	8001804 <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 80017c2:	893b      	ldrh	r3, [r7, #8]
 80017c4:	3b04      	subs	r3, #4
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	81fb      	strh	r3, [r7, #14]
 80017ce:	e00e      	b.n	80017ee <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 80017d0:	20ff      	movs	r0, #255	@ 0xff
 80017d2:	f7ff ff0b 	bl	80015ec <SPI2_SendByte>
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 80017da:	89fb      	ldrh	r3, [r7, #14]
 80017dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80017de:	d803      	bhi.n	80017e8 <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 80017e0:	89fb      	ldrh	r3, [r7, #14]
 80017e2:	490d      	ldr	r1, [pc, #52]	@ (8001818 <BNO080_receivePacket+0xdc>)
 80017e4:	79fa      	ldrb	r2, [r7, #7]
 80017e6:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 80017e8:	89fb      	ldrh	r3, [r7, #14]
 80017ea:	3301      	adds	r3, #1
 80017ec:	81fb      	strh	r3, [r7, #14]
 80017ee:	89fa      	ldrh	r2, [r7, #14]
 80017f0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	dbeb      	blt.n	80017d0 <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 80017f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017fc:	4804      	ldr	r0, [pc, #16]	@ (8001810 <BNO080_receivePacket+0xd4>)
 80017fe:	f7ff fd79 	bl	80012f4 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 8001802:	2301      	movs	r3, #1
}
 8001804:	4618      	mov	r0, r3
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40020800 	.word	0x40020800
 8001810:	40020400 	.word	0x40020400
 8001814:	200001f0 	.word	0x200001f0
 8001818:	200001f4 	.word	0x200001f4

0800181c <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	460a      	mov	r2, r1
 8001826:	71fb      	strb	r3, [r7, #7]
 8001828:	4613      	mov	r3, r2
 800182a:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 800182c:	79bb      	ldrb	r3, [r7, #6]
 800182e:	3304      	adds	r3, #4
 8001830:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 8001832:	f7ff ff5f 	bl	80016f4 <BNO080_waitForSPI>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 800183c:	2300      	movs	r3, #0
 800183e:	e032      	b.n	80018a6 <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 8001840:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001844:	481a      	ldr	r0, [pc, #104]	@ (80018b0 <BNO080_sendPacket+0x94>)
 8001846:	f7ff fd63 	bl	8001310 <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 800184a:	7bbb      	ldrb	r3, [r7, #14]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fecd 	bl	80015ec <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 8001852:	7bbb      	ldrb	r3, [r7, #14]
 8001854:	121b      	asrs	r3, r3, #8
 8001856:	b2db      	uxtb	r3, r3
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff fec7 	bl	80015ec <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fec3 	bl	80015ec <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	4a12      	ldr	r2, [pc, #72]	@ (80018b4 <BNO080_sendPacket+0x98>)
 800186a:	5cd2      	ldrb	r2, [r2, r3]
 800186c:	1c51      	adds	r1, r2, #1
 800186e:	b2c8      	uxtb	r0, r1
 8001870:	4910      	ldr	r1, [pc, #64]	@ (80018b4 <BNO080_sendPacket+0x98>)
 8001872:	54c8      	strb	r0, [r1, r3]
 8001874:	4610      	mov	r0, r2
 8001876:	f7ff feb9 	bl	80015ec <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 800187a:	2300      	movs	r3, #0
 800187c:	73fb      	strb	r3, [r7, #15]
 800187e:	e008      	b.n	8001892 <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	4a0d      	ldr	r2, [pc, #52]	@ (80018b8 <BNO080_sendPacket+0x9c>)
 8001884:	5cd3      	ldrb	r3, [r2, r3]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff feb0 	bl	80015ec <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	3301      	adds	r3, #1
 8001890:	73fb      	strb	r3, [r7, #15]
 8001892:	7bfa      	ldrb	r2, [r7, #15]
 8001894:	79bb      	ldrb	r3, [r7, #6]
 8001896:	429a      	cmp	r2, r3
 8001898:	d3f2      	bcc.n	8001880 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 800189a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800189e:	4804      	ldr	r0, [pc, #16]	@ (80018b0 <BNO080_sendPacket+0x94>)
 80018a0:	f7ff fd28 	bl	80012f4 <LL_GPIO_SetOutputPin>

	return (1);
 80018a4:	2301      	movs	r3, #1
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40020400 	.word	0x40020400
 80018b4:	20000274 	.word	0x20000274
 80018b8:	200001f4 	.word	0x200001f4

080018bc <iBus_Check_CHKSUM>:
#include "FS-IA6B.h"

FSiA6B_iBus iBus;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 80018c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018cc:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i< len-2; i++)
 80018ce:	2300      	movs	r3, #0
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	e00a      	b.n	80018ea <iBus_Check_CHKSUM+0x2e>
	{
		chksum = chksum - data[i];
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	89fb      	ldrh	r3, [r7, #14]
 80018e0:	1a9b      	subs	r3, r3, r2
 80018e2:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i< len-2; i++)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	3301      	adds	r3, #1
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	78fb      	ldrb	r3, [r7, #3]
 80018ec:	3b02      	subs	r3, #2
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	dbef      	blt.n	80018d4 <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff)==data[30]) && ((chksum>>8)==data[31]);
 80018f4:	89fb      	ldrh	r3, [r7, #14]
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	321e      	adds	r2, #30
 80018fc:	7812      	ldrb	r2, [r2, #0]
 80018fe:	4293      	cmp	r3, r2
 8001900:	d109      	bne.n	8001916 <iBus_Check_CHKSUM+0x5a>
 8001902:	89fb      	ldrh	r3, [r7, #14]
 8001904:	0a1b      	lsrs	r3, r3, #8
 8001906:	b29b      	uxth	r3, r3
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	321f      	adds	r2, #31
 800190c:	7812      	ldrb	r2, [r2, #0]
 800190e:	4293      	cmp	r3, r2
 8001910:	d101      	bne.n	8001916 <iBus_Check_CHKSUM+0x5a>
 8001912:	2301      	movs	r3, #1
 8001914:	e000      	b.n	8001918 <iBus_Check_CHKSUM+0x5c>
 8001916:	2300      	movs	r3, #0
 8001918:	b2db      	uxtb	r3, r3
}
 800191a:	4618      	mov	r0, r3
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	6039      	str	r1, [r7, #0]
	iBus->RH =  (data[2]  | data[3]<<8)  & 0x0fff; // 하위 12비트만 사용
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3302      	adds	r3, #2
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	b21a      	sxth	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3303      	adds	r3, #3
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	021b      	lsls	r3, r3, #8
 8001940:	b21b      	sxth	r3, r3
 8001942:	4313      	orrs	r3, r2
 8001944:	b21b      	sxth	r3, r3
 8001946:	b29b      	uxth	r3, r3
 8001948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800194c:	b29a      	uxth	r2, r3
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	801a      	strh	r2, [r3, #0]
	iBus->RV =  (data[4]  | data[5]<<8)  & 0x0fff;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3304      	adds	r3, #4
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	b21a      	sxth	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3305      	adds	r3, #5
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	021b      	lsls	r3, r3, #8
 8001962:	b21b      	sxth	r3, r3
 8001964:	4313      	orrs	r3, r2
 8001966:	b21b      	sxth	r3, r3
 8001968:	b29b      	uxth	r3, r3
 800196a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800196e:	b29a      	uxth	r2, r3
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	805a      	strh	r2, [r3, #2]
	iBus->LV =  (data[6]  | data[7]<<8)  & 0x0fff;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3306      	adds	r3, #6
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	b21a      	sxth	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3307      	adds	r3, #7
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	021b      	lsls	r3, r3, #8
 8001984:	b21b      	sxth	r3, r3
 8001986:	4313      	orrs	r3, r2
 8001988:	b21b      	sxth	r3, r3
 800198a:	b29b      	uxth	r3, r3
 800198c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001990:	b29a      	uxth	r2, r3
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	809a      	strh	r2, [r3, #4]
	iBus->LH =  (data[8]  | data[9]<<8)  & 0x0fff;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	3308      	adds	r3, #8
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	b21a      	sxth	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3309      	adds	r3, #9
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	021b      	lsls	r3, r3, #8
 80019a6:	b21b      	sxth	r3, r3
 80019a8:	4313      	orrs	r3, r2
 80019aa:	b21b      	sxth	r3, r3
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0fff;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	330a      	adds	r3, #10
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	b21a      	sxth	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	330b      	adds	r3, #11
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	021b      	lsls	r3, r3, #8
 80019c8:	b21b      	sxth	r3, r3
 80019ca:	4313      	orrs	r3, r2
 80019cc:	b21b      	sxth	r3, r3
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	811a      	strh	r2, [r3, #8]
	iBus->SwC = (data[12] | data[13]<<8) & 0x0fff;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	330c      	adds	r3, #12
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	b21a      	sxth	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	330d      	adds	r3, #13
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	021b      	lsls	r3, r3, #8
 80019ea:	b21b      	sxth	r3, r3
 80019ec:	4313      	orrs	r3, r2
 80019ee:	b21b      	sxth	r3, r3
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	819a      	strh	r2, [r3, #12]

	iBus->FailSafe = data[13] >> 4;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	330d      	adds	r3, #13
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	091b      	lsrs	r3, r3, #4
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	751a      	strb	r2, [r3, #20]
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <iBus_isActiveFailsafe>:

unsigned char iBus_isActiveFailsafe(FSiA6B_iBus* iBus)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
	return iBus->FailSafe != 0;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	7d1b      	ldrb	r3, [r3, #20]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	bf14      	ite	ne
 8001a26:	2301      	movne	r3, #1
 8001a28:	2300      	moveq	r3, #0
 8001a2a:	b2db      	uxtb	r3, r3
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <LL_SPI_Enable>:
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	601a      	str	r2, [r3, #0]
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <LL_SPI_SetStandard>:
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f023 0210 	bic.w	r2, r3, #16
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	605a      	str	r2, [r3, #4]
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <LL_SPI_IsActiveFlag_RXNE>:
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d101      	bne.n	8001a96 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001a92:	2301      	movs	r3, #1
 8001a94:	e000      	b.n	8001a98 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <LL_SPI_IsActiveFlag_TXE>:
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d101      	bne.n	8001abc <LL_SPI_IsActiveFlag_TXE+0x18>
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e000      	b.n	8001abe <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <LL_SPI_ReceiveData8>:
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	330c      	adds	r3, #12
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	b2db      	uxtb	r3, r3
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <LL_SPI_TransmitData8>:
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b085      	sub	sp, #20
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
 8001aee:	460b      	mov	r3, r1
 8001af0:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	330c      	adds	r3, #12
 8001af6:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	78fa      	ldrb	r2, [r7, #3]
 8001afc:	701a      	strb	r2, [r3, #0]
}
 8001afe:	bf00      	nop
 8001b00:	3714      	adds	r7, #20
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <LL_GPIO_SetOutputPin>:
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	619a      	str	r2, [r3, #24]
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <LL_GPIO_ResetOutputPin>:
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	041a      	lsls	r2, r3, #16
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	619a      	str	r2, [r3, #24]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_AHB1_GRP1_EnableClock>:
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001b4c:	4b08      	ldr	r3, [pc, #32]	@ (8001b70 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b50:	4907      	ldr	r1, [pc, #28]	@ (8001b70 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001b58:	4b05      	ldr	r3, [pc, #20]	@ (8001b70 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b62:	68fb      	ldr	r3, [r7, #12]
}
 8001b64:	bf00      	nop
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	40023800 	.word	0x40023800

08001b74 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001b7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ba0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b7e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b80:	4907      	ldr	r1, [pc, #28]	@ (8001ba0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001b88:	4b05      	ldr	r3, [pc, #20]	@ (8001ba0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b92:	68fb      	ldr	r3, [r7, #12]
}
 8001b94:	bf00      	nop
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	40023800 	.word	0x40023800

08001ba4 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b090      	sub	sp, #64	@ 0x40
 8001ba8:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001baa:	f107 0318 	add.w	r3, r7, #24
 8001bae:	2228      	movs	r2, #40	@ 0x28
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f007 f994 	bl	8008ee0 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	463b      	mov	r3, r7
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	60da      	str	r2, [r3, #12]
 8001bc4:	611a      	str	r2, [r3, #16]
 8001bc6:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001bc8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001bcc:	f7ff ffd2 	bl	8001b74 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	f7ff ffb7 	bl	8001b44 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001bd6:	2004      	movs	r0, #4
 8001bd8:	f7ff ffb4 	bl	8001b44 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001bdc:	23e0      	movs	r3, #224	@ 0xe0
 8001bde:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001be0:	2302      	movs	r3, #2
 8001be2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001be4:	2303      	movs	r3, #3
 8001be6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bec:	2300      	movs	r3, #0
 8001bee:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001bf0:	2305      	movs	r3, #5
 8001bf2:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf4:	463b      	mov	r3, r7
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4825      	ldr	r0, [pc, #148]	@ (8001c90 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8001bfa:	f005 fb04 	bl	8007206 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001c02:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001c06:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001c10:	2301      	movs	r3, #1
 8001c12:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001c14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 8001c1a:	2310      	movs	r3, #16
 8001c1c:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001c26:	230a      	movs	r3, #10
 8001c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 8001c2a:	f107 0318 	add.w	r3, r7, #24
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4818      	ldr	r0, [pc, #96]	@ (8001c94 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001c32:	f005 fcc6 	bl	80075c2 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001c36:	2100      	movs	r1, #0
 8001c38:	4816      	ldr	r0, [pc, #88]	@ (8001c94 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001c3a:	f7ff ff0d 	bl	8001a58 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 8001c3e:	2110      	movs	r1, #16
 8001c40:	4815      	ldr	r0, [pc, #84]	@ (8001c98 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001c42:	f7ff ff70 	bl	8001b26 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 8001c46:	2310      	movs	r3, #16
 8001c48:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c56:	2300      	movs	r3, #0
 8001c58:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 8001c5a:	463b      	mov	r3, r7
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	480e      	ldr	r0, [pc, #56]	@ (8001c98 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001c60:	f005 fad1 	bl	8007206 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8001c64:	2320      	movs	r3, #32
 8001c66:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8001c70:	463b      	mov	r3, r7
 8001c72:	4619      	mov	r1, r3
 8001c74:	4808      	ldr	r0, [pc, #32]	@ (8001c98 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001c76:	f005 fac6 	bl	8007206 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 8001c7a:	4806      	ldr	r0, [pc, #24]	@ (8001c94 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001c7c:	f7ff fedc 	bl	8001a38 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8001c80:	2110      	movs	r1, #16
 8001c82:	4805      	ldr	r0, [pc, #20]	@ (8001c98 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001c84:	f7ff ff41 	bl	8001b0a <LL_GPIO_SetOutputPin>
}
 8001c88:	bf00      	nop
 8001c8a:	3740      	adds	r7, #64	@ 0x40
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40020000 	.word	0x40020000
 8001c94:	40013000 	.word	0x40013000
 8001c98:	40020800 	.word	0x40020800

08001c9c <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 8001ca6:	bf00      	nop
 8001ca8:	480c      	ldr	r0, [pc, #48]	@ (8001cdc <SPI1_SendByte+0x40>)
 8001caa:	f7ff fefb 	bl	8001aa4 <LL_SPI_IsActiveFlag_TXE>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0f9      	beq.n	8001ca8 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4808      	ldr	r0, [pc, #32]	@ (8001cdc <SPI1_SendByte+0x40>)
 8001cba:	f7ff ff14 	bl	8001ae6 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 8001cbe:	bf00      	nop
 8001cc0:	4806      	ldr	r0, [pc, #24]	@ (8001cdc <SPI1_SendByte+0x40>)
 8001cc2:	f7ff fedc 	bl	8001a7e <LL_SPI_IsActiveFlag_RXNE>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0f9      	beq.n	8001cc0 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8001ccc:	4803      	ldr	r0, [pc, #12]	@ (8001cdc <SPI1_SendByte+0x40>)
 8001cce:	f7ff fefc 	bl	8001aca <LL_SPI_ReceiveData8>
 8001cd2:	4603      	mov	r3, r0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40013000 	.word	0x40013000

08001ce0 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 8001cea:	2110      	movs	r1, #16
 8001cec:	480b      	ldr	r0, [pc, #44]	@ (8001d1c <ICM20602_Readbyte+0x3c>)
 8001cee:	f7ff ff1a 	bl	8001b26 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff ffce 	bl	8001c9c <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001d00:	2000      	movs	r0, #0
 8001d02:	f7ff ffcb 	bl	8001c9c <SPI1_SendByte>
 8001d06:	4603      	mov	r3, r0
 8001d08:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 8001d0a:	2110      	movs	r1, #16
 8001d0c:	4803      	ldr	r0, [pc, #12]	@ (8001d1c <ICM20602_Readbyte+0x3c>)
 8001d0e:	f7ff fefc 	bl	8001b0a <LL_GPIO_SetOutputPin>
	
	return val;
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40020800 	.word	0x40020800

08001d20 <ICM20602_Writebyte>:
	}
	CHIP_DESELECT(ICM20602);
}

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	460a      	mov	r2, r1
 8001d2a:	71fb      	strb	r3, [r7, #7]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 8001d30:	2110      	movs	r1, #16
 8001d32:	480b      	ldr	r0, [pc, #44]	@ (8001d60 <ICM20602_Writebyte+0x40>)
 8001d34:	f7ff fef7 	bl	8001b26 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff ffab 	bl	8001c9c <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 8001d46:	79bb      	ldrb	r3, [r7, #6]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ffa7 	bl	8001c9c <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 8001d4e:	2110      	movs	r1, #16
 8001d50:	4803      	ldr	r0, [pc, #12]	@ (8001d60 <ICM20602_Writebyte+0x40>)
 8001d52:	f7ff feda 	bl	8001b0a <LL_GPIO_SetOutputPin>
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40020800 	.word	0x40020800

08001d64 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8001d6e:	f107 0308 	add.w	r3, r7, #8
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8001d78:	463b      	mov	r3, r7
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8001d80:	f7ff ff10 	bl	8001ba4 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 8001d84:	4833      	ldr	r0, [pc, #204]	@ (8001e54 <ICM20602_Initialization+0xf0>)
 8001d86:	f006 ff63 	bl	8008c50 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 8001d8a:	2075      	movs	r0, #117	@ 0x75
 8001d8c:	f7ff ffa8 	bl	8001ce0 <ICM20602_Readbyte>
 8001d90:	4603      	mov	r3, r0
 8001d92:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	2b12      	cmp	r3, #18
 8001d98:	d105      	bne.n	8001da6 <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	482e      	ldr	r0, [pc, #184]	@ (8001e58 <ICM20602_Initialization+0xf4>)
 8001da0:	f006 ff56 	bl	8008c50 <iprintf>
 8001da4:	e012      	b.n	8001dcc <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
 8001da8:	2b12      	cmp	r3, #18
 8001daa:	d00f      	beq.n	8001dcc <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8001dac:	2075      	movs	r0, #117	@ 0x75
 8001dae:	f7ff ff97 	bl	8001ce0 <ICM20602_Readbyte>
 8001db2:	4603      	mov	r3, r0
 8001db4:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
 8001db8:	2b12      	cmp	r3, #18
 8001dba:	d007      	beq.n	8001dcc <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
 8001dbe:	2212      	movs	r2, #18
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4826      	ldr	r0, [pc, #152]	@ (8001e5c <ICM20602_Initialization+0xf8>)
 8001dc4:	f006 ff44 	bl	8008c50 <iprintf>
			return 1; //ERROR
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e03f      	b.n	8001e4c <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8001dcc:	2180      	movs	r1, #128	@ 0x80
 8001dce:	206b      	movs	r0, #107	@ 0x6b
 8001dd0:	f7ff ffa6 	bl	8001d20 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001dd4:	2032      	movs	r0, #50	@ 0x32
 8001dd6:	f002 f9cf 	bl	8004178 <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 8001dda:	2101      	movs	r1, #1
 8001ddc:	206b      	movs	r0, #107	@ 0x6b
 8001dde:	f7ff ff9f 	bl	8001d20 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 8001de2:	2032      	movs	r0, #50	@ 0x32
 8001de4:	f002 f9c8 	bl	8004178 <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 8001de8:	2138      	movs	r1, #56	@ 0x38
 8001dea:	206c      	movs	r0, #108	@ 0x6c
 8001dec:	f7ff ff98 	bl	8001d20 <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 8001df0:	2032      	movs	r0, #50	@ 0x32
 8001df2:	f002 f9c1 	bl	8004178 <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8001df6:	2100      	movs	r1, #0
 8001df8:	2019      	movs	r0, #25
 8001dfa:	f7ff ff91 	bl	8001d20 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001dfe:	2032      	movs	r0, #50	@ 0x32
 8001e00:	f002 f9ba 	bl	8004178 <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8001e04:	2105      	movs	r1, #5
 8001e06:	201a      	movs	r0, #26
 8001e08:	f7ff ff8a 	bl	8001d20 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001e0c:	2032      	movs	r0, #50	@ 0x32
 8001e0e:	f002 f9b3 	bl	8004178 <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8001e12:	2118      	movs	r1, #24
 8001e14:	201b      	movs	r0, #27
 8001e16:	f7ff ff83 	bl	8001d20 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001e1a:	2032      	movs	r0, #50	@ 0x32
 8001e1c:	f002 f9ac 	bl	8004178 <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8001e20:	2118      	movs	r1, #24
 8001e22:	201c      	movs	r0, #28
 8001e24:	f7ff ff7c 	bl	8001d20 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001e28:	2032      	movs	r0, #50	@ 0x32
 8001e2a:	f002 f9a5 	bl	8004178 <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8001e2e:	2103      	movs	r1, #3
 8001e30:	201d      	movs	r0, #29
 8001e32:	f7ff ff75 	bl	8001d20 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001e36:	2032      	movs	r0, #50	@ 0x32
 8001e38:	f002 f99e 	bl	8004178 <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	2038      	movs	r0, #56	@ 0x38
 8001e40:	f7ff ff6e 	bl	8001d20 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001e44:	2032      	movs	r0, #50	@ 0x32
 8001e46:	f002 f997 	bl	8004178 <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	0800acc4 	.word	0x0800acc4
 8001e58:	0800acdc 	.word	0x0800acdc
 8001e5c:	0800ad00 	.word	0x0800ad00

08001e60 <LL_SPI_Enable>:
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	601a      	str	r2, [r3, #0]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <LL_SPI_SetStandard>:
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f023 0210 	bic.w	r2, r3, #16
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	431a      	orrs	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	605a      	str	r2, [r3, #4]
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <LL_SPI_IsActiveFlag_RXNE>:
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d101      	bne.n	8001ebe <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <LL_SPI_IsActiveFlag_TXE>:
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d101      	bne.n	8001ee4 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e000      	b.n	8001ee6 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <LL_SPI_ReceiveData8>:
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	330c      	adds	r3, #12
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	b2db      	uxtb	r3, r3
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <LL_SPI_TransmitData8>:
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b085      	sub	sp, #20
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	460b      	mov	r3, r1
 8001f18:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	330c      	adds	r3, #12
 8001f1e:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	78fa      	ldrb	r2, [r7, #3]
 8001f24:	701a      	strb	r2, [r3, #0]
}
 8001f26:	bf00      	nop
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <LL_GPIO_SetOutputPin>:
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	619a      	str	r2, [r3, #24]
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <LL_GPIO_ResetOutputPin>:
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	041a      	lsls	r2, r3, #16
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	619a      	str	r2, [r3, #24]
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <LL_AHB1_GRP1_EnableClock>:
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001f74:	4b08      	ldr	r3, [pc, #32]	@ (8001f98 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f78:	4907      	ldr	r1, [pc, #28]	@ (8001f98 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001f80:	4b05      	ldr	r3, [pc, #20]	@ (8001f98 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4013      	ands	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	40023800 	.word	0x40023800

08001f9c <LL_APB1_GRP1_EnableClock>:
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001fa4:	4b08      	ldr	r3, [pc, #32]	@ (8001fc8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fa6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001fa8:	4907      	ldr	r1, [pc, #28]	@ (8001fc8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001fb0:	4b05      	ldr	r3, [pc, #20]	@ (8001fc8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fba:	68fb      	ldr	r3, [r7, #12]
}
 8001fbc:	bf00      	nop
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	40023800 	.word	0x40023800

08001fcc <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b090      	sub	sp, #64	@ 0x40
 8001fd0:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001fd2:	f107 0318 	add.w	r3, r7, #24
 8001fd6:	2228      	movs	r2, #40	@ 0x28
 8001fd8:	2100      	movs	r1, #0
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f006 ff80 	bl	8008ee0 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	463b      	mov	r3, r7
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	605a      	str	r2, [r3, #4]
 8001fe8:	609a      	str	r2, [r3, #8]
 8001fea:	60da      	str	r2, [r3, #12]
 8001fec:	611a      	str	r2, [r3, #16]
 8001fee:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8001ff0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001ff4:	f7ff ffd2 	bl	8001f9c <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001ff8:	2002      	movs	r0, #2
 8001ffa:	f7ff ffb7 	bl	8001f6c <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8001ffe:	2338      	movs	r3, #56	@ 0x38
 8002000:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002002:	2302      	movs	r3, #2
 8002004:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002006:	2303      	movs	r3, #3
 8002008:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8002012:	2306      	movs	r3, #6
 8002014:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002016:	463b      	mov	r3, r7
 8002018:	4619      	mov	r1, r3
 800201a:	4826      	ldr	r0, [pc, #152]	@ (80020b4 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 800201c:	f005 f8f3 	bl	8007206 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002020:	2300      	movs	r3, #0
 8002022:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002024:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002028:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800202a:	2300      	movs	r3, #0
 800202c:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800202e:	2302      	movs	r3, #2
 8002030:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002032:	2301      	movs	r3, #1
 8002034:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002036:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800203a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 800203c:	2308      	movs	r3, #8
 800203e:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002040:	2300      	movs	r3, #0
 8002042:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002044:	2300      	movs	r3, #0
 8002046:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 8002048:	230a      	movs	r3, #10
 800204a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 800204c:	f107 0318 	add.w	r3, r7, #24
 8002050:	4619      	mov	r1, r3
 8002052:	4819      	ldr	r0, [pc, #100]	@ (80020b8 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8002054:	f005 fab5 	bl	80075c2 <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8002058:	2100      	movs	r1, #0
 800205a:	4817      	ldr	r0, [pc, #92]	@ (80020b8 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 800205c:	f7ff ff10 	bl	8001e80 <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 8002060:	2140      	movs	r1, #64	@ 0x40
 8002062:	4814      	ldr	r0, [pc, #80]	@ (80020b4 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002064:	f7ff ff73 	bl	8001f4e <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 8002068:	2340      	movs	r3, #64	@ 0x40
 800206a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800206c:	2301      	movs	r3, #1
 800206e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002070:	2303      	movs	r3, #3
 8002072:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002078:	2300      	movs	r3, #0
 800207a:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 800207c:	463b      	mov	r3, r7
 800207e:	4619      	mov	r1, r3
 8002080:	480c      	ldr	r0, [pc, #48]	@ (80020b4 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002082:	f005 f8c0 	bl	8007206 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 8002086:	2380      	movs	r3, #128	@ 0x80
 8002088:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800208a:	2300      	movs	r3, #0
 800208c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800208e:	2301      	movs	r3, #1
 8002090:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 8002092:	463b      	mov	r3, r7
 8002094:	4619      	mov	r1, r3
 8002096:	4807      	ldr	r0, [pc, #28]	@ (80020b4 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002098:	f005 f8b5 	bl	8007206 <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 800209c:	4806      	ldr	r0, [pc, #24]	@ (80020b8 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 800209e:	f7ff fedf 	bl	8001e60 <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 80020a2:	2140      	movs	r1, #64	@ 0x40
 80020a4:	4803      	ldr	r0, [pc, #12]	@ (80020b4 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80020a6:	f7ff ff44 	bl	8001f32 <LL_GPIO_SetOutputPin>
}
 80020aa:	bf00      	nop
 80020ac:	3740      	adds	r7, #64	@ 0x40
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40020400 	.word	0x40020400
 80020b8:	40003c00 	.word	0x40003c00

080020bc <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 80020c6:	bf00      	nop
 80020c8:	480c      	ldr	r0, [pc, #48]	@ (80020fc <SPI3_SendByte+0x40>)
 80020ca:	f7ff feff 	bl	8001ecc <LL_SPI_IsActiveFlag_TXE>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0f9      	beq.n	80020c8 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	4619      	mov	r1, r3
 80020d8:	4808      	ldr	r0, [pc, #32]	@ (80020fc <SPI3_SendByte+0x40>)
 80020da:	f7ff ff18 	bl	8001f0e <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 80020de:	bf00      	nop
 80020e0:	4806      	ldr	r0, [pc, #24]	@ (80020fc <SPI3_SendByte+0x40>)
 80020e2:	f7ff fee0 	bl	8001ea6 <LL_SPI_IsActiveFlag_RXNE>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0f9      	beq.n	80020e0 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 80020ec:	4803      	ldr	r0, [pc, #12]	@ (80020fc <SPI3_SendByte+0x40>)
 80020ee:	f7ff ff00 	bl	8001ef2 <LL_SPI_ReceiveData8>
 80020f2:	4603      	mov	r3, r0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40003c00 	.word	0x40003c00

08002100 <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 800210a:	2140      	movs	r1, #64	@ 0x40
 800210c:	480b      	ldr	r0, [pc, #44]	@ (800213c <LPS22HH_Readbyte+0x3c>)
 800210e:	f7ff ff1e 	bl	8001f4e <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002118:	b2db      	uxtb	r3, r3
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff ffce 	bl	80020bc <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 8002120:	2000      	movs	r0, #0
 8002122:	f7ff ffcb 	bl	80020bc <SPI3_SendByte>
 8002126:	4603      	mov	r3, r0
 8002128:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 800212a:	2140      	movs	r1, #64	@ 0x40
 800212c:	4803      	ldr	r0, [pc, #12]	@ (800213c <LPS22HH_Readbyte+0x3c>)
 800212e:	f7ff ff00 	bl	8001f32 <LL_GPIO_SetOutputPin>
	
	return val;
 8002132:	7bfb      	ldrb	r3, [r7, #15]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40020400 	.word	0x40020400

08002140 <LPS22HH_Writebyte>:
	}
	CHIP_DESELECT(LPS22HH);
}

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	460a      	mov	r2, r1
 800214a:	71fb      	strb	r3, [r7, #7]
 800214c:	4613      	mov	r3, r2
 800214e:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 8002150:	2140      	movs	r1, #64	@ 0x40
 8002152:	480b      	ldr	r0, [pc, #44]	@ (8002180 <LPS22HH_Writebyte+0x40>)
 8002154:	f7ff fefb 	bl	8001f4e <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800215e:	b2db      	uxtb	r3, r3
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ffab 	bl	80020bc <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 8002166:	79bb      	ldrb	r3, [r7, #6]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ffa7 	bl	80020bc <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 800216e:	2140      	movs	r1, #64	@ 0x40
 8002170:	4803      	ldr	r0, [pc, #12]	@ (8002180 <LPS22HH_Writebyte+0x40>)
 8002172:	f7ff fede 	bl	8001f32 <LL_GPIO_SetOutputPin>
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40020400 	.word	0x40020400

08002184 <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 800218a:	2300      	movs	r3, #0
 800218c:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 800218e:	f7ff ff1d 	bl	8001fcc <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 8002192:	4841      	ldr	r0, [pc, #260]	@ (8002298 <LPS22HH_Initialization+0x114>)
 8002194:	f006 fd5c 	bl	8008c50 <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 8002198:	200f      	movs	r0, #15
 800219a:	f7ff ffb1 	bl	8002100 <LPS22HH_Readbyte>
 800219e:	4603      	mov	r3, r0
 80021a0:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	2bb3      	cmp	r3, #179	@ 0xb3
 80021a6:	d105      	bne.n	80021b4 <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	4619      	mov	r1, r3
 80021ac:	483b      	ldr	r0, [pc, #236]	@ (800229c <LPS22HH_Initialization+0x118>)
 80021ae:	f006 fd4f 	bl	8008c50 <iprintf>
 80021b2:	e012      	b.n	80021da <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	2bb3      	cmp	r3, #179	@ 0xb3
 80021b8:	d00f      	beq.n	80021da <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 80021ba:	200f      	movs	r0, #15
 80021bc:	f7ff ffa0 	bl	8002100 <LPS22HH_Readbyte>
 80021c0:	4603      	mov	r3, r0
 80021c2:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	2bb3      	cmp	r3, #179	@ 0xb3
 80021c8:	d007      	beq.n	80021da <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 80021ca:	79fb      	ldrb	r3, [r7, #7]
 80021cc:	22b3      	movs	r2, #179	@ 0xb3
 80021ce:	4619      	mov	r1, r3
 80021d0:	4833      	ldr	r0, [pc, #204]	@ (80022a0 <LPS22HH_Initialization+0x11c>)
 80021d2:	f006 fd3d 	bl	8008c50 <iprintf>
			return 1; //ERROR
 80021d6:	2301      	movs	r3, #1
 80021d8:	e059      	b.n	800228e <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 80021da:	2104      	movs	r1, #4
 80021dc:	2011      	movs	r0, #17
 80021de:	f7ff ffaf 	bl	8002140 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 80021e2:	2011      	movs	r0, #17
 80021e4:	f7ff ff8c 	bl	8002100 <LPS22HH_Readbyte>
 80021e8:	4603      	mov	r3, r0
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1f7      	bne.n	80021e2 <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 80021f2:	2010      	movs	r0, #16
 80021f4:	f7ff ff84 	bl	8002100 <LPS22HH_Readbyte>
 80021f8:	4603      	mov	r3, r0
 80021fa:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 80021fc:	79bb      	ldrb	r3, [r7, #6]
 80021fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002202:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002204:	79bb      	ldrb	r3, [r7, #6]
 8002206:	4619      	mov	r1, r3
 8002208:	2010      	movs	r0, #16
 800220a:	f7ff ff99 	bl	8002140 <LPS22HH_Writebyte>
	temp_reg = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002212:	2010      	movs	r0, #16
 8002214:	f7ff ff74 	bl	8002100 <LPS22HH_Readbyte>
 8002218:	4603      	mov	r3, r0
 800221a:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 800221c:	2010      	movs	r0, #16
 800221e:	f7ff ff6f 	bl	8002100 <LPS22HH_Readbyte>
 8002222:	4603      	mov	r3, r0
 8002224:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 8002226:	79bb      	ldrb	r3, [r7, #6]
 8002228:	f043 030c 	orr.w	r3, r3, #12
 800222c:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 800222e:	79bb      	ldrb	r3, [r7, #6]
 8002230:	4619      	mov	r1, r3
 8002232:	2010      	movs	r0, #16
 8002234:	f7ff ff84 	bl	8002140 <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002238:	2010      	movs	r0, #16
 800223a:	f7ff ff61 	bl	8002100 <LPS22HH_Readbyte>
 800223e:	4603      	mov	r3, r0
 8002240:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8002242:	79bb      	ldrb	r3, [r7, #6]
 8002244:	f043 0302 	orr.w	r3, r3, #2
 8002248:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 800224a:	79bb      	ldrb	r3, [r7, #6]
 800224c:	4619      	mov	r1, r3
 800224e:	2010      	movs	r0, #16
 8002250:	f7ff ff76 	bl	8002140 <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 8002254:	2011      	movs	r0, #17
 8002256:	f7ff ff53 	bl	8002100 <LPS22HH_Readbyte>
 800225a:	4603      	mov	r3, r0
 800225c:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 800225e:	79bb      	ldrb	r3, [r7, #6]
 8002260:	f043 0302 	orr.w	r3, r3, #2
 8002264:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 8002266:	79bb      	ldrb	r3, [r7, #6]
 8002268:	4619      	mov	r1, r3
 800226a:	2011      	movs	r0, #17
 800226c:	f7ff ff68 	bl	8002140 <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 8002270:	2012      	movs	r0, #18
 8002272:	f7ff ff45 	bl	8002100 <LPS22HH_Readbyte>
 8002276:	4603      	mov	r3, r0
 8002278:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 800227a:	79bb      	ldrb	r3, [r7, #6]
 800227c:	f043 0304 	orr.w	r3, r3, #4
 8002280:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 8002282:	79bb      	ldrb	r3, [r7, #6]
 8002284:	4619      	mov	r1, r3
 8002286:	2012      	movs	r0, #18
 8002288:	f7ff ff5a 	bl	8002140 <LPS22HH_Writebyte>
	
	return 0; //OK
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	0800ad2c 	.word	0x0800ad2c
 800229c:	0800ad40 	.word	0x0800ad40
 80022a0:	0800ad64 	.word	0x0800ad64

080022a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a8:	4b04      	ldr	r3, [pc, #16]	@ (80022bc <__NVIC_GetPriorityGrouping+0x18>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	0a1b      	lsrs	r3, r3, #8
 80022ae:	f003 0307 	and.w	r3, r3, #7
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	db0b      	blt.n	80022ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	f003 021f 	and.w	r2, r3, #31
 80022d8:	4907      	ldr	r1, [pc, #28]	@ (80022f8 <__NVIC_EnableIRQ+0x38>)
 80022da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022de:	095b      	lsrs	r3, r3, #5
 80022e0:	2001      	movs	r0, #1
 80022e2:	fa00 f202 	lsl.w	r2, r0, r2
 80022e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	e000e100 	.word	0xe000e100

080022fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	6039      	str	r1, [r7, #0]
 8002306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230c:	2b00      	cmp	r3, #0
 800230e:	db0a      	blt.n	8002326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	b2da      	uxtb	r2, r3
 8002314:	490c      	ldr	r1, [pc, #48]	@ (8002348 <__NVIC_SetPriority+0x4c>)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	0112      	lsls	r2, r2, #4
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	440b      	add	r3, r1
 8002320:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002324:	e00a      	b.n	800233c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	b2da      	uxtb	r2, r3
 800232a:	4908      	ldr	r1, [pc, #32]	@ (800234c <__NVIC_SetPriority+0x50>)
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	3b04      	subs	r3, #4
 8002334:	0112      	lsls	r2, r2, #4
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	440b      	add	r3, r1
 800233a:	761a      	strb	r2, [r3, #24]
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	e000e100 	.word	0xe000e100
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002350:	b480      	push	{r7}
 8002352:	b089      	sub	sp, #36	@ 0x24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f1c3 0307 	rsb	r3, r3, #7
 800236a:	2b04      	cmp	r3, #4
 800236c:	bf28      	it	cs
 800236e:	2304      	movcs	r3, #4
 8002370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3304      	adds	r3, #4
 8002376:	2b06      	cmp	r3, #6
 8002378:	d902      	bls.n	8002380 <NVIC_EncodePriority+0x30>
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3b03      	subs	r3, #3
 800237e:	e000      	b.n	8002382 <NVIC_EncodePriority+0x32>
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002384:	f04f 32ff 	mov.w	r2, #4294967295
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43da      	mvns	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	401a      	ands	r2, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002398:	f04f 31ff 	mov.w	r1, #4294967295
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	fa01 f303 	lsl.w	r3, r1, r3
 80023a2:	43d9      	mvns	r1, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a8:	4313      	orrs	r3, r2
         );
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3724      	adds	r7, #36	@ 0x24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	60da      	str	r2, [r3, #12]
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	615a      	str	r2, [r3, #20]
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002412:	2b80      	cmp	r3, #128	@ 0x80
 8002414:	bf0c      	ite	eq
 8002416:	2301      	moveq	r3, #1
 8002418:	2300      	movne	r3, #0
 800241a:	b2db      	uxtb	r3, r3
}
 800241c:	4618      	mov	r0, r3
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002434:	78fa      	ldrb	r2, [r7, #3]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	605a      	str	r2, [r3, #4]
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
	...

08002448 <LL_AHB1_GRP1_EnableClock>:
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002450:	4b08      	ldr	r3, [pc, #32]	@ (8002474 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002452:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002454:	4907      	ldr	r1, [pc, #28]	@ (8002474 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4313      	orrs	r3, r2
 800245a:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800245c:	4b05      	ldr	r3, [pc, #20]	@ (8002474 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800245e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4013      	ands	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002466:	68fb      	ldr	r3, [r7, #12]
}
 8002468:	bf00      	nop
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	40023800 	.word	0x40023800

08002478 <LL_APB1_GRP1_EnableClock>:
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002480:	4b08      	ldr	r3, [pc, #32]	@ (80024a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002482:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002484:	4907      	ldr	r1, [pc, #28]	@ (80024a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4313      	orrs	r3, r2
 800248a:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800248c:	4b05      	ldr	r3, [pc, #20]	@ (80024a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800248e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4013      	ands	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002496:	68fb      	ldr	r3, [r7, #12]
}
 8002498:	bf00      	nop
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	40023800 	.word	0x40023800

080024a8 <M8N_TransmitData>:
 0xBF
}; //Save current configuration, Devices: BBR, FLASH, I2C-EEPROM, SPI-FLASH


void M8N_TransmitData(unsigned char* data, unsigned char len)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	70fb      	strb	r3, [r7, #3]
	for(int i=0; i<len; i++)
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	e011      	b.n	80024de <M8N_TransmitData+0x36>
	{
		while(!LL_USART_IsActiveFlag_TXE(UART4));
 80024ba:	bf00      	nop
 80024bc:	480c      	ldr	r0, [pc, #48]	@ (80024f0 <M8N_TransmitData+0x48>)
 80024be:	f7ff ffa0 	bl	8002402 <LL_USART_IsActiveFlag_TXE>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0f9      	beq.n	80024bc <M8N_TransmitData+0x14>
		LL_USART_TransmitData8(UART4, *(data+i));
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	4413      	add	r3, r2
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	4619      	mov	r1, r3
 80024d2:	4807      	ldr	r0, [pc, #28]	@ (80024f0 <M8N_TransmitData+0x48>)
 80024d4:	f7ff ffa8 	bl	8002428 <LL_USART_TransmitData8>
	for(int i=0; i<len; i++)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	3301      	adds	r3, #1
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	78fb      	ldrb	r3, [r7, #3]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	dbe9      	blt.n	80024ba <M8N_TransmitData+0x12>
	}
}
 80024e6:	bf00      	nop
 80024e8:	bf00      	nop
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40004c00 	.word	0x40004c00

080024f4 <M8N_Initialization>:

void M8N_Initialization(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
	N8M_UART4_Initialization();
 80024f8:	f000 f824 	bl	8002544 <N8M_UART4_Initialization>

	M8N_TransmitData(&UBX_CFG_PRT[0], sizeof(UBX_CFG_PRT));
 80024fc:	211c      	movs	r1, #28
 80024fe:	480d      	ldr	r0, [pc, #52]	@ (8002534 <M8N_Initialization+0x40>)
 8002500:	f7ff ffd2 	bl	80024a8 <M8N_TransmitData>
	HAL_Delay(100);
 8002504:	2064      	movs	r0, #100	@ 0x64
 8002506:	f001 fe37 	bl	8004178 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_MSG[0], sizeof(UBX_CFG_MSG));
 800250a:	2110      	movs	r1, #16
 800250c:	480a      	ldr	r0, [pc, #40]	@ (8002538 <M8N_Initialization+0x44>)
 800250e:	f7ff ffcb 	bl	80024a8 <M8N_TransmitData>
	HAL_Delay(100);
 8002512:	2064      	movs	r0, #100	@ 0x64
 8002514:	f001 fe30 	bl	8004178 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_RATE[0], sizeof(UBX_CFG_RATE));
 8002518:	210e      	movs	r1, #14
 800251a:	4808      	ldr	r0, [pc, #32]	@ (800253c <M8N_Initialization+0x48>)
 800251c:	f7ff ffc4 	bl	80024a8 <M8N_TransmitData>
	HAL_Delay(100);
 8002520:	2064      	movs	r0, #100	@ 0x64
 8002522:	f001 fe29 	bl	8004178 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_CFG[0], sizeof(UBX_CFG_CFG));
 8002526:	2115      	movs	r1, #21
 8002528:	4805      	ldr	r0, [pc, #20]	@ (8002540 <M8N_Initialization+0x4c>)
 800252a:	f7ff ffbd 	bl	80024a8 <M8N_TransmitData>
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	0800adb8 	.word	0x0800adb8
 8002538:	0800add4 	.word	0x0800add4
 800253c:	0800ade4 	.word	0x0800ade4
 8002540:	0800adf4 	.word	0x0800adf4

08002544 <N8M_UART4_Initialization>:

void N8M_UART4_Initialization(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08e      	sub	sp, #56	@ 0x38
 8002548:	af00      	add	r7, sp, #0
	  LL_USART_InitTypeDef USART_InitStruct = {0};
 800254a:	f107 031c 	add.w	r3, r7, #28
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	605a      	str	r2, [r3, #4]
 8002554:	609a      	str	r2, [r3, #8]
 8002556:	60da      	str	r2, [r3, #12]
 8002558:	611a      	str	r2, [r3, #16]
 800255a:	615a      	str	r2, [r3, #20]
 800255c:	619a      	str	r2, [r3, #24]

	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255e:	1d3b      	adds	r3, r7, #4
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]
 800256c:	615a      	str	r2, [r3, #20]

	  /* Peripheral clock enable */
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 800256e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002572:	f7ff ff81 	bl	8002478 <LL_APB1_GRP1_EnableClock>

	  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002576:	2004      	movs	r0, #4
 8002578:	f7ff ff66 	bl	8002448 <LL_AHB1_GRP1_EnableClock>
	  /**UART4 GPIO Configuration
	  PC10   ------> UART4_TX
	  PC11   ------> UART4_RX
	  */
	  GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 800257c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002580:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002582:	2302      	movs	r3, #2
 8002584:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002586:	2303      	movs	r3, #3
 8002588:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800258a:	2300      	movs	r3, #0
 800258c:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800258e:	2300      	movs	r3, #0
 8002590:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002592:	2308      	movs	r3, #8
 8002594:	61bb      	str	r3, [r7, #24]
	  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002596:	1d3b      	adds	r3, r7, #4
 8002598:	4619      	mov	r1, r3
 800259a:	4819      	ldr	r0, [pc, #100]	@ (8002600 <N8M_UART4_Initialization+0xbc>)
 800259c:	f004 fe33 	bl	8007206 <LL_GPIO_Init>

	  /* UART4 interrupt Init */
	  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80025a0:	f7ff fe80 	bl	80022a4 <__NVIC_GetPriorityGrouping>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2200      	movs	r2, #0
 80025a8:	2100      	movs	r1, #0
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff fed0 	bl	8002350 <NVIC_EncodePriority>
 80025b0:	4603      	mov	r3, r0
 80025b2:	4619      	mov	r1, r3
 80025b4:	2034      	movs	r0, #52	@ 0x34
 80025b6:	f7ff fea1 	bl	80022fc <__NVIC_SetPriority>
	  NVIC_EnableIRQ(UART4_IRQn);
 80025ba:	2034      	movs	r0, #52	@ 0x34
 80025bc:	f7ff fe80 	bl	80022c0 <__NVIC_EnableIRQ>

	  /* USER CODE BEGIN UART4_Init 1 */

	  /* USER CODE END UART4_Init 1 */
	  USART_InitStruct.BaudRate = 9600;
 80025c0:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 80025c4:	61fb      	str	r3, [r7, #28]
	  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80025c6:	2300      	movs	r3, #0
 80025c8:	623b      	str	r3, [r7, #32]
	  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80025ca:	2300      	movs	r3, #0
 80025cc:	627b      	str	r3, [r7, #36]	@ 0x24
	  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80025ce:	2300      	movs	r3, #0
 80025d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80025d2:	230c      	movs	r3, #12
 80025d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80025d6:	2300      	movs	r3, #0
 80025d8:	633b      	str	r3, [r7, #48]	@ 0x30
	  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80025da:	2300      	movs	r3, #0
 80025dc:	637b      	str	r3, [r7, #52]	@ 0x34
	  LL_USART_Init(UART4, &USART_InitStruct);
 80025de:	f107 031c 	add.w	r3, r7, #28
 80025e2:	4619      	mov	r1, r3
 80025e4:	4807      	ldr	r0, [pc, #28]	@ (8002604 <N8M_UART4_Initialization+0xc0>)
 80025e6:	f005 fd99 	bl	800811c <LL_USART_Init>
	  LL_USART_ConfigAsyncMode(UART4);
 80025ea:	4806      	ldr	r0, [pc, #24]	@ (8002604 <N8M_UART4_Initialization+0xc0>)
 80025ec:	f7ff fef3 	bl	80023d6 <LL_USART_ConfigAsyncMode>
	  LL_USART_Enable(UART4);
 80025f0:	4804      	ldr	r0, [pc, #16]	@ (8002604 <N8M_UART4_Initialization+0xc0>)
 80025f2:	f7ff fee0 	bl	80023b6 <LL_USART_Enable>
}
 80025f6:	bf00      	nop
 80025f8:	3738      	adds	r7, #56	@ 0x38
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40020800 	.word	0x40020800
 8002604:	40004c00 	.word	0x40004c00

08002608 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800260e:	463b      	mov	r3, r7
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	605a      	str	r2, [r3, #4]
 8002616:	609a      	str	r2, [r3, #8]
 8002618:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800261a:	4b21      	ldr	r3, [pc, #132]	@ (80026a0 <MX_ADC1_Init+0x98>)
 800261c:	4a21      	ldr	r2, [pc, #132]	@ (80026a4 <MX_ADC1_Init+0x9c>)
 800261e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002620:	4b1f      	ldr	r3, [pc, #124]	@ (80026a0 <MX_ADC1_Init+0x98>)
 8002622:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002626:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002628:	4b1d      	ldr	r3, [pc, #116]	@ (80026a0 <MX_ADC1_Init+0x98>)
 800262a:	2200      	movs	r2, #0
 800262c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800262e:	4b1c      	ldr	r3, [pc, #112]	@ (80026a0 <MX_ADC1_Init+0x98>)
 8002630:	2200      	movs	r2, #0
 8002632:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002634:	4b1a      	ldr	r3, [pc, #104]	@ (80026a0 <MX_ADC1_Init+0x98>)
 8002636:	2201      	movs	r2, #1
 8002638:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800263a:	4b19      	ldr	r3, [pc, #100]	@ (80026a0 <MX_ADC1_Init+0x98>)
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002642:	4b17      	ldr	r3, [pc, #92]	@ (80026a0 <MX_ADC1_Init+0x98>)
 8002644:	2200      	movs	r2, #0
 8002646:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002648:	4b15      	ldr	r3, [pc, #84]	@ (80026a0 <MX_ADC1_Init+0x98>)
 800264a:	4a17      	ldr	r2, [pc, #92]	@ (80026a8 <MX_ADC1_Init+0xa0>)
 800264c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800264e:	4b14      	ldr	r3, [pc, #80]	@ (80026a0 <MX_ADC1_Init+0x98>)
 8002650:	2200      	movs	r2, #0
 8002652:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002654:	4b12      	ldr	r3, [pc, #72]	@ (80026a0 <MX_ADC1_Init+0x98>)
 8002656:	2201      	movs	r2, #1
 8002658:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800265a:	4b11      	ldr	r3, [pc, #68]	@ (80026a0 <MX_ADC1_Init+0x98>)
 800265c:	2201      	movs	r2, #1
 800265e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002662:	4b0f      	ldr	r3, [pc, #60]	@ (80026a0 <MX_ADC1_Init+0x98>)
 8002664:	2201      	movs	r2, #1
 8002666:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002668:	480d      	ldr	r0, [pc, #52]	@ (80026a0 <MX_ADC1_Init+0x98>)
 800266a:	f001 fda9 	bl	80041c0 <HAL_ADC_Init>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002674:	f000 fcf0 	bl	8003058 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002678:	2308      	movs	r3, #8
 800267a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800267c:	2301      	movs	r3, #1
 800267e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002680:	2307      	movs	r3, #7
 8002682:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002684:	463b      	mov	r3, r7
 8002686:	4619      	mov	r1, r3
 8002688:	4805      	ldr	r0, [pc, #20]	@ (80026a0 <MX_ADC1_Init+0x98>)
 800268a:	f001 ff0b 	bl	80044a4 <HAL_ADC_ConfigChannel>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002694:	f000 fce0 	bl	8003058 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002698:	bf00      	nop
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20000294 	.word	0x20000294
 80026a4:	40012000 	.word	0x40012000
 80026a8:	0f000001 	.word	0x0f000001

080026ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08a      	sub	sp, #40	@ 0x28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	60da      	str	r2, [r3, #12]
 80026c2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a2e      	ldr	r2, [pc, #184]	@ (8002784 <HAL_ADC_MspInit+0xd8>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d156      	bne.n	800277c <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002788 <HAL_ADC_MspInit+0xdc>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d6:	4a2c      	ldr	r2, [pc, #176]	@ (8002788 <HAL_ADC_MspInit+0xdc>)
 80026d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80026de:	4b2a      	ldr	r3, [pc, #168]	@ (8002788 <HAL_ADC_MspInit+0xdc>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	4b26      	ldr	r3, [pc, #152]	@ (8002788 <HAL_ADC_MspInit+0xdc>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	4a25      	ldr	r2, [pc, #148]	@ (8002788 <HAL_ADC_MspInit+0xdc>)
 80026f4:	f043 0302 	orr.w	r3, r3, #2
 80026f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026fa:	4b23      	ldr	r3, [pc, #140]	@ (8002788 <HAL_ADC_MspInit+0xdc>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002706:	2301      	movs	r3, #1
 8002708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800270a:	2303      	movs	r3, #3
 800270c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002712:	f107 0314 	add.w	r3, r7, #20
 8002716:	4619      	mov	r1, r3
 8002718:	481c      	ldr	r0, [pc, #112]	@ (800278c <HAL_ADC_MspInit+0xe0>)
 800271a:	f002 fde5 	bl	80052e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800271e:	4b1c      	ldr	r3, [pc, #112]	@ (8002790 <HAL_ADC_MspInit+0xe4>)
 8002720:	4a1c      	ldr	r2, [pc, #112]	@ (8002794 <HAL_ADC_MspInit+0xe8>)
 8002722:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002724:	4b1a      	ldr	r3, [pc, #104]	@ (8002790 <HAL_ADC_MspInit+0xe4>)
 8002726:	2200      	movs	r2, #0
 8002728:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800272a:	4b19      	ldr	r3, [pc, #100]	@ (8002790 <HAL_ADC_MspInit+0xe4>)
 800272c:	2200      	movs	r2, #0
 800272e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002730:	4b17      	ldr	r3, [pc, #92]	@ (8002790 <HAL_ADC_MspInit+0xe4>)
 8002732:	2200      	movs	r2, #0
 8002734:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8002736:	4b16      	ldr	r3, [pc, #88]	@ (8002790 <HAL_ADC_MspInit+0xe4>)
 8002738:	2200      	movs	r2, #0
 800273a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800273c:	4b14      	ldr	r3, [pc, #80]	@ (8002790 <HAL_ADC_MspInit+0xe4>)
 800273e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002742:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002744:	4b12      	ldr	r3, [pc, #72]	@ (8002790 <HAL_ADC_MspInit+0xe4>)
 8002746:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800274a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800274c:	4b10      	ldr	r3, [pc, #64]	@ (8002790 <HAL_ADC_MspInit+0xe4>)
 800274e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002752:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002754:	4b0e      	ldr	r3, [pc, #56]	@ (8002790 <HAL_ADC_MspInit+0xe4>)
 8002756:	2200      	movs	r2, #0
 8002758:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800275a:	4b0d      	ldr	r3, [pc, #52]	@ (8002790 <HAL_ADC_MspInit+0xe4>)
 800275c:	2200      	movs	r2, #0
 800275e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002760:	480b      	ldr	r0, [pc, #44]	@ (8002790 <HAL_ADC_MspInit+0xe4>)
 8002762:	f002 fa51 	bl	8004c08 <HAL_DMA_Init>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 800276c:	f000 fc74 	bl	8003058 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a07      	ldr	r2, [pc, #28]	@ (8002790 <HAL_ADC_MspInit+0xe4>)
 8002774:	639a      	str	r2, [r3, #56]	@ 0x38
 8002776:	4a06      	ldr	r2, [pc, #24]	@ (8002790 <HAL_ADC_MspInit+0xe4>)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800277c:	bf00      	nop
 800277e:	3728      	adds	r7, #40	@ 0x28
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40012000 	.word	0x40012000
 8002788:	40023800 	.word	0x40023800
 800278c:	40020400 	.word	0x40020400
 8002790:	200002dc 	.word	0x200002dc
 8002794:	40026410 	.word	0x40026410

08002798 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	607b      	str	r3, [r7, #4]
 80027a2:	4b0c      	ldr	r3, [pc, #48]	@ (80027d4 <MX_DMA_Init+0x3c>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a6:	4a0b      	ldr	r2, [pc, #44]	@ (80027d4 <MX_DMA_Init+0x3c>)
 80027a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ae:	4b09      	ldr	r3, [pc, #36]	@ (80027d4 <MX_DMA_Init+0x3c>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027b6:	607b      	str	r3, [r7, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80027ba:	2200      	movs	r2, #0
 80027bc:	2100      	movs	r1, #0
 80027be:	2038      	movs	r0, #56	@ 0x38
 80027c0:	f002 f9eb 	bl	8004b9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80027c4:	2038      	movs	r0, #56	@ 0x38
 80027c6:	f002 fa04 	bl	8004bd2 <HAL_NVIC_EnableIRQ>

}
 80027ca:	bf00      	nop
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40023800 	.word	0x40023800

080027d8 <LL_GPIO_SetOutputPin>:
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	619a      	str	r2, [r3, #24]
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <LL_GPIO_ResetOutputPin>:
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	041a      	lsls	r2, r3, #16
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	619a      	str	r2, [r3, #24]
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
	...

08002814 <LL_AHB1_GRP1_EnableClock>:
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800281c:	4b08      	ldr	r3, [pc, #32]	@ (8002840 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800281e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002820:	4907      	ldr	r1, [pc, #28]	@ (8002840 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4313      	orrs	r3, r2
 8002826:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002828:	4b05      	ldr	r3, [pc, #20]	@ (8002840 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800282a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4013      	ands	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002832:	68fb      	ldr	r3, [r7, #12]
}
 8002834:	bf00      	nop
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	40023800 	.word	0x40023800

08002844 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800284a:	463b      	mov	r3, r7
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]
 8002854:	60da      	str	r2, [r3, #12]
 8002856:	611a      	str	r2, [r3, #16]
 8002858:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800285a:	2004      	movs	r0, #4
 800285c:	f7ff ffda 	bl	8002814 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8002860:	2080      	movs	r0, #128	@ 0x80
 8002862:	f7ff ffd7 	bl	8002814 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002866:	2001      	movs	r0, #1
 8002868:	f7ff ffd4 	bl	8002814 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800286c:	2002      	movs	r0, #2
 800286e:	f7ff ffd1 	bl	8002814 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8002872:	2008      	movs	r0, #8
 8002874:	f7ff ffce 	bl	8002814 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8002878:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800287c:	482e      	ldr	r0, [pc, #184]	@ (8002938 <MX_GPIO_Init+0xf4>)
 800287e:	f7ff ffab 	bl	80027d8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4
 8002882:	f240 2117 	movw	r1, #535	@ 0x217
 8002886:	482c      	ldr	r0, [pc, #176]	@ (8002938 <MX_GPIO_Init+0xf4>)
 8002888:	f7ff ffb4 	bl	80027f4 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_6);
 800288c:	f44f 5182 	mov.w	r1, #4160	@ 0x1040
 8002890:	482a      	ldr	r0, [pc, #168]	@ (800293c <MX_GPIO_Init+0xf8>)
 8002892:	f7ff ffaf 	bl	80027f4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8002896:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800289a:	4829      	ldr	r0, [pc, #164]	@ (8002940 <MX_GPIO_Init+0xfc>)
 800289c:	f7ff ffaa 	bl	80027f4 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2
 80028a0:	f242 2317 	movw	r3, #8727	@ 0x2217
 80028a4:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80028a6:	2301      	movs	r3, #1
 80028a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80028aa:	2300      	movs	r3, #0
 80028ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80028b2:	2300      	movs	r3, #0
 80028b4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028b6:	463b      	mov	r3, r7
 80028b8:	4619      	mov	r1, r3
 80028ba:	481f      	ldr	r0, [pc, #124]	@ (8002938 <MX_GPIO_Init+0xf4>)
 80028bc:	f004 fca3 	bl	8007206 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_8;
 80028c0:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80028c4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80028c6:	2300      	movs	r3, #0
 80028c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80028ca:	2300      	movs	r3, #0
 80028cc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ce:	463b      	mov	r3, r7
 80028d0:	4619      	mov	r1, r3
 80028d2:	4819      	ldr	r0, [pc, #100]	@ (8002938 <MX_GPIO_Init+0xf4>)
 80028d4:	f004 fc97 	bl	8007206 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_6;
 80028d8:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 80028dc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80028de:	2301      	movs	r3, #1
 80028e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80028e2:	2300      	movs	r3, #0
 80028e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80028ea:	2300      	movs	r3, #0
 80028ec:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ee:	463b      	mov	r3, r7
 80028f0:	4619      	mov	r1, r3
 80028f2:	4812      	ldr	r0, [pc, #72]	@ (800293c <MX_GPIO_Init+0xf8>)
 80028f4:	f004 fc87 	bl	8007206 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80028f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028fc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80028fe:	2301      	movs	r3, #1
 8002900:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002902:	2300      	movs	r3, #0
 8002904:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002906:	2300      	movs	r3, #0
 8002908:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800290a:	2300      	movs	r3, #0
 800290c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800290e:	463b      	mov	r3, r7
 8002910:	4619      	mov	r1, r3
 8002912:	480b      	ldr	r0, [pc, #44]	@ (8002940 <MX_GPIO_Init+0xfc>)
 8002914:	f004 fc77 	bl	8007206 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8002918:	2380      	movs	r3, #128	@ 0x80
 800291a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800291c:	2300      	movs	r3, #0
 800291e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002920:	2300      	movs	r3, #0
 8002922:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002924:	463b      	mov	r3, r7
 8002926:	4619      	mov	r1, r3
 8002928:	4804      	ldr	r0, [pc, #16]	@ (800293c <MX_GPIO_Init+0xf8>)
 800292a:	f004 fc6c 	bl	8007206 <LL_GPIO_Init>

}
 800292e:	bf00      	nop
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40020800 	.word	0x40020800
 800293c:	40020400 	.word	0x40020400
 8002940:	40020000 	.word	0x40020000

08002944 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002948:	4b12      	ldr	r3, [pc, #72]	@ (8002994 <MX_I2C1_Init+0x50>)
 800294a:	4a13      	ldr	r2, [pc, #76]	@ (8002998 <MX_I2C1_Init+0x54>)
 800294c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800294e:	4b11      	ldr	r3, [pc, #68]	@ (8002994 <MX_I2C1_Init+0x50>)
 8002950:	4a12      	ldr	r2, [pc, #72]	@ (800299c <MX_I2C1_Init+0x58>)
 8002952:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002954:	4b0f      	ldr	r3, [pc, #60]	@ (8002994 <MX_I2C1_Init+0x50>)
 8002956:	2200      	movs	r2, #0
 8002958:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800295a:	4b0e      	ldr	r3, [pc, #56]	@ (8002994 <MX_I2C1_Init+0x50>)
 800295c:	2200      	movs	r2, #0
 800295e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002960:	4b0c      	ldr	r3, [pc, #48]	@ (8002994 <MX_I2C1_Init+0x50>)
 8002962:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002966:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002968:	4b0a      	ldr	r3, [pc, #40]	@ (8002994 <MX_I2C1_Init+0x50>)
 800296a:	2200      	movs	r2, #0
 800296c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800296e:	4b09      	ldr	r3, [pc, #36]	@ (8002994 <MX_I2C1_Init+0x50>)
 8002970:	2200      	movs	r2, #0
 8002972:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002974:	4b07      	ldr	r3, [pc, #28]	@ (8002994 <MX_I2C1_Init+0x50>)
 8002976:	2200      	movs	r2, #0
 8002978:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800297a:	4b06      	ldr	r3, [pc, #24]	@ (8002994 <MX_I2C1_Init+0x50>)
 800297c:	2200      	movs	r2, #0
 800297e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002980:	4804      	ldr	r0, [pc, #16]	@ (8002994 <MX_I2C1_Init+0x50>)
 8002982:	f002 fe4d 	bl	8005620 <HAL_I2C_Init>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800298c:	f000 fb64 	bl	8003058 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002990:	bf00      	nop
 8002992:	bd80      	pop	{r7, pc}
 8002994:	2000033c 	.word	0x2000033c
 8002998:	40005400 	.word	0x40005400
 800299c:	00061a80 	.word	0x00061a80

080029a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08a      	sub	sp, #40	@ 0x28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a8:	f107 0314 	add.w	r3, r7, #20
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	60da      	str	r2, [r3, #12]
 80029b6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a19      	ldr	r2, [pc, #100]	@ (8002a24 <HAL_I2C_MspInit+0x84>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d12c      	bne.n	8002a1c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	613b      	str	r3, [r7, #16]
 80029c6:	4b18      	ldr	r3, [pc, #96]	@ (8002a28 <HAL_I2C_MspInit+0x88>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ca:	4a17      	ldr	r2, [pc, #92]	@ (8002a28 <HAL_I2C_MspInit+0x88>)
 80029cc:	f043 0302 	orr.w	r3, r3, #2
 80029d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029d2:	4b15      	ldr	r3, [pc, #84]	@ (8002a28 <HAL_I2C_MspInit+0x88>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	613b      	str	r3, [r7, #16]
 80029dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80029e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029e4:	2312      	movs	r3, #18
 80029e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ec:	2303      	movs	r3, #3
 80029ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029f0:	2304      	movs	r3, #4
 80029f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029f4:	f107 0314 	add.w	r3, r7, #20
 80029f8:	4619      	mov	r1, r3
 80029fa:	480c      	ldr	r0, [pc, #48]	@ (8002a2c <HAL_I2C_MspInit+0x8c>)
 80029fc:	f002 fc74 	bl	80052e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a00:	2300      	movs	r3, #0
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	4b08      	ldr	r3, [pc, #32]	@ (8002a28 <HAL_I2C_MspInit+0x88>)
 8002a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a08:	4a07      	ldr	r2, [pc, #28]	@ (8002a28 <HAL_I2C_MspInit+0x88>)
 8002a0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a10:	4b05      	ldr	r3, [pc, #20]	@ (8002a28 <HAL_I2C_MspInit+0x88>)
 8002a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002a1c:	bf00      	nop
 8002a1e:	3728      	adds	r7, #40	@ 0x28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40005400 	.word	0x40005400
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	40020400 	.word	0x40020400

08002a30 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f043 0201 	orr.w	r2, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	601a      	str	r2, [r3, #0]
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a1a      	ldr	r2, [r3, #32]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	431a      	orrs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	621a      	str	r2, [r3, #32]
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a1a      	ldr	r2, [r3, #32]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	43db      	mvns	r3, r3
 8002a84:	401a      	ands	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	621a      	str	r2, [r3, #32]
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <LL_USART_IsActiveFlag_TXE>:
{
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aa6:	2b80      	cmp	r3, #128	@ 0x80
 8002aa8:	bf0c      	ite	eq
 8002aaa:	2301      	moveq	r3, #1
 8002aac:	2300      	movne	r3, #0
 8002aae:	b2db      	uxtb	r3, r3
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <LL_USART_EnableIT_RXNE>:
{
 8002abc:	b480      	push	{r7}
 8002abe:	b089      	sub	sp, #36	@ 0x24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	330c      	adds	r3, #12
 8002ac8:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	e853 3f00 	ldrex	r3, [r3]
 8002ad0:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	f043 0320 	orr.w	r3, r3, #32
 8002ad8:	61fb      	str	r3, [r7, #28]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	330c      	adds	r3, #12
 8002ade:	69fa      	ldr	r2, [r7, #28]
 8002ae0:	61ba      	str	r2, [r7, #24]
 8002ae2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae4:	6979      	ldr	r1, [r7, #20]
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	e841 2300 	strex	r3, r2, [r1]
 8002aec:	613b      	str	r3, [r7, #16]
   return(result);
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1e7      	bne.n	8002ac4 <LL_USART_EnableIT_RXNE+0x8>
}
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop
 8002af8:	3724      	adds	r7, #36	@ 0x24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <LL_USART_TransmitData8>:
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002b0e:	78fa      	ldrb	r2, [r7, #3]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	605a      	str	r2, [r3, #4]
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	4013      	ands	r3, r2
 8002b36:	041a      	lsls	r2, r3, #16
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	43d9      	mvns	r1, r3
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	400b      	ands	r3, r1
 8002b40:	431a      	orrs	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	619a      	str	r2, [r3, #24]
}
 8002b46:	bf00      	nop
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
	...

08002b54 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char* p, int len)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++)
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	e011      	b.n	8002b8a <_write+0x36>
	{
		while(!LL_USART_IsActiveFlag_TXE(USART6));
 8002b66:	bf00      	nop
 8002b68:	480c      	ldr	r0, [pc, #48]	@ (8002b9c <_write+0x48>)
 8002b6a:	f7ff ff94 	bl	8002a96 <LL_USART_IsActiveFlag_TXE>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0f9      	beq.n	8002b68 <_write+0x14>
		LL_USART_TransmitData8(USART6, *(p+i));
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	4413      	add	r3, r2
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4807      	ldr	r0, [pc, #28]	@ (8002b9c <_write+0x48>)
 8002b80:	f7ff ffbf 	bl	8002b02 <LL_USART_TransmitData8>
	for(int i=0; i<len; i++)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	3301      	adds	r3, #1
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	dbe9      	blt.n	8002b66 <_write+0x12>
	}
	return len;
 8002b92:	687b      	ldr	r3, [r7, #4]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40011400 	.word	0x40011400

08002ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ba0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ba4:	b096      	sub	sp, #88	@ 0x58
 8002ba6:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
	float q[4];
	float quatRadianAccuracy;
	unsigned char buf_read[16] = {0};
 8002ba8:	2300      	movs	r3, #0
 8002baa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	605a      	str	r2, [r3, #4]
 8002bb6:	609a      	str	r2, [r3, #8]
	unsigned char buf_write[16] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};
 8002bb8:	4ba7      	ldr	r3, [pc, #668]	@ (8002e58 <main+0x2b8>)
 8002bba:	f107 0414 	add.w	r4, r7, #20
 8002bbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bc4:	f001 fa66 	bl	8004094 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bc8:	f000 f968 	bl	8002e9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bcc:	f7ff fe3a 	bl	8002844 <MX_GPIO_Init>
  MX_DMA_Init();
 8002bd0:	f7ff fde2 	bl	8002798 <MX_DMA_Init>
  MX_TIM3_Init();
 8002bd4:	f000 feec 	bl	80039b0 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8002bd8:	f001 f9d2 	bl	8003f80 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 8002bdc:	f000 faf0 	bl	80031c0 <MX_SPI2_Init>
  MX_SPI1_Init();
 8002be0:	f000 fa9c 	bl	800311c <MX_SPI1_Init>
  MX_SPI3_Init();
 8002be4:	f000 fb40 	bl	8003268 <MX_SPI3_Init>
  MX_UART4_Init();
 8002be8:	f001 f8f0 	bl	8003dcc <MX_UART4_Init>
  MX_UART5_Init();
 8002bec:	f001 f950 	bl	8003e90 <MX_UART5_Init>
  MX_TIM5_Init();
 8002bf0:	f000 ff52 	bl	8003a98 <MX_TIM5_Init>
  MX_I2C1_Init();
 8002bf4:	f7ff fea6 	bl	8002944 <MX_I2C1_Init>
  MX_ADC1_Init();
 8002bf8:	f7ff fd06 	bl	8002608 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM3);
 8002bfc:	4897      	ldr	r0, [pc, #604]	@ (8002e5c <main+0x2bc>)
 8002bfe:	f7ff ff17 	bl	8002a30 <LL_TIM_EnableCounter>


  LL_USART_EnableIT_RXNE(USART6);
 8002c02:	4897      	ldr	r0, [pc, #604]	@ (8002e60 <main+0x2c0>)
 8002c04:	f7ff ff5a 	bl	8002abc <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART4);
 8002c08:	4896      	ldr	r0, [pc, #600]	@ (8002e64 <main+0x2c4>)
 8002c0a:	f7ff ff57 	bl	8002abc <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART5);
 8002c0e:	4896      	ldr	r0, [pc, #600]	@ (8002e68 <main+0x2c8>)
 8002c10:	f7ff ff54 	bl	8002abc <LL_USART_EnableIT_RXNE>

  BNO080_Initialization();
 8002c14:	f7fe fc76 	bl	8001504 <BNO080_Initialization>
  BNO080_enableRotationVector(2500); // 400Hz
 8002c18:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8002c1c:	f7fe fd08 	bl	8001630 <BNO080_enableRotationVector>

  ICM20602_Initialization();
 8002c20:	f7ff f8a0 	bl	8001d64 <ICM20602_Initialization>
  LPS22HH_Initialization();
 8002c24:	f7ff faae 	bl	8002184 <LPS22HH_Initialization>
  M8N_Initialization();
 8002c28:	f7ff fc64 	bl	80024f4 <M8N_Initialization>

  LL_TIM_EnableCounter(TIM5);
 8002c2c:	488f      	ldr	r0, [pc, #572]	@ (8002e6c <main+0x2cc>)
 8002c2e:	f7ff feff 	bl	8002a30 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM5,LL_TIM_CHANNEL_CH1);
 8002c32:	2101      	movs	r1, #1
 8002c34:	488d      	ldr	r0, [pc, #564]	@ (8002e6c <main+0x2cc>)
 8002c36:	f7ff ff0b 	bl	8002a50 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5,LL_TIM_CHANNEL_CH2);
 8002c3a:	2110      	movs	r1, #16
 8002c3c:	488b      	ldr	r0, [pc, #556]	@ (8002e6c <main+0x2cc>)
 8002c3e:	f7ff ff07 	bl	8002a50 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5,LL_TIM_CHANNEL_CH3);
 8002c42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c46:	4889      	ldr	r0, [pc, #548]	@ (8002e6c <main+0x2cc>)
 8002c48:	f7ff ff02 	bl	8002a50 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5,LL_TIM_CHANNEL_CH4);
 8002c4c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002c50:	4886      	ldr	r0, [pc, #536]	@ (8002e6c <main+0x2cc>)
 8002c52:	f7ff fefd 	bl	8002a50 <LL_TIM_CC_EnableChannel>

  HAL_ADC_Start_DMA(&hadc1, &adcVal, 1);
 8002c56:	f107 0312 	add.w	r3, r7, #18
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4884      	ldr	r0, [pc, #528]	@ (8002e70 <main+0x2d0>)
 8002c60:	f001 faf2 	bl	8004248 <HAL_ADC_Start_DMA>



  while(Is_iBus_Received() == 0)
 8002c64:	e013      	b.n	8002c8e <main+0xee>
  {
	  LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4);
 8002c66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002c6a:	487c      	ldr	r0, [pc, #496]	@ (8002e5c <main+0x2bc>)
 8002c6c:	f7ff fef0 	bl	8002a50 <LL_TIM_CC_EnableChannel>
	  TIM3->PSC = 3000; // buzzer pwm
 8002c70:	4b7a      	ldr	r3, [pc, #488]	@ (8002e5c <main+0x2bc>)
 8002c72:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002c76:	629a      	str	r2, [r3, #40]	@ 0x28
	  HAL_Delay(200);
 8002c78:	20c8      	movs	r0, #200	@ 0xc8
 8002c7a:	f001 fa7d 	bl	8004178 <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8002c7e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002c82:	4876      	ldr	r0, [pc, #472]	@ (8002e5c <main+0x2bc>)
 8002c84:	f7ff fef5 	bl	8002a72 <LL_TIM_CC_DisableChannel>
	  HAL_Delay(200);
 8002c88:	20c8      	movs	r0, #200	@ 0xc8
 8002c8a:	f001 fa75 	bl	8004178 <HAL_Delay>
  while(Is_iBus_Received() == 0)
 8002c8e:	f000 f995 	bl	8002fbc <Is_iBus_Received>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d0e6      	beq.n	8002c66 <main+0xc6>
  }

  if(iBus.SwC == 2000)
 8002c98:	4b76      	ldr	r3, [pc, #472]	@ (8002e74 <main+0x2d4>)
 8002c9a:	899b      	ldrh	r3, [r3, #12]
 8002c9c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002ca0:	d146      	bne.n	8002d30 <main+0x190>
  {
	  LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4);
 8002ca2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002ca6:	486d      	ldr	r0, [pc, #436]	@ (8002e5c <main+0x2bc>)
 8002ca8:	f7ff fed2 	bl	8002a50 <LL_TIM_CC_EnableChannel>
	  TIM3->PSC = 1500;
 8002cac:	4b6b      	ldr	r3, [pc, #428]	@ (8002e5c <main+0x2bc>)
 8002cae:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002cb2:	629a      	str	r2, [r3, #40]	@ 0x28
	  HAL_Delay(200);
 8002cb4:	20c8      	movs	r0, #200	@ 0xc8
 8002cb6:	f001 fa5f 	bl	8004178 <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8002cba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002cbe:	4867      	ldr	r0, [pc, #412]	@ (8002e5c <main+0x2bc>)
 8002cc0:	f7ff fed7 	bl	8002a72 <LL_TIM_CC_DisableChannel>
	  HAL_Delay(200);
 8002cc4:	20c8      	movs	r0, #200	@ 0xc8
 8002cc6:	f001 fa57 	bl	8004178 <HAL_Delay>

	  ESC_Calibration();
 8002cca:	f000 f997 	bl	8002ffc <ESC_Calibration>
	  while(iBus.SwC != 1000)
 8002cce:	e015      	b.n	8002cfc <main+0x15c>
	  {
		  Is_iBus_Received();
 8002cd0:	f000 f974 	bl	8002fbc <Is_iBus_Received>

		  LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4);
 8002cd4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002cd8:	4860      	ldr	r0, [pc, #384]	@ (8002e5c <main+0x2bc>)
 8002cda:	f7ff feb9 	bl	8002a50 <LL_TIM_CC_EnableChannel>
		  TIM3->PSC = 1500;
 8002cde:	4b5f      	ldr	r3, [pc, #380]	@ (8002e5c <main+0x2bc>)
 8002ce0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002ce4:	629a      	str	r2, [r3, #40]	@ 0x28
		  HAL_Delay(200);
 8002ce6:	20c8      	movs	r0, #200	@ 0xc8
 8002ce8:	f001 fa46 	bl	8004178 <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8002cec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002cf0:	485a      	ldr	r0, [pc, #360]	@ (8002e5c <main+0x2bc>)
 8002cf2:	f7ff febe 	bl	8002a72 <LL_TIM_CC_DisableChannel>
		  HAL_Delay(200);
 8002cf6:	20c8      	movs	r0, #200	@ 0xc8
 8002cf8:	f001 fa3e 	bl	8004178 <HAL_Delay>
	  while(iBus.SwC != 1000)
 8002cfc:	4b5d      	ldr	r3, [pc, #372]	@ (8002e74 <main+0x2d4>)
 8002cfe:	899b      	ldrh	r3, [r3, #12]
 8002d00:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d04:	d1e4      	bne.n	8002cd0 <main+0x130>
	  }
  }

  while(Is_iBus_Throttle_Min() == 0)
 8002d06:	e013      	b.n	8002d30 <main+0x190>
  {
	  LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4);
 8002d08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002d0c:	4853      	ldr	r0, [pc, #332]	@ (8002e5c <main+0x2bc>)
 8002d0e:	f7ff fe9f 	bl	8002a50 <LL_TIM_CC_EnableChannel>
	  TIM3->PSC = 1000;
 8002d12:	4b52      	ldr	r3, [pc, #328]	@ (8002e5c <main+0x2bc>)
 8002d14:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002d18:	629a      	str	r2, [r3, #40]	@ 0x28
	  HAL_Delay(150);
 8002d1a:	2096      	movs	r0, #150	@ 0x96
 8002d1c:	f001 fa2c 	bl	8004178 <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8002d20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002d24:	484d      	ldr	r0, [pc, #308]	@ (8002e5c <main+0x2bc>)
 8002d26:	f7ff fea4 	bl	8002a72 <LL_TIM_CC_DisableChannel>
	  HAL_Delay(150);
 8002d2a:	2096      	movs	r0, #150	@ 0x96
 8002d2c:	f001 fa24 	bl	8004178 <HAL_Delay>
  while(Is_iBus_Throttle_Min() == 0)
 8002d30:	f000 f91e 	bl	8002f70 <Is_iBus_Throttle_Min>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0e6      	beq.n	8002d08 <main+0x168>
  }

  EP_PIDGain_Write(0, 1.1, 2.2, 3.3);
 8002d3a:	ed9f 1a4f 	vldr	s2, [pc, #316]	@ 8002e78 <main+0x2d8>
 8002d3e:	eddf 0a4f 	vldr	s1, [pc, #316]	@ 8002e7c <main+0x2dc>
 8002d42:	ed9f 0a4f 	vldr	s0, [pc, #316]	@ 8002e80 <main+0x2e0>
 8002d46:	2000      	movs	r0, #0
 8002d48:	f7fe f924 	bl	8000f94 <EP_PIDGain_Write>
  float p = 0.0, i = 0.0, d = 0.0;
 8002d4c:	f04f 0300 	mov.w	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	f04f 0300 	mov.w	r3, #0
 8002d56:	60bb      	str	r3, [r7, #8]
 8002d58:	f04f 0300 	mov.w	r3, #0
 8002d5c:	607b      	str	r3, [r7, #4]
  EP_PIDGain_Read(0, &p, &i, &d);
 8002d5e:	1d3b      	adds	r3, r7, #4
 8002d60:	f107 0208 	add.w	r2, r7, #8
 8002d64:	f107 010c 	add.w	r1, r7, #12
 8002d68:	2000      	movs	r0, #0
 8002d6a:	f7fe f9a9 	bl	80010c0 <EP_PIDGain_Read>
  printf("%f %f %f", p, i, d);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fd fbe9 	bl	8000548 <__aeabi_f2d>
 8002d76:	4680      	mov	r8, r0
 8002d78:	4689      	mov	r9, r1
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fd fbe3 	bl	8000548 <__aeabi_f2d>
 8002d82:	4604      	mov	r4, r0
 8002d84:	460d      	mov	r5, r1
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fd fbdd 	bl	8000548 <__aeabi_f2d>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002d96:	e9cd 4500 	strd	r4, r5, [sp]
 8002d9a:	4642      	mov	r2, r8
 8002d9c:	464b      	mov	r3, r9
 8002d9e:	4839      	ldr	r0, [pc, #228]	@ (8002e84 <main+0x2e4>)
 8002da0:	f005 ff56 	bl	8008c50 <iprintf>

  // buzzer on
  LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4);
 8002da4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002da8:	482c      	ldr	r0, [pc, #176]	@ (8002e5c <main+0x2bc>)
 8002daa:	f7ff fe51 	bl	8002a50 <LL_TIM_CC_EnableChannel>
  TIM3->PSC = 2000; // buzzer pwm
 8002dae:	4b2b      	ldr	r3, [pc, #172]	@ (8002e5c <main+0x2bc>)
 8002db0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002db4:	629a      	str	r2, [r3, #40]	@ 0x28
  //TIM3->CCR4 = TIM3->ARR/2; // PWM Width
  HAL_Delay(100);
 8002db6:	2064      	movs	r0, #100	@ 0x64
 8002db8:	f001 f9de 	bl	8004178 <HAL_Delay>
  TIM3->PSC = 1000; // buzzer pwm
 8002dbc:	4b27      	ldr	r3, [pc, #156]	@ (8002e5c <main+0x2bc>)
 8002dbe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002dc2:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_Delay(100);
 8002dc4:	2064      	movs	r0, #100	@ 0x64
 8002dc6:	f001 f9d7 	bl	8004178 <HAL_Delay>
  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8002dca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002dce:	4823      	ldr	r0, [pc, #140]	@ (8002e5c <main+0x2bc>)
 8002dd0:	f7ff fe4f 	bl	8002a72 <LL_TIM_CC_DisableChannel>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  batVolt = adcVal * 0.003619f;
 8002dd4:	8a7b      	ldrh	r3, [r7, #18]
 8002dd6:	ee07 3a90 	vmov	s15, r3
 8002dda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dde:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002e88 <main+0x2e8>
 8002de2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002de6:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	  printf("%d\t%.2f\n", adcVal, batVolt);
 8002dea:	8a7b      	ldrh	r3, [r7, #18]
 8002dec:	461c      	mov	r4, r3
 8002dee:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002df0:	f7fd fbaa 	bl	8000548 <__aeabi_f2d>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4621      	mov	r1, r4
 8002dfa:	4824      	ldr	r0, [pc, #144]	@ (8002e8c <main+0x2ec>)
 8002dfc:	f005 ff28 	bl	8008c50 <iprintf>
	  HAL_Delay(1000);
 8002e00:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e04:	f001 f9b8 	bl	8004178 <HAL_Delay>
//
//			  printf("LAT : %ld\t LON: %ld\t height : %ld",posllh.lat, posllh.lon, posllh.height);
//		  }
//	  }

	  if(ibus_rx_cplt_flag == 1)
 8002e08:	4b21      	ldr	r3, [pc, #132]	@ (8002e90 <main+0x2f0>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d1e1      	bne.n	8002dd4 <main+0x234>
	  {
		  ibus_rx_cplt_flag = 0;
 8002e10:	4b1f      	ldr	r3, [pc, #124]	@ (8002e90 <main+0x2f0>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	701a      	strb	r2, [r3, #0]
		  if(iBus_Check_CHKSUM(&ibus_rx_buf[0],32) == 1)
 8002e16:	2120      	movs	r1, #32
 8002e18:	481e      	ldr	r0, [pc, #120]	@ (8002e94 <main+0x2f4>)
 8002e1a:	f7fe fd4f 	bl	80018bc <iBus_Check_CHKSUM>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d1d7      	bne.n	8002dd4 <main+0x234>
		  {
			LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 8002e24:	2104      	movs	r1, #4
 8002e26:	481c      	ldr	r0, [pc, #112]	@ (8002e98 <main+0x2f8>)
 8002e28:	f7ff fe7a 	bl	8002b20 <LL_GPIO_TogglePin>
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8002e2c:	4911      	ldr	r1, [pc, #68]	@ (8002e74 <main+0x2d4>)
 8002e2e:	4819      	ldr	r0, [pc, #100]	@ (8002e94 <main+0x2f4>)
 8002e30:	f7fe fd79 	bl	8001926 <iBus_Parsing>

			if(iBus_isActiveFailsafe(&iBus) == 1)
 8002e34:	480f      	ldr	r0, [pc, #60]	@ (8002e74 <main+0x2d4>)
 8002e36:	f7fe fdee 	bl	8001a16 <iBus_isActiveFailsafe>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d105      	bne.n	8002e4c <main+0x2ac>
			{
				LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4);
 8002e40:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002e44:	4805      	ldr	r0, [pc, #20]	@ (8002e5c <main+0x2bc>)
 8002e46:	f7ff fe03 	bl	8002a50 <LL_TIM_CC_EnableChannel>
 8002e4a:	e7c3      	b.n	8002dd4 <main+0x234>
			}
			else
			{
				LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8002e4c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002e50:	4802      	ldr	r0, [pc, #8]	@ (8002e5c <main+0x2bc>)
 8002e52:	f7ff fe0e 	bl	8002a72 <LL_TIM_CC_DisableChannel>
	  batVolt = adcVal * 0.003619f;
 8002e56:	e7bd      	b.n	8002dd4 <main+0x234>
 8002e58:	0800ada8 	.word	0x0800ada8
 8002e5c:	40000400 	.word	0x40000400
 8002e60:	40011400 	.word	0x40011400
 8002e64:	40004c00 	.word	0x40004c00
 8002e68:	40005000 	.word	0x40005000
 8002e6c:	40000c00 	.word	0x40000c00
 8002e70:	20000294 	.word	0x20000294
 8002e74:	2000027c 	.word	0x2000027c
 8002e78:	40533333 	.word	0x40533333
 8002e7c:	400ccccd 	.word	0x400ccccd
 8002e80:	3f8ccccd 	.word	0x3f8ccccd
 8002e84:	0800ad90 	.word	0x0800ad90
 8002e88:	3b6d2cbf 	.word	0x3b6d2cbf
 8002e8c:	0800ad9c 	.word	0x0800ad9c
 8002e90:	200003e0 	.word	0x200003e0
 8002e94:	200003c0 	.word	0x200003c0
 8002e98:	40020800 	.word	0x40020800

08002e9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b094      	sub	sp, #80	@ 0x50
 8002ea0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ea2:	f107 0320 	add.w	r3, r7, #32
 8002ea6:	2230      	movs	r2, #48	@ 0x30
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f006 f818 	bl	8008ee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002eb0:	f107 030c 	add.w	r3, r7, #12
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	60da      	str	r2, [r3, #12]
 8002ebe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	60bb      	str	r3, [r7, #8]
 8002ec4:	4b28      	ldr	r3, [pc, #160]	@ (8002f68 <SystemClock_Config+0xcc>)
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec8:	4a27      	ldr	r2, [pc, #156]	@ (8002f68 <SystemClock_Config+0xcc>)
 8002eca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ece:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ed0:	4b25      	ldr	r3, [pc, #148]	@ (8002f68 <SystemClock_Config+0xcc>)
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002edc:	2300      	movs	r3, #0
 8002ede:	607b      	str	r3, [r7, #4]
 8002ee0:	4b22      	ldr	r3, [pc, #136]	@ (8002f6c <SystemClock_Config+0xd0>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a21      	ldr	r2, [pc, #132]	@ (8002f6c <SystemClock_Config+0xd0>)
 8002ee6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002eea:	6013      	str	r3, [r2, #0]
 8002eec:	4b1f      	ldr	r3, [pc, #124]	@ (8002f6c <SystemClock_Config+0xd0>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ef4:	607b      	str	r3, [r7, #4]
 8002ef6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002efc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002f00:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f02:	2302      	movs	r3, #2
 8002f04:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f06:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002f0c:	2304      	movs	r3, #4
 8002f0e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002f10:	23a8      	movs	r3, #168	@ 0xa8
 8002f12:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f14:	2302      	movs	r3, #2
 8002f16:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002f18:	2304      	movs	r3, #4
 8002f1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f1c:	f107 0320 	add.w	r3, r7, #32
 8002f20:	4618      	mov	r0, r3
 8002f22:	f003 fba1 	bl	8006668 <HAL_RCC_OscConfig>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002f2c:	f000 f894 	bl	8003058 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f30:	230f      	movs	r3, #15
 8002f32:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f34:	2302      	movs	r3, #2
 8002f36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f3c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002f40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f46:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002f48:	f107 030c 	add.w	r3, r7, #12
 8002f4c:	2105      	movs	r1, #5
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f003 fe02 	bl	8006b58 <HAL_RCC_ClockConfig>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002f5a:	f000 f87d 	bl	8003058 <Error_Handler>
  }
}
 8002f5e:	bf00      	nop
 8002f60:	3750      	adds	r7, #80	@ 0x50
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40007000 	.word	0x40007000

08002f70 <Is_iBus_Throttle_Min>:

/* USER CODE BEGIN 4 */
int Is_iBus_Throttle_Min(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag == 1)
 8002f74:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb0 <Is_iBus_Throttle_Min+0x40>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d115      	bne.n	8002fa8 <Is_iBus_Throttle_Min+0x38>
	{
		ibus_rx_cplt_flag = 0;
 8002f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb0 <Is_iBus_Throttle_Min+0x40>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	701a      	strb	r2, [r3, #0]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0],32) == 1)
 8002f82:	2120      	movs	r1, #32
 8002f84:	480b      	ldr	r0, [pc, #44]	@ (8002fb4 <Is_iBus_Throttle_Min+0x44>)
 8002f86:	f7fe fc99 	bl	80018bc <iBus_Check_CHKSUM>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d10b      	bne.n	8002fa8 <Is_iBus_Throttle_Min+0x38>
		{
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8002f90:	4909      	ldr	r1, [pc, #36]	@ (8002fb8 <Is_iBus_Throttle_Min+0x48>)
 8002f92:	4808      	ldr	r0, [pc, #32]	@ (8002fb4 <Is_iBus_Throttle_Min+0x44>)
 8002f94:	f7fe fcc7 	bl	8001926 <iBus_Parsing>

			if(iBus.LV < 1010) return 1;
 8002f98:	4b07      	ldr	r3, [pc, #28]	@ (8002fb8 <Is_iBus_Throttle_Min+0x48>)
 8002f9a:	889b      	ldrh	r3, [r3, #4]
 8002f9c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d801      	bhi.n	8002fa8 <Is_iBus_Throttle_Min+0x38>
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e000      	b.n	8002faa <Is_iBus_Throttle_Min+0x3a>
		}
	}
	return 0;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	200003e0 	.word	0x200003e0
 8002fb4:	200003c0 	.word	0x200003c0
 8002fb8:	2000027c 	.word	0x2000027c

08002fbc <Is_iBus_Received>:

int Is_iBus_Received(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag == 1)
 8002fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff0 <Is_iBus_Received+0x34>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d10f      	bne.n	8002fe8 <Is_iBus_Received+0x2c>
		{
			ibus_rx_cplt_flag = 0;
 8002fc8:	4b09      	ldr	r3, [pc, #36]	@ (8002ff0 <Is_iBus_Received+0x34>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	701a      	strb	r2, [r3, #0]
			if(iBus_Check_CHKSUM(&ibus_rx_buf[0],32) == 1)
 8002fce:	2120      	movs	r1, #32
 8002fd0:	4808      	ldr	r0, [pc, #32]	@ (8002ff4 <Is_iBus_Received+0x38>)
 8002fd2:	f7fe fc73 	bl	80018bc <iBus_Check_CHKSUM>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d105      	bne.n	8002fe8 <Is_iBus_Received+0x2c>
			{
				iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8002fdc:	4906      	ldr	r1, [pc, #24]	@ (8002ff8 <Is_iBus_Received+0x3c>)
 8002fde:	4805      	ldr	r0, [pc, #20]	@ (8002ff4 <Is_iBus_Received+0x38>)
 8002fe0:	f7fe fca1 	bl	8001926 <iBus_Parsing>

				return 1;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e000      	b.n	8002fea <Is_iBus_Received+0x2e>
			}
		}
		return 0;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	200003e0 	.word	0x200003e0
 8002ff4:	200003c0 	.word	0x200003c0
 8002ff8:	2000027c 	.word	0x2000027c

08002ffc <ESC_Calibration>:

void ESC_Calibration(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
	 TIM5->CCR1 = 21000;
 8003000:	4b14      	ldr	r3, [pc, #80]	@ (8003054 <ESC_Calibration+0x58>)
 8003002:	f245 2208 	movw	r2, #21000	@ 0x5208
 8003006:	635a      	str	r2, [r3, #52]	@ 0x34
	  TIM5->CCR2 = 21000;
 8003008:	4b12      	ldr	r3, [pc, #72]	@ (8003054 <ESC_Calibration+0x58>)
 800300a:	f245 2208 	movw	r2, #21000	@ 0x5208
 800300e:	639a      	str	r2, [r3, #56]	@ 0x38
	  TIM5->CCR3 = 21000;
 8003010:	4b10      	ldr	r3, [pc, #64]	@ (8003054 <ESC_Calibration+0x58>)
 8003012:	f245 2208 	movw	r2, #21000	@ 0x5208
 8003016:	63da      	str	r2, [r3, #60]	@ 0x3c
	  TIM5->CCR4 = 21000;
 8003018:	4b0e      	ldr	r3, [pc, #56]	@ (8003054 <ESC_Calibration+0x58>)
 800301a:	f245 2208 	movw	r2, #21000	@ 0x5208
 800301e:	641a      	str	r2, [r3, #64]	@ 0x40
	  HAL_Delay(7000);
 8003020:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8003024:	f001 f8a8 	bl	8004178 <HAL_Delay>
	  TIM5->CCR1 = 10500;
 8003028:	4b0a      	ldr	r3, [pc, #40]	@ (8003054 <ESC_Calibration+0x58>)
 800302a:	f642 1204 	movw	r2, #10500	@ 0x2904
 800302e:	635a      	str	r2, [r3, #52]	@ 0x34
	  TIM5->CCR2 = 10500;
 8003030:	4b08      	ldr	r3, [pc, #32]	@ (8003054 <ESC_Calibration+0x58>)
 8003032:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003036:	639a      	str	r2, [r3, #56]	@ 0x38
	  TIM5->CCR3 = 10500;
 8003038:	4b06      	ldr	r3, [pc, #24]	@ (8003054 <ESC_Calibration+0x58>)
 800303a:	f642 1204 	movw	r2, #10500	@ 0x2904
 800303e:	63da      	str	r2, [r3, #60]	@ 0x3c
	  TIM5->CCR4 = 10500;
 8003040:	4b04      	ldr	r3, [pc, #16]	@ (8003054 <ESC_Calibration+0x58>)
 8003042:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003046:	641a      	str	r2, [r3, #64]	@ 0x40
	  HAL_Delay(8000);
 8003048:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 800304c:	f001 f894 	bl	8004178 <HAL_Delay>
}
 8003050:	bf00      	nop
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40000c00 	.word	0x40000c00

08003058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800305c:	b672      	cpsid	i
}
 800305e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003060:	bf00      	nop
 8003062:	e7fd      	b.n	8003060 <Error_Handler+0x8>

08003064 <LL_SPI_SetStandard>:
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f023 0210 	bic.w	r2, r3, #16
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	431a      	orrs	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	605a      	str	r2, [r3, #4]
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
	...

0800308c <LL_AHB1_GRP1_EnableClock>:
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003094:	4b08      	ldr	r3, [pc, #32]	@ (80030b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003096:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003098:	4907      	ldr	r1, [pc, #28]	@ (80030b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4313      	orrs	r3, r2
 800309e:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80030a0:	4b05      	ldr	r3, [pc, #20]	@ (80030b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80030a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4013      	ands	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80030aa:	68fb      	ldr	r3, [r7, #12]
}
 80030ac:	bf00      	nop
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	40023800 	.word	0x40023800

080030bc <LL_APB1_GRP1_EnableClock>:
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80030c4:	4b08      	ldr	r3, [pc, #32]	@ (80030e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80030c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030c8:	4907      	ldr	r1, [pc, #28]	@ (80030e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80030d0:	4b05      	ldr	r3, [pc, #20]	@ (80030e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80030d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4013      	ands	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80030da:	68fb      	ldr	r3, [r7, #12]
}
 80030dc:	bf00      	nop
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	40023800 	.word	0x40023800

080030ec <LL_APB2_GRP1_EnableClock>:
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80030f4:	4b08      	ldr	r3, [pc, #32]	@ (8003118 <LL_APB2_GRP1_EnableClock+0x2c>)
 80030f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030f8:	4907      	ldr	r1, [pc, #28]	@ (8003118 <LL_APB2_GRP1_EnableClock+0x2c>)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003100:	4b05      	ldr	r3, [pc, #20]	@ (8003118 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003102:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4013      	ands	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800310a:	68fb      	ldr	r3, [r7, #12]
}
 800310c:	bf00      	nop
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	40023800 	.word	0x40023800

0800311c <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b090      	sub	sp, #64	@ 0x40
 8003120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003122:	f107 0318 	add.w	r3, r7, #24
 8003126:	2228      	movs	r2, #40	@ 0x28
 8003128:	2100      	movs	r1, #0
 800312a:	4618      	mov	r0, r3
 800312c:	f005 fed8 	bl	8008ee0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003130:	463b      	mov	r3, r7
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	605a      	str	r2, [r3, #4]
 8003138:	609a      	str	r2, [r3, #8]
 800313a:	60da      	str	r2, [r3, #12]
 800313c:	611a      	str	r2, [r3, #16]
 800313e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8003140:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003144:	f7ff ffd2 	bl	80030ec <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003148:	2001      	movs	r0, #1
 800314a:	f7ff ff9f 	bl	800308c <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800314e:	23e0      	movs	r3, #224	@ 0xe0
 8003150:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003152:	2302      	movs	r3, #2
 8003154:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003156:	2303      	movs	r3, #3
 8003158:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800315a:	2300      	movs	r3, #0
 800315c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800315e:	2300      	movs	r3, #0
 8003160:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003162:	2305      	movs	r3, #5
 8003164:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003166:	463b      	mov	r3, r7
 8003168:	4619      	mov	r1, r3
 800316a:	4813      	ldr	r0, [pc, #76]	@ (80031b8 <MX_SPI1_Init+0x9c>)
 800316c:	f004 f84b 	bl	8007206 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003170:	2300      	movs	r3, #0
 8003172:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003174:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8003178:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800317a:	2300      	movs	r3, #0
 800317c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800317e:	2302      	movs	r3, #2
 8003180:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003182:	2301      	movs	r3, #1
 8003184:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003186:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800318a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 800318c:	2310      	movs	r3, #16
 800318e:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003190:	2300      	movs	r3, #0
 8003192:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003194:	2300      	movs	r3, #0
 8003196:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8003198:	230a      	movs	r3, #10
 800319a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 800319c:	f107 0318 	add.w	r3, r7, #24
 80031a0:	4619      	mov	r1, r3
 80031a2:	4806      	ldr	r0, [pc, #24]	@ (80031bc <MX_SPI1_Init+0xa0>)
 80031a4:	f004 fa0d 	bl	80075c2 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 80031a8:	2100      	movs	r1, #0
 80031aa:	4804      	ldr	r0, [pc, #16]	@ (80031bc <MX_SPI1_Init+0xa0>)
 80031ac:	f7ff ff5a 	bl	8003064 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80031b0:	bf00      	nop
 80031b2:	3740      	adds	r7, #64	@ 0x40
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40020000 	.word	0x40020000
 80031bc:	40013000 	.word	0x40013000

080031c0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b090      	sub	sp, #64	@ 0x40
 80031c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80031c6:	f107 0318 	add.w	r3, r7, #24
 80031ca:	2228      	movs	r2, #40	@ 0x28
 80031cc:	2100      	movs	r1, #0
 80031ce:	4618      	mov	r0, r3
 80031d0:	f005 fe86 	bl	8008ee0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d4:	463b      	mov	r3, r7
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	605a      	str	r2, [r3, #4]
 80031dc:	609a      	str	r2, [r3, #8]
 80031de:	60da      	str	r2, [r3, #12]
 80031e0:	611a      	str	r2, [r3, #16]
 80031e2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80031e4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80031e8:	f7ff ff68 	bl	80030bc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80031ec:	2002      	movs	r0, #2
 80031ee:	f7ff ff4d 	bl	800308c <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 80031f2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80031f6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80031f8:	2302      	movs	r3, #2
 80031fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80031fc:	2303      	movs	r3, #3
 80031fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003200:	2300      	movs	r3, #0
 8003202:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003204:	2300      	movs	r3, #0
 8003206:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003208:	2305      	movs	r3, #5
 800320a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800320c:	463b      	mov	r3, r7
 800320e:	4619      	mov	r1, r3
 8003210:	4813      	ldr	r0, [pc, #76]	@ (8003260 <MX_SPI2_Init+0xa0>)
 8003212:	f003 fff8 	bl	8007206 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003216:	2300      	movs	r3, #0
 8003218:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800321a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800321e:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003220:	2300      	movs	r3, #0
 8003222:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003224:	2302      	movs	r3, #2
 8003226:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003228:	2301      	movs	r3, #1
 800322a:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800322c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003230:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8003232:	2318      	movs	r3, #24
 8003234:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003236:	2300      	movs	r3, #0
 8003238:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800323a:	2300      	movs	r3, #0
 800323c:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 800323e:	230a      	movs	r3, #10
 8003240:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8003242:	f107 0318 	add.w	r3, r7, #24
 8003246:	4619      	mov	r1, r3
 8003248:	4806      	ldr	r0, [pc, #24]	@ (8003264 <MX_SPI2_Init+0xa4>)
 800324a:	f004 f9ba 	bl	80075c2 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 800324e:	2100      	movs	r1, #0
 8003250:	4804      	ldr	r0, [pc, #16]	@ (8003264 <MX_SPI2_Init+0xa4>)
 8003252:	f7ff ff07 	bl	8003064 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003256:	bf00      	nop
 8003258:	3740      	adds	r7, #64	@ 0x40
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40020400 	.word	0x40020400
 8003264:	40003800 	.word	0x40003800

08003268 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b090      	sub	sp, #64	@ 0x40
 800326c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800326e:	f107 0318 	add.w	r3, r7, #24
 8003272:	2228      	movs	r2, #40	@ 0x28
 8003274:	2100      	movs	r1, #0
 8003276:	4618      	mov	r0, r3
 8003278:	f005 fe32 	bl	8008ee0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800327c:	463b      	mov	r3, r7
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	605a      	str	r2, [r3, #4]
 8003284:	609a      	str	r2, [r3, #8]
 8003286:	60da      	str	r2, [r3, #12]
 8003288:	611a      	str	r2, [r3, #16]
 800328a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 800328c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003290:	f7ff ff14 	bl	80030bc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003294:	2002      	movs	r0, #2
 8003296:	f7ff fef9 	bl	800308c <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 800329a:	2338      	movs	r3, #56	@ 0x38
 800329c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800329e:	2302      	movs	r3, #2
 80032a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80032a2:	2303      	movs	r3, #3
 80032a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80032a6:	2300      	movs	r3, #0
 80032a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80032aa:	2300      	movs	r3, #0
 80032ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80032ae:	2306      	movs	r3, #6
 80032b0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032b2:	463b      	mov	r3, r7
 80032b4:	4619      	mov	r1, r3
 80032b6:	4813      	ldr	r0, [pc, #76]	@ (8003304 <MX_SPI3_Init+0x9c>)
 80032b8:	f003 ffa5 	bl	8007206 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80032bc:	2300      	movs	r3, #0
 80032be:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80032c0:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80032c4:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80032c6:	2300      	movs	r3, #0
 80032c8:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80032ca:	2302      	movs	r3, #2
 80032cc:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80032ce:	2301      	movs	r3, #1
 80032d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80032d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 80032d8:	2308      	movs	r3, #8
 80032da:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80032dc:	2300      	movs	r3, #0
 80032de:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80032e0:	2300      	movs	r3, #0
 80032e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 80032e4:	230a      	movs	r3, #10
 80032e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 80032e8:	f107 0318 	add.w	r3, r7, #24
 80032ec:	4619      	mov	r1, r3
 80032ee:	4806      	ldr	r0, [pc, #24]	@ (8003308 <MX_SPI3_Init+0xa0>)
 80032f0:	f004 f967 	bl	80075c2 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 80032f4:	2100      	movs	r1, #0
 80032f6:	4804      	ldr	r0, [pc, #16]	@ (8003308 <MX_SPI3_Init+0xa0>)
 80032f8:	f7ff feb4 	bl	8003064 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80032fc:	bf00      	nop
 80032fe:	3740      	adds	r7, #64	@ 0x40
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40020400 	.word	0x40020400
 8003308:	40003c00 	.word	0x40003c00

0800330c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	607b      	str	r3, [r7, #4]
 8003316:	4b10      	ldr	r3, [pc, #64]	@ (8003358 <HAL_MspInit+0x4c>)
 8003318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331a:	4a0f      	ldr	r2, [pc, #60]	@ (8003358 <HAL_MspInit+0x4c>)
 800331c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003320:	6453      	str	r3, [r2, #68]	@ 0x44
 8003322:	4b0d      	ldr	r3, [pc, #52]	@ (8003358 <HAL_MspInit+0x4c>)
 8003324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003326:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800332a:	607b      	str	r3, [r7, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	603b      	str	r3, [r7, #0]
 8003332:	4b09      	ldr	r3, [pc, #36]	@ (8003358 <HAL_MspInit+0x4c>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003336:	4a08      	ldr	r2, [pc, #32]	@ (8003358 <HAL_MspInit+0x4c>)
 8003338:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800333c:	6413      	str	r3, [r2, #64]	@ 0x40
 800333e:	4b06      	ldr	r3, [pc, #24]	@ (8003358 <HAL_MspInit+0x4c>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003346:	603b      	str	r3, [r7, #0]
 8003348:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	40023800 	.word	0x40023800

0800335c <LL_USART_IsActiveFlag_RXNE>:
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0320 	and.w	r3, r3, #32
 800336c:	2b20      	cmp	r3, #32
 800336e:	bf0c      	ite	eq
 8003370:	2301      	moveq	r3, #1
 8003372:	2300      	movne	r3, #0
 8003374:	b2db      	uxtb	r3, r3
}
 8003376:	4618      	mov	r0, r3
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <LL_USART_ClearFlag_RXNE>:
{
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f06f 0220 	mvn.w	r2, #32
 8003390:	601a      	str	r2, [r3, #0]
}
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <LL_USART_ReceiveData8>:
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	b2db      	uxtb	r3, r3
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80033bc:	bf00      	nop
 80033be:	e7fd      	b.n	80033bc <NMI_Handler+0x4>

080033c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033c4:	bf00      	nop
 80033c6:	e7fd      	b.n	80033c4 <HardFault_Handler+0x4>

080033c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033cc:	bf00      	nop
 80033ce:	e7fd      	b.n	80033cc <MemManage_Handler+0x4>

080033d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033d4:	bf00      	nop
 80033d6:	e7fd      	b.n	80033d4 <BusFault_Handler+0x4>

080033d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033dc:	bf00      	nop
 80033de:	e7fd      	b.n	80033dc <UsageFault_Handler+0x4>

080033e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033e4:	bf00      	nop
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033ee:	b480      	push	{r7}
 80033f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033f2:	bf00      	nop
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003400:	bf00      	nop
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800340e:	f000 fe93 	bl	8004138 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003412:	bf00      	nop
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	static unsigned char cnt =0;

	if(LL_USART_IsActiveFlag_RXNE(UART4))
 800341c:	4832      	ldr	r0, [pc, #200]	@ (80034e8 <UART4_IRQHandler+0xd0>)
 800341e:	f7ff ff9d 	bl	800335c <LL_USART_IsActiveFlag_RXNE>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d05c      	beq.n	80034e2 <UART4_IRQHandler+0xca>
	{
		LL_USART_ClearFlag_RXNE(UART4);
 8003428:	482f      	ldr	r0, [pc, #188]	@ (80034e8 <UART4_IRQHandler+0xd0>)
 800342a:	f7ff ffaa 	bl	8003382 <LL_USART_ClearFlag_RXNE>
		uart4_rx_data = LL_USART_ReceiveData8(UART4);
 800342e:	482e      	ldr	r0, [pc, #184]	@ (80034e8 <UART4_IRQHandler+0xd0>)
 8003430:	f7ff ffb5 	bl	800339e <LL_USART_ReceiveData8>
 8003434:	4603      	mov	r3, r0
 8003436:	461a      	mov	r2, r3
 8003438:	4b2c      	ldr	r3, [pc, #176]	@ (80034ec <UART4_IRQHandler+0xd4>)
 800343a:	701a      	strb	r2, [r3, #0]
		uart4_rx_flag = 1;
 800343c:	4b2c      	ldr	r3, [pc, #176]	@ (80034f0 <UART4_IRQHandler+0xd8>)
 800343e:	2201      	movs	r2, #1
 8003440:	701a      	strb	r2, [r3, #0]

		//LL_USART_TransmitData8(USART6, uart4_rx_data);

		switch(cnt)
 8003442:	4b2c      	ldr	r3, [pc, #176]	@ (80034f4 <UART4_IRQHandler+0xdc>)
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	2b23      	cmp	r3, #35	@ 0x23
 8003448:	d02e      	beq.n	80034a8 <UART4_IRQHandler+0x90>
 800344a:	2b23      	cmp	r3, #35	@ 0x23
 800344c:	dc3a      	bgt.n	80034c4 <UART4_IRQHandler+0xac>
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <UART4_IRQHandler+0x40>
 8003452:	2b01      	cmp	r3, #1
 8003454:	d012      	beq.n	800347c <UART4_IRQHandler+0x64>
 8003456:	e035      	b.n	80034c4 <UART4_IRQHandler+0xac>
		{
		case 0:
			if(uart4_rx_data == 0xb5)
 8003458:	4b24      	ldr	r3, [pc, #144]	@ (80034ec <UART4_IRQHandler+0xd4>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2bb5      	cmp	r3, #181	@ 0xb5
 800345e:	d13f      	bne.n	80034e0 <UART4_IRQHandler+0xc8>
			{
				m8n_rx_buf[cnt] = uart4_rx_data;
 8003460:	4b24      	ldr	r3, [pc, #144]	@ (80034f4 <UART4_IRQHandler+0xdc>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	461a      	mov	r2, r3
 8003466:	4b21      	ldr	r3, [pc, #132]	@ (80034ec <UART4_IRQHandler+0xd4>)
 8003468:	7819      	ldrb	r1, [r3, #0]
 800346a:	4b23      	ldr	r3, [pc, #140]	@ (80034f8 <UART4_IRQHandler+0xe0>)
 800346c:	5499      	strb	r1, [r3, r2]
				cnt++;
 800346e:	4b21      	ldr	r3, [pc, #132]	@ (80034f4 <UART4_IRQHandler+0xdc>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	3301      	adds	r3, #1
 8003474:	b2da      	uxtb	r2, r3
 8003476:	4b1f      	ldr	r3, [pc, #124]	@ (80034f4 <UART4_IRQHandler+0xdc>)
 8003478:	701a      	strb	r2, [r3, #0]
			}
			break;
 800347a:	e031      	b.n	80034e0 <UART4_IRQHandler+0xc8>
		case 1:
			if(uart4_rx_data == 0x62)
 800347c:	4b1b      	ldr	r3, [pc, #108]	@ (80034ec <UART4_IRQHandler+0xd4>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b62      	cmp	r3, #98	@ 0x62
 8003482:	d10d      	bne.n	80034a0 <UART4_IRQHandler+0x88>
			{
				m8n_rx_buf[cnt] = uart4_rx_data;
 8003484:	4b1b      	ldr	r3, [pc, #108]	@ (80034f4 <UART4_IRQHandler+0xdc>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	4b18      	ldr	r3, [pc, #96]	@ (80034ec <UART4_IRQHandler+0xd4>)
 800348c:	7819      	ldrb	r1, [r3, #0]
 800348e:	4b1a      	ldr	r3, [pc, #104]	@ (80034f8 <UART4_IRQHandler+0xe0>)
 8003490:	5499      	strb	r1, [r3, r2]
				cnt++;
 8003492:	4b18      	ldr	r3, [pc, #96]	@ (80034f4 <UART4_IRQHandler+0xdc>)
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	3301      	adds	r3, #1
 8003498:	b2da      	uxtb	r2, r3
 800349a:	4b16      	ldr	r3, [pc, #88]	@ (80034f4 <UART4_IRQHandler+0xdc>)
 800349c:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				cnt = 0;
			}
			break;
 800349e:	e020      	b.n	80034e2 <UART4_IRQHandler+0xca>
				cnt = 0;
 80034a0:	4b14      	ldr	r3, [pc, #80]	@ (80034f4 <UART4_IRQHandler+0xdc>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	701a      	strb	r2, [r3, #0]
			break;
 80034a6:	e01c      	b.n	80034e2 <UART4_IRQHandler+0xca>
		case 35:
			m8n_rx_buf[cnt] = uart4_rx_data;
 80034a8:	4b12      	ldr	r3, [pc, #72]	@ (80034f4 <UART4_IRQHandler+0xdc>)
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	461a      	mov	r2, r3
 80034ae:	4b0f      	ldr	r3, [pc, #60]	@ (80034ec <UART4_IRQHandler+0xd4>)
 80034b0:	7819      	ldrb	r1, [r3, #0]
 80034b2:	4b11      	ldr	r3, [pc, #68]	@ (80034f8 <UART4_IRQHandler+0xe0>)
 80034b4:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 80034b6:	4b0f      	ldr	r3, [pc, #60]	@ (80034f4 <UART4_IRQHandler+0xdc>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	701a      	strb	r2, [r3, #0]
			m8n_rx_cplt_flag = 1;
 80034bc:	4b0f      	ldr	r3, [pc, #60]	@ (80034fc <UART4_IRQHandler+0xe4>)
 80034be:	2201      	movs	r2, #1
 80034c0:	701a      	strb	r2, [r3, #0]
			break;
 80034c2:	e00e      	b.n	80034e2 <UART4_IRQHandler+0xca>
		default :
			m8n_rx_buf[cnt] = uart4_rx_data;
 80034c4:	4b0b      	ldr	r3, [pc, #44]	@ (80034f4 <UART4_IRQHandler+0xdc>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	461a      	mov	r2, r3
 80034ca:	4b08      	ldr	r3, [pc, #32]	@ (80034ec <UART4_IRQHandler+0xd4>)
 80034cc:	7819      	ldrb	r1, [r3, #0]
 80034ce:	4b0a      	ldr	r3, [pc, #40]	@ (80034f8 <UART4_IRQHandler+0xe0>)
 80034d0:	5499      	strb	r1, [r3, r2]
			cnt++;
 80034d2:	4b08      	ldr	r3, [pc, #32]	@ (80034f4 <UART4_IRQHandler+0xdc>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	3301      	adds	r3, #1
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	4b06      	ldr	r3, [pc, #24]	@ (80034f4 <UART4_IRQHandler+0xdc>)
 80034dc:	701a      	strb	r2, [r3, #0]
			break;
 80034de:	e000      	b.n	80034e2 <UART4_IRQHandler+0xca>
			break;
 80034e0:	bf00      	nop
	}
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80034e2:	bf00      	nop
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40004c00 	.word	0x40004c00
 80034ec:	20000393 	.word	0x20000393
 80034f0:	20000392 	.word	0x20000392
 80034f4:	200003e1 	.word	0x200003e1
 80034f8:	20000398 	.word	0x20000398
 80034fc:	200003bc 	.word	0x200003bc

08003500 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	static unsigned char ibus_cnt =0;

	if(LL_USART_IsActiveFlag_RXNE(UART5))
 8003504:	4832      	ldr	r0, [pc, #200]	@ (80035d0 <UART5_IRQHandler+0xd0>)
 8003506:	f7ff ff29 	bl	800335c <LL_USART_IsActiveFlag_RXNE>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d05c      	beq.n	80035ca <UART5_IRQHandler+0xca>
	{
		LL_USART_ClearFlag_RXNE(UART5);
 8003510:	482f      	ldr	r0, [pc, #188]	@ (80035d0 <UART5_IRQHandler+0xd0>)
 8003512:	f7ff ff36 	bl	8003382 <LL_USART_ClearFlag_RXNE>
		uart5_rx_data = LL_USART_ReceiveData8(UART5);
 8003516:	482e      	ldr	r0, [pc, #184]	@ (80035d0 <UART5_IRQHandler+0xd0>)
 8003518:	f7ff ff41 	bl	800339e <LL_USART_ReceiveData8>
 800351c:	4603      	mov	r3, r0
 800351e:	461a      	mov	r2, r3
 8003520:	4b2c      	ldr	r3, [pc, #176]	@ (80035d4 <UART5_IRQHandler+0xd4>)
 8003522:	701a      	strb	r2, [r3, #0]
		uart5_rx_flag = 1;
 8003524:	4b2c      	ldr	r3, [pc, #176]	@ (80035d8 <UART5_IRQHandler+0xd8>)
 8003526:	2201      	movs	r2, #1
 8003528:	701a      	strb	r2, [r3, #0]

//		while(!LL_USART_IsActiveFlag_TXE(USART6));
//		LL_USART_TransmitData8(USART6, uart5_rx_data);

		switch(ibus_cnt)
 800352a:	4b2c      	ldr	r3, [pc, #176]	@ (80035dc <UART5_IRQHandler+0xdc>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b1f      	cmp	r3, #31
 8003530:	d02e      	beq.n	8003590 <UART5_IRQHandler+0x90>
 8003532:	2b1f      	cmp	r3, #31
 8003534:	dc3a      	bgt.n	80035ac <UART5_IRQHandler+0xac>
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <UART5_IRQHandler+0x40>
 800353a:	2b01      	cmp	r3, #1
 800353c:	d012      	beq.n	8003564 <UART5_IRQHandler+0x64>
 800353e:	e035      	b.n	80035ac <UART5_IRQHandler+0xac>
		{
		case 0 :
			if(uart5_rx_data == 0x20)
 8003540:	4b24      	ldr	r3, [pc, #144]	@ (80035d4 <UART5_IRQHandler+0xd4>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b20      	cmp	r3, #32
 8003546:	d13f      	bne.n	80035c8 <UART5_IRQHandler+0xc8>
			{
				ibus_rx_buf[ibus_cnt] = uart5_rx_data;
 8003548:	4b24      	ldr	r3, [pc, #144]	@ (80035dc <UART5_IRQHandler+0xdc>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	461a      	mov	r2, r3
 800354e:	4b21      	ldr	r3, [pc, #132]	@ (80035d4 <UART5_IRQHandler+0xd4>)
 8003550:	7819      	ldrb	r1, [r3, #0]
 8003552:	4b23      	ldr	r3, [pc, #140]	@ (80035e0 <UART5_IRQHandler+0xe0>)
 8003554:	5499      	strb	r1, [r3, r2]
				ibus_cnt++;
 8003556:	4b21      	ldr	r3, [pc, #132]	@ (80035dc <UART5_IRQHandler+0xdc>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	3301      	adds	r3, #1
 800355c:	b2da      	uxtb	r2, r3
 800355e:	4b1f      	ldr	r3, [pc, #124]	@ (80035dc <UART5_IRQHandler+0xdc>)
 8003560:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003562:	e031      	b.n	80035c8 <UART5_IRQHandler+0xc8>
		case 1:
			if(uart5_rx_data == 0x40)
 8003564:	4b1b      	ldr	r3, [pc, #108]	@ (80035d4 <UART5_IRQHandler+0xd4>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b40      	cmp	r3, #64	@ 0x40
 800356a:	d10d      	bne.n	8003588 <UART5_IRQHandler+0x88>
			{
				ibus_rx_buf[ibus_cnt] = uart5_rx_data;
 800356c:	4b1b      	ldr	r3, [pc, #108]	@ (80035dc <UART5_IRQHandler+0xdc>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	461a      	mov	r2, r3
 8003572:	4b18      	ldr	r3, [pc, #96]	@ (80035d4 <UART5_IRQHandler+0xd4>)
 8003574:	7819      	ldrb	r1, [r3, #0]
 8003576:	4b1a      	ldr	r3, [pc, #104]	@ (80035e0 <UART5_IRQHandler+0xe0>)
 8003578:	5499      	strb	r1, [r3, r2]
				ibus_cnt++;
 800357a:	4b18      	ldr	r3, [pc, #96]	@ (80035dc <UART5_IRQHandler+0xdc>)
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	3301      	adds	r3, #1
 8003580:	b2da      	uxtb	r2, r3
 8003582:	4b16      	ldr	r3, [pc, #88]	@ (80035dc <UART5_IRQHandler+0xdc>)
 8003584:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				ibus_cnt = 0;
			}
			break;
 8003586:	e020      	b.n	80035ca <UART5_IRQHandler+0xca>
				ibus_cnt = 0;
 8003588:	4b14      	ldr	r3, [pc, #80]	@ (80035dc <UART5_IRQHandler+0xdc>)
 800358a:	2200      	movs	r2, #0
 800358c:	701a      	strb	r2, [r3, #0]
			break;
 800358e:	e01c      	b.n	80035ca <UART5_IRQHandler+0xca>
		case 31:
			ibus_rx_buf[ibus_cnt] = uart5_rx_data;
 8003590:	4b12      	ldr	r3, [pc, #72]	@ (80035dc <UART5_IRQHandler+0xdc>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	461a      	mov	r2, r3
 8003596:	4b0f      	ldr	r3, [pc, #60]	@ (80035d4 <UART5_IRQHandler+0xd4>)
 8003598:	7819      	ldrb	r1, [r3, #0]
 800359a:	4b11      	ldr	r3, [pc, #68]	@ (80035e0 <UART5_IRQHandler+0xe0>)
 800359c:	5499      	strb	r1, [r3, r2]
			ibus_cnt = 0;
 800359e:	4b0f      	ldr	r3, [pc, #60]	@ (80035dc <UART5_IRQHandler+0xdc>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 80035a4:	4b0f      	ldr	r3, [pc, #60]	@ (80035e4 <UART5_IRQHandler+0xe4>)
 80035a6:	2201      	movs	r2, #1
 80035a8:	701a      	strb	r2, [r3, #0]
			break;
 80035aa:	e00e      	b.n	80035ca <UART5_IRQHandler+0xca>
		default:
			ibus_rx_buf[ibus_cnt] = uart5_rx_data;
 80035ac:	4b0b      	ldr	r3, [pc, #44]	@ (80035dc <UART5_IRQHandler+0xdc>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	461a      	mov	r2, r3
 80035b2:	4b08      	ldr	r3, [pc, #32]	@ (80035d4 <UART5_IRQHandler+0xd4>)
 80035b4:	7819      	ldrb	r1, [r3, #0]
 80035b6:	4b0a      	ldr	r3, [pc, #40]	@ (80035e0 <UART5_IRQHandler+0xe0>)
 80035b8:	5499      	strb	r1, [r3, r2]
			ibus_cnt++;
 80035ba:	4b08      	ldr	r3, [pc, #32]	@ (80035dc <UART5_IRQHandler+0xdc>)
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	3301      	adds	r3, #1
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	4b06      	ldr	r3, [pc, #24]	@ (80035dc <UART5_IRQHandler+0xdc>)
 80035c4:	701a      	strb	r2, [r3, #0]
			break;
 80035c6:	e000      	b.n	80035ca <UART5_IRQHandler+0xca>
			break;
 80035c8:	bf00      	nop
	}
  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80035ca:	bf00      	nop
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40005000 	.word	0x40005000
 80035d4:	20000395 	.word	0x20000395
 80035d8:	20000394 	.word	0x20000394
 80035dc:	200003e2 	.word	0x200003e2
 80035e0:	200003c0 	.word	0x200003c0
 80035e4:	200003e0 	.word	0x200003e0

080035e8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80035ec:	4802      	ldr	r0, [pc, #8]	@ (80035f8 <DMA2_Stream0_IRQHandler+0x10>)
 80035ee:	f001 fc11 	bl	8004e14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80035f2:	bf00      	nop
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	200002dc 	.word	0x200002dc

080035fc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6))
 8003600:	480a      	ldr	r0, [pc, #40]	@ (800362c <USART6_IRQHandler+0x30>)
 8003602:	f7ff feab 	bl	800335c <LL_USART_IsActiveFlag_RXNE>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00c      	beq.n	8003626 <USART6_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART6);
 800360c:	4807      	ldr	r0, [pc, #28]	@ (800362c <USART6_IRQHandler+0x30>)
 800360e:	f7ff feb8 	bl	8003382 <LL_USART_ClearFlag_RXNE>
		uart6_rx_data = LL_USART_ReceiveData8(USART6);
 8003612:	4806      	ldr	r0, [pc, #24]	@ (800362c <USART6_IRQHandler+0x30>)
 8003614:	f7ff fec3 	bl	800339e <LL_USART_ReceiveData8>
 8003618:	4603      	mov	r3, r0
 800361a:	461a      	mov	r2, r3
 800361c:	4b04      	ldr	r3, [pc, #16]	@ (8003630 <USART6_IRQHandler+0x34>)
 800361e:	701a      	strb	r2, [r3, #0]
		uart6_rx_flag = 1;
 8003620:	4b04      	ldr	r3, [pc, #16]	@ (8003634 <USART6_IRQHandler+0x38>)
 8003622:	2201      	movs	r2, #1
 8003624:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003626:	bf00      	nop
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40011400 	.word	0x40011400
 8003630:	20000391 	.word	0x20000391
 8003634:	20000390 	.word	0x20000390

08003638 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  return 1;
 800363c:	2301      	movs	r3, #1
}
 800363e:	4618      	mov	r0, r3
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <_kill>:

int _kill(int pid, int sig)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003652:	f005 fc97 	bl	8008f84 <__errno>
 8003656:	4603      	mov	r3, r0
 8003658:	2216      	movs	r2, #22
 800365a:	601a      	str	r2, [r3, #0]
  return -1;
 800365c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003660:	4618      	mov	r0, r3
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <_exit>:

void _exit (int status)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003670:	f04f 31ff 	mov.w	r1, #4294967295
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7ff ffe7 	bl	8003648 <_kill>
  while (1) {}    /* Make sure we hang here */
 800367a:	bf00      	nop
 800367c:	e7fd      	b.n	800367a <_exit+0x12>

0800367e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b086      	sub	sp, #24
 8003682:	af00      	add	r7, sp, #0
 8003684:	60f8      	str	r0, [r7, #12]
 8003686:	60b9      	str	r1, [r7, #8]
 8003688:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800368a:	2300      	movs	r3, #0
 800368c:	617b      	str	r3, [r7, #20]
 800368e:	e00a      	b.n	80036a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003690:	f3af 8000 	nop.w
 8003694:	4601      	mov	r1, r0
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	60ba      	str	r2, [r7, #8]
 800369c:	b2ca      	uxtb	r2, r1
 800369e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	3301      	adds	r3, #1
 80036a4:	617b      	str	r3, [r7, #20]
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	dbf0      	blt.n	8003690 <_read+0x12>
  }

  return len;
 80036ae:	687b      	ldr	r3, [r7, #4]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3718      	adds	r7, #24
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80036c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80036e0:	605a      	str	r2, [r3, #4]
  return 0;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <_isatty>:

int _isatty(int file)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80036f8:	2301      	movs	r3, #1
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003706:	b480      	push	{r7}
 8003708:	b085      	sub	sp, #20
 800370a:	af00      	add	r7, sp, #0
 800370c:	60f8      	str	r0, [r7, #12]
 800370e:	60b9      	str	r1, [r7, #8]
 8003710:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003728:	4a14      	ldr	r2, [pc, #80]	@ (800377c <_sbrk+0x5c>)
 800372a:	4b15      	ldr	r3, [pc, #84]	@ (8003780 <_sbrk+0x60>)
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003734:	4b13      	ldr	r3, [pc, #76]	@ (8003784 <_sbrk+0x64>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d102      	bne.n	8003742 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800373c:	4b11      	ldr	r3, [pc, #68]	@ (8003784 <_sbrk+0x64>)
 800373e:	4a12      	ldr	r2, [pc, #72]	@ (8003788 <_sbrk+0x68>)
 8003740:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003742:	4b10      	ldr	r3, [pc, #64]	@ (8003784 <_sbrk+0x64>)
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4413      	add	r3, r2
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	429a      	cmp	r2, r3
 800374e:	d207      	bcs.n	8003760 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003750:	f005 fc18 	bl	8008f84 <__errno>
 8003754:	4603      	mov	r3, r0
 8003756:	220c      	movs	r2, #12
 8003758:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800375a:	f04f 33ff 	mov.w	r3, #4294967295
 800375e:	e009      	b.n	8003774 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003760:	4b08      	ldr	r3, [pc, #32]	@ (8003784 <_sbrk+0x64>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003766:	4b07      	ldr	r3, [pc, #28]	@ (8003784 <_sbrk+0x64>)
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4413      	add	r3, r2
 800376e:	4a05      	ldr	r2, [pc, #20]	@ (8003784 <_sbrk+0x64>)
 8003770:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003772:	68fb      	ldr	r3, [r7, #12]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	20020000 	.word	0x20020000
 8003780:	00000400 	.word	0x00000400
 8003784:	200003e4 	.word	0x200003e4
 8003788:	20000538 	.word	0x20000538

0800378c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003790:	4b06      	ldr	r3, [pc, #24]	@ (80037ac <SystemInit+0x20>)
 8003792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003796:	4a05      	ldr	r2, [pc, #20]	@ (80037ac <SystemInit+0x20>)
 8003798:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800379c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037a0:	bf00      	nop
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	e000ed00 	.word	0xe000ed00

080037b0 <LL_TIM_EnableARRPreload>:
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	601a      	str	r2, [r3, #0]
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <LL_TIM_OC_EnableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d01c      	beq.n	800381a <LL_TIM_OC_EnableFast+0x4a>
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d017      	beq.n	8003816 <LL_TIM_OC_EnableFast+0x46>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b10      	cmp	r3, #16
 80037ea:	d012      	beq.n	8003812 <LL_TIM_OC_EnableFast+0x42>
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	2b40      	cmp	r3, #64	@ 0x40
 80037f0:	d00d      	beq.n	800380e <LL_TIM_OC_EnableFast+0x3e>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037f8:	d007      	beq.n	800380a <LL_TIM_OC_EnableFast+0x3a>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003800:	d101      	bne.n	8003806 <LL_TIM_OC_EnableFast+0x36>
 8003802:	2305      	movs	r3, #5
 8003804:	e00a      	b.n	800381c <LL_TIM_OC_EnableFast+0x4c>
 8003806:	2306      	movs	r3, #6
 8003808:	e008      	b.n	800381c <LL_TIM_OC_EnableFast+0x4c>
 800380a:	2304      	movs	r3, #4
 800380c:	e006      	b.n	800381c <LL_TIM_OC_EnableFast+0x4c>
 800380e:	2303      	movs	r3, #3
 8003810:	e004      	b.n	800381c <LL_TIM_OC_EnableFast+0x4c>
 8003812:	2302      	movs	r3, #2
 8003814:	e002      	b.n	800381c <LL_TIM_OC_EnableFast+0x4c>
 8003816:	2301      	movs	r3, #1
 8003818:	e000      	b.n	800381c <LL_TIM_OC_EnableFast+0x4c>
 800381a:	2300      	movs	r3, #0
 800381c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3318      	adds	r3, #24
 8003822:	4619      	mov	r1, r3
 8003824:	7bfb      	ldrb	r3, [r7, #15]
 8003826:	4a0a      	ldr	r2, [pc, #40]	@ (8003850 <LL_TIM_OC_EnableFast+0x80>)
 8003828:	5cd3      	ldrb	r3, [r2, r3]
 800382a:	440b      	add	r3, r1
 800382c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	7bfb      	ldrb	r3, [r7, #15]
 8003834:	4907      	ldr	r1, [pc, #28]	@ (8003854 <LL_TIM_OC_EnableFast+0x84>)
 8003836:	5ccb      	ldrb	r3, [r1, r3]
 8003838:	4619      	mov	r1, r3
 800383a:	2304      	movs	r3, #4
 800383c:	408b      	lsls	r3, r1
 800383e:	431a      	orrs	r2, r3
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	601a      	str	r2, [r3, #0]

}
 8003844:	bf00      	nop
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	0800ae24 	.word	0x0800ae24
 8003854:	0800ae2c 	.word	0x0800ae2c

08003858 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d01c      	beq.n	80038a2 <LL_TIM_OC_EnablePreload+0x4a>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	2b04      	cmp	r3, #4
 800386c:	d017      	beq.n	800389e <LL_TIM_OC_EnablePreload+0x46>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b10      	cmp	r3, #16
 8003872:	d012      	beq.n	800389a <LL_TIM_OC_EnablePreload+0x42>
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	2b40      	cmp	r3, #64	@ 0x40
 8003878:	d00d      	beq.n	8003896 <LL_TIM_OC_EnablePreload+0x3e>
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003880:	d007      	beq.n	8003892 <LL_TIM_OC_EnablePreload+0x3a>
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003888:	d101      	bne.n	800388e <LL_TIM_OC_EnablePreload+0x36>
 800388a:	2305      	movs	r3, #5
 800388c:	e00a      	b.n	80038a4 <LL_TIM_OC_EnablePreload+0x4c>
 800388e:	2306      	movs	r3, #6
 8003890:	e008      	b.n	80038a4 <LL_TIM_OC_EnablePreload+0x4c>
 8003892:	2304      	movs	r3, #4
 8003894:	e006      	b.n	80038a4 <LL_TIM_OC_EnablePreload+0x4c>
 8003896:	2303      	movs	r3, #3
 8003898:	e004      	b.n	80038a4 <LL_TIM_OC_EnablePreload+0x4c>
 800389a:	2302      	movs	r3, #2
 800389c:	e002      	b.n	80038a4 <LL_TIM_OC_EnablePreload+0x4c>
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <LL_TIM_OC_EnablePreload+0x4c>
 80038a2:	2300      	movs	r3, #0
 80038a4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	3318      	adds	r3, #24
 80038aa:	4619      	mov	r1, r3
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
 80038ae:	4a0a      	ldr	r2, [pc, #40]	@ (80038d8 <LL_TIM_OC_EnablePreload+0x80>)
 80038b0:	5cd3      	ldrb	r3, [r2, r3]
 80038b2:	440b      	add	r3, r1
 80038b4:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
 80038bc:	4907      	ldr	r1, [pc, #28]	@ (80038dc <LL_TIM_OC_EnablePreload+0x84>)
 80038be:	5ccb      	ldrb	r3, [r1, r3]
 80038c0:	4619      	mov	r1, r3
 80038c2:	2308      	movs	r3, #8
 80038c4:	408b      	lsls	r3, r1
 80038c6:	431a      	orrs	r2, r3
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	601a      	str	r2, [r3, #0]
}
 80038cc:	bf00      	nop
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	0800ae24 	.word	0x0800ae24
 80038dc:	0800ae2c 	.word	0x0800ae2c

080038e0 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038f2:	f023 0307 	bic.w	r3, r3, #7
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	431a      	orrs	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	609a      	str	r2, [r3, #8]
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800390a:	b480      	push	{r7}
 800390c:	b083      	sub	sp, #12
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
 8003912:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	605a      	str	r2, [r3, #4]
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	609a      	str	r2, [r3, #8]
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <LL_AHB1_GRP1_EnableClock>:
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003958:	4b08      	ldr	r3, [pc, #32]	@ (800397c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800395a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800395c:	4907      	ldr	r1, [pc, #28]	@ (800397c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4313      	orrs	r3, r2
 8003962:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003964:	4b05      	ldr	r3, [pc, #20]	@ (800397c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003966:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4013      	ands	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800396e:	68fb      	ldr	r3, [r7, #12]
}
 8003970:	bf00      	nop
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	40023800 	.word	0x40023800

08003980 <LL_APB1_GRP1_EnableClock>:
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003988:	4b08      	ldr	r3, [pc, #32]	@ (80039ac <LL_APB1_GRP1_EnableClock+0x2c>)
 800398a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800398c:	4907      	ldr	r1, [pc, #28]	@ (80039ac <LL_APB1_GRP1_EnableClock+0x2c>)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4313      	orrs	r3, r2
 8003992:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003994:	4b05      	ldr	r3, [pc, #20]	@ (80039ac <LL_APB1_GRP1_EnableClock+0x2c>)
 8003996:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4013      	ands	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800399e:	68fb      	ldr	r3, [r7, #12]
}
 80039a0:	bf00      	nop
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	40023800 	.word	0x40023800

080039b0 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b094      	sub	sp, #80	@ 0x50
 80039b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80039b6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	605a      	str	r2, [r3, #4]
 80039c0:	609a      	str	r2, [r3, #8]
 80039c2:	60da      	str	r2, [r3, #12]
 80039c4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80039c6:	f107 031c 	add.w	r3, r7, #28
 80039ca:	2220      	movs	r2, #32
 80039cc:	2100      	movs	r1, #0
 80039ce:	4618      	mov	r0, r3
 80039d0:	f005 fa86 	bl	8008ee0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d4:	1d3b      	adds	r3, r7, #4
 80039d6:	2200      	movs	r2, #0
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	605a      	str	r2, [r3, #4]
 80039dc:	609a      	str	r2, [r3, #8]
 80039de:	60da      	str	r2, [r3, #12]
 80039e0:	611a      	str	r2, [r3, #16]
 80039e2:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80039e4:	2002      	movs	r0, #2
 80039e6:	f7ff ffcb 	bl	8003980 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 1000-LL_TIM_IC_FILTER_FDIV1_N2;
 80039ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039ee:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80039f0:	2300      	movs	r3, #0
 80039f2:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 21-LL_TIM_IC_FILTER_FDIV1_N2;
 80039f4:	4b25      	ldr	r3, [pc, #148]	@ (8003a8c <MX_TIM3_Init+0xdc>)
 80039f6:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80039f8:	2300      	movs	r3, #0
 80039fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80039fc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003a00:	4619      	mov	r1, r3
 8003a02:	4823      	ldr	r0, [pc, #140]	@ (8003a90 <MX_TIM3_Init+0xe0>)
 8003a04:	f003 fea2 	bl	800774c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8003a08:	4821      	ldr	r0, [pc, #132]	@ (8003a90 <MX_TIM3_Init+0xe0>)
 8003a0a:	f7ff fed1 	bl	80037b0 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003a0e:	2100      	movs	r1, #0
 8003a10:	481f      	ldr	r0, [pc, #124]	@ (8003a90 <MX_TIM3_Init+0xe0>)
 8003a12:	f7ff ff65 	bl	80038e0 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8003a16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003a1a:	481d      	ldr	r0, [pc, #116]	@ (8003a90 <MX_TIM3_Init+0xe0>)
 8003a1c:	f7ff ff1c 	bl	8003858 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003a20:	2360      	movs	r3, #96	@ 0x60
 8003a22:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003a24:	2300      	movs	r3, #0
 8003a26:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 8003a2c:	230a      	movs	r3, #10
 8003a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003a30:	2300      	movs	r3, #0
 8003a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8003a34:	f107 031c 	add.w	r3, r7, #28
 8003a38:	461a      	mov	r2, r3
 8003a3a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003a3e:	4814      	ldr	r0, [pc, #80]	@ (8003a90 <MX_TIM3_Init+0xe0>)
 8003a40:	f003 ff1e 	bl	8007880 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8003a44:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003a48:	4811      	ldr	r0, [pc, #68]	@ (8003a90 <MX_TIM3_Init+0xe0>)
 8003a4a:	f7ff fec1 	bl	80037d0 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8003a4e:	2100      	movs	r1, #0
 8003a50:	480f      	ldr	r0, [pc, #60]	@ (8003a90 <MX_TIM3_Init+0xe0>)
 8003a52:	f7ff ff5a 	bl	800390a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8003a56:	480e      	ldr	r0, [pc, #56]	@ (8003a90 <MX_TIM3_Init+0xe0>)
 8003a58:	f7ff ff6a 	bl	8003930 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003a5c:	2002      	movs	r0, #2
 8003a5e:	f7ff ff77 	bl	8003950 <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8003a62:	2302      	movs	r3, #2
 8003a64:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003a66:	2302      	movs	r3, #2
 8003a68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003a72:	2300      	movs	r3, #0
 8003a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8003a76:	2302      	movs	r3, #2
 8003a78:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a7a:	1d3b      	adds	r3, r7, #4
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4805      	ldr	r0, [pc, #20]	@ (8003a94 <MX_TIM3_Init+0xe4>)
 8003a80:	f003 fbc1 	bl	8007206 <LL_GPIO_Init>

}
 8003a84:	bf00      	nop
 8003a86:	3750      	adds	r7, #80	@ 0x50
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	fff00015 	.word	0xfff00015
 8003a90:	40000400 	.word	0x40000400
 8003a94:	40020400 	.word	0x40020400

08003a98 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b094      	sub	sp, #80	@ 0x50
 8003a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003a9e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	605a      	str	r2, [r3, #4]
 8003aa8:	609a      	str	r2, [r3, #8]
 8003aaa:	60da      	str	r2, [r3, #12]
 8003aac:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003aae:	f107 031c 	add.w	r3, r7, #28
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f005 fa12 	bl	8008ee0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003abc:	1d3b      	adds	r3, r7, #4
 8003abe:	2200      	movs	r2, #0
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	605a      	str	r2, [r3, #4]
 8003ac4:	609a      	str	r2, [r3, #8]
 8003ac6:	60da      	str	r2, [r3, #12]
 8003ac8:	611a      	str	r2, [r3, #16]
 8003aca:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 8003acc:	2008      	movs	r0, #8
 8003ace:	f7ff ff57 	bl	8003980 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 41999;
 8003ada:	f24a 430f 	movw	r3, #41999	@ 0xa40f
 8003ade:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 8003ae4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003ae8:	4619      	mov	r1, r3
 8003aea:	483a      	ldr	r0, [pc, #232]	@ (8003bd4 <MX_TIM5_Init+0x13c>)
 8003aec:	f003 fe2e 	bl	800774c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM5);
 8003af0:	4838      	ldr	r0, [pc, #224]	@ (8003bd4 <MX_TIM5_Init+0x13c>)
 8003af2:	f7ff fe5d 	bl	80037b0 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003af6:	2100      	movs	r1, #0
 8003af8:	4836      	ldr	r0, [pc, #216]	@ (8003bd4 <MX_TIM5_Init+0x13c>)
 8003afa:	f7ff fef1 	bl	80038e0 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH1);
 8003afe:	2101      	movs	r1, #1
 8003b00:	4834      	ldr	r0, [pc, #208]	@ (8003bd4 <MX_TIM5_Init+0x13c>)
 8003b02:	f7ff fea9 	bl	8003858 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003b06:	2360      	movs	r3, #96	@ 0x60
 8003b08:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8003b12:	2300      	movs	r3, #0
 8003b14:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003b16:	2300      	movs	r3, #0
 8003b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003b1a:	f107 031c 	add.w	r3, r7, #28
 8003b1e:	461a      	mov	r2, r3
 8003b20:	2101      	movs	r1, #1
 8003b22:	482c      	ldr	r0, [pc, #176]	@ (8003bd4 <MX_TIM5_Init+0x13c>)
 8003b24:	f003 feac 	bl	8007880 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH1);
 8003b28:	2101      	movs	r1, #1
 8003b2a:	482a      	ldr	r0, [pc, #168]	@ (8003bd4 <MX_TIM5_Init+0x13c>)
 8003b2c:	f7ff fe50 	bl	80037d0 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH2);
 8003b30:	2110      	movs	r1, #16
 8003b32:	4828      	ldr	r0, [pc, #160]	@ (8003bd4 <MX_TIM5_Init+0x13c>)
 8003b34:	f7ff fe90 	bl	8003858 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8003b38:	f107 031c 	add.w	r3, r7, #28
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	2110      	movs	r1, #16
 8003b40:	4824      	ldr	r0, [pc, #144]	@ (8003bd4 <MX_TIM5_Init+0x13c>)
 8003b42:	f003 fe9d 	bl	8007880 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH2);
 8003b46:	2110      	movs	r1, #16
 8003b48:	4822      	ldr	r0, [pc, #136]	@ (8003bd4 <MX_TIM5_Init+0x13c>)
 8003b4a:	f7ff fe41 	bl	80037d0 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH3);
 8003b4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003b52:	4820      	ldr	r0, [pc, #128]	@ (8003bd4 <MX_TIM5_Init+0x13c>)
 8003b54:	f7ff fe80 	bl	8003858 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8003b58:	f107 031c 	add.w	r3, r7, #28
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003b62:	481c      	ldr	r0, [pc, #112]	@ (8003bd4 <MX_TIM5_Init+0x13c>)
 8003b64:	f003 fe8c 	bl	8007880 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH3);
 8003b68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003b6c:	4819      	ldr	r0, [pc, #100]	@ (8003bd4 <MX_TIM5_Init+0x13c>)
 8003b6e:	f7ff fe2f 	bl	80037d0 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH4);
 8003b72:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b76:	4817      	ldr	r0, [pc, #92]	@ (8003bd4 <MX_TIM5_Init+0x13c>)
 8003b78:	f7ff fe6e 	bl	8003858 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8003b7c:	f107 031c 	add.w	r3, r7, #28
 8003b80:	461a      	mov	r2, r3
 8003b82:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b86:	4813      	ldr	r0, [pc, #76]	@ (8003bd4 <MX_TIM5_Init+0x13c>)
 8003b88:	f003 fe7a 	bl	8007880 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH4);
 8003b8c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b90:	4810      	ldr	r0, [pc, #64]	@ (8003bd4 <MX_TIM5_Init+0x13c>)
 8003b92:	f7ff fe1d 	bl	80037d0 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 8003b96:	2100      	movs	r1, #0
 8003b98:	480e      	ldr	r0, [pc, #56]	@ (8003bd4 <MX_TIM5_Init+0x13c>)
 8003b9a:	f7ff feb6 	bl	800390a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8003b9e:	480d      	ldr	r0, [pc, #52]	@ (8003bd4 <MX_TIM5_Init+0x13c>)
 8003ba0:	f7ff fec6 	bl	8003930 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003ba4:	2001      	movs	r0, #1
 8003ba6:	f7ff fed3 	bl	8003950 <LL_AHB1_GRP1_EnableClock>
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8003baa:	230f      	movs	r3, #15
 8003bac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003bae:	2302      	movs	r3, #2
 8003bb0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bc2:	1d3b      	adds	r3, r7, #4
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4804      	ldr	r0, [pc, #16]	@ (8003bd8 <MX_TIM5_Init+0x140>)
 8003bc8:	f003 fb1d 	bl	8007206 <LL_GPIO_Init>

}
 8003bcc:	bf00      	nop
 8003bce:	3750      	adds	r7, #80	@ 0x50
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40000c00 	.word	0x40000c00
 8003bd8:	40020000 	.word	0x40020000

08003bdc <__NVIC_GetPriorityGrouping>:
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003be0:	4b04      	ldr	r3, [pc, #16]	@ (8003bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	0a1b      	lsrs	r3, r3, #8
 8003be6:	f003 0307 	and.w	r3, r3, #7
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	e000ed00 	.word	0xe000ed00

08003bf8 <__NVIC_EnableIRQ>:
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	4603      	mov	r3, r0
 8003c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	db0b      	blt.n	8003c22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c0a:	79fb      	ldrb	r3, [r7, #7]
 8003c0c:	f003 021f 	and.w	r2, r3, #31
 8003c10:	4907      	ldr	r1, [pc, #28]	@ (8003c30 <__NVIC_EnableIRQ+0x38>)
 8003c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c16:	095b      	lsrs	r3, r3, #5
 8003c18:	2001      	movs	r0, #1
 8003c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	e000e100 	.word	0xe000e100

08003c34 <__NVIC_SetPriority>:
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	6039      	str	r1, [r7, #0]
 8003c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	db0a      	blt.n	8003c5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	b2da      	uxtb	r2, r3
 8003c4c:	490c      	ldr	r1, [pc, #48]	@ (8003c80 <__NVIC_SetPriority+0x4c>)
 8003c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c52:	0112      	lsls	r2, r2, #4
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	440b      	add	r3, r1
 8003c58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003c5c:	e00a      	b.n	8003c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	4908      	ldr	r1, [pc, #32]	@ (8003c84 <__NVIC_SetPriority+0x50>)
 8003c64:	79fb      	ldrb	r3, [r7, #7]
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	3b04      	subs	r3, #4
 8003c6c:	0112      	lsls	r2, r2, #4
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	440b      	add	r3, r1
 8003c72:	761a      	strb	r2, [r3, #24]
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	e000e100 	.word	0xe000e100
 8003c84:	e000ed00 	.word	0xe000ed00

08003c88 <NVIC_EncodePriority>:
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b089      	sub	sp, #36	@ 0x24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	f1c3 0307 	rsb	r3, r3, #7
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	bf28      	it	cs
 8003ca6:	2304      	movcs	r3, #4
 8003ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	3304      	adds	r3, #4
 8003cae:	2b06      	cmp	r3, #6
 8003cb0:	d902      	bls.n	8003cb8 <NVIC_EncodePriority+0x30>
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	3b03      	subs	r3, #3
 8003cb6:	e000      	b.n	8003cba <NVIC_EncodePriority+0x32>
 8003cb8:	2300      	movs	r3, #0
 8003cba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	43da      	mvns	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	401a      	ands	r2, r3
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cda:	43d9      	mvns	r1, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce0:	4313      	orrs	r3, r2
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3724      	adds	r7, #36	@ 0x24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <LL_USART_Enable>:
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	60da      	str	r2, [r3, #12]
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <LL_USART_ConfigAsyncMode>:
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	615a      	str	r2, [r3, #20]
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
	...

08003d3c <LL_AHB1_GRP1_EnableClock>:
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003d44:	4b08      	ldr	r3, [pc, #32]	@ (8003d68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003d46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d48:	4907      	ldr	r1, [pc, #28]	@ (8003d68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003d50:	4b05      	ldr	r3, [pc, #20]	@ (8003d68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003d52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4013      	ands	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
}
 8003d5c:	bf00      	nop
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	40023800 	.word	0x40023800

08003d6c <LL_APB1_GRP1_EnableClock>:
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003d74:	4b08      	ldr	r3, [pc, #32]	@ (8003d98 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003d76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d78:	4907      	ldr	r1, [pc, #28]	@ (8003d98 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003d80:	4b05      	ldr	r3, [pc, #20]	@ (8003d98 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003d82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4013      	ands	r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
}
 8003d8c:	bf00      	nop
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	40023800 	.word	0x40023800

08003d9c <LL_APB2_GRP1_EnableClock>:
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003da4:	4b08      	ldr	r3, [pc, #32]	@ (8003dc8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003da6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003da8:	4907      	ldr	r1, [pc, #28]	@ (8003dc8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003db0:	4b05      	ldr	r3, [pc, #20]	@ (8003dc8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003db2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4013      	ands	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003dba:	68fb      	ldr	r3, [r7, #12]
}
 8003dbc:	bf00      	nop
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	40023800 	.word	0x40023800

08003dcc <MX_UART4_Init>:

/* USER CODE END 0 */

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b08e      	sub	sp, #56	@ 0x38
 8003dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003dd2:	f107 031c 	add.w	r3, r7, #28
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	605a      	str	r2, [r3, #4]
 8003ddc:	609a      	str	r2, [r3, #8]
 8003dde:	60da      	str	r2, [r3, #12]
 8003de0:	611a      	str	r2, [r3, #16]
 8003de2:	615a      	str	r2, [r3, #20]
 8003de4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de6:	1d3b      	adds	r3, r7, #4
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	605a      	str	r2, [r3, #4]
 8003dee:	609a      	str	r2, [r3, #8]
 8003df0:	60da      	str	r2, [r3, #12]
 8003df2:	611a      	str	r2, [r3, #16]
 8003df4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8003df6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003dfa:	f7ff ffb7 	bl	8003d6c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003dfe:	2004      	movs	r0, #4
 8003e00:	f7ff ff9c 	bl	8003d3c <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 8003e04:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003e08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003e12:	2300      	movs	r3, #0
 8003e14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003e16:	2300      	movs	r3, #0
 8003e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8003e1a:	2308      	movs	r3, #8
 8003e1c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e1e:	1d3b      	adds	r3, r7, #4
 8003e20:	4619      	mov	r1, r3
 8003e22:	4819      	ldr	r0, [pc, #100]	@ (8003e88 <MX_UART4_Init+0xbc>)
 8003e24:	f003 f9ef 	bl	8007206 <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003e28:	f7ff fed8 	bl	8003bdc <__NVIC_GetPriorityGrouping>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2200      	movs	r2, #0
 8003e30:	2100      	movs	r1, #0
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff ff28 	bl	8003c88 <NVIC_EncodePriority>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	2034      	movs	r0, #52	@ 0x34
 8003e3e:	f7ff fef9 	bl	8003c34 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 8003e42:	2034      	movs	r0, #52	@ 0x34
 8003e44:	f7ff fed8 	bl	8003bf8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 8003e48:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8003e4c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003e52:	2300      	movs	r3, #0
 8003e54:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003e56:	2300      	movs	r3, #0
 8003e58:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003e5a:	230c      	movs	r3, #12
 8003e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003e62:	2300      	movs	r3, #0
 8003e64:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 8003e66:	f107 031c 	add.w	r3, r7, #28
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4807      	ldr	r0, [pc, #28]	@ (8003e8c <MX_UART4_Init+0xc0>)
 8003e6e:	f004 f955 	bl	800811c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 8003e72:	4806      	ldr	r0, [pc, #24]	@ (8003e8c <MX_UART4_Init+0xc0>)
 8003e74:	f7ff ff4b 	bl	8003d0e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 8003e78:	4804      	ldr	r0, [pc, #16]	@ (8003e8c <MX_UART4_Init+0xc0>)
 8003e7a:	f7ff ff38 	bl	8003cee <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003e7e:	bf00      	nop
 8003e80:	3738      	adds	r7, #56	@ 0x38
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40020800 	.word	0x40020800
 8003e8c:	40004c00 	.word	0x40004c00

08003e90 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08e      	sub	sp, #56	@ 0x38
 8003e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003e96:	f107 031c 	add.w	r3, r7, #28
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	605a      	str	r2, [r3, #4]
 8003ea0:	609a      	str	r2, [r3, #8]
 8003ea2:	60da      	str	r2, [r3, #12]
 8003ea4:	611a      	str	r2, [r3, #16]
 8003ea6:	615a      	str	r2, [r3, #20]
 8003ea8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eaa:	1d3b      	adds	r3, r7, #4
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	605a      	str	r2, [r3, #4]
 8003eb2:	609a      	str	r2, [r3, #8]
 8003eb4:	60da      	str	r2, [r3, #12]
 8003eb6:	611a      	str	r2, [r3, #16]
 8003eb8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 8003eba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8003ebe:	f7ff ff55 	bl	8003d6c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003ec2:	2004      	movs	r0, #4
 8003ec4:	f7ff ff3a 	bl	8003d3c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8003ec8:	2008      	movs	r0, #8
 8003eca:	f7ff ff37 	bl	8003d3c <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8003ece:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ed2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003edc:	2300      	movs	r3, #0
 8003ede:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8003ee4:	2308      	movs	r3, #8
 8003ee6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ee8:	1d3b      	adds	r3, r7, #4
 8003eea:	4619      	mov	r1, r3
 8003eec:	4821      	ldr	r0, [pc, #132]	@ (8003f74 <MX_UART5_Init+0xe4>)
 8003eee:	f003 f98a 	bl	8007206 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8003ef2:	2304      	movs	r3, #4
 8003ef4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003efa:	2303      	movs	r3, #3
 8003efc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003efe:	2300      	movs	r3, #0
 8003f00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003f02:	2300      	movs	r3, #0
 8003f04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8003f06:	2308      	movs	r3, #8
 8003f08:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f0a:	1d3b      	adds	r3, r7, #4
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	481a      	ldr	r0, [pc, #104]	@ (8003f78 <MX_UART5_Init+0xe8>)
 8003f10:	f003 f979 	bl	8007206 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003f14:	f7ff fe62 	bl	8003bdc <__NVIC_GetPriorityGrouping>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff feb2 	bl	8003c88 <NVIC_EncodePriority>
 8003f24:	4603      	mov	r3, r0
 8003f26:	4619      	mov	r1, r3
 8003f28:	2035      	movs	r0, #53	@ 0x35
 8003f2a:	f7ff fe83 	bl	8003c34 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8003f2e:	2035      	movs	r0, #53	@ 0x35
 8003f30:	f7ff fe62 	bl	8003bf8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003f34:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8003f38:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003f42:	2300      	movs	r3, #0
 8003f44:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 8003f46:	2304      	movs	r3, #4
 8003f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 8003f52:	f107 031c 	add.w	r3, r7, #28
 8003f56:	4619      	mov	r1, r3
 8003f58:	4808      	ldr	r0, [pc, #32]	@ (8003f7c <MX_UART5_Init+0xec>)
 8003f5a:	f004 f8df 	bl	800811c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8003f5e:	4807      	ldr	r0, [pc, #28]	@ (8003f7c <MX_UART5_Init+0xec>)
 8003f60:	f7ff fed5 	bl	8003d0e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 8003f64:	4805      	ldr	r0, [pc, #20]	@ (8003f7c <MX_UART5_Init+0xec>)
 8003f66:	f7ff fec2 	bl	8003cee <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003f6a:	bf00      	nop
 8003f6c:	3738      	adds	r7, #56	@ 0x38
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	40020800 	.word	0x40020800
 8003f78:	40020c00 	.word	0x40020c00
 8003f7c:	40005000 	.word	0x40005000

08003f80 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08e      	sub	sp, #56	@ 0x38
 8003f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003f86:	f107 031c 	add.w	r3, r7, #28
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	605a      	str	r2, [r3, #4]
 8003f90:	609a      	str	r2, [r3, #8]
 8003f92:	60da      	str	r2, [r3, #12]
 8003f94:	611a      	str	r2, [r3, #16]
 8003f96:	615a      	str	r2, [r3, #20]
 8003f98:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f9a:	1d3b      	adds	r3, r7, #4
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	601a      	str	r2, [r3, #0]
 8003fa0:	605a      	str	r2, [r3, #4]
 8003fa2:	609a      	str	r2, [r3, #8]
 8003fa4:	60da      	str	r2, [r3, #12]
 8003fa6:	611a      	str	r2, [r3, #16]
 8003fa8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8003faa:	2020      	movs	r0, #32
 8003fac:	f7ff fef6 	bl	8003d9c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003fb0:	2004      	movs	r0, #4
 8003fb2:	f7ff fec3 	bl	8003d3c <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8003fb6:	23c0      	movs	r3, #192	@ 0xc0
 8003fb8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003fba:	2302      	movs	r3, #2
 8003fbc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8003fca:	2308      	movs	r3, #8
 8003fcc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fce:	1d3b      	adds	r3, r7, #4
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4819      	ldr	r0, [pc, #100]	@ (8004038 <MX_USART6_UART_Init+0xb8>)
 8003fd4:	f003 f917 	bl	8007206 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003fd8:	f7ff fe00 	bl	8003bdc <__NVIC_GetPriorityGrouping>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2200      	movs	r2, #0
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff fe50 	bl	8003c88 <NVIC_EncodePriority>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	4619      	mov	r1, r3
 8003fec:	2047      	movs	r0, #71	@ 0x47
 8003fee:	f7ff fe21 	bl	8003c34 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8003ff2:	2047      	movs	r0, #71	@ 0x47
 8003ff4:	f7ff fe00 	bl	8003bf8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003ff8:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8003ffc:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003ffe:	2300      	movs	r3, #0
 8004000:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004002:	2300      	movs	r3, #0
 8004004:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004006:	2300      	movs	r3, #0
 8004008:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800400a:	230c      	movs	r3, #12
 800400c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800400e:	2300      	movs	r3, #0
 8004010:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004012:	2300      	movs	r3, #0
 8004014:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8004016:	f107 031c 	add.w	r3, r7, #28
 800401a:	4619      	mov	r1, r3
 800401c:	4807      	ldr	r0, [pc, #28]	@ (800403c <MX_USART6_UART_Init+0xbc>)
 800401e:	f004 f87d 	bl	800811c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8004022:	4806      	ldr	r0, [pc, #24]	@ (800403c <MX_USART6_UART_Init+0xbc>)
 8004024:	f7ff fe73 	bl	8003d0e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8004028:	4804      	ldr	r0, [pc, #16]	@ (800403c <MX_USART6_UART_Init+0xbc>)
 800402a:	f7ff fe60 	bl	8003cee <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800402e:	bf00      	nop
 8004030:	3738      	adds	r7, #56	@ 0x38
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	40020800 	.word	0x40020800
 800403c:	40011400 	.word	0x40011400

08004040 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004040:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004078 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004044:	f7ff fba2 	bl	800378c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004048:	480c      	ldr	r0, [pc, #48]	@ (800407c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800404a:	490d      	ldr	r1, [pc, #52]	@ (8004080 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800404c:	4a0d      	ldr	r2, [pc, #52]	@ (8004084 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800404e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004050:	e002      	b.n	8004058 <LoopCopyDataInit>

08004052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004056:	3304      	adds	r3, #4

08004058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800405a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800405c:	d3f9      	bcc.n	8004052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800405e:	4a0a      	ldr	r2, [pc, #40]	@ (8004088 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004060:	4c0a      	ldr	r4, [pc, #40]	@ (800408c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004064:	e001      	b.n	800406a <LoopFillZerobss>

08004066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004068:	3204      	adds	r2, #4

0800406a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800406a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800406c:	d3fb      	bcc.n	8004066 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800406e:	f004 ff8f 	bl	8008f90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004072:	f7fe fd95 	bl	8002ba0 <main>
  bx  lr    
 8004076:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004078:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800407c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004080:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8004084:	0800b1c0 	.word	0x0800b1c0
  ldr r2, =_sbss
 8004088:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800408c:	20000538 	.word	0x20000538

08004090 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004090:	e7fe      	b.n	8004090 <ADC_IRQHandler>
	...

08004094 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004098:	4b0e      	ldr	r3, [pc, #56]	@ (80040d4 <HAL_Init+0x40>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a0d      	ldr	r2, [pc, #52]	@ (80040d4 <HAL_Init+0x40>)
 800409e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80040a4:	4b0b      	ldr	r3, [pc, #44]	@ (80040d4 <HAL_Init+0x40>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a0a      	ldr	r2, [pc, #40]	@ (80040d4 <HAL_Init+0x40>)
 80040aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040b0:	4b08      	ldr	r3, [pc, #32]	@ (80040d4 <HAL_Init+0x40>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a07      	ldr	r2, [pc, #28]	@ (80040d4 <HAL_Init+0x40>)
 80040b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040bc:	2003      	movs	r0, #3
 80040be:	f000 fd61 	bl	8004b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040c2:	200f      	movs	r0, #15
 80040c4:	f000 f808 	bl	80040d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040c8:	f7ff f920 	bl	800330c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	40023c00 	.word	0x40023c00

080040d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040e0:	4b12      	ldr	r3, [pc, #72]	@ (800412c <HAL_InitTick+0x54>)
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	4b12      	ldr	r3, [pc, #72]	@ (8004130 <HAL_InitTick+0x58>)
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	4619      	mov	r1, r3
 80040ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80040f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 fd79 	bl	8004bee <HAL_SYSTICK_Config>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e00e      	b.n	8004124 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b0f      	cmp	r3, #15
 800410a:	d80a      	bhi.n	8004122 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800410c:	2200      	movs	r2, #0
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	f04f 30ff 	mov.w	r0, #4294967295
 8004114:	f000 fd41 	bl	8004b9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004118:	4a06      	ldr	r2, [pc, #24]	@ (8004134 <HAL_InitTick+0x5c>)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800411e:	2300      	movs	r3, #0
 8004120:	e000      	b.n	8004124 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
}
 8004124:	4618      	mov	r0, r3
 8004126:	3708      	adds	r7, #8
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	20000000 	.word	0x20000000
 8004130:	20000008 	.word	0x20000008
 8004134:	20000004 	.word	0x20000004

08004138 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800413c:	4b06      	ldr	r3, [pc, #24]	@ (8004158 <HAL_IncTick+0x20>)
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	461a      	mov	r2, r3
 8004142:	4b06      	ldr	r3, [pc, #24]	@ (800415c <HAL_IncTick+0x24>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4413      	add	r3, r2
 8004148:	4a04      	ldr	r2, [pc, #16]	@ (800415c <HAL_IncTick+0x24>)
 800414a:	6013      	str	r3, [r2, #0]
}
 800414c:	bf00      	nop
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	20000008 	.word	0x20000008
 800415c:	200003e8 	.word	0x200003e8

08004160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  return uwTick;
 8004164:	4b03      	ldr	r3, [pc, #12]	@ (8004174 <HAL_GetTick+0x14>)
 8004166:	681b      	ldr	r3, [r3, #0]
}
 8004168:	4618      	mov	r0, r3
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	200003e8 	.word	0x200003e8

08004178 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004180:	f7ff ffee 	bl	8004160 <HAL_GetTick>
 8004184:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004190:	d005      	beq.n	800419e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004192:	4b0a      	ldr	r3, [pc, #40]	@ (80041bc <HAL_Delay+0x44>)
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4413      	add	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800419e:	bf00      	nop
 80041a0:	f7ff ffde 	bl	8004160 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d8f7      	bhi.n	80041a0 <HAL_Delay+0x28>
  {
  }
}
 80041b0:	bf00      	nop
 80041b2:	bf00      	nop
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	20000008 	.word	0x20000008

080041c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e033      	b.n	800423e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d109      	bne.n	80041f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f7fe fa64 	bl	80026ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f6:	f003 0310 	and.w	r3, r3, #16
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d118      	bne.n	8004230 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004202:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004206:	f023 0302 	bic.w	r3, r3, #2
 800420a:	f043 0202 	orr.w	r2, r3, #2
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 fa68 	bl	80046e8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004222:	f023 0303 	bic.w	r3, r3, #3
 8004226:	f043 0201 	orr.w	r2, r3, #1
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	641a      	str	r2, [r3, #64]	@ 0x40
 800422e:	e001      	b.n	8004234 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800423c:	7bfb      	ldrb	r3, [r7, #15]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
	...

08004248 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800425e:	2b01      	cmp	r3, #1
 8004260:	d101      	bne.n	8004266 <HAL_ADC_Start_DMA+0x1e>
 8004262:	2302      	movs	r3, #2
 8004264:	e0e9      	b.n	800443a <HAL_ADC_Start_DMA+0x1f2>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b01      	cmp	r3, #1
 800427a:	d018      	beq.n	80042ae <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689a      	ldr	r2, [r3, #8]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0201 	orr.w	r2, r2, #1
 800428a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800428c:	4b6d      	ldr	r3, [pc, #436]	@ (8004444 <HAL_ADC_Start_DMA+0x1fc>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a6d      	ldr	r2, [pc, #436]	@ (8004448 <HAL_ADC_Start_DMA+0x200>)
 8004292:	fba2 2303 	umull	r2, r3, r2, r3
 8004296:	0c9a      	lsrs	r2, r3, #18
 8004298:	4613      	mov	r3, r2
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	4413      	add	r3, r2
 800429e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80042a0:	e002      	b.n	80042a8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	3b01      	subs	r3, #1
 80042a6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f9      	bne.n	80042a2 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042bc:	d107      	bne.n	80042ce <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042cc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b01      	cmp	r3, #1
 80042da:	f040 80a1 	bne.w	8004420 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80042e6:	f023 0301 	bic.w	r3, r3, #1
 80042ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d007      	beq.n	8004310 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004304:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004308:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004314:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004318:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800431c:	d106      	bne.n	800432c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004322:	f023 0206 	bic.w	r2, r3, #6
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	645a      	str	r2, [r3, #68]	@ 0x44
 800432a:	e002      	b.n	8004332 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800433a:	4b44      	ldr	r3, [pc, #272]	@ (800444c <HAL_ADC_Start_DMA+0x204>)
 800433c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004342:	4a43      	ldr	r2, [pc, #268]	@ (8004450 <HAL_ADC_Start_DMA+0x208>)
 8004344:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800434a:	4a42      	ldr	r2, [pc, #264]	@ (8004454 <HAL_ADC_Start_DMA+0x20c>)
 800434c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004352:	4a41      	ldr	r2, [pc, #260]	@ (8004458 <HAL_ADC_Start_DMA+0x210>)
 8004354:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800435e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800436e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689a      	ldr	r2, [r3, #8]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800437e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	334c      	adds	r3, #76	@ 0x4c
 800438a:	4619      	mov	r1, r3
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f000 fce8 	bl	8004d64 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f003 031f 	and.w	r3, r3, #31
 800439c:	2b00      	cmp	r3, #0
 800439e:	d12a      	bne.n	80043f6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a2d      	ldr	r2, [pc, #180]	@ (800445c <HAL_ADC_Start_DMA+0x214>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d015      	beq.n	80043d6 <HAL_ADC_Start_DMA+0x18e>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a2c      	ldr	r2, [pc, #176]	@ (8004460 <HAL_ADC_Start_DMA+0x218>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d105      	bne.n	80043c0 <HAL_ADC_Start_DMA+0x178>
 80043b4:	4b25      	ldr	r3, [pc, #148]	@ (800444c <HAL_ADC_Start_DMA+0x204>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f003 031f 	and.w	r3, r3, #31
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00a      	beq.n	80043d6 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a27      	ldr	r2, [pc, #156]	@ (8004464 <HAL_ADC_Start_DMA+0x21c>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d136      	bne.n	8004438 <HAL_ADC_Start_DMA+0x1f0>
 80043ca:	4b20      	ldr	r3, [pc, #128]	@ (800444c <HAL_ADC_Start_DMA+0x204>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f003 0310 	and.w	r3, r3, #16
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d130      	bne.n	8004438 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d129      	bne.n	8004438 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689a      	ldr	r2, [r3, #8]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80043f2:	609a      	str	r2, [r3, #8]
 80043f4:	e020      	b.n	8004438 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a18      	ldr	r2, [pc, #96]	@ (800445c <HAL_ADC_Start_DMA+0x214>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d11b      	bne.n	8004438 <HAL_ADC_Start_DMA+0x1f0>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d114      	bne.n	8004438 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800441c:	609a      	str	r2, [r3, #8]
 800441e:	e00b      	b.n	8004438 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004424:	f043 0210 	orr.w	r2, r3, #16
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004430:	f043 0201 	orr.w	r2, r3, #1
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3718      	adds	r7, #24
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	20000000 	.word	0x20000000
 8004448:	431bde83 	.word	0x431bde83
 800444c:	40012300 	.word	0x40012300
 8004450:	080048e1 	.word	0x080048e1
 8004454:	0800499b 	.word	0x0800499b
 8004458:	080049b7 	.word	0x080049b7
 800445c:	40012000 	.word	0x40012000
 8004460:	40012100 	.word	0x40012100
 8004464:	40012200 	.word	0x40012200

08004468 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <HAL_ADC_ConfigChannel+0x1c>
 80044bc:	2302      	movs	r3, #2
 80044be:	e105      	b.n	80046cc <HAL_ADC_ConfigChannel+0x228>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b09      	cmp	r3, #9
 80044ce:	d925      	bls.n	800451c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68d9      	ldr	r1, [r3, #12]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	b29b      	uxth	r3, r3
 80044dc:	461a      	mov	r2, r3
 80044de:	4613      	mov	r3, r2
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	4413      	add	r3, r2
 80044e4:	3b1e      	subs	r3, #30
 80044e6:	2207      	movs	r2, #7
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	43da      	mvns	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	400a      	ands	r2, r1
 80044f4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68d9      	ldr	r1, [r3, #12]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	b29b      	uxth	r3, r3
 8004506:	4618      	mov	r0, r3
 8004508:	4603      	mov	r3, r0
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	4403      	add	r3, r0
 800450e:	3b1e      	subs	r3, #30
 8004510:	409a      	lsls	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	60da      	str	r2, [r3, #12]
 800451a:	e022      	b.n	8004562 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6919      	ldr	r1, [r3, #16]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	b29b      	uxth	r3, r3
 8004528:	461a      	mov	r2, r3
 800452a:	4613      	mov	r3, r2
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	4413      	add	r3, r2
 8004530:	2207      	movs	r2, #7
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	43da      	mvns	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	400a      	ands	r2, r1
 800453e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6919      	ldr	r1, [r3, #16]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	689a      	ldr	r2, [r3, #8]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	b29b      	uxth	r3, r3
 8004550:	4618      	mov	r0, r3
 8004552:	4603      	mov	r3, r0
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	4403      	add	r3, r0
 8004558:	409a      	lsls	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	430a      	orrs	r2, r1
 8004560:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2b06      	cmp	r3, #6
 8004568:	d824      	bhi.n	80045b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	4613      	mov	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	3b05      	subs	r3, #5
 800457c:	221f      	movs	r2, #31
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	43da      	mvns	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	400a      	ands	r2, r1
 800458a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	b29b      	uxth	r3, r3
 8004598:	4618      	mov	r0, r3
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	4613      	mov	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	3b05      	subs	r3, #5
 80045a6:	fa00 f203 	lsl.w	r2, r0, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80045b2:	e04c      	b.n	800464e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2b0c      	cmp	r3, #12
 80045ba:	d824      	bhi.n	8004606 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	4613      	mov	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	3b23      	subs	r3, #35	@ 0x23
 80045ce:	221f      	movs	r2, #31
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	43da      	mvns	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	400a      	ands	r2, r1
 80045dc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	4618      	mov	r0, r3
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	4613      	mov	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	3b23      	subs	r3, #35	@ 0x23
 80045f8:	fa00 f203 	lsl.w	r2, r0, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	631a      	str	r2, [r3, #48]	@ 0x30
 8004604:	e023      	b.n	800464e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	4613      	mov	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	3b41      	subs	r3, #65	@ 0x41
 8004618:	221f      	movs	r2, #31
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	43da      	mvns	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	400a      	ands	r2, r1
 8004626:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	b29b      	uxth	r3, r3
 8004634:	4618      	mov	r0, r3
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	4613      	mov	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4413      	add	r3, r2
 8004640:	3b41      	subs	r3, #65	@ 0x41
 8004642:	fa00 f203 	lsl.w	r2, r0, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800464e:	4b22      	ldr	r3, [pc, #136]	@ (80046d8 <HAL_ADC_ConfigChannel+0x234>)
 8004650:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a21      	ldr	r2, [pc, #132]	@ (80046dc <HAL_ADC_ConfigChannel+0x238>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d109      	bne.n	8004670 <HAL_ADC_ConfigChannel+0x1cc>
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b12      	cmp	r3, #18
 8004662:	d105      	bne.n	8004670 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a19      	ldr	r2, [pc, #100]	@ (80046dc <HAL_ADC_ConfigChannel+0x238>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d123      	bne.n	80046c2 <HAL_ADC_ConfigChannel+0x21e>
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b10      	cmp	r3, #16
 8004680:	d003      	beq.n	800468a <HAL_ADC_ConfigChannel+0x1e6>
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b11      	cmp	r3, #17
 8004688:	d11b      	bne.n	80046c2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b10      	cmp	r3, #16
 800469c:	d111      	bne.n	80046c2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800469e:	4b10      	ldr	r3, [pc, #64]	@ (80046e0 <HAL_ADC_ConfigChannel+0x23c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a10      	ldr	r2, [pc, #64]	@ (80046e4 <HAL_ADC_ConfigChannel+0x240>)
 80046a4:	fba2 2303 	umull	r2, r3, r2, r3
 80046a8:	0c9a      	lsrs	r2, r3, #18
 80046aa:	4613      	mov	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4413      	add	r3, r2
 80046b0:	005b      	lsls	r3, r3, #1
 80046b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80046b4:	e002      	b.n	80046bc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	3b01      	subs	r3, #1
 80046ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1f9      	bne.n	80046b6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	40012300 	.word	0x40012300
 80046dc:	40012000 	.word	0x40012000
 80046e0:	20000000 	.word	0x20000000
 80046e4:	431bde83 	.word	0x431bde83

080046e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046f0:	4b79      	ldr	r3, [pc, #484]	@ (80048d8 <ADC_Init+0x1f0>)
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	431a      	orrs	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800471c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6859      	ldr	r1, [r3, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	021a      	lsls	r2, r3, #8
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004740:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6859      	ldr	r1, [r3, #4]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004762:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6899      	ldr	r1, [r3, #8]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800477a:	4a58      	ldr	r2, [pc, #352]	@ (80048dc <ADC_Init+0x1f4>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d022      	beq.n	80047c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	689a      	ldr	r2, [r3, #8]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800478e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6899      	ldr	r1, [r3, #8]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80047b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	6899      	ldr	r1, [r3, #8]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	609a      	str	r2, [r3, #8]
 80047c4:	e00f      	b.n	80047e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80047d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80047e4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 0202 	bic.w	r2, r2, #2
 80047f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6899      	ldr	r1, [r3, #8]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	7e1b      	ldrb	r3, [r3, #24]
 8004800:	005a      	lsls	r2, r3, #1
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d01b      	beq.n	800484c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004822:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004832:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6859      	ldr	r1, [r3, #4]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483e:	3b01      	subs	r3, #1
 8004840:	035a      	lsls	r2, r3, #13
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	605a      	str	r2, [r3, #4]
 800484a:	e007      	b.n	800485c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800485a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800486a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	3b01      	subs	r3, #1
 8004878:	051a      	lsls	r2, r3, #20
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	430a      	orrs	r2, r1
 8004880:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689a      	ldr	r2, [r3, #8]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004890:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6899      	ldr	r1, [r3, #8]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800489e:	025a      	lsls	r2, r3, #9
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	430a      	orrs	r2, r1
 80048a6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689a      	ldr	r2, [r3, #8]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6899      	ldr	r1, [r3, #8]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	029a      	lsls	r2, r3, #10
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	609a      	str	r2, [r3, #8]
}
 80048cc:	bf00      	nop
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	40012300 	.word	0x40012300
 80048dc:	0f000001 	.word	0x0f000001

080048e0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ec:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d13c      	bne.n	8004974 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fe:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d12b      	bne.n	800496c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004918:	2b00      	cmp	r3, #0
 800491a:	d127      	bne.n	800496c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004922:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004926:	2b00      	cmp	r3, #0
 8004928:	d006      	beq.n	8004938 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004934:	2b00      	cmp	r3, #0
 8004936:	d119      	bne.n	800496c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0220 	bic.w	r2, r2, #32
 8004946:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004958:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d105      	bne.n	800496c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004964:	f043 0201 	orr.w	r2, r3, #1
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f7ff fd7b 	bl	8004468 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004972:	e00e      	b.n	8004992 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004978:	f003 0310 	and.w	r3, r3, #16
 800497c:	2b00      	cmp	r3, #0
 800497e:	d003      	beq.n	8004988 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f7ff fd85 	bl	8004490 <HAL_ADC_ErrorCallback>
}
 8004986:	e004      	b.n	8004992 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800498c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	4798      	blx	r3
}
 8004992:	bf00      	nop
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b084      	sub	sp, #16
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049a6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f7ff fd67 	bl	800447c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80049ae:	bf00      	nop
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b084      	sub	sp, #16
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2240      	movs	r2, #64	@ 0x40
 80049c8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ce:	f043 0204 	orr.w	r2, r3, #4
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f7ff fd5a 	bl	8004490 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80049dc:	bf00      	nop
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <__NVIC_SetPriorityGrouping>:
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f003 0307 	and.w	r3, r3, #7
 80049f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004a28 <__NVIC_SetPriorityGrouping+0x44>)
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a00:	4013      	ands	r3, r2
 8004a02:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004a10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a16:	4a04      	ldr	r2, [pc, #16]	@ (8004a28 <__NVIC_SetPriorityGrouping+0x44>)
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	60d3      	str	r3, [r2, #12]
}
 8004a1c:	bf00      	nop
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	e000ed00 	.word	0xe000ed00

08004a2c <__NVIC_GetPriorityGrouping>:
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a30:	4b04      	ldr	r3, [pc, #16]	@ (8004a44 <__NVIC_GetPriorityGrouping+0x18>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	0a1b      	lsrs	r3, r3, #8
 8004a36:	f003 0307 	and.w	r3, r3, #7
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	e000ed00 	.word	0xe000ed00

08004a48 <__NVIC_EnableIRQ>:
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	4603      	mov	r3, r0
 8004a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	db0b      	blt.n	8004a72 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a5a:	79fb      	ldrb	r3, [r7, #7]
 8004a5c:	f003 021f 	and.w	r2, r3, #31
 8004a60:	4907      	ldr	r1, [pc, #28]	@ (8004a80 <__NVIC_EnableIRQ+0x38>)
 8004a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a66:	095b      	lsrs	r3, r3, #5
 8004a68:	2001      	movs	r0, #1
 8004a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	e000e100 	.word	0xe000e100

08004a84 <__NVIC_SetPriority>:
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	6039      	str	r1, [r7, #0]
 8004a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	db0a      	blt.n	8004aae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	490c      	ldr	r1, [pc, #48]	@ (8004ad0 <__NVIC_SetPriority+0x4c>)
 8004a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa2:	0112      	lsls	r2, r2, #4
 8004aa4:	b2d2      	uxtb	r2, r2
 8004aa6:	440b      	add	r3, r1
 8004aa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004aac:	e00a      	b.n	8004ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	4908      	ldr	r1, [pc, #32]	@ (8004ad4 <__NVIC_SetPriority+0x50>)
 8004ab4:	79fb      	ldrb	r3, [r7, #7]
 8004ab6:	f003 030f 	and.w	r3, r3, #15
 8004aba:	3b04      	subs	r3, #4
 8004abc:	0112      	lsls	r2, r2, #4
 8004abe:	b2d2      	uxtb	r2, r2
 8004ac0:	440b      	add	r3, r1
 8004ac2:	761a      	strb	r2, [r3, #24]
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	e000e100 	.word	0xe000e100
 8004ad4:	e000ed00 	.word	0xe000ed00

08004ad8 <NVIC_EncodePriority>:
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b089      	sub	sp, #36	@ 0x24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f003 0307 	and.w	r3, r3, #7
 8004aea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	f1c3 0307 	rsb	r3, r3, #7
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	bf28      	it	cs
 8004af6:	2304      	movcs	r3, #4
 8004af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	3304      	adds	r3, #4
 8004afe:	2b06      	cmp	r3, #6
 8004b00:	d902      	bls.n	8004b08 <NVIC_EncodePriority+0x30>
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	3b03      	subs	r3, #3
 8004b06:	e000      	b.n	8004b0a <NVIC_EncodePriority+0x32>
 8004b08:	2300      	movs	r3, #0
 8004b0a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	fa02 f303 	lsl.w	r3, r2, r3
 8004b16:	43da      	mvns	r2, r3
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	401a      	ands	r2, r3
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b20:	f04f 31ff 	mov.w	r1, #4294967295
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	fa01 f303 	lsl.w	r3, r1, r3
 8004b2a:	43d9      	mvns	r1, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b30:	4313      	orrs	r3, r2
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3724      	adds	r7, #36	@ 0x24
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
	...

08004b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b50:	d301      	bcc.n	8004b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b52:	2301      	movs	r3, #1
 8004b54:	e00f      	b.n	8004b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b56:	4a0a      	ldr	r2, [pc, #40]	@ (8004b80 <SysTick_Config+0x40>)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b5e:	210f      	movs	r1, #15
 8004b60:	f04f 30ff 	mov.w	r0, #4294967295
 8004b64:	f7ff ff8e 	bl	8004a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b68:	4b05      	ldr	r3, [pc, #20]	@ (8004b80 <SysTick_Config+0x40>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b6e:	4b04      	ldr	r3, [pc, #16]	@ (8004b80 <SysTick_Config+0x40>)
 8004b70:	2207      	movs	r2, #7
 8004b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	e000e010 	.word	0xe000e010

08004b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f7ff ff29 	bl	80049e4 <__NVIC_SetPriorityGrouping>
}
 8004b92:	bf00      	nop
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b086      	sub	sp, #24
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	60b9      	str	r1, [r7, #8]
 8004ba4:	607a      	str	r2, [r7, #4]
 8004ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004bac:	f7ff ff3e 	bl	8004a2c <__NVIC_GetPriorityGrouping>
 8004bb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	68b9      	ldr	r1, [r7, #8]
 8004bb6:	6978      	ldr	r0, [r7, #20]
 8004bb8:	f7ff ff8e 	bl	8004ad8 <NVIC_EncodePriority>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bc2:	4611      	mov	r1, r2
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7ff ff5d 	bl	8004a84 <__NVIC_SetPriority>
}
 8004bca:	bf00      	nop
 8004bcc:	3718      	adds	r7, #24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b082      	sub	sp, #8
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	4603      	mov	r3, r0
 8004bda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7ff ff31 	bl	8004a48 <__NVIC_EnableIRQ>
}
 8004be6:	bf00      	nop
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b082      	sub	sp, #8
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f7ff ffa2 	bl	8004b40 <SysTick_Config>
 8004bfc:	4603      	mov	r3, r0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
	...

08004c08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004c14:	f7ff faa4 	bl	8004160 <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e099      	b.n	8004d58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 0201 	bic.w	r2, r2, #1
 8004c42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c44:	e00f      	b.n	8004c66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c46:	f7ff fa8b 	bl	8004160 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b05      	cmp	r3, #5
 8004c52:	d908      	bls.n	8004c66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2220      	movs	r2, #32
 8004c58:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2203      	movs	r2, #3
 8004c5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e078      	b.n	8004d58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1e8      	bne.n	8004c46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	4b38      	ldr	r3, [pc, #224]	@ (8004d60 <HAL_DMA_Init+0x158>)
 8004c80:	4013      	ands	r3, r2
 8004c82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004caa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cbc:	2b04      	cmp	r3, #4
 8004cbe:	d107      	bne.n	8004cd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f023 0307 	bic.w	r3, r3, #7
 8004ce6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d117      	bne.n	8004d2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00e      	beq.n	8004d2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 fa6f 	bl	80051f0 <DMA_CheckFifoParam>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d008      	beq.n	8004d2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2240      	movs	r2, #64	@ 0x40
 8004d1c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004d26:	2301      	movs	r3, #1
 8004d28:	e016      	b.n	8004d58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 fa26 	bl	8005184 <DMA_CalcBaseAndBitshift>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d40:	223f      	movs	r2, #63	@ 0x3f
 8004d42:	409a      	lsls	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3718      	adds	r7, #24
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	f010803f 	.word	0xf010803f

08004d64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
 8004d70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d72:	2300      	movs	r3, #0
 8004d74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d101      	bne.n	8004d8a <HAL_DMA_Start_IT+0x26>
 8004d86:	2302      	movs	r3, #2
 8004d88:	e040      	b.n	8004e0c <HAL_DMA_Start_IT+0xa8>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d12f      	bne.n	8004dfe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2202      	movs	r2, #2
 8004da2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	68b9      	ldr	r1, [r7, #8]
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f000 f9b8 	bl	8005128 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dbc:	223f      	movs	r2, #63	@ 0x3f
 8004dbe:	409a      	lsls	r2, r3
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f042 0216 	orr.w	r2, r2, #22
 8004dd2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d007      	beq.n	8004dec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f042 0208 	orr.w	r2, r2, #8
 8004dea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f042 0201 	orr.w	r2, r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	e005      	b.n	8004e0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004e06:	2302      	movs	r3, #2
 8004e08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3718      	adds	r7, #24
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e20:	4b8e      	ldr	r3, [pc, #568]	@ (800505c <HAL_DMA_IRQHandler+0x248>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a8e      	ldr	r2, [pc, #568]	@ (8005060 <HAL_DMA_IRQHandler+0x24c>)
 8004e26:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2a:	0a9b      	lsrs	r3, r3, #10
 8004e2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e3e:	2208      	movs	r2, #8
 8004e40:	409a      	lsls	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	4013      	ands	r3, r2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d01a      	beq.n	8004e80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0304 	and.w	r3, r3, #4
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d013      	beq.n	8004e80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0204 	bic.w	r2, r2, #4
 8004e66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e6c:	2208      	movs	r2, #8
 8004e6e:	409a      	lsls	r2, r3
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e78:	f043 0201 	orr.w	r2, r3, #1
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e84:	2201      	movs	r2, #1
 8004e86:	409a      	lsls	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d012      	beq.n	8004eb6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00b      	beq.n	8004eb6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	409a      	lsls	r2, r3
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eae:	f043 0202 	orr.w	r2, r3, #2
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eba:	2204      	movs	r2, #4
 8004ebc:	409a      	lsls	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d012      	beq.n	8004eec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00b      	beq.n	8004eec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ed8:	2204      	movs	r2, #4
 8004eda:	409a      	lsls	r2, r3
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ee4:	f043 0204 	orr.w	r2, r3, #4
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ef0:	2210      	movs	r2, #16
 8004ef2:	409a      	lsls	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d043      	beq.n	8004f84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0308 	and.w	r3, r3, #8
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d03c      	beq.n	8004f84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f0e:	2210      	movs	r2, #16
 8004f10:	409a      	lsls	r2, r3
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d018      	beq.n	8004f56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d108      	bne.n	8004f44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d024      	beq.n	8004f84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	4798      	blx	r3
 8004f42:	e01f      	b.n	8004f84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d01b      	beq.n	8004f84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	4798      	blx	r3
 8004f54:	e016      	b.n	8004f84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d107      	bne.n	8004f74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f022 0208 	bic.w	r2, r2, #8
 8004f72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f88:	2220      	movs	r2, #32
 8004f8a:	409a      	lsls	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4013      	ands	r3, r2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 808f 	beq.w	80050b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0310 	and.w	r3, r3, #16
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 8087 	beq.w	80050b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004faa:	2220      	movs	r2, #32
 8004fac:	409a      	lsls	r2, r3
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b05      	cmp	r3, #5
 8004fbc:	d136      	bne.n	800502c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 0216 	bic.w	r2, r2, #22
 8004fcc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	695a      	ldr	r2, [r3, #20]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004fdc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d103      	bne.n	8004fee <HAL_DMA_IRQHandler+0x1da>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d007      	beq.n	8004ffe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f022 0208 	bic.w	r2, r2, #8
 8004ffc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005002:	223f      	movs	r2, #63	@ 0x3f
 8005004:	409a      	lsls	r2, r3
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800501e:	2b00      	cmp	r3, #0
 8005020:	d07e      	beq.n	8005120 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	4798      	blx	r3
        }
        return;
 800502a:	e079      	b.n	8005120 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d01d      	beq.n	8005076 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10d      	bne.n	8005064 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800504c:	2b00      	cmp	r3, #0
 800504e:	d031      	beq.n	80050b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	4798      	blx	r3
 8005058:	e02c      	b.n	80050b4 <HAL_DMA_IRQHandler+0x2a0>
 800505a:	bf00      	nop
 800505c:	20000000 	.word	0x20000000
 8005060:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005068:	2b00      	cmp	r3, #0
 800506a:	d023      	beq.n	80050b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	4798      	blx	r3
 8005074:	e01e      	b.n	80050b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10f      	bne.n	80050a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 0210 	bic.w	r2, r2, #16
 8005092:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d003      	beq.n	80050b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d032      	beq.n	8005122 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d022      	beq.n	800510e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2205      	movs	r2, #5
 80050cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 0201 	bic.w	r2, r2, #1
 80050de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	3301      	adds	r3, #1
 80050e4:	60bb      	str	r3, [r7, #8]
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d307      	bcc.n	80050fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1f2      	bne.n	80050e0 <HAL_DMA_IRQHandler+0x2cc>
 80050fa:	e000      	b.n	80050fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80050fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005112:	2b00      	cmp	r3, #0
 8005114:	d005      	beq.n	8005122 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	4798      	blx	r3
 800511e:	e000      	b.n	8005122 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005120:	bf00      	nop
    }
  }
}
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
 8005134:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005144:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	2b40      	cmp	r3, #64	@ 0x40
 8005154:	d108      	bne.n	8005168 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005166:	e007      	b.n	8005178 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	60da      	str	r2, [r3, #12]
}
 8005178:	bf00      	nop
 800517a:	3714      	adds	r7, #20
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	b2db      	uxtb	r3, r3
 8005192:	3b10      	subs	r3, #16
 8005194:	4a14      	ldr	r2, [pc, #80]	@ (80051e8 <DMA_CalcBaseAndBitshift+0x64>)
 8005196:	fba2 2303 	umull	r2, r3, r2, r3
 800519a:	091b      	lsrs	r3, r3, #4
 800519c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800519e:	4a13      	ldr	r2, [pc, #76]	@ (80051ec <DMA_CalcBaseAndBitshift+0x68>)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4413      	add	r3, r2
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	461a      	mov	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2b03      	cmp	r3, #3
 80051b0:	d909      	bls.n	80051c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80051ba:	f023 0303 	bic.w	r3, r3, #3
 80051be:	1d1a      	adds	r2, r3, #4
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	659a      	str	r2, [r3, #88]	@ 0x58
 80051c4:	e007      	b.n	80051d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80051ce:	f023 0303 	bic.w	r3, r3, #3
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	aaaaaaab 	.word	0xaaaaaaab
 80051ec:	0800ae34 	.word	0x0800ae34

080051f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051f8:	2300      	movs	r3, #0
 80051fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005200:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d11f      	bne.n	800524a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	2b03      	cmp	r3, #3
 800520e:	d856      	bhi.n	80052be <DMA_CheckFifoParam+0xce>
 8005210:	a201      	add	r2, pc, #4	@ (adr r2, 8005218 <DMA_CheckFifoParam+0x28>)
 8005212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005216:	bf00      	nop
 8005218:	08005229 	.word	0x08005229
 800521c:	0800523b 	.word	0x0800523b
 8005220:	08005229 	.word	0x08005229
 8005224:	080052bf 	.word	0x080052bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800522c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d046      	beq.n	80052c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005238:	e043      	b.n	80052c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800523e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005242:	d140      	bne.n	80052c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005248:	e03d      	b.n	80052c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005252:	d121      	bne.n	8005298 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	2b03      	cmp	r3, #3
 8005258:	d837      	bhi.n	80052ca <DMA_CheckFifoParam+0xda>
 800525a:	a201      	add	r2, pc, #4	@ (adr r2, 8005260 <DMA_CheckFifoParam+0x70>)
 800525c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005260:	08005271 	.word	0x08005271
 8005264:	08005277 	.word	0x08005277
 8005268:	08005271 	.word	0x08005271
 800526c:	08005289 	.word	0x08005289
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	73fb      	strb	r3, [r7, #15]
      break;
 8005274:	e030      	b.n	80052d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800527a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d025      	beq.n	80052ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005286:	e022      	b.n	80052ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800528c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005290:	d11f      	bne.n	80052d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005296:	e01c      	b.n	80052d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2b02      	cmp	r3, #2
 800529c:	d903      	bls.n	80052a6 <DMA_CheckFifoParam+0xb6>
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	2b03      	cmp	r3, #3
 80052a2:	d003      	beq.n	80052ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80052a4:	e018      	b.n	80052d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	73fb      	strb	r3, [r7, #15]
      break;
 80052aa:	e015      	b.n	80052d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00e      	beq.n	80052d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	73fb      	strb	r3, [r7, #15]
      break;
 80052bc:	e00b      	b.n	80052d6 <DMA_CheckFifoParam+0xe6>
      break;
 80052be:	bf00      	nop
 80052c0:	e00a      	b.n	80052d8 <DMA_CheckFifoParam+0xe8>
      break;
 80052c2:	bf00      	nop
 80052c4:	e008      	b.n	80052d8 <DMA_CheckFifoParam+0xe8>
      break;
 80052c6:	bf00      	nop
 80052c8:	e006      	b.n	80052d8 <DMA_CheckFifoParam+0xe8>
      break;
 80052ca:	bf00      	nop
 80052cc:	e004      	b.n	80052d8 <DMA_CheckFifoParam+0xe8>
      break;
 80052ce:	bf00      	nop
 80052d0:	e002      	b.n	80052d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80052d2:	bf00      	nop
 80052d4:	e000      	b.n	80052d8 <DMA_CheckFifoParam+0xe8>
      break;
 80052d6:	bf00      	nop
    }
  } 
  
  return status; 
 80052d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop

080052e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b089      	sub	sp, #36	@ 0x24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80052fa:	2300      	movs	r3, #0
 80052fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052fe:	2300      	movs	r3, #0
 8005300:	61fb      	str	r3, [r7, #28]
 8005302:	e16b      	b.n	80055dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005304:	2201      	movs	r2, #1
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	fa02 f303 	lsl.w	r3, r2, r3
 800530c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	4013      	ands	r3, r2
 8005316:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	429a      	cmp	r2, r3
 800531e:	f040 815a 	bne.w	80055d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f003 0303 	and.w	r3, r3, #3
 800532a:	2b01      	cmp	r3, #1
 800532c:	d005      	beq.n	800533a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005336:	2b02      	cmp	r3, #2
 8005338:	d130      	bne.n	800539c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	005b      	lsls	r3, r3, #1
 8005344:	2203      	movs	r2, #3
 8005346:	fa02 f303 	lsl.w	r3, r2, r3
 800534a:	43db      	mvns	r3, r3
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	4013      	ands	r3, r2
 8005350:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	68da      	ldr	r2, [r3, #12]
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	005b      	lsls	r3, r3, #1
 800535a:	fa02 f303 	lsl.w	r3, r2, r3
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	4313      	orrs	r3, r2
 8005362:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005370:	2201      	movs	r2, #1
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	fa02 f303 	lsl.w	r3, r2, r3
 8005378:	43db      	mvns	r3, r3
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	4013      	ands	r3, r2
 800537e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	091b      	lsrs	r3, r3, #4
 8005386:	f003 0201 	and.w	r2, r3, #1
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	fa02 f303 	lsl.w	r3, r2, r3
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	4313      	orrs	r3, r2
 8005394:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f003 0303 	and.w	r3, r3, #3
 80053a4:	2b03      	cmp	r3, #3
 80053a6:	d017      	beq.n	80053d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	2203      	movs	r2, #3
 80053b4:	fa02 f303 	lsl.w	r3, r2, r3
 80053b8:	43db      	mvns	r3, r3
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	4013      	ands	r3, r2
 80053be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	005b      	lsls	r3, r3, #1
 80053c8:	fa02 f303 	lsl.w	r3, r2, r3
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f003 0303 	and.w	r3, r3, #3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d123      	bne.n	800542c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	08da      	lsrs	r2, r3, #3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	3208      	adds	r2, #8
 80053ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	f003 0307 	and.w	r3, r3, #7
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	220f      	movs	r2, #15
 80053fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005400:	43db      	mvns	r3, r3
 8005402:	69ba      	ldr	r2, [r7, #24]
 8005404:	4013      	ands	r3, r2
 8005406:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	691a      	ldr	r2, [r3, #16]
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	f003 0307 	and.w	r3, r3, #7
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	fa02 f303 	lsl.w	r3, r2, r3
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	4313      	orrs	r3, r2
 800541c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	08da      	lsrs	r2, r3, #3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	3208      	adds	r2, #8
 8005426:	69b9      	ldr	r1, [r7, #24]
 8005428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	005b      	lsls	r3, r3, #1
 8005436:	2203      	movs	r2, #3
 8005438:	fa02 f303 	lsl.w	r3, r2, r3
 800543c:	43db      	mvns	r3, r3
 800543e:	69ba      	ldr	r2, [r7, #24]
 8005440:	4013      	ands	r3, r2
 8005442:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f003 0203 	and.w	r2, r3, #3
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	005b      	lsls	r3, r3, #1
 8005450:	fa02 f303 	lsl.w	r3, r2, r3
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	4313      	orrs	r3, r2
 8005458:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 80b4 	beq.w	80055d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800546e:	2300      	movs	r3, #0
 8005470:	60fb      	str	r3, [r7, #12]
 8005472:	4b60      	ldr	r3, [pc, #384]	@ (80055f4 <HAL_GPIO_Init+0x30c>)
 8005474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005476:	4a5f      	ldr	r2, [pc, #380]	@ (80055f4 <HAL_GPIO_Init+0x30c>)
 8005478:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800547c:	6453      	str	r3, [r2, #68]	@ 0x44
 800547e:	4b5d      	ldr	r3, [pc, #372]	@ (80055f4 <HAL_GPIO_Init+0x30c>)
 8005480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005482:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005486:	60fb      	str	r3, [r7, #12]
 8005488:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800548a:	4a5b      	ldr	r2, [pc, #364]	@ (80055f8 <HAL_GPIO_Init+0x310>)
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	089b      	lsrs	r3, r3, #2
 8005490:	3302      	adds	r3, #2
 8005492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005496:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	f003 0303 	and.w	r3, r3, #3
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	220f      	movs	r2, #15
 80054a2:	fa02 f303 	lsl.w	r3, r2, r3
 80054a6:	43db      	mvns	r3, r3
 80054a8:	69ba      	ldr	r2, [r7, #24]
 80054aa:	4013      	ands	r3, r2
 80054ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a52      	ldr	r2, [pc, #328]	@ (80055fc <HAL_GPIO_Init+0x314>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d02b      	beq.n	800550e <HAL_GPIO_Init+0x226>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a51      	ldr	r2, [pc, #324]	@ (8005600 <HAL_GPIO_Init+0x318>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d025      	beq.n	800550a <HAL_GPIO_Init+0x222>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a50      	ldr	r2, [pc, #320]	@ (8005604 <HAL_GPIO_Init+0x31c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d01f      	beq.n	8005506 <HAL_GPIO_Init+0x21e>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a4f      	ldr	r2, [pc, #316]	@ (8005608 <HAL_GPIO_Init+0x320>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d019      	beq.n	8005502 <HAL_GPIO_Init+0x21a>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a4e      	ldr	r2, [pc, #312]	@ (800560c <HAL_GPIO_Init+0x324>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d013      	beq.n	80054fe <HAL_GPIO_Init+0x216>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a4d      	ldr	r2, [pc, #308]	@ (8005610 <HAL_GPIO_Init+0x328>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d00d      	beq.n	80054fa <HAL_GPIO_Init+0x212>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a4c      	ldr	r2, [pc, #304]	@ (8005614 <HAL_GPIO_Init+0x32c>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d007      	beq.n	80054f6 <HAL_GPIO_Init+0x20e>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a4b      	ldr	r2, [pc, #300]	@ (8005618 <HAL_GPIO_Init+0x330>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d101      	bne.n	80054f2 <HAL_GPIO_Init+0x20a>
 80054ee:	2307      	movs	r3, #7
 80054f0:	e00e      	b.n	8005510 <HAL_GPIO_Init+0x228>
 80054f2:	2308      	movs	r3, #8
 80054f4:	e00c      	b.n	8005510 <HAL_GPIO_Init+0x228>
 80054f6:	2306      	movs	r3, #6
 80054f8:	e00a      	b.n	8005510 <HAL_GPIO_Init+0x228>
 80054fa:	2305      	movs	r3, #5
 80054fc:	e008      	b.n	8005510 <HAL_GPIO_Init+0x228>
 80054fe:	2304      	movs	r3, #4
 8005500:	e006      	b.n	8005510 <HAL_GPIO_Init+0x228>
 8005502:	2303      	movs	r3, #3
 8005504:	e004      	b.n	8005510 <HAL_GPIO_Init+0x228>
 8005506:	2302      	movs	r3, #2
 8005508:	e002      	b.n	8005510 <HAL_GPIO_Init+0x228>
 800550a:	2301      	movs	r3, #1
 800550c:	e000      	b.n	8005510 <HAL_GPIO_Init+0x228>
 800550e:	2300      	movs	r3, #0
 8005510:	69fa      	ldr	r2, [r7, #28]
 8005512:	f002 0203 	and.w	r2, r2, #3
 8005516:	0092      	lsls	r2, r2, #2
 8005518:	4093      	lsls	r3, r2
 800551a:	69ba      	ldr	r2, [r7, #24]
 800551c:	4313      	orrs	r3, r2
 800551e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005520:	4935      	ldr	r1, [pc, #212]	@ (80055f8 <HAL_GPIO_Init+0x310>)
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	089b      	lsrs	r3, r3, #2
 8005526:	3302      	adds	r3, #2
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800552e:	4b3b      	ldr	r3, [pc, #236]	@ (800561c <HAL_GPIO_Init+0x334>)
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	43db      	mvns	r3, r3
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	4013      	ands	r3, r2
 800553c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	4313      	orrs	r3, r2
 8005550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005552:	4a32      	ldr	r2, [pc, #200]	@ (800561c <HAL_GPIO_Init+0x334>)
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005558:	4b30      	ldr	r3, [pc, #192]	@ (800561c <HAL_GPIO_Init+0x334>)
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	43db      	mvns	r3, r3
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	4013      	ands	r3, r2
 8005566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d003      	beq.n	800557c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005574:	69ba      	ldr	r2, [r7, #24]
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	4313      	orrs	r3, r2
 800557a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800557c:	4a27      	ldr	r2, [pc, #156]	@ (800561c <HAL_GPIO_Init+0x334>)
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005582:	4b26      	ldr	r3, [pc, #152]	@ (800561c <HAL_GPIO_Init+0x334>)
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	43db      	mvns	r3, r3
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	4013      	ands	r3, r2
 8005590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d003      	beq.n	80055a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800559e:	69ba      	ldr	r2, [r7, #24]
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80055a6:	4a1d      	ldr	r2, [pc, #116]	@ (800561c <HAL_GPIO_Init+0x334>)
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80055ac:	4b1b      	ldr	r3, [pc, #108]	@ (800561c <HAL_GPIO_Init+0x334>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	43db      	mvns	r3, r3
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	4013      	ands	r3, r2
 80055ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d003      	beq.n	80055d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80055d0:	4a12      	ldr	r2, [pc, #72]	@ (800561c <HAL_GPIO_Init+0x334>)
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	3301      	adds	r3, #1
 80055da:	61fb      	str	r3, [r7, #28]
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	2b0f      	cmp	r3, #15
 80055e0:	f67f ae90 	bls.w	8005304 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80055e4:	bf00      	nop
 80055e6:	bf00      	nop
 80055e8:	3724      	adds	r7, #36	@ 0x24
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	40023800 	.word	0x40023800
 80055f8:	40013800 	.word	0x40013800
 80055fc:	40020000 	.word	0x40020000
 8005600:	40020400 	.word	0x40020400
 8005604:	40020800 	.word	0x40020800
 8005608:	40020c00 	.word	0x40020c00
 800560c:	40021000 	.word	0x40021000
 8005610:	40021400 	.word	0x40021400
 8005614:	40021800 	.word	0x40021800
 8005618:	40021c00 	.word	0x40021c00
 800561c:	40013c00 	.word	0x40013c00

08005620 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e12b      	b.n	800588a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d106      	bne.n	800564c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7fd f9aa 	bl	80029a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2224      	movs	r2, #36	@ 0x24
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f022 0201 	bic.w	r2, r2, #1
 8005662:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005672:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005682:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005684:	f001 fc60 	bl	8006f48 <HAL_RCC_GetPCLK1Freq>
 8005688:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	4a81      	ldr	r2, [pc, #516]	@ (8005894 <HAL_I2C_Init+0x274>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d807      	bhi.n	80056a4 <HAL_I2C_Init+0x84>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	4a80      	ldr	r2, [pc, #512]	@ (8005898 <HAL_I2C_Init+0x278>)
 8005698:	4293      	cmp	r3, r2
 800569a:	bf94      	ite	ls
 800569c:	2301      	movls	r3, #1
 800569e:	2300      	movhi	r3, #0
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	e006      	b.n	80056b2 <HAL_I2C_Init+0x92>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	4a7d      	ldr	r2, [pc, #500]	@ (800589c <HAL_I2C_Init+0x27c>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	bf94      	ite	ls
 80056ac:	2301      	movls	r3, #1
 80056ae:	2300      	movhi	r3, #0
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e0e7      	b.n	800588a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	4a78      	ldr	r2, [pc, #480]	@ (80058a0 <HAL_I2C_Init+0x280>)
 80056be:	fba2 2303 	umull	r2, r3, r2, r3
 80056c2:	0c9b      	lsrs	r3, r3, #18
 80056c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	430a      	orrs	r2, r1
 80056d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6a1b      	ldr	r3, [r3, #32]
 80056e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	4a6a      	ldr	r2, [pc, #424]	@ (8005894 <HAL_I2C_Init+0x274>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d802      	bhi.n	80056f4 <HAL_I2C_Init+0xd4>
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	3301      	adds	r3, #1
 80056f2:	e009      	b.n	8005708 <HAL_I2C_Init+0xe8>
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80056fa:	fb02 f303 	mul.w	r3, r2, r3
 80056fe:	4a69      	ldr	r2, [pc, #420]	@ (80058a4 <HAL_I2C_Init+0x284>)
 8005700:	fba2 2303 	umull	r2, r3, r2, r3
 8005704:	099b      	lsrs	r3, r3, #6
 8005706:	3301      	adds	r3, #1
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	6812      	ldr	r2, [r2, #0]
 800570c:	430b      	orrs	r3, r1
 800570e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800571a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	495c      	ldr	r1, [pc, #368]	@ (8005894 <HAL_I2C_Init+0x274>)
 8005724:	428b      	cmp	r3, r1
 8005726:	d819      	bhi.n	800575c <HAL_I2C_Init+0x13c>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	1e59      	subs	r1, r3, #1
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	005b      	lsls	r3, r3, #1
 8005732:	fbb1 f3f3 	udiv	r3, r1, r3
 8005736:	1c59      	adds	r1, r3, #1
 8005738:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800573c:	400b      	ands	r3, r1
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00a      	beq.n	8005758 <HAL_I2C_Init+0x138>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	1e59      	subs	r1, r3, #1
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005750:	3301      	adds	r3, #1
 8005752:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005756:	e051      	b.n	80057fc <HAL_I2C_Init+0x1dc>
 8005758:	2304      	movs	r3, #4
 800575a:	e04f      	b.n	80057fc <HAL_I2C_Init+0x1dc>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d111      	bne.n	8005788 <HAL_I2C_Init+0x168>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	1e58      	subs	r0, r3, #1
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6859      	ldr	r1, [r3, #4]
 800576c:	460b      	mov	r3, r1
 800576e:	005b      	lsls	r3, r3, #1
 8005770:	440b      	add	r3, r1
 8005772:	fbb0 f3f3 	udiv	r3, r0, r3
 8005776:	3301      	adds	r3, #1
 8005778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800577c:	2b00      	cmp	r3, #0
 800577e:	bf0c      	ite	eq
 8005780:	2301      	moveq	r3, #1
 8005782:	2300      	movne	r3, #0
 8005784:	b2db      	uxtb	r3, r3
 8005786:	e012      	b.n	80057ae <HAL_I2C_Init+0x18e>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	1e58      	subs	r0, r3, #1
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6859      	ldr	r1, [r3, #4]
 8005790:	460b      	mov	r3, r1
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	440b      	add	r3, r1
 8005796:	0099      	lsls	r1, r3, #2
 8005798:	440b      	add	r3, r1
 800579a:	fbb0 f3f3 	udiv	r3, r0, r3
 800579e:	3301      	adds	r3, #1
 80057a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	bf0c      	ite	eq
 80057a8:	2301      	moveq	r3, #1
 80057aa:	2300      	movne	r3, #0
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <HAL_I2C_Init+0x196>
 80057b2:	2301      	movs	r3, #1
 80057b4:	e022      	b.n	80057fc <HAL_I2C_Init+0x1dc>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10e      	bne.n	80057dc <HAL_I2C_Init+0x1bc>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	1e58      	subs	r0, r3, #1
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6859      	ldr	r1, [r3, #4]
 80057c6:	460b      	mov	r3, r1
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	440b      	add	r3, r1
 80057cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80057d0:	3301      	adds	r3, #1
 80057d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057da:	e00f      	b.n	80057fc <HAL_I2C_Init+0x1dc>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	1e58      	subs	r0, r3, #1
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6859      	ldr	r1, [r3, #4]
 80057e4:	460b      	mov	r3, r1
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	440b      	add	r3, r1
 80057ea:	0099      	lsls	r1, r3, #2
 80057ec:	440b      	add	r3, r1
 80057ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80057f2:	3301      	adds	r3, #1
 80057f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80057fc:	6879      	ldr	r1, [r7, #4]
 80057fe:	6809      	ldr	r1, [r1, #0]
 8005800:	4313      	orrs	r3, r2
 8005802:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	69da      	ldr	r2, [r3, #28]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	431a      	orrs	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	430a      	orrs	r2, r1
 800581e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800582a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	6911      	ldr	r1, [r2, #16]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	68d2      	ldr	r2, [r2, #12]
 8005836:	4311      	orrs	r1, r2
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	6812      	ldr	r2, [r2, #0]
 800583c:	430b      	orrs	r3, r1
 800583e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	695a      	ldr	r2, [r3, #20]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	431a      	orrs	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f042 0201 	orr.w	r2, r2, #1
 800586a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2220      	movs	r2, #32
 8005876:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	000186a0 	.word	0x000186a0
 8005898:	001e847f 	.word	0x001e847f
 800589c:	003d08ff 	.word	0x003d08ff
 80058a0:	431bde83 	.word	0x431bde83
 80058a4:	10624dd3 	.word	0x10624dd3

080058a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b088      	sub	sp, #32
 80058ac:	af02      	add	r7, sp, #8
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	4608      	mov	r0, r1
 80058b2:	4611      	mov	r1, r2
 80058b4:	461a      	mov	r2, r3
 80058b6:	4603      	mov	r3, r0
 80058b8:	817b      	strh	r3, [r7, #10]
 80058ba:	460b      	mov	r3, r1
 80058bc:	813b      	strh	r3, [r7, #8]
 80058be:	4613      	mov	r3, r2
 80058c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80058c2:	f7fe fc4d 	bl	8004160 <HAL_GetTick>
 80058c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b20      	cmp	r3, #32
 80058d2:	f040 80d9 	bne.w	8005a88 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	2319      	movs	r3, #25
 80058dc:	2201      	movs	r2, #1
 80058de:	496d      	ldr	r1, [pc, #436]	@ (8005a94 <HAL_I2C_Mem_Write+0x1ec>)
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f000 fc8b 	bl	80061fc <I2C_WaitOnFlagUntilTimeout>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d001      	beq.n	80058f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80058ec:	2302      	movs	r3, #2
 80058ee:	e0cc      	b.n	8005a8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d101      	bne.n	80058fe <HAL_I2C_Mem_Write+0x56>
 80058fa:	2302      	movs	r3, #2
 80058fc:	e0c5      	b.n	8005a8a <HAL_I2C_Mem_Write+0x1e2>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0301 	and.w	r3, r3, #1
 8005910:	2b01      	cmp	r3, #1
 8005912:	d007      	beq.n	8005924 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f042 0201 	orr.w	r2, r2, #1
 8005922:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005932:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2221      	movs	r2, #33	@ 0x21
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2240      	movs	r2, #64	@ 0x40
 8005940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6a3a      	ldr	r2, [r7, #32]
 800594e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005954:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800595a:	b29a      	uxth	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	4a4d      	ldr	r2, [pc, #308]	@ (8005a98 <HAL_I2C_Mem_Write+0x1f0>)
 8005964:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005966:	88f8      	ldrh	r0, [r7, #6]
 8005968:	893a      	ldrh	r2, [r7, #8]
 800596a:	8979      	ldrh	r1, [r7, #10]
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	9301      	str	r3, [sp, #4]
 8005970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	4603      	mov	r3, r0
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f000 fac2 	bl	8005f00 <I2C_RequestMemoryWrite>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d052      	beq.n	8005a28 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e081      	b.n	8005a8a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f000 fd50 	bl	8006430 <I2C_WaitOnTXEFlagUntilTimeout>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00d      	beq.n	80059b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800599a:	2b04      	cmp	r3, #4
 800599c:	d107      	bne.n	80059ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e06b      	b.n	8005a8a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b6:	781a      	ldrb	r2, [r3, #0]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c2:	1c5a      	adds	r2, r3, #1
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059cc:	3b01      	subs	r3, #1
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059d8:	b29b      	uxth	r3, r3
 80059da:	3b01      	subs	r3, #1
 80059dc:	b29a      	uxth	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	f003 0304 	and.w	r3, r3, #4
 80059ec:	2b04      	cmp	r3, #4
 80059ee:	d11b      	bne.n	8005a28 <HAL_I2C_Mem_Write+0x180>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d017      	beq.n	8005a28 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059fc:	781a      	ldrb	r2, [r3, #0]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a08:	1c5a      	adds	r2, r3, #1
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a12:	3b01      	subs	r3, #1
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	3b01      	subs	r3, #1
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1aa      	bne.n	8005986 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f000 fd43 	bl	80064c0 <I2C_WaitOnBTFFlagUntilTimeout>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00d      	beq.n	8005a5c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a44:	2b04      	cmp	r3, #4
 8005a46:	d107      	bne.n	8005a58 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a56:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e016      	b.n	8005a8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005a84:	2300      	movs	r3, #0
 8005a86:	e000      	b.n	8005a8a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005a88:	2302      	movs	r3, #2
  }
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3718      	adds	r7, #24
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	00100002 	.word	0x00100002
 8005a98:	ffff0000 	.word	0xffff0000

08005a9c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08c      	sub	sp, #48	@ 0x30
 8005aa0:	af02      	add	r7, sp, #8
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	4608      	mov	r0, r1
 8005aa6:	4611      	mov	r1, r2
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	4603      	mov	r3, r0
 8005aac:	817b      	strh	r3, [r7, #10]
 8005aae:	460b      	mov	r3, r1
 8005ab0:	813b      	strh	r3, [r7, #8]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ab6:	f7fe fb53 	bl	8004160 <HAL_GetTick>
 8005aba:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	2b20      	cmp	r3, #32
 8005ac6:	f040 8214 	bne.w	8005ef2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	2319      	movs	r3, #25
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	497b      	ldr	r1, [pc, #492]	@ (8005cc0 <HAL_I2C_Mem_Read+0x224>)
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f000 fb91 	bl	80061fc <I2C_WaitOnFlagUntilTimeout>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d001      	beq.n	8005ae4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	e207      	b.n	8005ef4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d101      	bne.n	8005af2 <HAL_I2C_Mem_Read+0x56>
 8005aee:	2302      	movs	r3, #2
 8005af0:	e200      	b.n	8005ef4 <HAL_I2C_Mem_Read+0x458>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d007      	beq.n	8005b18 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f042 0201 	orr.w	r2, r2, #1
 8005b16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2222      	movs	r2, #34	@ 0x22
 8005b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2240      	movs	r2, #64	@ 0x40
 8005b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005b48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	4a5b      	ldr	r2, [pc, #364]	@ (8005cc4 <HAL_I2C_Mem_Read+0x228>)
 8005b58:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b5a:	88f8      	ldrh	r0, [r7, #6]
 8005b5c:	893a      	ldrh	r2, [r7, #8]
 8005b5e:	8979      	ldrh	r1, [r7, #10]
 8005b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b62:	9301      	str	r3, [sp, #4]
 8005b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	4603      	mov	r3, r0
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f000 fa5e 	bl	800602c <I2C_RequestMemoryRead>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e1bc      	b.n	8005ef4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d113      	bne.n	8005baa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b82:	2300      	movs	r3, #0
 8005b84:	623b      	str	r3, [r7, #32]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	623b      	str	r3, [r7, #32]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	623b      	str	r3, [r7, #32]
 8005b96:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ba6:	601a      	str	r2, [r3, #0]
 8005ba8:	e190      	b.n	8005ecc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d11b      	bne.n	8005bea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	61fb      	str	r3, [r7, #28]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	61fb      	str	r3, [r7, #28]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	61fb      	str	r3, [r7, #28]
 8005bd6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005be6:	601a      	str	r2, [r3, #0]
 8005be8:	e170      	b.n	8005ecc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d11b      	bne.n	8005c2a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c00:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c12:	2300      	movs	r3, #0
 8005c14:	61bb      	str	r3, [r7, #24]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	61bb      	str	r3, [r7, #24]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	61bb      	str	r3, [r7, #24]
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	e150      	b.n	8005ecc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	617b      	str	r3, [r7, #20]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	695b      	ldr	r3, [r3, #20]
 8005c34:	617b      	str	r3, [r7, #20]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	617b      	str	r3, [r7, #20]
 8005c3e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005c40:	e144      	b.n	8005ecc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c46:	2b03      	cmp	r3, #3
 8005c48:	f200 80f1 	bhi.w	8005e2e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d123      	bne.n	8005c9c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c56:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f000 fc79 	bl	8006550 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d001      	beq.n	8005c68 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e145      	b.n	8005ef4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	691a      	ldr	r2, [r3, #16]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c72:	b2d2      	uxtb	r2, r2
 8005c74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7a:	1c5a      	adds	r2, r3, #1
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c84:	3b01      	subs	r3, #1
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	3b01      	subs	r3, #1
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005c9a:	e117      	b.n	8005ecc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d14e      	bne.n	8005d42 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005caa:	2200      	movs	r2, #0
 8005cac:	4906      	ldr	r1, [pc, #24]	@ (8005cc8 <HAL_I2C_Mem_Read+0x22c>)
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f000 faa4 	bl	80061fc <I2C_WaitOnFlagUntilTimeout>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d008      	beq.n	8005ccc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e11a      	b.n	8005ef4 <HAL_I2C_Mem_Read+0x458>
 8005cbe:	bf00      	nop
 8005cc0:	00100002 	.word	0x00100002
 8005cc4:	ffff0000 	.word	0xffff0000
 8005cc8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	691a      	ldr	r2, [r3, #16]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce6:	b2d2      	uxtb	r2, r2
 8005ce8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cee:	1c5a      	adds	r2, r3, #1
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	3b01      	subs	r3, #1
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	691a      	ldr	r2, [r3, #16]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d18:	b2d2      	uxtb	r2, r2
 8005d1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d20:	1c5a      	adds	r2, r3, #1
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005d40:	e0c4      	b.n	8005ecc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d44:	9300      	str	r3, [sp, #0]
 8005d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d48:	2200      	movs	r2, #0
 8005d4a:	496c      	ldr	r1, [pc, #432]	@ (8005efc <HAL_I2C_Mem_Read+0x460>)
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f000 fa55 	bl	80061fc <I2C_WaitOnFlagUntilTimeout>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e0cb      	b.n	8005ef4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	691a      	ldr	r2, [r3, #16]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d76:	b2d2      	uxtb	r2, r2
 8005d78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d7e:	1c5a      	adds	r2, r3, #1
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	3b01      	subs	r3, #1
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da0:	9300      	str	r3, [sp, #0]
 8005da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da4:	2200      	movs	r2, #0
 8005da6:	4955      	ldr	r1, [pc, #340]	@ (8005efc <HAL_I2C_Mem_Read+0x460>)
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f000 fa27 	bl	80061fc <I2C_WaitOnFlagUntilTimeout>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d001      	beq.n	8005db8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e09d      	b.n	8005ef4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	691a      	ldr	r2, [r3, #16]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd2:	b2d2      	uxtb	r2, r2
 8005dd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dda:	1c5a      	adds	r2, r3, #1
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005de4:	3b01      	subs	r3, #1
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	3b01      	subs	r3, #1
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	691a      	ldr	r2, [r3, #16]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e04:	b2d2      	uxtb	r2, r2
 8005e06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0c:	1c5a      	adds	r2, r3, #1
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e16:	3b01      	subs	r3, #1
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	3b01      	subs	r3, #1
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005e2c:	e04e      	b.n	8005ecc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e30:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f000 fb8c 	bl	8006550 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e058      	b.n	8005ef4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	691a      	ldr	r2, [r3, #16]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e4c:	b2d2      	uxtb	r2, r2
 8005e4e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e54:	1c5a      	adds	r2, r3, #1
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	f003 0304 	and.w	r3, r3, #4
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	d124      	bne.n	8005ecc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e86:	2b03      	cmp	r3, #3
 8005e88:	d107      	bne.n	8005e9a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e98:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	691a      	ldr	r2, [r3, #16]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea4:	b2d2      	uxtb	r2, r2
 8005ea6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eac:	1c5a      	adds	r2, r3, #1
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f47f aeb6 	bne.w	8005c42 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	e000      	b.n	8005ef4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005ef2:	2302      	movs	r3, #2
  }
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3728      	adds	r7, #40	@ 0x28
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	00010004 	.word	0x00010004

08005f00 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b088      	sub	sp, #32
 8005f04:	af02      	add	r7, sp, #8
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	4608      	mov	r0, r1
 8005f0a:	4611      	mov	r1, r2
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	4603      	mov	r3, r0
 8005f10:	817b      	strh	r3, [r7, #10]
 8005f12:	460b      	mov	r3, r1
 8005f14:	813b      	strh	r3, [r7, #8]
 8005f16:	4613      	mov	r3, r2
 8005f18:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	6a3b      	ldr	r3, [r7, #32]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 f960 	bl	80061fc <I2C_WaitOnFlagUntilTimeout>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00d      	beq.n	8005f5e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f50:	d103      	bne.n	8005f5a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f58:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e05f      	b.n	800601e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f5e:	897b      	ldrh	r3, [r7, #10]
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	461a      	mov	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005f6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f70:	6a3a      	ldr	r2, [r7, #32]
 8005f72:	492d      	ldr	r1, [pc, #180]	@ (8006028 <I2C_RequestMemoryWrite+0x128>)
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f000 f9bb 	bl	80062f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e04c      	b.n	800601e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f84:	2300      	movs	r3, #0
 8005f86:	617b      	str	r3, [r7, #20]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	617b      	str	r3, [r7, #20]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	617b      	str	r3, [r7, #20]
 8005f98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f9c:	6a39      	ldr	r1, [r7, #32]
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f000 fa46 	bl	8006430 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00d      	beq.n	8005fc6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fae:	2b04      	cmp	r3, #4
 8005fb0:	d107      	bne.n	8005fc2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fc0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e02b      	b.n	800601e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005fc6:	88fb      	ldrh	r3, [r7, #6]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d105      	bne.n	8005fd8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fcc:	893b      	ldrh	r3, [r7, #8]
 8005fce:	b2da      	uxtb	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	611a      	str	r2, [r3, #16]
 8005fd6:	e021      	b.n	800601c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005fd8:	893b      	ldrh	r3, [r7, #8]
 8005fda:	0a1b      	lsrs	r3, r3, #8
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	b2da      	uxtb	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fe8:	6a39      	ldr	r1, [r7, #32]
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f000 fa20 	bl	8006430 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00d      	beq.n	8006012 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d107      	bne.n	800600e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800600c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e005      	b.n	800601e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006012:	893b      	ldrh	r3, [r7, #8]
 8006014:	b2da      	uxtb	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3718      	adds	r7, #24
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	00010002 	.word	0x00010002

0800602c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b088      	sub	sp, #32
 8006030:	af02      	add	r7, sp, #8
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	4608      	mov	r0, r1
 8006036:	4611      	mov	r1, r2
 8006038:	461a      	mov	r2, r3
 800603a:	4603      	mov	r3, r0
 800603c:	817b      	strh	r3, [r7, #10]
 800603e:	460b      	mov	r3, r1
 8006040:	813b      	strh	r3, [r7, #8]
 8006042:	4613      	mov	r3, r2
 8006044:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006054:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006064:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006068:	9300      	str	r3, [sp, #0]
 800606a:	6a3b      	ldr	r3, [r7, #32]
 800606c:	2200      	movs	r2, #0
 800606e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f000 f8c2 	bl	80061fc <I2C_WaitOnFlagUntilTimeout>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00d      	beq.n	800609a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006088:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800608c:	d103      	bne.n	8006096 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006094:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e0aa      	b.n	80061f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800609a:	897b      	ldrh	r3, [r7, #10]
 800609c:	b2db      	uxtb	r3, r3
 800609e:	461a      	mov	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80060a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ac:	6a3a      	ldr	r2, [r7, #32]
 80060ae:	4952      	ldr	r1, [pc, #328]	@ (80061f8 <I2C_RequestMemoryRead+0x1cc>)
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 f91d 	bl	80062f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d001      	beq.n	80060c0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e097      	b.n	80061f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060c0:	2300      	movs	r3, #0
 80060c2:	617b      	str	r3, [r7, #20]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	617b      	str	r3, [r7, #20]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	617b      	str	r3, [r7, #20]
 80060d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060d8:	6a39      	ldr	r1, [r7, #32]
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f000 f9a8 	bl	8006430 <I2C_WaitOnTXEFlagUntilTimeout>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00d      	beq.n	8006102 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ea:	2b04      	cmp	r3, #4
 80060ec:	d107      	bne.n	80060fe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e076      	b.n	80061f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006102:	88fb      	ldrh	r3, [r7, #6]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d105      	bne.n	8006114 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006108:	893b      	ldrh	r3, [r7, #8]
 800610a:	b2da      	uxtb	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	611a      	str	r2, [r3, #16]
 8006112:	e021      	b.n	8006158 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006114:	893b      	ldrh	r3, [r7, #8]
 8006116:	0a1b      	lsrs	r3, r3, #8
 8006118:	b29b      	uxth	r3, r3
 800611a:	b2da      	uxtb	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006124:	6a39      	ldr	r1, [r7, #32]
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f000 f982 	bl	8006430 <I2C_WaitOnTXEFlagUntilTimeout>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00d      	beq.n	800614e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006136:	2b04      	cmp	r3, #4
 8006138:	d107      	bne.n	800614a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006148:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e050      	b.n	80061f0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800614e:	893b      	ldrh	r3, [r7, #8]
 8006150:	b2da      	uxtb	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006158:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800615a:	6a39      	ldr	r1, [r7, #32]
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f000 f967 	bl	8006430 <I2C_WaitOnTXEFlagUntilTimeout>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00d      	beq.n	8006184 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800616c:	2b04      	cmp	r3, #4
 800616e:	d107      	bne.n	8006180 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800617e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e035      	b.n	80061f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006192:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006196:	9300      	str	r3, [sp, #0]
 8006198:	6a3b      	ldr	r3, [r7, #32]
 800619a:	2200      	movs	r2, #0
 800619c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f000 f82b 	bl	80061fc <I2C_WaitOnFlagUntilTimeout>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00d      	beq.n	80061c8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061ba:	d103      	bne.n	80061c4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061c2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e013      	b.n	80061f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80061c8:	897b      	ldrh	r3, [r7, #10]
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	f043 0301 	orr.w	r3, r3, #1
 80061d0:	b2da      	uxtb	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061da:	6a3a      	ldr	r2, [r7, #32]
 80061dc:	4906      	ldr	r1, [pc, #24]	@ (80061f8 <I2C_RequestMemoryRead+0x1cc>)
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f000 f886 	bl	80062f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d001      	beq.n	80061ee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e000      	b.n	80061f0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3718      	adds	r7, #24
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	00010002 	.word	0x00010002

080061fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	603b      	str	r3, [r7, #0]
 8006208:	4613      	mov	r3, r2
 800620a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800620c:	e048      	b.n	80062a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006214:	d044      	beq.n	80062a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006216:	f7fd ffa3 	bl	8004160 <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	683a      	ldr	r2, [r7, #0]
 8006222:	429a      	cmp	r2, r3
 8006224:	d302      	bcc.n	800622c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d139      	bne.n	80062a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	0c1b      	lsrs	r3, r3, #16
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b01      	cmp	r3, #1
 8006234:	d10d      	bne.n	8006252 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	695b      	ldr	r3, [r3, #20]
 800623c:	43da      	mvns	r2, r3
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	4013      	ands	r3, r2
 8006242:	b29b      	uxth	r3, r3
 8006244:	2b00      	cmp	r3, #0
 8006246:	bf0c      	ite	eq
 8006248:	2301      	moveq	r3, #1
 800624a:	2300      	movne	r3, #0
 800624c:	b2db      	uxtb	r3, r3
 800624e:	461a      	mov	r2, r3
 8006250:	e00c      	b.n	800626c <I2C_WaitOnFlagUntilTimeout+0x70>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	43da      	mvns	r2, r3
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	4013      	ands	r3, r2
 800625e:	b29b      	uxth	r3, r3
 8006260:	2b00      	cmp	r3, #0
 8006262:	bf0c      	ite	eq
 8006264:	2301      	moveq	r3, #1
 8006266:	2300      	movne	r3, #0
 8006268:	b2db      	uxtb	r3, r3
 800626a:	461a      	mov	r2, r3
 800626c:	79fb      	ldrb	r3, [r7, #7]
 800626e:	429a      	cmp	r2, r3
 8006270:	d116      	bne.n	80062a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2220      	movs	r2, #32
 800627c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800628c:	f043 0220 	orr.w	r2, r3, #32
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e023      	b.n	80062e8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	0c1b      	lsrs	r3, r3, #16
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d10d      	bne.n	80062c6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	43da      	mvns	r2, r3
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	4013      	ands	r3, r2
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	bf0c      	ite	eq
 80062bc:	2301      	moveq	r3, #1
 80062be:	2300      	movne	r3, #0
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	461a      	mov	r2, r3
 80062c4:	e00c      	b.n	80062e0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	43da      	mvns	r2, r3
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	4013      	ands	r3, r2
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	bf0c      	ite	eq
 80062d8:	2301      	moveq	r3, #1
 80062da:	2300      	movne	r3, #0
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	461a      	mov	r2, r3
 80062e0:	79fb      	ldrb	r3, [r7, #7]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d093      	beq.n	800620e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
 80062fc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80062fe:	e071      	b.n	80063e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800630a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800630e:	d123      	bne.n	8006358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800631e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006328:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2220      	movs	r2, #32
 8006334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006344:	f043 0204 	orr.w	r2, r3, #4
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e067      	b.n	8006428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800635e:	d041      	beq.n	80063e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006360:	f7fd fefe 	bl	8004160 <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	429a      	cmp	r2, r3
 800636e:	d302      	bcc.n	8006376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d136      	bne.n	80063e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	0c1b      	lsrs	r3, r3, #16
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b01      	cmp	r3, #1
 800637e:	d10c      	bne.n	800639a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	43da      	mvns	r2, r3
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	4013      	ands	r3, r2
 800638c:	b29b      	uxth	r3, r3
 800638e:	2b00      	cmp	r3, #0
 8006390:	bf14      	ite	ne
 8006392:	2301      	movne	r3, #1
 8006394:	2300      	moveq	r3, #0
 8006396:	b2db      	uxtb	r3, r3
 8006398:	e00b      	b.n	80063b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	699b      	ldr	r3, [r3, #24]
 80063a0:	43da      	mvns	r2, r3
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	4013      	ands	r3, r2
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	bf14      	ite	ne
 80063ac:	2301      	movne	r3, #1
 80063ae:	2300      	moveq	r3, #0
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d016      	beq.n	80063e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2220      	movs	r2, #32
 80063c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d0:	f043 0220 	orr.w	r2, r3, #32
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e021      	b.n	8006428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	0c1b      	lsrs	r3, r3, #16
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d10c      	bne.n	8006408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	43da      	mvns	r2, r3
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	4013      	ands	r3, r2
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	bf14      	ite	ne
 8006400:	2301      	movne	r3, #1
 8006402:	2300      	moveq	r3, #0
 8006404:	b2db      	uxtb	r3, r3
 8006406:	e00b      	b.n	8006420 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	43da      	mvns	r2, r3
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	4013      	ands	r3, r2
 8006414:	b29b      	uxth	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	bf14      	ite	ne
 800641a:	2301      	movne	r3, #1
 800641c:	2300      	moveq	r3, #0
 800641e:	b2db      	uxtb	r3, r3
 8006420:	2b00      	cmp	r3, #0
 8006422:	f47f af6d 	bne.w	8006300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800643c:	e034      	b.n	80064a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f000 f8e3 	bl	800660a <I2C_IsAcknowledgeFailed>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d001      	beq.n	800644e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e034      	b.n	80064b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006454:	d028      	beq.n	80064a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006456:	f7fd fe83 	bl	8004160 <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	429a      	cmp	r2, r3
 8006464:	d302      	bcc.n	800646c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d11d      	bne.n	80064a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006476:	2b80      	cmp	r3, #128	@ 0x80
 8006478:	d016      	beq.n	80064a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2220      	movs	r2, #32
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006494:	f043 0220 	orr.w	r2, r3, #32
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e007      	b.n	80064b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064b2:	2b80      	cmp	r3, #128	@ 0x80
 80064b4:	d1c3      	bne.n	800643e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80064cc:	e034      	b.n	8006538 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 f89b 	bl	800660a <I2C_IsAcknowledgeFailed>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e034      	b.n	8006548 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e4:	d028      	beq.n	8006538 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064e6:	f7fd fe3b 	bl	8004160 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d302      	bcc.n	80064fc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d11d      	bne.n	8006538 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	f003 0304 	and.w	r3, r3, #4
 8006506:	2b04      	cmp	r3, #4
 8006508:	d016      	beq.n	8006538 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2220      	movs	r2, #32
 8006514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006524:	f043 0220 	orr.w	r2, r3, #32
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e007      	b.n	8006548 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	f003 0304 	and.w	r3, r3, #4
 8006542:	2b04      	cmp	r3, #4
 8006544:	d1c3      	bne.n	80064ce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800655c:	e049      	b.n	80065f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	695b      	ldr	r3, [r3, #20]
 8006564:	f003 0310 	and.w	r3, r3, #16
 8006568:	2b10      	cmp	r3, #16
 800656a:	d119      	bne.n	80065a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f06f 0210 	mvn.w	r2, #16
 8006574:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2220      	movs	r2, #32
 8006580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e030      	b.n	8006602 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065a0:	f7fd fdde 	bl	8004160 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d302      	bcc.n	80065b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d11d      	bne.n	80065f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	695b      	ldr	r3, [r3, #20]
 80065bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065c0:	2b40      	cmp	r3, #64	@ 0x40
 80065c2:	d016      	beq.n	80065f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2220      	movs	r2, #32
 80065ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065de:	f043 0220 	orr.w	r2, r3, #32
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e007      	b.n	8006602 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065fc:	2b40      	cmp	r3, #64	@ 0x40
 80065fe:	d1ae      	bne.n	800655e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800660a:	b480      	push	{r7}
 800660c:	b083      	sub	sp, #12
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	695b      	ldr	r3, [r3, #20]
 8006618:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800661c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006620:	d11b      	bne.n	800665a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800662a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2220      	movs	r2, #32
 8006636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006646:	f043 0204 	orr.w	r2, r3, #4
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e000      	b.n	800665c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b086      	sub	sp, #24
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d101      	bne.n	800667a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e267      	b.n	8006b4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b00      	cmp	r3, #0
 8006684:	d075      	beq.n	8006772 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006686:	4b88      	ldr	r3, [pc, #544]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f003 030c 	and.w	r3, r3, #12
 800668e:	2b04      	cmp	r3, #4
 8006690:	d00c      	beq.n	80066ac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006692:	4b85      	ldr	r3, [pc, #532]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800669a:	2b08      	cmp	r3, #8
 800669c:	d112      	bne.n	80066c4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800669e:	4b82      	ldr	r3, [pc, #520]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066aa:	d10b      	bne.n	80066c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066ac:	4b7e      	ldr	r3, [pc, #504]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d05b      	beq.n	8006770 <HAL_RCC_OscConfig+0x108>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d157      	bne.n	8006770 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e242      	b.n	8006b4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066cc:	d106      	bne.n	80066dc <HAL_RCC_OscConfig+0x74>
 80066ce:	4b76      	ldr	r3, [pc, #472]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a75      	ldr	r2, [pc, #468]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 80066d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066d8:	6013      	str	r3, [r2, #0]
 80066da:	e01d      	b.n	8006718 <HAL_RCC_OscConfig+0xb0>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066e4:	d10c      	bne.n	8006700 <HAL_RCC_OscConfig+0x98>
 80066e6:	4b70      	ldr	r3, [pc, #448]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a6f      	ldr	r2, [pc, #444]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 80066ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066f0:	6013      	str	r3, [r2, #0]
 80066f2:	4b6d      	ldr	r3, [pc, #436]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a6c      	ldr	r2, [pc, #432]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 80066f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066fc:	6013      	str	r3, [r2, #0]
 80066fe:	e00b      	b.n	8006718 <HAL_RCC_OscConfig+0xb0>
 8006700:	4b69      	ldr	r3, [pc, #420]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a68      	ldr	r2, [pc, #416]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 8006706:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800670a:	6013      	str	r3, [r2, #0]
 800670c:	4b66      	ldr	r3, [pc, #408]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a65      	ldr	r2, [pc, #404]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 8006712:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006716:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d013      	beq.n	8006748 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006720:	f7fd fd1e 	bl	8004160 <HAL_GetTick>
 8006724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006726:	e008      	b.n	800673a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006728:	f7fd fd1a 	bl	8004160 <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	2b64      	cmp	r3, #100	@ 0x64
 8006734:	d901      	bls.n	800673a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e207      	b.n	8006b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800673a:	4b5b      	ldr	r3, [pc, #364]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006742:	2b00      	cmp	r3, #0
 8006744:	d0f0      	beq.n	8006728 <HAL_RCC_OscConfig+0xc0>
 8006746:	e014      	b.n	8006772 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006748:	f7fd fd0a 	bl	8004160 <HAL_GetTick>
 800674c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800674e:	e008      	b.n	8006762 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006750:	f7fd fd06 	bl	8004160 <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	2b64      	cmp	r3, #100	@ 0x64
 800675c:	d901      	bls.n	8006762 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e1f3      	b.n	8006b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006762:	4b51      	ldr	r3, [pc, #324]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1f0      	bne.n	8006750 <HAL_RCC_OscConfig+0xe8>
 800676e:	e000      	b.n	8006772 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	2b00      	cmp	r3, #0
 800677c:	d063      	beq.n	8006846 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800677e:	4b4a      	ldr	r3, [pc, #296]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f003 030c 	and.w	r3, r3, #12
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00b      	beq.n	80067a2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800678a:	4b47      	ldr	r3, [pc, #284]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006792:	2b08      	cmp	r3, #8
 8006794:	d11c      	bne.n	80067d0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006796:	4b44      	ldr	r3, [pc, #272]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d116      	bne.n	80067d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067a2:	4b41      	ldr	r3, [pc, #260]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d005      	beq.n	80067ba <HAL_RCC_OscConfig+0x152>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d001      	beq.n	80067ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e1c7      	b.n	8006b4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067ba:	4b3b      	ldr	r3, [pc, #236]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	00db      	lsls	r3, r3, #3
 80067c8:	4937      	ldr	r1, [pc, #220]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067ce:	e03a      	b.n	8006846 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d020      	beq.n	800681a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067d8:	4b34      	ldr	r3, [pc, #208]	@ (80068ac <HAL_RCC_OscConfig+0x244>)
 80067da:	2201      	movs	r2, #1
 80067dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067de:	f7fd fcbf 	bl	8004160 <HAL_GetTick>
 80067e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067e4:	e008      	b.n	80067f8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067e6:	f7fd fcbb 	bl	8004160 <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d901      	bls.n	80067f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e1a8      	b.n	8006b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067f8:	4b2b      	ldr	r3, [pc, #172]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0302 	and.w	r3, r3, #2
 8006800:	2b00      	cmp	r3, #0
 8006802:	d0f0      	beq.n	80067e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006804:	4b28      	ldr	r3, [pc, #160]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	00db      	lsls	r3, r3, #3
 8006812:	4925      	ldr	r1, [pc, #148]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 8006814:	4313      	orrs	r3, r2
 8006816:	600b      	str	r3, [r1, #0]
 8006818:	e015      	b.n	8006846 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800681a:	4b24      	ldr	r3, [pc, #144]	@ (80068ac <HAL_RCC_OscConfig+0x244>)
 800681c:	2200      	movs	r2, #0
 800681e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006820:	f7fd fc9e 	bl	8004160 <HAL_GetTick>
 8006824:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006826:	e008      	b.n	800683a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006828:	f7fd fc9a 	bl	8004160 <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	2b02      	cmp	r3, #2
 8006834:	d901      	bls.n	800683a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e187      	b.n	8006b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800683a:	4b1b      	ldr	r3, [pc, #108]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0302 	and.w	r3, r3, #2
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1f0      	bne.n	8006828 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0308 	and.w	r3, r3, #8
 800684e:	2b00      	cmp	r3, #0
 8006850:	d036      	beq.n	80068c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d016      	beq.n	8006888 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800685a:	4b15      	ldr	r3, [pc, #84]	@ (80068b0 <HAL_RCC_OscConfig+0x248>)
 800685c:	2201      	movs	r2, #1
 800685e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006860:	f7fd fc7e 	bl	8004160 <HAL_GetTick>
 8006864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006866:	e008      	b.n	800687a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006868:	f7fd fc7a 	bl	8004160 <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	2b02      	cmp	r3, #2
 8006874:	d901      	bls.n	800687a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e167      	b.n	8006b4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800687a:	4b0b      	ldr	r3, [pc, #44]	@ (80068a8 <HAL_RCC_OscConfig+0x240>)
 800687c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800687e:	f003 0302 	and.w	r3, r3, #2
 8006882:	2b00      	cmp	r3, #0
 8006884:	d0f0      	beq.n	8006868 <HAL_RCC_OscConfig+0x200>
 8006886:	e01b      	b.n	80068c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006888:	4b09      	ldr	r3, [pc, #36]	@ (80068b0 <HAL_RCC_OscConfig+0x248>)
 800688a:	2200      	movs	r2, #0
 800688c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800688e:	f7fd fc67 	bl	8004160 <HAL_GetTick>
 8006892:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006894:	e00e      	b.n	80068b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006896:	f7fd fc63 	bl	8004160 <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d907      	bls.n	80068b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e150      	b.n	8006b4a <HAL_RCC_OscConfig+0x4e2>
 80068a8:	40023800 	.word	0x40023800
 80068ac:	42470000 	.word	0x42470000
 80068b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068b4:	4b88      	ldr	r3, [pc, #544]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 80068b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068b8:	f003 0302 	and.w	r3, r3, #2
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1ea      	bne.n	8006896 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0304 	and.w	r3, r3, #4
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f000 8097 	beq.w	80069fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068ce:	2300      	movs	r3, #0
 80068d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068d2:	4b81      	ldr	r3, [pc, #516]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 80068d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10f      	bne.n	80068fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068de:	2300      	movs	r3, #0
 80068e0:	60bb      	str	r3, [r7, #8]
 80068e2:	4b7d      	ldr	r3, [pc, #500]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 80068e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e6:	4a7c      	ldr	r2, [pc, #496]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 80068e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80068ee:	4b7a      	ldr	r3, [pc, #488]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 80068f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068f6:	60bb      	str	r3, [r7, #8]
 80068f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068fa:	2301      	movs	r3, #1
 80068fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068fe:	4b77      	ldr	r3, [pc, #476]	@ (8006adc <HAL_RCC_OscConfig+0x474>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006906:	2b00      	cmp	r3, #0
 8006908:	d118      	bne.n	800693c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800690a:	4b74      	ldr	r3, [pc, #464]	@ (8006adc <HAL_RCC_OscConfig+0x474>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a73      	ldr	r2, [pc, #460]	@ (8006adc <HAL_RCC_OscConfig+0x474>)
 8006910:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006914:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006916:	f7fd fc23 	bl	8004160 <HAL_GetTick>
 800691a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800691c:	e008      	b.n	8006930 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800691e:	f7fd fc1f 	bl	8004160 <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	2b02      	cmp	r3, #2
 800692a:	d901      	bls.n	8006930 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e10c      	b.n	8006b4a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006930:	4b6a      	ldr	r3, [pc, #424]	@ (8006adc <HAL_RCC_OscConfig+0x474>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006938:	2b00      	cmp	r3, #0
 800693a:	d0f0      	beq.n	800691e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d106      	bne.n	8006952 <HAL_RCC_OscConfig+0x2ea>
 8006944:	4b64      	ldr	r3, [pc, #400]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 8006946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006948:	4a63      	ldr	r2, [pc, #396]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 800694a:	f043 0301 	orr.w	r3, r3, #1
 800694e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006950:	e01c      	b.n	800698c <HAL_RCC_OscConfig+0x324>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	2b05      	cmp	r3, #5
 8006958:	d10c      	bne.n	8006974 <HAL_RCC_OscConfig+0x30c>
 800695a:	4b5f      	ldr	r3, [pc, #380]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 800695c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800695e:	4a5e      	ldr	r2, [pc, #376]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 8006960:	f043 0304 	orr.w	r3, r3, #4
 8006964:	6713      	str	r3, [r2, #112]	@ 0x70
 8006966:	4b5c      	ldr	r3, [pc, #368]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 8006968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800696a:	4a5b      	ldr	r2, [pc, #364]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 800696c:	f043 0301 	orr.w	r3, r3, #1
 8006970:	6713      	str	r3, [r2, #112]	@ 0x70
 8006972:	e00b      	b.n	800698c <HAL_RCC_OscConfig+0x324>
 8006974:	4b58      	ldr	r3, [pc, #352]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 8006976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006978:	4a57      	ldr	r2, [pc, #348]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 800697a:	f023 0301 	bic.w	r3, r3, #1
 800697e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006980:	4b55      	ldr	r3, [pc, #340]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 8006982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006984:	4a54      	ldr	r2, [pc, #336]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 8006986:	f023 0304 	bic.w	r3, r3, #4
 800698a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d015      	beq.n	80069c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006994:	f7fd fbe4 	bl	8004160 <HAL_GetTick>
 8006998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800699a:	e00a      	b.n	80069b2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800699c:	f7fd fbe0 	bl	8004160 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e0cb      	b.n	8006b4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069b2:	4b49      	ldr	r3, [pc, #292]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 80069b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069b6:	f003 0302 	and.w	r3, r3, #2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d0ee      	beq.n	800699c <HAL_RCC_OscConfig+0x334>
 80069be:	e014      	b.n	80069ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069c0:	f7fd fbce 	bl	8004160 <HAL_GetTick>
 80069c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069c6:	e00a      	b.n	80069de <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069c8:	f7fd fbca 	bl	8004160 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d901      	bls.n	80069de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e0b5      	b.n	8006b4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069de:	4b3e      	ldr	r3, [pc, #248]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 80069e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1ee      	bne.n	80069c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80069ea:	7dfb      	ldrb	r3, [r7, #23]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d105      	bne.n	80069fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069f0:	4b39      	ldr	r3, [pc, #228]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 80069f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f4:	4a38      	ldr	r2, [pc, #224]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 80069f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 80a1 	beq.w	8006b48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a06:	4b34      	ldr	r3, [pc, #208]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f003 030c 	and.w	r3, r3, #12
 8006a0e:	2b08      	cmp	r3, #8
 8006a10:	d05c      	beq.n	8006acc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d141      	bne.n	8006a9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a1a:	4b31      	ldr	r3, [pc, #196]	@ (8006ae0 <HAL_RCC_OscConfig+0x478>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a20:	f7fd fb9e 	bl	8004160 <HAL_GetTick>
 8006a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a26:	e008      	b.n	8006a3a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a28:	f7fd fb9a 	bl	8004160 <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d901      	bls.n	8006a3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e087      	b.n	8006b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a3a:	4b27      	ldr	r3, [pc, #156]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1f0      	bne.n	8006a28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	69da      	ldr	r2, [r3, #28]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	431a      	orrs	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a54:	019b      	lsls	r3, r3, #6
 8006a56:	431a      	orrs	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a5c:	085b      	lsrs	r3, r3, #1
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	041b      	lsls	r3, r3, #16
 8006a62:	431a      	orrs	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a68:	061b      	lsls	r3, r3, #24
 8006a6a:	491b      	ldr	r1, [pc, #108]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a70:	4b1b      	ldr	r3, [pc, #108]	@ (8006ae0 <HAL_RCC_OscConfig+0x478>)
 8006a72:	2201      	movs	r2, #1
 8006a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a76:	f7fd fb73 	bl	8004160 <HAL_GetTick>
 8006a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a7c:	e008      	b.n	8006a90 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a7e:	f7fd fb6f 	bl	8004160 <HAL_GetTick>
 8006a82:	4602      	mov	r2, r0
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d901      	bls.n	8006a90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e05c      	b.n	8006b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a90:	4b11      	ldr	r3, [pc, #68]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d0f0      	beq.n	8006a7e <HAL_RCC_OscConfig+0x416>
 8006a9c:	e054      	b.n	8006b48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a9e:	4b10      	ldr	r3, [pc, #64]	@ (8006ae0 <HAL_RCC_OscConfig+0x478>)
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aa4:	f7fd fb5c 	bl	8004160 <HAL_GetTick>
 8006aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aaa:	e008      	b.n	8006abe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006aac:	f7fd fb58 	bl	8004160 <HAL_GetTick>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d901      	bls.n	8006abe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e045      	b.n	8006b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006abe:	4b06      	ldr	r3, [pc, #24]	@ (8006ad8 <HAL_RCC_OscConfig+0x470>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1f0      	bne.n	8006aac <HAL_RCC_OscConfig+0x444>
 8006aca:	e03d      	b.n	8006b48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d107      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e038      	b.n	8006b4a <HAL_RCC_OscConfig+0x4e2>
 8006ad8:	40023800 	.word	0x40023800
 8006adc:	40007000 	.word	0x40007000
 8006ae0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8006b54 <HAL_RCC_OscConfig+0x4ec>)
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d028      	beq.n	8006b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d121      	bne.n	8006b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d11a      	bne.n	8006b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006b14:	4013      	ands	r3, r2
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006b1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d111      	bne.n	8006b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b2a:	085b      	lsrs	r3, r3, #1
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d107      	bne.n	8006b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d001      	beq.n	8006b48 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e000      	b.n	8006b4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3718      	adds	r7, #24
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	40023800 	.word	0x40023800

08006b58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d101      	bne.n	8006b6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e0cc      	b.n	8006d06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b6c:	4b68      	ldr	r3, [pc, #416]	@ (8006d10 <HAL_RCC_ClockConfig+0x1b8>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 0307 	and.w	r3, r3, #7
 8006b74:	683a      	ldr	r2, [r7, #0]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d90c      	bls.n	8006b94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b7a:	4b65      	ldr	r3, [pc, #404]	@ (8006d10 <HAL_RCC_ClockConfig+0x1b8>)
 8006b7c:	683a      	ldr	r2, [r7, #0]
 8006b7e:	b2d2      	uxtb	r2, r2
 8006b80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b82:	4b63      	ldr	r3, [pc, #396]	@ (8006d10 <HAL_RCC_ClockConfig+0x1b8>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0307 	and.w	r3, r3, #7
 8006b8a:	683a      	ldr	r2, [r7, #0]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d001      	beq.n	8006b94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e0b8      	b.n	8006d06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 0302 	and.w	r3, r3, #2
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d020      	beq.n	8006be2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0304 	and.w	r3, r3, #4
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d005      	beq.n	8006bb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006bac:	4b59      	ldr	r3, [pc, #356]	@ (8006d14 <HAL_RCC_ClockConfig+0x1bc>)
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	4a58      	ldr	r2, [pc, #352]	@ (8006d14 <HAL_RCC_ClockConfig+0x1bc>)
 8006bb2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006bb6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 0308 	and.w	r3, r3, #8
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d005      	beq.n	8006bd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006bc4:	4b53      	ldr	r3, [pc, #332]	@ (8006d14 <HAL_RCC_ClockConfig+0x1bc>)
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	4a52      	ldr	r2, [pc, #328]	@ (8006d14 <HAL_RCC_ClockConfig+0x1bc>)
 8006bca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006bce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bd0:	4b50      	ldr	r3, [pc, #320]	@ (8006d14 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	494d      	ldr	r1, [pc, #308]	@ (8006d14 <HAL_RCC_ClockConfig+0x1bc>)
 8006bde:	4313      	orrs	r3, r2
 8006be0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0301 	and.w	r3, r3, #1
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d044      	beq.n	8006c78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d107      	bne.n	8006c06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bf6:	4b47      	ldr	r3, [pc, #284]	@ (8006d14 <HAL_RCC_ClockConfig+0x1bc>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d119      	bne.n	8006c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e07f      	b.n	8006d06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	d003      	beq.n	8006c16 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c12:	2b03      	cmp	r3, #3
 8006c14:	d107      	bne.n	8006c26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c16:	4b3f      	ldr	r3, [pc, #252]	@ (8006d14 <HAL_RCC_ClockConfig+0x1bc>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d109      	bne.n	8006c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e06f      	b.n	8006d06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c26:	4b3b      	ldr	r3, [pc, #236]	@ (8006d14 <HAL_RCC_ClockConfig+0x1bc>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0302 	and.w	r3, r3, #2
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e067      	b.n	8006d06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c36:	4b37      	ldr	r3, [pc, #220]	@ (8006d14 <HAL_RCC_ClockConfig+0x1bc>)
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f023 0203 	bic.w	r2, r3, #3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	4934      	ldr	r1, [pc, #208]	@ (8006d14 <HAL_RCC_ClockConfig+0x1bc>)
 8006c44:	4313      	orrs	r3, r2
 8006c46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c48:	f7fd fa8a 	bl	8004160 <HAL_GetTick>
 8006c4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c4e:	e00a      	b.n	8006c66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c50:	f7fd fa86 	bl	8004160 <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d901      	bls.n	8006c66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e04f      	b.n	8006d06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c66:	4b2b      	ldr	r3, [pc, #172]	@ (8006d14 <HAL_RCC_ClockConfig+0x1bc>)
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	f003 020c 	and.w	r2, r3, #12
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d1eb      	bne.n	8006c50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c78:	4b25      	ldr	r3, [pc, #148]	@ (8006d10 <HAL_RCC_ClockConfig+0x1b8>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0307 	and.w	r3, r3, #7
 8006c80:	683a      	ldr	r2, [r7, #0]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d20c      	bcs.n	8006ca0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c86:	4b22      	ldr	r3, [pc, #136]	@ (8006d10 <HAL_RCC_ClockConfig+0x1b8>)
 8006c88:	683a      	ldr	r2, [r7, #0]
 8006c8a:	b2d2      	uxtb	r2, r2
 8006c8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c8e:	4b20      	ldr	r3, [pc, #128]	@ (8006d10 <HAL_RCC_ClockConfig+0x1b8>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0307 	and.w	r3, r3, #7
 8006c96:	683a      	ldr	r2, [r7, #0]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d001      	beq.n	8006ca0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e032      	b.n	8006d06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0304 	and.w	r3, r3, #4
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d008      	beq.n	8006cbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cac:	4b19      	ldr	r3, [pc, #100]	@ (8006d14 <HAL_RCC_ClockConfig+0x1bc>)
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	4916      	ldr	r1, [pc, #88]	@ (8006d14 <HAL_RCC_ClockConfig+0x1bc>)
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0308 	and.w	r3, r3, #8
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d009      	beq.n	8006cde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cca:	4b12      	ldr	r3, [pc, #72]	@ (8006d14 <HAL_RCC_ClockConfig+0x1bc>)
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	00db      	lsls	r3, r3, #3
 8006cd8:	490e      	ldr	r1, [pc, #56]	@ (8006d14 <HAL_RCC_ClockConfig+0x1bc>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006cde:	f000 f821 	bl	8006d24 <HAL_RCC_GetSysClockFreq>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8006d14 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	091b      	lsrs	r3, r3, #4
 8006cea:	f003 030f 	and.w	r3, r3, #15
 8006cee:	490a      	ldr	r1, [pc, #40]	@ (8006d18 <HAL_RCC_ClockConfig+0x1c0>)
 8006cf0:	5ccb      	ldrb	r3, [r1, r3]
 8006cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8006cf6:	4a09      	ldr	r2, [pc, #36]	@ (8006d1c <HAL_RCC_ClockConfig+0x1c4>)
 8006cf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006cfa:	4b09      	ldr	r3, [pc, #36]	@ (8006d20 <HAL_RCC_ClockConfig+0x1c8>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7fd f9ea 	bl	80040d8 <HAL_InitTick>

  return HAL_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	40023c00 	.word	0x40023c00
 8006d14:	40023800 	.word	0x40023800
 8006d18:	0800ae0c 	.word	0x0800ae0c
 8006d1c:	20000000 	.word	0x20000000
 8006d20:	20000004 	.word	0x20000004

08006d24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d28:	b094      	sub	sp, #80	@ 0x50
 8006d2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006d30:	2300      	movs	r3, #0
 8006d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006d34:	2300      	movs	r3, #0
 8006d36:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d3c:	4b79      	ldr	r3, [pc, #484]	@ (8006f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	f003 030c 	and.w	r3, r3, #12
 8006d44:	2b08      	cmp	r3, #8
 8006d46:	d00d      	beq.n	8006d64 <HAL_RCC_GetSysClockFreq+0x40>
 8006d48:	2b08      	cmp	r3, #8
 8006d4a:	f200 80e1 	bhi.w	8006f10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <HAL_RCC_GetSysClockFreq+0x34>
 8006d52:	2b04      	cmp	r3, #4
 8006d54:	d003      	beq.n	8006d5e <HAL_RCC_GetSysClockFreq+0x3a>
 8006d56:	e0db      	b.n	8006f10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d58:	4b73      	ldr	r3, [pc, #460]	@ (8006f28 <HAL_RCC_GetSysClockFreq+0x204>)
 8006d5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d5c:	e0db      	b.n	8006f16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d5e:	4b73      	ldr	r3, [pc, #460]	@ (8006f2c <HAL_RCC_GetSysClockFreq+0x208>)
 8006d60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d62:	e0d8      	b.n	8006f16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d64:	4b6f      	ldr	r3, [pc, #444]	@ (8006f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d6c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d6e:	4b6d      	ldr	r3, [pc, #436]	@ (8006f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d063      	beq.n	8006e42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d7a:	4b6a      	ldr	r3, [pc, #424]	@ (8006f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	099b      	lsrs	r3, r3, #6
 8006d80:	2200      	movs	r2, #0
 8006d82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d84:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d8e:	2300      	movs	r3, #0
 8006d90:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006d96:	4622      	mov	r2, r4
 8006d98:	462b      	mov	r3, r5
 8006d9a:	f04f 0000 	mov.w	r0, #0
 8006d9e:	f04f 0100 	mov.w	r1, #0
 8006da2:	0159      	lsls	r1, r3, #5
 8006da4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006da8:	0150      	lsls	r0, r2, #5
 8006daa:	4602      	mov	r2, r0
 8006dac:	460b      	mov	r3, r1
 8006dae:	4621      	mov	r1, r4
 8006db0:	1a51      	subs	r1, r2, r1
 8006db2:	6139      	str	r1, [r7, #16]
 8006db4:	4629      	mov	r1, r5
 8006db6:	eb63 0301 	sbc.w	r3, r3, r1
 8006dba:	617b      	str	r3, [r7, #20]
 8006dbc:	f04f 0200 	mov.w	r2, #0
 8006dc0:	f04f 0300 	mov.w	r3, #0
 8006dc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006dc8:	4659      	mov	r1, fp
 8006dca:	018b      	lsls	r3, r1, #6
 8006dcc:	4651      	mov	r1, sl
 8006dce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006dd2:	4651      	mov	r1, sl
 8006dd4:	018a      	lsls	r2, r1, #6
 8006dd6:	4651      	mov	r1, sl
 8006dd8:	ebb2 0801 	subs.w	r8, r2, r1
 8006ddc:	4659      	mov	r1, fp
 8006dde:	eb63 0901 	sbc.w	r9, r3, r1
 8006de2:	f04f 0200 	mov.w	r2, #0
 8006de6:	f04f 0300 	mov.w	r3, #0
 8006dea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006dee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006df2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006df6:	4690      	mov	r8, r2
 8006df8:	4699      	mov	r9, r3
 8006dfa:	4623      	mov	r3, r4
 8006dfc:	eb18 0303 	adds.w	r3, r8, r3
 8006e00:	60bb      	str	r3, [r7, #8]
 8006e02:	462b      	mov	r3, r5
 8006e04:	eb49 0303 	adc.w	r3, r9, r3
 8006e08:	60fb      	str	r3, [r7, #12]
 8006e0a:	f04f 0200 	mov.w	r2, #0
 8006e0e:	f04f 0300 	mov.w	r3, #0
 8006e12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006e16:	4629      	mov	r1, r5
 8006e18:	024b      	lsls	r3, r1, #9
 8006e1a:	4621      	mov	r1, r4
 8006e1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006e20:	4621      	mov	r1, r4
 8006e22:	024a      	lsls	r2, r1, #9
 8006e24:	4610      	mov	r0, r2
 8006e26:	4619      	mov	r1, r3
 8006e28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006e34:	f7f9 feb8 	bl	8000ba8 <__aeabi_uldivmod>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e40:	e058      	b.n	8006ef4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e42:	4b38      	ldr	r3, [pc, #224]	@ (8006f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	099b      	lsrs	r3, r3, #6
 8006e48:	2200      	movs	r2, #0
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	4611      	mov	r1, r2
 8006e4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006e52:	623b      	str	r3, [r7, #32]
 8006e54:	2300      	movs	r3, #0
 8006e56:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006e5c:	4642      	mov	r2, r8
 8006e5e:	464b      	mov	r3, r9
 8006e60:	f04f 0000 	mov.w	r0, #0
 8006e64:	f04f 0100 	mov.w	r1, #0
 8006e68:	0159      	lsls	r1, r3, #5
 8006e6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e6e:	0150      	lsls	r0, r2, #5
 8006e70:	4602      	mov	r2, r0
 8006e72:	460b      	mov	r3, r1
 8006e74:	4641      	mov	r1, r8
 8006e76:	ebb2 0a01 	subs.w	sl, r2, r1
 8006e7a:	4649      	mov	r1, r9
 8006e7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006e80:	f04f 0200 	mov.w	r2, #0
 8006e84:	f04f 0300 	mov.w	r3, #0
 8006e88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006e8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006e90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006e94:	ebb2 040a 	subs.w	r4, r2, sl
 8006e98:	eb63 050b 	sbc.w	r5, r3, fp
 8006e9c:	f04f 0200 	mov.w	r2, #0
 8006ea0:	f04f 0300 	mov.w	r3, #0
 8006ea4:	00eb      	lsls	r3, r5, #3
 8006ea6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006eaa:	00e2      	lsls	r2, r4, #3
 8006eac:	4614      	mov	r4, r2
 8006eae:	461d      	mov	r5, r3
 8006eb0:	4643      	mov	r3, r8
 8006eb2:	18e3      	adds	r3, r4, r3
 8006eb4:	603b      	str	r3, [r7, #0]
 8006eb6:	464b      	mov	r3, r9
 8006eb8:	eb45 0303 	adc.w	r3, r5, r3
 8006ebc:	607b      	str	r3, [r7, #4]
 8006ebe:	f04f 0200 	mov.w	r2, #0
 8006ec2:	f04f 0300 	mov.w	r3, #0
 8006ec6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006eca:	4629      	mov	r1, r5
 8006ecc:	028b      	lsls	r3, r1, #10
 8006ece:	4621      	mov	r1, r4
 8006ed0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ed4:	4621      	mov	r1, r4
 8006ed6:	028a      	lsls	r2, r1, #10
 8006ed8:	4610      	mov	r0, r2
 8006eda:	4619      	mov	r1, r3
 8006edc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ede:	2200      	movs	r2, #0
 8006ee0:	61bb      	str	r3, [r7, #24]
 8006ee2:	61fa      	str	r2, [r7, #28]
 8006ee4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ee8:	f7f9 fe5e 	bl	8000ba8 <__aeabi_uldivmod>
 8006eec:	4602      	mov	r2, r0
 8006eee:	460b      	mov	r3, r1
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8006f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	0c1b      	lsrs	r3, r3, #16
 8006efa:	f003 0303 	and.w	r3, r3, #3
 8006efe:	3301      	adds	r3, #1
 8006f00:	005b      	lsls	r3, r3, #1
 8006f02:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006f04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006f0e:	e002      	b.n	8006f16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f10:	4b05      	ldr	r3, [pc, #20]	@ (8006f28 <HAL_RCC_GetSysClockFreq+0x204>)
 8006f12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006f14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3750      	adds	r7, #80	@ 0x50
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f22:	bf00      	nop
 8006f24:	40023800 	.word	0x40023800
 8006f28:	00f42400 	.word	0x00f42400
 8006f2c:	007a1200 	.word	0x007a1200

08006f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f30:	b480      	push	{r7}
 8006f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f34:	4b03      	ldr	r3, [pc, #12]	@ (8006f44 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f36:	681b      	ldr	r3, [r3, #0]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	20000000 	.word	0x20000000

08006f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f4c:	f7ff fff0 	bl	8006f30 <HAL_RCC_GetHCLKFreq>
 8006f50:	4602      	mov	r2, r0
 8006f52:	4b05      	ldr	r3, [pc, #20]	@ (8006f68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	0a9b      	lsrs	r3, r3, #10
 8006f58:	f003 0307 	and.w	r3, r3, #7
 8006f5c:	4903      	ldr	r1, [pc, #12]	@ (8006f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f5e:	5ccb      	ldrb	r3, [r1, r3]
 8006f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	40023800 	.word	0x40023800
 8006f6c:	0800ae1c 	.word	0x0800ae1c

08006f70 <LL_GPIO_SetPinMode>:
{
 8006f70:	b480      	push	{r7}
 8006f72:	b08b      	sub	sp, #44	@ 0x2c
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	fa93 f3a3 	rbit	r3, r3
 8006f8a:	613b      	str	r3, [r7, #16]
  return result;
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8006f96:	2320      	movs	r3, #32
 8006f98:	e003      	b.n	8006fa2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	fab3 f383 	clz	r3, r3
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	005b      	lsls	r3, r3, #1
 8006fa4:	2103      	movs	r1, #3
 8006fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8006faa:	43db      	mvns	r3, r3
 8006fac:	401a      	ands	r2, r3
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fb2:	6a3b      	ldr	r3, [r7, #32]
 8006fb4:	fa93 f3a3 	rbit	r3, r3
 8006fb8:	61fb      	str	r3, [r7, #28]
  return result;
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d101      	bne.n	8006fc8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006fc4:	2320      	movs	r3, #32
 8006fc6:	e003      	b.n	8006fd0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fca:	fab3 f383 	clz	r3, r3
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	005b      	lsls	r3, r3, #1
 8006fd2:	6879      	ldr	r1, [r7, #4]
 8006fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8006fd8:	431a      	orrs	r2, r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	601a      	str	r2, [r3, #0]
}
 8006fde:	bf00      	nop
 8006fe0:	372c      	adds	r7, #44	@ 0x2c
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr

08006fea <LL_GPIO_SetPinOutputType>:
{
 8006fea:	b480      	push	{r7}
 8006fec:	b085      	sub	sp, #20
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	60f8      	str	r0, [r7, #12]
 8006ff2:	60b9      	str	r1, [r7, #8]
 8006ff4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	685a      	ldr	r2, [r3, #4]
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	43db      	mvns	r3, r3
 8006ffe:	401a      	ands	r2, r3
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	6879      	ldr	r1, [r7, #4]
 8007004:	fb01 f303 	mul.w	r3, r1, r3
 8007008:	431a      	orrs	r2, r3
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	605a      	str	r2, [r3, #4]
}
 800700e:	bf00      	nop
 8007010:	3714      	adds	r7, #20
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr

0800701a <LL_GPIO_SetPinSpeed>:
{
 800701a:	b480      	push	{r7}
 800701c:	b08b      	sub	sp, #44	@ 0x2c
 800701e:	af00      	add	r7, sp, #0
 8007020:	60f8      	str	r0, [r7, #12]
 8007022:	60b9      	str	r1, [r7, #8]
 8007024:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	689a      	ldr	r2, [r3, #8]
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	fa93 f3a3 	rbit	r3, r3
 8007034:	613b      	str	r3, [r7, #16]
  return result;
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d101      	bne.n	8007044 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8007040:	2320      	movs	r3, #32
 8007042:	e003      	b.n	800704c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	fab3 f383 	clz	r3, r3
 800704a:	b2db      	uxtb	r3, r3
 800704c:	005b      	lsls	r3, r3, #1
 800704e:	2103      	movs	r1, #3
 8007050:	fa01 f303 	lsl.w	r3, r1, r3
 8007054:	43db      	mvns	r3, r3
 8007056:	401a      	ands	r2, r3
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800705c:	6a3b      	ldr	r3, [r7, #32]
 800705e:	fa93 f3a3 	rbit	r3, r3
 8007062:	61fb      	str	r3, [r7, #28]
  return result;
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706a:	2b00      	cmp	r3, #0
 800706c:	d101      	bne.n	8007072 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800706e:	2320      	movs	r3, #32
 8007070:	e003      	b.n	800707a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8007072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007074:	fab3 f383 	clz	r3, r3
 8007078:	b2db      	uxtb	r3, r3
 800707a:	005b      	lsls	r3, r3, #1
 800707c:	6879      	ldr	r1, [r7, #4]
 800707e:	fa01 f303 	lsl.w	r3, r1, r3
 8007082:	431a      	orrs	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	609a      	str	r2, [r3, #8]
}
 8007088:	bf00      	nop
 800708a:	372c      	adds	r7, #44	@ 0x2c
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <LL_GPIO_SetPinPull>:
{
 8007094:	b480      	push	{r7}
 8007096:	b08b      	sub	sp, #44	@ 0x2c
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	68da      	ldr	r2, [r3, #12]
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	fa93 f3a3 	rbit	r3, r3
 80070ae:	613b      	str	r3, [r7, #16]
  return result;
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80070ba:	2320      	movs	r3, #32
 80070bc:	e003      	b.n	80070c6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	fab3 f383 	clz	r3, r3
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	005b      	lsls	r3, r3, #1
 80070c8:	2103      	movs	r1, #3
 80070ca:	fa01 f303 	lsl.w	r3, r1, r3
 80070ce:	43db      	mvns	r3, r3
 80070d0:	401a      	ands	r2, r3
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070d6:	6a3b      	ldr	r3, [r7, #32]
 80070d8:	fa93 f3a3 	rbit	r3, r3
 80070dc:	61fb      	str	r3, [r7, #28]
  return result;
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80070e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d101      	bne.n	80070ec <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80070e8:	2320      	movs	r3, #32
 80070ea:	e003      	b.n	80070f4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80070ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ee:	fab3 f383 	clz	r3, r3
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	005b      	lsls	r3, r3, #1
 80070f6:	6879      	ldr	r1, [r7, #4]
 80070f8:	fa01 f303 	lsl.w	r3, r1, r3
 80070fc:	431a      	orrs	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	60da      	str	r2, [r3, #12]
}
 8007102:	bf00      	nop
 8007104:	372c      	adds	r7, #44	@ 0x2c
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr

0800710e <LL_GPIO_SetAFPin_0_7>:
{
 800710e:	b480      	push	{r7}
 8007110:	b08b      	sub	sp, #44	@ 0x2c
 8007112:	af00      	add	r7, sp, #0
 8007114:	60f8      	str	r0, [r7, #12]
 8007116:	60b9      	str	r1, [r7, #8]
 8007118:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6a1a      	ldr	r2, [r3, #32]
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	fa93 f3a3 	rbit	r3, r3
 8007128:	613b      	str	r3, [r7, #16]
  return result;
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d101      	bne.n	8007138 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8007134:	2320      	movs	r3, #32
 8007136:	e003      	b.n	8007140 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	fab3 f383 	clz	r3, r3
 800713e:	b2db      	uxtb	r3, r3
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	210f      	movs	r1, #15
 8007144:	fa01 f303 	lsl.w	r3, r1, r3
 8007148:	43db      	mvns	r3, r3
 800714a:	401a      	ands	r2, r3
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007150:	6a3b      	ldr	r3, [r7, #32]
 8007152:	fa93 f3a3 	rbit	r3, r3
 8007156:	61fb      	str	r3, [r7, #28]
  return result;
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800715c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715e:	2b00      	cmp	r3, #0
 8007160:	d101      	bne.n	8007166 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8007162:	2320      	movs	r3, #32
 8007164:	e003      	b.n	800716e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8007166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007168:	fab3 f383 	clz	r3, r3
 800716c:	b2db      	uxtb	r3, r3
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	6879      	ldr	r1, [r7, #4]
 8007172:	fa01 f303 	lsl.w	r3, r1, r3
 8007176:	431a      	orrs	r2, r3
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	621a      	str	r2, [r3, #32]
}
 800717c:	bf00      	nop
 800717e:	372c      	adds	r7, #44	@ 0x2c
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <LL_GPIO_SetAFPin_8_15>:
{
 8007188:	b480      	push	{r7}
 800718a:	b08b      	sub	sp, #44	@ 0x2c
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	0a1b      	lsrs	r3, r3, #8
 800719c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	fa93 f3a3 	rbit	r3, r3
 80071a4:	613b      	str	r3, [r7, #16]
  return result;
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d101      	bne.n	80071b4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80071b0:	2320      	movs	r3, #32
 80071b2:	e003      	b.n	80071bc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	fab3 f383 	clz	r3, r3
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	210f      	movs	r1, #15
 80071c0:	fa01 f303 	lsl.w	r3, r1, r3
 80071c4:	43db      	mvns	r3, r3
 80071c6:	401a      	ands	r2, r3
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	0a1b      	lsrs	r3, r3, #8
 80071cc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071ce:	6a3b      	ldr	r3, [r7, #32]
 80071d0:	fa93 f3a3 	rbit	r3, r3
 80071d4:	61fb      	str	r3, [r7, #28]
  return result;
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80071da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d101      	bne.n	80071e4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80071e0:	2320      	movs	r3, #32
 80071e2:	e003      	b.n	80071ec <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80071e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e6:	fab3 f383 	clz	r3, r3
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	6879      	ldr	r1, [r7, #4]
 80071f0:	fa01 f303 	lsl.w	r3, r1, r3
 80071f4:	431a      	orrs	r2, r3
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80071fa:	bf00      	nop
 80071fc:	372c      	adds	r7, #44	@ 0x2c
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b08a      	sub	sp, #40	@ 0x28
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
 800720e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8007210:	2300      	movs	r3, #0
 8007212:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8007214:	2300      	movs	r3, #0
 8007216:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	fa93 f3a3 	rbit	r3, r3
 8007224:	617b      	str	r3, [r7, #20]
  return result;
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d101      	bne.n	8007234 <LL_GPIO_Init+0x2e>
    return 32U;
 8007230:	2320      	movs	r3, #32
 8007232:	e003      	b.n	800723c <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	fab3 f383 	clz	r3, r3
 800723a:	b2db      	uxtb	r3, r3
 800723c:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800723e:	e057      	b.n	80072f0 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	2101      	movs	r1, #1
 8007246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007248:	fa01 f303 	lsl.w	r3, r1, r3
 800724c:	4013      	ands	r3, r2
 800724e:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8007250:	6a3b      	ldr	r3, [r7, #32]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d049      	beq.n	80072ea <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	2b01      	cmp	r3, #1
 800725c:	d003      	beq.n	8007266 <LL_GPIO_Init+0x60>
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	2b02      	cmp	r3, #2
 8007264:	d10d      	bne.n	8007282 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	461a      	mov	r2, r3
 800726c:	6a39      	ldr	r1, [r7, #32]
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f7ff fed3 	bl	800701a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	461a      	mov	r2, r3
 800727a:	6a39      	ldr	r1, [r7, #32]
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f7ff feb4 	bl	8006fea <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	461a      	mov	r2, r3
 8007288:	6a39      	ldr	r1, [r7, #32]
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f7ff ff02 	bl	8007094 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	2b02      	cmp	r3, #2
 8007296:	d121      	bne.n	80072dc <LL_GPIO_Init+0xd6>
 8007298:	6a3b      	ldr	r3, [r7, #32]
 800729a:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	fa93 f3a3 	rbit	r3, r3
 80072a2:	60bb      	str	r3, [r7, #8]
  return result;
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d101      	bne.n	80072b2 <LL_GPIO_Init+0xac>
    return 32U;
 80072ae:	2320      	movs	r3, #32
 80072b0:	e003      	b.n	80072ba <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	fab3 f383 	clz	r3, r3
 80072b8:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80072ba:	2b07      	cmp	r3, #7
 80072bc:	d807      	bhi.n	80072ce <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	461a      	mov	r2, r3
 80072c4:	6a39      	ldr	r1, [r7, #32]
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7ff ff21 	bl	800710e <LL_GPIO_SetAFPin_0_7>
 80072cc:	e006      	b.n	80072dc <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	695b      	ldr	r3, [r3, #20]
 80072d2:	461a      	mov	r2, r3
 80072d4:	6a39      	ldr	r1, [r7, #32]
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7ff ff56 	bl	8007188 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	461a      	mov	r2, r3
 80072e2:	6a39      	ldr	r1, [r7, #32]
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f7ff fe43 	bl	8006f70 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80072ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ec:	3301      	adds	r3, #1
 80072ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f6:	fa22 f303 	lsr.w	r3, r2, r3
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1a0      	bne.n	8007240 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3728      	adds	r7, #40	@ 0x28
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8007308:	b480      	push	{r7}
 800730a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800730c:	4b04      	ldr	r3, [pc, #16]	@ (8007320 <LL_RCC_GetSysClkSource+0x18>)
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f003 030c 	and.w	r3, r3, #12
}
 8007314:	4618      	mov	r0, r3
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	40023800 	.word	0x40023800

08007324 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8007324:	b480      	push	{r7}
 8007326:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007328:	4b04      	ldr	r3, [pc, #16]	@ (800733c <LL_RCC_GetAHBPrescaler+0x18>)
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8007330:	4618      	mov	r0, r3
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop
 800733c:	40023800 	.word	0x40023800

08007340 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007340:	b480      	push	{r7}
 8007342:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007344:	4b04      	ldr	r3, [pc, #16]	@ (8007358 <LL_RCC_GetAPB1Prescaler+0x18>)
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 800734c:	4618      	mov	r0, r3
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop
 8007358:	40023800 	.word	0x40023800

0800735c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800735c:	b480      	push	{r7}
 800735e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8007360:	4b04      	ldr	r3, [pc, #16]	@ (8007374 <LL_RCC_GetAPB2Prescaler+0x18>)
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8007368:	4618      	mov	r0, r3
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	40023800 	.word	0x40023800

08007378 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8007378:	b480      	push	{r7}
 800737a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800737c:	4b04      	ldr	r3, [pc, #16]	@ (8007390 <LL_RCC_PLL_GetMainSource+0x18>)
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8007384:	4618      	mov	r0, r3
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	40023800 	.word	0x40023800

08007394 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007394:	b480      	push	{r7}
 8007396:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007398:	4b04      	ldr	r3, [pc, #16]	@ (80073ac <LL_RCC_PLL_GetN+0x18>)
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	099b      	lsrs	r3, r3, #6
 800739e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr
 80073ac:	40023800 	.word	0x40023800

080073b0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80073b0:	b480      	push	{r7}
 80073b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80073b4:	4b04      	ldr	r3, [pc, #16]	@ (80073c8 <LL_RCC_PLL_GetP+0x18>)
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80073bc:	4618      	mov	r0, r3
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	40023800 	.word	0x40023800

080073cc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80073cc:	b480      	push	{r7}
 80073ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80073d0:	4b04      	ldr	r3, [pc, #16]	@ (80073e4 <LL_RCC_PLL_GetDivider+0x18>)
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 80073d8:	4618      	mov	r0, r3
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	40023800 	.word	0x40023800

080073e8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80073f0:	f000 f820 	bl	8007434 <RCC_GetSystemClockFreq>
 80073f4:	4602      	mov	r2, r0
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4618      	mov	r0, r3
 8007400:	f000 f840 	bl	8007484 <RCC_GetHCLKClockFreq>
 8007404:	4602      	mov	r2, r0
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	4618      	mov	r0, r3
 8007410:	f000 f84e 	bl	80074b0 <RCC_GetPCLK1ClockFreq>
 8007414:	4602      	mov	r2, r0
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	4618      	mov	r0, r3
 8007420:	f000 f85a 	bl	80074d8 <RCC_GetPCLK2ClockFreq>
 8007424:	4602      	mov	r2, r0
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	60da      	str	r2, [r3, #12]
}
 800742a:	bf00      	nop
 800742c:	3708      	adds	r7, #8
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
	...

08007434 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800743a:	2300      	movs	r3, #0
 800743c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800743e:	f7ff ff63 	bl	8007308 <LL_RCC_GetSysClkSource>
 8007442:	4603      	mov	r3, r0
 8007444:	2b08      	cmp	r3, #8
 8007446:	d00c      	beq.n	8007462 <RCC_GetSystemClockFreq+0x2e>
 8007448:	2b08      	cmp	r3, #8
 800744a:	d80f      	bhi.n	800746c <RCC_GetSystemClockFreq+0x38>
 800744c:	2b00      	cmp	r3, #0
 800744e:	d002      	beq.n	8007456 <RCC_GetSystemClockFreq+0x22>
 8007450:	2b04      	cmp	r3, #4
 8007452:	d003      	beq.n	800745c <RCC_GetSystemClockFreq+0x28>
 8007454:	e00a      	b.n	800746c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8007456:	4b09      	ldr	r3, [pc, #36]	@ (800747c <RCC_GetSystemClockFreq+0x48>)
 8007458:	607b      	str	r3, [r7, #4]
      break;
 800745a:	e00a      	b.n	8007472 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800745c:	4b08      	ldr	r3, [pc, #32]	@ (8007480 <RCC_GetSystemClockFreq+0x4c>)
 800745e:	607b      	str	r3, [r7, #4]
      break;
 8007460:	e007      	b.n	8007472 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8007462:	2008      	movs	r0, #8
 8007464:	f000 f84c 	bl	8007500 <RCC_PLL_GetFreqDomain_SYS>
 8007468:	6078      	str	r0, [r7, #4]
      break;
 800746a:	e002      	b.n	8007472 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800746c:	4b03      	ldr	r3, [pc, #12]	@ (800747c <RCC_GetSystemClockFreq+0x48>)
 800746e:	607b      	str	r3, [r7, #4]
      break;
 8007470:	bf00      	nop
  }

  return frequency;
 8007472:	687b      	ldr	r3, [r7, #4]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3708      	adds	r7, #8
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	00f42400 	.word	0x00f42400
 8007480:	007a1200 	.word	0x007a1200

08007484 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800748c:	f7ff ff4a 	bl	8007324 <LL_RCC_GetAHBPrescaler>
 8007490:	4603      	mov	r3, r0
 8007492:	091b      	lsrs	r3, r3, #4
 8007494:	f003 030f 	and.w	r3, r3, #15
 8007498:	4a04      	ldr	r2, [pc, #16]	@ (80074ac <RCC_GetHCLKClockFreq+0x28>)
 800749a:	5cd3      	ldrb	r3, [r2, r3]
 800749c:	461a      	mov	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	40d3      	lsrs	r3, r2
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3708      	adds	r7, #8
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	0800ae0c 	.word	0x0800ae0c

080074b0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80074b8:	f7ff ff42 	bl	8007340 <LL_RCC_GetAPB1Prescaler>
 80074bc:	4603      	mov	r3, r0
 80074be:	0a9b      	lsrs	r3, r3, #10
 80074c0:	4a04      	ldr	r2, [pc, #16]	@ (80074d4 <RCC_GetPCLK1ClockFreq+0x24>)
 80074c2:	5cd3      	ldrb	r3, [r2, r3]
 80074c4:	461a      	mov	r2, r3
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	40d3      	lsrs	r3, r2
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	0800ae1c 	.word	0x0800ae1c

080074d8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80074e0:	f7ff ff3c 	bl	800735c <LL_RCC_GetAPB2Prescaler>
 80074e4:	4603      	mov	r3, r0
 80074e6:	0b5b      	lsrs	r3, r3, #13
 80074e8:	4a04      	ldr	r2, [pc, #16]	@ (80074fc <RCC_GetPCLK2ClockFreq+0x24>)
 80074ea:	5cd3      	ldrb	r3, [r2, r3]
 80074ec:	461a      	mov	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	40d3      	lsrs	r3, r2
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3708      	adds	r7, #8
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	0800ae1c 	.word	0x0800ae1c

08007500 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8007500:	b590      	push	{r4, r7, lr}
 8007502:	b087      	sub	sp, #28
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8007508:	2300      	movs	r3, #0
 800750a:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 800750c:	2300      	movs	r3, #0
 800750e:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8007510:	2300      	movs	r3, #0
 8007512:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8007514:	f7ff ff30 	bl	8007378 <LL_RCC_PLL_GetMainSource>
 8007518:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d004      	beq.n	800752a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007526:	d003      	beq.n	8007530 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8007528:	e005      	b.n	8007536 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800752a:	4b12      	ldr	r3, [pc, #72]	@ (8007574 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800752c:	617b      	str	r3, [r7, #20]
      break;
 800752e:	e005      	b.n	800753c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8007530:	4b11      	ldr	r3, [pc, #68]	@ (8007578 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8007532:	617b      	str	r3, [r7, #20]
      break;
 8007534:	e002      	b.n	800753c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8007536:	4b0f      	ldr	r3, [pc, #60]	@ (8007574 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8007538:	617b      	str	r3, [r7, #20]
      break;
 800753a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b08      	cmp	r3, #8
 8007540:	d113      	bne.n	800756a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007542:	f7ff ff43 	bl	80073cc <LL_RCC_PLL_GetDivider>
 8007546:	4602      	mov	r2, r0
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	fbb3 f4f2 	udiv	r4, r3, r2
 800754e:	f7ff ff21 	bl	8007394 <LL_RCC_PLL_GetN>
 8007552:	4603      	mov	r3, r0
 8007554:	fb03 f404 	mul.w	r4, r3, r4
 8007558:	f7ff ff2a 	bl	80073b0 <LL_RCC_PLL_GetP>
 800755c:	4603      	mov	r3, r0
 800755e:	0c1b      	lsrs	r3, r3, #16
 8007560:	3301      	adds	r3, #1
 8007562:	005b      	lsls	r3, r3, #1
 8007564:	fbb4 f3f3 	udiv	r3, r4, r3
 8007568:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800756a:	693b      	ldr	r3, [r7, #16]
}
 800756c:	4618      	mov	r0, r3
 800756e:	371c      	adds	r7, #28
 8007570:	46bd      	mov	sp, r7
 8007572:	bd90      	pop	{r4, r7, pc}
 8007574:	00f42400 	.word	0x00f42400
 8007578:	007a1200 	.word	0x007a1200

0800757c <LL_SPI_IsEnabled>:
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800758c:	2b40      	cmp	r3, #64	@ 0x40
 800758e:	d101      	bne.n	8007594 <LL_SPI_IsEnabled+0x18>
 8007590:	2301      	movs	r3, #1
 8007592:	e000      	b.n	8007596 <LL_SPI_IsEnabled+0x1a>
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	370c      	adds	r7, #12
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr

080075a2 <LL_SPI_SetCRCPolynomial>:
{
 80075a2:	b480      	push	{r7}
 80075a4:	b083      	sub	sp, #12
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
 80075aa:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	461a      	mov	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	611a      	str	r2, [r3, #16]
}
 80075b6:	bf00      	nop
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b084      	sub	sp, #16
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f7ff ffd3 	bl	800757c <LL_SPI_IsEnabled>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d139      	bne.n	8007650 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80075e4:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 80075e8:	683a      	ldr	r2, [r7, #0]
 80075ea:	6811      	ldr	r1, [r2, #0]
 80075ec:	683a      	ldr	r2, [r7, #0]
 80075ee:	6852      	ldr	r2, [r2, #4]
 80075f0:	4311      	orrs	r1, r2
 80075f2:	683a      	ldr	r2, [r7, #0]
 80075f4:	6892      	ldr	r2, [r2, #8]
 80075f6:	4311      	orrs	r1, r2
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	68d2      	ldr	r2, [r2, #12]
 80075fc:	4311      	orrs	r1, r2
 80075fe:	683a      	ldr	r2, [r7, #0]
 8007600:	6912      	ldr	r2, [r2, #16]
 8007602:	4311      	orrs	r1, r2
 8007604:	683a      	ldr	r2, [r7, #0]
 8007606:	6952      	ldr	r2, [r2, #20]
 8007608:	4311      	orrs	r1, r2
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	6992      	ldr	r2, [r2, #24]
 800760e:	4311      	orrs	r1, r2
 8007610:	683a      	ldr	r2, [r7, #0]
 8007612:	69d2      	ldr	r2, [r2, #28]
 8007614:	4311      	orrs	r1, r2
 8007616:	683a      	ldr	r2, [r7, #0]
 8007618:	6a12      	ldr	r2, [r2, #32]
 800761a:	430a      	orrs	r2, r1
 800761c:	431a      	orrs	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	f023 0204 	bic.w	r2, r3, #4
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	0c1b      	lsrs	r3, r3, #16
 8007630:	431a      	orrs	r2, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	6a1b      	ldr	r3, [r3, #32]
 800763a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800763e:	d105      	bne.n	800764c <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007644:	4619      	mov	r1, r3
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f7ff ffab 	bl	80075a2 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800764c:	2300      	movs	r3, #0
 800764e:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	69db      	ldr	r3, [r3, #28]
 8007654:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	61da      	str	r2, [r3, #28]
  return status;
 800765c:	7bfb      	ldrb	r3, [r7, #15]
}
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <LL_TIM_SetPrescaler>:
{
 8007666:	b480      	push	{r7}
 8007668:	b083      	sub	sp, #12
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
 800766e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	683a      	ldr	r2, [r7, #0]
 8007674:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007676:	bf00      	nop
 8007678:	370c      	adds	r7, #12
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr

08007682 <LL_TIM_SetAutoReload>:
{
 8007682:	b480      	push	{r7}
 8007684:	b083      	sub	sp, #12
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
 800768a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	683a      	ldr	r2, [r7, #0]
 8007690:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007692:	bf00      	nop
 8007694:	370c      	adds	r7, #12
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <LL_TIM_SetRepetitionCounter>:
{
 800769e:	b480      	push	{r7}
 80076a0:	b083      	sub	sp, #12
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
 80076a6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80076ae:	bf00      	nop
 80076b0:	370c      	adds	r7, #12
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr

080076ba <LL_TIM_OC_SetCompareCH1>:
{
 80076ba:	b480      	push	{r7}
 80076bc:	b083      	sub	sp, #12
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
 80076c2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	683a      	ldr	r2, [r7, #0]
 80076c8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80076ca:	bf00      	nop
 80076cc:	370c      	adds	r7, #12
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr

080076d6 <LL_TIM_OC_SetCompareCH2>:
{
 80076d6:	b480      	push	{r7}
 80076d8:	b083      	sub	sp, #12
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
 80076de:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	683a      	ldr	r2, [r7, #0]
 80076e4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80076e6:	bf00      	nop
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <LL_TIM_OC_SetCompareCH3>:
{
 80076f2:	b480      	push	{r7}
 80076f4:	b083      	sub	sp, #12
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
 80076fa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	683a      	ldr	r2, [r7, #0]
 8007700:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8007702:	bf00      	nop
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <LL_TIM_OC_SetCompareCH4>:
{
 800770e:	b480      	push	{r7}
 8007710:	b083      	sub	sp, #12
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
 8007716:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	683a      	ldr	r2, [r7, #0]
 800771c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800771e:	bf00      	nop
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800772a:	b480      	push	{r7}
 800772c:	b083      	sub	sp, #12
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	f043 0201 	orr.w	r2, r3, #1
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	615a      	str	r2, [r3, #20]
}
 800773e:	bf00      	nop
 8007740:	370c      	adds	r7, #12
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr
	...

0800774c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a3d      	ldr	r2, [pc, #244]	@ (8007854 <LL_TIM_Init+0x108>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d013      	beq.n	800778c <LL_TIM_Init+0x40>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800776a:	d00f      	beq.n	800778c <LL_TIM_Init+0x40>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	4a3a      	ldr	r2, [pc, #232]	@ (8007858 <LL_TIM_Init+0x10c>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d00b      	beq.n	800778c <LL_TIM_Init+0x40>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4a39      	ldr	r2, [pc, #228]	@ (800785c <LL_TIM_Init+0x110>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d007      	beq.n	800778c <LL_TIM_Init+0x40>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4a38      	ldr	r2, [pc, #224]	@ (8007860 <LL_TIM_Init+0x114>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d003      	beq.n	800778c <LL_TIM_Init+0x40>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4a37      	ldr	r2, [pc, #220]	@ (8007864 <LL_TIM_Init+0x118>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d106      	bne.n	800779a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	4313      	orrs	r3, r2
 8007798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a2d      	ldr	r2, [pc, #180]	@ (8007854 <LL_TIM_Init+0x108>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d02b      	beq.n	80077fa <LL_TIM_Init+0xae>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077a8:	d027      	beq.n	80077fa <LL_TIM_Init+0xae>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a2a      	ldr	r2, [pc, #168]	@ (8007858 <LL_TIM_Init+0x10c>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d023      	beq.n	80077fa <LL_TIM_Init+0xae>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a29      	ldr	r2, [pc, #164]	@ (800785c <LL_TIM_Init+0x110>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d01f      	beq.n	80077fa <LL_TIM_Init+0xae>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a28      	ldr	r2, [pc, #160]	@ (8007860 <LL_TIM_Init+0x114>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d01b      	beq.n	80077fa <LL_TIM_Init+0xae>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a27      	ldr	r2, [pc, #156]	@ (8007864 <LL_TIM_Init+0x118>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d017      	beq.n	80077fa <LL_TIM_Init+0xae>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a26      	ldr	r2, [pc, #152]	@ (8007868 <LL_TIM_Init+0x11c>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d013      	beq.n	80077fa <LL_TIM_Init+0xae>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a25      	ldr	r2, [pc, #148]	@ (800786c <LL_TIM_Init+0x120>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d00f      	beq.n	80077fa <LL_TIM_Init+0xae>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a24      	ldr	r2, [pc, #144]	@ (8007870 <LL_TIM_Init+0x124>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d00b      	beq.n	80077fa <LL_TIM_Init+0xae>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a23      	ldr	r2, [pc, #140]	@ (8007874 <LL_TIM_Init+0x128>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d007      	beq.n	80077fa <LL_TIM_Init+0xae>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a22      	ldr	r2, [pc, #136]	@ (8007878 <LL_TIM_Init+0x12c>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d003      	beq.n	80077fa <LL_TIM_Init+0xae>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a21      	ldr	r2, [pc, #132]	@ (800787c <LL_TIM_Init+0x130>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d106      	bne.n	8007808 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	4313      	orrs	r3, r2
 8007806:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	4619      	mov	r1, r3
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f7ff ff34 	bl	8007682 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	881b      	ldrh	r3, [r3, #0]
 800781e:	4619      	mov	r1, r3
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f7ff ff20 	bl	8007666 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4a0a      	ldr	r2, [pc, #40]	@ (8007854 <LL_TIM_Init+0x108>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d003      	beq.n	8007836 <LL_TIM_Init+0xea>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a0c      	ldr	r2, [pc, #48]	@ (8007864 <LL_TIM_Init+0x118>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d105      	bne.n	8007842 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	4619      	mov	r1, r3
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f7ff ff2e 	bl	800769e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7ff ff71 	bl	800772a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	40010000 	.word	0x40010000
 8007858:	40000400 	.word	0x40000400
 800785c:	40000800 	.word	0x40000800
 8007860:	40000c00 	.word	0x40000c00
 8007864:	40010400 	.word	0x40010400
 8007868:	40014000 	.word	0x40014000
 800786c:	40014400 	.word	0x40014400
 8007870:	40014800 	.word	0x40014800
 8007874:	40001800 	.word	0x40001800
 8007878:	40001c00 	.word	0x40001c00
 800787c:	40002000 	.word	0x40002000

08007880 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007896:	d027      	beq.n	80078e8 <LL_TIM_OC_Init+0x68>
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800789e:	d82a      	bhi.n	80078f6 <LL_TIM_OC_Init+0x76>
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078a6:	d018      	beq.n	80078da <LL_TIM_OC_Init+0x5a>
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078ae:	d822      	bhi.n	80078f6 <LL_TIM_OC_Init+0x76>
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d003      	beq.n	80078be <LL_TIM_OC_Init+0x3e>
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	2b10      	cmp	r3, #16
 80078ba:	d007      	beq.n	80078cc <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80078bc:	e01b      	b.n	80078f6 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80078be:	6879      	ldr	r1, [r7, #4]
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f000 f81f 	bl	8007904 <OC1Config>
 80078c6:	4603      	mov	r3, r0
 80078c8:	75fb      	strb	r3, [r7, #23]
      break;
 80078ca:	e015      	b.n	80078f8 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80078cc:	6879      	ldr	r1, [r7, #4]
 80078ce:	68f8      	ldr	r0, [r7, #12]
 80078d0:	f000 f884 	bl	80079dc <OC2Config>
 80078d4:	4603      	mov	r3, r0
 80078d6:	75fb      	strb	r3, [r7, #23]
      break;
 80078d8:	e00e      	b.n	80078f8 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80078da:	6879      	ldr	r1, [r7, #4]
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f000 f8ed 	bl	8007abc <OC3Config>
 80078e2:	4603      	mov	r3, r0
 80078e4:	75fb      	strb	r3, [r7, #23]
      break;
 80078e6:	e007      	b.n	80078f8 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80078e8:	6879      	ldr	r1, [r7, #4]
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f000 f956 	bl	8007b9c <OC4Config>
 80078f0:	4603      	mov	r3, r0
 80078f2:	75fb      	strb	r3, [r7, #23]
      break;
 80078f4:	e000      	b.n	80078f8 <LL_TIM_OC_Init+0x78>
      break;
 80078f6:	bf00      	nop
  }

  return result;
 80078f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3718      	adds	r7, #24
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
	...

08007904 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b086      	sub	sp, #24
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	f023 0201 	bic.w	r2, r3, #1
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a1b      	ldr	r3, [r3, #32]
 800791e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	699b      	ldr	r3, [r3, #24]
 800792a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f023 0303 	bic.w	r3, r3, #3
 8007932:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4313      	orrs	r3, r2
 8007940:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	f023 0202 	bic.w	r2, r3, #2
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	4313      	orrs	r3, r2
 800794e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	f023 0201 	bic.w	r2, r3, #1
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	4313      	orrs	r3, r2
 800795c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a1c      	ldr	r2, [pc, #112]	@ (80079d4 <OC1Config+0xd0>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d003      	beq.n	800796e <OC1Config+0x6a>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a1b      	ldr	r2, [pc, #108]	@ (80079d8 <OC1Config+0xd4>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d11e      	bne.n	80079ac <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	f023 0208 	bic.w	r2, r3, #8
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	695b      	ldr	r3, [r3, #20]
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	4313      	orrs	r3, r2
 800797c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f023 0204 	bic.w	r2, r3, #4
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	4313      	orrs	r3, r2
 800798c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	699b      	ldr	r3, [r3, #24]
 8007998:	4313      	orrs	r3, r2
 800799a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	69db      	ldr	r3, [r3, #28]
 80079a6:	005b      	lsls	r3, r3, #1
 80079a8:	4313      	orrs	r3, r2
 80079aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	693a      	ldr	r2, [r7, #16]
 80079b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	4619      	mov	r1, r3
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f7ff fe7b 	bl	80076ba <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	697a      	ldr	r2, [r7, #20]
 80079c8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3718      	adds	r7, #24
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	40010000 	.word	0x40010000
 80079d8:	40010400 	.word	0x40010400

080079dc <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b086      	sub	sp, #24
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a1b      	ldr	r3, [r3, #32]
 80079ea:	f023 0210 	bic.w	r2, r3, #16
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a1b      	ldr	r3, [r3, #32]
 80079f6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	021b      	lsls	r3, r3, #8
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	f023 0220 	bic.w	r2, r3, #32
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	011b      	lsls	r3, r3, #4
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	f023 0210 	bic.w	r2, r3, #16
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	011b      	lsls	r3, r3, #4
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a1d      	ldr	r2, [pc, #116]	@ (8007ab4 <OC2Config+0xd8>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d003      	beq.n	8007a4c <OC2Config+0x70>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a1c      	ldr	r2, [pc, #112]	@ (8007ab8 <OC2Config+0xdc>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d11f      	bne.n	8007a8c <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	695b      	ldr	r3, [r3, #20]
 8007a56:	019b      	lsls	r3, r3, #6
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	019b      	lsls	r3, r3, #6
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	699b      	ldr	r3, [r3, #24]
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	69db      	ldr	r3, [r3, #28]
 8007a86:	00db      	lsls	r3, r3, #3
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	693a      	ldr	r2, [r7, #16]
 8007a90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f7ff fe19 	bl	80076d6 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	697a      	ldr	r2, [r7, #20]
 8007aa8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3718      	adds	r7, #24
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	40010000 	.word	0x40010000
 8007ab8:	40010400 	.word	0x40010400

08007abc <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b086      	sub	sp, #24
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a1b      	ldr	r3, [r3, #32]
 8007aca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a1b      	ldr	r3, [r3, #32]
 8007ad6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	69db      	ldr	r3, [r3, #28]
 8007ae2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f023 0303 	bic.w	r3, r3, #3
 8007aea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	691b      	ldr	r3, [r3, #16]
 8007b04:	021b      	lsls	r3, r3, #8
 8007b06:	4313      	orrs	r3, r2
 8007b08:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	021b      	lsls	r3, r3, #8
 8007b16:	4313      	orrs	r3, r2
 8007b18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8007b94 <OC3Config+0xd8>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d003      	beq.n	8007b2a <OC3Config+0x6e>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a1c      	ldr	r2, [pc, #112]	@ (8007b98 <OC3Config+0xdc>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d11f      	bne.n	8007b6a <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	029b      	lsls	r3, r3, #10
 8007b36:	4313      	orrs	r3, r2
 8007b38:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	029b      	lsls	r3, r3, #10
 8007b46:	4313      	orrs	r3, r2
 8007b48:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	699b      	ldr	r3, [r3, #24]
 8007b54:	011b      	lsls	r3, r3, #4
 8007b56:	4313      	orrs	r3, r2
 8007b58:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	69db      	ldr	r3, [r3, #28]
 8007b64:	015b      	lsls	r3, r3, #5
 8007b66:	4313      	orrs	r3, r2
 8007b68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	693a      	ldr	r2, [r7, #16]
 8007b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f7ff fdb8 	bl	80076f2 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	697a      	ldr	r2, [r7, #20]
 8007b86:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3718      	adds	r7, #24
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	40010000 	.word	0x40010000
 8007b98:	40010400 	.word	0x40010400

08007b9c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b086      	sub	sp, #24
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a1b      	ldr	r3, [r3, #32]
 8007baa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a1b      	ldr	r3, [r3, #32]
 8007bb6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	69db      	ldr	r3, [r3, #28]
 8007bc2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	021b      	lsls	r3, r3, #8
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	031b      	lsls	r3, r3, #12
 8007be8:	4313      	orrs	r3, r2
 8007bea:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	031b      	lsls	r3, r3, #12
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a11      	ldr	r2, [pc, #68]	@ (8007c44 <OC4Config+0xa8>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d003      	beq.n	8007c0c <OC4Config+0x70>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4a10      	ldr	r2, [pc, #64]	@ (8007c48 <OC4Config+0xac>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d107      	bne.n	8007c1c <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	019b      	lsls	r3, r3, #6
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	697a      	ldr	r2, [r7, #20]
 8007c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f7ff fd6d 	bl	800770e <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	693a      	ldr	r2, [r7, #16]
 8007c38:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3718      	adds	r7, #24
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	40010000 	.word	0x40010000
 8007c48:	40010400 	.word	0x40010400

08007c4c <LL_USART_IsEnabled>:
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c60:	bf0c      	ite	eq
 8007c62:	2301      	moveq	r3, #1
 8007c64:	2300      	movne	r3, #0
 8007c66:	b2db      	uxtb	r3, r3
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <LL_USART_SetStopBitsLength>:
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	431a      	orrs	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	611a      	str	r2, [r3, #16]
}
 8007c8e:	bf00      	nop
 8007c90:	370c      	adds	r7, #12
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr

08007c9a <LL_USART_SetHWFlowCtrl>:
{
 8007c9a:	b480      	push	{r7}
 8007c9c:	b083      	sub	sp, #12
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
 8007ca2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	695b      	ldr	r3, [r3, #20]
 8007ca8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	431a      	orrs	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	615a      	str	r2, [r3, #20]
}
 8007cb4:	bf00      	nop
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <LL_USART_SetBaudRate>:
{
 8007cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cc4:	b0c0      	sub	sp, #256	@ 0x100
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007ccc:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8007cd0:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8007cd4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8007cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ce0:	f040 810c 	bne.w	8007efc <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8007ce4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007cee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007cf2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007cf6:	4622      	mov	r2, r4
 8007cf8:	462b      	mov	r3, r5
 8007cfa:	1891      	adds	r1, r2, r2
 8007cfc:	6639      	str	r1, [r7, #96]	@ 0x60
 8007cfe:	415b      	adcs	r3, r3
 8007d00:	667b      	str	r3, [r7, #100]	@ 0x64
 8007d02:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8007d06:	4621      	mov	r1, r4
 8007d08:	eb12 0801 	adds.w	r8, r2, r1
 8007d0c:	4629      	mov	r1, r5
 8007d0e:	eb43 0901 	adc.w	r9, r3, r1
 8007d12:	f04f 0200 	mov.w	r2, #0
 8007d16:	f04f 0300 	mov.w	r3, #0
 8007d1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d26:	4690      	mov	r8, r2
 8007d28:	4699      	mov	r9, r3
 8007d2a:	4623      	mov	r3, r4
 8007d2c:	eb18 0303 	adds.w	r3, r8, r3
 8007d30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007d34:	462b      	mov	r3, r5
 8007d36:	eb49 0303 	adc.w	r3, r9, r3
 8007d3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d3e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007d42:	2200      	movs	r2, #0
 8007d44:	469a      	mov	sl, r3
 8007d46:	4693      	mov	fp, r2
 8007d48:	eb1a 030a 	adds.w	r3, sl, sl
 8007d4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d4e:	eb4b 030b 	adc.w	r3, fp, fp
 8007d52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d54:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007d58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007d5c:	f7f8 ff24 	bl	8000ba8 <__aeabi_uldivmod>
 8007d60:	4602      	mov	r2, r0
 8007d62:	460b      	mov	r3, r1
 8007d64:	4b64      	ldr	r3, [pc, #400]	@ (8007ef8 <LL_USART_SetBaudRate+0x238>)
 8007d66:	fba3 2302 	umull	r2, r3, r3, r2
 8007d6a:	095b      	lsrs	r3, r3, #5
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	011b      	lsls	r3, r3, #4
 8007d70:	b29c      	uxth	r4, r3
 8007d72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007d76:	2200      	movs	r2, #0
 8007d78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007d7c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007d80:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8007d84:	4642      	mov	r2, r8
 8007d86:	464b      	mov	r3, r9
 8007d88:	1891      	adds	r1, r2, r2
 8007d8a:	6539      	str	r1, [r7, #80]	@ 0x50
 8007d8c:	415b      	adcs	r3, r3
 8007d8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007d94:	4641      	mov	r1, r8
 8007d96:	1851      	adds	r1, r2, r1
 8007d98:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007d9a:	4649      	mov	r1, r9
 8007d9c:	414b      	adcs	r3, r1
 8007d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007da0:	f04f 0200 	mov.w	r2, #0
 8007da4:	f04f 0300 	mov.w	r3, #0
 8007da8:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8007dac:	4659      	mov	r1, fp
 8007dae:	00cb      	lsls	r3, r1, #3
 8007db0:	4651      	mov	r1, sl
 8007db2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007db6:	4651      	mov	r1, sl
 8007db8:	00ca      	lsls	r2, r1, #3
 8007dba:	4610      	mov	r0, r2
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	4642      	mov	r2, r8
 8007dc2:	189b      	adds	r3, r3, r2
 8007dc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007dc8:	464b      	mov	r3, r9
 8007dca:	460a      	mov	r2, r1
 8007dcc:	eb42 0303 	adc.w	r3, r2, r3
 8007dd0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007dd4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007dde:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8007de2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007de6:	460b      	mov	r3, r1
 8007de8:	18db      	adds	r3, r3, r3
 8007dea:	643b      	str	r3, [r7, #64]	@ 0x40
 8007dec:	4613      	mov	r3, r2
 8007dee:	eb42 0303 	adc.w	r3, r2, r3
 8007df2:	647b      	str	r3, [r7, #68]	@ 0x44
 8007df4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007df8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8007dfc:	f7f8 fed4 	bl	8000ba8 <__aeabi_uldivmod>
 8007e00:	4602      	mov	r2, r0
 8007e02:	460b      	mov	r3, r1
 8007e04:	4611      	mov	r1, r2
 8007e06:	4b3c      	ldr	r3, [pc, #240]	@ (8007ef8 <LL_USART_SetBaudRate+0x238>)
 8007e08:	fba3 2301 	umull	r2, r3, r3, r1
 8007e0c:	095b      	lsrs	r3, r3, #5
 8007e0e:	2264      	movs	r2, #100	@ 0x64
 8007e10:	fb02 f303 	mul.w	r3, r2, r3
 8007e14:	1acb      	subs	r3, r1, r3
 8007e16:	00db      	lsls	r3, r3, #3
 8007e18:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007e1c:	4b36      	ldr	r3, [pc, #216]	@ (8007ef8 <LL_USART_SetBaudRate+0x238>)
 8007e1e:	fba3 2302 	umull	r2, r3, r3, r2
 8007e22:	095b      	lsrs	r3, r3, #5
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	005b      	lsls	r3, r3, #1
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	4423      	add	r3, r4
 8007e32:	b29c      	uxth	r4, r3
 8007e34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e3e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007e42:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8007e46:	4642      	mov	r2, r8
 8007e48:	464b      	mov	r3, r9
 8007e4a:	1891      	adds	r1, r2, r2
 8007e4c:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007e4e:	415b      	adcs	r3, r3
 8007e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e52:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007e56:	4641      	mov	r1, r8
 8007e58:	1851      	adds	r1, r2, r1
 8007e5a:	6339      	str	r1, [r7, #48]	@ 0x30
 8007e5c:	4649      	mov	r1, r9
 8007e5e:	414b      	adcs	r3, r1
 8007e60:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e62:	f04f 0200 	mov.w	r2, #0
 8007e66:	f04f 0300 	mov.w	r3, #0
 8007e6a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007e6e:	4659      	mov	r1, fp
 8007e70:	00cb      	lsls	r3, r1, #3
 8007e72:	4651      	mov	r1, sl
 8007e74:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e78:	4651      	mov	r1, sl
 8007e7a:	00ca      	lsls	r2, r1, #3
 8007e7c:	4610      	mov	r0, r2
 8007e7e:	4619      	mov	r1, r3
 8007e80:	4603      	mov	r3, r0
 8007e82:	4642      	mov	r2, r8
 8007e84:	189b      	adds	r3, r3, r2
 8007e86:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e8a:	464b      	mov	r3, r9
 8007e8c:	460a      	mov	r2, r1
 8007e8e:	eb42 0303 	adc.w	r3, r2, r3
 8007e92:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007e96:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ea0:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8007ea4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	18db      	adds	r3, r3, r3
 8007eac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007eae:	4613      	mov	r3, r2
 8007eb0:	eb42 0303 	adc.w	r3, r2, r3
 8007eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007eb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007eba:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8007ebe:	f7f8 fe73 	bl	8000ba8 <__aeabi_uldivmod>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8007ef8 <LL_USART_SetBaudRate+0x238>)
 8007ec8:	fba3 1302 	umull	r1, r3, r3, r2
 8007ecc:	095b      	lsrs	r3, r3, #5
 8007ece:	2164      	movs	r1, #100	@ 0x64
 8007ed0:	fb01 f303 	mul.w	r3, r1, r3
 8007ed4:	1ad3      	subs	r3, r2, r3
 8007ed6:	00db      	lsls	r3, r3, #3
 8007ed8:	3332      	adds	r3, #50	@ 0x32
 8007eda:	4a07      	ldr	r2, [pc, #28]	@ (8007ef8 <LL_USART_SetBaudRate+0x238>)
 8007edc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ee0:	095b      	lsrs	r3, r3, #5
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	f003 0307 	and.w	r3, r3, #7
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	4423      	add	r3, r4
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	461a      	mov	r2, r3
 8007ef0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ef4:	609a      	str	r2, [r3, #8]
}
 8007ef6:	e108      	b.n	800810a <LL_USART_SetBaudRate+0x44a>
 8007ef8:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007efc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007f00:	2200      	movs	r2, #0
 8007f02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007f06:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007f0a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8007f0e:	4642      	mov	r2, r8
 8007f10:	464b      	mov	r3, r9
 8007f12:	1891      	adds	r1, r2, r2
 8007f14:	6239      	str	r1, [r7, #32]
 8007f16:	415b      	adcs	r3, r3
 8007f18:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f1e:	4641      	mov	r1, r8
 8007f20:	1854      	adds	r4, r2, r1
 8007f22:	4649      	mov	r1, r9
 8007f24:	eb43 0501 	adc.w	r5, r3, r1
 8007f28:	f04f 0200 	mov.w	r2, #0
 8007f2c:	f04f 0300 	mov.w	r3, #0
 8007f30:	00eb      	lsls	r3, r5, #3
 8007f32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f36:	00e2      	lsls	r2, r4, #3
 8007f38:	4614      	mov	r4, r2
 8007f3a:	461d      	mov	r5, r3
 8007f3c:	4643      	mov	r3, r8
 8007f3e:	18e3      	adds	r3, r4, r3
 8007f40:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007f44:	464b      	mov	r3, r9
 8007f46:	eb45 0303 	adc.w	r3, r5, r3
 8007f4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007f4e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007f52:	2200      	movs	r2, #0
 8007f54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f58:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8007f5c:	f04f 0200 	mov.w	r2, #0
 8007f60:	f04f 0300 	mov.w	r3, #0
 8007f64:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8007f68:	4629      	mov	r1, r5
 8007f6a:	008b      	lsls	r3, r1, #2
 8007f6c:	4621      	mov	r1, r4
 8007f6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f72:	4621      	mov	r1, r4
 8007f74:	008a      	lsls	r2, r1, #2
 8007f76:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8007f7a:	f7f8 fe15 	bl	8000ba8 <__aeabi_uldivmod>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	460b      	mov	r3, r1
 8007f82:	4b65      	ldr	r3, [pc, #404]	@ (8008118 <LL_USART_SetBaudRate+0x458>)
 8007f84:	fba3 2302 	umull	r2, r3, r3, r2
 8007f88:	095b      	lsrs	r3, r3, #5
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	011b      	lsls	r3, r3, #4
 8007f8e:	b29c      	uxth	r4, r3
 8007f90:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007f94:	2200      	movs	r2, #0
 8007f96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007f9e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8007fa2:	4642      	mov	r2, r8
 8007fa4:	464b      	mov	r3, r9
 8007fa6:	1891      	adds	r1, r2, r2
 8007fa8:	61b9      	str	r1, [r7, #24]
 8007faa:	415b      	adcs	r3, r3
 8007fac:	61fb      	str	r3, [r7, #28]
 8007fae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007fb2:	4641      	mov	r1, r8
 8007fb4:	1851      	adds	r1, r2, r1
 8007fb6:	6139      	str	r1, [r7, #16]
 8007fb8:	4649      	mov	r1, r9
 8007fba:	414b      	adcs	r3, r1
 8007fbc:	617b      	str	r3, [r7, #20]
 8007fbe:	f04f 0200 	mov.w	r2, #0
 8007fc2:	f04f 0300 	mov.w	r3, #0
 8007fc6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007fca:	4659      	mov	r1, fp
 8007fcc:	00cb      	lsls	r3, r1, #3
 8007fce:	4651      	mov	r1, sl
 8007fd0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fd4:	4651      	mov	r1, sl
 8007fd6:	00ca      	lsls	r2, r1, #3
 8007fd8:	4610      	mov	r0, r2
 8007fda:	4619      	mov	r1, r3
 8007fdc:	4603      	mov	r3, r0
 8007fde:	4642      	mov	r2, r8
 8007fe0:	189b      	adds	r3, r3, r2
 8007fe2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007fe6:	464b      	mov	r3, r9
 8007fe8:	460a      	mov	r2, r1
 8007fea:	eb42 0303 	adc.w	r3, r2, r3
 8007fee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007ff2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ffc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8008000:	f04f 0200 	mov.w	r2, #0
 8008004:	f04f 0300 	mov.w	r3, #0
 8008008:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 800800c:	4649      	mov	r1, r9
 800800e:	008b      	lsls	r3, r1, #2
 8008010:	4641      	mov	r1, r8
 8008012:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008016:	4641      	mov	r1, r8
 8008018:	008a      	lsls	r2, r1, #2
 800801a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800801e:	f7f8 fdc3 	bl	8000ba8 <__aeabi_uldivmod>
 8008022:	4602      	mov	r2, r0
 8008024:	460b      	mov	r3, r1
 8008026:	4611      	mov	r1, r2
 8008028:	4b3b      	ldr	r3, [pc, #236]	@ (8008118 <LL_USART_SetBaudRate+0x458>)
 800802a:	fba3 2301 	umull	r2, r3, r3, r1
 800802e:	095b      	lsrs	r3, r3, #5
 8008030:	2264      	movs	r2, #100	@ 0x64
 8008032:	fb02 f303 	mul.w	r3, r2, r3
 8008036:	1acb      	subs	r3, r1, r3
 8008038:	011b      	lsls	r3, r3, #4
 800803a:	3332      	adds	r3, #50	@ 0x32
 800803c:	4a36      	ldr	r2, [pc, #216]	@ (8008118 <LL_USART_SetBaudRate+0x458>)
 800803e:	fba2 2303 	umull	r2, r3, r2, r3
 8008042:	095b      	lsrs	r3, r3, #5
 8008044:	b29b      	uxth	r3, r3
 8008046:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800804a:	b29b      	uxth	r3, r3
 800804c:	4423      	add	r3, r4
 800804e:	b29c      	uxth	r4, r3
 8008050:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008054:	2200      	movs	r2, #0
 8008056:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008058:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800805a:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800805e:	4642      	mov	r2, r8
 8008060:	464b      	mov	r3, r9
 8008062:	1891      	adds	r1, r2, r2
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	415b      	adcs	r3, r3
 8008068:	60fb      	str	r3, [r7, #12]
 800806a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800806e:	4641      	mov	r1, r8
 8008070:	1851      	adds	r1, r2, r1
 8008072:	6039      	str	r1, [r7, #0]
 8008074:	4649      	mov	r1, r9
 8008076:	414b      	adcs	r3, r1
 8008078:	607b      	str	r3, [r7, #4]
 800807a:	f04f 0200 	mov.w	r2, #0
 800807e:	f04f 0300 	mov.w	r3, #0
 8008082:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008086:	4659      	mov	r1, fp
 8008088:	00cb      	lsls	r3, r1, #3
 800808a:	4651      	mov	r1, sl
 800808c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008090:	4651      	mov	r1, sl
 8008092:	00ca      	lsls	r2, r1, #3
 8008094:	4610      	mov	r0, r2
 8008096:	4619      	mov	r1, r3
 8008098:	4603      	mov	r3, r0
 800809a:	4642      	mov	r2, r8
 800809c:	189b      	adds	r3, r3, r2
 800809e:	673b      	str	r3, [r7, #112]	@ 0x70
 80080a0:	464b      	mov	r3, r9
 80080a2:	460a      	mov	r2, r1
 80080a4:	eb42 0303 	adc.w	r3, r2, r3
 80080a8:	677b      	str	r3, [r7, #116]	@ 0x74
 80080aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80080ae:	2200      	movs	r2, #0
 80080b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80080b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80080b4:	f04f 0200 	mov.w	r2, #0
 80080b8:	f04f 0300 	mov.w	r3, #0
 80080bc:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 80080c0:	4649      	mov	r1, r9
 80080c2:	008b      	lsls	r3, r1, #2
 80080c4:	4641      	mov	r1, r8
 80080c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080ca:	4641      	mov	r1, r8
 80080cc:	008a      	lsls	r2, r1, #2
 80080ce:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80080d2:	f7f8 fd69 	bl	8000ba8 <__aeabi_uldivmod>
 80080d6:	4602      	mov	r2, r0
 80080d8:	460b      	mov	r3, r1
 80080da:	4b0f      	ldr	r3, [pc, #60]	@ (8008118 <LL_USART_SetBaudRate+0x458>)
 80080dc:	fba3 1302 	umull	r1, r3, r3, r2
 80080e0:	095b      	lsrs	r3, r3, #5
 80080e2:	2164      	movs	r1, #100	@ 0x64
 80080e4:	fb01 f303 	mul.w	r3, r1, r3
 80080e8:	1ad3      	subs	r3, r2, r3
 80080ea:	011b      	lsls	r3, r3, #4
 80080ec:	3332      	adds	r3, #50	@ 0x32
 80080ee:	4a0a      	ldr	r2, [pc, #40]	@ (8008118 <LL_USART_SetBaudRate+0x458>)
 80080f0:	fba2 2303 	umull	r2, r3, r2, r3
 80080f4:	095b      	lsrs	r3, r3, #5
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	f003 030f 	and.w	r3, r3, #15
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	4423      	add	r3, r4
 8008100:	b29b      	uxth	r3, r3
 8008102:	461a      	mov	r2, r3
 8008104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008108:	609a      	str	r2, [r3, #8]
}
 800810a:	bf00      	nop
 800810c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008110:	46bd      	mov	sp, r7
 8008112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008116:	bf00      	nop
 8008118:	51eb851f 	.word	0x51eb851f

0800811c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b088      	sub	sp, #32
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800812a:	2300      	movs	r3, #0
 800812c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f7ff fd8c 	bl	8007c4c <LL_USART_IsEnabled>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d15e      	bne.n	80081f8 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8008142:	f023 030c 	bic.w	r3, r3, #12
 8008146:	683a      	ldr	r2, [r7, #0]
 8008148:	6851      	ldr	r1, [r2, #4]
 800814a:	683a      	ldr	r2, [r7, #0]
 800814c:	68d2      	ldr	r2, [r2, #12]
 800814e:	4311      	orrs	r1, r2
 8008150:	683a      	ldr	r2, [r7, #0]
 8008152:	6912      	ldr	r2, [r2, #16]
 8008154:	4311      	orrs	r1, r2
 8008156:	683a      	ldr	r2, [r7, #0]
 8008158:	6992      	ldr	r2, [r2, #24]
 800815a:	430a      	orrs	r2, r1
 800815c:	431a      	orrs	r2, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	4619      	mov	r1, r3
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f7ff fd83 	bl	8007c74 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	695b      	ldr	r3, [r3, #20]
 8008172:	4619      	mov	r1, r3
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f7ff fd90 	bl	8007c9a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800817a:	f107 0308 	add.w	r3, r7, #8
 800817e:	4618      	mov	r0, r3
 8008180:	f7ff f932 	bl	80073e8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a1f      	ldr	r2, [pc, #124]	@ (8008204 <LL_USART_Init+0xe8>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d102      	bne.n	8008192 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	61bb      	str	r3, [r7, #24]
 8008190:	e021      	b.n	80081d6 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a1c      	ldr	r2, [pc, #112]	@ (8008208 <LL_USART_Init+0xec>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d102      	bne.n	80081a0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	61bb      	str	r3, [r7, #24]
 800819e:	e01a      	b.n	80081d6 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a1a      	ldr	r2, [pc, #104]	@ (800820c <LL_USART_Init+0xf0>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d102      	bne.n	80081ae <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	61bb      	str	r3, [r7, #24]
 80081ac:	e013      	b.n	80081d6 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a17      	ldr	r2, [pc, #92]	@ (8008210 <LL_USART_Init+0xf4>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d102      	bne.n	80081bc <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	61bb      	str	r3, [r7, #24]
 80081ba:	e00c      	b.n	80081d6 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4a15      	ldr	r2, [pc, #84]	@ (8008214 <LL_USART_Init+0xf8>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d102      	bne.n	80081ca <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	61bb      	str	r3, [r7, #24]
 80081c8:	e005      	b.n	80081d6 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4a12      	ldr	r2, [pc, #72]	@ (8008218 <LL_USART_Init+0xfc>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d101      	bne.n	80081d6 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00d      	beq.n	80081f8 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d009      	beq.n	80081f8 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80081e4:	2300      	movs	r3, #0
 80081e6:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80081f0:	69b9      	ldr	r1, [r7, #24]
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f7ff fd64 	bl	8007cc0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80081f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3720      	adds	r7, #32
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	40011000 	.word	0x40011000
 8008208:	40004400 	.word	0x40004400
 800820c:	40004800 	.word	0x40004800
 8008210:	40011400 	.word	0x40011400
 8008214:	40004c00 	.word	0x40004c00
 8008218:	40005000 	.word	0x40005000

0800821c <__cvt>:
 800821c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008220:	ec57 6b10 	vmov	r6, r7, d0
 8008224:	2f00      	cmp	r7, #0
 8008226:	460c      	mov	r4, r1
 8008228:	4619      	mov	r1, r3
 800822a:	463b      	mov	r3, r7
 800822c:	bfbb      	ittet	lt
 800822e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008232:	461f      	movlt	r7, r3
 8008234:	2300      	movge	r3, #0
 8008236:	232d      	movlt	r3, #45	@ 0x2d
 8008238:	700b      	strb	r3, [r1, #0]
 800823a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800823c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008240:	4691      	mov	r9, r2
 8008242:	f023 0820 	bic.w	r8, r3, #32
 8008246:	bfbc      	itt	lt
 8008248:	4632      	movlt	r2, r6
 800824a:	4616      	movlt	r6, r2
 800824c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008250:	d005      	beq.n	800825e <__cvt+0x42>
 8008252:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008256:	d100      	bne.n	800825a <__cvt+0x3e>
 8008258:	3401      	adds	r4, #1
 800825a:	2102      	movs	r1, #2
 800825c:	e000      	b.n	8008260 <__cvt+0x44>
 800825e:	2103      	movs	r1, #3
 8008260:	ab03      	add	r3, sp, #12
 8008262:	9301      	str	r3, [sp, #4]
 8008264:	ab02      	add	r3, sp, #8
 8008266:	9300      	str	r3, [sp, #0]
 8008268:	ec47 6b10 	vmov	d0, r6, r7
 800826c:	4653      	mov	r3, sl
 800826e:	4622      	mov	r2, r4
 8008270:	f000 ff3e 	bl	80090f0 <_dtoa_r>
 8008274:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008278:	4605      	mov	r5, r0
 800827a:	d119      	bne.n	80082b0 <__cvt+0x94>
 800827c:	f019 0f01 	tst.w	r9, #1
 8008280:	d00e      	beq.n	80082a0 <__cvt+0x84>
 8008282:	eb00 0904 	add.w	r9, r0, r4
 8008286:	2200      	movs	r2, #0
 8008288:	2300      	movs	r3, #0
 800828a:	4630      	mov	r0, r6
 800828c:	4639      	mov	r1, r7
 800828e:	f7f8 fc1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008292:	b108      	cbz	r0, 8008298 <__cvt+0x7c>
 8008294:	f8cd 900c 	str.w	r9, [sp, #12]
 8008298:	2230      	movs	r2, #48	@ 0x30
 800829a:	9b03      	ldr	r3, [sp, #12]
 800829c:	454b      	cmp	r3, r9
 800829e:	d31e      	bcc.n	80082de <__cvt+0xc2>
 80082a0:	9b03      	ldr	r3, [sp, #12]
 80082a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80082a4:	1b5b      	subs	r3, r3, r5
 80082a6:	4628      	mov	r0, r5
 80082a8:	6013      	str	r3, [r2, #0]
 80082aa:	b004      	add	sp, #16
 80082ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80082b4:	eb00 0904 	add.w	r9, r0, r4
 80082b8:	d1e5      	bne.n	8008286 <__cvt+0x6a>
 80082ba:	7803      	ldrb	r3, [r0, #0]
 80082bc:	2b30      	cmp	r3, #48	@ 0x30
 80082be:	d10a      	bne.n	80082d6 <__cvt+0xba>
 80082c0:	2200      	movs	r2, #0
 80082c2:	2300      	movs	r3, #0
 80082c4:	4630      	mov	r0, r6
 80082c6:	4639      	mov	r1, r7
 80082c8:	f7f8 fbfe 	bl	8000ac8 <__aeabi_dcmpeq>
 80082cc:	b918      	cbnz	r0, 80082d6 <__cvt+0xba>
 80082ce:	f1c4 0401 	rsb	r4, r4, #1
 80082d2:	f8ca 4000 	str.w	r4, [sl]
 80082d6:	f8da 3000 	ldr.w	r3, [sl]
 80082da:	4499      	add	r9, r3
 80082dc:	e7d3      	b.n	8008286 <__cvt+0x6a>
 80082de:	1c59      	adds	r1, r3, #1
 80082e0:	9103      	str	r1, [sp, #12]
 80082e2:	701a      	strb	r2, [r3, #0]
 80082e4:	e7d9      	b.n	800829a <__cvt+0x7e>

080082e6 <__exponent>:
 80082e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082e8:	2900      	cmp	r1, #0
 80082ea:	bfba      	itte	lt
 80082ec:	4249      	neglt	r1, r1
 80082ee:	232d      	movlt	r3, #45	@ 0x2d
 80082f0:	232b      	movge	r3, #43	@ 0x2b
 80082f2:	2909      	cmp	r1, #9
 80082f4:	7002      	strb	r2, [r0, #0]
 80082f6:	7043      	strb	r3, [r0, #1]
 80082f8:	dd29      	ble.n	800834e <__exponent+0x68>
 80082fa:	f10d 0307 	add.w	r3, sp, #7
 80082fe:	461d      	mov	r5, r3
 8008300:	270a      	movs	r7, #10
 8008302:	461a      	mov	r2, r3
 8008304:	fbb1 f6f7 	udiv	r6, r1, r7
 8008308:	fb07 1416 	mls	r4, r7, r6, r1
 800830c:	3430      	adds	r4, #48	@ 0x30
 800830e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008312:	460c      	mov	r4, r1
 8008314:	2c63      	cmp	r4, #99	@ 0x63
 8008316:	f103 33ff 	add.w	r3, r3, #4294967295
 800831a:	4631      	mov	r1, r6
 800831c:	dcf1      	bgt.n	8008302 <__exponent+0x1c>
 800831e:	3130      	adds	r1, #48	@ 0x30
 8008320:	1e94      	subs	r4, r2, #2
 8008322:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008326:	1c41      	adds	r1, r0, #1
 8008328:	4623      	mov	r3, r4
 800832a:	42ab      	cmp	r3, r5
 800832c:	d30a      	bcc.n	8008344 <__exponent+0x5e>
 800832e:	f10d 0309 	add.w	r3, sp, #9
 8008332:	1a9b      	subs	r3, r3, r2
 8008334:	42ac      	cmp	r4, r5
 8008336:	bf88      	it	hi
 8008338:	2300      	movhi	r3, #0
 800833a:	3302      	adds	r3, #2
 800833c:	4403      	add	r3, r0
 800833e:	1a18      	subs	r0, r3, r0
 8008340:	b003      	add	sp, #12
 8008342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008344:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008348:	f801 6f01 	strb.w	r6, [r1, #1]!
 800834c:	e7ed      	b.n	800832a <__exponent+0x44>
 800834e:	2330      	movs	r3, #48	@ 0x30
 8008350:	3130      	adds	r1, #48	@ 0x30
 8008352:	7083      	strb	r3, [r0, #2]
 8008354:	70c1      	strb	r1, [r0, #3]
 8008356:	1d03      	adds	r3, r0, #4
 8008358:	e7f1      	b.n	800833e <__exponent+0x58>
	...

0800835c <_printf_float>:
 800835c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008360:	b08d      	sub	sp, #52	@ 0x34
 8008362:	460c      	mov	r4, r1
 8008364:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008368:	4616      	mov	r6, r2
 800836a:	461f      	mov	r7, r3
 800836c:	4605      	mov	r5, r0
 800836e:	f000 fdbf 	bl	8008ef0 <_localeconv_r>
 8008372:	6803      	ldr	r3, [r0, #0]
 8008374:	9304      	str	r3, [sp, #16]
 8008376:	4618      	mov	r0, r3
 8008378:	f7f7 ff7a 	bl	8000270 <strlen>
 800837c:	2300      	movs	r3, #0
 800837e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008380:	f8d8 3000 	ldr.w	r3, [r8]
 8008384:	9005      	str	r0, [sp, #20]
 8008386:	3307      	adds	r3, #7
 8008388:	f023 0307 	bic.w	r3, r3, #7
 800838c:	f103 0208 	add.w	r2, r3, #8
 8008390:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008394:	f8d4 b000 	ldr.w	fp, [r4]
 8008398:	f8c8 2000 	str.w	r2, [r8]
 800839c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80083a0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80083a4:	9307      	str	r3, [sp, #28]
 80083a6:	f8cd 8018 	str.w	r8, [sp, #24]
 80083aa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80083ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083b2:	4b9c      	ldr	r3, [pc, #624]	@ (8008624 <_printf_float+0x2c8>)
 80083b4:	f04f 32ff 	mov.w	r2, #4294967295
 80083b8:	f7f8 fbb8 	bl	8000b2c <__aeabi_dcmpun>
 80083bc:	bb70      	cbnz	r0, 800841c <_printf_float+0xc0>
 80083be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083c2:	4b98      	ldr	r3, [pc, #608]	@ (8008624 <_printf_float+0x2c8>)
 80083c4:	f04f 32ff 	mov.w	r2, #4294967295
 80083c8:	f7f8 fb92 	bl	8000af0 <__aeabi_dcmple>
 80083cc:	bb30      	cbnz	r0, 800841c <_printf_float+0xc0>
 80083ce:	2200      	movs	r2, #0
 80083d0:	2300      	movs	r3, #0
 80083d2:	4640      	mov	r0, r8
 80083d4:	4649      	mov	r1, r9
 80083d6:	f7f8 fb81 	bl	8000adc <__aeabi_dcmplt>
 80083da:	b110      	cbz	r0, 80083e2 <_printf_float+0x86>
 80083dc:	232d      	movs	r3, #45	@ 0x2d
 80083de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083e2:	4a91      	ldr	r2, [pc, #580]	@ (8008628 <_printf_float+0x2cc>)
 80083e4:	4b91      	ldr	r3, [pc, #580]	@ (800862c <_printf_float+0x2d0>)
 80083e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80083ea:	bf94      	ite	ls
 80083ec:	4690      	movls	r8, r2
 80083ee:	4698      	movhi	r8, r3
 80083f0:	2303      	movs	r3, #3
 80083f2:	6123      	str	r3, [r4, #16]
 80083f4:	f02b 0304 	bic.w	r3, fp, #4
 80083f8:	6023      	str	r3, [r4, #0]
 80083fa:	f04f 0900 	mov.w	r9, #0
 80083fe:	9700      	str	r7, [sp, #0]
 8008400:	4633      	mov	r3, r6
 8008402:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008404:	4621      	mov	r1, r4
 8008406:	4628      	mov	r0, r5
 8008408:	f000 f9d2 	bl	80087b0 <_printf_common>
 800840c:	3001      	adds	r0, #1
 800840e:	f040 808d 	bne.w	800852c <_printf_float+0x1d0>
 8008412:	f04f 30ff 	mov.w	r0, #4294967295
 8008416:	b00d      	add	sp, #52	@ 0x34
 8008418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800841c:	4642      	mov	r2, r8
 800841e:	464b      	mov	r3, r9
 8008420:	4640      	mov	r0, r8
 8008422:	4649      	mov	r1, r9
 8008424:	f7f8 fb82 	bl	8000b2c <__aeabi_dcmpun>
 8008428:	b140      	cbz	r0, 800843c <_printf_float+0xe0>
 800842a:	464b      	mov	r3, r9
 800842c:	2b00      	cmp	r3, #0
 800842e:	bfbc      	itt	lt
 8008430:	232d      	movlt	r3, #45	@ 0x2d
 8008432:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008436:	4a7e      	ldr	r2, [pc, #504]	@ (8008630 <_printf_float+0x2d4>)
 8008438:	4b7e      	ldr	r3, [pc, #504]	@ (8008634 <_printf_float+0x2d8>)
 800843a:	e7d4      	b.n	80083e6 <_printf_float+0x8a>
 800843c:	6863      	ldr	r3, [r4, #4]
 800843e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008442:	9206      	str	r2, [sp, #24]
 8008444:	1c5a      	adds	r2, r3, #1
 8008446:	d13b      	bne.n	80084c0 <_printf_float+0x164>
 8008448:	2306      	movs	r3, #6
 800844a:	6063      	str	r3, [r4, #4]
 800844c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008450:	2300      	movs	r3, #0
 8008452:	6022      	str	r2, [r4, #0]
 8008454:	9303      	str	r3, [sp, #12]
 8008456:	ab0a      	add	r3, sp, #40	@ 0x28
 8008458:	e9cd a301 	strd	sl, r3, [sp, #4]
 800845c:	ab09      	add	r3, sp, #36	@ 0x24
 800845e:	9300      	str	r3, [sp, #0]
 8008460:	6861      	ldr	r1, [r4, #4]
 8008462:	ec49 8b10 	vmov	d0, r8, r9
 8008466:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800846a:	4628      	mov	r0, r5
 800846c:	f7ff fed6 	bl	800821c <__cvt>
 8008470:	9b06      	ldr	r3, [sp, #24]
 8008472:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008474:	2b47      	cmp	r3, #71	@ 0x47
 8008476:	4680      	mov	r8, r0
 8008478:	d129      	bne.n	80084ce <_printf_float+0x172>
 800847a:	1cc8      	adds	r0, r1, #3
 800847c:	db02      	blt.n	8008484 <_printf_float+0x128>
 800847e:	6863      	ldr	r3, [r4, #4]
 8008480:	4299      	cmp	r1, r3
 8008482:	dd41      	ble.n	8008508 <_printf_float+0x1ac>
 8008484:	f1aa 0a02 	sub.w	sl, sl, #2
 8008488:	fa5f fa8a 	uxtb.w	sl, sl
 800848c:	3901      	subs	r1, #1
 800848e:	4652      	mov	r2, sl
 8008490:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008494:	9109      	str	r1, [sp, #36]	@ 0x24
 8008496:	f7ff ff26 	bl	80082e6 <__exponent>
 800849a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800849c:	1813      	adds	r3, r2, r0
 800849e:	2a01      	cmp	r2, #1
 80084a0:	4681      	mov	r9, r0
 80084a2:	6123      	str	r3, [r4, #16]
 80084a4:	dc02      	bgt.n	80084ac <_printf_float+0x150>
 80084a6:	6822      	ldr	r2, [r4, #0]
 80084a8:	07d2      	lsls	r2, r2, #31
 80084aa:	d501      	bpl.n	80084b0 <_printf_float+0x154>
 80084ac:	3301      	adds	r3, #1
 80084ae:	6123      	str	r3, [r4, #16]
 80084b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d0a2      	beq.n	80083fe <_printf_float+0xa2>
 80084b8:	232d      	movs	r3, #45	@ 0x2d
 80084ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084be:	e79e      	b.n	80083fe <_printf_float+0xa2>
 80084c0:	9a06      	ldr	r2, [sp, #24]
 80084c2:	2a47      	cmp	r2, #71	@ 0x47
 80084c4:	d1c2      	bne.n	800844c <_printf_float+0xf0>
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1c0      	bne.n	800844c <_printf_float+0xf0>
 80084ca:	2301      	movs	r3, #1
 80084cc:	e7bd      	b.n	800844a <_printf_float+0xee>
 80084ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80084d2:	d9db      	bls.n	800848c <_printf_float+0x130>
 80084d4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80084d8:	d118      	bne.n	800850c <_printf_float+0x1b0>
 80084da:	2900      	cmp	r1, #0
 80084dc:	6863      	ldr	r3, [r4, #4]
 80084de:	dd0b      	ble.n	80084f8 <_printf_float+0x19c>
 80084e0:	6121      	str	r1, [r4, #16]
 80084e2:	b913      	cbnz	r3, 80084ea <_printf_float+0x18e>
 80084e4:	6822      	ldr	r2, [r4, #0]
 80084e6:	07d0      	lsls	r0, r2, #31
 80084e8:	d502      	bpl.n	80084f0 <_printf_float+0x194>
 80084ea:	3301      	adds	r3, #1
 80084ec:	440b      	add	r3, r1
 80084ee:	6123      	str	r3, [r4, #16]
 80084f0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80084f2:	f04f 0900 	mov.w	r9, #0
 80084f6:	e7db      	b.n	80084b0 <_printf_float+0x154>
 80084f8:	b913      	cbnz	r3, 8008500 <_printf_float+0x1a4>
 80084fa:	6822      	ldr	r2, [r4, #0]
 80084fc:	07d2      	lsls	r2, r2, #31
 80084fe:	d501      	bpl.n	8008504 <_printf_float+0x1a8>
 8008500:	3302      	adds	r3, #2
 8008502:	e7f4      	b.n	80084ee <_printf_float+0x192>
 8008504:	2301      	movs	r3, #1
 8008506:	e7f2      	b.n	80084ee <_printf_float+0x192>
 8008508:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800850c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800850e:	4299      	cmp	r1, r3
 8008510:	db05      	blt.n	800851e <_printf_float+0x1c2>
 8008512:	6823      	ldr	r3, [r4, #0]
 8008514:	6121      	str	r1, [r4, #16]
 8008516:	07d8      	lsls	r0, r3, #31
 8008518:	d5ea      	bpl.n	80084f0 <_printf_float+0x194>
 800851a:	1c4b      	adds	r3, r1, #1
 800851c:	e7e7      	b.n	80084ee <_printf_float+0x192>
 800851e:	2900      	cmp	r1, #0
 8008520:	bfd4      	ite	le
 8008522:	f1c1 0202 	rsble	r2, r1, #2
 8008526:	2201      	movgt	r2, #1
 8008528:	4413      	add	r3, r2
 800852a:	e7e0      	b.n	80084ee <_printf_float+0x192>
 800852c:	6823      	ldr	r3, [r4, #0]
 800852e:	055a      	lsls	r2, r3, #21
 8008530:	d407      	bmi.n	8008542 <_printf_float+0x1e6>
 8008532:	6923      	ldr	r3, [r4, #16]
 8008534:	4642      	mov	r2, r8
 8008536:	4631      	mov	r1, r6
 8008538:	4628      	mov	r0, r5
 800853a:	47b8      	blx	r7
 800853c:	3001      	adds	r0, #1
 800853e:	d12b      	bne.n	8008598 <_printf_float+0x23c>
 8008540:	e767      	b.n	8008412 <_printf_float+0xb6>
 8008542:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008546:	f240 80dd 	bls.w	8008704 <_printf_float+0x3a8>
 800854a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800854e:	2200      	movs	r2, #0
 8008550:	2300      	movs	r3, #0
 8008552:	f7f8 fab9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008556:	2800      	cmp	r0, #0
 8008558:	d033      	beq.n	80085c2 <_printf_float+0x266>
 800855a:	4a37      	ldr	r2, [pc, #220]	@ (8008638 <_printf_float+0x2dc>)
 800855c:	2301      	movs	r3, #1
 800855e:	4631      	mov	r1, r6
 8008560:	4628      	mov	r0, r5
 8008562:	47b8      	blx	r7
 8008564:	3001      	adds	r0, #1
 8008566:	f43f af54 	beq.w	8008412 <_printf_float+0xb6>
 800856a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800856e:	4543      	cmp	r3, r8
 8008570:	db02      	blt.n	8008578 <_printf_float+0x21c>
 8008572:	6823      	ldr	r3, [r4, #0]
 8008574:	07d8      	lsls	r0, r3, #31
 8008576:	d50f      	bpl.n	8008598 <_printf_float+0x23c>
 8008578:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800857c:	4631      	mov	r1, r6
 800857e:	4628      	mov	r0, r5
 8008580:	47b8      	blx	r7
 8008582:	3001      	adds	r0, #1
 8008584:	f43f af45 	beq.w	8008412 <_printf_float+0xb6>
 8008588:	f04f 0900 	mov.w	r9, #0
 800858c:	f108 38ff 	add.w	r8, r8, #4294967295
 8008590:	f104 0a1a 	add.w	sl, r4, #26
 8008594:	45c8      	cmp	r8, r9
 8008596:	dc09      	bgt.n	80085ac <_printf_float+0x250>
 8008598:	6823      	ldr	r3, [r4, #0]
 800859a:	079b      	lsls	r3, r3, #30
 800859c:	f100 8103 	bmi.w	80087a6 <_printf_float+0x44a>
 80085a0:	68e0      	ldr	r0, [r4, #12]
 80085a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085a4:	4298      	cmp	r0, r3
 80085a6:	bfb8      	it	lt
 80085a8:	4618      	movlt	r0, r3
 80085aa:	e734      	b.n	8008416 <_printf_float+0xba>
 80085ac:	2301      	movs	r3, #1
 80085ae:	4652      	mov	r2, sl
 80085b0:	4631      	mov	r1, r6
 80085b2:	4628      	mov	r0, r5
 80085b4:	47b8      	blx	r7
 80085b6:	3001      	adds	r0, #1
 80085b8:	f43f af2b 	beq.w	8008412 <_printf_float+0xb6>
 80085bc:	f109 0901 	add.w	r9, r9, #1
 80085c0:	e7e8      	b.n	8008594 <_printf_float+0x238>
 80085c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	dc39      	bgt.n	800863c <_printf_float+0x2e0>
 80085c8:	4a1b      	ldr	r2, [pc, #108]	@ (8008638 <_printf_float+0x2dc>)
 80085ca:	2301      	movs	r3, #1
 80085cc:	4631      	mov	r1, r6
 80085ce:	4628      	mov	r0, r5
 80085d0:	47b8      	blx	r7
 80085d2:	3001      	adds	r0, #1
 80085d4:	f43f af1d 	beq.w	8008412 <_printf_float+0xb6>
 80085d8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80085dc:	ea59 0303 	orrs.w	r3, r9, r3
 80085e0:	d102      	bne.n	80085e8 <_printf_float+0x28c>
 80085e2:	6823      	ldr	r3, [r4, #0]
 80085e4:	07d9      	lsls	r1, r3, #31
 80085e6:	d5d7      	bpl.n	8008598 <_printf_float+0x23c>
 80085e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085ec:	4631      	mov	r1, r6
 80085ee:	4628      	mov	r0, r5
 80085f0:	47b8      	blx	r7
 80085f2:	3001      	adds	r0, #1
 80085f4:	f43f af0d 	beq.w	8008412 <_printf_float+0xb6>
 80085f8:	f04f 0a00 	mov.w	sl, #0
 80085fc:	f104 0b1a 	add.w	fp, r4, #26
 8008600:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008602:	425b      	negs	r3, r3
 8008604:	4553      	cmp	r3, sl
 8008606:	dc01      	bgt.n	800860c <_printf_float+0x2b0>
 8008608:	464b      	mov	r3, r9
 800860a:	e793      	b.n	8008534 <_printf_float+0x1d8>
 800860c:	2301      	movs	r3, #1
 800860e:	465a      	mov	r2, fp
 8008610:	4631      	mov	r1, r6
 8008612:	4628      	mov	r0, r5
 8008614:	47b8      	blx	r7
 8008616:	3001      	adds	r0, #1
 8008618:	f43f aefb 	beq.w	8008412 <_printf_float+0xb6>
 800861c:	f10a 0a01 	add.w	sl, sl, #1
 8008620:	e7ee      	b.n	8008600 <_printf_float+0x2a4>
 8008622:	bf00      	nop
 8008624:	7fefffff 	.word	0x7fefffff
 8008628:	0800ae3c 	.word	0x0800ae3c
 800862c:	0800ae40 	.word	0x0800ae40
 8008630:	0800ae44 	.word	0x0800ae44
 8008634:	0800ae48 	.word	0x0800ae48
 8008638:	0800ae4c 	.word	0x0800ae4c
 800863c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800863e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008642:	4553      	cmp	r3, sl
 8008644:	bfa8      	it	ge
 8008646:	4653      	movge	r3, sl
 8008648:	2b00      	cmp	r3, #0
 800864a:	4699      	mov	r9, r3
 800864c:	dc36      	bgt.n	80086bc <_printf_float+0x360>
 800864e:	f04f 0b00 	mov.w	fp, #0
 8008652:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008656:	f104 021a 	add.w	r2, r4, #26
 800865a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800865c:	9306      	str	r3, [sp, #24]
 800865e:	eba3 0309 	sub.w	r3, r3, r9
 8008662:	455b      	cmp	r3, fp
 8008664:	dc31      	bgt.n	80086ca <_printf_float+0x36e>
 8008666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008668:	459a      	cmp	sl, r3
 800866a:	dc3a      	bgt.n	80086e2 <_printf_float+0x386>
 800866c:	6823      	ldr	r3, [r4, #0]
 800866e:	07da      	lsls	r2, r3, #31
 8008670:	d437      	bmi.n	80086e2 <_printf_float+0x386>
 8008672:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008674:	ebaa 0903 	sub.w	r9, sl, r3
 8008678:	9b06      	ldr	r3, [sp, #24]
 800867a:	ebaa 0303 	sub.w	r3, sl, r3
 800867e:	4599      	cmp	r9, r3
 8008680:	bfa8      	it	ge
 8008682:	4699      	movge	r9, r3
 8008684:	f1b9 0f00 	cmp.w	r9, #0
 8008688:	dc33      	bgt.n	80086f2 <_printf_float+0x396>
 800868a:	f04f 0800 	mov.w	r8, #0
 800868e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008692:	f104 0b1a 	add.w	fp, r4, #26
 8008696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008698:	ebaa 0303 	sub.w	r3, sl, r3
 800869c:	eba3 0309 	sub.w	r3, r3, r9
 80086a0:	4543      	cmp	r3, r8
 80086a2:	f77f af79 	ble.w	8008598 <_printf_float+0x23c>
 80086a6:	2301      	movs	r3, #1
 80086a8:	465a      	mov	r2, fp
 80086aa:	4631      	mov	r1, r6
 80086ac:	4628      	mov	r0, r5
 80086ae:	47b8      	blx	r7
 80086b0:	3001      	adds	r0, #1
 80086b2:	f43f aeae 	beq.w	8008412 <_printf_float+0xb6>
 80086b6:	f108 0801 	add.w	r8, r8, #1
 80086ba:	e7ec      	b.n	8008696 <_printf_float+0x33a>
 80086bc:	4642      	mov	r2, r8
 80086be:	4631      	mov	r1, r6
 80086c0:	4628      	mov	r0, r5
 80086c2:	47b8      	blx	r7
 80086c4:	3001      	adds	r0, #1
 80086c6:	d1c2      	bne.n	800864e <_printf_float+0x2f2>
 80086c8:	e6a3      	b.n	8008412 <_printf_float+0xb6>
 80086ca:	2301      	movs	r3, #1
 80086cc:	4631      	mov	r1, r6
 80086ce:	4628      	mov	r0, r5
 80086d0:	9206      	str	r2, [sp, #24]
 80086d2:	47b8      	blx	r7
 80086d4:	3001      	adds	r0, #1
 80086d6:	f43f ae9c 	beq.w	8008412 <_printf_float+0xb6>
 80086da:	9a06      	ldr	r2, [sp, #24]
 80086dc:	f10b 0b01 	add.w	fp, fp, #1
 80086e0:	e7bb      	b.n	800865a <_printf_float+0x2fe>
 80086e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086e6:	4631      	mov	r1, r6
 80086e8:	4628      	mov	r0, r5
 80086ea:	47b8      	blx	r7
 80086ec:	3001      	adds	r0, #1
 80086ee:	d1c0      	bne.n	8008672 <_printf_float+0x316>
 80086f0:	e68f      	b.n	8008412 <_printf_float+0xb6>
 80086f2:	9a06      	ldr	r2, [sp, #24]
 80086f4:	464b      	mov	r3, r9
 80086f6:	4442      	add	r2, r8
 80086f8:	4631      	mov	r1, r6
 80086fa:	4628      	mov	r0, r5
 80086fc:	47b8      	blx	r7
 80086fe:	3001      	adds	r0, #1
 8008700:	d1c3      	bne.n	800868a <_printf_float+0x32e>
 8008702:	e686      	b.n	8008412 <_printf_float+0xb6>
 8008704:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008708:	f1ba 0f01 	cmp.w	sl, #1
 800870c:	dc01      	bgt.n	8008712 <_printf_float+0x3b6>
 800870e:	07db      	lsls	r3, r3, #31
 8008710:	d536      	bpl.n	8008780 <_printf_float+0x424>
 8008712:	2301      	movs	r3, #1
 8008714:	4642      	mov	r2, r8
 8008716:	4631      	mov	r1, r6
 8008718:	4628      	mov	r0, r5
 800871a:	47b8      	blx	r7
 800871c:	3001      	adds	r0, #1
 800871e:	f43f ae78 	beq.w	8008412 <_printf_float+0xb6>
 8008722:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008726:	4631      	mov	r1, r6
 8008728:	4628      	mov	r0, r5
 800872a:	47b8      	blx	r7
 800872c:	3001      	adds	r0, #1
 800872e:	f43f ae70 	beq.w	8008412 <_printf_float+0xb6>
 8008732:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008736:	2200      	movs	r2, #0
 8008738:	2300      	movs	r3, #0
 800873a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800873e:	f7f8 f9c3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008742:	b9c0      	cbnz	r0, 8008776 <_printf_float+0x41a>
 8008744:	4653      	mov	r3, sl
 8008746:	f108 0201 	add.w	r2, r8, #1
 800874a:	4631      	mov	r1, r6
 800874c:	4628      	mov	r0, r5
 800874e:	47b8      	blx	r7
 8008750:	3001      	adds	r0, #1
 8008752:	d10c      	bne.n	800876e <_printf_float+0x412>
 8008754:	e65d      	b.n	8008412 <_printf_float+0xb6>
 8008756:	2301      	movs	r3, #1
 8008758:	465a      	mov	r2, fp
 800875a:	4631      	mov	r1, r6
 800875c:	4628      	mov	r0, r5
 800875e:	47b8      	blx	r7
 8008760:	3001      	adds	r0, #1
 8008762:	f43f ae56 	beq.w	8008412 <_printf_float+0xb6>
 8008766:	f108 0801 	add.w	r8, r8, #1
 800876a:	45d0      	cmp	r8, sl
 800876c:	dbf3      	blt.n	8008756 <_printf_float+0x3fa>
 800876e:	464b      	mov	r3, r9
 8008770:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008774:	e6df      	b.n	8008536 <_printf_float+0x1da>
 8008776:	f04f 0800 	mov.w	r8, #0
 800877a:	f104 0b1a 	add.w	fp, r4, #26
 800877e:	e7f4      	b.n	800876a <_printf_float+0x40e>
 8008780:	2301      	movs	r3, #1
 8008782:	4642      	mov	r2, r8
 8008784:	e7e1      	b.n	800874a <_printf_float+0x3ee>
 8008786:	2301      	movs	r3, #1
 8008788:	464a      	mov	r2, r9
 800878a:	4631      	mov	r1, r6
 800878c:	4628      	mov	r0, r5
 800878e:	47b8      	blx	r7
 8008790:	3001      	adds	r0, #1
 8008792:	f43f ae3e 	beq.w	8008412 <_printf_float+0xb6>
 8008796:	f108 0801 	add.w	r8, r8, #1
 800879a:	68e3      	ldr	r3, [r4, #12]
 800879c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800879e:	1a5b      	subs	r3, r3, r1
 80087a0:	4543      	cmp	r3, r8
 80087a2:	dcf0      	bgt.n	8008786 <_printf_float+0x42a>
 80087a4:	e6fc      	b.n	80085a0 <_printf_float+0x244>
 80087a6:	f04f 0800 	mov.w	r8, #0
 80087aa:	f104 0919 	add.w	r9, r4, #25
 80087ae:	e7f4      	b.n	800879a <_printf_float+0x43e>

080087b0 <_printf_common>:
 80087b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087b4:	4616      	mov	r6, r2
 80087b6:	4698      	mov	r8, r3
 80087b8:	688a      	ldr	r2, [r1, #8]
 80087ba:	690b      	ldr	r3, [r1, #16]
 80087bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80087c0:	4293      	cmp	r3, r2
 80087c2:	bfb8      	it	lt
 80087c4:	4613      	movlt	r3, r2
 80087c6:	6033      	str	r3, [r6, #0]
 80087c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80087cc:	4607      	mov	r7, r0
 80087ce:	460c      	mov	r4, r1
 80087d0:	b10a      	cbz	r2, 80087d6 <_printf_common+0x26>
 80087d2:	3301      	adds	r3, #1
 80087d4:	6033      	str	r3, [r6, #0]
 80087d6:	6823      	ldr	r3, [r4, #0]
 80087d8:	0699      	lsls	r1, r3, #26
 80087da:	bf42      	ittt	mi
 80087dc:	6833      	ldrmi	r3, [r6, #0]
 80087de:	3302      	addmi	r3, #2
 80087e0:	6033      	strmi	r3, [r6, #0]
 80087e2:	6825      	ldr	r5, [r4, #0]
 80087e4:	f015 0506 	ands.w	r5, r5, #6
 80087e8:	d106      	bne.n	80087f8 <_printf_common+0x48>
 80087ea:	f104 0a19 	add.w	sl, r4, #25
 80087ee:	68e3      	ldr	r3, [r4, #12]
 80087f0:	6832      	ldr	r2, [r6, #0]
 80087f2:	1a9b      	subs	r3, r3, r2
 80087f4:	42ab      	cmp	r3, r5
 80087f6:	dc26      	bgt.n	8008846 <_printf_common+0x96>
 80087f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80087fc:	6822      	ldr	r2, [r4, #0]
 80087fe:	3b00      	subs	r3, #0
 8008800:	bf18      	it	ne
 8008802:	2301      	movne	r3, #1
 8008804:	0692      	lsls	r2, r2, #26
 8008806:	d42b      	bmi.n	8008860 <_printf_common+0xb0>
 8008808:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800880c:	4641      	mov	r1, r8
 800880e:	4638      	mov	r0, r7
 8008810:	47c8      	blx	r9
 8008812:	3001      	adds	r0, #1
 8008814:	d01e      	beq.n	8008854 <_printf_common+0xa4>
 8008816:	6823      	ldr	r3, [r4, #0]
 8008818:	6922      	ldr	r2, [r4, #16]
 800881a:	f003 0306 	and.w	r3, r3, #6
 800881e:	2b04      	cmp	r3, #4
 8008820:	bf02      	ittt	eq
 8008822:	68e5      	ldreq	r5, [r4, #12]
 8008824:	6833      	ldreq	r3, [r6, #0]
 8008826:	1aed      	subeq	r5, r5, r3
 8008828:	68a3      	ldr	r3, [r4, #8]
 800882a:	bf0c      	ite	eq
 800882c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008830:	2500      	movne	r5, #0
 8008832:	4293      	cmp	r3, r2
 8008834:	bfc4      	itt	gt
 8008836:	1a9b      	subgt	r3, r3, r2
 8008838:	18ed      	addgt	r5, r5, r3
 800883a:	2600      	movs	r6, #0
 800883c:	341a      	adds	r4, #26
 800883e:	42b5      	cmp	r5, r6
 8008840:	d11a      	bne.n	8008878 <_printf_common+0xc8>
 8008842:	2000      	movs	r0, #0
 8008844:	e008      	b.n	8008858 <_printf_common+0xa8>
 8008846:	2301      	movs	r3, #1
 8008848:	4652      	mov	r2, sl
 800884a:	4641      	mov	r1, r8
 800884c:	4638      	mov	r0, r7
 800884e:	47c8      	blx	r9
 8008850:	3001      	adds	r0, #1
 8008852:	d103      	bne.n	800885c <_printf_common+0xac>
 8008854:	f04f 30ff 	mov.w	r0, #4294967295
 8008858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800885c:	3501      	adds	r5, #1
 800885e:	e7c6      	b.n	80087ee <_printf_common+0x3e>
 8008860:	18e1      	adds	r1, r4, r3
 8008862:	1c5a      	adds	r2, r3, #1
 8008864:	2030      	movs	r0, #48	@ 0x30
 8008866:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800886a:	4422      	add	r2, r4
 800886c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008870:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008874:	3302      	adds	r3, #2
 8008876:	e7c7      	b.n	8008808 <_printf_common+0x58>
 8008878:	2301      	movs	r3, #1
 800887a:	4622      	mov	r2, r4
 800887c:	4641      	mov	r1, r8
 800887e:	4638      	mov	r0, r7
 8008880:	47c8      	blx	r9
 8008882:	3001      	adds	r0, #1
 8008884:	d0e6      	beq.n	8008854 <_printf_common+0xa4>
 8008886:	3601      	adds	r6, #1
 8008888:	e7d9      	b.n	800883e <_printf_common+0x8e>
	...

0800888c <_printf_i>:
 800888c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008890:	7e0f      	ldrb	r7, [r1, #24]
 8008892:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008894:	2f78      	cmp	r7, #120	@ 0x78
 8008896:	4691      	mov	r9, r2
 8008898:	4680      	mov	r8, r0
 800889a:	460c      	mov	r4, r1
 800889c:	469a      	mov	sl, r3
 800889e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80088a2:	d807      	bhi.n	80088b4 <_printf_i+0x28>
 80088a4:	2f62      	cmp	r7, #98	@ 0x62
 80088a6:	d80a      	bhi.n	80088be <_printf_i+0x32>
 80088a8:	2f00      	cmp	r7, #0
 80088aa:	f000 80d2 	beq.w	8008a52 <_printf_i+0x1c6>
 80088ae:	2f58      	cmp	r7, #88	@ 0x58
 80088b0:	f000 80b9 	beq.w	8008a26 <_printf_i+0x19a>
 80088b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80088bc:	e03a      	b.n	8008934 <_printf_i+0xa8>
 80088be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80088c2:	2b15      	cmp	r3, #21
 80088c4:	d8f6      	bhi.n	80088b4 <_printf_i+0x28>
 80088c6:	a101      	add	r1, pc, #4	@ (adr r1, 80088cc <_printf_i+0x40>)
 80088c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088cc:	08008925 	.word	0x08008925
 80088d0:	08008939 	.word	0x08008939
 80088d4:	080088b5 	.word	0x080088b5
 80088d8:	080088b5 	.word	0x080088b5
 80088dc:	080088b5 	.word	0x080088b5
 80088e0:	080088b5 	.word	0x080088b5
 80088e4:	08008939 	.word	0x08008939
 80088e8:	080088b5 	.word	0x080088b5
 80088ec:	080088b5 	.word	0x080088b5
 80088f0:	080088b5 	.word	0x080088b5
 80088f4:	080088b5 	.word	0x080088b5
 80088f8:	08008a39 	.word	0x08008a39
 80088fc:	08008963 	.word	0x08008963
 8008900:	080089f3 	.word	0x080089f3
 8008904:	080088b5 	.word	0x080088b5
 8008908:	080088b5 	.word	0x080088b5
 800890c:	08008a5b 	.word	0x08008a5b
 8008910:	080088b5 	.word	0x080088b5
 8008914:	08008963 	.word	0x08008963
 8008918:	080088b5 	.word	0x080088b5
 800891c:	080088b5 	.word	0x080088b5
 8008920:	080089fb 	.word	0x080089fb
 8008924:	6833      	ldr	r3, [r6, #0]
 8008926:	1d1a      	adds	r2, r3, #4
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	6032      	str	r2, [r6, #0]
 800892c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008930:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008934:	2301      	movs	r3, #1
 8008936:	e09d      	b.n	8008a74 <_printf_i+0x1e8>
 8008938:	6833      	ldr	r3, [r6, #0]
 800893a:	6820      	ldr	r0, [r4, #0]
 800893c:	1d19      	adds	r1, r3, #4
 800893e:	6031      	str	r1, [r6, #0]
 8008940:	0606      	lsls	r6, r0, #24
 8008942:	d501      	bpl.n	8008948 <_printf_i+0xbc>
 8008944:	681d      	ldr	r5, [r3, #0]
 8008946:	e003      	b.n	8008950 <_printf_i+0xc4>
 8008948:	0645      	lsls	r5, r0, #25
 800894a:	d5fb      	bpl.n	8008944 <_printf_i+0xb8>
 800894c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008950:	2d00      	cmp	r5, #0
 8008952:	da03      	bge.n	800895c <_printf_i+0xd0>
 8008954:	232d      	movs	r3, #45	@ 0x2d
 8008956:	426d      	negs	r5, r5
 8008958:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800895c:	4859      	ldr	r0, [pc, #356]	@ (8008ac4 <_printf_i+0x238>)
 800895e:	230a      	movs	r3, #10
 8008960:	e011      	b.n	8008986 <_printf_i+0xfa>
 8008962:	6821      	ldr	r1, [r4, #0]
 8008964:	6833      	ldr	r3, [r6, #0]
 8008966:	0608      	lsls	r0, r1, #24
 8008968:	f853 5b04 	ldr.w	r5, [r3], #4
 800896c:	d402      	bmi.n	8008974 <_printf_i+0xe8>
 800896e:	0649      	lsls	r1, r1, #25
 8008970:	bf48      	it	mi
 8008972:	b2ad      	uxthmi	r5, r5
 8008974:	2f6f      	cmp	r7, #111	@ 0x6f
 8008976:	4853      	ldr	r0, [pc, #332]	@ (8008ac4 <_printf_i+0x238>)
 8008978:	6033      	str	r3, [r6, #0]
 800897a:	bf14      	ite	ne
 800897c:	230a      	movne	r3, #10
 800897e:	2308      	moveq	r3, #8
 8008980:	2100      	movs	r1, #0
 8008982:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008986:	6866      	ldr	r6, [r4, #4]
 8008988:	60a6      	str	r6, [r4, #8]
 800898a:	2e00      	cmp	r6, #0
 800898c:	bfa2      	ittt	ge
 800898e:	6821      	ldrge	r1, [r4, #0]
 8008990:	f021 0104 	bicge.w	r1, r1, #4
 8008994:	6021      	strge	r1, [r4, #0]
 8008996:	b90d      	cbnz	r5, 800899c <_printf_i+0x110>
 8008998:	2e00      	cmp	r6, #0
 800899a:	d04b      	beq.n	8008a34 <_printf_i+0x1a8>
 800899c:	4616      	mov	r6, r2
 800899e:	fbb5 f1f3 	udiv	r1, r5, r3
 80089a2:	fb03 5711 	mls	r7, r3, r1, r5
 80089a6:	5dc7      	ldrb	r7, [r0, r7]
 80089a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80089ac:	462f      	mov	r7, r5
 80089ae:	42bb      	cmp	r3, r7
 80089b0:	460d      	mov	r5, r1
 80089b2:	d9f4      	bls.n	800899e <_printf_i+0x112>
 80089b4:	2b08      	cmp	r3, #8
 80089b6:	d10b      	bne.n	80089d0 <_printf_i+0x144>
 80089b8:	6823      	ldr	r3, [r4, #0]
 80089ba:	07df      	lsls	r7, r3, #31
 80089bc:	d508      	bpl.n	80089d0 <_printf_i+0x144>
 80089be:	6923      	ldr	r3, [r4, #16]
 80089c0:	6861      	ldr	r1, [r4, #4]
 80089c2:	4299      	cmp	r1, r3
 80089c4:	bfde      	ittt	le
 80089c6:	2330      	movle	r3, #48	@ 0x30
 80089c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80089cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80089d0:	1b92      	subs	r2, r2, r6
 80089d2:	6122      	str	r2, [r4, #16]
 80089d4:	f8cd a000 	str.w	sl, [sp]
 80089d8:	464b      	mov	r3, r9
 80089da:	aa03      	add	r2, sp, #12
 80089dc:	4621      	mov	r1, r4
 80089de:	4640      	mov	r0, r8
 80089e0:	f7ff fee6 	bl	80087b0 <_printf_common>
 80089e4:	3001      	adds	r0, #1
 80089e6:	d14a      	bne.n	8008a7e <_printf_i+0x1f2>
 80089e8:	f04f 30ff 	mov.w	r0, #4294967295
 80089ec:	b004      	add	sp, #16
 80089ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089f2:	6823      	ldr	r3, [r4, #0]
 80089f4:	f043 0320 	orr.w	r3, r3, #32
 80089f8:	6023      	str	r3, [r4, #0]
 80089fa:	4833      	ldr	r0, [pc, #204]	@ (8008ac8 <_printf_i+0x23c>)
 80089fc:	2778      	movs	r7, #120	@ 0x78
 80089fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008a02:	6823      	ldr	r3, [r4, #0]
 8008a04:	6831      	ldr	r1, [r6, #0]
 8008a06:	061f      	lsls	r7, r3, #24
 8008a08:	f851 5b04 	ldr.w	r5, [r1], #4
 8008a0c:	d402      	bmi.n	8008a14 <_printf_i+0x188>
 8008a0e:	065f      	lsls	r7, r3, #25
 8008a10:	bf48      	it	mi
 8008a12:	b2ad      	uxthmi	r5, r5
 8008a14:	6031      	str	r1, [r6, #0]
 8008a16:	07d9      	lsls	r1, r3, #31
 8008a18:	bf44      	itt	mi
 8008a1a:	f043 0320 	orrmi.w	r3, r3, #32
 8008a1e:	6023      	strmi	r3, [r4, #0]
 8008a20:	b11d      	cbz	r5, 8008a2a <_printf_i+0x19e>
 8008a22:	2310      	movs	r3, #16
 8008a24:	e7ac      	b.n	8008980 <_printf_i+0xf4>
 8008a26:	4827      	ldr	r0, [pc, #156]	@ (8008ac4 <_printf_i+0x238>)
 8008a28:	e7e9      	b.n	80089fe <_printf_i+0x172>
 8008a2a:	6823      	ldr	r3, [r4, #0]
 8008a2c:	f023 0320 	bic.w	r3, r3, #32
 8008a30:	6023      	str	r3, [r4, #0]
 8008a32:	e7f6      	b.n	8008a22 <_printf_i+0x196>
 8008a34:	4616      	mov	r6, r2
 8008a36:	e7bd      	b.n	80089b4 <_printf_i+0x128>
 8008a38:	6833      	ldr	r3, [r6, #0]
 8008a3a:	6825      	ldr	r5, [r4, #0]
 8008a3c:	6961      	ldr	r1, [r4, #20]
 8008a3e:	1d18      	adds	r0, r3, #4
 8008a40:	6030      	str	r0, [r6, #0]
 8008a42:	062e      	lsls	r6, r5, #24
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	d501      	bpl.n	8008a4c <_printf_i+0x1c0>
 8008a48:	6019      	str	r1, [r3, #0]
 8008a4a:	e002      	b.n	8008a52 <_printf_i+0x1c6>
 8008a4c:	0668      	lsls	r0, r5, #25
 8008a4e:	d5fb      	bpl.n	8008a48 <_printf_i+0x1bc>
 8008a50:	8019      	strh	r1, [r3, #0]
 8008a52:	2300      	movs	r3, #0
 8008a54:	6123      	str	r3, [r4, #16]
 8008a56:	4616      	mov	r6, r2
 8008a58:	e7bc      	b.n	80089d4 <_printf_i+0x148>
 8008a5a:	6833      	ldr	r3, [r6, #0]
 8008a5c:	1d1a      	adds	r2, r3, #4
 8008a5e:	6032      	str	r2, [r6, #0]
 8008a60:	681e      	ldr	r6, [r3, #0]
 8008a62:	6862      	ldr	r2, [r4, #4]
 8008a64:	2100      	movs	r1, #0
 8008a66:	4630      	mov	r0, r6
 8008a68:	f7f7 fbb2 	bl	80001d0 <memchr>
 8008a6c:	b108      	cbz	r0, 8008a72 <_printf_i+0x1e6>
 8008a6e:	1b80      	subs	r0, r0, r6
 8008a70:	6060      	str	r0, [r4, #4]
 8008a72:	6863      	ldr	r3, [r4, #4]
 8008a74:	6123      	str	r3, [r4, #16]
 8008a76:	2300      	movs	r3, #0
 8008a78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a7c:	e7aa      	b.n	80089d4 <_printf_i+0x148>
 8008a7e:	6923      	ldr	r3, [r4, #16]
 8008a80:	4632      	mov	r2, r6
 8008a82:	4649      	mov	r1, r9
 8008a84:	4640      	mov	r0, r8
 8008a86:	47d0      	blx	sl
 8008a88:	3001      	adds	r0, #1
 8008a8a:	d0ad      	beq.n	80089e8 <_printf_i+0x15c>
 8008a8c:	6823      	ldr	r3, [r4, #0]
 8008a8e:	079b      	lsls	r3, r3, #30
 8008a90:	d413      	bmi.n	8008aba <_printf_i+0x22e>
 8008a92:	68e0      	ldr	r0, [r4, #12]
 8008a94:	9b03      	ldr	r3, [sp, #12]
 8008a96:	4298      	cmp	r0, r3
 8008a98:	bfb8      	it	lt
 8008a9a:	4618      	movlt	r0, r3
 8008a9c:	e7a6      	b.n	80089ec <_printf_i+0x160>
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	4632      	mov	r2, r6
 8008aa2:	4649      	mov	r1, r9
 8008aa4:	4640      	mov	r0, r8
 8008aa6:	47d0      	blx	sl
 8008aa8:	3001      	adds	r0, #1
 8008aaa:	d09d      	beq.n	80089e8 <_printf_i+0x15c>
 8008aac:	3501      	adds	r5, #1
 8008aae:	68e3      	ldr	r3, [r4, #12]
 8008ab0:	9903      	ldr	r1, [sp, #12]
 8008ab2:	1a5b      	subs	r3, r3, r1
 8008ab4:	42ab      	cmp	r3, r5
 8008ab6:	dcf2      	bgt.n	8008a9e <_printf_i+0x212>
 8008ab8:	e7eb      	b.n	8008a92 <_printf_i+0x206>
 8008aba:	2500      	movs	r5, #0
 8008abc:	f104 0619 	add.w	r6, r4, #25
 8008ac0:	e7f5      	b.n	8008aae <_printf_i+0x222>
 8008ac2:	bf00      	nop
 8008ac4:	0800ae4e 	.word	0x0800ae4e
 8008ac8:	0800ae5f 	.word	0x0800ae5f

08008acc <std>:
 8008acc:	2300      	movs	r3, #0
 8008ace:	b510      	push	{r4, lr}
 8008ad0:	4604      	mov	r4, r0
 8008ad2:	e9c0 3300 	strd	r3, r3, [r0]
 8008ad6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ada:	6083      	str	r3, [r0, #8]
 8008adc:	8181      	strh	r1, [r0, #12]
 8008ade:	6643      	str	r3, [r0, #100]	@ 0x64
 8008ae0:	81c2      	strh	r2, [r0, #14]
 8008ae2:	6183      	str	r3, [r0, #24]
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	2208      	movs	r2, #8
 8008ae8:	305c      	adds	r0, #92	@ 0x5c
 8008aea:	f000 f9f9 	bl	8008ee0 <memset>
 8008aee:	4b0d      	ldr	r3, [pc, #52]	@ (8008b24 <std+0x58>)
 8008af0:	6263      	str	r3, [r4, #36]	@ 0x24
 8008af2:	4b0d      	ldr	r3, [pc, #52]	@ (8008b28 <std+0x5c>)
 8008af4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008af6:	4b0d      	ldr	r3, [pc, #52]	@ (8008b2c <std+0x60>)
 8008af8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008afa:	4b0d      	ldr	r3, [pc, #52]	@ (8008b30 <std+0x64>)
 8008afc:	6323      	str	r3, [r4, #48]	@ 0x30
 8008afe:	4b0d      	ldr	r3, [pc, #52]	@ (8008b34 <std+0x68>)
 8008b00:	6224      	str	r4, [r4, #32]
 8008b02:	429c      	cmp	r4, r3
 8008b04:	d006      	beq.n	8008b14 <std+0x48>
 8008b06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008b0a:	4294      	cmp	r4, r2
 8008b0c:	d002      	beq.n	8008b14 <std+0x48>
 8008b0e:	33d0      	adds	r3, #208	@ 0xd0
 8008b10:	429c      	cmp	r4, r3
 8008b12:	d105      	bne.n	8008b20 <std+0x54>
 8008b14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b1c:	f000 ba5c 	b.w	8008fd8 <__retarget_lock_init_recursive>
 8008b20:	bd10      	pop	{r4, pc}
 8008b22:	bf00      	nop
 8008b24:	08008d31 	.word	0x08008d31
 8008b28:	08008d53 	.word	0x08008d53
 8008b2c:	08008d8b 	.word	0x08008d8b
 8008b30:	08008daf 	.word	0x08008daf
 8008b34:	200003ec 	.word	0x200003ec

08008b38 <stdio_exit_handler>:
 8008b38:	4a02      	ldr	r2, [pc, #8]	@ (8008b44 <stdio_exit_handler+0xc>)
 8008b3a:	4903      	ldr	r1, [pc, #12]	@ (8008b48 <stdio_exit_handler+0x10>)
 8008b3c:	4803      	ldr	r0, [pc, #12]	@ (8008b4c <stdio_exit_handler+0x14>)
 8008b3e:	f000 b869 	b.w	8008c14 <_fwalk_sglue>
 8008b42:	bf00      	nop
 8008b44:	2000000c 	.word	0x2000000c
 8008b48:	0800a909 	.word	0x0800a909
 8008b4c:	2000001c 	.word	0x2000001c

08008b50 <cleanup_stdio>:
 8008b50:	6841      	ldr	r1, [r0, #4]
 8008b52:	4b0c      	ldr	r3, [pc, #48]	@ (8008b84 <cleanup_stdio+0x34>)
 8008b54:	4299      	cmp	r1, r3
 8008b56:	b510      	push	{r4, lr}
 8008b58:	4604      	mov	r4, r0
 8008b5a:	d001      	beq.n	8008b60 <cleanup_stdio+0x10>
 8008b5c:	f001 fed4 	bl	800a908 <_fflush_r>
 8008b60:	68a1      	ldr	r1, [r4, #8]
 8008b62:	4b09      	ldr	r3, [pc, #36]	@ (8008b88 <cleanup_stdio+0x38>)
 8008b64:	4299      	cmp	r1, r3
 8008b66:	d002      	beq.n	8008b6e <cleanup_stdio+0x1e>
 8008b68:	4620      	mov	r0, r4
 8008b6a:	f001 fecd 	bl	800a908 <_fflush_r>
 8008b6e:	68e1      	ldr	r1, [r4, #12]
 8008b70:	4b06      	ldr	r3, [pc, #24]	@ (8008b8c <cleanup_stdio+0x3c>)
 8008b72:	4299      	cmp	r1, r3
 8008b74:	d004      	beq.n	8008b80 <cleanup_stdio+0x30>
 8008b76:	4620      	mov	r0, r4
 8008b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b7c:	f001 bec4 	b.w	800a908 <_fflush_r>
 8008b80:	bd10      	pop	{r4, pc}
 8008b82:	bf00      	nop
 8008b84:	200003ec 	.word	0x200003ec
 8008b88:	20000454 	.word	0x20000454
 8008b8c:	200004bc 	.word	0x200004bc

08008b90 <global_stdio_init.part.0>:
 8008b90:	b510      	push	{r4, lr}
 8008b92:	4b0b      	ldr	r3, [pc, #44]	@ (8008bc0 <global_stdio_init.part.0+0x30>)
 8008b94:	4c0b      	ldr	r4, [pc, #44]	@ (8008bc4 <global_stdio_init.part.0+0x34>)
 8008b96:	4a0c      	ldr	r2, [pc, #48]	@ (8008bc8 <global_stdio_init.part.0+0x38>)
 8008b98:	601a      	str	r2, [r3, #0]
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	2104      	movs	r1, #4
 8008ba0:	f7ff ff94 	bl	8008acc <std>
 8008ba4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008ba8:	2201      	movs	r2, #1
 8008baa:	2109      	movs	r1, #9
 8008bac:	f7ff ff8e 	bl	8008acc <std>
 8008bb0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008bb4:	2202      	movs	r2, #2
 8008bb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bba:	2112      	movs	r1, #18
 8008bbc:	f7ff bf86 	b.w	8008acc <std>
 8008bc0:	20000524 	.word	0x20000524
 8008bc4:	200003ec 	.word	0x200003ec
 8008bc8:	08008b39 	.word	0x08008b39

08008bcc <__sfp_lock_acquire>:
 8008bcc:	4801      	ldr	r0, [pc, #4]	@ (8008bd4 <__sfp_lock_acquire+0x8>)
 8008bce:	f000 ba04 	b.w	8008fda <__retarget_lock_acquire_recursive>
 8008bd2:	bf00      	nop
 8008bd4:	2000052d 	.word	0x2000052d

08008bd8 <__sfp_lock_release>:
 8008bd8:	4801      	ldr	r0, [pc, #4]	@ (8008be0 <__sfp_lock_release+0x8>)
 8008bda:	f000 b9ff 	b.w	8008fdc <__retarget_lock_release_recursive>
 8008bde:	bf00      	nop
 8008be0:	2000052d 	.word	0x2000052d

08008be4 <__sinit>:
 8008be4:	b510      	push	{r4, lr}
 8008be6:	4604      	mov	r4, r0
 8008be8:	f7ff fff0 	bl	8008bcc <__sfp_lock_acquire>
 8008bec:	6a23      	ldr	r3, [r4, #32]
 8008bee:	b11b      	cbz	r3, 8008bf8 <__sinit+0x14>
 8008bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bf4:	f7ff bff0 	b.w	8008bd8 <__sfp_lock_release>
 8008bf8:	4b04      	ldr	r3, [pc, #16]	@ (8008c0c <__sinit+0x28>)
 8008bfa:	6223      	str	r3, [r4, #32]
 8008bfc:	4b04      	ldr	r3, [pc, #16]	@ (8008c10 <__sinit+0x2c>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d1f5      	bne.n	8008bf0 <__sinit+0xc>
 8008c04:	f7ff ffc4 	bl	8008b90 <global_stdio_init.part.0>
 8008c08:	e7f2      	b.n	8008bf0 <__sinit+0xc>
 8008c0a:	bf00      	nop
 8008c0c:	08008b51 	.word	0x08008b51
 8008c10:	20000524 	.word	0x20000524

08008c14 <_fwalk_sglue>:
 8008c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c18:	4607      	mov	r7, r0
 8008c1a:	4688      	mov	r8, r1
 8008c1c:	4614      	mov	r4, r2
 8008c1e:	2600      	movs	r6, #0
 8008c20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c24:	f1b9 0901 	subs.w	r9, r9, #1
 8008c28:	d505      	bpl.n	8008c36 <_fwalk_sglue+0x22>
 8008c2a:	6824      	ldr	r4, [r4, #0]
 8008c2c:	2c00      	cmp	r4, #0
 8008c2e:	d1f7      	bne.n	8008c20 <_fwalk_sglue+0xc>
 8008c30:	4630      	mov	r0, r6
 8008c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c36:	89ab      	ldrh	r3, [r5, #12]
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d907      	bls.n	8008c4c <_fwalk_sglue+0x38>
 8008c3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c40:	3301      	adds	r3, #1
 8008c42:	d003      	beq.n	8008c4c <_fwalk_sglue+0x38>
 8008c44:	4629      	mov	r1, r5
 8008c46:	4638      	mov	r0, r7
 8008c48:	47c0      	blx	r8
 8008c4a:	4306      	orrs	r6, r0
 8008c4c:	3568      	adds	r5, #104	@ 0x68
 8008c4e:	e7e9      	b.n	8008c24 <_fwalk_sglue+0x10>

08008c50 <iprintf>:
 8008c50:	b40f      	push	{r0, r1, r2, r3}
 8008c52:	b507      	push	{r0, r1, r2, lr}
 8008c54:	4906      	ldr	r1, [pc, #24]	@ (8008c70 <iprintf+0x20>)
 8008c56:	ab04      	add	r3, sp, #16
 8008c58:	6808      	ldr	r0, [r1, #0]
 8008c5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c5e:	6881      	ldr	r1, [r0, #8]
 8008c60:	9301      	str	r3, [sp, #4]
 8008c62:	f001 fcb5 	bl	800a5d0 <_vfiprintf_r>
 8008c66:	b003      	add	sp, #12
 8008c68:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c6c:	b004      	add	sp, #16
 8008c6e:	4770      	bx	lr
 8008c70:	20000018 	.word	0x20000018

08008c74 <_puts_r>:
 8008c74:	6a03      	ldr	r3, [r0, #32]
 8008c76:	b570      	push	{r4, r5, r6, lr}
 8008c78:	6884      	ldr	r4, [r0, #8]
 8008c7a:	4605      	mov	r5, r0
 8008c7c:	460e      	mov	r6, r1
 8008c7e:	b90b      	cbnz	r3, 8008c84 <_puts_r+0x10>
 8008c80:	f7ff ffb0 	bl	8008be4 <__sinit>
 8008c84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c86:	07db      	lsls	r3, r3, #31
 8008c88:	d405      	bmi.n	8008c96 <_puts_r+0x22>
 8008c8a:	89a3      	ldrh	r3, [r4, #12]
 8008c8c:	0598      	lsls	r0, r3, #22
 8008c8e:	d402      	bmi.n	8008c96 <_puts_r+0x22>
 8008c90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c92:	f000 f9a2 	bl	8008fda <__retarget_lock_acquire_recursive>
 8008c96:	89a3      	ldrh	r3, [r4, #12]
 8008c98:	0719      	lsls	r1, r3, #28
 8008c9a:	d502      	bpl.n	8008ca2 <_puts_r+0x2e>
 8008c9c:	6923      	ldr	r3, [r4, #16]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d135      	bne.n	8008d0e <_puts_r+0x9a>
 8008ca2:	4621      	mov	r1, r4
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	f000 f8c5 	bl	8008e34 <__swsetup_r>
 8008caa:	b380      	cbz	r0, 8008d0e <_puts_r+0x9a>
 8008cac:	f04f 35ff 	mov.w	r5, #4294967295
 8008cb0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008cb2:	07da      	lsls	r2, r3, #31
 8008cb4:	d405      	bmi.n	8008cc2 <_puts_r+0x4e>
 8008cb6:	89a3      	ldrh	r3, [r4, #12]
 8008cb8:	059b      	lsls	r3, r3, #22
 8008cba:	d402      	bmi.n	8008cc2 <_puts_r+0x4e>
 8008cbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008cbe:	f000 f98d 	bl	8008fdc <__retarget_lock_release_recursive>
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	bd70      	pop	{r4, r5, r6, pc}
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	da04      	bge.n	8008cd4 <_puts_r+0x60>
 8008cca:	69a2      	ldr	r2, [r4, #24]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	dc17      	bgt.n	8008d00 <_puts_r+0x8c>
 8008cd0:	290a      	cmp	r1, #10
 8008cd2:	d015      	beq.n	8008d00 <_puts_r+0x8c>
 8008cd4:	6823      	ldr	r3, [r4, #0]
 8008cd6:	1c5a      	adds	r2, r3, #1
 8008cd8:	6022      	str	r2, [r4, #0]
 8008cda:	7019      	strb	r1, [r3, #0]
 8008cdc:	68a3      	ldr	r3, [r4, #8]
 8008cde:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008ce2:	3b01      	subs	r3, #1
 8008ce4:	60a3      	str	r3, [r4, #8]
 8008ce6:	2900      	cmp	r1, #0
 8008ce8:	d1ed      	bne.n	8008cc6 <_puts_r+0x52>
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	da11      	bge.n	8008d12 <_puts_r+0x9e>
 8008cee:	4622      	mov	r2, r4
 8008cf0:	210a      	movs	r1, #10
 8008cf2:	4628      	mov	r0, r5
 8008cf4:	f000 f85f 	bl	8008db6 <__swbuf_r>
 8008cf8:	3001      	adds	r0, #1
 8008cfa:	d0d7      	beq.n	8008cac <_puts_r+0x38>
 8008cfc:	250a      	movs	r5, #10
 8008cfe:	e7d7      	b.n	8008cb0 <_puts_r+0x3c>
 8008d00:	4622      	mov	r2, r4
 8008d02:	4628      	mov	r0, r5
 8008d04:	f000 f857 	bl	8008db6 <__swbuf_r>
 8008d08:	3001      	adds	r0, #1
 8008d0a:	d1e7      	bne.n	8008cdc <_puts_r+0x68>
 8008d0c:	e7ce      	b.n	8008cac <_puts_r+0x38>
 8008d0e:	3e01      	subs	r6, #1
 8008d10:	e7e4      	b.n	8008cdc <_puts_r+0x68>
 8008d12:	6823      	ldr	r3, [r4, #0]
 8008d14:	1c5a      	adds	r2, r3, #1
 8008d16:	6022      	str	r2, [r4, #0]
 8008d18:	220a      	movs	r2, #10
 8008d1a:	701a      	strb	r2, [r3, #0]
 8008d1c:	e7ee      	b.n	8008cfc <_puts_r+0x88>
	...

08008d20 <puts>:
 8008d20:	4b02      	ldr	r3, [pc, #8]	@ (8008d2c <puts+0xc>)
 8008d22:	4601      	mov	r1, r0
 8008d24:	6818      	ldr	r0, [r3, #0]
 8008d26:	f7ff bfa5 	b.w	8008c74 <_puts_r>
 8008d2a:	bf00      	nop
 8008d2c:	20000018 	.word	0x20000018

08008d30 <__sread>:
 8008d30:	b510      	push	{r4, lr}
 8008d32:	460c      	mov	r4, r1
 8008d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d38:	f000 f900 	bl	8008f3c <_read_r>
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	bfab      	itete	ge
 8008d40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008d42:	89a3      	ldrhlt	r3, [r4, #12]
 8008d44:	181b      	addge	r3, r3, r0
 8008d46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008d4a:	bfac      	ite	ge
 8008d4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008d4e:	81a3      	strhlt	r3, [r4, #12]
 8008d50:	bd10      	pop	{r4, pc}

08008d52 <__swrite>:
 8008d52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d56:	461f      	mov	r7, r3
 8008d58:	898b      	ldrh	r3, [r1, #12]
 8008d5a:	05db      	lsls	r3, r3, #23
 8008d5c:	4605      	mov	r5, r0
 8008d5e:	460c      	mov	r4, r1
 8008d60:	4616      	mov	r6, r2
 8008d62:	d505      	bpl.n	8008d70 <__swrite+0x1e>
 8008d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d68:	2302      	movs	r3, #2
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f000 f8d4 	bl	8008f18 <_lseek_r>
 8008d70:	89a3      	ldrh	r3, [r4, #12]
 8008d72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d7a:	81a3      	strh	r3, [r4, #12]
 8008d7c:	4632      	mov	r2, r6
 8008d7e:	463b      	mov	r3, r7
 8008d80:	4628      	mov	r0, r5
 8008d82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d86:	f000 b8eb 	b.w	8008f60 <_write_r>

08008d8a <__sseek>:
 8008d8a:	b510      	push	{r4, lr}
 8008d8c:	460c      	mov	r4, r1
 8008d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d92:	f000 f8c1 	bl	8008f18 <_lseek_r>
 8008d96:	1c43      	adds	r3, r0, #1
 8008d98:	89a3      	ldrh	r3, [r4, #12]
 8008d9a:	bf15      	itete	ne
 8008d9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008d9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008da2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008da6:	81a3      	strheq	r3, [r4, #12]
 8008da8:	bf18      	it	ne
 8008daa:	81a3      	strhne	r3, [r4, #12]
 8008dac:	bd10      	pop	{r4, pc}

08008dae <__sclose>:
 8008dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008db2:	f000 b8a1 	b.w	8008ef8 <_close_r>

08008db6 <__swbuf_r>:
 8008db6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008db8:	460e      	mov	r6, r1
 8008dba:	4614      	mov	r4, r2
 8008dbc:	4605      	mov	r5, r0
 8008dbe:	b118      	cbz	r0, 8008dc8 <__swbuf_r+0x12>
 8008dc0:	6a03      	ldr	r3, [r0, #32]
 8008dc2:	b90b      	cbnz	r3, 8008dc8 <__swbuf_r+0x12>
 8008dc4:	f7ff ff0e 	bl	8008be4 <__sinit>
 8008dc8:	69a3      	ldr	r3, [r4, #24]
 8008dca:	60a3      	str	r3, [r4, #8]
 8008dcc:	89a3      	ldrh	r3, [r4, #12]
 8008dce:	071a      	lsls	r2, r3, #28
 8008dd0:	d501      	bpl.n	8008dd6 <__swbuf_r+0x20>
 8008dd2:	6923      	ldr	r3, [r4, #16]
 8008dd4:	b943      	cbnz	r3, 8008de8 <__swbuf_r+0x32>
 8008dd6:	4621      	mov	r1, r4
 8008dd8:	4628      	mov	r0, r5
 8008dda:	f000 f82b 	bl	8008e34 <__swsetup_r>
 8008dde:	b118      	cbz	r0, 8008de8 <__swbuf_r+0x32>
 8008de0:	f04f 37ff 	mov.w	r7, #4294967295
 8008de4:	4638      	mov	r0, r7
 8008de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008de8:	6823      	ldr	r3, [r4, #0]
 8008dea:	6922      	ldr	r2, [r4, #16]
 8008dec:	1a98      	subs	r0, r3, r2
 8008dee:	6963      	ldr	r3, [r4, #20]
 8008df0:	b2f6      	uxtb	r6, r6
 8008df2:	4283      	cmp	r3, r0
 8008df4:	4637      	mov	r7, r6
 8008df6:	dc05      	bgt.n	8008e04 <__swbuf_r+0x4e>
 8008df8:	4621      	mov	r1, r4
 8008dfa:	4628      	mov	r0, r5
 8008dfc:	f001 fd84 	bl	800a908 <_fflush_r>
 8008e00:	2800      	cmp	r0, #0
 8008e02:	d1ed      	bne.n	8008de0 <__swbuf_r+0x2a>
 8008e04:	68a3      	ldr	r3, [r4, #8]
 8008e06:	3b01      	subs	r3, #1
 8008e08:	60a3      	str	r3, [r4, #8]
 8008e0a:	6823      	ldr	r3, [r4, #0]
 8008e0c:	1c5a      	adds	r2, r3, #1
 8008e0e:	6022      	str	r2, [r4, #0]
 8008e10:	701e      	strb	r6, [r3, #0]
 8008e12:	6962      	ldr	r2, [r4, #20]
 8008e14:	1c43      	adds	r3, r0, #1
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d004      	beq.n	8008e24 <__swbuf_r+0x6e>
 8008e1a:	89a3      	ldrh	r3, [r4, #12]
 8008e1c:	07db      	lsls	r3, r3, #31
 8008e1e:	d5e1      	bpl.n	8008de4 <__swbuf_r+0x2e>
 8008e20:	2e0a      	cmp	r6, #10
 8008e22:	d1df      	bne.n	8008de4 <__swbuf_r+0x2e>
 8008e24:	4621      	mov	r1, r4
 8008e26:	4628      	mov	r0, r5
 8008e28:	f001 fd6e 	bl	800a908 <_fflush_r>
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	d0d9      	beq.n	8008de4 <__swbuf_r+0x2e>
 8008e30:	e7d6      	b.n	8008de0 <__swbuf_r+0x2a>
	...

08008e34 <__swsetup_r>:
 8008e34:	b538      	push	{r3, r4, r5, lr}
 8008e36:	4b29      	ldr	r3, [pc, #164]	@ (8008edc <__swsetup_r+0xa8>)
 8008e38:	4605      	mov	r5, r0
 8008e3a:	6818      	ldr	r0, [r3, #0]
 8008e3c:	460c      	mov	r4, r1
 8008e3e:	b118      	cbz	r0, 8008e48 <__swsetup_r+0x14>
 8008e40:	6a03      	ldr	r3, [r0, #32]
 8008e42:	b90b      	cbnz	r3, 8008e48 <__swsetup_r+0x14>
 8008e44:	f7ff fece 	bl	8008be4 <__sinit>
 8008e48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e4c:	0719      	lsls	r1, r3, #28
 8008e4e:	d422      	bmi.n	8008e96 <__swsetup_r+0x62>
 8008e50:	06da      	lsls	r2, r3, #27
 8008e52:	d407      	bmi.n	8008e64 <__swsetup_r+0x30>
 8008e54:	2209      	movs	r2, #9
 8008e56:	602a      	str	r2, [r5, #0]
 8008e58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e5c:	81a3      	strh	r3, [r4, #12]
 8008e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e62:	e033      	b.n	8008ecc <__swsetup_r+0x98>
 8008e64:	0758      	lsls	r0, r3, #29
 8008e66:	d512      	bpl.n	8008e8e <__swsetup_r+0x5a>
 8008e68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e6a:	b141      	cbz	r1, 8008e7e <__swsetup_r+0x4a>
 8008e6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e70:	4299      	cmp	r1, r3
 8008e72:	d002      	beq.n	8008e7a <__swsetup_r+0x46>
 8008e74:	4628      	mov	r0, r5
 8008e76:	f000 feff 	bl	8009c78 <_free_r>
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e7e:	89a3      	ldrh	r3, [r4, #12]
 8008e80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008e84:	81a3      	strh	r3, [r4, #12]
 8008e86:	2300      	movs	r3, #0
 8008e88:	6063      	str	r3, [r4, #4]
 8008e8a:	6923      	ldr	r3, [r4, #16]
 8008e8c:	6023      	str	r3, [r4, #0]
 8008e8e:	89a3      	ldrh	r3, [r4, #12]
 8008e90:	f043 0308 	orr.w	r3, r3, #8
 8008e94:	81a3      	strh	r3, [r4, #12]
 8008e96:	6923      	ldr	r3, [r4, #16]
 8008e98:	b94b      	cbnz	r3, 8008eae <__swsetup_r+0x7a>
 8008e9a:	89a3      	ldrh	r3, [r4, #12]
 8008e9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008ea0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ea4:	d003      	beq.n	8008eae <__swsetup_r+0x7a>
 8008ea6:	4621      	mov	r1, r4
 8008ea8:	4628      	mov	r0, r5
 8008eaa:	f001 fd7b 	bl	800a9a4 <__smakebuf_r>
 8008eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eb2:	f013 0201 	ands.w	r2, r3, #1
 8008eb6:	d00a      	beq.n	8008ece <__swsetup_r+0x9a>
 8008eb8:	2200      	movs	r2, #0
 8008eba:	60a2      	str	r2, [r4, #8]
 8008ebc:	6962      	ldr	r2, [r4, #20]
 8008ebe:	4252      	negs	r2, r2
 8008ec0:	61a2      	str	r2, [r4, #24]
 8008ec2:	6922      	ldr	r2, [r4, #16]
 8008ec4:	b942      	cbnz	r2, 8008ed8 <__swsetup_r+0xa4>
 8008ec6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008eca:	d1c5      	bne.n	8008e58 <__swsetup_r+0x24>
 8008ecc:	bd38      	pop	{r3, r4, r5, pc}
 8008ece:	0799      	lsls	r1, r3, #30
 8008ed0:	bf58      	it	pl
 8008ed2:	6962      	ldrpl	r2, [r4, #20]
 8008ed4:	60a2      	str	r2, [r4, #8]
 8008ed6:	e7f4      	b.n	8008ec2 <__swsetup_r+0x8e>
 8008ed8:	2000      	movs	r0, #0
 8008eda:	e7f7      	b.n	8008ecc <__swsetup_r+0x98>
 8008edc:	20000018 	.word	0x20000018

08008ee0 <memset>:
 8008ee0:	4402      	add	r2, r0
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d100      	bne.n	8008eea <memset+0xa>
 8008ee8:	4770      	bx	lr
 8008eea:	f803 1b01 	strb.w	r1, [r3], #1
 8008eee:	e7f9      	b.n	8008ee4 <memset+0x4>

08008ef0 <_localeconv_r>:
 8008ef0:	4800      	ldr	r0, [pc, #0]	@ (8008ef4 <_localeconv_r+0x4>)
 8008ef2:	4770      	bx	lr
 8008ef4:	20000158 	.word	0x20000158

08008ef8 <_close_r>:
 8008ef8:	b538      	push	{r3, r4, r5, lr}
 8008efa:	4d06      	ldr	r5, [pc, #24]	@ (8008f14 <_close_r+0x1c>)
 8008efc:	2300      	movs	r3, #0
 8008efe:	4604      	mov	r4, r0
 8008f00:	4608      	mov	r0, r1
 8008f02:	602b      	str	r3, [r5, #0]
 8008f04:	f7fa fbd8 	bl	80036b8 <_close>
 8008f08:	1c43      	adds	r3, r0, #1
 8008f0a:	d102      	bne.n	8008f12 <_close_r+0x1a>
 8008f0c:	682b      	ldr	r3, [r5, #0]
 8008f0e:	b103      	cbz	r3, 8008f12 <_close_r+0x1a>
 8008f10:	6023      	str	r3, [r4, #0]
 8008f12:	bd38      	pop	{r3, r4, r5, pc}
 8008f14:	20000528 	.word	0x20000528

08008f18 <_lseek_r>:
 8008f18:	b538      	push	{r3, r4, r5, lr}
 8008f1a:	4d07      	ldr	r5, [pc, #28]	@ (8008f38 <_lseek_r+0x20>)
 8008f1c:	4604      	mov	r4, r0
 8008f1e:	4608      	mov	r0, r1
 8008f20:	4611      	mov	r1, r2
 8008f22:	2200      	movs	r2, #0
 8008f24:	602a      	str	r2, [r5, #0]
 8008f26:	461a      	mov	r2, r3
 8008f28:	f7fa fbed 	bl	8003706 <_lseek>
 8008f2c:	1c43      	adds	r3, r0, #1
 8008f2e:	d102      	bne.n	8008f36 <_lseek_r+0x1e>
 8008f30:	682b      	ldr	r3, [r5, #0]
 8008f32:	b103      	cbz	r3, 8008f36 <_lseek_r+0x1e>
 8008f34:	6023      	str	r3, [r4, #0]
 8008f36:	bd38      	pop	{r3, r4, r5, pc}
 8008f38:	20000528 	.word	0x20000528

08008f3c <_read_r>:
 8008f3c:	b538      	push	{r3, r4, r5, lr}
 8008f3e:	4d07      	ldr	r5, [pc, #28]	@ (8008f5c <_read_r+0x20>)
 8008f40:	4604      	mov	r4, r0
 8008f42:	4608      	mov	r0, r1
 8008f44:	4611      	mov	r1, r2
 8008f46:	2200      	movs	r2, #0
 8008f48:	602a      	str	r2, [r5, #0]
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	f7fa fb97 	bl	800367e <_read>
 8008f50:	1c43      	adds	r3, r0, #1
 8008f52:	d102      	bne.n	8008f5a <_read_r+0x1e>
 8008f54:	682b      	ldr	r3, [r5, #0]
 8008f56:	b103      	cbz	r3, 8008f5a <_read_r+0x1e>
 8008f58:	6023      	str	r3, [r4, #0]
 8008f5a:	bd38      	pop	{r3, r4, r5, pc}
 8008f5c:	20000528 	.word	0x20000528

08008f60 <_write_r>:
 8008f60:	b538      	push	{r3, r4, r5, lr}
 8008f62:	4d07      	ldr	r5, [pc, #28]	@ (8008f80 <_write_r+0x20>)
 8008f64:	4604      	mov	r4, r0
 8008f66:	4608      	mov	r0, r1
 8008f68:	4611      	mov	r1, r2
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	602a      	str	r2, [r5, #0]
 8008f6e:	461a      	mov	r2, r3
 8008f70:	f7f9 fdf0 	bl	8002b54 <_write>
 8008f74:	1c43      	adds	r3, r0, #1
 8008f76:	d102      	bne.n	8008f7e <_write_r+0x1e>
 8008f78:	682b      	ldr	r3, [r5, #0]
 8008f7a:	b103      	cbz	r3, 8008f7e <_write_r+0x1e>
 8008f7c:	6023      	str	r3, [r4, #0]
 8008f7e:	bd38      	pop	{r3, r4, r5, pc}
 8008f80:	20000528 	.word	0x20000528

08008f84 <__errno>:
 8008f84:	4b01      	ldr	r3, [pc, #4]	@ (8008f8c <__errno+0x8>)
 8008f86:	6818      	ldr	r0, [r3, #0]
 8008f88:	4770      	bx	lr
 8008f8a:	bf00      	nop
 8008f8c:	20000018 	.word	0x20000018

08008f90 <__libc_init_array>:
 8008f90:	b570      	push	{r4, r5, r6, lr}
 8008f92:	4d0d      	ldr	r5, [pc, #52]	@ (8008fc8 <__libc_init_array+0x38>)
 8008f94:	4c0d      	ldr	r4, [pc, #52]	@ (8008fcc <__libc_init_array+0x3c>)
 8008f96:	1b64      	subs	r4, r4, r5
 8008f98:	10a4      	asrs	r4, r4, #2
 8008f9a:	2600      	movs	r6, #0
 8008f9c:	42a6      	cmp	r6, r4
 8008f9e:	d109      	bne.n	8008fb4 <__libc_init_array+0x24>
 8008fa0:	4d0b      	ldr	r5, [pc, #44]	@ (8008fd0 <__libc_init_array+0x40>)
 8008fa2:	4c0c      	ldr	r4, [pc, #48]	@ (8008fd4 <__libc_init_array+0x44>)
 8008fa4:	f001 fe2a 	bl	800abfc <_init>
 8008fa8:	1b64      	subs	r4, r4, r5
 8008faa:	10a4      	asrs	r4, r4, #2
 8008fac:	2600      	movs	r6, #0
 8008fae:	42a6      	cmp	r6, r4
 8008fb0:	d105      	bne.n	8008fbe <__libc_init_array+0x2e>
 8008fb2:	bd70      	pop	{r4, r5, r6, pc}
 8008fb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fb8:	4798      	blx	r3
 8008fba:	3601      	adds	r6, #1
 8008fbc:	e7ee      	b.n	8008f9c <__libc_init_array+0xc>
 8008fbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fc2:	4798      	blx	r3
 8008fc4:	3601      	adds	r6, #1
 8008fc6:	e7f2      	b.n	8008fae <__libc_init_array+0x1e>
 8008fc8:	0800b1b8 	.word	0x0800b1b8
 8008fcc:	0800b1b8 	.word	0x0800b1b8
 8008fd0:	0800b1b8 	.word	0x0800b1b8
 8008fd4:	0800b1bc 	.word	0x0800b1bc

08008fd8 <__retarget_lock_init_recursive>:
 8008fd8:	4770      	bx	lr

08008fda <__retarget_lock_acquire_recursive>:
 8008fda:	4770      	bx	lr

08008fdc <__retarget_lock_release_recursive>:
 8008fdc:	4770      	bx	lr

08008fde <quorem>:
 8008fde:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe2:	6903      	ldr	r3, [r0, #16]
 8008fe4:	690c      	ldr	r4, [r1, #16]
 8008fe6:	42a3      	cmp	r3, r4
 8008fe8:	4607      	mov	r7, r0
 8008fea:	db7e      	blt.n	80090ea <quorem+0x10c>
 8008fec:	3c01      	subs	r4, #1
 8008fee:	f101 0814 	add.w	r8, r1, #20
 8008ff2:	00a3      	lsls	r3, r4, #2
 8008ff4:	f100 0514 	add.w	r5, r0, #20
 8008ff8:	9300      	str	r3, [sp, #0]
 8008ffa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ffe:	9301      	str	r3, [sp, #4]
 8009000:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009004:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009008:	3301      	adds	r3, #1
 800900a:	429a      	cmp	r2, r3
 800900c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009010:	fbb2 f6f3 	udiv	r6, r2, r3
 8009014:	d32e      	bcc.n	8009074 <quorem+0x96>
 8009016:	f04f 0a00 	mov.w	sl, #0
 800901a:	46c4      	mov	ip, r8
 800901c:	46ae      	mov	lr, r5
 800901e:	46d3      	mov	fp, sl
 8009020:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009024:	b298      	uxth	r0, r3
 8009026:	fb06 a000 	mla	r0, r6, r0, sl
 800902a:	0c02      	lsrs	r2, r0, #16
 800902c:	0c1b      	lsrs	r3, r3, #16
 800902e:	fb06 2303 	mla	r3, r6, r3, r2
 8009032:	f8de 2000 	ldr.w	r2, [lr]
 8009036:	b280      	uxth	r0, r0
 8009038:	b292      	uxth	r2, r2
 800903a:	1a12      	subs	r2, r2, r0
 800903c:	445a      	add	r2, fp
 800903e:	f8de 0000 	ldr.w	r0, [lr]
 8009042:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009046:	b29b      	uxth	r3, r3
 8009048:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800904c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009050:	b292      	uxth	r2, r2
 8009052:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009056:	45e1      	cmp	r9, ip
 8009058:	f84e 2b04 	str.w	r2, [lr], #4
 800905c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009060:	d2de      	bcs.n	8009020 <quorem+0x42>
 8009062:	9b00      	ldr	r3, [sp, #0]
 8009064:	58eb      	ldr	r3, [r5, r3]
 8009066:	b92b      	cbnz	r3, 8009074 <quorem+0x96>
 8009068:	9b01      	ldr	r3, [sp, #4]
 800906a:	3b04      	subs	r3, #4
 800906c:	429d      	cmp	r5, r3
 800906e:	461a      	mov	r2, r3
 8009070:	d32f      	bcc.n	80090d2 <quorem+0xf4>
 8009072:	613c      	str	r4, [r7, #16]
 8009074:	4638      	mov	r0, r7
 8009076:	f001 f979 	bl	800a36c <__mcmp>
 800907a:	2800      	cmp	r0, #0
 800907c:	db25      	blt.n	80090ca <quorem+0xec>
 800907e:	4629      	mov	r1, r5
 8009080:	2000      	movs	r0, #0
 8009082:	f858 2b04 	ldr.w	r2, [r8], #4
 8009086:	f8d1 c000 	ldr.w	ip, [r1]
 800908a:	fa1f fe82 	uxth.w	lr, r2
 800908e:	fa1f f38c 	uxth.w	r3, ip
 8009092:	eba3 030e 	sub.w	r3, r3, lr
 8009096:	4403      	add	r3, r0
 8009098:	0c12      	lsrs	r2, r2, #16
 800909a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800909e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090a8:	45c1      	cmp	r9, r8
 80090aa:	f841 3b04 	str.w	r3, [r1], #4
 80090ae:	ea4f 4022 	mov.w	r0, r2, asr #16
 80090b2:	d2e6      	bcs.n	8009082 <quorem+0xa4>
 80090b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80090b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80090bc:	b922      	cbnz	r2, 80090c8 <quorem+0xea>
 80090be:	3b04      	subs	r3, #4
 80090c0:	429d      	cmp	r5, r3
 80090c2:	461a      	mov	r2, r3
 80090c4:	d30b      	bcc.n	80090de <quorem+0x100>
 80090c6:	613c      	str	r4, [r7, #16]
 80090c8:	3601      	adds	r6, #1
 80090ca:	4630      	mov	r0, r6
 80090cc:	b003      	add	sp, #12
 80090ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d2:	6812      	ldr	r2, [r2, #0]
 80090d4:	3b04      	subs	r3, #4
 80090d6:	2a00      	cmp	r2, #0
 80090d8:	d1cb      	bne.n	8009072 <quorem+0x94>
 80090da:	3c01      	subs	r4, #1
 80090dc:	e7c6      	b.n	800906c <quorem+0x8e>
 80090de:	6812      	ldr	r2, [r2, #0]
 80090e0:	3b04      	subs	r3, #4
 80090e2:	2a00      	cmp	r2, #0
 80090e4:	d1ef      	bne.n	80090c6 <quorem+0xe8>
 80090e6:	3c01      	subs	r4, #1
 80090e8:	e7ea      	b.n	80090c0 <quorem+0xe2>
 80090ea:	2000      	movs	r0, #0
 80090ec:	e7ee      	b.n	80090cc <quorem+0xee>
	...

080090f0 <_dtoa_r>:
 80090f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f4:	69c7      	ldr	r7, [r0, #28]
 80090f6:	b099      	sub	sp, #100	@ 0x64
 80090f8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80090fc:	ec55 4b10 	vmov	r4, r5, d0
 8009100:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009102:	9109      	str	r1, [sp, #36]	@ 0x24
 8009104:	4683      	mov	fp, r0
 8009106:	920e      	str	r2, [sp, #56]	@ 0x38
 8009108:	9313      	str	r3, [sp, #76]	@ 0x4c
 800910a:	b97f      	cbnz	r7, 800912c <_dtoa_r+0x3c>
 800910c:	2010      	movs	r0, #16
 800910e:	f000 fdfd 	bl	8009d0c <malloc>
 8009112:	4602      	mov	r2, r0
 8009114:	f8cb 001c 	str.w	r0, [fp, #28]
 8009118:	b920      	cbnz	r0, 8009124 <_dtoa_r+0x34>
 800911a:	4ba7      	ldr	r3, [pc, #668]	@ (80093b8 <_dtoa_r+0x2c8>)
 800911c:	21ef      	movs	r1, #239	@ 0xef
 800911e:	48a7      	ldr	r0, [pc, #668]	@ (80093bc <_dtoa_r+0x2cc>)
 8009120:	f001 fcbc 	bl	800aa9c <__assert_func>
 8009124:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009128:	6007      	str	r7, [r0, #0]
 800912a:	60c7      	str	r7, [r0, #12]
 800912c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009130:	6819      	ldr	r1, [r3, #0]
 8009132:	b159      	cbz	r1, 800914c <_dtoa_r+0x5c>
 8009134:	685a      	ldr	r2, [r3, #4]
 8009136:	604a      	str	r2, [r1, #4]
 8009138:	2301      	movs	r3, #1
 800913a:	4093      	lsls	r3, r2
 800913c:	608b      	str	r3, [r1, #8]
 800913e:	4658      	mov	r0, fp
 8009140:	f000 feda 	bl	8009ef8 <_Bfree>
 8009144:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009148:	2200      	movs	r2, #0
 800914a:	601a      	str	r2, [r3, #0]
 800914c:	1e2b      	subs	r3, r5, #0
 800914e:	bfb9      	ittee	lt
 8009150:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009154:	9303      	strlt	r3, [sp, #12]
 8009156:	2300      	movge	r3, #0
 8009158:	6033      	strge	r3, [r6, #0]
 800915a:	9f03      	ldr	r7, [sp, #12]
 800915c:	4b98      	ldr	r3, [pc, #608]	@ (80093c0 <_dtoa_r+0x2d0>)
 800915e:	bfbc      	itt	lt
 8009160:	2201      	movlt	r2, #1
 8009162:	6032      	strlt	r2, [r6, #0]
 8009164:	43bb      	bics	r3, r7
 8009166:	d112      	bne.n	800918e <_dtoa_r+0x9e>
 8009168:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800916a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800916e:	6013      	str	r3, [r2, #0]
 8009170:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009174:	4323      	orrs	r3, r4
 8009176:	f000 854d 	beq.w	8009c14 <_dtoa_r+0xb24>
 800917a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800917c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80093d4 <_dtoa_r+0x2e4>
 8009180:	2b00      	cmp	r3, #0
 8009182:	f000 854f 	beq.w	8009c24 <_dtoa_r+0xb34>
 8009186:	f10a 0303 	add.w	r3, sl, #3
 800918a:	f000 bd49 	b.w	8009c20 <_dtoa_r+0xb30>
 800918e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009192:	2200      	movs	r2, #0
 8009194:	ec51 0b17 	vmov	r0, r1, d7
 8009198:	2300      	movs	r3, #0
 800919a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800919e:	f7f7 fc93 	bl	8000ac8 <__aeabi_dcmpeq>
 80091a2:	4680      	mov	r8, r0
 80091a4:	b158      	cbz	r0, 80091be <_dtoa_r+0xce>
 80091a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80091a8:	2301      	movs	r3, #1
 80091aa:	6013      	str	r3, [r2, #0]
 80091ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80091ae:	b113      	cbz	r3, 80091b6 <_dtoa_r+0xc6>
 80091b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80091b2:	4b84      	ldr	r3, [pc, #528]	@ (80093c4 <_dtoa_r+0x2d4>)
 80091b4:	6013      	str	r3, [r2, #0]
 80091b6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80093d8 <_dtoa_r+0x2e8>
 80091ba:	f000 bd33 	b.w	8009c24 <_dtoa_r+0xb34>
 80091be:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80091c2:	aa16      	add	r2, sp, #88	@ 0x58
 80091c4:	a917      	add	r1, sp, #92	@ 0x5c
 80091c6:	4658      	mov	r0, fp
 80091c8:	f001 f980 	bl	800a4cc <__d2b>
 80091cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80091d0:	4681      	mov	r9, r0
 80091d2:	2e00      	cmp	r6, #0
 80091d4:	d077      	beq.n	80092c6 <_dtoa_r+0x1d6>
 80091d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80091d8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80091dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80091e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80091e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80091ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80091f0:	4619      	mov	r1, r3
 80091f2:	2200      	movs	r2, #0
 80091f4:	4b74      	ldr	r3, [pc, #464]	@ (80093c8 <_dtoa_r+0x2d8>)
 80091f6:	f7f7 f847 	bl	8000288 <__aeabi_dsub>
 80091fa:	a369      	add	r3, pc, #420	@ (adr r3, 80093a0 <_dtoa_r+0x2b0>)
 80091fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009200:	f7f7 f9fa 	bl	80005f8 <__aeabi_dmul>
 8009204:	a368      	add	r3, pc, #416	@ (adr r3, 80093a8 <_dtoa_r+0x2b8>)
 8009206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920a:	f7f7 f83f 	bl	800028c <__adddf3>
 800920e:	4604      	mov	r4, r0
 8009210:	4630      	mov	r0, r6
 8009212:	460d      	mov	r5, r1
 8009214:	f7f7 f986 	bl	8000524 <__aeabi_i2d>
 8009218:	a365      	add	r3, pc, #404	@ (adr r3, 80093b0 <_dtoa_r+0x2c0>)
 800921a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921e:	f7f7 f9eb 	bl	80005f8 <__aeabi_dmul>
 8009222:	4602      	mov	r2, r0
 8009224:	460b      	mov	r3, r1
 8009226:	4620      	mov	r0, r4
 8009228:	4629      	mov	r1, r5
 800922a:	f7f7 f82f 	bl	800028c <__adddf3>
 800922e:	4604      	mov	r4, r0
 8009230:	460d      	mov	r5, r1
 8009232:	f7f7 fc91 	bl	8000b58 <__aeabi_d2iz>
 8009236:	2200      	movs	r2, #0
 8009238:	4607      	mov	r7, r0
 800923a:	2300      	movs	r3, #0
 800923c:	4620      	mov	r0, r4
 800923e:	4629      	mov	r1, r5
 8009240:	f7f7 fc4c 	bl	8000adc <__aeabi_dcmplt>
 8009244:	b140      	cbz	r0, 8009258 <_dtoa_r+0x168>
 8009246:	4638      	mov	r0, r7
 8009248:	f7f7 f96c 	bl	8000524 <__aeabi_i2d>
 800924c:	4622      	mov	r2, r4
 800924e:	462b      	mov	r3, r5
 8009250:	f7f7 fc3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009254:	b900      	cbnz	r0, 8009258 <_dtoa_r+0x168>
 8009256:	3f01      	subs	r7, #1
 8009258:	2f16      	cmp	r7, #22
 800925a:	d851      	bhi.n	8009300 <_dtoa_r+0x210>
 800925c:	4b5b      	ldr	r3, [pc, #364]	@ (80093cc <_dtoa_r+0x2dc>)
 800925e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009266:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800926a:	f7f7 fc37 	bl	8000adc <__aeabi_dcmplt>
 800926e:	2800      	cmp	r0, #0
 8009270:	d048      	beq.n	8009304 <_dtoa_r+0x214>
 8009272:	3f01      	subs	r7, #1
 8009274:	2300      	movs	r3, #0
 8009276:	9312      	str	r3, [sp, #72]	@ 0x48
 8009278:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800927a:	1b9b      	subs	r3, r3, r6
 800927c:	1e5a      	subs	r2, r3, #1
 800927e:	bf44      	itt	mi
 8009280:	f1c3 0801 	rsbmi	r8, r3, #1
 8009284:	2300      	movmi	r3, #0
 8009286:	9208      	str	r2, [sp, #32]
 8009288:	bf54      	ite	pl
 800928a:	f04f 0800 	movpl.w	r8, #0
 800928e:	9308      	strmi	r3, [sp, #32]
 8009290:	2f00      	cmp	r7, #0
 8009292:	db39      	blt.n	8009308 <_dtoa_r+0x218>
 8009294:	9b08      	ldr	r3, [sp, #32]
 8009296:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009298:	443b      	add	r3, r7
 800929a:	9308      	str	r3, [sp, #32]
 800929c:	2300      	movs	r3, #0
 800929e:	930a      	str	r3, [sp, #40]	@ 0x28
 80092a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092a2:	2b09      	cmp	r3, #9
 80092a4:	d864      	bhi.n	8009370 <_dtoa_r+0x280>
 80092a6:	2b05      	cmp	r3, #5
 80092a8:	bfc4      	itt	gt
 80092aa:	3b04      	subgt	r3, #4
 80092ac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80092ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092b0:	f1a3 0302 	sub.w	r3, r3, #2
 80092b4:	bfcc      	ite	gt
 80092b6:	2400      	movgt	r4, #0
 80092b8:	2401      	movle	r4, #1
 80092ba:	2b03      	cmp	r3, #3
 80092bc:	d863      	bhi.n	8009386 <_dtoa_r+0x296>
 80092be:	e8df f003 	tbb	[pc, r3]
 80092c2:	372a      	.short	0x372a
 80092c4:	5535      	.short	0x5535
 80092c6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80092ca:	441e      	add	r6, r3
 80092cc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80092d0:	2b20      	cmp	r3, #32
 80092d2:	bfc1      	itttt	gt
 80092d4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80092d8:	409f      	lslgt	r7, r3
 80092da:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80092de:	fa24 f303 	lsrgt.w	r3, r4, r3
 80092e2:	bfd6      	itet	le
 80092e4:	f1c3 0320 	rsble	r3, r3, #32
 80092e8:	ea47 0003 	orrgt.w	r0, r7, r3
 80092ec:	fa04 f003 	lslle.w	r0, r4, r3
 80092f0:	f7f7 f908 	bl	8000504 <__aeabi_ui2d>
 80092f4:	2201      	movs	r2, #1
 80092f6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80092fa:	3e01      	subs	r6, #1
 80092fc:	9214      	str	r2, [sp, #80]	@ 0x50
 80092fe:	e777      	b.n	80091f0 <_dtoa_r+0x100>
 8009300:	2301      	movs	r3, #1
 8009302:	e7b8      	b.n	8009276 <_dtoa_r+0x186>
 8009304:	9012      	str	r0, [sp, #72]	@ 0x48
 8009306:	e7b7      	b.n	8009278 <_dtoa_r+0x188>
 8009308:	427b      	negs	r3, r7
 800930a:	930a      	str	r3, [sp, #40]	@ 0x28
 800930c:	2300      	movs	r3, #0
 800930e:	eba8 0807 	sub.w	r8, r8, r7
 8009312:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009314:	e7c4      	b.n	80092a0 <_dtoa_r+0x1b0>
 8009316:	2300      	movs	r3, #0
 8009318:	930b      	str	r3, [sp, #44]	@ 0x2c
 800931a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800931c:	2b00      	cmp	r3, #0
 800931e:	dc35      	bgt.n	800938c <_dtoa_r+0x29c>
 8009320:	2301      	movs	r3, #1
 8009322:	9300      	str	r3, [sp, #0]
 8009324:	9307      	str	r3, [sp, #28]
 8009326:	461a      	mov	r2, r3
 8009328:	920e      	str	r2, [sp, #56]	@ 0x38
 800932a:	e00b      	b.n	8009344 <_dtoa_r+0x254>
 800932c:	2301      	movs	r3, #1
 800932e:	e7f3      	b.n	8009318 <_dtoa_r+0x228>
 8009330:	2300      	movs	r3, #0
 8009332:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009334:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009336:	18fb      	adds	r3, r7, r3
 8009338:	9300      	str	r3, [sp, #0]
 800933a:	3301      	adds	r3, #1
 800933c:	2b01      	cmp	r3, #1
 800933e:	9307      	str	r3, [sp, #28]
 8009340:	bfb8      	it	lt
 8009342:	2301      	movlt	r3, #1
 8009344:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009348:	2100      	movs	r1, #0
 800934a:	2204      	movs	r2, #4
 800934c:	f102 0514 	add.w	r5, r2, #20
 8009350:	429d      	cmp	r5, r3
 8009352:	d91f      	bls.n	8009394 <_dtoa_r+0x2a4>
 8009354:	6041      	str	r1, [r0, #4]
 8009356:	4658      	mov	r0, fp
 8009358:	f000 fd8e 	bl	8009e78 <_Balloc>
 800935c:	4682      	mov	sl, r0
 800935e:	2800      	cmp	r0, #0
 8009360:	d13c      	bne.n	80093dc <_dtoa_r+0x2ec>
 8009362:	4b1b      	ldr	r3, [pc, #108]	@ (80093d0 <_dtoa_r+0x2e0>)
 8009364:	4602      	mov	r2, r0
 8009366:	f240 11af 	movw	r1, #431	@ 0x1af
 800936a:	e6d8      	b.n	800911e <_dtoa_r+0x2e>
 800936c:	2301      	movs	r3, #1
 800936e:	e7e0      	b.n	8009332 <_dtoa_r+0x242>
 8009370:	2401      	movs	r4, #1
 8009372:	2300      	movs	r3, #0
 8009374:	9309      	str	r3, [sp, #36]	@ 0x24
 8009376:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009378:	f04f 33ff 	mov.w	r3, #4294967295
 800937c:	9300      	str	r3, [sp, #0]
 800937e:	9307      	str	r3, [sp, #28]
 8009380:	2200      	movs	r2, #0
 8009382:	2312      	movs	r3, #18
 8009384:	e7d0      	b.n	8009328 <_dtoa_r+0x238>
 8009386:	2301      	movs	r3, #1
 8009388:	930b      	str	r3, [sp, #44]	@ 0x2c
 800938a:	e7f5      	b.n	8009378 <_dtoa_r+0x288>
 800938c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800938e:	9300      	str	r3, [sp, #0]
 8009390:	9307      	str	r3, [sp, #28]
 8009392:	e7d7      	b.n	8009344 <_dtoa_r+0x254>
 8009394:	3101      	adds	r1, #1
 8009396:	0052      	lsls	r2, r2, #1
 8009398:	e7d8      	b.n	800934c <_dtoa_r+0x25c>
 800939a:	bf00      	nop
 800939c:	f3af 8000 	nop.w
 80093a0:	636f4361 	.word	0x636f4361
 80093a4:	3fd287a7 	.word	0x3fd287a7
 80093a8:	8b60c8b3 	.word	0x8b60c8b3
 80093ac:	3fc68a28 	.word	0x3fc68a28
 80093b0:	509f79fb 	.word	0x509f79fb
 80093b4:	3fd34413 	.word	0x3fd34413
 80093b8:	0800ae7d 	.word	0x0800ae7d
 80093bc:	0800ae94 	.word	0x0800ae94
 80093c0:	7ff00000 	.word	0x7ff00000
 80093c4:	0800ae4d 	.word	0x0800ae4d
 80093c8:	3ff80000 	.word	0x3ff80000
 80093cc:	0800af90 	.word	0x0800af90
 80093d0:	0800aeec 	.word	0x0800aeec
 80093d4:	0800ae79 	.word	0x0800ae79
 80093d8:	0800ae4c 	.word	0x0800ae4c
 80093dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80093e0:	6018      	str	r0, [r3, #0]
 80093e2:	9b07      	ldr	r3, [sp, #28]
 80093e4:	2b0e      	cmp	r3, #14
 80093e6:	f200 80a4 	bhi.w	8009532 <_dtoa_r+0x442>
 80093ea:	2c00      	cmp	r4, #0
 80093ec:	f000 80a1 	beq.w	8009532 <_dtoa_r+0x442>
 80093f0:	2f00      	cmp	r7, #0
 80093f2:	dd33      	ble.n	800945c <_dtoa_r+0x36c>
 80093f4:	4bad      	ldr	r3, [pc, #692]	@ (80096ac <_dtoa_r+0x5bc>)
 80093f6:	f007 020f 	and.w	r2, r7, #15
 80093fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093fe:	ed93 7b00 	vldr	d7, [r3]
 8009402:	05f8      	lsls	r0, r7, #23
 8009404:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009408:	ea4f 1427 	mov.w	r4, r7, asr #4
 800940c:	d516      	bpl.n	800943c <_dtoa_r+0x34c>
 800940e:	4ba8      	ldr	r3, [pc, #672]	@ (80096b0 <_dtoa_r+0x5c0>)
 8009410:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009414:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009418:	f7f7 fa18 	bl	800084c <__aeabi_ddiv>
 800941c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009420:	f004 040f 	and.w	r4, r4, #15
 8009424:	2603      	movs	r6, #3
 8009426:	4da2      	ldr	r5, [pc, #648]	@ (80096b0 <_dtoa_r+0x5c0>)
 8009428:	b954      	cbnz	r4, 8009440 <_dtoa_r+0x350>
 800942a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800942e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009432:	f7f7 fa0b 	bl	800084c <__aeabi_ddiv>
 8009436:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800943a:	e028      	b.n	800948e <_dtoa_r+0x39e>
 800943c:	2602      	movs	r6, #2
 800943e:	e7f2      	b.n	8009426 <_dtoa_r+0x336>
 8009440:	07e1      	lsls	r1, r4, #31
 8009442:	d508      	bpl.n	8009456 <_dtoa_r+0x366>
 8009444:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009448:	e9d5 2300 	ldrd	r2, r3, [r5]
 800944c:	f7f7 f8d4 	bl	80005f8 <__aeabi_dmul>
 8009450:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009454:	3601      	adds	r6, #1
 8009456:	1064      	asrs	r4, r4, #1
 8009458:	3508      	adds	r5, #8
 800945a:	e7e5      	b.n	8009428 <_dtoa_r+0x338>
 800945c:	f000 80d2 	beq.w	8009604 <_dtoa_r+0x514>
 8009460:	427c      	negs	r4, r7
 8009462:	4b92      	ldr	r3, [pc, #584]	@ (80096ac <_dtoa_r+0x5bc>)
 8009464:	4d92      	ldr	r5, [pc, #584]	@ (80096b0 <_dtoa_r+0x5c0>)
 8009466:	f004 020f 	and.w	r2, r4, #15
 800946a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800946e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009472:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009476:	f7f7 f8bf 	bl	80005f8 <__aeabi_dmul>
 800947a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800947e:	1124      	asrs	r4, r4, #4
 8009480:	2300      	movs	r3, #0
 8009482:	2602      	movs	r6, #2
 8009484:	2c00      	cmp	r4, #0
 8009486:	f040 80b2 	bne.w	80095ee <_dtoa_r+0x4fe>
 800948a:	2b00      	cmp	r3, #0
 800948c:	d1d3      	bne.n	8009436 <_dtoa_r+0x346>
 800948e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009490:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009494:	2b00      	cmp	r3, #0
 8009496:	f000 80b7 	beq.w	8009608 <_dtoa_r+0x518>
 800949a:	4b86      	ldr	r3, [pc, #536]	@ (80096b4 <_dtoa_r+0x5c4>)
 800949c:	2200      	movs	r2, #0
 800949e:	4620      	mov	r0, r4
 80094a0:	4629      	mov	r1, r5
 80094a2:	f7f7 fb1b 	bl	8000adc <__aeabi_dcmplt>
 80094a6:	2800      	cmp	r0, #0
 80094a8:	f000 80ae 	beq.w	8009608 <_dtoa_r+0x518>
 80094ac:	9b07      	ldr	r3, [sp, #28]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f000 80aa 	beq.w	8009608 <_dtoa_r+0x518>
 80094b4:	9b00      	ldr	r3, [sp, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	dd37      	ble.n	800952a <_dtoa_r+0x43a>
 80094ba:	1e7b      	subs	r3, r7, #1
 80094bc:	9304      	str	r3, [sp, #16]
 80094be:	4620      	mov	r0, r4
 80094c0:	4b7d      	ldr	r3, [pc, #500]	@ (80096b8 <_dtoa_r+0x5c8>)
 80094c2:	2200      	movs	r2, #0
 80094c4:	4629      	mov	r1, r5
 80094c6:	f7f7 f897 	bl	80005f8 <__aeabi_dmul>
 80094ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094ce:	9c00      	ldr	r4, [sp, #0]
 80094d0:	3601      	adds	r6, #1
 80094d2:	4630      	mov	r0, r6
 80094d4:	f7f7 f826 	bl	8000524 <__aeabi_i2d>
 80094d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094dc:	f7f7 f88c 	bl	80005f8 <__aeabi_dmul>
 80094e0:	4b76      	ldr	r3, [pc, #472]	@ (80096bc <_dtoa_r+0x5cc>)
 80094e2:	2200      	movs	r2, #0
 80094e4:	f7f6 fed2 	bl	800028c <__adddf3>
 80094e8:	4605      	mov	r5, r0
 80094ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80094ee:	2c00      	cmp	r4, #0
 80094f0:	f040 808d 	bne.w	800960e <_dtoa_r+0x51e>
 80094f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094f8:	4b71      	ldr	r3, [pc, #452]	@ (80096c0 <_dtoa_r+0x5d0>)
 80094fa:	2200      	movs	r2, #0
 80094fc:	f7f6 fec4 	bl	8000288 <__aeabi_dsub>
 8009500:	4602      	mov	r2, r0
 8009502:	460b      	mov	r3, r1
 8009504:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009508:	462a      	mov	r2, r5
 800950a:	4633      	mov	r3, r6
 800950c:	f7f7 fb04 	bl	8000b18 <__aeabi_dcmpgt>
 8009510:	2800      	cmp	r0, #0
 8009512:	f040 828b 	bne.w	8009a2c <_dtoa_r+0x93c>
 8009516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800951a:	462a      	mov	r2, r5
 800951c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009520:	f7f7 fadc 	bl	8000adc <__aeabi_dcmplt>
 8009524:	2800      	cmp	r0, #0
 8009526:	f040 8128 	bne.w	800977a <_dtoa_r+0x68a>
 800952a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800952e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009532:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009534:	2b00      	cmp	r3, #0
 8009536:	f2c0 815a 	blt.w	80097ee <_dtoa_r+0x6fe>
 800953a:	2f0e      	cmp	r7, #14
 800953c:	f300 8157 	bgt.w	80097ee <_dtoa_r+0x6fe>
 8009540:	4b5a      	ldr	r3, [pc, #360]	@ (80096ac <_dtoa_r+0x5bc>)
 8009542:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009546:	ed93 7b00 	vldr	d7, [r3]
 800954a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800954c:	2b00      	cmp	r3, #0
 800954e:	ed8d 7b00 	vstr	d7, [sp]
 8009552:	da03      	bge.n	800955c <_dtoa_r+0x46c>
 8009554:	9b07      	ldr	r3, [sp, #28]
 8009556:	2b00      	cmp	r3, #0
 8009558:	f340 8101 	ble.w	800975e <_dtoa_r+0x66e>
 800955c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009560:	4656      	mov	r6, sl
 8009562:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009566:	4620      	mov	r0, r4
 8009568:	4629      	mov	r1, r5
 800956a:	f7f7 f96f 	bl	800084c <__aeabi_ddiv>
 800956e:	f7f7 faf3 	bl	8000b58 <__aeabi_d2iz>
 8009572:	4680      	mov	r8, r0
 8009574:	f7f6 ffd6 	bl	8000524 <__aeabi_i2d>
 8009578:	e9dd 2300 	ldrd	r2, r3, [sp]
 800957c:	f7f7 f83c 	bl	80005f8 <__aeabi_dmul>
 8009580:	4602      	mov	r2, r0
 8009582:	460b      	mov	r3, r1
 8009584:	4620      	mov	r0, r4
 8009586:	4629      	mov	r1, r5
 8009588:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800958c:	f7f6 fe7c 	bl	8000288 <__aeabi_dsub>
 8009590:	f806 4b01 	strb.w	r4, [r6], #1
 8009594:	9d07      	ldr	r5, [sp, #28]
 8009596:	eba6 040a 	sub.w	r4, r6, sl
 800959a:	42a5      	cmp	r5, r4
 800959c:	4602      	mov	r2, r0
 800959e:	460b      	mov	r3, r1
 80095a0:	f040 8117 	bne.w	80097d2 <_dtoa_r+0x6e2>
 80095a4:	f7f6 fe72 	bl	800028c <__adddf3>
 80095a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095ac:	4604      	mov	r4, r0
 80095ae:	460d      	mov	r5, r1
 80095b0:	f7f7 fab2 	bl	8000b18 <__aeabi_dcmpgt>
 80095b4:	2800      	cmp	r0, #0
 80095b6:	f040 80f9 	bne.w	80097ac <_dtoa_r+0x6bc>
 80095ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095be:	4620      	mov	r0, r4
 80095c0:	4629      	mov	r1, r5
 80095c2:	f7f7 fa81 	bl	8000ac8 <__aeabi_dcmpeq>
 80095c6:	b118      	cbz	r0, 80095d0 <_dtoa_r+0x4e0>
 80095c8:	f018 0f01 	tst.w	r8, #1
 80095cc:	f040 80ee 	bne.w	80097ac <_dtoa_r+0x6bc>
 80095d0:	4649      	mov	r1, r9
 80095d2:	4658      	mov	r0, fp
 80095d4:	f000 fc90 	bl	8009ef8 <_Bfree>
 80095d8:	2300      	movs	r3, #0
 80095da:	7033      	strb	r3, [r6, #0]
 80095dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80095de:	3701      	adds	r7, #1
 80095e0:	601f      	str	r7, [r3, #0]
 80095e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	f000 831d 	beq.w	8009c24 <_dtoa_r+0xb34>
 80095ea:	601e      	str	r6, [r3, #0]
 80095ec:	e31a      	b.n	8009c24 <_dtoa_r+0xb34>
 80095ee:	07e2      	lsls	r2, r4, #31
 80095f0:	d505      	bpl.n	80095fe <_dtoa_r+0x50e>
 80095f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80095f6:	f7f6 ffff 	bl	80005f8 <__aeabi_dmul>
 80095fa:	3601      	adds	r6, #1
 80095fc:	2301      	movs	r3, #1
 80095fe:	1064      	asrs	r4, r4, #1
 8009600:	3508      	adds	r5, #8
 8009602:	e73f      	b.n	8009484 <_dtoa_r+0x394>
 8009604:	2602      	movs	r6, #2
 8009606:	e742      	b.n	800948e <_dtoa_r+0x39e>
 8009608:	9c07      	ldr	r4, [sp, #28]
 800960a:	9704      	str	r7, [sp, #16]
 800960c:	e761      	b.n	80094d2 <_dtoa_r+0x3e2>
 800960e:	4b27      	ldr	r3, [pc, #156]	@ (80096ac <_dtoa_r+0x5bc>)
 8009610:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009612:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009616:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800961a:	4454      	add	r4, sl
 800961c:	2900      	cmp	r1, #0
 800961e:	d053      	beq.n	80096c8 <_dtoa_r+0x5d8>
 8009620:	4928      	ldr	r1, [pc, #160]	@ (80096c4 <_dtoa_r+0x5d4>)
 8009622:	2000      	movs	r0, #0
 8009624:	f7f7 f912 	bl	800084c <__aeabi_ddiv>
 8009628:	4633      	mov	r3, r6
 800962a:	462a      	mov	r2, r5
 800962c:	f7f6 fe2c 	bl	8000288 <__aeabi_dsub>
 8009630:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009634:	4656      	mov	r6, sl
 8009636:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800963a:	f7f7 fa8d 	bl	8000b58 <__aeabi_d2iz>
 800963e:	4605      	mov	r5, r0
 8009640:	f7f6 ff70 	bl	8000524 <__aeabi_i2d>
 8009644:	4602      	mov	r2, r0
 8009646:	460b      	mov	r3, r1
 8009648:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800964c:	f7f6 fe1c 	bl	8000288 <__aeabi_dsub>
 8009650:	3530      	adds	r5, #48	@ 0x30
 8009652:	4602      	mov	r2, r0
 8009654:	460b      	mov	r3, r1
 8009656:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800965a:	f806 5b01 	strb.w	r5, [r6], #1
 800965e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009662:	f7f7 fa3b 	bl	8000adc <__aeabi_dcmplt>
 8009666:	2800      	cmp	r0, #0
 8009668:	d171      	bne.n	800974e <_dtoa_r+0x65e>
 800966a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800966e:	4911      	ldr	r1, [pc, #68]	@ (80096b4 <_dtoa_r+0x5c4>)
 8009670:	2000      	movs	r0, #0
 8009672:	f7f6 fe09 	bl	8000288 <__aeabi_dsub>
 8009676:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800967a:	f7f7 fa2f 	bl	8000adc <__aeabi_dcmplt>
 800967e:	2800      	cmp	r0, #0
 8009680:	f040 8095 	bne.w	80097ae <_dtoa_r+0x6be>
 8009684:	42a6      	cmp	r6, r4
 8009686:	f43f af50 	beq.w	800952a <_dtoa_r+0x43a>
 800968a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800968e:	4b0a      	ldr	r3, [pc, #40]	@ (80096b8 <_dtoa_r+0x5c8>)
 8009690:	2200      	movs	r2, #0
 8009692:	f7f6 ffb1 	bl	80005f8 <__aeabi_dmul>
 8009696:	4b08      	ldr	r3, [pc, #32]	@ (80096b8 <_dtoa_r+0x5c8>)
 8009698:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800969c:	2200      	movs	r2, #0
 800969e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096a2:	f7f6 ffa9 	bl	80005f8 <__aeabi_dmul>
 80096a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096aa:	e7c4      	b.n	8009636 <_dtoa_r+0x546>
 80096ac:	0800af90 	.word	0x0800af90
 80096b0:	0800af68 	.word	0x0800af68
 80096b4:	3ff00000 	.word	0x3ff00000
 80096b8:	40240000 	.word	0x40240000
 80096bc:	401c0000 	.word	0x401c0000
 80096c0:	40140000 	.word	0x40140000
 80096c4:	3fe00000 	.word	0x3fe00000
 80096c8:	4631      	mov	r1, r6
 80096ca:	4628      	mov	r0, r5
 80096cc:	f7f6 ff94 	bl	80005f8 <__aeabi_dmul>
 80096d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80096d4:	9415      	str	r4, [sp, #84]	@ 0x54
 80096d6:	4656      	mov	r6, sl
 80096d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096dc:	f7f7 fa3c 	bl	8000b58 <__aeabi_d2iz>
 80096e0:	4605      	mov	r5, r0
 80096e2:	f7f6 ff1f 	bl	8000524 <__aeabi_i2d>
 80096e6:	4602      	mov	r2, r0
 80096e8:	460b      	mov	r3, r1
 80096ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096ee:	f7f6 fdcb 	bl	8000288 <__aeabi_dsub>
 80096f2:	3530      	adds	r5, #48	@ 0x30
 80096f4:	f806 5b01 	strb.w	r5, [r6], #1
 80096f8:	4602      	mov	r2, r0
 80096fa:	460b      	mov	r3, r1
 80096fc:	42a6      	cmp	r6, r4
 80096fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009702:	f04f 0200 	mov.w	r2, #0
 8009706:	d124      	bne.n	8009752 <_dtoa_r+0x662>
 8009708:	4bac      	ldr	r3, [pc, #688]	@ (80099bc <_dtoa_r+0x8cc>)
 800970a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800970e:	f7f6 fdbd 	bl	800028c <__adddf3>
 8009712:	4602      	mov	r2, r0
 8009714:	460b      	mov	r3, r1
 8009716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800971a:	f7f7 f9fd 	bl	8000b18 <__aeabi_dcmpgt>
 800971e:	2800      	cmp	r0, #0
 8009720:	d145      	bne.n	80097ae <_dtoa_r+0x6be>
 8009722:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009726:	49a5      	ldr	r1, [pc, #660]	@ (80099bc <_dtoa_r+0x8cc>)
 8009728:	2000      	movs	r0, #0
 800972a:	f7f6 fdad 	bl	8000288 <__aeabi_dsub>
 800972e:	4602      	mov	r2, r0
 8009730:	460b      	mov	r3, r1
 8009732:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009736:	f7f7 f9d1 	bl	8000adc <__aeabi_dcmplt>
 800973a:	2800      	cmp	r0, #0
 800973c:	f43f aef5 	beq.w	800952a <_dtoa_r+0x43a>
 8009740:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009742:	1e73      	subs	r3, r6, #1
 8009744:	9315      	str	r3, [sp, #84]	@ 0x54
 8009746:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800974a:	2b30      	cmp	r3, #48	@ 0x30
 800974c:	d0f8      	beq.n	8009740 <_dtoa_r+0x650>
 800974e:	9f04      	ldr	r7, [sp, #16]
 8009750:	e73e      	b.n	80095d0 <_dtoa_r+0x4e0>
 8009752:	4b9b      	ldr	r3, [pc, #620]	@ (80099c0 <_dtoa_r+0x8d0>)
 8009754:	f7f6 ff50 	bl	80005f8 <__aeabi_dmul>
 8009758:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800975c:	e7bc      	b.n	80096d8 <_dtoa_r+0x5e8>
 800975e:	d10c      	bne.n	800977a <_dtoa_r+0x68a>
 8009760:	4b98      	ldr	r3, [pc, #608]	@ (80099c4 <_dtoa_r+0x8d4>)
 8009762:	2200      	movs	r2, #0
 8009764:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009768:	f7f6 ff46 	bl	80005f8 <__aeabi_dmul>
 800976c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009770:	f7f7 f9c8 	bl	8000b04 <__aeabi_dcmpge>
 8009774:	2800      	cmp	r0, #0
 8009776:	f000 8157 	beq.w	8009a28 <_dtoa_r+0x938>
 800977a:	2400      	movs	r4, #0
 800977c:	4625      	mov	r5, r4
 800977e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009780:	43db      	mvns	r3, r3
 8009782:	9304      	str	r3, [sp, #16]
 8009784:	4656      	mov	r6, sl
 8009786:	2700      	movs	r7, #0
 8009788:	4621      	mov	r1, r4
 800978a:	4658      	mov	r0, fp
 800978c:	f000 fbb4 	bl	8009ef8 <_Bfree>
 8009790:	2d00      	cmp	r5, #0
 8009792:	d0dc      	beq.n	800974e <_dtoa_r+0x65e>
 8009794:	b12f      	cbz	r7, 80097a2 <_dtoa_r+0x6b2>
 8009796:	42af      	cmp	r7, r5
 8009798:	d003      	beq.n	80097a2 <_dtoa_r+0x6b2>
 800979a:	4639      	mov	r1, r7
 800979c:	4658      	mov	r0, fp
 800979e:	f000 fbab 	bl	8009ef8 <_Bfree>
 80097a2:	4629      	mov	r1, r5
 80097a4:	4658      	mov	r0, fp
 80097a6:	f000 fba7 	bl	8009ef8 <_Bfree>
 80097aa:	e7d0      	b.n	800974e <_dtoa_r+0x65e>
 80097ac:	9704      	str	r7, [sp, #16]
 80097ae:	4633      	mov	r3, r6
 80097b0:	461e      	mov	r6, r3
 80097b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097b6:	2a39      	cmp	r2, #57	@ 0x39
 80097b8:	d107      	bne.n	80097ca <_dtoa_r+0x6da>
 80097ba:	459a      	cmp	sl, r3
 80097bc:	d1f8      	bne.n	80097b0 <_dtoa_r+0x6c0>
 80097be:	9a04      	ldr	r2, [sp, #16]
 80097c0:	3201      	adds	r2, #1
 80097c2:	9204      	str	r2, [sp, #16]
 80097c4:	2230      	movs	r2, #48	@ 0x30
 80097c6:	f88a 2000 	strb.w	r2, [sl]
 80097ca:	781a      	ldrb	r2, [r3, #0]
 80097cc:	3201      	adds	r2, #1
 80097ce:	701a      	strb	r2, [r3, #0]
 80097d0:	e7bd      	b.n	800974e <_dtoa_r+0x65e>
 80097d2:	4b7b      	ldr	r3, [pc, #492]	@ (80099c0 <_dtoa_r+0x8d0>)
 80097d4:	2200      	movs	r2, #0
 80097d6:	f7f6 ff0f 	bl	80005f8 <__aeabi_dmul>
 80097da:	2200      	movs	r2, #0
 80097dc:	2300      	movs	r3, #0
 80097de:	4604      	mov	r4, r0
 80097e0:	460d      	mov	r5, r1
 80097e2:	f7f7 f971 	bl	8000ac8 <__aeabi_dcmpeq>
 80097e6:	2800      	cmp	r0, #0
 80097e8:	f43f aebb 	beq.w	8009562 <_dtoa_r+0x472>
 80097ec:	e6f0      	b.n	80095d0 <_dtoa_r+0x4e0>
 80097ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80097f0:	2a00      	cmp	r2, #0
 80097f2:	f000 80db 	beq.w	80099ac <_dtoa_r+0x8bc>
 80097f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097f8:	2a01      	cmp	r2, #1
 80097fa:	f300 80bf 	bgt.w	800997c <_dtoa_r+0x88c>
 80097fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009800:	2a00      	cmp	r2, #0
 8009802:	f000 80b7 	beq.w	8009974 <_dtoa_r+0x884>
 8009806:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800980a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800980c:	4646      	mov	r6, r8
 800980e:	9a08      	ldr	r2, [sp, #32]
 8009810:	2101      	movs	r1, #1
 8009812:	441a      	add	r2, r3
 8009814:	4658      	mov	r0, fp
 8009816:	4498      	add	r8, r3
 8009818:	9208      	str	r2, [sp, #32]
 800981a:	f000 fc21 	bl	800a060 <__i2b>
 800981e:	4605      	mov	r5, r0
 8009820:	b15e      	cbz	r6, 800983a <_dtoa_r+0x74a>
 8009822:	9b08      	ldr	r3, [sp, #32]
 8009824:	2b00      	cmp	r3, #0
 8009826:	dd08      	ble.n	800983a <_dtoa_r+0x74a>
 8009828:	42b3      	cmp	r3, r6
 800982a:	9a08      	ldr	r2, [sp, #32]
 800982c:	bfa8      	it	ge
 800982e:	4633      	movge	r3, r6
 8009830:	eba8 0803 	sub.w	r8, r8, r3
 8009834:	1af6      	subs	r6, r6, r3
 8009836:	1ad3      	subs	r3, r2, r3
 8009838:	9308      	str	r3, [sp, #32]
 800983a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800983c:	b1f3      	cbz	r3, 800987c <_dtoa_r+0x78c>
 800983e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009840:	2b00      	cmp	r3, #0
 8009842:	f000 80b7 	beq.w	80099b4 <_dtoa_r+0x8c4>
 8009846:	b18c      	cbz	r4, 800986c <_dtoa_r+0x77c>
 8009848:	4629      	mov	r1, r5
 800984a:	4622      	mov	r2, r4
 800984c:	4658      	mov	r0, fp
 800984e:	f000 fcc7 	bl	800a1e0 <__pow5mult>
 8009852:	464a      	mov	r2, r9
 8009854:	4601      	mov	r1, r0
 8009856:	4605      	mov	r5, r0
 8009858:	4658      	mov	r0, fp
 800985a:	f000 fc17 	bl	800a08c <__multiply>
 800985e:	4649      	mov	r1, r9
 8009860:	9004      	str	r0, [sp, #16]
 8009862:	4658      	mov	r0, fp
 8009864:	f000 fb48 	bl	8009ef8 <_Bfree>
 8009868:	9b04      	ldr	r3, [sp, #16]
 800986a:	4699      	mov	r9, r3
 800986c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800986e:	1b1a      	subs	r2, r3, r4
 8009870:	d004      	beq.n	800987c <_dtoa_r+0x78c>
 8009872:	4649      	mov	r1, r9
 8009874:	4658      	mov	r0, fp
 8009876:	f000 fcb3 	bl	800a1e0 <__pow5mult>
 800987a:	4681      	mov	r9, r0
 800987c:	2101      	movs	r1, #1
 800987e:	4658      	mov	r0, fp
 8009880:	f000 fbee 	bl	800a060 <__i2b>
 8009884:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009886:	4604      	mov	r4, r0
 8009888:	2b00      	cmp	r3, #0
 800988a:	f000 81cf 	beq.w	8009c2c <_dtoa_r+0xb3c>
 800988e:	461a      	mov	r2, r3
 8009890:	4601      	mov	r1, r0
 8009892:	4658      	mov	r0, fp
 8009894:	f000 fca4 	bl	800a1e0 <__pow5mult>
 8009898:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800989a:	2b01      	cmp	r3, #1
 800989c:	4604      	mov	r4, r0
 800989e:	f300 8095 	bgt.w	80099cc <_dtoa_r+0x8dc>
 80098a2:	9b02      	ldr	r3, [sp, #8]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f040 8087 	bne.w	80099b8 <_dtoa_r+0x8c8>
 80098aa:	9b03      	ldr	r3, [sp, #12]
 80098ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	f040 8089 	bne.w	80099c8 <_dtoa_r+0x8d8>
 80098b6:	9b03      	ldr	r3, [sp, #12]
 80098b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80098bc:	0d1b      	lsrs	r3, r3, #20
 80098be:	051b      	lsls	r3, r3, #20
 80098c0:	b12b      	cbz	r3, 80098ce <_dtoa_r+0x7de>
 80098c2:	9b08      	ldr	r3, [sp, #32]
 80098c4:	3301      	adds	r3, #1
 80098c6:	9308      	str	r3, [sp, #32]
 80098c8:	f108 0801 	add.w	r8, r8, #1
 80098cc:	2301      	movs	r3, #1
 80098ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80098d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	f000 81b0 	beq.w	8009c38 <_dtoa_r+0xb48>
 80098d8:	6923      	ldr	r3, [r4, #16]
 80098da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80098de:	6918      	ldr	r0, [r3, #16]
 80098e0:	f000 fb72 	bl	8009fc8 <__hi0bits>
 80098e4:	f1c0 0020 	rsb	r0, r0, #32
 80098e8:	9b08      	ldr	r3, [sp, #32]
 80098ea:	4418      	add	r0, r3
 80098ec:	f010 001f 	ands.w	r0, r0, #31
 80098f0:	d077      	beq.n	80099e2 <_dtoa_r+0x8f2>
 80098f2:	f1c0 0320 	rsb	r3, r0, #32
 80098f6:	2b04      	cmp	r3, #4
 80098f8:	dd6b      	ble.n	80099d2 <_dtoa_r+0x8e2>
 80098fa:	9b08      	ldr	r3, [sp, #32]
 80098fc:	f1c0 001c 	rsb	r0, r0, #28
 8009900:	4403      	add	r3, r0
 8009902:	4480      	add	r8, r0
 8009904:	4406      	add	r6, r0
 8009906:	9308      	str	r3, [sp, #32]
 8009908:	f1b8 0f00 	cmp.w	r8, #0
 800990c:	dd05      	ble.n	800991a <_dtoa_r+0x82a>
 800990e:	4649      	mov	r1, r9
 8009910:	4642      	mov	r2, r8
 8009912:	4658      	mov	r0, fp
 8009914:	f000 fcbe 	bl	800a294 <__lshift>
 8009918:	4681      	mov	r9, r0
 800991a:	9b08      	ldr	r3, [sp, #32]
 800991c:	2b00      	cmp	r3, #0
 800991e:	dd05      	ble.n	800992c <_dtoa_r+0x83c>
 8009920:	4621      	mov	r1, r4
 8009922:	461a      	mov	r2, r3
 8009924:	4658      	mov	r0, fp
 8009926:	f000 fcb5 	bl	800a294 <__lshift>
 800992a:	4604      	mov	r4, r0
 800992c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800992e:	2b00      	cmp	r3, #0
 8009930:	d059      	beq.n	80099e6 <_dtoa_r+0x8f6>
 8009932:	4621      	mov	r1, r4
 8009934:	4648      	mov	r0, r9
 8009936:	f000 fd19 	bl	800a36c <__mcmp>
 800993a:	2800      	cmp	r0, #0
 800993c:	da53      	bge.n	80099e6 <_dtoa_r+0x8f6>
 800993e:	1e7b      	subs	r3, r7, #1
 8009940:	9304      	str	r3, [sp, #16]
 8009942:	4649      	mov	r1, r9
 8009944:	2300      	movs	r3, #0
 8009946:	220a      	movs	r2, #10
 8009948:	4658      	mov	r0, fp
 800994a:	f000 faf7 	bl	8009f3c <__multadd>
 800994e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009950:	4681      	mov	r9, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	f000 8172 	beq.w	8009c3c <_dtoa_r+0xb4c>
 8009958:	2300      	movs	r3, #0
 800995a:	4629      	mov	r1, r5
 800995c:	220a      	movs	r2, #10
 800995e:	4658      	mov	r0, fp
 8009960:	f000 faec 	bl	8009f3c <__multadd>
 8009964:	9b00      	ldr	r3, [sp, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	4605      	mov	r5, r0
 800996a:	dc67      	bgt.n	8009a3c <_dtoa_r+0x94c>
 800996c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800996e:	2b02      	cmp	r3, #2
 8009970:	dc41      	bgt.n	80099f6 <_dtoa_r+0x906>
 8009972:	e063      	b.n	8009a3c <_dtoa_r+0x94c>
 8009974:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009976:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800997a:	e746      	b.n	800980a <_dtoa_r+0x71a>
 800997c:	9b07      	ldr	r3, [sp, #28]
 800997e:	1e5c      	subs	r4, r3, #1
 8009980:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009982:	42a3      	cmp	r3, r4
 8009984:	bfbf      	itttt	lt
 8009986:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009988:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800998a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800998c:	1ae3      	sublt	r3, r4, r3
 800998e:	bfb4      	ite	lt
 8009990:	18d2      	addlt	r2, r2, r3
 8009992:	1b1c      	subge	r4, r3, r4
 8009994:	9b07      	ldr	r3, [sp, #28]
 8009996:	bfbc      	itt	lt
 8009998:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800999a:	2400      	movlt	r4, #0
 800999c:	2b00      	cmp	r3, #0
 800999e:	bfb5      	itete	lt
 80099a0:	eba8 0603 	sublt.w	r6, r8, r3
 80099a4:	9b07      	ldrge	r3, [sp, #28]
 80099a6:	2300      	movlt	r3, #0
 80099a8:	4646      	movge	r6, r8
 80099aa:	e730      	b.n	800980e <_dtoa_r+0x71e>
 80099ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80099ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80099b0:	4646      	mov	r6, r8
 80099b2:	e735      	b.n	8009820 <_dtoa_r+0x730>
 80099b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80099b6:	e75c      	b.n	8009872 <_dtoa_r+0x782>
 80099b8:	2300      	movs	r3, #0
 80099ba:	e788      	b.n	80098ce <_dtoa_r+0x7de>
 80099bc:	3fe00000 	.word	0x3fe00000
 80099c0:	40240000 	.word	0x40240000
 80099c4:	40140000 	.word	0x40140000
 80099c8:	9b02      	ldr	r3, [sp, #8]
 80099ca:	e780      	b.n	80098ce <_dtoa_r+0x7de>
 80099cc:	2300      	movs	r3, #0
 80099ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80099d0:	e782      	b.n	80098d8 <_dtoa_r+0x7e8>
 80099d2:	d099      	beq.n	8009908 <_dtoa_r+0x818>
 80099d4:	9a08      	ldr	r2, [sp, #32]
 80099d6:	331c      	adds	r3, #28
 80099d8:	441a      	add	r2, r3
 80099da:	4498      	add	r8, r3
 80099dc:	441e      	add	r6, r3
 80099de:	9208      	str	r2, [sp, #32]
 80099e0:	e792      	b.n	8009908 <_dtoa_r+0x818>
 80099e2:	4603      	mov	r3, r0
 80099e4:	e7f6      	b.n	80099d4 <_dtoa_r+0x8e4>
 80099e6:	9b07      	ldr	r3, [sp, #28]
 80099e8:	9704      	str	r7, [sp, #16]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	dc20      	bgt.n	8009a30 <_dtoa_r+0x940>
 80099ee:	9300      	str	r3, [sp, #0]
 80099f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099f2:	2b02      	cmp	r3, #2
 80099f4:	dd1e      	ble.n	8009a34 <_dtoa_r+0x944>
 80099f6:	9b00      	ldr	r3, [sp, #0]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	f47f aec0 	bne.w	800977e <_dtoa_r+0x68e>
 80099fe:	4621      	mov	r1, r4
 8009a00:	2205      	movs	r2, #5
 8009a02:	4658      	mov	r0, fp
 8009a04:	f000 fa9a 	bl	8009f3c <__multadd>
 8009a08:	4601      	mov	r1, r0
 8009a0a:	4604      	mov	r4, r0
 8009a0c:	4648      	mov	r0, r9
 8009a0e:	f000 fcad 	bl	800a36c <__mcmp>
 8009a12:	2800      	cmp	r0, #0
 8009a14:	f77f aeb3 	ble.w	800977e <_dtoa_r+0x68e>
 8009a18:	4656      	mov	r6, sl
 8009a1a:	2331      	movs	r3, #49	@ 0x31
 8009a1c:	f806 3b01 	strb.w	r3, [r6], #1
 8009a20:	9b04      	ldr	r3, [sp, #16]
 8009a22:	3301      	adds	r3, #1
 8009a24:	9304      	str	r3, [sp, #16]
 8009a26:	e6ae      	b.n	8009786 <_dtoa_r+0x696>
 8009a28:	9c07      	ldr	r4, [sp, #28]
 8009a2a:	9704      	str	r7, [sp, #16]
 8009a2c:	4625      	mov	r5, r4
 8009a2e:	e7f3      	b.n	8009a18 <_dtoa_r+0x928>
 8009a30:	9b07      	ldr	r3, [sp, #28]
 8009a32:	9300      	str	r3, [sp, #0]
 8009a34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	f000 8104 	beq.w	8009c44 <_dtoa_r+0xb54>
 8009a3c:	2e00      	cmp	r6, #0
 8009a3e:	dd05      	ble.n	8009a4c <_dtoa_r+0x95c>
 8009a40:	4629      	mov	r1, r5
 8009a42:	4632      	mov	r2, r6
 8009a44:	4658      	mov	r0, fp
 8009a46:	f000 fc25 	bl	800a294 <__lshift>
 8009a4a:	4605      	mov	r5, r0
 8009a4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d05a      	beq.n	8009b08 <_dtoa_r+0xa18>
 8009a52:	6869      	ldr	r1, [r5, #4]
 8009a54:	4658      	mov	r0, fp
 8009a56:	f000 fa0f 	bl	8009e78 <_Balloc>
 8009a5a:	4606      	mov	r6, r0
 8009a5c:	b928      	cbnz	r0, 8009a6a <_dtoa_r+0x97a>
 8009a5e:	4b84      	ldr	r3, [pc, #528]	@ (8009c70 <_dtoa_r+0xb80>)
 8009a60:	4602      	mov	r2, r0
 8009a62:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009a66:	f7ff bb5a 	b.w	800911e <_dtoa_r+0x2e>
 8009a6a:	692a      	ldr	r2, [r5, #16]
 8009a6c:	3202      	adds	r2, #2
 8009a6e:	0092      	lsls	r2, r2, #2
 8009a70:	f105 010c 	add.w	r1, r5, #12
 8009a74:	300c      	adds	r0, #12
 8009a76:	f001 f803 	bl	800aa80 <memcpy>
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	4631      	mov	r1, r6
 8009a7e:	4658      	mov	r0, fp
 8009a80:	f000 fc08 	bl	800a294 <__lshift>
 8009a84:	f10a 0301 	add.w	r3, sl, #1
 8009a88:	9307      	str	r3, [sp, #28]
 8009a8a:	9b00      	ldr	r3, [sp, #0]
 8009a8c:	4453      	add	r3, sl
 8009a8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a90:	9b02      	ldr	r3, [sp, #8]
 8009a92:	f003 0301 	and.w	r3, r3, #1
 8009a96:	462f      	mov	r7, r5
 8009a98:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a9a:	4605      	mov	r5, r0
 8009a9c:	9b07      	ldr	r3, [sp, #28]
 8009a9e:	4621      	mov	r1, r4
 8009aa0:	3b01      	subs	r3, #1
 8009aa2:	4648      	mov	r0, r9
 8009aa4:	9300      	str	r3, [sp, #0]
 8009aa6:	f7ff fa9a 	bl	8008fde <quorem>
 8009aaa:	4639      	mov	r1, r7
 8009aac:	9002      	str	r0, [sp, #8]
 8009aae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009ab2:	4648      	mov	r0, r9
 8009ab4:	f000 fc5a 	bl	800a36c <__mcmp>
 8009ab8:	462a      	mov	r2, r5
 8009aba:	9008      	str	r0, [sp, #32]
 8009abc:	4621      	mov	r1, r4
 8009abe:	4658      	mov	r0, fp
 8009ac0:	f000 fc70 	bl	800a3a4 <__mdiff>
 8009ac4:	68c2      	ldr	r2, [r0, #12]
 8009ac6:	4606      	mov	r6, r0
 8009ac8:	bb02      	cbnz	r2, 8009b0c <_dtoa_r+0xa1c>
 8009aca:	4601      	mov	r1, r0
 8009acc:	4648      	mov	r0, r9
 8009ace:	f000 fc4d 	bl	800a36c <__mcmp>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	4631      	mov	r1, r6
 8009ad6:	4658      	mov	r0, fp
 8009ad8:	920e      	str	r2, [sp, #56]	@ 0x38
 8009ada:	f000 fa0d 	bl	8009ef8 <_Bfree>
 8009ade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ae0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ae2:	9e07      	ldr	r6, [sp, #28]
 8009ae4:	ea43 0102 	orr.w	r1, r3, r2
 8009ae8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009aea:	4319      	orrs	r1, r3
 8009aec:	d110      	bne.n	8009b10 <_dtoa_r+0xa20>
 8009aee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009af2:	d029      	beq.n	8009b48 <_dtoa_r+0xa58>
 8009af4:	9b08      	ldr	r3, [sp, #32]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	dd02      	ble.n	8009b00 <_dtoa_r+0xa10>
 8009afa:	9b02      	ldr	r3, [sp, #8]
 8009afc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009b00:	9b00      	ldr	r3, [sp, #0]
 8009b02:	f883 8000 	strb.w	r8, [r3]
 8009b06:	e63f      	b.n	8009788 <_dtoa_r+0x698>
 8009b08:	4628      	mov	r0, r5
 8009b0a:	e7bb      	b.n	8009a84 <_dtoa_r+0x994>
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	e7e1      	b.n	8009ad4 <_dtoa_r+0x9e4>
 8009b10:	9b08      	ldr	r3, [sp, #32]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	db04      	blt.n	8009b20 <_dtoa_r+0xa30>
 8009b16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009b18:	430b      	orrs	r3, r1
 8009b1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009b1c:	430b      	orrs	r3, r1
 8009b1e:	d120      	bne.n	8009b62 <_dtoa_r+0xa72>
 8009b20:	2a00      	cmp	r2, #0
 8009b22:	dded      	ble.n	8009b00 <_dtoa_r+0xa10>
 8009b24:	4649      	mov	r1, r9
 8009b26:	2201      	movs	r2, #1
 8009b28:	4658      	mov	r0, fp
 8009b2a:	f000 fbb3 	bl	800a294 <__lshift>
 8009b2e:	4621      	mov	r1, r4
 8009b30:	4681      	mov	r9, r0
 8009b32:	f000 fc1b 	bl	800a36c <__mcmp>
 8009b36:	2800      	cmp	r0, #0
 8009b38:	dc03      	bgt.n	8009b42 <_dtoa_r+0xa52>
 8009b3a:	d1e1      	bne.n	8009b00 <_dtoa_r+0xa10>
 8009b3c:	f018 0f01 	tst.w	r8, #1
 8009b40:	d0de      	beq.n	8009b00 <_dtoa_r+0xa10>
 8009b42:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009b46:	d1d8      	bne.n	8009afa <_dtoa_r+0xa0a>
 8009b48:	9a00      	ldr	r2, [sp, #0]
 8009b4a:	2339      	movs	r3, #57	@ 0x39
 8009b4c:	7013      	strb	r3, [r2, #0]
 8009b4e:	4633      	mov	r3, r6
 8009b50:	461e      	mov	r6, r3
 8009b52:	3b01      	subs	r3, #1
 8009b54:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009b58:	2a39      	cmp	r2, #57	@ 0x39
 8009b5a:	d052      	beq.n	8009c02 <_dtoa_r+0xb12>
 8009b5c:	3201      	adds	r2, #1
 8009b5e:	701a      	strb	r2, [r3, #0]
 8009b60:	e612      	b.n	8009788 <_dtoa_r+0x698>
 8009b62:	2a00      	cmp	r2, #0
 8009b64:	dd07      	ble.n	8009b76 <_dtoa_r+0xa86>
 8009b66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009b6a:	d0ed      	beq.n	8009b48 <_dtoa_r+0xa58>
 8009b6c:	9a00      	ldr	r2, [sp, #0]
 8009b6e:	f108 0301 	add.w	r3, r8, #1
 8009b72:	7013      	strb	r3, [r2, #0]
 8009b74:	e608      	b.n	8009788 <_dtoa_r+0x698>
 8009b76:	9b07      	ldr	r3, [sp, #28]
 8009b78:	9a07      	ldr	r2, [sp, #28]
 8009b7a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009b7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d028      	beq.n	8009bd6 <_dtoa_r+0xae6>
 8009b84:	4649      	mov	r1, r9
 8009b86:	2300      	movs	r3, #0
 8009b88:	220a      	movs	r2, #10
 8009b8a:	4658      	mov	r0, fp
 8009b8c:	f000 f9d6 	bl	8009f3c <__multadd>
 8009b90:	42af      	cmp	r7, r5
 8009b92:	4681      	mov	r9, r0
 8009b94:	f04f 0300 	mov.w	r3, #0
 8009b98:	f04f 020a 	mov.w	r2, #10
 8009b9c:	4639      	mov	r1, r7
 8009b9e:	4658      	mov	r0, fp
 8009ba0:	d107      	bne.n	8009bb2 <_dtoa_r+0xac2>
 8009ba2:	f000 f9cb 	bl	8009f3c <__multadd>
 8009ba6:	4607      	mov	r7, r0
 8009ba8:	4605      	mov	r5, r0
 8009baa:	9b07      	ldr	r3, [sp, #28]
 8009bac:	3301      	adds	r3, #1
 8009bae:	9307      	str	r3, [sp, #28]
 8009bb0:	e774      	b.n	8009a9c <_dtoa_r+0x9ac>
 8009bb2:	f000 f9c3 	bl	8009f3c <__multadd>
 8009bb6:	4629      	mov	r1, r5
 8009bb8:	4607      	mov	r7, r0
 8009bba:	2300      	movs	r3, #0
 8009bbc:	220a      	movs	r2, #10
 8009bbe:	4658      	mov	r0, fp
 8009bc0:	f000 f9bc 	bl	8009f3c <__multadd>
 8009bc4:	4605      	mov	r5, r0
 8009bc6:	e7f0      	b.n	8009baa <_dtoa_r+0xaba>
 8009bc8:	9b00      	ldr	r3, [sp, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	bfcc      	ite	gt
 8009bce:	461e      	movgt	r6, r3
 8009bd0:	2601      	movle	r6, #1
 8009bd2:	4456      	add	r6, sl
 8009bd4:	2700      	movs	r7, #0
 8009bd6:	4649      	mov	r1, r9
 8009bd8:	2201      	movs	r2, #1
 8009bda:	4658      	mov	r0, fp
 8009bdc:	f000 fb5a 	bl	800a294 <__lshift>
 8009be0:	4621      	mov	r1, r4
 8009be2:	4681      	mov	r9, r0
 8009be4:	f000 fbc2 	bl	800a36c <__mcmp>
 8009be8:	2800      	cmp	r0, #0
 8009bea:	dcb0      	bgt.n	8009b4e <_dtoa_r+0xa5e>
 8009bec:	d102      	bne.n	8009bf4 <_dtoa_r+0xb04>
 8009bee:	f018 0f01 	tst.w	r8, #1
 8009bf2:	d1ac      	bne.n	8009b4e <_dtoa_r+0xa5e>
 8009bf4:	4633      	mov	r3, r6
 8009bf6:	461e      	mov	r6, r3
 8009bf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bfc:	2a30      	cmp	r2, #48	@ 0x30
 8009bfe:	d0fa      	beq.n	8009bf6 <_dtoa_r+0xb06>
 8009c00:	e5c2      	b.n	8009788 <_dtoa_r+0x698>
 8009c02:	459a      	cmp	sl, r3
 8009c04:	d1a4      	bne.n	8009b50 <_dtoa_r+0xa60>
 8009c06:	9b04      	ldr	r3, [sp, #16]
 8009c08:	3301      	adds	r3, #1
 8009c0a:	9304      	str	r3, [sp, #16]
 8009c0c:	2331      	movs	r3, #49	@ 0x31
 8009c0e:	f88a 3000 	strb.w	r3, [sl]
 8009c12:	e5b9      	b.n	8009788 <_dtoa_r+0x698>
 8009c14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009c16:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009c74 <_dtoa_r+0xb84>
 8009c1a:	b11b      	cbz	r3, 8009c24 <_dtoa_r+0xb34>
 8009c1c:	f10a 0308 	add.w	r3, sl, #8
 8009c20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009c22:	6013      	str	r3, [r2, #0]
 8009c24:	4650      	mov	r0, sl
 8009c26:	b019      	add	sp, #100	@ 0x64
 8009c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	f77f ae37 	ble.w	80098a2 <_dtoa_r+0x7b2>
 8009c34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c36:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c38:	2001      	movs	r0, #1
 8009c3a:	e655      	b.n	80098e8 <_dtoa_r+0x7f8>
 8009c3c:	9b00      	ldr	r3, [sp, #0]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	f77f aed6 	ble.w	80099f0 <_dtoa_r+0x900>
 8009c44:	4656      	mov	r6, sl
 8009c46:	4621      	mov	r1, r4
 8009c48:	4648      	mov	r0, r9
 8009c4a:	f7ff f9c8 	bl	8008fde <quorem>
 8009c4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009c52:	f806 8b01 	strb.w	r8, [r6], #1
 8009c56:	9b00      	ldr	r3, [sp, #0]
 8009c58:	eba6 020a 	sub.w	r2, r6, sl
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	ddb3      	ble.n	8009bc8 <_dtoa_r+0xad8>
 8009c60:	4649      	mov	r1, r9
 8009c62:	2300      	movs	r3, #0
 8009c64:	220a      	movs	r2, #10
 8009c66:	4658      	mov	r0, fp
 8009c68:	f000 f968 	bl	8009f3c <__multadd>
 8009c6c:	4681      	mov	r9, r0
 8009c6e:	e7ea      	b.n	8009c46 <_dtoa_r+0xb56>
 8009c70:	0800aeec 	.word	0x0800aeec
 8009c74:	0800ae70 	.word	0x0800ae70

08009c78 <_free_r>:
 8009c78:	b538      	push	{r3, r4, r5, lr}
 8009c7a:	4605      	mov	r5, r0
 8009c7c:	2900      	cmp	r1, #0
 8009c7e:	d041      	beq.n	8009d04 <_free_r+0x8c>
 8009c80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c84:	1f0c      	subs	r4, r1, #4
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	bfb8      	it	lt
 8009c8a:	18e4      	addlt	r4, r4, r3
 8009c8c:	f000 f8e8 	bl	8009e60 <__malloc_lock>
 8009c90:	4a1d      	ldr	r2, [pc, #116]	@ (8009d08 <_free_r+0x90>)
 8009c92:	6813      	ldr	r3, [r2, #0]
 8009c94:	b933      	cbnz	r3, 8009ca4 <_free_r+0x2c>
 8009c96:	6063      	str	r3, [r4, #4]
 8009c98:	6014      	str	r4, [r2, #0]
 8009c9a:	4628      	mov	r0, r5
 8009c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ca0:	f000 b8e4 	b.w	8009e6c <__malloc_unlock>
 8009ca4:	42a3      	cmp	r3, r4
 8009ca6:	d908      	bls.n	8009cba <_free_r+0x42>
 8009ca8:	6820      	ldr	r0, [r4, #0]
 8009caa:	1821      	adds	r1, r4, r0
 8009cac:	428b      	cmp	r3, r1
 8009cae:	bf01      	itttt	eq
 8009cb0:	6819      	ldreq	r1, [r3, #0]
 8009cb2:	685b      	ldreq	r3, [r3, #4]
 8009cb4:	1809      	addeq	r1, r1, r0
 8009cb6:	6021      	streq	r1, [r4, #0]
 8009cb8:	e7ed      	b.n	8009c96 <_free_r+0x1e>
 8009cba:	461a      	mov	r2, r3
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	b10b      	cbz	r3, 8009cc4 <_free_r+0x4c>
 8009cc0:	42a3      	cmp	r3, r4
 8009cc2:	d9fa      	bls.n	8009cba <_free_r+0x42>
 8009cc4:	6811      	ldr	r1, [r2, #0]
 8009cc6:	1850      	adds	r0, r2, r1
 8009cc8:	42a0      	cmp	r0, r4
 8009cca:	d10b      	bne.n	8009ce4 <_free_r+0x6c>
 8009ccc:	6820      	ldr	r0, [r4, #0]
 8009cce:	4401      	add	r1, r0
 8009cd0:	1850      	adds	r0, r2, r1
 8009cd2:	4283      	cmp	r3, r0
 8009cd4:	6011      	str	r1, [r2, #0]
 8009cd6:	d1e0      	bne.n	8009c9a <_free_r+0x22>
 8009cd8:	6818      	ldr	r0, [r3, #0]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	6053      	str	r3, [r2, #4]
 8009cde:	4408      	add	r0, r1
 8009ce0:	6010      	str	r0, [r2, #0]
 8009ce2:	e7da      	b.n	8009c9a <_free_r+0x22>
 8009ce4:	d902      	bls.n	8009cec <_free_r+0x74>
 8009ce6:	230c      	movs	r3, #12
 8009ce8:	602b      	str	r3, [r5, #0]
 8009cea:	e7d6      	b.n	8009c9a <_free_r+0x22>
 8009cec:	6820      	ldr	r0, [r4, #0]
 8009cee:	1821      	adds	r1, r4, r0
 8009cf0:	428b      	cmp	r3, r1
 8009cf2:	bf04      	itt	eq
 8009cf4:	6819      	ldreq	r1, [r3, #0]
 8009cf6:	685b      	ldreq	r3, [r3, #4]
 8009cf8:	6063      	str	r3, [r4, #4]
 8009cfa:	bf04      	itt	eq
 8009cfc:	1809      	addeq	r1, r1, r0
 8009cfe:	6021      	streq	r1, [r4, #0]
 8009d00:	6054      	str	r4, [r2, #4]
 8009d02:	e7ca      	b.n	8009c9a <_free_r+0x22>
 8009d04:	bd38      	pop	{r3, r4, r5, pc}
 8009d06:	bf00      	nop
 8009d08:	20000534 	.word	0x20000534

08009d0c <malloc>:
 8009d0c:	4b02      	ldr	r3, [pc, #8]	@ (8009d18 <malloc+0xc>)
 8009d0e:	4601      	mov	r1, r0
 8009d10:	6818      	ldr	r0, [r3, #0]
 8009d12:	f000 b825 	b.w	8009d60 <_malloc_r>
 8009d16:	bf00      	nop
 8009d18:	20000018 	.word	0x20000018

08009d1c <sbrk_aligned>:
 8009d1c:	b570      	push	{r4, r5, r6, lr}
 8009d1e:	4e0f      	ldr	r6, [pc, #60]	@ (8009d5c <sbrk_aligned+0x40>)
 8009d20:	460c      	mov	r4, r1
 8009d22:	6831      	ldr	r1, [r6, #0]
 8009d24:	4605      	mov	r5, r0
 8009d26:	b911      	cbnz	r1, 8009d2e <sbrk_aligned+0x12>
 8009d28:	f000 fe9a 	bl	800aa60 <_sbrk_r>
 8009d2c:	6030      	str	r0, [r6, #0]
 8009d2e:	4621      	mov	r1, r4
 8009d30:	4628      	mov	r0, r5
 8009d32:	f000 fe95 	bl	800aa60 <_sbrk_r>
 8009d36:	1c43      	adds	r3, r0, #1
 8009d38:	d103      	bne.n	8009d42 <sbrk_aligned+0x26>
 8009d3a:	f04f 34ff 	mov.w	r4, #4294967295
 8009d3e:	4620      	mov	r0, r4
 8009d40:	bd70      	pop	{r4, r5, r6, pc}
 8009d42:	1cc4      	adds	r4, r0, #3
 8009d44:	f024 0403 	bic.w	r4, r4, #3
 8009d48:	42a0      	cmp	r0, r4
 8009d4a:	d0f8      	beq.n	8009d3e <sbrk_aligned+0x22>
 8009d4c:	1a21      	subs	r1, r4, r0
 8009d4e:	4628      	mov	r0, r5
 8009d50:	f000 fe86 	bl	800aa60 <_sbrk_r>
 8009d54:	3001      	adds	r0, #1
 8009d56:	d1f2      	bne.n	8009d3e <sbrk_aligned+0x22>
 8009d58:	e7ef      	b.n	8009d3a <sbrk_aligned+0x1e>
 8009d5a:	bf00      	nop
 8009d5c:	20000530 	.word	0x20000530

08009d60 <_malloc_r>:
 8009d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d64:	1ccd      	adds	r5, r1, #3
 8009d66:	f025 0503 	bic.w	r5, r5, #3
 8009d6a:	3508      	adds	r5, #8
 8009d6c:	2d0c      	cmp	r5, #12
 8009d6e:	bf38      	it	cc
 8009d70:	250c      	movcc	r5, #12
 8009d72:	2d00      	cmp	r5, #0
 8009d74:	4606      	mov	r6, r0
 8009d76:	db01      	blt.n	8009d7c <_malloc_r+0x1c>
 8009d78:	42a9      	cmp	r1, r5
 8009d7a:	d904      	bls.n	8009d86 <_malloc_r+0x26>
 8009d7c:	230c      	movs	r3, #12
 8009d7e:	6033      	str	r3, [r6, #0]
 8009d80:	2000      	movs	r0, #0
 8009d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009e5c <_malloc_r+0xfc>
 8009d8a:	f000 f869 	bl	8009e60 <__malloc_lock>
 8009d8e:	f8d8 3000 	ldr.w	r3, [r8]
 8009d92:	461c      	mov	r4, r3
 8009d94:	bb44      	cbnz	r4, 8009de8 <_malloc_r+0x88>
 8009d96:	4629      	mov	r1, r5
 8009d98:	4630      	mov	r0, r6
 8009d9a:	f7ff ffbf 	bl	8009d1c <sbrk_aligned>
 8009d9e:	1c43      	adds	r3, r0, #1
 8009da0:	4604      	mov	r4, r0
 8009da2:	d158      	bne.n	8009e56 <_malloc_r+0xf6>
 8009da4:	f8d8 4000 	ldr.w	r4, [r8]
 8009da8:	4627      	mov	r7, r4
 8009daa:	2f00      	cmp	r7, #0
 8009dac:	d143      	bne.n	8009e36 <_malloc_r+0xd6>
 8009dae:	2c00      	cmp	r4, #0
 8009db0:	d04b      	beq.n	8009e4a <_malloc_r+0xea>
 8009db2:	6823      	ldr	r3, [r4, #0]
 8009db4:	4639      	mov	r1, r7
 8009db6:	4630      	mov	r0, r6
 8009db8:	eb04 0903 	add.w	r9, r4, r3
 8009dbc:	f000 fe50 	bl	800aa60 <_sbrk_r>
 8009dc0:	4581      	cmp	r9, r0
 8009dc2:	d142      	bne.n	8009e4a <_malloc_r+0xea>
 8009dc4:	6821      	ldr	r1, [r4, #0]
 8009dc6:	1a6d      	subs	r5, r5, r1
 8009dc8:	4629      	mov	r1, r5
 8009dca:	4630      	mov	r0, r6
 8009dcc:	f7ff ffa6 	bl	8009d1c <sbrk_aligned>
 8009dd0:	3001      	adds	r0, #1
 8009dd2:	d03a      	beq.n	8009e4a <_malloc_r+0xea>
 8009dd4:	6823      	ldr	r3, [r4, #0]
 8009dd6:	442b      	add	r3, r5
 8009dd8:	6023      	str	r3, [r4, #0]
 8009dda:	f8d8 3000 	ldr.w	r3, [r8]
 8009dde:	685a      	ldr	r2, [r3, #4]
 8009de0:	bb62      	cbnz	r2, 8009e3c <_malloc_r+0xdc>
 8009de2:	f8c8 7000 	str.w	r7, [r8]
 8009de6:	e00f      	b.n	8009e08 <_malloc_r+0xa8>
 8009de8:	6822      	ldr	r2, [r4, #0]
 8009dea:	1b52      	subs	r2, r2, r5
 8009dec:	d420      	bmi.n	8009e30 <_malloc_r+0xd0>
 8009dee:	2a0b      	cmp	r2, #11
 8009df0:	d917      	bls.n	8009e22 <_malloc_r+0xc2>
 8009df2:	1961      	adds	r1, r4, r5
 8009df4:	42a3      	cmp	r3, r4
 8009df6:	6025      	str	r5, [r4, #0]
 8009df8:	bf18      	it	ne
 8009dfa:	6059      	strne	r1, [r3, #4]
 8009dfc:	6863      	ldr	r3, [r4, #4]
 8009dfe:	bf08      	it	eq
 8009e00:	f8c8 1000 	streq.w	r1, [r8]
 8009e04:	5162      	str	r2, [r4, r5]
 8009e06:	604b      	str	r3, [r1, #4]
 8009e08:	4630      	mov	r0, r6
 8009e0a:	f000 f82f 	bl	8009e6c <__malloc_unlock>
 8009e0e:	f104 000b 	add.w	r0, r4, #11
 8009e12:	1d23      	adds	r3, r4, #4
 8009e14:	f020 0007 	bic.w	r0, r0, #7
 8009e18:	1ac2      	subs	r2, r0, r3
 8009e1a:	bf1c      	itt	ne
 8009e1c:	1a1b      	subne	r3, r3, r0
 8009e1e:	50a3      	strne	r3, [r4, r2]
 8009e20:	e7af      	b.n	8009d82 <_malloc_r+0x22>
 8009e22:	6862      	ldr	r2, [r4, #4]
 8009e24:	42a3      	cmp	r3, r4
 8009e26:	bf0c      	ite	eq
 8009e28:	f8c8 2000 	streq.w	r2, [r8]
 8009e2c:	605a      	strne	r2, [r3, #4]
 8009e2e:	e7eb      	b.n	8009e08 <_malloc_r+0xa8>
 8009e30:	4623      	mov	r3, r4
 8009e32:	6864      	ldr	r4, [r4, #4]
 8009e34:	e7ae      	b.n	8009d94 <_malloc_r+0x34>
 8009e36:	463c      	mov	r4, r7
 8009e38:	687f      	ldr	r7, [r7, #4]
 8009e3a:	e7b6      	b.n	8009daa <_malloc_r+0x4a>
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	42a3      	cmp	r3, r4
 8009e42:	d1fb      	bne.n	8009e3c <_malloc_r+0xdc>
 8009e44:	2300      	movs	r3, #0
 8009e46:	6053      	str	r3, [r2, #4]
 8009e48:	e7de      	b.n	8009e08 <_malloc_r+0xa8>
 8009e4a:	230c      	movs	r3, #12
 8009e4c:	6033      	str	r3, [r6, #0]
 8009e4e:	4630      	mov	r0, r6
 8009e50:	f000 f80c 	bl	8009e6c <__malloc_unlock>
 8009e54:	e794      	b.n	8009d80 <_malloc_r+0x20>
 8009e56:	6005      	str	r5, [r0, #0]
 8009e58:	e7d6      	b.n	8009e08 <_malloc_r+0xa8>
 8009e5a:	bf00      	nop
 8009e5c:	20000534 	.word	0x20000534

08009e60 <__malloc_lock>:
 8009e60:	4801      	ldr	r0, [pc, #4]	@ (8009e68 <__malloc_lock+0x8>)
 8009e62:	f7ff b8ba 	b.w	8008fda <__retarget_lock_acquire_recursive>
 8009e66:	bf00      	nop
 8009e68:	2000052c 	.word	0x2000052c

08009e6c <__malloc_unlock>:
 8009e6c:	4801      	ldr	r0, [pc, #4]	@ (8009e74 <__malloc_unlock+0x8>)
 8009e6e:	f7ff b8b5 	b.w	8008fdc <__retarget_lock_release_recursive>
 8009e72:	bf00      	nop
 8009e74:	2000052c 	.word	0x2000052c

08009e78 <_Balloc>:
 8009e78:	b570      	push	{r4, r5, r6, lr}
 8009e7a:	69c6      	ldr	r6, [r0, #28]
 8009e7c:	4604      	mov	r4, r0
 8009e7e:	460d      	mov	r5, r1
 8009e80:	b976      	cbnz	r6, 8009ea0 <_Balloc+0x28>
 8009e82:	2010      	movs	r0, #16
 8009e84:	f7ff ff42 	bl	8009d0c <malloc>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	61e0      	str	r0, [r4, #28]
 8009e8c:	b920      	cbnz	r0, 8009e98 <_Balloc+0x20>
 8009e8e:	4b18      	ldr	r3, [pc, #96]	@ (8009ef0 <_Balloc+0x78>)
 8009e90:	4818      	ldr	r0, [pc, #96]	@ (8009ef4 <_Balloc+0x7c>)
 8009e92:	216b      	movs	r1, #107	@ 0x6b
 8009e94:	f000 fe02 	bl	800aa9c <__assert_func>
 8009e98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e9c:	6006      	str	r6, [r0, #0]
 8009e9e:	60c6      	str	r6, [r0, #12]
 8009ea0:	69e6      	ldr	r6, [r4, #28]
 8009ea2:	68f3      	ldr	r3, [r6, #12]
 8009ea4:	b183      	cbz	r3, 8009ec8 <_Balloc+0x50>
 8009ea6:	69e3      	ldr	r3, [r4, #28]
 8009ea8:	68db      	ldr	r3, [r3, #12]
 8009eaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009eae:	b9b8      	cbnz	r0, 8009ee0 <_Balloc+0x68>
 8009eb0:	2101      	movs	r1, #1
 8009eb2:	fa01 f605 	lsl.w	r6, r1, r5
 8009eb6:	1d72      	adds	r2, r6, #5
 8009eb8:	0092      	lsls	r2, r2, #2
 8009eba:	4620      	mov	r0, r4
 8009ebc:	f000 fe0c 	bl	800aad8 <_calloc_r>
 8009ec0:	b160      	cbz	r0, 8009edc <_Balloc+0x64>
 8009ec2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ec6:	e00e      	b.n	8009ee6 <_Balloc+0x6e>
 8009ec8:	2221      	movs	r2, #33	@ 0x21
 8009eca:	2104      	movs	r1, #4
 8009ecc:	4620      	mov	r0, r4
 8009ece:	f000 fe03 	bl	800aad8 <_calloc_r>
 8009ed2:	69e3      	ldr	r3, [r4, #28]
 8009ed4:	60f0      	str	r0, [r6, #12]
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d1e4      	bne.n	8009ea6 <_Balloc+0x2e>
 8009edc:	2000      	movs	r0, #0
 8009ede:	bd70      	pop	{r4, r5, r6, pc}
 8009ee0:	6802      	ldr	r2, [r0, #0]
 8009ee2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009eec:	e7f7      	b.n	8009ede <_Balloc+0x66>
 8009eee:	bf00      	nop
 8009ef0:	0800ae7d 	.word	0x0800ae7d
 8009ef4:	0800aefd 	.word	0x0800aefd

08009ef8 <_Bfree>:
 8009ef8:	b570      	push	{r4, r5, r6, lr}
 8009efa:	69c6      	ldr	r6, [r0, #28]
 8009efc:	4605      	mov	r5, r0
 8009efe:	460c      	mov	r4, r1
 8009f00:	b976      	cbnz	r6, 8009f20 <_Bfree+0x28>
 8009f02:	2010      	movs	r0, #16
 8009f04:	f7ff ff02 	bl	8009d0c <malloc>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	61e8      	str	r0, [r5, #28]
 8009f0c:	b920      	cbnz	r0, 8009f18 <_Bfree+0x20>
 8009f0e:	4b09      	ldr	r3, [pc, #36]	@ (8009f34 <_Bfree+0x3c>)
 8009f10:	4809      	ldr	r0, [pc, #36]	@ (8009f38 <_Bfree+0x40>)
 8009f12:	218f      	movs	r1, #143	@ 0x8f
 8009f14:	f000 fdc2 	bl	800aa9c <__assert_func>
 8009f18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f1c:	6006      	str	r6, [r0, #0]
 8009f1e:	60c6      	str	r6, [r0, #12]
 8009f20:	b13c      	cbz	r4, 8009f32 <_Bfree+0x3a>
 8009f22:	69eb      	ldr	r3, [r5, #28]
 8009f24:	6862      	ldr	r2, [r4, #4]
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f2c:	6021      	str	r1, [r4, #0]
 8009f2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f32:	bd70      	pop	{r4, r5, r6, pc}
 8009f34:	0800ae7d 	.word	0x0800ae7d
 8009f38:	0800aefd 	.word	0x0800aefd

08009f3c <__multadd>:
 8009f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f40:	690d      	ldr	r5, [r1, #16]
 8009f42:	4607      	mov	r7, r0
 8009f44:	460c      	mov	r4, r1
 8009f46:	461e      	mov	r6, r3
 8009f48:	f101 0c14 	add.w	ip, r1, #20
 8009f4c:	2000      	movs	r0, #0
 8009f4e:	f8dc 3000 	ldr.w	r3, [ip]
 8009f52:	b299      	uxth	r1, r3
 8009f54:	fb02 6101 	mla	r1, r2, r1, r6
 8009f58:	0c1e      	lsrs	r6, r3, #16
 8009f5a:	0c0b      	lsrs	r3, r1, #16
 8009f5c:	fb02 3306 	mla	r3, r2, r6, r3
 8009f60:	b289      	uxth	r1, r1
 8009f62:	3001      	adds	r0, #1
 8009f64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f68:	4285      	cmp	r5, r0
 8009f6a:	f84c 1b04 	str.w	r1, [ip], #4
 8009f6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f72:	dcec      	bgt.n	8009f4e <__multadd+0x12>
 8009f74:	b30e      	cbz	r6, 8009fba <__multadd+0x7e>
 8009f76:	68a3      	ldr	r3, [r4, #8]
 8009f78:	42ab      	cmp	r3, r5
 8009f7a:	dc19      	bgt.n	8009fb0 <__multadd+0x74>
 8009f7c:	6861      	ldr	r1, [r4, #4]
 8009f7e:	4638      	mov	r0, r7
 8009f80:	3101      	adds	r1, #1
 8009f82:	f7ff ff79 	bl	8009e78 <_Balloc>
 8009f86:	4680      	mov	r8, r0
 8009f88:	b928      	cbnz	r0, 8009f96 <__multadd+0x5a>
 8009f8a:	4602      	mov	r2, r0
 8009f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8009fc0 <__multadd+0x84>)
 8009f8e:	480d      	ldr	r0, [pc, #52]	@ (8009fc4 <__multadd+0x88>)
 8009f90:	21ba      	movs	r1, #186	@ 0xba
 8009f92:	f000 fd83 	bl	800aa9c <__assert_func>
 8009f96:	6922      	ldr	r2, [r4, #16]
 8009f98:	3202      	adds	r2, #2
 8009f9a:	f104 010c 	add.w	r1, r4, #12
 8009f9e:	0092      	lsls	r2, r2, #2
 8009fa0:	300c      	adds	r0, #12
 8009fa2:	f000 fd6d 	bl	800aa80 <memcpy>
 8009fa6:	4621      	mov	r1, r4
 8009fa8:	4638      	mov	r0, r7
 8009faa:	f7ff ffa5 	bl	8009ef8 <_Bfree>
 8009fae:	4644      	mov	r4, r8
 8009fb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009fb4:	3501      	adds	r5, #1
 8009fb6:	615e      	str	r6, [r3, #20]
 8009fb8:	6125      	str	r5, [r4, #16]
 8009fba:	4620      	mov	r0, r4
 8009fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fc0:	0800aeec 	.word	0x0800aeec
 8009fc4:	0800aefd 	.word	0x0800aefd

08009fc8 <__hi0bits>:
 8009fc8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009fcc:	4603      	mov	r3, r0
 8009fce:	bf36      	itet	cc
 8009fd0:	0403      	lslcc	r3, r0, #16
 8009fd2:	2000      	movcs	r0, #0
 8009fd4:	2010      	movcc	r0, #16
 8009fd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009fda:	bf3c      	itt	cc
 8009fdc:	021b      	lslcc	r3, r3, #8
 8009fde:	3008      	addcc	r0, #8
 8009fe0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009fe4:	bf3c      	itt	cc
 8009fe6:	011b      	lslcc	r3, r3, #4
 8009fe8:	3004      	addcc	r0, #4
 8009fea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fee:	bf3c      	itt	cc
 8009ff0:	009b      	lslcc	r3, r3, #2
 8009ff2:	3002      	addcc	r0, #2
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	db05      	blt.n	800a004 <__hi0bits+0x3c>
 8009ff8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009ffc:	f100 0001 	add.w	r0, r0, #1
 800a000:	bf08      	it	eq
 800a002:	2020      	moveq	r0, #32
 800a004:	4770      	bx	lr

0800a006 <__lo0bits>:
 800a006:	6803      	ldr	r3, [r0, #0]
 800a008:	4602      	mov	r2, r0
 800a00a:	f013 0007 	ands.w	r0, r3, #7
 800a00e:	d00b      	beq.n	800a028 <__lo0bits+0x22>
 800a010:	07d9      	lsls	r1, r3, #31
 800a012:	d421      	bmi.n	800a058 <__lo0bits+0x52>
 800a014:	0798      	lsls	r0, r3, #30
 800a016:	bf49      	itett	mi
 800a018:	085b      	lsrmi	r3, r3, #1
 800a01a:	089b      	lsrpl	r3, r3, #2
 800a01c:	2001      	movmi	r0, #1
 800a01e:	6013      	strmi	r3, [r2, #0]
 800a020:	bf5c      	itt	pl
 800a022:	6013      	strpl	r3, [r2, #0]
 800a024:	2002      	movpl	r0, #2
 800a026:	4770      	bx	lr
 800a028:	b299      	uxth	r1, r3
 800a02a:	b909      	cbnz	r1, 800a030 <__lo0bits+0x2a>
 800a02c:	0c1b      	lsrs	r3, r3, #16
 800a02e:	2010      	movs	r0, #16
 800a030:	b2d9      	uxtb	r1, r3
 800a032:	b909      	cbnz	r1, 800a038 <__lo0bits+0x32>
 800a034:	3008      	adds	r0, #8
 800a036:	0a1b      	lsrs	r3, r3, #8
 800a038:	0719      	lsls	r1, r3, #28
 800a03a:	bf04      	itt	eq
 800a03c:	091b      	lsreq	r3, r3, #4
 800a03e:	3004      	addeq	r0, #4
 800a040:	0799      	lsls	r1, r3, #30
 800a042:	bf04      	itt	eq
 800a044:	089b      	lsreq	r3, r3, #2
 800a046:	3002      	addeq	r0, #2
 800a048:	07d9      	lsls	r1, r3, #31
 800a04a:	d403      	bmi.n	800a054 <__lo0bits+0x4e>
 800a04c:	085b      	lsrs	r3, r3, #1
 800a04e:	f100 0001 	add.w	r0, r0, #1
 800a052:	d003      	beq.n	800a05c <__lo0bits+0x56>
 800a054:	6013      	str	r3, [r2, #0]
 800a056:	4770      	bx	lr
 800a058:	2000      	movs	r0, #0
 800a05a:	4770      	bx	lr
 800a05c:	2020      	movs	r0, #32
 800a05e:	4770      	bx	lr

0800a060 <__i2b>:
 800a060:	b510      	push	{r4, lr}
 800a062:	460c      	mov	r4, r1
 800a064:	2101      	movs	r1, #1
 800a066:	f7ff ff07 	bl	8009e78 <_Balloc>
 800a06a:	4602      	mov	r2, r0
 800a06c:	b928      	cbnz	r0, 800a07a <__i2b+0x1a>
 800a06e:	4b05      	ldr	r3, [pc, #20]	@ (800a084 <__i2b+0x24>)
 800a070:	4805      	ldr	r0, [pc, #20]	@ (800a088 <__i2b+0x28>)
 800a072:	f240 1145 	movw	r1, #325	@ 0x145
 800a076:	f000 fd11 	bl	800aa9c <__assert_func>
 800a07a:	2301      	movs	r3, #1
 800a07c:	6144      	str	r4, [r0, #20]
 800a07e:	6103      	str	r3, [r0, #16]
 800a080:	bd10      	pop	{r4, pc}
 800a082:	bf00      	nop
 800a084:	0800aeec 	.word	0x0800aeec
 800a088:	0800aefd 	.word	0x0800aefd

0800a08c <__multiply>:
 800a08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a090:	4614      	mov	r4, r2
 800a092:	690a      	ldr	r2, [r1, #16]
 800a094:	6923      	ldr	r3, [r4, #16]
 800a096:	429a      	cmp	r2, r3
 800a098:	bfa8      	it	ge
 800a09a:	4623      	movge	r3, r4
 800a09c:	460f      	mov	r7, r1
 800a09e:	bfa4      	itt	ge
 800a0a0:	460c      	movge	r4, r1
 800a0a2:	461f      	movge	r7, r3
 800a0a4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a0a8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a0ac:	68a3      	ldr	r3, [r4, #8]
 800a0ae:	6861      	ldr	r1, [r4, #4]
 800a0b0:	eb0a 0609 	add.w	r6, sl, r9
 800a0b4:	42b3      	cmp	r3, r6
 800a0b6:	b085      	sub	sp, #20
 800a0b8:	bfb8      	it	lt
 800a0ba:	3101      	addlt	r1, #1
 800a0bc:	f7ff fedc 	bl	8009e78 <_Balloc>
 800a0c0:	b930      	cbnz	r0, 800a0d0 <__multiply+0x44>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	4b44      	ldr	r3, [pc, #272]	@ (800a1d8 <__multiply+0x14c>)
 800a0c6:	4845      	ldr	r0, [pc, #276]	@ (800a1dc <__multiply+0x150>)
 800a0c8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a0cc:	f000 fce6 	bl	800aa9c <__assert_func>
 800a0d0:	f100 0514 	add.w	r5, r0, #20
 800a0d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a0d8:	462b      	mov	r3, r5
 800a0da:	2200      	movs	r2, #0
 800a0dc:	4543      	cmp	r3, r8
 800a0de:	d321      	bcc.n	800a124 <__multiply+0x98>
 800a0e0:	f107 0114 	add.w	r1, r7, #20
 800a0e4:	f104 0214 	add.w	r2, r4, #20
 800a0e8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a0ec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a0f0:	9302      	str	r3, [sp, #8]
 800a0f2:	1b13      	subs	r3, r2, r4
 800a0f4:	3b15      	subs	r3, #21
 800a0f6:	f023 0303 	bic.w	r3, r3, #3
 800a0fa:	3304      	adds	r3, #4
 800a0fc:	f104 0715 	add.w	r7, r4, #21
 800a100:	42ba      	cmp	r2, r7
 800a102:	bf38      	it	cc
 800a104:	2304      	movcc	r3, #4
 800a106:	9301      	str	r3, [sp, #4]
 800a108:	9b02      	ldr	r3, [sp, #8]
 800a10a:	9103      	str	r1, [sp, #12]
 800a10c:	428b      	cmp	r3, r1
 800a10e:	d80c      	bhi.n	800a12a <__multiply+0x9e>
 800a110:	2e00      	cmp	r6, #0
 800a112:	dd03      	ble.n	800a11c <__multiply+0x90>
 800a114:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d05b      	beq.n	800a1d4 <__multiply+0x148>
 800a11c:	6106      	str	r6, [r0, #16]
 800a11e:	b005      	add	sp, #20
 800a120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a124:	f843 2b04 	str.w	r2, [r3], #4
 800a128:	e7d8      	b.n	800a0dc <__multiply+0x50>
 800a12a:	f8b1 a000 	ldrh.w	sl, [r1]
 800a12e:	f1ba 0f00 	cmp.w	sl, #0
 800a132:	d024      	beq.n	800a17e <__multiply+0xf2>
 800a134:	f104 0e14 	add.w	lr, r4, #20
 800a138:	46a9      	mov	r9, r5
 800a13a:	f04f 0c00 	mov.w	ip, #0
 800a13e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a142:	f8d9 3000 	ldr.w	r3, [r9]
 800a146:	fa1f fb87 	uxth.w	fp, r7
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	fb0a 330b 	mla	r3, sl, fp, r3
 800a150:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a154:	f8d9 7000 	ldr.w	r7, [r9]
 800a158:	4463      	add	r3, ip
 800a15a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a15e:	fb0a c70b 	mla	r7, sl, fp, ip
 800a162:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a166:	b29b      	uxth	r3, r3
 800a168:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a16c:	4572      	cmp	r2, lr
 800a16e:	f849 3b04 	str.w	r3, [r9], #4
 800a172:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a176:	d8e2      	bhi.n	800a13e <__multiply+0xb2>
 800a178:	9b01      	ldr	r3, [sp, #4]
 800a17a:	f845 c003 	str.w	ip, [r5, r3]
 800a17e:	9b03      	ldr	r3, [sp, #12]
 800a180:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a184:	3104      	adds	r1, #4
 800a186:	f1b9 0f00 	cmp.w	r9, #0
 800a18a:	d021      	beq.n	800a1d0 <__multiply+0x144>
 800a18c:	682b      	ldr	r3, [r5, #0]
 800a18e:	f104 0c14 	add.w	ip, r4, #20
 800a192:	46ae      	mov	lr, r5
 800a194:	f04f 0a00 	mov.w	sl, #0
 800a198:	f8bc b000 	ldrh.w	fp, [ip]
 800a19c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a1a0:	fb09 770b 	mla	r7, r9, fp, r7
 800a1a4:	4457      	add	r7, sl
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a1ac:	f84e 3b04 	str.w	r3, [lr], #4
 800a1b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a1b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a1b8:	f8be 3000 	ldrh.w	r3, [lr]
 800a1bc:	fb09 330a 	mla	r3, r9, sl, r3
 800a1c0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a1c4:	4562      	cmp	r2, ip
 800a1c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a1ca:	d8e5      	bhi.n	800a198 <__multiply+0x10c>
 800a1cc:	9f01      	ldr	r7, [sp, #4]
 800a1ce:	51eb      	str	r3, [r5, r7]
 800a1d0:	3504      	adds	r5, #4
 800a1d2:	e799      	b.n	800a108 <__multiply+0x7c>
 800a1d4:	3e01      	subs	r6, #1
 800a1d6:	e79b      	b.n	800a110 <__multiply+0x84>
 800a1d8:	0800aeec 	.word	0x0800aeec
 800a1dc:	0800aefd 	.word	0x0800aefd

0800a1e0 <__pow5mult>:
 800a1e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1e4:	4615      	mov	r5, r2
 800a1e6:	f012 0203 	ands.w	r2, r2, #3
 800a1ea:	4607      	mov	r7, r0
 800a1ec:	460e      	mov	r6, r1
 800a1ee:	d007      	beq.n	800a200 <__pow5mult+0x20>
 800a1f0:	4c25      	ldr	r4, [pc, #148]	@ (800a288 <__pow5mult+0xa8>)
 800a1f2:	3a01      	subs	r2, #1
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a1fa:	f7ff fe9f 	bl	8009f3c <__multadd>
 800a1fe:	4606      	mov	r6, r0
 800a200:	10ad      	asrs	r5, r5, #2
 800a202:	d03d      	beq.n	800a280 <__pow5mult+0xa0>
 800a204:	69fc      	ldr	r4, [r7, #28]
 800a206:	b97c      	cbnz	r4, 800a228 <__pow5mult+0x48>
 800a208:	2010      	movs	r0, #16
 800a20a:	f7ff fd7f 	bl	8009d0c <malloc>
 800a20e:	4602      	mov	r2, r0
 800a210:	61f8      	str	r0, [r7, #28]
 800a212:	b928      	cbnz	r0, 800a220 <__pow5mult+0x40>
 800a214:	4b1d      	ldr	r3, [pc, #116]	@ (800a28c <__pow5mult+0xac>)
 800a216:	481e      	ldr	r0, [pc, #120]	@ (800a290 <__pow5mult+0xb0>)
 800a218:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a21c:	f000 fc3e 	bl	800aa9c <__assert_func>
 800a220:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a224:	6004      	str	r4, [r0, #0]
 800a226:	60c4      	str	r4, [r0, #12]
 800a228:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a22c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a230:	b94c      	cbnz	r4, 800a246 <__pow5mult+0x66>
 800a232:	f240 2171 	movw	r1, #625	@ 0x271
 800a236:	4638      	mov	r0, r7
 800a238:	f7ff ff12 	bl	800a060 <__i2b>
 800a23c:	2300      	movs	r3, #0
 800a23e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a242:	4604      	mov	r4, r0
 800a244:	6003      	str	r3, [r0, #0]
 800a246:	f04f 0900 	mov.w	r9, #0
 800a24a:	07eb      	lsls	r3, r5, #31
 800a24c:	d50a      	bpl.n	800a264 <__pow5mult+0x84>
 800a24e:	4631      	mov	r1, r6
 800a250:	4622      	mov	r2, r4
 800a252:	4638      	mov	r0, r7
 800a254:	f7ff ff1a 	bl	800a08c <__multiply>
 800a258:	4631      	mov	r1, r6
 800a25a:	4680      	mov	r8, r0
 800a25c:	4638      	mov	r0, r7
 800a25e:	f7ff fe4b 	bl	8009ef8 <_Bfree>
 800a262:	4646      	mov	r6, r8
 800a264:	106d      	asrs	r5, r5, #1
 800a266:	d00b      	beq.n	800a280 <__pow5mult+0xa0>
 800a268:	6820      	ldr	r0, [r4, #0]
 800a26a:	b938      	cbnz	r0, 800a27c <__pow5mult+0x9c>
 800a26c:	4622      	mov	r2, r4
 800a26e:	4621      	mov	r1, r4
 800a270:	4638      	mov	r0, r7
 800a272:	f7ff ff0b 	bl	800a08c <__multiply>
 800a276:	6020      	str	r0, [r4, #0]
 800a278:	f8c0 9000 	str.w	r9, [r0]
 800a27c:	4604      	mov	r4, r0
 800a27e:	e7e4      	b.n	800a24a <__pow5mult+0x6a>
 800a280:	4630      	mov	r0, r6
 800a282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a286:	bf00      	nop
 800a288:	0800af58 	.word	0x0800af58
 800a28c:	0800ae7d 	.word	0x0800ae7d
 800a290:	0800aefd 	.word	0x0800aefd

0800a294 <__lshift>:
 800a294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a298:	460c      	mov	r4, r1
 800a29a:	6849      	ldr	r1, [r1, #4]
 800a29c:	6923      	ldr	r3, [r4, #16]
 800a29e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a2a2:	68a3      	ldr	r3, [r4, #8]
 800a2a4:	4607      	mov	r7, r0
 800a2a6:	4691      	mov	r9, r2
 800a2a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a2ac:	f108 0601 	add.w	r6, r8, #1
 800a2b0:	42b3      	cmp	r3, r6
 800a2b2:	db0b      	blt.n	800a2cc <__lshift+0x38>
 800a2b4:	4638      	mov	r0, r7
 800a2b6:	f7ff fddf 	bl	8009e78 <_Balloc>
 800a2ba:	4605      	mov	r5, r0
 800a2bc:	b948      	cbnz	r0, 800a2d2 <__lshift+0x3e>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	4b28      	ldr	r3, [pc, #160]	@ (800a364 <__lshift+0xd0>)
 800a2c2:	4829      	ldr	r0, [pc, #164]	@ (800a368 <__lshift+0xd4>)
 800a2c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a2c8:	f000 fbe8 	bl	800aa9c <__assert_func>
 800a2cc:	3101      	adds	r1, #1
 800a2ce:	005b      	lsls	r3, r3, #1
 800a2d0:	e7ee      	b.n	800a2b0 <__lshift+0x1c>
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	f100 0114 	add.w	r1, r0, #20
 800a2d8:	f100 0210 	add.w	r2, r0, #16
 800a2dc:	4618      	mov	r0, r3
 800a2de:	4553      	cmp	r3, sl
 800a2e0:	db33      	blt.n	800a34a <__lshift+0xb6>
 800a2e2:	6920      	ldr	r0, [r4, #16]
 800a2e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a2e8:	f104 0314 	add.w	r3, r4, #20
 800a2ec:	f019 091f 	ands.w	r9, r9, #31
 800a2f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a2f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a2f8:	d02b      	beq.n	800a352 <__lshift+0xbe>
 800a2fa:	f1c9 0e20 	rsb	lr, r9, #32
 800a2fe:	468a      	mov	sl, r1
 800a300:	2200      	movs	r2, #0
 800a302:	6818      	ldr	r0, [r3, #0]
 800a304:	fa00 f009 	lsl.w	r0, r0, r9
 800a308:	4310      	orrs	r0, r2
 800a30a:	f84a 0b04 	str.w	r0, [sl], #4
 800a30e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a312:	459c      	cmp	ip, r3
 800a314:	fa22 f20e 	lsr.w	r2, r2, lr
 800a318:	d8f3      	bhi.n	800a302 <__lshift+0x6e>
 800a31a:	ebac 0304 	sub.w	r3, ip, r4
 800a31e:	3b15      	subs	r3, #21
 800a320:	f023 0303 	bic.w	r3, r3, #3
 800a324:	3304      	adds	r3, #4
 800a326:	f104 0015 	add.w	r0, r4, #21
 800a32a:	4584      	cmp	ip, r0
 800a32c:	bf38      	it	cc
 800a32e:	2304      	movcc	r3, #4
 800a330:	50ca      	str	r2, [r1, r3]
 800a332:	b10a      	cbz	r2, 800a338 <__lshift+0xa4>
 800a334:	f108 0602 	add.w	r6, r8, #2
 800a338:	3e01      	subs	r6, #1
 800a33a:	4638      	mov	r0, r7
 800a33c:	612e      	str	r6, [r5, #16]
 800a33e:	4621      	mov	r1, r4
 800a340:	f7ff fdda 	bl	8009ef8 <_Bfree>
 800a344:	4628      	mov	r0, r5
 800a346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a34a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a34e:	3301      	adds	r3, #1
 800a350:	e7c5      	b.n	800a2de <__lshift+0x4a>
 800a352:	3904      	subs	r1, #4
 800a354:	f853 2b04 	ldr.w	r2, [r3], #4
 800a358:	f841 2f04 	str.w	r2, [r1, #4]!
 800a35c:	459c      	cmp	ip, r3
 800a35e:	d8f9      	bhi.n	800a354 <__lshift+0xc0>
 800a360:	e7ea      	b.n	800a338 <__lshift+0xa4>
 800a362:	bf00      	nop
 800a364:	0800aeec 	.word	0x0800aeec
 800a368:	0800aefd 	.word	0x0800aefd

0800a36c <__mcmp>:
 800a36c:	690a      	ldr	r2, [r1, #16]
 800a36e:	4603      	mov	r3, r0
 800a370:	6900      	ldr	r0, [r0, #16]
 800a372:	1a80      	subs	r0, r0, r2
 800a374:	b530      	push	{r4, r5, lr}
 800a376:	d10e      	bne.n	800a396 <__mcmp+0x2a>
 800a378:	3314      	adds	r3, #20
 800a37a:	3114      	adds	r1, #20
 800a37c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a380:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a384:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a388:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a38c:	4295      	cmp	r5, r2
 800a38e:	d003      	beq.n	800a398 <__mcmp+0x2c>
 800a390:	d205      	bcs.n	800a39e <__mcmp+0x32>
 800a392:	f04f 30ff 	mov.w	r0, #4294967295
 800a396:	bd30      	pop	{r4, r5, pc}
 800a398:	42a3      	cmp	r3, r4
 800a39a:	d3f3      	bcc.n	800a384 <__mcmp+0x18>
 800a39c:	e7fb      	b.n	800a396 <__mcmp+0x2a>
 800a39e:	2001      	movs	r0, #1
 800a3a0:	e7f9      	b.n	800a396 <__mcmp+0x2a>
	...

0800a3a4 <__mdiff>:
 800a3a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a8:	4689      	mov	r9, r1
 800a3aa:	4606      	mov	r6, r0
 800a3ac:	4611      	mov	r1, r2
 800a3ae:	4648      	mov	r0, r9
 800a3b0:	4614      	mov	r4, r2
 800a3b2:	f7ff ffdb 	bl	800a36c <__mcmp>
 800a3b6:	1e05      	subs	r5, r0, #0
 800a3b8:	d112      	bne.n	800a3e0 <__mdiff+0x3c>
 800a3ba:	4629      	mov	r1, r5
 800a3bc:	4630      	mov	r0, r6
 800a3be:	f7ff fd5b 	bl	8009e78 <_Balloc>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	b928      	cbnz	r0, 800a3d2 <__mdiff+0x2e>
 800a3c6:	4b3f      	ldr	r3, [pc, #252]	@ (800a4c4 <__mdiff+0x120>)
 800a3c8:	f240 2137 	movw	r1, #567	@ 0x237
 800a3cc:	483e      	ldr	r0, [pc, #248]	@ (800a4c8 <__mdiff+0x124>)
 800a3ce:	f000 fb65 	bl	800aa9c <__assert_func>
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a3d8:	4610      	mov	r0, r2
 800a3da:	b003      	add	sp, #12
 800a3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e0:	bfbc      	itt	lt
 800a3e2:	464b      	movlt	r3, r9
 800a3e4:	46a1      	movlt	r9, r4
 800a3e6:	4630      	mov	r0, r6
 800a3e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a3ec:	bfba      	itte	lt
 800a3ee:	461c      	movlt	r4, r3
 800a3f0:	2501      	movlt	r5, #1
 800a3f2:	2500      	movge	r5, #0
 800a3f4:	f7ff fd40 	bl	8009e78 <_Balloc>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	b918      	cbnz	r0, 800a404 <__mdiff+0x60>
 800a3fc:	4b31      	ldr	r3, [pc, #196]	@ (800a4c4 <__mdiff+0x120>)
 800a3fe:	f240 2145 	movw	r1, #581	@ 0x245
 800a402:	e7e3      	b.n	800a3cc <__mdiff+0x28>
 800a404:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a408:	6926      	ldr	r6, [r4, #16]
 800a40a:	60c5      	str	r5, [r0, #12]
 800a40c:	f109 0310 	add.w	r3, r9, #16
 800a410:	f109 0514 	add.w	r5, r9, #20
 800a414:	f104 0e14 	add.w	lr, r4, #20
 800a418:	f100 0b14 	add.w	fp, r0, #20
 800a41c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a420:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a424:	9301      	str	r3, [sp, #4]
 800a426:	46d9      	mov	r9, fp
 800a428:	f04f 0c00 	mov.w	ip, #0
 800a42c:	9b01      	ldr	r3, [sp, #4]
 800a42e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a432:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a436:	9301      	str	r3, [sp, #4]
 800a438:	fa1f f38a 	uxth.w	r3, sl
 800a43c:	4619      	mov	r1, r3
 800a43e:	b283      	uxth	r3, r0
 800a440:	1acb      	subs	r3, r1, r3
 800a442:	0c00      	lsrs	r0, r0, #16
 800a444:	4463      	add	r3, ip
 800a446:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a44a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a44e:	b29b      	uxth	r3, r3
 800a450:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a454:	4576      	cmp	r6, lr
 800a456:	f849 3b04 	str.w	r3, [r9], #4
 800a45a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a45e:	d8e5      	bhi.n	800a42c <__mdiff+0x88>
 800a460:	1b33      	subs	r3, r6, r4
 800a462:	3b15      	subs	r3, #21
 800a464:	f023 0303 	bic.w	r3, r3, #3
 800a468:	3415      	adds	r4, #21
 800a46a:	3304      	adds	r3, #4
 800a46c:	42a6      	cmp	r6, r4
 800a46e:	bf38      	it	cc
 800a470:	2304      	movcc	r3, #4
 800a472:	441d      	add	r5, r3
 800a474:	445b      	add	r3, fp
 800a476:	461e      	mov	r6, r3
 800a478:	462c      	mov	r4, r5
 800a47a:	4544      	cmp	r4, r8
 800a47c:	d30e      	bcc.n	800a49c <__mdiff+0xf8>
 800a47e:	f108 0103 	add.w	r1, r8, #3
 800a482:	1b49      	subs	r1, r1, r5
 800a484:	f021 0103 	bic.w	r1, r1, #3
 800a488:	3d03      	subs	r5, #3
 800a48a:	45a8      	cmp	r8, r5
 800a48c:	bf38      	it	cc
 800a48e:	2100      	movcc	r1, #0
 800a490:	440b      	add	r3, r1
 800a492:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a496:	b191      	cbz	r1, 800a4be <__mdiff+0x11a>
 800a498:	6117      	str	r7, [r2, #16]
 800a49a:	e79d      	b.n	800a3d8 <__mdiff+0x34>
 800a49c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a4a0:	46e6      	mov	lr, ip
 800a4a2:	0c08      	lsrs	r0, r1, #16
 800a4a4:	fa1c fc81 	uxtah	ip, ip, r1
 800a4a8:	4471      	add	r1, lr
 800a4aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a4ae:	b289      	uxth	r1, r1
 800a4b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a4b4:	f846 1b04 	str.w	r1, [r6], #4
 800a4b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a4bc:	e7dd      	b.n	800a47a <__mdiff+0xd6>
 800a4be:	3f01      	subs	r7, #1
 800a4c0:	e7e7      	b.n	800a492 <__mdiff+0xee>
 800a4c2:	bf00      	nop
 800a4c4:	0800aeec 	.word	0x0800aeec
 800a4c8:	0800aefd 	.word	0x0800aefd

0800a4cc <__d2b>:
 800a4cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a4d0:	460f      	mov	r7, r1
 800a4d2:	2101      	movs	r1, #1
 800a4d4:	ec59 8b10 	vmov	r8, r9, d0
 800a4d8:	4616      	mov	r6, r2
 800a4da:	f7ff fccd 	bl	8009e78 <_Balloc>
 800a4de:	4604      	mov	r4, r0
 800a4e0:	b930      	cbnz	r0, 800a4f0 <__d2b+0x24>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	4b23      	ldr	r3, [pc, #140]	@ (800a574 <__d2b+0xa8>)
 800a4e6:	4824      	ldr	r0, [pc, #144]	@ (800a578 <__d2b+0xac>)
 800a4e8:	f240 310f 	movw	r1, #783	@ 0x30f
 800a4ec:	f000 fad6 	bl	800aa9c <__assert_func>
 800a4f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a4f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a4f8:	b10d      	cbz	r5, 800a4fe <__d2b+0x32>
 800a4fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a4fe:	9301      	str	r3, [sp, #4]
 800a500:	f1b8 0300 	subs.w	r3, r8, #0
 800a504:	d023      	beq.n	800a54e <__d2b+0x82>
 800a506:	4668      	mov	r0, sp
 800a508:	9300      	str	r3, [sp, #0]
 800a50a:	f7ff fd7c 	bl	800a006 <__lo0bits>
 800a50e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a512:	b1d0      	cbz	r0, 800a54a <__d2b+0x7e>
 800a514:	f1c0 0320 	rsb	r3, r0, #32
 800a518:	fa02 f303 	lsl.w	r3, r2, r3
 800a51c:	430b      	orrs	r3, r1
 800a51e:	40c2      	lsrs	r2, r0
 800a520:	6163      	str	r3, [r4, #20]
 800a522:	9201      	str	r2, [sp, #4]
 800a524:	9b01      	ldr	r3, [sp, #4]
 800a526:	61a3      	str	r3, [r4, #24]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	bf0c      	ite	eq
 800a52c:	2201      	moveq	r2, #1
 800a52e:	2202      	movne	r2, #2
 800a530:	6122      	str	r2, [r4, #16]
 800a532:	b1a5      	cbz	r5, 800a55e <__d2b+0x92>
 800a534:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a538:	4405      	add	r5, r0
 800a53a:	603d      	str	r5, [r7, #0]
 800a53c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a540:	6030      	str	r0, [r6, #0]
 800a542:	4620      	mov	r0, r4
 800a544:	b003      	add	sp, #12
 800a546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a54a:	6161      	str	r1, [r4, #20]
 800a54c:	e7ea      	b.n	800a524 <__d2b+0x58>
 800a54e:	a801      	add	r0, sp, #4
 800a550:	f7ff fd59 	bl	800a006 <__lo0bits>
 800a554:	9b01      	ldr	r3, [sp, #4]
 800a556:	6163      	str	r3, [r4, #20]
 800a558:	3020      	adds	r0, #32
 800a55a:	2201      	movs	r2, #1
 800a55c:	e7e8      	b.n	800a530 <__d2b+0x64>
 800a55e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a562:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a566:	6038      	str	r0, [r7, #0]
 800a568:	6918      	ldr	r0, [r3, #16]
 800a56a:	f7ff fd2d 	bl	8009fc8 <__hi0bits>
 800a56e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a572:	e7e5      	b.n	800a540 <__d2b+0x74>
 800a574:	0800aeec 	.word	0x0800aeec
 800a578:	0800aefd 	.word	0x0800aefd

0800a57c <__sfputc_r>:
 800a57c:	6893      	ldr	r3, [r2, #8]
 800a57e:	3b01      	subs	r3, #1
 800a580:	2b00      	cmp	r3, #0
 800a582:	b410      	push	{r4}
 800a584:	6093      	str	r3, [r2, #8]
 800a586:	da08      	bge.n	800a59a <__sfputc_r+0x1e>
 800a588:	6994      	ldr	r4, [r2, #24]
 800a58a:	42a3      	cmp	r3, r4
 800a58c:	db01      	blt.n	800a592 <__sfputc_r+0x16>
 800a58e:	290a      	cmp	r1, #10
 800a590:	d103      	bne.n	800a59a <__sfputc_r+0x1e>
 800a592:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a596:	f7fe bc0e 	b.w	8008db6 <__swbuf_r>
 800a59a:	6813      	ldr	r3, [r2, #0]
 800a59c:	1c58      	adds	r0, r3, #1
 800a59e:	6010      	str	r0, [r2, #0]
 800a5a0:	7019      	strb	r1, [r3, #0]
 800a5a2:	4608      	mov	r0, r1
 800a5a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5a8:	4770      	bx	lr

0800a5aa <__sfputs_r>:
 800a5aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ac:	4606      	mov	r6, r0
 800a5ae:	460f      	mov	r7, r1
 800a5b0:	4614      	mov	r4, r2
 800a5b2:	18d5      	adds	r5, r2, r3
 800a5b4:	42ac      	cmp	r4, r5
 800a5b6:	d101      	bne.n	800a5bc <__sfputs_r+0x12>
 800a5b8:	2000      	movs	r0, #0
 800a5ba:	e007      	b.n	800a5cc <__sfputs_r+0x22>
 800a5bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5c0:	463a      	mov	r2, r7
 800a5c2:	4630      	mov	r0, r6
 800a5c4:	f7ff ffda 	bl	800a57c <__sfputc_r>
 800a5c8:	1c43      	adds	r3, r0, #1
 800a5ca:	d1f3      	bne.n	800a5b4 <__sfputs_r+0xa>
 800a5cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a5d0 <_vfiprintf_r>:
 800a5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d4:	460d      	mov	r5, r1
 800a5d6:	b09d      	sub	sp, #116	@ 0x74
 800a5d8:	4614      	mov	r4, r2
 800a5da:	4698      	mov	r8, r3
 800a5dc:	4606      	mov	r6, r0
 800a5de:	b118      	cbz	r0, 800a5e8 <_vfiprintf_r+0x18>
 800a5e0:	6a03      	ldr	r3, [r0, #32]
 800a5e2:	b90b      	cbnz	r3, 800a5e8 <_vfiprintf_r+0x18>
 800a5e4:	f7fe fafe 	bl	8008be4 <__sinit>
 800a5e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a5ea:	07d9      	lsls	r1, r3, #31
 800a5ec:	d405      	bmi.n	800a5fa <_vfiprintf_r+0x2a>
 800a5ee:	89ab      	ldrh	r3, [r5, #12]
 800a5f0:	059a      	lsls	r2, r3, #22
 800a5f2:	d402      	bmi.n	800a5fa <_vfiprintf_r+0x2a>
 800a5f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a5f6:	f7fe fcf0 	bl	8008fda <__retarget_lock_acquire_recursive>
 800a5fa:	89ab      	ldrh	r3, [r5, #12]
 800a5fc:	071b      	lsls	r3, r3, #28
 800a5fe:	d501      	bpl.n	800a604 <_vfiprintf_r+0x34>
 800a600:	692b      	ldr	r3, [r5, #16]
 800a602:	b99b      	cbnz	r3, 800a62c <_vfiprintf_r+0x5c>
 800a604:	4629      	mov	r1, r5
 800a606:	4630      	mov	r0, r6
 800a608:	f7fe fc14 	bl	8008e34 <__swsetup_r>
 800a60c:	b170      	cbz	r0, 800a62c <_vfiprintf_r+0x5c>
 800a60e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a610:	07dc      	lsls	r4, r3, #31
 800a612:	d504      	bpl.n	800a61e <_vfiprintf_r+0x4e>
 800a614:	f04f 30ff 	mov.w	r0, #4294967295
 800a618:	b01d      	add	sp, #116	@ 0x74
 800a61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a61e:	89ab      	ldrh	r3, [r5, #12]
 800a620:	0598      	lsls	r0, r3, #22
 800a622:	d4f7      	bmi.n	800a614 <_vfiprintf_r+0x44>
 800a624:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a626:	f7fe fcd9 	bl	8008fdc <__retarget_lock_release_recursive>
 800a62a:	e7f3      	b.n	800a614 <_vfiprintf_r+0x44>
 800a62c:	2300      	movs	r3, #0
 800a62e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a630:	2320      	movs	r3, #32
 800a632:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a636:	f8cd 800c 	str.w	r8, [sp, #12]
 800a63a:	2330      	movs	r3, #48	@ 0x30
 800a63c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a7ec <_vfiprintf_r+0x21c>
 800a640:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a644:	f04f 0901 	mov.w	r9, #1
 800a648:	4623      	mov	r3, r4
 800a64a:	469a      	mov	sl, r3
 800a64c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a650:	b10a      	cbz	r2, 800a656 <_vfiprintf_r+0x86>
 800a652:	2a25      	cmp	r2, #37	@ 0x25
 800a654:	d1f9      	bne.n	800a64a <_vfiprintf_r+0x7a>
 800a656:	ebba 0b04 	subs.w	fp, sl, r4
 800a65a:	d00b      	beq.n	800a674 <_vfiprintf_r+0xa4>
 800a65c:	465b      	mov	r3, fp
 800a65e:	4622      	mov	r2, r4
 800a660:	4629      	mov	r1, r5
 800a662:	4630      	mov	r0, r6
 800a664:	f7ff ffa1 	bl	800a5aa <__sfputs_r>
 800a668:	3001      	adds	r0, #1
 800a66a:	f000 80a7 	beq.w	800a7bc <_vfiprintf_r+0x1ec>
 800a66e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a670:	445a      	add	r2, fp
 800a672:	9209      	str	r2, [sp, #36]	@ 0x24
 800a674:	f89a 3000 	ldrb.w	r3, [sl]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	f000 809f 	beq.w	800a7bc <_vfiprintf_r+0x1ec>
 800a67e:	2300      	movs	r3, #0
 800a680:	f04f 32ff 	mov.w	r2, #4294967295
 800a684:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a688:	f10a 0a01 	add.w	sl, sl, #1
 800a68c:	9304      	str	r3, [sp, #16]
 800a68e:	9307      	str	r3, [sp, #28]
 800a690:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a694:	931a      	str	r3, [sp, #104]	@ 0x68
 800a696:	4654      	mov	r4, sl
 800a698:	2205      	movs	r2, #5
 800a69a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a69e:	4853      	ldr	r0, [pc, #332]	@ (800a7ec <_vfiprintf_r+0x21c>)
 800a6a0:	f7f5 fd96 	bl	80001d0 <memchr>
 800a6a4:	9a04      	ldr	r2, [sp, #16]
 800a6a6:	b9d8      	cbnz	r0, 800a6e0 <_vfiprintf_r+0x110>
 800a6a8:	06d1      	lsls	r1, r2, #27
 800a6aa:	bf44      	itt	mi
 800a6ac:	2320      	movmi	r3, #32
 800a6ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6b2:	0713      	lsls	r3, r2, #28
 800a6b4:	bf44      	itt	mi
 800a6b6:	232b      	movmi	r3, #43	@ 0x2b
 800a6b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6bc:	f89a 3000 	ldrb.w	r3, [sl]
 800a6c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6c2:	d015      	beq.n	800a6f0 <_vfiprintf_r+0x120>
 800a6c4:	9a07      	ldr	r2, [sp, #28]
 800a6c6:	4654      	mov	r4, sl
 800a6c8:	2000      	movs	r0, #0
 800a6ca:	f04f 0c0a 	mov.w	ip, #10
 800a6ce:	4621      	mov	r1, r4
 800a6d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6d4:	3b30      	subs	r3, #48	@ 0x30
 800a6d6:	2b09      	cmp	r3, #9
 800a6d8:	d94b      	bls.n	800a772 <_vfiprintf_r+0x1a2>
 800a6da:	b1b0      	cbz	r0, 800a70a <_vfiprintf_r+0x13a>
 800a6dc:	9207      	str	r2, [sp, #28]
 800a6de:	e014      	b.n	800a70a <_vfiprintf_r+0x13a>
 800a6e0:	eba0 0308 	sub.w	r3, r0, r8
 800a6e4:	fa09 f303 	lsl.w	r3, r9, r3
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	9304      	str	r3, [sp, #16]
 800a6ec:	46a2      	mov	sl, r4
 800a6ee:	e7d2      	b.n	800a696 <_vfiprintf_r+0xc6>
 800a6f0:	9b03      	ldr	r3, [sp, #12]
 800a6f2:	1d19      	adds	r1, r3, #4
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	9103      	str	r1, [sp, #12]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	bfbb      	ittet	lt
 800a6fc:	425b      	neglt	r3, r3
 800a6fe:	f042 0202 	orrlt.w	r2, r2, #2
 800a702:	9307      	strge	r3, [sp, #28]
 800a704:	9307      	strlt	r3, [sp, #28]
 800a706:	bfb8      	it	lt
 800a708:	9204      	strlt	r2, [sp, #16]
 800a70a:	7823      	ldrb	r3, [r4, #0]
 800a70c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a70e:	d10a      	bne.n	800a726 <_vfiprintf_r+0x156>
 800a710:	7863      	ldrb	r3, [r4, #1]
 800a712:	2b2a      	cmp	r3, #42	@ 0x2a
 800a714:	d132      	bne.n	800a77c <_vfiprintf_r+0x1ac>
 800a716:	9b03      	ldr	r3, [sp, #12]
 800a718:	1d1a      	adds	r2, r3, #4
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	9203      	str	r2, [sp, #12]
 800a71e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a722:	3402      	adds	r4, #2
 800a724:	9305      	str	r3, [sp, #20]
 800a726:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a7fc <_vfiprintf_r+0x22c>
 800a72a:	7821      	ldrb	r1, [r4, #0]
 800a72c:	2203      	movs	r2, #3
 800a72e:	4650      	mov	r0, sl
 800a730:	f7f5 fd4e 	bl	80001d0 <memchr>
 800a734:	b138      	cbz	r0, 800a746 <_vfiprintf_r+0x176>
 800a736:	9b04      	ldr	r3, [sp, #16]
 800a738:	eba0 000a 	sub.w	r0, r0, sl
 800a73c:	2240      	movs	r2, #64	@ 0x40
 800a73e:	4082      	lsls	r2, r0
 800a740:	4313      	orrs	r3, r2
 800a742:	3401      	adds	r4, #1
 800a744:	9304      	str	r3, [sp, #16]
 800a746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a74a:	4829      	ldr	r0, [pc, #164]	@ (800a7f0 <_vfiprintf_r+0x220>)
 800a74c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a750:	2206      	movs	r2, #6
 800a752:	f7f5 fd3d 	bl	80001d0 <memchr>
 800a756:	2800      	cmp	r0, #0
 800a758:	d03f      	beq.n	800a7da <_vfiprintf_r+0x20a>
 800a75a:	4b26      	ldr	r3, [pc, #152]	@ (800a7f4 <_vfiprintf_r+0x224>)
 800a75c:	bb1b      	cbnz	r3, 800a7a6 <_vfiprintf_r+0x1d6>
 800a75e:	9b03      	ldr	r3, [sp, #12]
 800a760:	3307      	adds	r3, #7
 800a762:	f023 0307 	bic.w	r3, r3, #7
 800a766:	3308      	adds	r3, #8
 800a768:	9303      	str	r3, [sp, #12]
 800a76a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a76c:	443b      	add	r3, r7
 800a76e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a770:	e76a      	b.n	800a648 <_vfiprintf_r+0x78>
 800a772:	fb0c 3202 	mla	r2, ip, r2, r3
 800a776:	460c      	mov	r4, r1
 800a778:	2001      	movs	r0, #1
 800a77a:	e7a8      	b.n	800a6ce <_vfiprintf_r+0xfe>
 800a77c:	2300      	movs	r3, #0
 800a77e:	3401      	adds	r4, #1
 800a780:	9305      	str	r3, [sp, #20]
 800a782:	4619      	mov	r1, r3
 800a784:	f04f 0c0a 	mov.w	ip, #10
 800a788:	4620      	mov	r0, r4
 800a78a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a78e:	3a30      	subs	r2, #48	@ 0x30
 800a790:	2a09      	cmp	r2, #9
 800a792:	d903      	bls.n	800a79c <_vfiprintf_r+0x1cc>
 800a794:	2b00      	cmp	r3, #0
 800a796:	d0c6      	beq.n	800a726 <_vfiprintf_r+0x156>
 800a798:	9105      	str	r1, [sp, #20]
 800a79a:	e7c4      	b.n	800a726 <_vfiprintf_r+0x156>
 800a79c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7a0:	4604      	mov	r4, r0
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	e7f0      	b.n	800a788 <_vfiprintf_r+0x1b8>
 800a7a6:	ab03      	add	r3, sp, #12
 800a7a8:	9300      	str	r3, [sp, #0]
 800a7aa:	462a      	mov	r2, r5
 800a7ac:	4b12      	ldr	r3, [pc, #72]	@ (800a7f8 <_vfiprintf_r+0x228>)
 800a7ae:	a904      	add	r1, sp, #16
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	f7fd fdd3 	bl	800835c <_printf_float>
 800a7b6:	4607      	mov	r7, r0
 800a7b8:	1c78      	adds	r0, r7, #1
 800a7ba:	d1d6      	bne.n	800a76a <_vfiprintf_r+0x19a>
 800a7bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a7be:	07d9      	lsls	r1, r3, #31
 800a7c0:	d405      	bmi.n	800a7ce <_vfiprintf_r+0x1fe>
 800a7c2:	89ab      	ldrh	r3, [r5, #12]
 800a7c4:	059a      	lsls	r2, r3, #22
 800a7c6:	d402      	bmi.n	800a7ce <_vfiprintf_r+0x1fe>
 800a7c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a7ca:	f7fe fc07 	bl	8008fdc <__retarget_lock_release_recursive>
 800a7ce:	89ab      	ldrh	r3, [r5, #12]
 800a7d0:	065b      	lsls	r3, r3, #25
 800a7d2:	f53f af1f 	bmi.w	800a614 <_vfiprintf_r+0x44>
 800a7d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a7d8:	e71e      	b.n	800a618 <_vfiprintf_r+0x48>
 800a7da:	ab03      	add	r3, sp, #12
 800a7dc:	9300      	str	r3, [sp, #0]
 800a7de:	462a      	mov	r2, r5
 800a7e0:	4b05      	ldr	r3, [pc, #20]	@ (800a7f8 <_vfiprintf_r+0x228>)
 800a7e2:	a904      	add	r1, sp, #16
 800a7e4:	4630      	mov	r0, r6
 800a7e6:	f7fe f851 	bl	800888c <_printf_i>
 800a7ea:	e7e4      	b.n	800a7b6 <_vfiprintf_r+0x1e6>
 800a7ec:	0800b058 	.word	0x0800b058
 800a7f0:	0800b062 	.word	0x0800b062
 800a7f4:	0800835d 	.word	0x0800835d
 800a7f8:	0800a5ab 	.word	0x0800a5ab
 800a7fc:	0800b05e 	.word	0x0800b05e

0800a800 <__sflush_r>:
 800a800:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a808:	0716      	lsls	r6, r2, #28
 800a80a:	4605      	mov	r5, r0
 800a80c:	460c      	mov	r4, r1
 800a80e:	d454      	bmi.n	800a8ba <__sflush_r+0xba>
 800a810:	684b      	ldr	r3, [r1, #4]
 800a812:	2b00      	cmp	r3, #0
 800a814:	dc02      	bgt.n	800a81c <__sflush_r+0x1c>
 800a816:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a818:	2b00      	cmp	r3, #0
 800a81a:	dd48      	ble.n	800a8ae <__sflush_r+0xae>
 800a81c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a81e:	2e00      	cmp	r6, #0
 800a820:	d045      	beq.n	800a8ae <__sflush_r+0xae>
 800a822:	2300      	movs	r3, #0
 800a824:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a828:	682f      	ldr	r7, [r5, #0]
 800a82a:	6a21      	ldr	r1, [r4, #32]
 800a82c:	602b      	str	r3, [r5, #0]
 800a82e:	d030      	beq.n	800a892 <__sflush_r+0x92>
 800a830:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a832:	89a3      	ldrh	r3, [r4, #12]
 800a834:	0759      	lsls	r1, r3, #29
 800a836:	d505      	bpl.n	800a844 <__sflush_r+0x44>
 800a838:	6863      	ldr	r3, [r4, #4]
 800a83a:	1ad2      	subs	r2, r2, r3
 800a83c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a83e:	b10b      	cbz	r3, 800a844 <__sflush_r+0x44>
 800a840:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a842:	1ad2      	subs	r2, r2, r3
 800a844:	2300      	movs	r3, #0
 800a846:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a848:	6a21      	ldr	r1, [r4, #32]
 800a84a:	4628      	mov	r0, r5
 800a84c:	47b0      	blx	r6
 800a84e:	1c43      	adds	r3, r0, #1
 800a850:	89a3      	ldrh	r3, [r4, #12]
 800a852:	d106      	bne.n	800a862 <__sflush_r+0x62>
 800a854:	6829      	ldr	r1, [r5, #0]
 800a856:	291d      	cmp	r1, #29
 800a858:	d82b      	bhi.n	800a8b2 <__sflush_r+0xb2>
 800a85a:	4a2a      	ldr	r2, [pc, #168]	@ (800a904 <__sflush_r+0x104>)
 800a85c:	410a      	asrs	r2, r1
 800a85e:	07d6      	lsls	r6, r2, #31
 800a860:	d427      	bmi.n	800a8b2 <__sflush_r+0xb2>
 800a862:	2200      	movs	r2, #0
 800a864:	6062      	str	r2, [r4, #4]
 800a866:	04d9      	lsls	r1, r3, #19
 800a868:	6922      	ldr	r2, [r4, #16]
 800a86a:	6022      	str	r2, [r4, #0]
 800a86c:	d504      	bpl.n	800a878 <__sflush_r+0x78>
 800a86e:	1c42      	adds	r2, r0, #1
 800a870:	d101      	bne.n	800a876 <__sflush_r+0x76>
 800a872:	682b      	ldr	r3, [r5, #0]
 800a874:	b903      	cbnz	r3, 800a878 <__sflush_r+0x78>
 800a876:	6560      	str	r0, [r4, #84]	@ 0x54
 800a878:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a87a:	602f      	str	r7, [r5, #0]
 800a87c:	b1b9      	cbz	r1, 800a8ae <__sflush_r+0xae>
 800a87e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a882:	4299      	cmp	r1, r3
 800a884:	d002      	beq.n	800a88c <__sflush_r+0x8c>
 800a886:	4628      	mov	r0, r5
 800a888:	f7ff f9f6 	bl	8009c78 <_free_r>
 800a88c:	2300      	movs	r3, #0
 800a88e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a890:	e00d      	b.n	800a8ae <__sflush_r+0xae>
 800a892:	2301      	movs	r3, #1
 800a894:	4628      	mov	r0, r5
 800a896:	47b0      	blx	r6
 800a898:	4602      	mov	r2, r0
 800a89a:	1c50      	adds	r0, r2, #1
 800a89c:	d1c9      	bne.n	800a832 <__sflush_r+0x32>
 800a89e:	682b      	ldr	r3, [r5, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d0c6      	beq.n	800a832 <__sflush_r+0x32>
 800a8a4:	2b1d      	cmp	r3, #29
 800a8a6:	d001      	beq.n	800a8ac <__sflush_r+0xac>
 800a8a8:	2b16      	cmp	r3, #22
 800a8aa:	d11e      	bne.n	800a8ea <__sflush_r+0xea>
 800a8ac:	602f      	str	r7, [r5, #0]
 800a8ae:	2000      	movs	r0, #0
 800a8b0:	e022      	b.n	800a8f8 <__sflush_r+0xf8>
 800a8b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8b6:	b21b      	sxth	r3, r3
 800a8b8:	e01b      	b.n	800a8f2 <__sflush_r+0xf2>
 800a8ba:	690f      	ldr	r7, [r1, #16]
 800a8bc:	2f00      	cmp	r7, #0
 800a8be:	d0f6      	beq.n	800a8ae <__sflush_r+0xae>
 800a8c0:	0793      	lsls	r3, r2, #30
 800a8c2:	680e      	ldr	r6, [r1, #0]
 800a8c4:	bf08      	it	eq
 800a8c6:	694b      	ldreq	r3, [r1, #20]
 800a8c8:	600f      	str	r7, [r1, #0]
 800a8ca:	bf18      	it	ne
 800a8cc:	2300      	movne	r3, #0
 800a8ce:	eba6 0807 	sub.w	r8, r6, r7
 800a8d2:	608b      	str	r3, [r1, #8]
 800a8d4:	f1b8 0f00 	cmp.w	r8, #0
 800a8d8:	dde9      	ble.n	800a8ae <__sflush_r+0xae>
 800a8da:	6a21      	ldr	r1, [r4, #32]
 800a8dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a8de:	4643      	mov	r3, r8
 800a8e0:	463a      	mov	r2, r7
 800a8e2:	4628      	mov	r0, r5
 800a8e4:	47b0      	blx	r6
 800a8e6:	2800      	cmp	r0, #0
 800a8e8:	dc08      	bgt.n	800a8fc <__sflush_r+0xfc>
 800a8ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8f2:	81a3      	strh	r3, [r4, #12]
 800a8f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8fc:	4407      	add	r7, r0
 800a8fe:	eba8 0800 	sub.w	r8, r8, r0
 800a902:	e7e7      	b.n	800a8d4 <__sflush_r+0xd4>
 800a904:	dfbffffe 	.word	0xdfbffffe

0800a908 <_fflush_r>:
 800a908:	b538      	push	{r3, r4, r5, lr}
 800a90a:	690b      	ldr	r3, [r1, #16]
 800a90c:	4605      	mov	r5, r0
 800a90e:	460c      	mov	r4, r1
 800a910:	b913      	cbnz	r3, 800a918 <_fflush_r+0x10>
 800a912:	2500      	movs	r5, #0
 800a914:	4628      	mov	r0, r5
 800a916:	bd38      	pop	{r3, r4, r5, pc}
 800a918:	b118      	cbz	r0, 800a922 <_fflush_r+0x1a>
 800a91a:	6a03      	ldr	r3, [r0, #32]
 800a91c:	b90b      	cbnz	r3, 800a922 <_fflush_r+0x1a>
 800a91e:	f7fe f961 	bl	8008be4 <__sinit>
 800a922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d0f3      	beq.n	800a912 <_fflush_r+0xa>
 800a92a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a92c:	07d0      	lsls	r0, r2, #31
 800a92e:	d404      	bmi.n	800a93a <_fflush_r+0x32>
 800a930:	0599      	lsls	r1, r3, #22
 800a932:	d402      	bmi.n	800a93a <_fflush_r+0x32>
 800a934:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a936:	f7fe fb50 	bl	8008fda <__retarget_lock_acquire_recursive>
 800a93a:	4628      	mov	r0, r5
 800a93c:	4621      	mov	r1, r4
 800a93e:	f7ff ff5f 	bl	800a800 <__sflush_r>
 800a942:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a944:	07da      	lsls	r2, r3, #31
 800a946:	4605      	mov	r5, r0
 800a948:	d4e4      	bmi.n	800a914 <_fflush_r+0xc>
 800a94a:	89a3      	ldrh	r3, [r4, #12]
 800a94c:	059b      	lsls	r3, r3, #22
 800a94e:	d4e1      	bmi.n	800a914 <_fflush_r+0xc>
 800a950:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a952:	f7fe fb43 	bl	8008fdc <__retarget_lock_release_recursive>
 800a956:	e7dd      	b.n	800a914 <_fflush_r+0xc>

0800a958 <__swhatbuf_r>:
 800a958:	b570      	push	{r4, r5, r6, lr}
 800a95a:	460c      	mov	r4, r1
 800a95c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a960:	2900      	cmp	r1, #0
 800a962:	b096      	sub	sp, #88	@ 0x58
 800a964:	4615      	mov	r5, r2
 800a966:	461e      	mov	r6, r3
 800a968:	da0d      	bge.n	800a986 <__swhatbuf_r+0x2e>
 800a96a:	89a3      	ldrh	r3, [r4, #12]
 800a96c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a970:	f04f 0100 	mov.w	r1, #0
 800a974:	bf14      	ite	ne
 800a976:	2340      	movne	r3, #64	@ 0x40
 800a978:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a97c:	2000      	movs	r0, #0
 800a97e:	6031      	str	r1, [r6, #0]
 800a980:	602b      	str	r3, [r5, #0]
 800a982:	b016      	add	sp, #88	@ 0x58
 800a984:	bd70      	pop	{r4, r5, r6, pc}
 800a986:	466a      	mov	r2, sp
 800a988:	f000 f848 	bl	800aa1c <_fstat_r>
 800a98c:	2800      	cmp	r0, #0
 800a98e:	dbec      	blt.n	800a96a <__swhatbuf_r+0x12>
 800a990:	9901      	ldr	r1, [sp, #4]
 800a992:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a996:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a99a:	4259      	negs	r1, r3
 800a99c:	4159      	adcs	r1, r3
 800a99e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a9a2:	e7eb      	b.n	800a97c <__swhatbuf_r+0x24>

0800a9a4 <__smakebuf_r>:
 800a9a4:	898b      	ldrh	r3, [r1, #12]
 800a9a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9a8:	079d      	lsls	r5, r3, #30
 800a9aa:	4606      	mov	r6, r0
 800a9ac:	460c      	mov	r4, r1
 800a9ae:	d507      	bpl.n	800a9c0 <__smakebuf_r+0x1c>
 800a9b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a9b4:	6023      	str	r3, [r4, #0]
 800a9b6:	6123      	str	r3, [r4, #16]
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	6163      	str	r3, [r4, #20]
 800a9bc:	b003      	add	sp, #12
 800a9be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9c0:	ab01      	add	r3, sp, #4
 800a9c2:	466a      	mov	r2, sp
 800a9c4:	f7ff ffc8 	bl	800a958 <__swhatbuf_r>
 800a9c8:	9f00      	ldr	r7, [sp, #0]
 800a9ca:	4605      	mov	r5, r0
 800a9cc:	4639      	mov	r1, r7
 800a9ce:	4630      	mov	r0, r6
 800a9d0:	f7ff f9c6 	bl	8009d60 <_malloc_r>
 800a9d4:	b948      	cbnz	r0, 800a9ea <__smakebuf_r+0x46>
 800a9d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9da:	059a      	lsls	r2, r3, #22
 800a9dc:	d4ee      	bmi.n	800a9bc <__smakebuf_r+0x18>
 800a9de:	f023 0303 	bic.w	r3, r3, #3
 800a9e2:	f043 0302 	orr.w	r3, r3, #2
 800a9e6:	81a3      	strh	r3, [r4, #12]
 800a9e8:	e7e2      	b.n	800a9b0 <__smakebuf_r+0xc>
 800a9ea:	89a3      	ldrh	r3, [r4, #12]
 800a9ec:	6020      	str	r0, [r4, #0]
 800a9ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9f2:	81a3      	strh	r3, [r4, #12]
 800a9f4:	9b01      	ldr	r3, [sp, #4]
 800a9f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a9fa:	b15b      	cbz	r3, 800aa14 <__smakebuf_r+0x70>
 800a9fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa00:	4630      	mov	r0, r6
 800aa02:	f000 f81d 	bl	800aa40 <_isatty_r>
 800aa06:	b128      	cbz	r0, 800aa14 <__smakebuf_r+0x70>
 800aa08:	89a3      	ldrh	r3, [r4, #12]
 800aa0a:	f023 0303 	bic.w	r3, r3, #3
 800aa0e:	f043 0301 	orr.w	r3, r3, #1
 800aa12:	81a3      	strh	r3, [r4, #12]
 800aa14:	89a3      	ldrh	r3, [r4, #12]
 800aa16:	431d      	orrs	r5, r3
 800aa18:	81a5      	strh	r5, [r4, #12]
 800aa1a:	e7cf      	b.n	800a9bc <__smakebuf_r+0x18>

0800aa1c <_fstat_r>:
 800aa1c:	b538      	push	{r3, r4, r5, lr}
 800aa1e:	4d07      	ldr	r5, [pc, #28]	@ (800aa3c <_fstat_r+0x20>)
 800aa20:	2300      	movs	r3, #0
 800aa22:	4604      	mov	r4, r0
 800aa24:	4608      	mov	r0, r1
 800aa26:	4611      	mov	r1, r2
 800aa28:	602b      	str	r3, [r5, #0]
 800aa2a:	f7f8 fe51 	bl	80036d0 <_fstat>
 800aa2e:	1c43      	adds	r3, r0, #1
 800aa30:	d102      	bne.n	800aa38 <_fstat_r+0x1c>
 800aa32:	682b      	ldr	r3, [r5, #0]
 800aa34:	b103      	cbz	r3, 800aa38 <_fstat_r+0x1c>
 800aa36:	6023      	str	r3, [r4, #0]
 800aa38:	bd38      	pop	{r3, r4, r5, pc}
 800aa3a:	bf00      	nop
 800aa3c:	20000528 	.word	0x20000528

0800aa40 <_isatty_r>:
 800aa40:	b538      	push	{r3, r4, r5, lr}
 800aa42:	4d06      	ldr	r5, [pc, #24]	@ (800aa5c <_isatty_r+0x1c>)
 800aa44:	2300      	movs	r3, #0
 800aa46:	4604      	mov	r4, r0
 800aa48:	4608      	mov	r0, r1
 800aa4a:	602b      	str	r3, [r5, #0]
 800aa4c:	f7f8 fe50 	bl	80036f0 <_isatty>
 800aa50:	1c43      	adds	r3, r0, #1
 800aa52:	d102      	bne.n	800aa5a <_isatty_r+0x1a>
 800aa54:	682b      	ldr	r3, [r5, #0]
 800aa56:	b103      	cbz	r3, 800aa5a <_isatty_r+0x1a>
 800aa58:	6023      	str	r3, [r4, #0]
 800aa5a:	bd38      	pop	{r3, r4, r5, pc}
 800aa5c:	20000528 	.word	0x20000528

0800aa60 <_sbrk_r>:
 800aa60:	b538      	push	{r3, r4, r5, lr}
 800aa62:	4d06      	ldr	r5, [pc, #24]	@ (800aa7c <_sbrk_r+0x1c>)
 800aa64:	2300      	movs	r3, #0
 800aa66:	4604      	mov	r4, r0
 800aa68:	4608      	mov	r0, r1
 800aa6a:	602b      	str	r3, [r5, #0]
 800aa6c:	f7f8 fe58 	bl	8003720 <_sbrk>
 800aa70:	1c43      	adds	r3, r0, #1
 800aa72:	d102      	bne.n	800aa7a <_sbrk_r+0x1a>
 800aa74:	682b      	ldr	r3, [r5, #0]
 800aa76:	b103      	cbz	r3, 800aa7a <_sbrk_r+0x1a>
 800aa78:	6023      	str	r3, [r4, #0]
 800aa7a:	bd38      	pop	{r3, r4, r5, pc}
 800aa7c:	20000528 	.word	0x20000528

0800aa80 <memcpy>:
 800aa80:	440a      	add	r2, r1
 800aa82:	4291      	cmp	r1, r2
 800aa84:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa88:	d100      	bne.n	800aa8c <memcpy+0xc>
 800aa8a:	4770      	bx	lr
 800aa8c:	b510      	push	{r4, lr}
 800aa8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa96:	4291      	cmp	r1, r2
 800aa98:	d1f9      	bne.n	800aa8e <memcpy+0xe>
 800aa9a:	bd10      	pop	{r4, pc}

0800aa9c <__assert_func>:
 800aa9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa9e:	4614      	mov	r4, r2
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	4b09      	ldr	r3, [pc, #36]	@ (800aac8 <__assert_func+0x2c>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4605      	mov	r5, r0
 800aaa8:	68d8      	ldr	r0, [r3, #12]
 800aaaa:	b954      	cbnz	r4, 800aac2 <__assert_func+0x26>
 800aaac:	4b07      	ldr	r3, [pc, #28]	@ (800aacc <__assert_func+0x30>)
 800aaae:	461c      	mov	r4, r3
 800aab0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aab4:	9100      	str	r1, [sp, #0]
 800aab6:	462b      	mov	r3, r5
 800aab8:	4905      	ldr	r1, [pc, #20]	@ (800aad0 <__assert_func+0x34>)
 800aaba:	f000 f841 	bl	800ab40 <fiprintf>
 800aabe:	f000 f851 	bl	800ab64 <abort>
 800aac2:	4b04      	ldr	r3, [pc, #16]	@ (800aad4 <__assert_func+0x38>)
 800aac4:	e7f4      	b.n	800aab0 <__assert_func+0x14>
 800aac6:	bf00      	nop
 800aac8:	20000018 	.word	0x20000018
 800aacc:	0800b0ae 	.word	0x0800b0ae
 800aad0:	0800b080 	.word	0x0800b080
 800aad4:	0800b073 	.word	0x0800b073

0800aad8 <_calloc_r>:
 800aad8:	b570      	push	{r4, r5, r6, lr}
 800aada:	fba1 5402 	umull	r5, r4, r1, r2
 800aade:	b93c      	cbnz	r4, 800aaf0 <_calloc_r+0x18>
 800aae0:	4629      	mov	r1, r5
 800aae2:	f7ff f93d 	bl	8009d60 <_malloc_r>
 800aae6:	4606      	mov	r6, r0
 800aae8:	b928      	cbnz	r0, 800aaf6 <_calloc_r+0x1e>
 800aaea:	2600      	movs	r6, #0
 800aaec:	4630      	mov	r0, r6
 800aaee:	bd70      	pop	{r4, r5, r6, pc}
 800aaf0:	220c      	movs	r2, #12
 800aaf2:	6002      	str	r2, [r0, #0]
 800aaf4:	e7f9      	b.n	800aaea <_calloc_r+0x12>
 800aaf6:	462a      	mov	r2, r5
 800aaf8:	4621      	mov	r1, r4
 800aafa:	f7fe f9f1 	bl	8008ee0 <memset>
 800aafe:	e7f5      	b.n	800aaec <_calloc_r+0x14>

0800ab00 <__ascii_mbtowc>:
 800ab00:	b082      	sub	sp, #8
 800ab02:	b901      	cbnz	r1, 800ab06 <__ascii_mbtowc+0x6>
 800ab04:	a901      	add	r1, sp, #4
 800ab06:	b142      	cbz	r2, 800ab1a <__ascii_mbtowc+0x1a>
 800ab08:	b14b      	cbz	r3, 800ab1e <__ascii_mbtowc+0x1e>
 800ab0a:	7813      	ldrb	r3, [r2, #0]
 800ab0c:	600b      	str	r3, [r1, #0]
 800ab0e:	7812      	ldrb	r2, [r2, #0]
 800ab10:	1e10      	subs	r0, r2, #0
 800ab12:	bf18      	it	ne
 800ab14:	2001      	movne	r0, #1
 800ab16:	b002      	add	sp, #8
 800ab18:	4770      	bx	lr
 800ab1a:	4610      	mov	r0, r2
 800ab1c:	e7fb      	b.n	800ab16 <__ascii_mbtowc+0x16>
 800ab1e:	f06f 0001 	mvn.w	r0, #1
 800ab22:	e7f8      	b.n	800ab16 <__ascii_mbtowc+0x16>

0800ab24 <__ascii_wctomb>:
 800ab24:	4603      	mov	r3, r0
 800ab26:	4608      	mov	r0, r1
 800ab28:	b141      	cbz	r1, 800ab3c <__ascii_wctomb+0x18>
 800ab2a:	2aff      	cmp	r2, #255	@ 0xff
 800ab2c:	d904      	bls.n	800ab38 <__ascii_wctomb+0x14>
 800ab2e:	228a      	movs	r2, #138	@ 0x8a
 800ab30:	601a      	str	r2, [r3, #0]
 800ab32:	f04f 30ff 	mov.w	r0, #4294967295
 800ab36:	4770      	bx	lr
 800ab38:	700a      	strb	r2, [r1, #0]
 800ab3a:	2001      	movs	r0, #1
 800ab3c:	4770      	bx	lr
	...

0800ab40 <fiprintf>:
 800ab40:	b40e      	push	{r1, r2, r3}
 800ab42:	b503      	push	{r0, r1, lr}
 800ab44:	4601      	mov	r1, r0
 800ab46:	ab03      	add	r3, sp, #12
 800ab48:	4805      	ldr	r0, [pc, #20]	@ (800ab60 <fiprintf+0x20>)
 800ab4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab4e:	6800      	ldr	r0, [r0, #0]
 800ab50:	9301      	str	r3, [sp, #4]
 800ab52:	f7ff fd3d 	bl	800a5d0 <_vfiprintf_r>
 800ab56:	b002      	add	sp, #8
 800ab58:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab5c:	b003      	add	sp, #12
 800ab5e:	4770      	bx	lr
 800ab60:	20000018 	.word	0x20000018

0800ab64 <abort>:
 800ab64:	b508      	push	{r3, lr}
 800ab66:	2006      	movs	r0, #6
 800ab68:	f000 f82c 	bl	800abc4 <raise>
 800ab6c:	2001      	movs	r0, #1
 800ab6e:	f7f8 fd7b 	bl	8003668 <_exit>

0800ab72 <_raise_r>:
 800ab72:	291f      	cmp	r1, #31
 800ab74:	b538      	push	{r3, r4, r5, lr}
 800ab76:	4605      	mov	r5, r0
 800ab78:	460c      	mov	r4, r1
 800ab7a:	d904      	bls.n	800ab86 <_raise_r+0x14>
 800ab7c:	2316      	movs	r3, #22
 800ab7e:	6003      	str	r3, [r0, #0]
 800ab80:	f04f 30ff 	mov.w	r0, #4294967295
 800ab84:	bd38      	pop	{r3, r4, r5, pc}
 800ab86:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ab88:	b112      	cbz	r2, 800ab90 <_raise_r+0x1e>
 800ab8a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab8e:	b94b      	cbnz	r3, 800aba4 <_raise_r+0x32>
 800ab90:	4628      	mov	r0, r5
 800ab92:	f000 f831 	bl	800abf8 <_getpid_r>
 800ab96:	4622      	mov	r2, r4
 800ab98:	4601      	mov	r1, r0
 800ab9a:	4628      	mov	r0, r5
 800ab9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aba0:	f000 b818 	b.w	800abd4 <_kill_r>
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d00a      	beq.n	800abbe <_raise_r+0x4c>
 800aba8:	1c59      	adds	r1, r3, #1
 800abaa:	d103      	bne.n	800abb4 <_raise_r+0x42>
 800abac:	2316      	movs	r3, #22
 800abae:	6003      	str	r3, [r0, #0]
 800abb0:	2001      	movs	r0, #1
 800abb2:	e7e7      	b.n	800ab84 <_raise_r+0x12>
 800abb4:	2100      	movs	r1, #0
 800abb6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800abba:	4620      	mov	r0, r4
 800abbc:	4798      	blx	r3
 800abbe:	2000      	movs	r0, #0
 800abc0:	e7e0      	b.n	800ab84 <_raise_r+0x12>
	...

0800abc4 <raise>:
 800abc4:	4b02      	ldr	r3, [pc, #8]	@ (800abd0 <raise+0xc>)
 800abc6:	4601      	mov	r1, r0
 800abc8:	6818      	ldr	r0, [r3, #0]
 800abca:	f7ff bfd2 	b.w	800ab72 <_raise_r>
 800abce:	bf00      	nop
 800abd0:	20000018 	.word	0x20000018

0800abd4 <_kill_r>:
 800abd4:	b538      	push	{r3, r4, r5, lr}
 800abd6:	4d07      	ldr	r5, [pc, #28]	@ (800abf4 <_kill_r+0x20>)
 800abd8:	2300      	movs	r3, #0
 800abda:	4604      	mov	r4, r0
 800abdc:	4608      	mov	r0, r1
 800abde:	4611      	mov	r1, r2
 800abe0:	602b      	str	r3, [r5, #0]
 800abe2:	f7f8 fd31 	bl	8003648 <_kill>
 800abe6:	1c43      	adds	r3, r0, #1
 800abe8:	d102      	bne.n	800abf0 <_kill_r+0x1c>
 800abea:	682b      	ldr	r3, [r5, #0]
 800abec:	b103      	cbz	r3, 800abf0 <_kill_r+0x1c>
 800abee:	6023      	str	r3, [r4, #0]
 800abf0:	bd38      	pop	{r3, r4, r5, pc}
 800abf2:	bf00      	nop
 800abf4:	20000528 	.word	0x20000528

0800abf8 <_getpid_r>:
 800abf8:	f7f8 bd1e 	b.w	8003638 <_getpid>

0800abfc <_init>:
 800abfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abfe:	bf00      	nop
 800ac00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac02:	bc08      	pop	{r3}
 800ac04:	469e      	mov	lr, r3
 800ac06:	4770      	bx	lr

0800ac08 <_fini>:
 800ac08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac0a:	bf00      	nop
 800ac0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac0e:	bc08      	pop	{r3}
 800ac10:	469e      	mov	lr, r3
 800ac12:	4770      	bx	lr
