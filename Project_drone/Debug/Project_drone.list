
Project_drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d14  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  08007ea8  08007ea8  00008ea8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083d8  080083d8  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  080083d8  080083d8  000093d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083e0  080083e0  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083e0  080083e0  000093e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080083e4  080083e4  000093e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080083e8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1d4  2**0
                  CONTENTS
 10 .bss          00000210  200001d4  200001d4  0000a1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003e4  200003e4  0000a1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b8cb  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ae2  00000000  00000000  00015acf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de0  00000000  00000000  000185b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a39  00000000  00000000  00019398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023fa0  00000000  00000000  00019dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e399  00000000  00000000  0003dd71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cab14  00000000  00000000  0004c10a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00116c1e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004940  00000000  00000000  00116c64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  0011b5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e8c 	.word	0x08007e8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08007e8c 	.word	0x08007e8c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	601a      	str	r2, [r3, #0]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f023 0210 	bic.w	r2, r3, #16
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	605a      	str	r2, [r3, #4]
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(const SPI_TypeDef *SPIx)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d101      	bne.n	8000ef6 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e000      	b.n	8000ef8 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d101      	bne.n	8000f1c <LL_SPI_IsActiveFlag_TXE+0x18>
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e000      	b.n	8000f1e <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	330c      	adds	r3, #12
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b2db      	uxtb	r3, r3
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b085      	sub	sp, #20
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	330c      	adds	r3, #12
 8000f56:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	78fa      	ldrb	r2, [r7, #3]
 8000f5c:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000f5e:	bf00      	nop
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	691a      	ldr	r2, [r3, #16]
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	683a      	ldr	r2, [r7, #0]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	bf0c      	ite	eq
 8000f82:	2301      	moveq	r3, #1
 8000f84:	2300      	movne	r3, #0
 8000f86:	b2db      	uxtb	r3, r3
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	619a      	str	r2, [r3, #24]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	041a      	lsls	r2, r3, #16
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	619a      	str	r2, [r3, #24]
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000fd8:	4b08      	ldr	r3, [pc, #32]	@ (8000ffc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000fdc:	4907      	ldr	r1, [pc, #28]	@ (8000ffc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000fe4:	4b05      	ldr	r3, [pc, #20]	@ (8000ffc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fe6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4013      	ands	r3, r2
 8000fec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fee:	68fb      	ldr	r3, [r7, #12]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	40023800 	.word	0x40023800

08001000 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001008:	4b08      	ldr	r3, [pc, #32]	@ (800102c <LL_APB1_GRP1_EnableClock+0x2c>)
 800100a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800100c:	4907      	ldr	r1, [pc, #28]	@ (800102c <LL_APB1_GRP1_EnableClock+0x2c>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4313      	orrs	r3, r2
 8001012:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001014:	4b05      	ldr	r3, [pc, #20]	@ (800102c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001016:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4013      	ands	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800101e:	68fb      	ldr	r3, [r7, #12]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	40023800 	.word	0x40023800

08001030 <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b090      	sub	sp, #64	@ 0x40
 8001034:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001036:	f107 0318 	add.w	r3, r7, #24
 800103a:	2228      	movs	r2, #40	@ 0x28
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f004 fcce 	bl	80059e0 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	463b      	mov	r3, r7
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
 8001050:	611a      	str	r2, [r3, #16]
 8001052:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001054:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001058:	f7ff ffd2 	bl	8001000 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800105c:	2002      	movs	r0, #2
 800105e:	f7ff ffb7 	bl	8000fd0 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001062:	2004      	movs	r0, #4
 8001064:	f7ff ffb4 	bl	8000fd0 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001068:	2001      	movs	r0, #1
 800106a:	f7ff ffb1 	bl	8000fd0 <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800106e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001072:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001074:	2302      	movs	r3, #2
 8001076:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001078:	2303      	movs	r3, #3
 800107a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001084:	2305      	movs	r3, #5
 8001086:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001088:	463b      	mov	r3, r7
 800108a:	4619      	mov	r1, r3
 800108c:	4841      	ldr	r0, [pc, #260]	@ (8001194 <BNO080_GPIO_SPI_Initialization+0x164>)
 800108e:	f002 fe3a 	bl	8003d06 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001096:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800109a:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800109c:	2300      	movs	r3, #0
 800109e:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80010a0:	2302      	movs	r3, #2
 80010a2:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80010a4:	2301      	movs	r3, #1
 80010a6:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80010a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80010ae:	2318      	movs	r3, #24
 80010b0:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80010b2:	2300      	movs	r3, #0
 80010b4:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 80010ba:	230a      	movs	r3, #10
 80010bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 80010be:	f107 0318 	add.w	r3, r7, #24
 80010c2:	4619      	mov	r1, r3
 80010c4:	4834      	ldr	r0, [pc, #208]	@ (8001198 <BNO080_GPIO_SPI_Initialization+0x168>)
 80010c6:	f002 fffc 	bl	80040c2 <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80010ca:	2100      	movs	r1, #0
 80010cc:	4832      	ldr	r0, [pc, #200]	@ (8001198 <BNO080_GPIO_SPI_Initialization+0x168>)
 80010ce:	f7ff fef3 	bl	8000eb8 <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 80010d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010d6:	4831      	ldr	r0, [pc, #196]	@ (800119c <BNO080_GPIO_SPI_Initialization+0x16c>)
 80010d8:	f7ff ff6a 	bl	8000fb0 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 80010dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010e0:	482c      	ldr	r0, [pc, #176]	@ (8001194 <BNO080_GPIO_SPI_Initialization+0x164>)
 80010e2:	f7ff ff65 	bl	8000fb0 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 80010e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010ea:	482d      	ldr	r0, [pc, #180]	@ (80011a0 <BNO080_GPIO_SPI_Initialization+0x170>)
 80010ec:	f7ff ff60 	bl	8000fb0 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 80010f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010f4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010f6:	2301      	movs	r3, #1
 80010f8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80010fa:	2303      	movs	r3, #3
 80010fc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 8001106:	463b      	mov	r3, r7
 8001108:	4619      	mov	r1, r3
 800110a:	4822      	ldr	r0, [pc, #136]	@ (8001194 <BNO080_GPIO_SPI_Initialization+0x164>)
 800110c:	f002 fdfb 	bl	8003d06 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 8001110:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001114:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001116:	2301      	movs	r3, #1
 8001118:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 8001126:	463b      	mov	r3, r7
 8001128:	4619      	mov	r1, r3
 800112a:	481c      	ldr	r0, [pc, #112]	@ (800119c <BNO080_GPIO_SPI_Initialization+0x16c>)
 800112c:	f002 fdeb 	bl	8003d06 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 8001130:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001134:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001136:	2301      	movs	r3, #1
 8001138:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800113a:	2303      	movs	r3, #3
 800113c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 8001146:	463b      	mov	r3, r7
 8001148:	4619      	mov	r1, r3
 800114a:	4815      	ldr	r0, [pc, #84]	@ (80011a0 <BNO080_GPIO_SPI_Initialization+0x170>)
 800114c:	f002 fddb 	bl	8003d06 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 8001150:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001154:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800115a:	2301      	movs	r3, #1
 800115c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	480e      	ldr	r0, [pc, #56]	@ (800119c <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001164:	f002 fdcf 	bl	8003d06 <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 8001168:	480b      	ldr	r0, [pc, #44]	@ (8001198 <BNO080_GPIO_SPI_Initialization+0x168>)
 800116a:	f7ff fe95 	bl	8000e98 <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 800116e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001172:	4808      	ldr	r0, [pc, #32]	@ (8001194 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001174:	f7ff ff0e 	bl	8000f94 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 8001178:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800117c:	4808      	ldr	r0, [pc, #32]	@ (80011a0 <BNO080_GPIO_SPI_Initialization+0x170>)
 800117e:	f7ff ff09 	bl	8000f94 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 8001182:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001186:	4805      	ldr	r0, [pc, #20]	@ (800119c <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001188:	f7ff ff04 	bl	8000f94 <LL_GPIO_SetOutputPin>
}
 800118c:	bf00      	nop
 800118e:	3740      	adds	r7, #64	@ 0x40
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40020400 	.word	0x40020400
 8001198:	40003800 	.word	0x40003800
 800119c:	40020800 	.word	0x40020800
 80011a0:	40020000 	.word	0x40020000

080011a4 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 80011aa:	f7ff ff41 	bl	8001030 <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 80011ae:	482e      	ldr	r0, [pc, #184]	@ (8001268 <BNO080_Initialization+0xc4>)
 80011b0:	f004 face 	bl	8005750 <iprintf>
	
	CHIP_DESELECT(BNO080);
 80011b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011b8:	482c      	ldr	r0, [pc, #176]	@ (800126c <BNO080_Initialization+0xc8>)
 80011ba:	f7ff feeb 	bl	8000f94 <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 80011be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011c2:	482b      	ldr	r0, [pc, #172]	@ (8001270 <BNO080_Initialization+0xcc>)
 80011c4:	f7ff fee6 	bl	8000f94 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 80011c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011cc:	4829      	ldr	r0, [pc, #164]	@ (8001274 <BNO080_Initialization+0xd0>)
 80011ce:	f7ff feef 	bl	8000fb0 <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 80011d2:	20c8      	movs	r0, #200	@ 0xc8
 80011d4:	f001 fede 	bl	8002f94 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 80011d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011dc:	4825      	ldr	r0, [pc, #148]	@ (8001274 <BNO080_Initialization+0xd0>)
 80011de:	f7ff fed9 	bl	8000f94 <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 80011e2:	f000 f8d7 	bl	8001394 <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 80011e6:	f000 f8d5 	bl	8001394 <BNO080_waitForSPI>
	BNO080_receivePacket();
 80011ea:	f000 f8f7 	bl	80013dc <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 80011ee:	f000 f8d1 	bl	8001394 <BNO080_waitForSPI>
	BNO080_receivePacket();
 80011f2:	f000 f8f3 	bl	80013dc <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 80011f6:	4b20      	ldr	r3, [pc, #128]	@ (8001278 <BNO080_Initialization+0xd4>)
 80011f8:	22f9      	movs	r2, #249	@ 0xf9
 80011fa:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 80011fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001278 <BNO080_Initialization+0xd4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 8001202:	2102      	movs	r1, #2
 8001204:	2002      	movs	r0, #2
 8001206:	f000 f959 	bl	80014bc <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 800120a:	f000 f8c3 	bl	8001394 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 800120e:	f000 f8e5 	bl	80013dc <BNO080_receivePacket>
 8001212:	4603      	mov	r3, r0
 8001214:	2b01      	cmp	r3, #1
 8001216:	d11b      	bne.n	8001250 <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 8001218:	4b18      	ldr	r3, [pc, #96]	@ (800127c <BNO080_Initialization+0xd8>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	4b17      	ldr	r3, [pc, #92]	@ (800127c <BNO080_Initialization+0xd8>)
 8001220:	785b      	ldrb	r3, [r3, #1]
 8001222:	461a      	mov	r2, r3
 8001224:	4b15      	ldr	r3, [pc, #84]	@ (800127c <BNO080_Initialization+0xd8>)
 8001226:	789b      	ldrb	r3, [r3, #2]
 8001228:	4618      	mov	r0, r3
 800122a:	4b14      	ldr	r3, [pc, #80]	@ (800127c <BNO080_Initialization+0xd8>)
 800122c:	78db      	ldrb	r3, [r3, #3]
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	4603      	mov	r3, r0
 8001232:	4813      	ldr	r0, [pc, #76]	@ (8001280 <BNO080_Initialization+0xdc>)
 8001234:	f004 fa8c 	bl	8005750 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8001238:	4b0f      	ldr	r3, [pc, #60]	@ (8001278 <BNO080_Initialization+0xd4>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2bf8      	cmp	r3, #248	@ 0xf8
 800123e:	d107      	bne.n	8001250 <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 8001240:	4b0d      	ldr	r3, [pc, #52]	@ (8001278 <BNO080_Initialization+0xd4>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4619      	mov	r1, r3
 8001246:	480f      	ldr	r0, [pc, #60]	@ (8001284 <BNO080_Initialization+0xe0>)
 8001248:	f004 fa82 	bl	8005750 <iprintf>
			return (0);
 800124c:	2300      	movs	r3, #0
 800124e:	e007      	b.n	8001260 <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 8001250:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <BNO080_Initialization+0xd4>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	22f8      	movs	r2, #248	@ 0xf8
 8001256:	4619      	mov	r1, r3
 8001258:	480b      	ldr	r0, [pc, #44]	@ (8001288 <BNO080_Initialization+0xe4>)
 800125a:	f004 fa79 	bl	8005750 <iprintf>
	return (1); //Something went wrong
 800125e:	2301      	movs	r3, #1
}
 8001260:	4618      	mov	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	08007ea8 	.word	0x08007ea8
 800126c:	40020400 	.word	0x40020400
 8001270:	40020000 	.word	0x40020000
 8001274:	40020800 	.word	0x40020800
 8001278:	200001f4 	.word	0x200001f4
 800127c:	200001f0 	.word	0x200001f0
 8001280:	08007ebc 	.word	0x08007ebc
 8001284:	08007ed4 	.word	0x08007ed4
 8001288:	08007ef4 	.word	0x08007ef4

0800128c <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 8001296:	bf00      	nop
 8001298:	480c      	ldr	r0, [pc, #48]	@ (80012cc <SPI2_SendByte+0x40>)
 800129a:	f7ff fe33 	bl	8000f04 <LL_SPI_IsActiveFlag_TXE>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d0f9      	beq.n	8001298 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	4619      	mov	r1, r3
 80012a8:	4808      	ldr	r0, [pc, #32]	@ (80012cc <SPI2_SendByte+0x40>)
 80012aa:	f7ff fe4c 	bl	8000f46 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 80012ae:	bf00      	nop
 80012b0:	4806      	ldr	r0, [pc, #24]	@ (80012cc <SPI2_SendByte+0x40>)
 80012b2:	f7ff fe14 	bl	8000ede <LL_SPI_IsActiveFlag_RXNE>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d0f9      	beq.n	80012b0 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 80012bc:	4803      	ldr	r0, [pc, #12]	@ (80012cc <SPI2_SendByte+0x40>)
 80012be:	f7ff fe34 	bl	8000f2a <LL_SPI_ReceiveData8>
 80012c2:	4603      	mov	r3, r0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40003800 	.word	0x40003800

080012d0 <BNO080_enableRotationVector>:
	return fixedPointValue * powf(2, qPoint * -1);
}

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 80012da:	88fb      	ldrh	r3, [r7, #6]
 80012dc:	2200      	movs	r2, #0
 80012de:	4619      	mov	r1, r3
 80012e0:	2005      	movs	r0, #5
 80012e2:	f000 f805 	bl	80012f0 <BNO080_setFeatureCommand>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
 80012fc:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 80012fe:	4b24      	ldr	r3, [pc, #144]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 8001300:	22fd      	movs	r2, #253	@ 0xfd
 8001302:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8001304:	4a22      	ldr	r2, [pc, #136]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 800130a:	4b21      	ldr	r3, [pc, #132]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 800130c:	2200      	movs	r2, #0
 800130e:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 8001310:	4b1f      	ldr	r3, [pc, #124]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 8001312:	2200      	movs	r2, #0
 8001314:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8001316:	4b1e      	ldr	r3, [pc, #120]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 8001318:	2200      	movs	r2, #0
 800131a:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	4b1b      	ldr	r3, [pc, #108]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 8001322:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	0a1b      	lsrs	r3, r3, #8
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4b19      	ldr	r3, [pc, #100]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 800132c:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	0c1b      	lsrs	r3, r3, #16
 8001332:	b2da      	uxtb	r2, r3
 8001334:	4b16      	ldr	r3, [pc, #88]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 8001336:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	0e1b      	lsrs	r3, r3, #24
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4b14      	ldr	r3, [pc, #80]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 8001340:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 8001342:	4b13      	ldr	r3, [pc, #76]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 8001344:	2200      	movs	r2, #0
 8001346:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8001348:	4b11      	ldr	r3, [pc, #68]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 800134a:	2200      	movs	r2, #0
 800134c:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 800134e:	4b10      	ldr	r3, [pc, #64]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 8001350:	2200      	movs	r2, #0
 8001352:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8001354:	4b0e      	ldr	r3, [pc, #56]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 8001356:	2200      	movs	r2, #0
 8001358:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 8001360:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	0a1b      	lsrs	r3, r3, #8
 8001366:	b2da      	uxtb	r2, r3
 8001368:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 800136a:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	0c1b      	lsrs	r3, r3, #16
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4b07      	ldr	r3, [pc, #28]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 8001374:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	0e1b      	lsrs	r3, r3, #24
 800137a:	b2da      	uxtb	r2, r3
 800137c:	4b04      	ldr	r3, [pc, #16]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 800137e:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8001380:	2111      	movs	r1, #17
 8001382:	2002      	movs	r0, #2
 8001384:	f000 f89a 	bl	80014bc <BNO080_sendPacket>
}
 8001388:	bf00      	nop
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	200001f4 	.word	0x200001f4

08001394 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 800139a:	2300      	movs	r3, #0
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	e00c      	b.n	80013ba <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 80013a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013a4:	480b      	ldr	r0, [pc, #44]	@ (80013d4 <BNO080_waitForSPI+0x40>)
 80013a6:	f7ff fde0 	bl	8000f6a <LL_GPIO_IsInputPinSet>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d101      	bne.n	80013b4 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 80013b0:	2301      	movs	r3, #1
 80013b2:	e00a      	b.n	80013ca <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3301      	adds	r3, #1
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c0:	d1ee      	bne.n	80013a0 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 80013c2:	4805      	ldr	r0, [pc, #20]	@ (80013d8 <BNO080_waitForSPI+0x44>)
 80013c4:	f004 fa2c 	bl	8005820 <puts>
	return (0);
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40020800 	.word	0x40020800
 80013d8:	08007f40 	.word	0x08007f40

080013dc <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 80013e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013e6:	4831      	ldr	r0, [pc, #196]	@ (80014ac <BNO080_receivePacket+0xd0>)
 80013e8:	f7ff fdbf 	bl	8000f6a <LL_GPIO_IsInputPinSet>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d101      	bne.n	80013f6 <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 80013f2:	2300      	movs	r3, #0
 80013f4:	e056      	b.n	80014a4 <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 80013f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013fa:	482d      	ldr	r0, [pc, #180]	@ (80014b0 <BNO080_receivePacket+0xd4>)
 80013fc:	f7ff fdd8 	bl	8000fb0 <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8001400:	2000      	movs	r0, #0
 8001402:	f7ff ff43 	bl	800128c <SPI2_SendByte>
 8001406:	4603      	mov	r3, r0
 8001408:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 800140a:	2000      	movs	r0, #0
 800140c:	f7ff ff3e 	bl	800128c <SPI2_SendByte>
 8001410:	4603      	mov	r3, r0
 8001412:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8001414:	2000      	movs	r0, #0
 8001416:	f7ff ff39 	bl	800128c <SPI2_SendByte>
 800141a:	4603      	mov	r3, r0
 800141c:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 800141e:	2000      	movs	r0, #0
 8001420:	f7ff ff34 	bl	800128c <SPI2_SendByte>
 8001424:	4603      	mov	r3, r0
 8001426:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8001428:	4a22      	ldr	r2, [pc, #136]	@ (80014b4 <BNO080_receivePacket+0xd8>)
 800142a:	7b7b      	ldrb	r3, [r7, #13]
 800142c:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 800142e:	4a21      	ldr	r2, [pc, #132]	@ (80014b4 <BNO080_receivePacket+0xd8>)
 8001430:	7b3b      	ldrb	r3, [r7, #12]
 8001432:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8001434:	4a1f      	ldr	r2, [pc, #124]	@ (80014b4 <BNO080_receivePacket+0xd8>)
 8001436:	7afb      	ldrb	r3, [r7, #11]
 8001438:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 800143a:	4a1e      	ldr	r2, [pc, #120]	@ (80014b4 <BNO080_receivePacket+0xd8>)
 800143c:	7abb      	ldrb	r3, [r7, #10]
 800143e:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8001440:	7b3b      	ldrb	r3, [r7, #12]
 8001442:	021b      	lsls	r3, r3, #8
 8001444:	b21a      	sxth	r2, r3
 8001446:	7b7b      	ldrb	r3, [r7, #13]
 8001448:	b21b      	sxth	r3, r3
 800144a:	4313      	orrs	r3, r2
 800144c:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 800144e:	893b      	ldrh	r3, [r7, #8]
 8001450:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001454:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8001456:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 800145e:	2300      	movs	r3, #0
 8001460:	e020      	b.n	80014a4 <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8001462:	893b      	ldrh	r3, [r7, #8]
 8001464:	3b04      	subs	r3, #4
 8001466:	b29b      	uxth	r3, r3
 8001468:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 800146a:	2300      	movs	r3, #0
 800146c:	81fb      	strh	r3, [r7, #14]
 800146e:	e00e      	b.n	800148e <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 8001470:	20ff      	movs	r0, #255	@ 0xff
 8001472:	f7ff ff0b 	bl	800128c <SPI2_SendByte>
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 800147a:	89fb      	ldrh	r3, [r7, #14]
 800147c:	2b7f      	cmp	r3, #127	@ 0x7f
 800147e:	d803      	bhi.n	8001488 <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001480:	89fb      	ldrh	r3, [r7, #14]
 8001482:	490d      	ldr	r1, [pc, #52]	@ (80014b8 <BNO080_receivePacket+0xdc>)
 8001484:	79fa      	ldrb	r2, [r7, #7]
 8001486:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001488:	89fb      	ldrh	r3, [r7, #14]
 800148a:	3301      	adds	r3, #1
 800148c:	81fb      	strh	r3, [r7, #14]
 800148e:	89fa      	ldrh	r2, [r7, #14]
 8001490:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001494:	429a      	cmp	r2, r3
 8001496:	dbeb      	blt.n	8001470 <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8001498:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800149c:	4804      	ldr	r0, [pc, #16]	@ (80014b0 <BNO080_receivePacket+0xd4>)
 800149e:	f7ff fd79 	bl	8000f94 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 80014a2:	2301      	movs	r3, #1
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40020800 	.word	0x40020800
 80014b0:	40020400 	.word	0x40020400
 80014b4:	200001f0 	.word	0x200001f0
 80014b8:	200001f4 	.word	0x200001f4

080014bc <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	460a      	mov	r2, r1
 80014c6:	71fb      	strb	r3, [r7, #7]
 80014c8:	4613      	mov	r3, r2
 80014ca:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 80014cc:	79bb      	ldrb	r3, [r7, #6]
 80014ce:	3304      	adds	r3, #4
 80014d0:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 80014d2:	f7ff ff5f 	bl	8001394 <BNO080_waitForSPI>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 80014dc:	2300      	movs	r3, #0
 80014de:	e032      	b.n	8001546 <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 80014e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014e4:	481a      	ldr	r0, [pc, #104]	@ (8001550 <BNO080_sendPacket+0x94>)
 80014e6:	f7ff fd63 	bl	8000fb0 <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 80014ea:	7bbb      	ldrb	r3, [r7, #14]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fecd 	bl	800128c <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 80014f2:	7bbb      	ldrb	r3, [r7, #14]
 80014f4:	121b      	asrs	r3, r3, #8
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fec7 	bl	800128c <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fec3 	bl	800128c <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	4a12      	ldr	r2, [pc, #72]	@ (8001554 <BNO080_sendPacket+0x98>)
 800150a:	5cd2      	ldrb	r2, [r2, r3]
 800150c:	1c51      	adds	r1, r2, #1
 800150e:	b2c8      	uxtb	r0, r1
 8001510:	4910      	ldr	r1, [pc, #64]	@ (8001554 <BNO080_sendPacket+0x98>)
 8001512:	54c8      	strb	r0, [r1, r3]
 8001514:	4610      	mov	r0, r2
 8001516:	f7ff feb9 	bl	800128c <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 800151a:	2300      	movs	r3, #0
 800151c:	73fb      	strb	r3, [r7, #15]
 800151e:	e008      	b.n	8001532 <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	4a0d      	ldr	r2, [pc, #52]	@ (8001558 <BNO080_sendPacket+0x9c>)
 8001524:	5cd3      	ldrb	r3, [r2, r3]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff feb0 	bl	800128c <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	3301      	adds	r3, #1
 8001530:	73fb      	strb	r3, [r7, #15]
 8001532:	7bfa      	ldrb	r2, [r7, #15]
 8001534:	79bb      	ldrb	r3, [r7, #6]
 8001536:	429a      	cmp	r2, r3
 8001538:	d3f2      	bcc.n	8001520 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 800153a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800153e:	4804      	ldr	r0, [pc, #16]	@ (8001550 <BNO080_sendPacket+0x94>)
 8001540:	f7ff fd28 	bl	8000f94 <LL_GPIO_SetOutputPin>

	return (1);
 8001544:	2301      	movs	r3, #1
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40020400 	.word	0x40020400
 8001554:	20000274 	.word	0x20000274
 8001558:	200001f4 	.word	0x200001f4

0800155c <LL_SPI_Enable>:
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	601a      	str	r2, [r3, #0]
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <LL_SPI_SetStandard>:
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f023 0210 	bic.w	r2, r3, #16
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	431a      	orrs	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	605a      	str	r2, [r3, #4]
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <LL_SPI_IsActiveFlag_RXNE>:
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d101      	bne.n	80015ba <LL_SPI_IsActiveFlag_RXNE+0x18>
 80015b6:	2301      	movs	r3, #1
 80015b8:	e000      	b.n	80015bc <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <LL_SPI_IsActiveFlag_TXE>:
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d101      	bne.n	80015e0 <LL_SPI_IsActiveFlag_TXE+0x18>
 80015dc:	2301      	movs	r3, #1
 80015de:	e000      	b.n	80015e2 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <LL_SPI_ReceiveData8>:
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	330c      	adds	r3, #12
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	b2db      	uxtb	r3, r3
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <LL_SPI_TransmitData8>:
{
 800160a:	b480      	push	{r7}
 800160c:	b085      	sub	sp, #20
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	460b      	mov	r3, r1
 8001614:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	330c      	adds	r3, #12
 800161a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	78fa      	ldrb	r2, [r7, #3]
 8001620:	701a      	strb	r2, [r3, #0]
}
 8001622:	bf00      	nop
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <LL_GPIO_SetOutputPin>:
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	619a      	str	r2, [r3, #24]
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <LL_GPIO_ResetOutputPin>:
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
 8001652:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	041a      	lsls	r2, r3, #16
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	619a      	str	r2, [r3, #24]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <LL_AHB1_GRP1_EnableClock>:
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001670:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001672:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001674:	4907      	ldr	r1, [pc, #28]	@ (8001694 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4313      	orrs	r3, r2
 800167a:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800167c:	4b05      	ldr	r3, [pc, #20]	@ (8001694 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800167e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4013      	ands	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001686:	68fb      	ldr	r3, [r7, #12]
}
 8001688:	bf00      	nop
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	40023800 	.word	0x40023800

08001698 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80016a0:	4b08      	ldr	r3, [pc, #32]	@ (80016c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80016a4:	4907      	ldr	r1, [pc, #28]	@ (80016c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80016ac:	4b05      	ldr	r3, [pc, #20]	@ (80016c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4013      	ands	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016b6:	68fb      	ldr	r3, [r7, #12]
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	40023800 	.word	0x40023800

080016c8 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b090      	sub	sp, #64	@ 0x40
 80016cc:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80016ce:	f107 0318 	add.w	r3, r7, #24
 80016d2:	2228      	movs	r2, #40	@ 0x28
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f004 f982 	bl	80059e0 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	463b      	mov	r3, r7
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
 80016e8:	611a      	str	r2, [r3, #16]
 80016ea:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80016ec:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80016f0:	f7ff ffd2 	bl	8001698 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80016f4:	2001      	movs	r0, #1
 80016f6:	f7ff ffb7 	bl	8001668 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80016fa:	2004      	movs	r0, #4
 80016fc:	f7ff ffb4 	bl	8001668 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001700:	23e0      	movs	r3, #224	@ 0xe0
 8001702:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001704:	2302      	movs	r3, #2
 8001706:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001708:	2303      	movs	r3, #3
 800170a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001710:	2300      	movs	r3, #0
 8001712:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001714:	2305      	movs	r3, #5
 8001716:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001718:	463b      	mov	r3, r7
 800171a:	4619      	mov	r1, r3
 800171c:	4825      	ldr	r0, [pc, #148]	@ (80017b4 <ICM20602_GPIO_SPI_Initialization+0xec>)
 800171e:	f002 faf2 	bl	8003d06 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001722:	2300      	movs	r3, #0
 8001724:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001726:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800172a:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800172c:	2300      	movs	r3, #0
 800172e:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001730:	2302      	movs	r3, #2
 8001732:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001734:	2301      	movs	r3, #1
 8001736:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001738:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800173c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 800173e:	2310      	movs	r3, #16
 8001740:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001742:	2300      	movs	r3, #0
 8001744:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001746:	2300      	movs	r3, #0
 8001748:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 800174a:	230a      	movs	r3, #10
 800174c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 800174e:	f107 0318 	add.w	r3, r7, #24
 8001752:	4619      	mov	r1, r3
 8001754:	4818      	ldr	r0, [pc, #96]	@ (80017b8 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001756:	f002 fcb4 	bl	80040c2 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800175a:	2100      	movs	r1, #0
 800175c:	4816      	ldr	r0, [pc, #88]	@ (80017b8 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800175e:	f7ff ff0d 	bl	800157c <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 8001762:	2110      	movs	r1, #16
 8001764:	4815      	ldr	r0, [pc, #84]	@ (80017bc <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001766:	f7ff ff70 	bl	800164a <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 800176a:	2310      	movs	r3, #16
 800176c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800176e:	2301      	movs	r3, #1
 8001770:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001772:	2303      	movs	r3, #3
 8001774:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 800177e:	463b      	mov	r3, r7
 8001780:	4619      	mov	r1, r3
 8001782:	480e      	ldr	r0, [pc, #56]	@ (80017bc <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001784:	f002 fabf 	bl	8003d06 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8001788:	2320      	movs	r3, #32
 800178a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800178c:	2300      	movs	r3, #0
 800178e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001790:	2301      	movs	r3, #1
 8001792:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8001794:	463b      	mov	r3, r7
 8001796:	4619      	mov	r1, r3
 8001798:	4808      	ldr	r0, [pc, #32]	@ (80017bc <ICM20602_GPIO_SPI_Initialization+0xf4>)
 800179a:	f002 fab4 	bl	8003d06 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 800179e:	4806      	ldr	r0, [pc, #24]	@ (80017b8 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80017a0:	f7ff fedc 	bl	800155c <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 80017a4:	2110      	movs	r1, #16
 80017a6:	4805      	ldr	r0, [pc, #20]	@ (80017bc <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80017a8:	f7ff ff41 	bl	800162e <LL_GPIO_SetOutputPin>
}
 80017ac:	bf00      	nop
 80017ae:	3740      	adds	r7, #64	@ 0x40
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40020000 	.word	0x40020000
 80017b8:	40013000 	.word	0x40013000
 80017bc:	40020800 	.word	0x40020800

080017c0 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 80017ca:	bf00      	nop
 80017cc:	480c      	ldr	r0, [pc, #48]	@ (8001800 <SPI1_SendByte+0x40>)
 80017ce:	f7ff fefb 	bl	80015c8 <LL_SPI_IsActiveFlag_TXE>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0f9      	beq.n	80017cc <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	4619      	mov	r1, r3
 80017dc:	4808      	ldr	r0, [pc, #32]	@ (8001800 <SPI1_SendByte+0x40>)
 80017de:	f7ff ff14 	bl	800160a <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 80017e2:	bf00      	nop
 80017e4:	4806      	ldr	r0, [pc, #24]	@ (8001800 <SPI1_SendByte+0x40>)
 80017e6:	f7ff fedc 	bl	80015a2 <LL_SPI_IsActiveFlag_RXNE>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0f9      	beq.n	80017e4 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 80017f0:	4803      	ldr	r0, [pc, #12]	@ (8001800 <SPI1_SendByte+0x40>)
 80017f2:	f7ff fefc 	bl	80015ee <LL_SPI_ReceiveData8>
 80017f6:	4603      	mov	r3, r0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40013000 	.word	0x40013000

08001804 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 800180e:	2110      	movs	r1, #16
 8001810:	480b      	ldr	r0, [pc, #44]	@ (8001840 <ICM20602_Readbyte+0x3c>)
 8001812:	f7ff ff1a 	bl	800164a <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800181c:	b2db      	uxtb	r3, r3
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ffce 	bl	80017c0 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001824:	2000      	movs	r0, #0
 8001826:	f7ff ffcb 	bl	80017c0 <SPI1_SendByte>
 800182a:	4603      	mov	r3, r0
 800182c:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 800182e:	2110      	movs	r1, #16
 8001830:	4803      	ldr	r0, [pc, #12]	@ (8001840 <ICM20602_Readbyte+0x3c>)
 8001832:	f7ff fefc 	bl	800162e <LL_GPIO_SetOutputPin>
	
	return val;
 8001836:	7bfb      	ldrb	r3, [r7, #15]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40020800 	.word	0x40020800

08001844 <ICM20602_Writebyte>:
	}
	CHIP_DESELECT(ICM20602);
}

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	460a      	mov	r2, r1
 800184e:	71fb      	strb	r3, [r7, #7]
 8001850:	4613      	mov	r3, r2
 8001852:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 8001854:	2110      	movs	r1, #16
 8001856:	480b      	ldr	r0, [pc, #44]	@ (8001884 <ICM20602_Writebyte+0x40>)
 8001858:	f7ff fef7 	bl	800164a <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001862:	b2db      	uxtb	r3, r3
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ffab 	bl	80017c0 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 800186a:	79bb      	ldrb	r3, [r7, #6]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ffa7 	bl	80017c0 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 8001872:	2110      	movs	r1, #16
 8001874:	4803      	ldr	r0, [pc, #12]	@ (8001884 <ICM20602_Writebyte+0x40>)
 8001876:	f7ff feda 	bl	800162e <LL_GPIO_SetOutputPin>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40020800 	.word	0x40020800

08001888 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8001892:	f107 0308 	add.w	r3, r7, #8
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 800189c:	463b      	mov	r3, r7
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 80018a4:	f7ff ff10 	bl	80016c8 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 80018a8:	4833      	ldr	r0, [pc, #204]	@ (8001978 <ICM20602_Initialization+0xf0>)
 80018aa:	f003 ff51 	bl	8005750 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 80018ae:	2075      	movs	r0, #117	@ 0x75
 80018b0:	f7ff ffa8 	bl	8001804 <ICM20602_Readbyte>
 80018b4:	4603      	mov	r3, r0
 80018b6:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	2b12      	cmp	r3, #18
 80018bc:	d105      	bne.n	80018ca <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 80018be:	7bfb      	ldrb	r3, [r7, #15]
 80018c0:	4619      	mov	r1, r3
 80018c2:	482e      	ldr	r0, [pc, #184]	@ (800197c <ICM20602_Initialization+0xf4>)
 80018c4:	f003 ff44 	bl	8005750 <iprintf>
 80018c8:	e012      	b.n	80018f0 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	2b12      	cmp	r3, #18
 80018ce:	d00f      	beq.n	80018f0 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 80018d0:	2075      	movs	r0, #117	@ 0x75
 80018d2:	f7ff ff97 	bl	8001804 <ICM20602_Readbyte>
 80018d6:	4603      	mov	r3, r0
 80018d8:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	2b12      	cmp	r3, #18
 80018de:	d007      	beq.n	80018f0 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	2212      	movs	r2, #18
 80018e4:	4619      	mov	r1, r3
 80018e6:	4826      	ldr	r0, [pc, #152]	@ (8001980 <ICM20602_Initialization+0xf8>)
 80018e8:	f003 ff32 	bl	8005750 <iprintf>
			return 1; //ERROR
 80018ec:	2301      	movs	r3, #1
 80018ee:	e03f      	b.n	8001970 <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 80018f0:	2180      	movs	r1, #128	@ 0x80
 80018f2:	206b      	movs	r0, #107	@ 0x6b
 80018f4:	f7ff ffa6 	bl	8001844 <ICM20602_Writebyte>
	HAL_Delay(50);
 80018f8:	2032      	movs	r0, #50	@ 0x32
 80018fa:	f001 fb4b 	bl	8002f94 <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 80018fe:	2101      	movs	r1, #1
 8001900:	206b      	movs	r0, #107	@ 0x6b
 8001902:	f7ff ff9f 	bl	8001844 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 8001906:	2032      	movs	r0, #50	@ 0x32
 8001908:	f001 fb44 	bl	8002f94 <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 800190c:	2138      	movs	r1, #56	@ 0x38
 800190e:	206c      	movs	r0, #108	@ 0x6c
 8001910:	f7ff ff98 	bl	8001844 <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 8001914:	2032      	movs	r0, #50	@ 0x32
 8001916:	f001 fb3d 	bl	8002f94 <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 800191a:	2100      	movs	r1, #0
 800191c:	2019      	movs	r0, #25
 800191e:	f7ff ff91 	bl	8001844 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001922:	2032      	movs	r0, #50	@ 0x32
 8001924:	f001 fb36 	bl	8002f94 <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8001928:	2105      	movs	r1, #5
 800192a:	201a      	movs	r0, #26
 800192c:	f7ff ff8a 	bl	8001844 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001930:	2032      	movs	r0, #50	@ 0x32
 8001932:	f001 fb2f 	bl	8002f94 <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8001936:	2118      	movs	r1, #24
 8001938:	201b      	movs	r0, #27
 800193a:	f7ff ff83 	bl	8001844 <ICM20602_Writebyte>
	HAL_Delay(50);
 800193e:	2032      	movs	r0, #50	@ 0x32
 8001940:	f001 fb28 	bl	8002f94 <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8001944:	2118      	movs	r1, #24
 8001946:	201c      	movs	r0, #28
 8001948:	f7ff ff7c 	bl	8001844 <ICM20602_Writebyte>
	HAL_Delay(50);
 800194c:	2032      	movs	r0, #50	@ 0x32
 800194e:	f001 fb21 	bl	8002f94 <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8001952:	2103      	movs	r1, #3
 8001954:	201d      	movs	r0, #29
 8001956:	f7ff ff75 	bl	8001844 <ICM20602_Writebyte>
	HAL_Delay(50);
 800195a:	2032      	movs	r0, #50	@ 0x32
 800195c:	f001 fb1a 	bl	8002f94 <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8001960:	2101      	movs	r1, #1
 8001962:	2038      	movs	r0, #56	@ 0x38
 8001964:	f7ff ff6e 	bl	8001844 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001968:	2032      	movs	r0, #50	@ 0x32
 800196a:	f001 fb13 	bl	8002f94 <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	08007f54 	.word	0x08007f54
 800197c:	08007f6c 	.word	0x08007f6c
 8001980:	08007f90 	.word	0x08007f90

08001984 <LL_SPI_Enable>:
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	601a      	str	r2, [r3, #0]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_SPI_SetStandard>:
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f023 0210 	bic.w	r2, r3, #16
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	431a      	orrs	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	605a      	str	r2, [r3, #4]
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <LL_SPI_IsActiveFlag_RXNE>:
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d101      	bne.n	80019e2 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <LL_SPI_IsActiveFlag_TXE>:
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d101      	bne.n	8001a08 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <LL_SPI_ReceiveData8>:
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	330c      	adds	r3, #12
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	b2db      	uxtb	r3, r3
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <LL_SPI_TransmitData8>:
{
 8001a32:	b480      	push	{r7}
 8001a34:	b085      	sub	sp, #20
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	330c      	adds	r3, #12
 8001a42:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	78fa      	ldrb	r2, [r7, #3]
 8001a48:	701a      	strb	r2, [r3, #0]
}
 8001a4a:	bf00      	nop
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <LL_GPIO_IsInputPinSet>:
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
 8001a5e:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691a      	ldr	r2, [r3, #16]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	4013      	ands	r3, r2
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	bf0c      	ite	eq
 8001a6e:	2301      	moveq	r3, #1
 8001a70:	2300      	movne	r3, #0
 8001a72:	b2db      	uxtb	r3, r3
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <LL_GPIO_SetOutputPin>:
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	619a      	str	r2, [r3, #24]
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <LL_GPIO_ResetOutputPin>:
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	041a      	lsls	r2, r3, #16
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	619a      	str	r2, [r3, #24]
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <LL_AHB1_GRP1_EnableClock>:
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001ac4:	4b08      	ldr	r3, [pc, #32]	@ (8001ae8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ac6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ac8:	4907      	ldr	r1, [pc, #28]	@ (8001ae8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001ad0:	4b05      	ldr	r3, [pc, #20]	@ (8001ae8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ad2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ada:	68fb      	ldr	r3, [r7, #12]
}
 8001adc:	bf00      	nop
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	40023800 	.word	0x40023800

08001aec <LL_APB1_GRP1_EnableClock>:
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001af4:	4b08      	ldr	r3, [pc, #32]	@ (8001b18 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001af6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001af8:	4907      	ldr	r1, [pc, #28]	@ (8001b18 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001b00:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4013      	ands	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
}
 8001b0c:	bf00      	nop
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	40023800 	.word	0x40023800

08001b1c <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b090      	sub	sp, #64	@ 0x40
 8001b20:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001b22:	f107 0318 	add.w	r3, r7, #24
 8001b26:	2228      	movs	r2, #40	@ 0x28
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f003 ff58 	bl	80059e0 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b30:	463b      	mov	r3, r7
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]
 8001b38:	609a      	str	r2, [r3, #8]
 8001b3a:	60da      	str	r2, [r3, #12]
 8001b3c:	611a      	str	r2, [r3, #16]
 8001b3e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8001b40:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001b44:	f7ff ffd2 	bl	8001aec <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001b48:	2002      	movs	r0, #2
 8001b4a:	f7ff ffb7 	bl	8001abc <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8001b4e:	2338      	movs	r3, #56	@ 0x38
 8001b50:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001b52:	2302      	movs	r3, #2
 8001b54:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001b56:	2303      	movs	r3, #3
 8001b58:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001b62:	2306      	movs	r3, #6
 8001b64:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b66:	463b      	mov	r3, r7
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4826      	ldr	r0, [pc, #152]	@ (8001c04 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001b6c:	f002 f8cb 	bl	8003d06 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001b74:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001b78:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001b82:	2301      	movs	r3, #1
 8001b84:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001b86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8001b8c:	2308      	movs	r3, #8
 8001b8e:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001b90:	2300      	movs	r3, #0
 8001b92:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001b98:	230a      	movs	r3, #10
 8001b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 8001b9c:	f107 0318 	add.w	r3, r7, #24
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4819      	ldr	r0, [pc, #100]	@ (8001c08 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8001ba4:	f002 fa8d 	bl	80040c2 <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4817      	ldr	r0, [pc, #92]	@ (8001c08 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8001bac:	f7ff fefa 	bl	80019a4 <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 8001bb0:	2140      	movs	r1, #64	@ 0x40
 8001bb2:	4814      	ldr	r0, [pc, #80]	@ (8001c04 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001bb4:	f7ff ff72 	bl	8001a9c <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 8001bb8:	2340      	movs	r3, #64	@ 0x40
 8001bba:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 8001bcc:	463b      	mov	r3, r7
 8001bce:	4619      	mov	r1, r3
 8001bd0:	480c      	ldr	r0, [pc, #48]	@ (8001c04 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001bd2:	f002 f898 	bl	8003d06 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 8001bd6:	2380      	movs	r3, #128	@ 0x80
 8001bd8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001bde:	2301      	movs	r3, #1
 8001be0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 8001be2:	463b      	mov	r3, r7
 8001be4:	4619      	mov	r1, r3
 8001be6:	4807      	ldr	r0, [pc, #28]	@ (8001c04 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001be8:	f002 f88d 	bl	8003d06 <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 8001bec:	4806      	ldr	r0, [pc, #24]	@ (8001c08 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8001bee:	f7ff fec9 	bl	8001984 <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 8001bf2:	2140      	movs	r1, #64	@ 0x40
 8001bf4:	4803      	ldr	r0, [pc, #12]	@ (8001c04 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001bf6:	f7ff ff43 	bl	8001a80 <LL_GPIO_SetOutputPin>
}
 8001bfa:	bf00      	nop
 8001bfc:	3740      	adds	r7, #64	@ 0x40
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40020400 	.word	0x40020400
 8001c08:	40003c00 	.word	0x40003c00

08001c0c <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 8001c16:	bf00      	nop
 8001c18:	480c      	ldr	r0, [pc, #48]	@ (8001c4c <SPI3_SendByte+0x40>)
 8001c1a:	f7ff fee9 	bl	80019f0 <LL_SPI_IsActiveFlag_TXE>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f9      	beq.n	8001c18 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	4619      	mov	r1, r3
 8001c28:	4808      	ldr	r0, [pc, #32]	@ (8001c4c <SPI3_SendByte+0x40>)
 8001c2a:	f7ff ff02 	bl	8001a32 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 8001c2e:	bf00      	nop
 8001c30:	4806      	ldr	r0, [pc, #24]	@ (8001c4c <SPI3_SendByte+0x40>)
 8001c32:	f7ff feca 	bl	80019ca <LL_SPI_IsActiveFlag_RXNE>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0f9      	beq.n	8001c30 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 8001c3c:	4803      	ldr	r0, [pc, #12]	@ (8001c4c <SPI3_SendByte+0x40>)
 8001c3e:	f7ff feea 	bl	8001a16 <LL_SPI_ReceiveData8>
 8001c42:	4603      	mov	r3, r0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40003c00 	.word	0x40003c00

08001c50 <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 8001c5a:	2140      	movs	r1, #64	@ 0x40
 8001c5c:	480b      	ldr	r0, [pc, #44]	@ (8001c8c <LPS22HH_Readbyte+0x3c>)
 8001c5e:	f7ff ff1d 	bl	8001a9c <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff ffce 	bl	8001c0c <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 8001c70:	2000      	movs	r0, #0
 8001c72:	f7ff ffcb 	bl	8001c0c <SPI3_SendByte>
 8001c76:	4603      	mov	r3, r0
 8001c78:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 8001c7a:	2140      	movs	r1, #64	@ 0x40
 8001c7c:	4803      	ldr	r0, [pc, #12]	@ (8001c8c <LPS22HH_Readbyte+0x3c>)
 8001c7e:	f7ff feff 	bl	8001a80 <LL_GPIO_SetOutputPin>
	
	return val;
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40020400 	.word	0x40020400

08001c90 <LPS22HH_Readbytes>:

void LPS22HH_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8001c90:	b590      	push	{r4, r7, lr}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	603a      	str	r2, [r7, #0]
 8001c9a:	71fb      	strb	r3, [r7, #7]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(LPS22HH);
 8001ca4:	2140      	movs	r1, #64	@ 0x40
 8001ca6:	4810      	ldr	r0, [pc, #64]	@ (8001ce8 <LPS22HH_Readbytes+0x58>)
 8001ca8:	f7ff fef8 	bl	8001a9c <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ffa9 	bl	8001c0c <SPI3_SendByte>
	while(i < len)
 8001cba:	e009      	b.n	8001cd0 <LPS22HH_Readbytes+0x40>
	{
		data[i++] = SPI3_SendByte(0x00); //Send DUMMY
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	1c5a      	adds	r2, r3, #1
 8001cc0:	60fa      	str	r2, [r7, #12]
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	18d4      	adds	r4, r2, r3
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	f7ff ffa0 	bl	8001c0c <SPI3_SendByte>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	7023      	strb	r3, [r4, #0]
	while(i < len)
 8001cd0:	79bb      	ldrb	r3, [r7, #6]
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d3f1      	bcc.n	8001cbc <LPS22HH_Readbytes+0x2c>
	}
	CHIP_DESELECT(LPS22HH);
 8001cd8:	2140      	movs	r1, #64	@ 0x40
 8001cda:	4803      	ldr	r0, [pc, #12]	@ (8001ce8 <LPS22HH_Readbytes+0x58>)
 8001cdc:	f7ff fed0 	bl	8001a80 <LL_GPIO_SetOutputPin>
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd90      	pop	{r4, r7, pc}
 8001ce8:	40020400 	.word	0x40020400

08001cec <LPS22HH_Writebyte>:

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	460a      	mov	r2, r1
 8001cf6:	71fb      	strb	r3, [r7, #7]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 8001cfc:	2140      	movs	r1, #64	@ 0x40
 8001cfe:	480b      	ldr	r0, [pc, #44]	@ (8001d2c <LPS22HH_Writebyte+0x40>)
 8001d00:	f7ff fecc 	bl	8001a9c <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff7d 	bl	8001c0c <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 8001d12:	79bb      	ldrb	r3, [r7, #6]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff79 	bl	8001c0c <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 8001d1a:	2140      	movs	r1, #64	@ 0x40
 8001d1c:	4803      	ldr	r0, [pc, #12]	@ (8001d2c <LPS22HH_Writebyte+0x40>)
 8001d1e:	f7ff feaf 	bl	8001a80 <LL_GPIO_SetOutputPin>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40020400 	.word	0x40020400

08001d30 <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 8001d3a:	f7ff feef 	bl	8001b1c <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 8001d3e:	4841      	ldr	r0, [pc, #260]	@ (8001e44 <LPS22HH_Initialization+0x114>)
 8001d40:	f003 fd06 	bl	8005750 <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 8001d44:	200f      	movs	r0, #15
 8001d46:	f7ff ff83 	bl	8001c50 <LPS22HH_Readbyte>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	2bb3      	cmp	r3, #179	@ 0xb3
 8001d52:	d105      	bne.n	8001d60 <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	4619      	mov	r1, r3
 8001d58:	483b      	ldr	r0, [pc, #236]	@ (8001e48 <LPS22HH_Initialization+0x118>)
 8001d5a:	f003 fcf9 	bl	8005750 <iprintf>
 8001d5e:	e012      	b.n	8001d86 <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	2bb3      	cmp	r3, #179	@ 0xb3
 8001d64:	d00f      	beq.n	8001d86 <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 8001d66:	200f      	movs	r0, #15
 8001d68:	f7ff ff72 	bl	8001c50 <LPS22HH_Readbyte>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	2bb3      	cmp	r3, #179	@ 0xb3
 8001d74:	d007      	beq.n	8001d86 <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	22b3      	movs	r2, #179	@ 0xb3
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4833      	ldr	r0, [pc, #204]	@ (8001e4c <LPS22HH_Initialization+0x11c>)
 8001d7e:	f003 fce7 	bl	8005750 <iprintf>
			return 1; //ERROR
 8001d82:	2301      	movs	r3, #1
 8001d84:	e059      	b.n	8001e3a <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 8001d86:	2104      	movs	r1, #4
 8001d88:	2011      	movs	r0, #17
 8001d8a:	f7ff ffaf 	bl	8001cec <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 8001d8e:	2011      	movs	r0, #17
 8001d90:	f7ff ff5e 	bl	8001c50 <LPS22HH_Readbyte>
 8001d94:	4603      	mov	r3, r0
 8001d96:	f003 0304 	and.w	r3, r3, #4
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f7      	bne.n	8001d8e <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001d9e:	2010      	movs	r0, #16
 8001da0:	f7ff ff56 	bl	8001c50 <LPS22HH_Readbyte>
 8001da4:	4603      	mov	r3, r0
 8001da6:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 8001da8:	79bb      	ldrb	r3, [r7, #6]
 8001daa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dae:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001db0:	79bb      	ldrb	r3, [r7, #6]
 8001db2:	4619      	mov	r1, r3
 8001db4:	2010      	movs	r0, #16
 8001db6:	f7ff ff99 	bl	8001cec <LPS22HH_Writebyte>
	temp_reg = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001dbe:	2010      	movs	r0, #16
 8001dc0:	f7ff ff46 	bl	8001c50 <LPS22HH_Readbyte>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001dc8:	2010      	movs	r0, #16
 8001dca:	f7ff ff41 	bl	8001c50 <LPS22HH_Readbyte>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 8001dd2:	79bb      	ldrb	r3, [r7, #6]
 8001dd4:	f043 030c 	orr.w	r3, r3, #12
 8001dd8:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001dda:	79bb      	ldrb	r3, [r7, #6]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	2010      	movs	r0, #16
 8001de0:	f7ff ff84 	bl	8001cec <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001de4:	2010      	movs	r0, #16
 8001de6:	f7ff ff33 	bl	8001c50 <LPS22HH_Readbyte>
 8001dea:	4603      	mov	r3, r0
 8001dec:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8001dee:	79bb      	ldrb	r3, [r7, #6]
 8001df0:	f043 0302 	orr.w	r3, r3, #2
 8001df4:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001df6:	79bb      	ldrb	r3, [r7, #6]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	2010      	movs	r0, #16
 8001dfc:	f7ff ff76 	bl	8001cec <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 8001e00:	2011      	movs	r0, #17
 8001e02:	f7ff ff25 	bl	8001c50 <LPS22HH_Readbyte>
 8001e06:	4603      	mov	r3, r0
 8001e08:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8001e0a:	79bb      	ldrb	r3, [r7, #6]
 8001e0c:	f043 0302 	orr.w	r3, r3, #2
 8001e10:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 8001e12:	79bb      	ldrb	r3, [r7, #6]
 8001e14:	4619      	mov	r1, r3
 8001e16:	2011      	movs	r0, #17
 8001e18:	f7ff ff68 	bl	8001cec <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 8001e1c:	2012      	movs	r0, #18
 8001e1e:	f7ff ff17 	bl	8001c50 <LPS22HH_Readbyte>
 8001e22:	4603      	mov	r3, r0
 8001e24:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 8001e26:	79bb      	ldrb	r3, [r7, #6]
 8001e28:	f043 0304 	orr.w	r3, r3, #4
 8001e2c:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 8001e2e:	79bb      	ldrb	r3, [r7, #6]
 8001e30:	4619      	mov	r1, r3
 8001e32:	2012      	movs	r0, #18
 8001e34:	f7ff ff5a 	bl	8001cec <LPS22HH_Writebyte>
	
	return 0; //OK
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	08007fbc 	.word	0x08007fbc
 8001e48:	08007fd0 	.word	0x08007fd0
 8001e4c:	08007ff4 	.word	0x08007ff4

08001e50 <LPS22HH_DataReady>:


int LPS22HH_DataReady(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(LPS22HH_INT_PORT, LPS22HH_INT_PIN);
 8001e54:	2180      	movs	r1, #128	@ 0x80
 8001e56:	4803      	ldr	r0, [pc, #12]	@ (8001e64 <LPS22HH_DataReady+0x14>)
 8001e58:	f7ff fdfd 	bl	8001a56 <LL_GPIO_IsInputPinSet>
 8001e5c:	4603      	mov	r3, r0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40020400 	.word	0x40020400

08001e68 <LPS22HH_GetPressure>:

void LPS22HH_GetPressure(int32_t* pressure)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(PRESSURE_OUT_XL, 3, (unsigned char*)pressure);
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	2103      	movs	r1, #3
 8001e74:	2028      	movs	r0, #40	@ 0x28
 8001e76:	f7ff ff0b 	bl	8001c90 <LPS22HH_Readbytes>
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <LPS22HH_GetTemperature>:

void LPS22HH_GetTemperature(int16_t* temperature)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(TEMP_OUT_L, 2, (unsigned char*)temperature);
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	2102      	movs	r1, #2
 8001e8e:	202b      	movs	r0, #43	@ 0x2b
 8001e90:	f7ff fefe 	bl	8001c90 <LPS22HH_Readbytes>
}
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <getAltitude2>:
{
	return (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * 44307.69396f; //145366.45f * 0.3048f = 44307.69396f;
}

float getAltitude2(float pressure, float temperature) //Get Altitude with temperature correction.
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001ea6:	edc7 0a00 	vstr	s1, [r7]
	return (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * (temperature + 273.15f) / 0.0065f;
 8001eaa:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eae:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8001ef4 <getAltitude2+0x58>
 8001eb2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001eb6:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8001ef8 <getAltitude2+0x5c>
 8001eba:	eeb0 0a47 	vmov.f32	s0, s14
 8001ebe:	f005 fc1d 	bl	80076fc <powf>
 8001ec2:	eef0 7a40 	vmov.f32	s15, s0
 8001ec6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001eca:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ece:	edd7 7a00 	vldr	s15, [r7]
 8001ed2:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8001efc <getAltitude2+0x60>
 8001ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ede:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001f00 <getAltitude2+0x64>
 8001ee2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001ee6:	eef0 7a66 	vmov.f32	s15, s13
}
 8001eea:	eeb0 0a67 	vmov.f32	s0, s15
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	447d5000 	.word	0x447d5000
 8001ef8:	3e42c9b7 	.word	0x3e42c9b7
 8001efc:	43889333 	.word	0x43889333
 8001f00:	3bd4fdf4 	.word	0x3bd4fdf4

08001f04 <LL_GPIO_ResetOutputPin>:
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	041a      	lsls	r2, r3, #16
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	619a      	str	r2, [r3, #24]
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
	...

08001f24 <LL_AHB1_GRP1_EnableClock>:
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001f2c:	4b08      	ldr	r3, [pc, #32]	@ (8001f50 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f30:	4907      	ldr	r1, [pc, #28]	@ (8001f50 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001f38:	4b05      	ldr	r3, [pc, #20]	@ (8001f50 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f42:	68fb      	ldr	r3, [r7, #12]
}
 8001f44:	bf00      	nop
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	40023800 	.word	0x40023800

08001f54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5a:	463b      	mov	r3, r7
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
 8001f68:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001f6a:	2080      	movs	r0, #128	@ 0x80
 8001f6c:	f7ff ffda 	bl	8001f24 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001f70:	2004      	movs	r0, #4
 8001f72:	f7ff ffd7 	bl	8001f24 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001f76:	2001      	movs	r0, #1
 8001f78:	f7ff ffd4 	bl	8001f24 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001f7c:	2002      	movs	r0, #2
 8001f7e:	f7ff ffd1 	bl	8001f24 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4
 8001f82:	f240 2117 	movw	r1, #535	@ 0x217
 8001f86:	482c      	ldr	r0, [pc, #176]	@ (8002038 <MX_GPIO_Init+0xe4>)
 8001f88:	f7ff ffbc 	bl	8001f04 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_6);
 8001f8c:	f44f 5182 	mov.w	r1, #4160	@ 0x1040
 8001f90:	482a      	ldr	r0, [pc, #168]	@ (800203c <MX_GPIO_Init+0xe8>)
 8001f92:	f7ff ffb7 	bl	8001f04 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8001f96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f9a:	4829      	ldr	r0, [pc, #164]	@ (8002040 <MX_GPIO_Init+0xec>)
 8001f9c:	f7ff ffb2 	bl	8001f04 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4
 8001fa0:	f240 2317 	movw	r3, #535	@ 0x217
 8001fa4:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001faa:	2300      	movs	r3, #0
 8001fac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fb6:	463b      	mov	r3, r7
 8001fb8:	4619      	mov	r1, r3
 8001fba:	481f      	ldr	r0, [pc, #124]	@ (8002038 <MX_GPIO_Init+0xe4>)
 8001fbc:	f001 fea3 	bl	8003d06 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_8;
 8001fc0:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001fc4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fce:	463b      	mov	r3, r7
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4819      	ldr	r0, [pc, #100]	@ (8002038 <MX_GPIO_Init+0xe4>)
 8001fd4:	f001 fe97 	bl	8003d06 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_6;
 8001fd8:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 8001fdc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fee:	463b      	mov	r3, r7
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4812      	ldr	r0, [pc, #72]	@ (800203c <MX_GPIO_Init+0xe8>)
 8001ff4:	f001 fe87 	bl	8003d06 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8001ff8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ffc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001ffe:	2301      	movs	r3, #1
 8002000:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002002:	2300      	movs	r3, #0
 8002004:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800200a:	2300      	movs	r3, #0
 800200c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200e:	463b      	mov	r3, r7
 8002010:	4619      	mov	r1, r3
 8002012:	480b      	ldr	r0, [pc, #44]	@ (8002040 <MX_GPIO_Init+0xec>)
 8002014:	f001 fe77 	bl	8003d06 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8002018:	2380      	movs	r3, #128	@ 0x80
 800201a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800201c:	2300      	movs	r3, #0
 800201e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002020:	2300      	movs	r3, #0
 8002022:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002024:	463b      	mov	r3, r7
 8002026:	4619      	mov	r1, r3
 8002028:	4804      	ldr	r0, [pc, #16]	@ (800203c <MX_GPIO_Init+0xe8>)
 800202a:	f001 fe6c 	bl	8003d06 <LL_GPIO_Init>

}
 800202e:	bf00      	nop
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40020800 	.word	0x40020800
 800203c:	40020400 	.word	0x40020400
 8002040:	40020000 	.word	0x40020000

08002044 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f043 0201 	orr.w	r2, r3, #1
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	601a      	str	r2, [r3, #0]
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a1a      	ldr	r2, [r3, #32]
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	431a      	orrs	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	621a      	str	r2, [r3, #32]
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
 800208e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a1a      	ldr	r2, [r3, #32]
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	43db      	mvns	r3, r3
 8002098:	401a      	ands	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	621a      	str	r2, [r3, #32]
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b089      	sub	sp, #36	@ 0x24
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	330c      	adds	r3, #12
 80020b6:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	e853 3f00 	ldrex	r3, [r3]
 80020be:	60bb      	str	r3, [r7, #8]
   return(result);
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f043 0320 	orr.w	r3, r3, #32
 80020c6:	61fb      	str	r3, [r7, #28]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	330c      	adds	r3, #12
 80020cc:	69fa      	ldr	r2, [r7, #28]
 80020ce:	61ba      	str	r2, [r7, #24]
 80020d0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020d2:	6979      	ldr	r1, [r7, #20]
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	e841 2300 	strex	r3, r2, [r1]
 80020da:	613b      	str	r3, [r7, #16]
   return(result);
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1e7      	bne.n	80020b2 <LL_USART_EnableIT_RXNE+0x8>
}
 80020e2:	bf00      	nop
 80020e4:	bf00      	nop
 80020e6:	3724      	adds	r7, #36	@ 0x24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80020fc:	78fa      	ldrb	r2, [r7, #3]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	605a      	str	r2, [r3, #4]
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
	...

08002110 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char* p, int len)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++)
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	e00d      	b.n	800213e <_write+0x2e>
	{
		LL_USART_TransmitData8(USART6, *(p+i));
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	68ba      	ldr	r2, [r7, #8]
 8002126:	4413      	add	r3, r2
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	4619      	mov	r1, r3
 800212c:	4808      	ldr	r0, [pc, #32]	@ (8002150 <_write+0x40>)
 800212e:	f7ff ffdf 	bl	80020f0 <LL_USART_TransmitData8>
		HAL_Delay(1);
 8002132:	2001      	movs	r0, #1
 8002134:	f000 ff2e 	bl	8002f94 <HAL_Delay>
	for(int i=0; i<len; i++)
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	3301      	adds	r3, #1
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	429a      	cmp	r2, r3
 8002144:	dbed      	blt.n	8002122 <_write+0x12>
	}
	return len;
 8002146:	687b      	ldr	r3, [r7, #4]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40011400 	.word	0x40011400

08002154 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int cnt =0;
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
	float f = 1.234;
 800215e:	4b49      	ldr	r3, [pc, #292]	@ (8002284 <main+0x130>)
 8002160:	613b      	str	r3, [r7, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002162:	f000 fea5 	bl	8002eb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002166:	f000 f8a1 	bl	80022ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800216a:	f7ff fef3 	bl	8001f54 <MX_GPIO_Init>
  MX_TIM3_Init();
 800216e:	f000 fcc1 	bl	8002af4 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8002172:	f000 fe13 	bl	8002d9c <MX_USART6_UART_Init>
  MX_SPI2_Init();
 8002176:	f000 f9b7 	bl	80024e8 <MX_SPI2_Init>
  MX_SPI1_Init();
 800217a:	f000 f963 	bl	8002444 <MX_SPI1_Init>
  MX_SPI3_Init();
 800217e:	f000 fa07 	bl	8002590 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM3);
 8002182:	4841      	ldr	r0, [pc, #260]	@ (8002288 <main+0x134>)
 8002184:	f7ff ff5e 	bl	8002044 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4);
 8002188:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800218c:	483e      	ldr	r0, [pc, #248]	@ (8002288 <main+0x134>)
 800218e:	f7ff ff69 	bl	8002064 <LL_TIM_CC_EnableChannel>
  TIM3->PSC = 2000; // buzzer pwm
 8002192:	4b3d      	ldr	r3, [pc, #244]	@ (8002288 <main+0x134>)
 8002194:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002198:	629a      	str	r2, [r3, #40]	@ 0x28
  //TIM3->CCR4 = TIM3->ARR/2; // PWM Width
  HAL_Delay(500);
 800219a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800219e:	f000 fef9 	bl	8002f94 <HAL_Delay>
  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80021a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80021a6:	4838      	ldr	r0, [pc, #224]	@ (8002288 <main+0x134>)
 80021a8:	f7ff ff6d 	bl	8002086 <LL_TIM_CC_DisableChannel>

  LL_USART_EnableIT_RXNE(USART6);
 80021ac:	4837      	ldr	r0, [pc, #220]	@ (800228c <main+0x138>)
 80021ae:	f7ff ff7c 	bl	80020aa <LL_USART_EnableIT_RXNE>


  BNO080_Initialization();
 80021b2:	f7fe fff7 	bl	80011a4 <BNO080_Initialization>
  BNO080_enableRotationVector(2500); // 400Hz
 80021b6:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80021ba:	f7ff f889 	bl	80012d0 <BNO080_enableRotationVector>

  ICM20602_Initialization();
 80021be:	f7ff fb63 	bl	8001888 <ICM20602_Initialization>

  LPS22HH_Initialization();
 80021c2:	f7ff fdb5 	bl	8001d30 <LPS22HH_Initialization>
//		 ICM20602.gyro_y = ICM20602.gyro_y_raw * 2000.f / 32768.f;
//		 ICM20602.gyro_z = ICM20602.gyro_z_raw * 2000.f / 32768.f;
//
//		 printf("%f %f %f \n",ICM20602.gyro_x,ICM20602.gyro_y,ICM20602.gyro_z);
//	 }
	  if(LPS22HH_DataReady() == 1)
 80021c6:	f7ff fe43 	bl	8001e50 <LPS22HH_DataReady>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d1fa      	bne.n	80021c6 <main+0x72>
	  {
		  LPS22HH_GetPressure(&LPS22HH.pressure_raw);
 80021d0:	482f      	ldr	r0, [pc, #188]	@ (8002290 <main+0x13c>)
 80021d2:	f7ff fe49 	bl	8001e68 <LPS22HH_GetPressure>
		  LPS22HH_GetTemperature(&LPS22HH.temperature_raw);
 80021d6:	482f      	ldr	r0, [pc, #188]	@ (8002294 <main+0x140>)
 80021d8:	f7ff fe53 	bl	8001e82 <LPS22HH_GetTemperature>

		  LPS22HH.baroAlt = getAltitude2(LPS22HH.pressure_raw / 4096.f, LPS22HH.temperature_raw / 100.f);
 80021dc:	4b2c      	ldr	r3, [pc, #176]	@ (8002290 <main+0x13c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	ee07 3a90 	vmov	s15, r3
 80021e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021e8:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8002298 <main+0x144>
 80021ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80021f0:	4b27      	ldr	r3, [pc, #156]	@ (8002290 <main+0x13c>)
 80021f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80021f6:	ee07 3a90 	vmov	s15, r3
 80021fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021fe:	ed9f 6a27 	vldr	s12, [pc, #156]	@ 800229c <main+0x148>
 8002202:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002206:	eef0 0a66 	vmov.f32	s1, s13
 800220a:	eeb0 0a47 	vmov.f32	s0, s14
 800220e:	f7ff fe45 	bl	8001e9c <getAltitude2>
 8002212:	eef0 7a40 	vmov.f32	s15, s0
 8002216:	4b1e      	ldr	r3, [pc, #120]	@ (8002290 <main+0x13c>)
 8002218:	edc3 7a02 	vstr	s15, [r3, #8]

		  LPS22HH.baroAltFilt = LPS22HH.baroAltFilt * X  + LPS22HH.baroAlt * (1.0f - X );
 800221c:	4b1c      	ldr	r3, [pc, #112]	@ (8002290 <main+0x13c>)
 800221e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002222:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80022a0 <main+0x14c>
 8002226:	ee27 7a87 	vmul.f32	s14, s15, s14
 800222a:	4b19      	ldr	r3, [pc, #100]	@ (8002290 <main+0x13c>)
 800222c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002230:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 80022a4 <main+0x150>
 8002234:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002238:	ee77 7a27 	vadd.f32	s15, s14, s15
 800223c:	4b14      	ldr	r3, [pc, #80]	@ (8002290 <main+0x13c>)
 800223e:	edc3 7a03 	vstr	s15, [r3, #12]

		  printf("%f\n",LPS22HH.baroAlt * 100);
 8002242:	4b13      	ldr	r3, [pc, #76]	@ (8002290 <main+0x13c>)
 8002244:	edd3 7a02 	vldr	s15, [r3, #8]
 8002248:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800229c <main+0x148>
 800224c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002250:	ee17 0a90 	vmov	r0, s15
 8002254:	f7fe f978 	bl	8000548 <__aeabi_f2d>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	4812      	ldr	r0, [pc, #72]	@ (80022a8 <main+0x154>)
 800225e:	f003 fa77 	bl	8005750 <iprintf>
		  printf("%f\n",LPS22HH.baroAltFilt * 100);
 8002262:	4b0b      	ldr	r3, [pc, #44]	@ (8002290 <main+0x13c>)
 8002264:	edd3 7a03 	vldr	s15, [r3, #12]
 8002268:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800229c <main+0x148>
 800226c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002270:	ee17 0a90 	vmov	r0, s15
 8002274:	f7fe f968 	bl	8000548 <__aeabi_f2d>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	480a      	ldr	r0, [pc, #40]	@ (80022a8 <main+0x154>)
 800227e:	f003 fa67 	bl	8005750 <iprintf>
	  if(LPS22HH_DataReady() == 1)
 8002282:	e7a0      	b.n	80021c6 <main+0x72>
 8002284:	3f9df3b6 	.word	0x3f9df3b6
 8002288:	40000400 	.word	0x40000400
 800228c:	40011400 	.word	0x40011400
 8002290:	2000027c 	.word	0x2000027c
 8002294:	20000280 	.word	0x20000280
 8002298:	45800000 	.word	0x45800000
 800229c:	42c80000 	.word	0x42c80000
 80022a0:	3f666666 	.word	0x3f666666
 80022a4:	3dccccd0 	.word	0x3dccccd0
 80022a8:	08008020 	.word	0x08008020

080022ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b094      	sub	sp, #80	@ 0x50
 80022b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022b2:	f107 0320 	add.w	r3, r7, #32
 80022b6:	2230      	movs	r2, #48	@ 0x30
 80022b8:	2100      	movs	r1, #0
 80022ba:	4618      	mov	r0, r3
 80022bc:	f003 fb90 	bl	80059e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022c0:	f107 030c 	add.w	r3, r7, #12
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022d0:	2300      	movs	r3, #0
 80022d2:	60bb      	str	r3, [r7, #8]
 80022d4:	4b28      	ldr	r3, [pc, #160]	@ (8002378 <SystemClock_Config+0xcc>)
 80022d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d8:	4a27      	ldr	r2, [pc, #156]	@ (8002378 <SystemClock_Config+0xcc>)
 80022da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022de:	6413      	str	r3, [r2, #64]	@ 0x40
 80022e0:	4b25      	ldr	r3, [pc, #148]	@ (8002378 <SystemClock_Config+0xcc>)
 80022e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022ec:	2300      	movs	r3, #0
 80022ee:	607b      	str	r3, [r7, #4]
 80022f0:	4b22      	ldr	r3, [pc, #136]	@ (800237c <SystemClock_Config+0xd0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a21      	ldr	r2, [pc, #132]	@ (800237c <SystemClock_Config+0xd0>)
 80022f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	4b1f      	ldr	r3, [pc, #124]	@ (800237c <SystemClock_Config+0xd0>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002304:	607b      	str	r3, [r7, #4]
 8002306:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002308:	2301      	movs	r3, #1
 800230a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800230c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002310:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002312:	2302      	movs	r3, #2
 8002314:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002316:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800231a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800231c:	2304      	movs	r3, #4
 800231e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002320:	23a8      	movs	r3, #168	@ 0xa8
 8002322:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002324:	2302      	movs	r3, #2
 8002326:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002328:	2304      	movs	r3, #4
 800232a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800232c:	f107 0320 	add.w	r3, r7, #32
 8002330:	4618      	mov	r0, r3
 8002332:	f000 ff39 	bl	80031a8 <HAL_RCC_OscConfig>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800233c:	f000 f820 	bl	8002380 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002340:	230f      	movs	r3, #15
 8002342:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002344:	2302      	movs	r3, #2
 8002346:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800234c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002350:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002352:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002356:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002358:	f107 030c 	add.w	r3, r7, #12
 800235c:	2105      	movs	r1, #5
 800235e:	4618      	mov	r0, r3
 8002360:	f001 f99a 	bl	8003698 <HAL_RCC_ClockConfig>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800236a:	f000 f809 	bl	8002380 <Error_Handler>
  }
}
 800236e:	bf00      	nop
 8002370:	3750      	adds	r7, #80	@ 0x50
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40023800 	.word	0x40023800
 800237c:	40007000 	.word	0x40007000

08002380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002384:	b672      	cpsid	i
}
 8002386:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002388:	bf00      	nop
 800238a:	e7fd      	b.n	8002388 <Error_Handler+0x8>

0800238c <LL_SPI_SetStandard>:
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f023 0210 	bic.w	r2, r3, #16
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	605a      	str	r2, [r3, #4]
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
	...

080023b4 <LL_AHB1_GRP1_EnableClock>:
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80023bc:	4b08      	ldr	r3, [pc, #32]	@ (80023e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80023be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023c0:	4907      	ldr	r1, [pc, #28]	@ (80023e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80023c8:	4b05      	ldr	r3, [pc, #20]	@ (80023e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80023ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4013      	ands	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023d2:	68fb      	ldr	r3, [r7, #12]
}
 80023d4:	bf00      	nop
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	40023800 	.word	0x40023800

080023e4 <LL_APB1_GRP1_EnableClock>:
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80023ec:	4b08      	ldr	r3, [pc, #32]	@ (8002410 <LL_APB1_GRP1_EnableClock+0x2c>)
 80023ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023f0:	4907      	ldr	r1, [pc, #28]	@ (8002410 <LL_APB1_GRP1_EnableClock+0x2c>)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80023f8:	4b05      	ldr	r3, [pc, #20]	@ (8002410 <LL_APB1_GRP1_EnableClock+0x2c>)
 80023fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4013      	ands	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002402:	68fb      	ldr	r3, [r7, #12]
}
 8002404:	bf00      	nop
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	40023800 	.word	0x40023800

08002414 <LL_APB2_GRP1_EnableClock>:
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800241c:	4b08      	ldr	r3, [pc, #32]	@ (8002440 <LL_APB2_GRP1_EnableClock+0x2c>)
 800241e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002420:	4907      	ldr	r1, [pc, #28]	@ (8002440 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4313      	orrs	r3, r2
 8002426:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002428:	4b05      	ldr	r3, [pc, #20]	@ (8002440 <LL_APB2_GRP1_EnableClock+0x2c>)
 800242a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4013      	ands	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002432:	68fb      	ldr	r3, [r7, #12]
}
 8002434:	bf00      	nop
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	40023800 	.word	0x40023800

08002444 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b090      	sub	sp, #64	@ 0x40
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800244a:	f107 0318 	add.w	r3, r7, #24
 800244e:	2228      	movs	r2, #40	@ 0x28
 8002450:	2100      	movs	r1, #0
 8002452:	4618      	mov	r0, r3
 8002454:	f003 fac4 	bl	80059e0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002458:	463b      	mov	r3, r7
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	605a      	str	r2, [r3, #4]
 8002460:	609a      	str	r2, [r3, #8]
 8002462:	60da      	str	r2, [r3, #12]
 8002464:	611a      	str	r2, [r3, #16]
 8002466:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002468:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800246c:	f7ff ffd2 	bl	8002414 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002470:	2001      	movs	r0, #1
 8002472:	f7ff ff9f 	bl	80023b4 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002476:	23e0      	movs	r3, #224	@ 0xe0
 8002478:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800247a:	2302      	movs	r3, #2
 800247c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800247e:	2303      	movs	r3, #3
 8002480:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002486:	2300      	movs	r3, #0
 8002488:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800248a:	2305      	movs	r3, #5
 800248c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248e:	463b      	mov	r3, r7
 8002490:	4619      	mov	r1, r3
 8002492:	4813      	ldr	r0, [pc, #76]	@ (80024e0 <MX_SPI1_Init+0x9c>)
 8002494:	f001 fc37 	bl	8003d06 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002498:	2300      	movs	r3, #0
 800249a:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800249c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80024a0:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80024a2:	2300      	movs	r3, #0
 80024a4:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80024a6:	2302      	movs	r3, #2
 80024a8:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80024aa:	2301      	movs	r3, #1
 80024ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80024ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 80024b4:	2310      	movs	r3, #16
 80024b6:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80024b8:	2300      	movs	r3, #0
 80024ba:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80024bc:	2300      	movs	r3, #0
 80024be:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 80024c0:	230a      	movs	r3, #10
 80024c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80024c4:	f107 0318 	add.w	r3, r7, #24
 80024c8:	4619      	mov	r1, r3
 80024ca:	4806      	ldr	r0, [pc, #24]	@ (80024e4 <MX_SPI1_Init+0xa0>)
 80024cc:	f001 fdf9 	bl	80040c2 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 80024d0:	2100      	movs	r1, #0
 80024d2:	4804      	ldr	r0, [pc, #16]	@ (80024e4 <MX_SPI1_Init+0xa0>)
 80024d4:	f7ff ff5a 	bl	800238c <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024d8:	bf00      	nop
 80024da:	3740      	adds	r7, #64	@ 0x40
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40020000 	.word	0x40020000
 80024e4:	40013000 	.word	0x40013000

080024e8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b090      	sub	sp, #64	@ 0x40
 80024ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80024ee:	f107 0318 	add.w	r3, r7, #24
 80024f2:	2228      	movs	r2, #40	@ 0x28
 80024f4:	2100      	movs	r1, #0
 80024f6:	4618      	mov	r0, r3
 80024f8:	f003 fa72 	bl	80059e0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fc:	463b      	mov	r3, r7
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	605a      	str	r2, [r3, #4]
 8002504:	609a      	str	r2, [r3, #8]
 8002506:	60da      	str	r2, [r3, #12]
 8002508:	611a      	str	r2, [r3, #16]
 800250a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 800250c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002510:	f7ff ff68 	bl	80023e4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002514:	2002      	movs	r0, #2
 8002516:	f7ff ff4d 	bl	80023b4 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800251a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800251e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002520:	2302      	movs	r3, #2
 8002522:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002524:	2303      	movs	r3, #3
 8002526:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002528:	2300      	movs	r3, #0
 800252a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800252c:	2300      	movs	r3, #0
 800252e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002530:	2305      	movs	r3, #5
 8002532:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002534:	463b      	mov	r3, r7
 8002536:	4619      	mov	r1, r3
 8002538:	4813      	ldr	r0, [pc, #76]	@ (8002588 <MX_SPI2_Init+0xa0>)
 800253a:	f001 fbe4 	bl	8003d06 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800253e:	2300      	movs	r3, #0
 8002540:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002542:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002546:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002548:	2300      	movs	r3, #0
 800254a:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800254c:	2302      	movs	r3, #2
 800254e:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002550:	2301      	movs	r3, #1
 8002552:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002554:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002558:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800255a:	2318      	movs	r3, #24
 800255c:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800255e:	2300      	movs	r3, #0
 8002560:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002562:	2300      	movs	r3, #0
 8002564:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8002566:	230a      	movs	r3, #10
 8002568:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 800256a:	f107 0318 	add.w	r3, r7, #24
 800256e:	4619      	mov	r1, r3
 8002570:	4806      	ldr	r0, [pc, #24]	@ (800258c <MX_SPI2_Init+0xa4>)
 8002572:	f001 fda6 	bl	80040c2 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8002576:	2100      	movs	r1, #0
 8002578:	4804      	ldr	r0, [pc, #16]	@ (800258c <MX_SPI2_Init+0xa4>)
 800257a:	f7ff ff07 	bl	800238c <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800257e:	bf00      	nop
 8002580:	3740      	adds	r7, #64	@ 0x40
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40020400 	.word	0x40020400
 800258c:	40003800 	.word	0x40003800

08002590 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b090      	sub	sp, #64	@ 0x40
 8002594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002596:	f107 0318 	add.w	r3, r7, #24
 800259a:	2228      	movs	r2, #40	@ 0x28
 800259c:	2100      	movs	r1, #0
 800259e:	4618      	mov	r0, r3
 80025a0:	f003 fa1e 	bl	80059e0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a4:	463b      	mov	r3, r7
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	605a      	str	r2, [r3, #4]
 80025ac:	609a      	str	r2, [r3, #8]
 80025ae:	60da      	str	r2, [r3, #12]
 80025b0:	611a      	str	r2, [r3, #16]
 80025b2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80025b4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80025b8:	f7ff ff14 	bl	80023e4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80025bc:	2002      	movs	r0, #2
 80025be:	f7ff fef9 	bl	80023b4 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 80025c2:	2338      	movs	r3, #56	@ 0x38
 80025c4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80025c6:	2302      	movs	r3, #2
 80025c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80025ca:	2303      	movs	r3, #3
 80025cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80025d6:	2306      	movs	r3, #6
 80025d8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025da:	463b      	mov	r3, r7
 80025dc:	4619      	mov	r1, r3
 80025de:	4813      	ldr	r0, [pc, #76]	@ (800262c <MX_SPI3_Init+0x9c>)
 80025e0:	f001 fb91 	bl	8003d06 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80025e4:	2300      	movs	r3, #0
 80025e6:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80025e8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80025ec:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80025ee:	2300      	movs	r3, #0
 80025f0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80025f2:	2302      	movs	r3, #2
 80025f4:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80025f6:	2301      	movs	r3, #1
 80025f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80025fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8002600:	2308      	movs	r3, #8
 8002602:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002604:	2300      	movs	r3, #0
 8002606:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002608:	2300      	movs	r3, #0
 800260a:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 800260c:	230a      	movs	r3, #10
 800260e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8002610:	f107 0318 	add.w	r3, r7, #24
 8002614:	4619      	mov	r1, r3
 8002616:	4806      	ldr	r0, [pc, #24]	@ (8002630 <MX_SPI3_Init+0xa0>)
 8002618:	f001 fd53 	bl	80040c2 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 800261c:	2100      	movs	r1, #0
 800261e:	4804      	ldr	r0, [pc, #16]	@ (8002630 <MX_SPI3_Init+0xa0>)
 8002620:	f7ff feb4 	bl	800238c <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002624:	bf00      	nop
 8002626:	3740      	adds	r7, #64	@ 0x40
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40020400 	.word	0x40020400
 8002630:	40003c00 	.word	0x40003c00

08002634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	607b      	str	r3, [r7, #4]
 800263e:	4b10      	ldr	r3, [pc, #64]	@ (8002680 <HAL_MspInit+0x4c>)
 8002640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002642:	4a0f      	ldr	r2, [pc, #60]	@ (8002680 <HAL_MspInit+0x4c>)
 8002644:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002648:	6453      	str	r3, [r2, #68]	@ 0x44
 800264a:	4b0d      	ldr	r3, [pc, #52]	@ (8002680 <HAL_MspInit+0x4c>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800264e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002652:	607b      	str	r3, [r7, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	603b      	str	r3, [r7, #0]
 800265a:	4b09      	ldr	r3, [pc, #36]	@ (8002680 <HAL_MspInit+0x4c>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265e:	4a08      	ldr	r2, [pc, #32]	@ (8002680 <HAL_MspInit+0x4c>)
 8002660:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002664:	6413      	str	r3, [r2, #64]	@ 0x40
 8002666:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <HAL_MspInit+0x4c>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800266e:	603b      	str	r3, [r7, #0]
 8002670:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	40023800 	.word	0x40023800

08002684 <LL_USART_IsActiveFlag_RXNE>:
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0320 	and.w	r3, r3, #32
 8002694:	2b20      	cmp	r3, #32
 8002696:	bf0c      	ite	eq
 8002698:	2301      	moveq	r3, #1
 800269a:	2300      	movne	r3, #0
 800269c:	b2db      	uxtb	r3, r3
}
 800269e:	4618      	mov	r0, r3
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <LL_USART_ClearFlag_RXNE>:
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f06f 0220 	mvn.w	r2, #32
 80026b8:	601a      	str	r2, [r3, #0]
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <LL_USART_ReceiveData8>:
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	b2db      	uxtb	r3, r3
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026e4:	bf00      	nop
 80026e6:	e7fd      	b.n	80026e4 <NMI_Handler+0x4>

080026e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026ec:	bf00      	nop
 80026ee:	e7fd      	b.n	80026ec <HardFault_Handler+0x4>

080026f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026f4:	bf00      	nop
 80026f6:	e7fd      	b.n	80026f4 <MemManage_Handler+0x4>

080026f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026fc:	bf00      	nop
 80026fe:	e7fd      	b.n	80026fc <BusFault_Handler+0x4>

08002700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002704:	bf00      	nop
 8002706:	e7fd      	b.n	8002704 <UsageFault_Handler+0x4>

08002708 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002716:	b480      	push	{r7}
 8002718:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800271a:	bf00      	nop
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002736:	f000 fc0d 	bl	8002f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6))
 8002744:	480a      	ldr	r0, [pc, #40]	@ (8002770 <USART6_IRQHandler+0x30>)
 8002746:	f7ff ff9d 	bl	8002684 <LL_USART_IsActiveFlag_RXNE>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00c      	beq.n	800276a <USART6_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART6);
 8002750:	4807      	ldr	r0, [pc, #28]	@ (8002770 <USART6_IRQHandler+0x30>)
 8002752:	f7ff ffaa 	bl	80026aa <LL_USART_ClearFlag_RXNE>
		uart6_rx_data = LL_USART_ReceiveData8(USART6);
 8002756:	4806      	ldr	r0, [pc, #24]	@ (8002770 <USART6_IRQHandler+0x30>)
 8002758:	f7ff ffb5 	bl	80026c6 <LL_USART_ReceiveData8>
 800275c:	4603      	mov	r3, r0
 800275e:	461a      	mov	r2, r3
 8002760:	4b04      	ldr	r3, [pc, #16]	@ (8002774 <USART6_IRQHandler+0x34>)
 8002762:	701a      	strb	r2, [r3, #0]
		uart6_rx_flag = 1;
 8002764:	4b04      	ldr	r3, [pc, #16]	@ (8002778 <USART6_IRQHandler+0x38>)
 8002766:	2201      	movs	r2, #1
 8002768:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40011400 	.word	0x40011400
 8002774:	2000028d 	.word	0x2000028d
 8002778:	2000028c 	.word	0x2000028c

0800277c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  return 1;
 8002780:	2301      	movs	r3, #1
}
 8002782:	4618      	mov	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <_kill>:

int _kill(int pid, int sig)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002796:	f003 f975 	bl	8005a84 <__errno>
 800279a:	4603      	mov	r3, r0
 800279c:	2216      	movs	r2, #22
 800279e:	601a      	str	r2, [r3, #0]
  return -1;
 80027a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <_exit>:

void _exit (int status)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027b4:	f04f 31ff 	mov.w	r1, #4294967295
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7ff ffe7 	bl	800278c <_kill>
  while (1) {}    /* Make sure we hang here */
 80027be:	bf00      	nop
 80027c0:	e7fd      	b.n	80027be <_exit+0x12>

080027c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b086      	sub	sp, #24
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	60f8      	str	r0, [r7, #12]
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	e00a      	b.n	80027ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027d4:	f3af 8000 	nop.w
 80027d8:	4601      	mov	r1, r0
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	1c5a      	adds	r2, r3, #1
 80027de:	60ba      	str	r2, [r7, #8]
 80027e0:	b2ca      	uxtb	r2, r1
 80027e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	3301      	adds	r3, #1
 80027e8:	617b      	str	r3, [r7, #20]
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	dbf0      	blt.n	80027d4 <_read+0x12>
  }

  return len;
 80027f2:	687b      	ldr	r3, [r7, #4]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3718      	adds	r7, #24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <_close>:
  }
  return len;
}

int _close(int file)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002804:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002808:	4618      	mov	r0, r3
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002824:	605a      	str	r2, [r3, #4]
  return 0;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <_isatty>:

int _isatty(int file)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800283c:	2301      	movs	r3, #1
}
 800283e:	4618      	mov	r0, r3
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800284a:	b480      	push	{r7}
 800284c:	b085      	sub	sp, #20
 800284e:	af00      	add	r7, sp, #0
 8002850:	60f8      	str	r0, [r7, #12]
 8002852:	60b9      	str	r1, [r7, #8]
 8002854:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800286c:	4a14      	ldr	r2, [pc, #80]	@ (80028c0 <_sbrk+0x5c>)
 800286e:	4b15      	ldr	r3, [pc, #84]	@ (80028c4 <_sbrk+0x60>)
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002878:	4b13      	ldr	r3, [pc, #76]	@ (80028c8 <_sbrk+0x64>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d102      	bne.n	8002886 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002880:	4b11      	ldr	r3, [pc, #68]	@ (80028c8 <_sbrk+0x64>)
 8002882:	4a12      	ldr	r2, [pc, #72]	@ (80028cc <_sbrk+0x68>)
 8002884:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002886:	4b10      	ldr	r3, [pc, #64]	@ (80028c8 <_sbrk+0x64>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4413      	add	r3, r2
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	429a      	cmp	r2, r3
 8002892:	d207      	bcs.n	80028a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002894:	f003 f8f6 	bl	8005a84 <__errno>
 8002898:	4603      	mov	r3, r0
 800289a:	220c      	movs	r2, #12
 800289c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800289e:	f04f 33ff 	mov.w	r3, #4294967295
 80028a2:	e009      	b.n	80028b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028a4:	4b08      	ldr	r3, [pc, #32]	@ (80028c8 <_sbrk+0x64>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028aa:	4b07      	ldr	r3, [pc, #28]	@ (80028c8 <_sbrk+0x64>)
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4413      	add	r3, r2
 80028b2:	4a05      	ldr	r2, [pc, #20]	@ (80028c8 <_sbrk+0x64>)
 80028b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028b6:	68fb      	ldr	r3, [r7, #12]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	20020000 	.word	0x20020000
 80028c4:	00000400 	.word	0x00000400
 80028c8:	20000290 	.word	0x20000290
 80028cc:	200003e8 	.word	0x200003e8

080028d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028d4:	4b06      	ldr	r3, [pc, #24]	@ (80028f0 <SystemInit+0x20>)
 80028d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028da:	4a05      	ldr	r2, [pc, #20]	@ (80028f0 <SystemInit+0x20>)
 80028dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <LL_TIM_EnableARRPreload>:
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	601a      	str	r2, [r3, #0]
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <LL_TIM_OC_EnableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d01c      	beq.n	800295e <LL_TIM_OC_EnableFast+0x4a>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	2b04      	cmp	r3, #4
 8002928:	d017      	beq.n	800295a <LL_TIM_OC_EnableFast+0x46>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	2b10      	cmp	r3, #16
 800292e:	d012      	beq.n	8002956 <LL_TIM_OC_EnableFast+0x42>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	2b40      	cmp	r3, #64	@ 0x40
 8002934:	d00d      	beq.n	8002952 <LL_TIM_OC_EnableFast+0x3e>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800293c:	d007      	beq.n	800294e <LL_TIM_OC_EnableFast+0x3a>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002944:	d101      	bne.n	800294a <LL_TIM_OC_EnableFast+0x36>
 8002946:	2305      	movs	r3, #5
 8002948:	e00a      	b.n	8002960 <LL_TIM_OC_EnableFast+0x4c>
 800294a:	2306      	movs	r3, #6
 800294c:	e008      	b.n	8002960 <LL_TIM_OC_EnableFast+0x4c>
 800294e:	2304      	movs	r3, #4
 8002950:	e006      	b.n	8002960 <LL_TIM_OC_EnableFast+0x4c>
 8002952:	2303      	movs	r3, #3
 8002954:	e004      	b.n	8002960 <LL_TIM_OC_EnableFast+0x4c>
 8002956:	2302      	movs	r3, #2
 8002958:	e002      	b.n	8002960 <LL_TIM_OC_EnableFast+0x4c>
 800295a:	2301      	movs	r3, #1
 800295c:	e000      	b.n	8002960 <LL_TIM_OC_EnableFast+0x4c>
 800295e:	2300      	movs	r3, #0
 8002960:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3318      	adds	r3, #24
 8002966:	4619      	mov	r1, r3
 8002968:	7bfb      	ldrb	r3, [r7, #15]
 800296a:	4a0a      	ldr	r2, [pc, #40]	@ (8002994 <LL_TIM_OC_EnableFast+0x80>)
 800296c:	5cd3      	ldrb	r3, [r2, r3]
 800296e:	440b      	add	r3, r1
 8002970:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	7bfb      	ldrb	r3, [r7, #15]
 8002978:	4907      	ldr	r1, [pc, #28]	@ (8002998 <LL_TIM_OC_EnableFast+0x84>)
 800297a:	5ccb      	ldrb	r3, [r1, r3]
 800297c:	4619      	mov	r1, r3
 800297e:	2304      	movs	r3, #4
 8002980:	408b      	lsls	r3, r1
 8002982:	431a      	orrs	r2, r3
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	601a      	str	r2, [r3, #0]

}
 8002988:	bf00      	nop
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	0800803c 	.word	0x0800803c
 8002998:	08008044 	.word	0x08008044

0800299c <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d01c      	beq.n	80029e6 <LL_TIM_OC_EnablePreload+0x4a>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d017      	beq.n	80029e2 <LL_TIM_OC_EnablePreload+0x46>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	2b10      	cmp	r3, #16
 80029b6:	d012      	beq.n	80029de <LL_TIM_OC_EnablePreload+0x42>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	2b40      	cmp	r3, #64	@ 0x40
 80029bc:	d00d      	beq.n	80029da <LL_TIM_OC_EnablePreload+0x3e>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029c4:	d007      	beq.n	80029d6 <LL_TIM_OC_EnablePreload+0x3a>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029cc:	d101      	bne.n	80029d2 <LL_TIM_OC_EnablePreload+0x36>
 80029ce:	2305      	movs	r3, #5
 80029d0:	e00a      	b.n	80029e8 <LL_TIM_OC_EnablePreload+0x4c>
 80029d2:	2306      	movs	r3, #6
 80029d4:	e008      	b.n	80029e8 <LL_TIM_OC_EnablePreload+0x4c>
 80029d6:	2304      	movs	r3, #4
 80029d8:	e006      	b.n	80029e8 <LL_TIM_OC_EnablePreload+0x4c>
 80029da:	2303      	movs	r3, #3
 80029dc:	e004      	b.n	80029e8 <LL_TIM_OC_EnablePreload+0x4c>
 80029de:	2302      	movs	r3, #2
 80029e0:	e002      	b.n	80029e8 <LL_TIM_OC_EnablePreload+0x4c>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <LL_TIM_OC_EnablePreload+0x4c>
 80029e6:	2300      	movs	r3, #0
 80029e8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	3318      	adds	r3, #24
 80029ee:	4619      	mov	r1, r3
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
 80029f2:	4a0a      	ldr	r2, [pc, #40]	@ (8002a1c <LL_TIM_OC_EnablePreload+0x80>)
 80029f4:	5cd3      	ldrb	r3, [r2, r3]
 80029f6:	440b      	add	r3, r1
 80029f8:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	7bfb      	ldrb	r3, [r7, #15]
 8002a00:	4907      	ldr	r1, [pc, #28]	@ (8002a20 <LL_TIM_OC_EnablePreload+0x84>)
 8002a02:	5ccb      	ldrb	r3, [r1, r3]
 8002a04:	4619      	mov	r1, r3
 8002a06:	2308      	movs	r3, #8
 8002a08:	408b      	lsls	r3, r1
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	601a      	str	r2, [r3, #0]
}
 8002a10:	bf00      	nop
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	0800803c 	.word	0x0800803c
 8002a20:	08008044 	.word	0x08008044

08002a24 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a36:	f023 0307 	bic.w	r3, r3, #7
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	609a      	str	r2, [r3, #8]
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	605a      	str	r2, [r3, #4]
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	609a      	str	r2, [r3, #8]
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <LL_AHB1_GRP1_EnableClock>:
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002a9c:	4b08      	ldr	r3, [pc, #32]	@ (8002ac0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002a9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002aa0:	4907      	ldr	r1, [pc, #28]	@ (8002ac0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002aa8:	4b05      	ldr	r3, [pc, #20]	@ (8002ac0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002aaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
}
 8002ab4:	bf00      	nop
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	40023800 	.word	0x40023800

08002ac4 <LL_APB1_GRP1_EnableClock>:
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002acc:	4b08      	ldr	r3, [pc, #32]	@ (8002af0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002ace:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ad0:	4907      	ldr	r1, [pc, #28]	@ (8002af0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002ad8:	4b05      	ldr	r3, [pc, #20]	@ (8002af0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002ada:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
}
 8002ae4:	bf00      	nop
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	40023800 	.word	0x40023800

08002af4 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b094      	sub	sp, #80	@ 0x50
 8002af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002afa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	605a      	str	r2, [r3, #4]
 8002b04:	609a      	str	r2, [r3, #8]
 8002b06:	60da      	str	r2, [r3, #12]
 8002b08:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002b0a:	f107 031c 	add.w	r3, r7, #28
 8002b0e:	2220      	movs	r2, #32
 8002b10:	2100      	movs	r1, #0
 8002b12:	4618      	mov	r0, r3
 8002b14:	f002 ff64 	bl	80059e0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b18:	1d3b      	adds	r3, r7, #4
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	605a      	str	r2, [r3, #4]
 8002b20:	609a      	str	r2, [r3, #8]
 8002b22:	60da      	str	r2, [r3, #12]
 8002b24:	611a      	str	r2, [r3, #16]
 8002b26:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002b28:	2002      	movs	r0, #2
 8002b2a:	f7ff ffcb 	bl	8002ac4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 1000-LL_TIM_IC_FILTER_FDIV1_N2;
 8002b2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b32:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002b34:	2300      	movs	r3, #0
 8002b36:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 21-LL_TIM_IC_FILTER_FDIV1_N2;
 8002b38:	4b25      	ldr	r3, [pc, #148]	@ (8002bd0 <MX_TIM3_Init+0xdc>)
 8002b3a:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002b40:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002b44:	4619      	mov	r1, r3
 8002b46:	4823      	ldr	r0, [pc, #140]	@ (8002bd4 <MX_TIM3_Init+0xe0>)
 8002b48:	f001 fb80 	bl	800424c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8002b4c:	4821      	ldr	r0, [pc, #132]	@ (8002bd4 <MX_TIM3_Init+0xe0>)
 8002b4e:	f7ff fed1 	bl	80028f4 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002b52:	2100      	movs	r1, #0
 8002b54:	481f      	ldr	r0, [pc, #124]	@ (8002bd4 <MX_TIM3_Init+0xe0>)
 8002b56:	f7ff ff65 	bl	8002a24 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8002b5a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002b5e:	481d      	ldr	r0, [pc, #116]	@ (8002bd4 <MX_TIM3_Init+0xe0>)
 8002b60:	f7ff ff1c 	bl	800299c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002b64:	2360      	movs	r3, #96	@ 0x60
 8002b66:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 8002b70:	230a      	movs	r3, #10
 8002b72:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002b74:	2300      	movs	r3, #0
 8002b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8002b78:	f107 031c 	add.w	r3, r7, #28
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002b82:	4814      	ldr	r0, [pc, #80]	@ (8002bd4 <MX_TIM3_Init+0xe0>)
 8002b84:	f001 fbfc 	bl	8004380 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8002b88:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002b8c:	4811      	ldr	r0, [pc, #68]	@ (8002bd4 <MX_TIM3_Init+0xe0>)
 8002b8e:	f7ff fec1 	bl	8002914 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002b92:	2100      	movs	r1, #0
 8002b94:	480f      	ldr	r0, [pc, #60]	@ (8002bd4 <MX_TIM3_Init+0xe0>)
 8002b96:	f7ff ff5a 	bl	8002a4e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002b9a:	480e      	ldr	r0, [pc, #56]	@ (8002bd4 <MX_TIM3_Init+0xe0>)
 8002b9c:	f7ff ff6a 	bl	8002a74 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002ba0:	2002      	movs	r0, #2
 8002ba2:	f7ff ff77 	bl	8002a94 <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002baa:	2302      	movs	r3, #2
 8002bac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bbe:	1d3b      	adds	r3, r7, #4
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4805      	ldr	r0, [pc, #20]	@ (8002bd8 <MX_TIM3_Init+0xe4>)
 8002bc4:	f001 f89f 	bl	8003d06 <LL_GPIO_Init>

}
 8002bc8:	bf00      	nop
 8002bca:	3750      	adds	r7, #80	@ 0x50
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	fff00015 	.word	0xfff00015
 8002bd4:	40000400 	.word	0x40000400
 8002bd8:	40020400 	.word	0x40020400

08002bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002be0:	4b04      	ldr	r3, [pc, #16]	@ (8002bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	0a1b      	lsrs	r3, r3, #8
 8002be6:	f003 0307 	and.w	r3, r3, #7
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	db0b      	blt.n	8002c22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	f003 021f 	and.w	r2, r3, #31
 8002c10:	4907      	ldr	r1, [pc, #28]	@ (8002c30 <__NVIC_EnableIRQ+0x38>)
 8002c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c16:	095b      	lsrs	r3, r3, #5
 8002c18:	2001      	movs	r0, #1
 8002c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	e000e100 	.word	0xe000e100

08002c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	6039      	str	r1, [r7, #0]
 8002c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	db0a      	blt.n	8002c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	490c      	ldr	r1, [pc, #48]	@ (8002c80 <__NVIC_SetPriority+0x4c>)
 8002c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c52:	0112      	lsls	r2, r2, #4
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	440b      	add	r3, r1
 8002c58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c5c:	e00a      	b.n	8002c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	4908      	ldr	r1, [pc, #32]	@ (8002c84 <__NVIC_SetPriority+0x50>)
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	3b04      	subs	r3, #4
 8002c6c:	0112      	lsls	r2, r2, #4
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	440b      	add	r3, r1
 8002c72:	761a      	strb	r2, [r3, #24]
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	e000e100 	.word	0xe000e100
 8002c84:	e000ed00 	.word	0xe000ed00

08002c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b089      	sub	sp, #36	@ 0x24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f1c3 0307 	rsb	r3, r3, #7
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	bf28      	it	cs
 8002ca6:	2304      	movcs	r3, #4
 8002ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	3304      	adds	r3, #4
 8002cae:	2b06      	cmp	r3, #6
 8002cb0:	d902      	bls.n	8002cb8 <NVIC_EncodePriority+0x30>
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	3b03      	subs	r3, #3
 8002cb6:	e000      	b.n	8002cba <NVIC_EncodePriority+0x32>
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43da      	mvns	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	401a      	ands	r2, r3
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cda:	43d9      	mvns	r1, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce0:	4313      	orrs	r3, r2
         );
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3724      	adds	r7, #36	@ 0x24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <LL_USART_Enable>:
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	60da      	str	r2, [r3, #12]
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <LL_USART_ConfigAsyncMode>:
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	615a      	str	r2, [r3, #20]
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
	...

08002d3c <LL_AHB1_GRP1_EnableClock>:
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002d44:	4b08      	ldr	r3, [pc, #32]	@ (8002d68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002d46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d48:	4907      	ldr	r1, [pc, #28]	@ (8002d68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002d50:	4b05      	ldr	r3, [pc, #20]	@ (8002d68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002d52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4013      	ands	r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
}
 8002d5c:	bf00      	nop
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	40023800 	.word	0x40023800

08002d6c <LL_APB2_GRP1_EnableClock>:
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002d74:	4b08      	ldr	r3, [pc, #32]	@ (8002d98 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002d76:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d78:	4907      	ldr	r1, [pc, #28]	@ (8002d98 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002d80:	4b05      	ldr	r3, [pc, #20]	@ (8002d98 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002d82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4013      	ands	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
}
 8002d8c:	bf00      	nop
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	40023800 	.word	0x40023800

08002d9c <MX_USART6_UART_Init>:
/* USER CODE END 0 */

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b08e      	sub	sp, #56	@ 0x38
 8002da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002da2:	f107 031c 	add.w	r3, r7, #28
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	605a      	str	r2, [r3, #4]
 8002dac:	609a      	str	r2, [r3, #8]
 8002dae:	60da      	str	r2, [r3, #12]
 8002db0:	611a      	str	r2, [r3, #16]
 8002db2:	615a      	str	r2, [r3, #20]
 8002db4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db6:	1d3b      	adds	r3, r7, #4
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	60da      	str	r2, [r3, #12]
 8002dc2:	611a      	str	r2, [r3, #16]
 8002dc4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8002dc6:	2020      	movs	r0, #32
 8002dc8:	f7ff ffd0 	bl	8002d6c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002dcc:	2004      	movs	r0, #4
 8002dce:	f7ff ffb5 	bl	8002d3c <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002dd2:	23c0      	movs	r3, #192	@ 0xc0
 8002dd4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002de2:	2300      	movs	r3, #0
 8002de4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002de6:	2308      	movs	r3, #8
 8002de8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dea:	1d3b      	adds	r3, r7, #4
 8002dec:	4619      	mov	r1, r3
 8002dee:	4819      	ldr	r0, [pc, #100]	@ (8002e54 <MX_USART6_UART_Init+0xb8>)
 8002df0:	f000 ff89 	bl	8003d06 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002df4:	f7ff fef2 	bl	8002bdc <__NVIC_GetPriorityGrouping>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff ff42 	bl	8002c88 <NVIC_EncodePriority>
 8002e04:	4603      	mov	r3, r0
 8002e06:	4619      	mov	r1, r3
 8002e08:	2047      	movs	r0, #71	@ 0x47
 8002e0a:	f7ff ff13 	bl	8002c34 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8002e0e:	2047      	movs	r0, #71	@ 0x47
 8002e10:	f7ff fef2 	bl	8002bf8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 921600;
 8002e14:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8002e18:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002e22:	2300      	movs	r3, #0
 8002e24:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002e26:	230c      	movs	r3, #12
 8002e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8002e32:	f107 031c 	add.w	r3, r7, #28
 8002e36:	4619      	mov	r1, r3
 8002e38:	4807      	ldr	r0, [pc, #28]	@ (8002e58 <MX_USART6_UART_Init+0xbc>)
 8002e3a:	f001 feef 	bl	8004c1c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8002e3e:	4806      	ldr	r0, [pc, #24]	@ (8002e58 <MX_USART6_UART_Init+0xbc>)
 8002e40:	f7ff ff65 	bl	8002d0e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8002e44:	4804      	ldr	r0, [pc, #16]	@ (8002e58 <MX_USART6_UART_Init+0xbc>)
 8002e46:	f7ff ff52 	bl	8002cee <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002e4a:	bf00      	nop
 8002e4c:	3738      	adds	r7, #56	@ 0x38
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40020800 	.word	0x40020800
 8002e58:	40011400 	.word	0x40011400

08002e5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e94 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002e60:	f7ff fd36 	bl	80028d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e64:	480c      	ldr	r0, [pc, #48]	@ (8002e98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e66:	490d      	ldr	r1, [pc, #52]	@ (8002e9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e68:	4a0d      	ldr	r2, [pc, #52]	@ (8002ea0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e6c:	e002      	b.n	8002e74 <LoopCopyDataInit>

08002e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e72:	3304      	adds	r3, #4

08002e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e78:	d3f9      	bcc.n	8002e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ea4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e7c:	4c0a      	ldr	r4, [pc, #40]	@ (8002ea8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e80:	e001      	b.n	8002e86 <LoopFillZerobss>

08002e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e84:	3204      	adds	r2, #4

08002e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e88:	d3fb      	bcc.n	8002e82 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002e8a:	f002 fe01 	bl	8005a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e8e:	f7ff f961 	bl	8002154 <main>
  bx  lr    
 8002e92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e9c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002ea0:	080083e8 	.word	0x080083e8
  ldr r2, =_sbss
 8002ea4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002ea8:	200003e4 	.word	0x200003e4

08002eac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002eac:	e7fe      	b.n	8002eac <ADC_IRQHandler>
	...

08002eb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8002ef0 <HAL_Init+0x40>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a0d      	ldr	r2, [pc, #52]	@ (8002ef0 <HAL_Init+0x40>)
 8002eba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ebe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef0 <HAL_Init+0x40>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a0a      	ldr	r2, [pc, #40]	@ (8002ef0 <HAL_Init+0x40>)
 8002ec6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002eca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ecc:	4b08      	ldr	r3, [pc, #32]	@ (8002ef0 <HAL_Init+0x40>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a07      	ldr	r2, [pc, #28]	@ (8002ef0 <HAL_Init+0x40>)
 8002ed2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ed6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ed8:	2003      	movs	r0, #3
 8002eda:	f000 f931 	bl	8003140 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ede:	200f      	movs	r0, #15
 8002ee0:	f000 f808 	bl	8002ef4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ee4:	f7ff fba6 	bl	8002634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40023c00 	.word	0x40023c00

08002ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002efc:	4b12      	ldr	r3, [pc, #72]	@ (8002f48 <HAL_InitTick+0x54>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	4b12      	ldr	r3, [pc, #72]	@ (8002f4c <HAL_InitTick+0x58>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	4619      	mov	r1, r3
 8002f06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 f93b 	bl	800318e <HAL_SYSTICK_Config>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e00e      	b.n	8002f40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b0f      	cmp	r3, #15
 8002f26:	d80a      	bhi.n	8002f3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f28:	2200      	movs	r2, #0
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f30:	f000 f911 	bl	8003156 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f34:	4a06      	ldr	r2, [pc, #24]	@ (8002f50 <HAL_InitTick+0x5c>)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	e000      	b.n	8002f40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	20000000 	.word	0x20000000
 8002f4c:	20000008 	.word	0x20000008
 8002f50:	20000004 	.word	0x20000004

08002f54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f58:	4b06      	ldr	r3, [pc, #24]	@ (8002f74 <HAL_IncTick+0x20>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	4b06      	ldr	r3, [pc, #24]	@ (8002f78 <HAL_IncTick+0x24>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4413      	add	r3, r2
 8002f64:	4a04      	ldr	r2, [pc, #16]	@ (8002f78 <HAL_IncTick+0x24>)
 8002f66:	6013      	str	r3, [r2, #0]
}
 8002f68:	bf00      	nop
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	20000008 	.word	0x20000008
 8002f78:	20000294 	.word	0x20000294

08002f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f80:	4b03      	ldr	r3, [pc, #12]	@ (8002f90 <HAL_GetTick+0x14>)
 8002f82:	681b      	ldr	r3, [r3, #0]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	20000294 	.word	0x20000294

08002f94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f9c:	f7ff ffee 	bl	8002f7c <HAL_GetTick>
 8002fa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fac:	d005      	beq.n	8002fba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fae:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd8 <HAL_Delay+0x44>)
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fba:	bf00      	nop
 8002fbc:	f7ff ffde 	bl	8002f7c <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d8f7      	bhi.n	8002fbc <HAL_Delay+0x28>
  {
  }
}
 8002fcc:	bf00      	nop
 8002fce:	bf00      	nop
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	20000008 	.word	0x20000008

08002fdc <__NVIC_SetPriorityGrouping>:
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fec:	4b0c      	ldr	r3, [pc, #48]	@ (8003020 <__NVIC_SetPriorityGrouping+0x44>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003004:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003008:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800300c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800300e:	4a04      	ldr	r2, [pc, #16]	@ (8003020 <__NVIC_SetPriorityGrouping+0x44>)
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	60d3      	str	r3, [r2, #12]
}
 8003014:	bf00      	nop
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	e000ed00 	.word	0xe000ed00

08003024 <__NVIC_GetPriorityGrouping>:
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003028:	4b04      	ldr	r3, [pc, #16]	@ (800303c <__NVIC_GetPriorityGrouping+0x18>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	0a1b      	lsrs	r3, r3, #8
 800302e:	f003 0307 	and.w	r3, r3, #7
}
 8003032:	4618      	mov	r0, r3
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	e000ed00 	.word	0xe000ed00

08003040 <__NVIC_SetPriority>:
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	4603      	mov	r3, r0
 8003048:	6039      	str	r1, [r7, #0]
 800304a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800304c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003050:	2b00      	cmp	r3, #0
 8003052:	db0a      	blt.n	800306a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	b2da      	uxtb	r2, r3
 8003058:	490c      	ldr	r1, [pc, #48]	@ (800308c <__NVIC_SetPriority+0x4c>)
 800305a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305e:	0112      	lsls	r2, r2, #4
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	440b      	add	r3, r1
 8003064:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003068:	e00a      	b.n	8003080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	b2da      	uxtb	r2, r3
 800306e:	4908      	ldr	r1, [pc, #32]	@ (8003090 <__NVIC_SetPriority+0x50>)
 8003070:	79fb      	ldrb	r3, [r7, #7]
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	3b04      	subs	r3, #4
 8003078:	0112      	lsls	r2, r2, #4
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	440b      	add	r3, r1
 800307e:	761a      	strb	r2, [r3, #24]
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	e000e100 	.word	0xe000e100
 8003090:	e000ed00 	.word	0xe000ed00

08003094 <NVIC_EncodePriority>:
{
 8003094:	b480      	push	{r7}
 8003096:	b089      	sub	sp, #36	@ 0x24
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	f1c3 0307 	rsb	r3, r3, #7
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	bf28      	it	cs
 80030b2:	2304      	movcs	r3, #4
 80030b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	3304      	adds	r3, #4
 80030ba:	2b06      	cmp	r3, #6
 80030bc:	d902      	bls.n	80030c4 <NVIC_EncodePriority+0x30>
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	3b03      	subs	r3, #3
 80030c2:	e000      	b.n	80030c6 <NVIC_EncodePriority+0x32>
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c8:	f04f 32ff 	mov.w	r2, #4294967295
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	43da      	mvns	r2, r3
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	401a      	ands	r2, r3
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030dc:	f04f 31ff 	mov.w	r1, #4294967295
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	fa01 f303 	lsl.w	r3, r1, r3
 80030e6:	43d9      	mvns	r1, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030ec:	4313      	orrs	r3, r2
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3724      	adds	r7, #36	@ 0x24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
	...

080030fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3b01      	subs	r3, #1
 8003108:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800310c:	d301      	bcc.n	8003112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800310e:	2301      	movs	r3, #1
 8003110:	e00f      	b.n	8003132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003112:	4a0a      	ldr	r2, [pc, #40]	@ (800313c <SysTick_Config+0x40>)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3b01      	subs	r3, #1
 8003118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800311a:	210f      	movs	r1, #15
 800311c:	f04f 30ff 	mov.w	r0, #4294967295
 8003120:	f7ff ff8e 	bl	8003040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003124:	4b05      	ldr	r3, [pc, #20]	@ (800313c <SysTick_Config+0x40>)
 8003126:	2200      	movs	r2, #0
 8003128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800312a:	4b04      	ldr	r3, [pc, #16]	@ (800313c <SysTick_Config+0x40>)
 800312c:	2207      	movs	r2, #7
 800312e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	e000e010 	.word	0xe000e010

08003140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f7ff ff47 	bl	8002fdc <__NVIC_SetPriorityGrouping>
}
 800314e:	bf00      	nop
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003156:	b580      	push	{r7, lr}
 8003158:	b086      	sub	sp, #24
 800315a:	af00      	add	r7, sp, #0
 800315c:	4603      	mov	r3, r0
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	607a      	str	r2, [r7, #4]
 8003162:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003164:	2300      	movs	r3, #0
 8003166:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003168:	f7ff ff5c 	bl	8003024 <__NVIC_GetPriorityGrouping>
 800316c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	68b9      	ldr	r1, [r7, #8]
 8003172:	6978      	ldr	r0, [r7, #20]
 8003174:	f7ff ff8e 	bl	8003094 <NVIC_EncodePriority>
 8003178:	4602      	mov	r2, r0
 800317a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800317e:	4611      	mov	r1, r2
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff ff5d 	bl	8003040 <__NVIC_SetPriority>
}
 8003186:	bf00      	nop
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b082      	sub	sp, #8
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7ff ffb0 	bl	80030fc <SysTick_Config>
 800319c:	4603      	mov	r3, r0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
	...

080031a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e267      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d075      	beq.n	80032b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80031c6:	4b88      	ldr	r3, [pc, #544]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 030c 	and.w	r3, r3, #12
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d00c      	beq.n	80031ec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031d2:	4b85      	ldr	r3, [pc, #532]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80031da:	2b08      	cmp	r3, #8
 80031dc:	d112      	bne.n	8003204 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031de:	4b82      	ldr	r3, [pc, #520]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031ea:	d10b      	bne.n	8003204 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ec:	4b7e      	ldr	r3, [pc, #504]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d05b      	beq.n	80032b0 <HAL_RCC_OscConfig+0x108>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d157      	bne.n	80032b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e242      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800320c:	d106      	bne.n	800321c <HAL_RCC_OscConfig+0x74>
 800320e:	4b76      	ldr	r3, [pc, #472]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a75      	ldr	r2, [pc, #468]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	e01d      	b.n	8003258 <HAL_RCC_OscConfig+0xb0>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003224:	d10c      	bne.n	8003240 <HAL_RCC_OscConfig+0x98>
 8003226:	4b70      	ldr	r3, [pc, #448]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a6f      	ldr	r2, [pc, #444]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 800322c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	4b6d      	ldr	r3, [pc, #436]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a6c      	ldr	r2, [pc, #432]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	e00b      	b.n	8003258 <HAL_RCC_OscConfig+0xb0>
 8003240:	4b69      	ldr	r3, [pc, #420]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a68      	ldr	r2, [pc, #416]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003246:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800324a:	6013      	str	r3, [r2, #0]
 800324c:	4b66      	ldr	r3, [pc, #408]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a65      	ldr	r2, [pc, #404]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003252:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003256:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d013      	beq.n	8003288 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003260:	f7ff fe8c 	bl	8002f7c <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003268:	f7ff fe88 	bl	8002f7c <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b64      	cmp	r3, #100	@ 0x64
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e207      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327a:	4b5b      	ldr	r3, [pc, #364]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCC_OscConfig+0xc0>
 8003286:	e014      	b.n	80032b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7ff fe78 	bl	8002f7c <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003290:	f7ff fe74 	bl	8002f7c <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b64      	cmp	r3, #100	@ 0x64
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e1f3      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a2:	4b51      	ldr	r3, [pc, #324]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCC_OscConfig+0xe8>
 80032ae:	e000      	b.n	80032b2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d063      	beq.n	8003386 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80032be:	4b4a      	ldr	r3, [pc, #296]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 030c 	and.w	r3, r3, #12
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00b      	beq.n	80032e2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ca:	4b47      	ldr	r3, [pc, #284]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	d11c      	bne.n	8003310 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032d6:	4b44      	ldr	r3, [pc, #272]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d116      	bne.n	8003310 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032e2:	4b41      	ldr	r3, [pc, #260]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d005      	beq.n	80032fa <HAL_RCC_OscConfig+0x152>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d001      	beq.n	80032fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e1c7      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032fa:	4b3b      	ldr	r3, [pc, #236]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4937      	ldr	r1, [pc, #220]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 800330a:	4313      	orrs	r3, r2
 800330c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800330e:	e03a      	b.n	8003386 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d020      	beq.n	800335a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003318:	4b34      	ldr	r3, [pc, #208]	@ (80033ec <HAL_RCC_OscConfig+0x244>)
 800331a:	2201      	movs	r2, #1
 800331c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331e:	f7ff fe2d 	bl	8002f7c <HAL_GetTick>
 8003322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003324:	e008      	b.n	8003338 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003326:	f7ff fe29 	bl	8002f7c <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e1a8      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003338:	4b2b      	ldr	r3, [pc, #172]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0f0      	beq.n	8003326 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003344:	4b28      	ldr	r3, [pc, #160]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	4925      	ldr	r1, [pc, #148]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003354:	4313      	orrs	r3, r2
 8003356:	600b      	str	r3, [r1, #0]
 8003358:	e015      	b.n	8003386 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800335a:	4b24      	ldr	r3, [pc, #144]	@ (80033ec <HAL_RCC_OscConfig+0x244>)
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003360:	f7ff fe0c 	bl	8002f7c <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003368:	f7ff fe08 	bl	8002f7c <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e187      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337a:	4b1b      	ldr	r3, [pc, #108]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b00      	cmp	r3, #0
 8003390:	d036      	beq.n	8003400 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d016      	beq.n	80033c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800339a:	4b15      	ldr	r3, [pc, #84]	@ (80033f0 <HAL_RCC_OscConfig+0x248>)
 800339c:	2201      	movs	r2, #1
 800339e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a0:	f7ff fdec 	bl	8002f7c <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033a8:	f7ff fde8 	bl	8002f7c <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e167      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ba:	4b0b      	ldr	r3, [pc, #44]	@ (80033e8 <HAL_RCC_OscConfig+0x240>)
 80033bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCC_OscConfig+0x200>
 80033c6:	e01b      	b.n	8003400 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033c8:	4b09      	ldr	r3, [pc, #36]	@ (80033f0 <HAL_RCC_OscConfig+0x248>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ce:	f7ff fdd5 	bl	8002f7c <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d4:	e00e      	b.n	80033f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d6:	f7ff fdd1 	bl	8002f7c <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d907      	bls.n	80033f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e150      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
 80033e8:	40023800 	.word	0x40023800
 80033ec:	42470000 	.word	0x42470000
 80033f0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f4:	4b88      	ldr	r3, [pc, #544]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 80033f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1ea      	bne.n	80033d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 8097 	beq.w	800353c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800340e:	2300      	movs	r3, #0
 8003410:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003412:	4b81      	ldr	r3, [pc, #516]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 8003414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10f      	bne.n	800343e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800341e:	2300      	movs	r3, #0
 8003420:	60bb      	str	r3, [r7, #8]
 8003422:	4b7d      	ldr	r3, [pc, #500]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 8003424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003426:	4a7c      	ldr	r2, [pc, #496]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 8003428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800342c:	6413      	str	r3, [r2, #64]	@ 0x40
 800342e:	4b7a      	ldr	r3, [pc, #488]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003436:	60bb      	str	r3, [r7, #8]
 8003438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800343a:	2301      	movs	r3, #1
 800343c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343e:	4b77      	ldr	r3, [pc, #476]	@ (800361c <HAL_RCC_OscConfig+0x474>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003446:	2b00      	cmp	r3, #0
 8003448:	d118      	bne.n	800347c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800344a:	4b74      	ldr	r3, [pc, #464]	@ (800361c <HAL_RCC_OscConfig+0x474>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a73      	ldr	r2, [pc, #460]	@ (800361c <HAL_RCC_OscConfig+0x474>)
 8003450:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003456:	f7ff fd91 	bl	8002f7c <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800345e:	f7ff fd8d 	bl	8002f7c <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e10c      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003470:	4b6a      	ldr	r3, [pc, #424]	@ (800361c <HAL_RCC_OscConfig+0x474>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0f0      	beq.n	800345e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d106      	bne.n	8003492 <HAL_RCC_OscConfig+0x2ea>
 8003484:	4b64      	ldr	r3, [pc, #400]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 8003486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003488:	4a63      	ldr	r2, [pc, #396]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 800348a:	f043 0301 	orr.w	r3, r3, #1
 800348e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003490:	e01c      	b.n	80034cc <HAL_RCC_OscConfig+0x324>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	2b05      	cmp	r3, #5
 8003498:	d10c      	bne.n	80034b4 <HAL_RCC_OscConfig+0x30c>
 800349a:	4b5f      	ldr	r3, [pc, #380]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 800349c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800349e:	4a5e      	ldr	r2, [pc, #376]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 80034a0:	f043 0304 	orr.w	r3, r3, #4
 80034a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80034a6:	4b5c      	ldr	r3, [pc, #368]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 80034a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034aa:	4a5b      	ldr	r2, [pc, #364]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80034b2:	e00b      	b.n	80034cc <HAL_RCC_OscConfig+0x324>
 80034b4:	4b58      	ldr	r3, [pc, #352]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 80034b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b8:	4a57      	ldr	r2, [pc, #348]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 80034ba:	f023 0301 	bic.w	r3, r3, #1
 80034be:	6713      	str	r3, [r2, #112]	@ 0x70
 80034c0:	4b55      	ldr	r3, [pc, #340]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 80034c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c4:	4a54      	ldr	r2, [pc, #336]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 80034c6:	f023 0304 	bic.w	r3, r3, #4
 80034ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d015      	beq.n	8003500 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d4:	f7ff fd52 	bl	8002f7c <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034da:	e00a      	b.n	80034f2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034dc:	f7ff fd4e 	bl	8002f7c <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e0cb      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f2:	4b49      	ldr	r3, [pc, #292]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 80034f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0ee      	beq.n	80034dc <HAL_RCC_OscConfig+0x334>
 80034fe:	e014      	b.n	800352a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003500:	f7ff fd3c 	bl	8002f7c <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003506:	e00a      	b.n	800351e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003508:	f7ff fd38 	bl	8002f7c <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003516:	4293      	cmp	r3, r2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e0b5      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800351e:	4b3e      	ldr	r3, [pc, #248]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 8003520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1ee      	bne.n	8003508 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800352a:	7dfb      	ldrb	r3, [r7, #23]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d105      	bne.n	800353c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003530:	4b39      	ldr	r3, [pc, #228]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 8003532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003534:	4a38      	ldr	r2, [pc, #224]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 8003536:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800353a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 80a1 	beq.w	8003688 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003546:	4b34      	ldr	r3, [pc, #208]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 030c 	and.w	r3, r3, #12
 800354e:	2b08      	cmp	r3, #8
 8003550:	d05c      	beq.n	800360c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	2b02      	cmp	r3, #2
 8003558:	d141      	bne.n	80035de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800355a:	4b31      	ldr	r3, [pc, #196]	@ (8003620 <HAL_RCC_OscConfig+0x478>)
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003560:	f7ff fd0c 	bl	8002f7c <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003568:	f7ff fd08 	bl	8002f7c <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e087      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357a:	4b27      	ldr	r3, [pc, #156]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69da      	ldr	r2, [r3, #28]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003594:	019b      	lsls	r3, r3, #6
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359c:	085b      	lsrs	r3, r3, #1
 800359e:	3b01      	subs	r3, #1
 80035a0:	041b      	lsls	r3, r3, #16
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a8:	061b      	lsls	r3, r3, #24
 80035aa:	491b      	ldr	r1, [pc, #108]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003620 <HAL_RCC_OscConfig+0x478>)
 80035b2:	2201      	movs	r2, #1
 80035b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b6:	f7ff fce1 	bl	8002f7c <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035be:	f7ff fcdd 	bl	8002f7c <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e05c      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d0:	4b11      	ldr	r3, [pc, #68]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0f0      	beq.n	80035be <HAL_RCC_OscConfig+0x416>
 80035dc:	e054      	b.n	8003688 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035de:	4b10      	ldr	r3, [pc, #64]	@ (8003620 <HAL_RCC_OscConfig+0x478>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e4:	f7ff fcca 	bl	8002f7c <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ec:	f7ff fcc6 	bl	8002f7c <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e045      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035fe:	4b06      	ldr	r3, [pc, #24]	@ (8003618 <HAL_RCC_OscConfig+0x470>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0x444>
 800360a:	e03d      	b.n	8003688 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d107      	bne.n	8003624 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e038      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
 8003618:	40023800 	.word	0x40023800
 800361c:	40007000 	.word	0x40007000
 8003620:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003624:	4b1b      	ldr	r3, [pc, #108]	@ (8003694 <HAL_RCC_OscConfig+0x4ec>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d028      	beq.n	8003684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800363c:	429a      	cmp	r2, r3
 800363e:	d121      	bne.n	8003684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800364a:	429a      	cmp	r2, r3
 800364c:	d11a      	bne.n	8003684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003654:	4013      	ands	r3, r2
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800365a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800365c:	4293      	cmp	r3, r2
 800365e:	d111      	bne.n	8003684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366a:	085b      	lsrs	r3, r3, #1
 800366c:	3b01      	subs	r3, #1
 800366e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003670:	429a      	cmp	r2, r3
 8003672:	d107      	bne.n	8003684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800367e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003680:	429a      	cmp	r2, r3
 8003682:	d001      	beq.n	8003688 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e000      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3718      	adds	r7, #24
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	40023800 	.word	0x40023800

08003698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e0cc      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036ac:	4b68      	ldr	r3, [pc, #416]	@ (8003850 <HAL_RCC_ClockConfig+0x1b8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d90c      	bls.n	80036d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ba:	4b65      	ldr	r3, [pc, #404]	@ (8003850 <HAL_RCC_ClockConfig+0x1b8>)
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c2:	4b63      	ldr	r3, [pc, #396]	@ (8003850 <HAL_RCC_ClockConfig+0x1b8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d001      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0b8      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d020      	beq.n	8003722 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036ec:	4b59      	ldr	r3, [pc, #356]	@ (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	4a58      	ldr	r2, [pc, #352]	@ (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 80036f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003704:	4b53      	ldr	r3, [pc, #332]	@ (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	4a52      	ldr	r2, [pc, #328]	@ (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800370e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003710:	4b50      	ldr	r3, [pc, #320]	@ (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	494d      	ldr	r1, [pc, #308]	@ (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	4313      	orrs	r3, r2
 8003720:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d044      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d107      	bne.n	8003746 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003736:	4b47      	ldr	r3, [pc, #284]	@ (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d119      	bne.n	8003776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e07f      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b02      	cmp	r3, #2
 800374c:	d003      	beq.n	8003756 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003752:	2b03      	cmp	r3, #3
 8003754:	d107      	bne.n	8003766 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003756:	4b3f      	ldr	r3, [pc, #252]	@ (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d109      	bne.n	8003776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e06f      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003766:	4b3b      	ldr	r3, [pc, #236]	@ (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e067      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003776:	4b37      	ldr	r3, [pc, #220]	@ (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f023 0203 	bic.w	r2, r3, #3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	4934      	ldr	r1, [pc, #208]	@ (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003784:	4313      	orrs	r3, r2
 8003786:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003788:	f7ff fbf8 	bl	8002f7c <HAL_GetTick>
 800378c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378e:	e00a      	b.n	80037a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003790:	f7ff fbf4 	bl	8002f7c <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800379e:	4293      	cmp	r3, r2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e04f      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a6:	4b2b      	ldr	r3, [pc, #172]	@ (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 020c 	and.w	r2, r3, #12
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d1eb      	bne.n	8003790 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037b8:	4b25      	ldr	r3, [pc, #148]	@ (8003850 <HAL_RCC_ClockConfig+0x1b8>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d20c      	bcs.n	80037e0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c6:	4b22      	ldr	r3, [pc, #136]	@ (8003850 <HAL_RCC_ClockConfig+0x1b8>)
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	b2d2      	uxtb	r2, r2
 80037cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ce:	4b20      	ldr	r3, [pc, #128]	@ (8003850 <HAL_RCC_ClockConfig+0x1b8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d001      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e032      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d008      	beq.n	80037fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037ec:	4b19      	ldr	r3, [pc, #100]	@ (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	4916      	ldr	r1, [pc, #88]	@ (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	2b00      	cmp	r3, #0
 8003808:	d009      	beq.n	800381e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800380a:	4b12      	ldr	r3, [pc, #72]	@ (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	490e      	ldr	r1, [pc, #56]	@ (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	4313      	orrs	r3, r2
 800381c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800381e:	f000 f821 	bl	8003864 <HAL_RCC_GetSysClockFreq>
 8003822:	4602      	mov	r2, r0
 8003824:	4b0b      	ldr	r3, [pc, #44]	@ (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	091b      	lsrs	r3, r3, #4
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	490a      	ldr	r1, [pc, #40]	@ (8003858 <HAL_RCC_ClockConfig+0x1c0>)
 8003830:	5ccb      	ldrb	r3, [r1, r3]
 8003832:	fa22 f303 	lsr.w	r3, r2, r3
 8003836:	4a09      	ldr	r2, [pc, #36]	@ (800385c <HAL_RCC_ClockConfig+0x1c4>)
 8003838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800383a:	4b09      	ldr	r3, [pc, #36]	@ (8003860 <HAL_RCC_ClockConfig+0x1c8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f7ff fb58 	bl	8002ef4 <HAL_InitTick>

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40023c00 	.word	0x40023c00
 8003854:	40023800 	.word	0x40023800
 8003858:	08008024 	.word	0x08008024
 800385c:	20000000 	.word	0x20000000
 8003860:	20000004 	.word	0x20000004

08003864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003868:	b094      	sub	sp, #80	@ 0x50
 800386a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003878:	2300      	movs	r3, #0
 800387a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800387c:	4b79      	ldr	r3, [pc, #484]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x200>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f003 030c 	and.w	r3, r3, #12
 8003884:	2b08      	cmp	r3, #8
 8003886:	d00d      	beq.n	80038a4 <HAL_RCC_GetSysClockFreq+0x40>
 8003888:	2b08      	cmp	r3, #8
 800388a:	f200 80e1 	bhi.w	8003a50 <HAL_RCC_GetSysClockFreq+0x1ec>
 800388e:	2b00      	cmp	r3, #0
 8003890:	d002      	beq.n	8003898 <HAL_RCC_GetSysClockFreq+0x34>
 8003892:	2b04      	cmp	r3, #4
 8003894:	d003      	beq.n	800389e <HAL_RCC_GetSysClockFreq+0x3a>
 8003896:	e0db      	b.n	8003a50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003898:	4b73      	ldr	r3, [pc, #460]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0x204>)
 800389a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800389c:	e0db      	b.n	8003a56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800389e:	4b73      	ldr	r3, [pc, #460]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x208>)
 80038a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038a2:	e0d8      	b.n	8003a56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038a4:	4b6f      	ldr	r3, [pc, #444]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x200>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038ac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038ae:	4b6d      	ldr	r3, [pc, #436]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x200>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d063      	beq.n	8003982 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ba:	4b6a      	ldr	r3, [pc, #424]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x200>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	099b      	lsrs	r3, r3, #6
 80038c0:	2200      	movs	r2, #0
 80038c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80038c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80038ce:	2300      	movs	r3, #0
 80038d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80038d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80038d6:	4622      	mov	r2, r4
 80038d8:	462b      	mov	r3, r5
 80038da:	f04f 0000 	mov.w	r0, #0
 80038de:	f04f 0100 	mov.w	r1, #0
 80038e2:	0159      	lsls	r1, r3, #5
 80038e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038e8:	0150      	lsls	r0, r2, #5
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	4621      	mov	r1, r4
 80038f0:	1a51      	subs	r1, r2, r1
 80038f2:	6139      	str	r1, [r7, #16]
 80038f4:	4629      	mov	r1, r5
 80038f6:	eb63 0301 	sbc.w	r3, r3, r1
 80038fa:	617b      	str	r3, [r7, #20]
 80038fc:	f04f 0200 	mov.w	r2, #0
 8003900:	f04f 0300 	mov.w	r3, #0
 8003904:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003908:	4659      	mov	r1, fp
 800390a:	018b      	lsls	r3, r1, #6
 800390c:	4651      	mov	r1, sl
 800390e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003912:	4651      	mov	r1, sl
 8003914:	018a      	lsls	r2, r1, #6
 8003916:	4651      	mov	r1, sl
 8003918:	ebb2 0801 	subs.w	r8, r2, r1
 800391c:	4659      	mov	r1, fp
 800391e:	eb63 0901 	sbc.w	r9, r3, r1
 8003922:	f04f 0200 	mov.w	r2, #0
 8003926:	f04f 0300 	mov.w	r3, #0
 800392a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800392e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003932:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003936:	4690      	mov	r8, r2
 8003938:	4699      	mov	r9, r3
 800393a:	4623      	mov	r3, r4
 800393c:	eb18 0303 	adds.w	r3, r8, r3
 8003940:	60bb      	str	r3, [r7, #8]
 8003942:	462b      	mov	r3, r5
 8003944:	eb49 0303 	adc.w	r3, r9, r3
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	f04f 0200 	mov.w	r2, #0
 800394e:	f04f 0300 	mov.w	r3, #0
 8003952:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003956:	4629      	mov	r1, r5
 8003958:	024b      	lsls	r3, r1, #9
 800395a:	4621      	mov	r1, r4
 800395c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003960:	4621      	mov	r1, r4
 8003962:	024a      	lsls	r2, r1, #9
 8003964:	4610      	mov	r0, r2
 8003966:	4619      	mov	r1, r3
 8003968:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800396a:	2200      	movs	r2, #0
 800396c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800396e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003970:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003974:	f7fd f918 	bl	8000ba8 <__aeabi_uldivmod>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	4613      	mov	r3, r2
 800397e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003980:	e058      	b.n	8003a34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003982:	4b38      	ldr	r3, [pc, #224]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	099b      	lsrs	r3, r3, #6
 8003988:	2200      	movs	r2, #0
 800398a:	4618      	mov	r0, r3
 800398c:	4611      	mov	r1, r2
 800398e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003992:	623b      	str	r3, [r7, #32]
 8003994:	2300      	movs	r3, #0
 8003996:	627b      	str	r3, [r7, #36]	@ 0x24
 8003998:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800399c:	4642      	mov	r2, r8
 800399e:	464b      	mov	r3, r9
 80039a0:	f04f 0000 	mov.w	r0, #0
 80039a4:	f04f 0100 	mov.w	r1, #0
 80039a8:	0159      	lsls	r1, r3, #5
 80039aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039ae:	0150      	lsls	r0, r2, #5
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4641      	mov	r1, r8
 80039b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80039ba:	4649      	mov	r1, r9
 80039bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80039c0:	f04f 0200 	mov.w	r2, #0
 80039c4:	f04f 0300 	mov.w	r3, #0
 80039c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039d4:	ebb2 040a 	subs.w	r4, r2, sl
 80039d8:	eb63 050b 	sbc.w	r5, r3, fp
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	f04f 0300 	mov.w	r3, #0
 80039e4:	00eb      	lsls	r3, r5, #3
 80039e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039ea:	00e2      	lsls	r2, r4, #3
 80039ec:	4614      	mov	r4, r2
 80039ee:	461d      	mov	r5, r3
 80039f0:	4643      	mov	r3, r8
 80039f2:	18e3      	adds	r3, r4, r3
 80039f4:	603b      	str	r3, [r7, #0]
 80039f6:	464b      	mov	r3, r9
 80039f8:	eb45 0303 	adc.w	r3, r5, r3
 80039fc:	607b      	str	r3, [r7, #4]
 80039fe:	f04f 0200 	mov.w	r2, #0
 8003a02:	f04f 0300 	mov.w	r3, #0
 8003a06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a0a:	4629      	mov	r1, r5
 8003a0c:	028b      	lsls	r3, r1, #10
 8003a0e:	4621      	mov	r1, r4
 8003a10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a14:	4621      	mov	r1, r4
 8003a16:	028a      	lsls	r2, r1, #10
 8003a18:	4610      	mov	r0, r2
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a1e:	2200      	movs	r2, #0
 8003a20:	61bb      	str	r3, [r7, #24]
 8003a22:	61fa      	str	r2, [r7, #28]
 8003a24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a28:	f7fd f8be 	bl	8000ba8 <__aeabi_uldivmod>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4613      	mov	r3, r2
 8003a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003a34:	4b0b      	ldr	r3, [pc, #44]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	0c1b      	lsrs	r3, r3, #16
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	3301      	adds	r3, #1
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003a44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a4e:	e002      	b.n	8003a56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a50:	4b05      	ldr	r3, [pc, #20]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a52:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3750      	adds	r7, #80	@ 0x50
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a62:	bf00      	nop
 8003a64:	40023800 	.word	0x40023800
 8003a68:	00f42400 	.word	0x00f42400
 8003a6c:	007a1200 	.word	0x007a1200

08003a70 <LL_GPIO_SetPinMode>:
{
 8003a70:	b480      	push	{r7}
 8003a72:	b08b      	sub	sp, #44	@ 0x2c
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	fa93 f3a3 	rbit	r3, r3
 8003a8a:	613b      	str	r3, [r7, #16]
  return result;
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8003a96:	2320      	movs	r3, #32
 8003a98:	e003      	b.n	8003aa2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	fab3 f383 	clz	r3, r3
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	2103      	movs	r1, #3
 8003aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	401a      	ands	r2, r3
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	fa93 f3a3 	rbit	r3, r3
 8003ab8:	61fb      	str	r3, [r7, #28]
  return result;
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8003ac4:	2320      	movs	r3, #32
 8003ac6:	e003      	b.n	8003ad0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aca:	fab3 f383 	clz	r3, r3
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	601a      	str	r2, [r3, #0]
}
 8003ade:	bf00      	nop
 8003ae0:	372c      	adds	r7, #44	@ 0x2c
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <LL_GPIO_SetPinOutputType>:
{
 8003aea:	b480      	push	{r7}
 8003aec:	b085      	sub	sp, #20
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	60f8      	str	r0, [r7, #12]
 8003af2:	60b9      	str	r1, [r7, #8]
 8003af4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	43db      	mvns	r3, r3
 8003afe:	401a      	ands	r2, r3
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	fb01 f303 	mul.w	r3, r1, r3
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	605a      	str	r2, [r3, #4]
}
 8003b0e:	bf00      	nop
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <LL_GPIO_SetPinSpeed>:
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b08b      	sub	sp, #44	@ 0x2c
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	60f8      	str	r0, [r7, #12]
 8003b22:	60b9      	str	r1, [r7, #8]
 8003b24:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	689a      	ldr	r2, [r3, #8]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	fa93 f3a3 	rbit	r3, r3
 8003b34:	613b      	str	r3, [r7, #16]
  return result;
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8003b40:	2320      	movs	r3, #32
 8003b42:	e003      	b.n	8003b4c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	fab3 f383 	clz	r3, r3
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	2103      	movs	r1, #3
 8003b50:	fa01 f303 	lsl.w	r3, r1, r3
 8003b54:	43db      	mvns	r3, r3
 8003b56:	401a      	ands	r2, r3
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5c:	6a3b      	ldr	r3, [r7, #32]
 8003b5e:	fa93 f3a3 	rbit	r3, r3
 8003b62:	61fb      	str	r3, [r7, #28]
  return result;
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8003b6e:	2320      	movs	r3, #32
 8003b70:	e003      	b.n	8003b7a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8003b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b74:	fab3 f383 	clz	r3, r3
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b82:	431a      	orrs	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	609a      	str	r2, [r3, #8]
}
 8003b88:	bf00      	nop
 8003b8a:	372c      	adds	r7, #44	@ 0x2c
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <LL_GPIO_SetPinPull>:
{
 8003b94:	b480      	push	{r7}
 8003b96:	b08b      	sub	sp, #44	@ 0x2c
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	68da      	ldr	r2, [r3, #12]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	fa93 f3a3 	rbit	r3, r3
 8003bae:	613b      	str	r3, [r7, #16]
  return result;
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8003bba:	2320      	movs	r3, #32
 8003bbc:	e003      	b.n	8003bc6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	fab3 f383 	clz	r3, r3
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	2103      	movs	r1, #3
 8003bca:	fa01 f303 	lsl.w	r3, r1, r3
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	401a      	ands	r2, r3
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	fa93 f3a3 	rbit	r3, r3
 8003bdc:	61fb      	str	r3, [r7, #28]
  return result;
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8003be8:	2320      	movs	r3, #32
 8003bea:	e003      	b.n	8003bf4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8003bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bee:	fab3 f383 	clz	r3, r3
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	60da      	str	r2, [r3, #12]
}
 8003c02:	bf00      	nop
 8003c04:	372c      	adds	r7, #44	@ 0x2c
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <LL_GPIO_SetAFPin_0_7>:
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b08b      	sub	sp, #44	@ 0x2c
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	60f8      	str	r0, [r7, #12]
 8003c16:	60b9      	str	r1, [r7, #8]
 8003c18:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a1a      	ldr	r2, [r3, #32]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	fa93 f3a3 	rbit	r3, r3
 8003c28:	613b      	str	r3, [r7, #16]
  return result;
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8003c34:	2320      	movs	r3, #32
 8003c36:	e003      	b.n	8003c40 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	fab3 f383 	clz	r3, r3
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	210f      	movs	r1, #15
 8003c44:	fa01 f303 	lsl.w	r3, r1, r3
 8003c48:	43db      	mvns	r3, r3
 8003c4a:	401a      	ands	r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c50:	6a3b      	ldr	r3, [r7, #32]
 8003c52:	fa93 f3a3 	rbit	r3, r3
 8003c56:	61fb      	str	r3, [r7, #28]
  return result;
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8003c62:	2320      	movs	r3, #32
 8003c64:	e003      	b.n	8003c6e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8003c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c68:	fab3 f383 	clz	r3, r3
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	fa01 f303 	lsl.w	r3, r1, r3
 8003c76:	431a      	orrs	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	621a      	str	r2, [r3, #32]
}
 8003c7c:	bf00      	nop
 8003c7e:	372c      	adds	r7, #44	@ 0x2c
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <LL_GPIO_SetAFPin_8_15>:
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b08b      	sub	sp, #44	@ 0x2c
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	0a1b      	lsrs	r3, r3, #8
 8003c9c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	fa93 f3a3 	rbit	r3, r3
 8003ca4:	613b      	str	r3, [r7, #16]
  return result;
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8003cb0:	2320      	movs	r3, #32
 8003cb2:	e003      	b.n	8003cbc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	fab3 f383 	clz	r3, r3
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	210f      	movs	r1, #15
 8003cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	401a      	ands	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	0a1b      	lsrs	r3, r3, #8
 8003ccc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	fa93 f3a3 	rbit	r3, r3
 8003cd4:	61fb      	str	r3, [r7, #28]
  return result;
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8003ce0:	2320      	movs	r3, #32
 8003ce2:	e003      	b.n	8003cec <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce6:	fab3 f383 	clz	r3, r3
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	6879      	ldr	r1, [r7, #4]
 8003cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003cfa:	bf00      	nop
 8003cfc:	372c      	adds	r7, #44	@ 0x2c
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b08a      	sub	sp, #40	@ 0x28
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
 8003d0e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	fa93 f3a3 	rbit	r3, r3
 8003d24:	617b      	str	r3, [r7, #20]
  return result;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <LL_GPIO_Init+0x2e>
    return 32U;
 8003d30:	2320      	movs	r3, #32
 8003d32:	e003      	b.n	8003d3c <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	fab3 f383 	clz	r3, r3
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003d3e:	e057      	b.n	8003df0 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	2101      	movs	r1, #1
 8003d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d48:	fa01 f303 	lsl.w	r3, r1, r3
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8003d50:	6a3b      	ldr	r3, [r7, #32]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d049      	beq.n	8003dea <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d003      	beq.n	8003d66 <LL_GPIO_Init+0x60>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d10d      	bne.n	8003d82 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	6a39      	ldr	r1, [r7, #32]
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7ff fed3 	bl	8003b1a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	6a39      	ldr	r1, [r7, #32]
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f7ff feb4 	bl	8003aea <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	461a      	mov	r2, r3
 8003d88:	6a39      	ldr	r1, [r7, #32]
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7ff ff02 	bl	8003b94 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d121      	bne.n	8003ddc <LL_GPIO_Init+0xd6>
 8003d98:	6a3b      	ldr	r3, [r7, #32]
 8003d9a:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	fa93 f3a3 	rbit	r3, r3
 8003da2:	60bb      	str	r3, [r7, #8]
  return result;
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <LL_GPIO_Init+0xac>
    return 32U;
 8003dae:	2320      	movs	r3, #32
 8003db0:	e003      	b.n	8003dba <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	fab3 f383 	clz	r3, r3
 8003db8:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003dba:	2b07      	cmp	r3, #7
 8003dbc:	d807      	bhi.n	8003dce <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	6a39      	ldr	r1, [r7, #32]
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7ff ff21 	bl	8003c0e <LL_GPIO_SetAFPin_0_7>
 8003dcc:	e006      	b.n	8003ddc <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	6a39      	ldr	r1, [r7, #32]
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7ff ff56 	bl	8003c88 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	461a      	mov	r2, r3
 8003de2:	6a39      	ldr	r1, [r7, #32]
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7ff fe43 	bl	8003a70 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dec:	3301      	adds	r3, #1
 8003dee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1a0      	bne.n	8003d40 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3728      	adds	r7, #40	@ 0x28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003e0c:	4b04      	ldr	r3, [pc, #16]	@ (8003e20 <LL_RCC_GetSysClkSource+0x18>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 030c 	and.w	r3, r3, #12
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	40023800 	.word	0x40023800

08003e24 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003e28:	4b04      	ldr	r3, [pc, #16]	@ (8003e3c <LL_RCC_GetAHBPrescaler+0x18>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	40023800 	.word	0x40023800

08003e40 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003e44:	4b04      	ldr	r3, [pc, #16]	@ (8003e58 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	40023800 	.word	0x40023800

08003e5c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003e60:	4b04      	ldr	r3, [pc, #16]	@ (8003e74 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	40023800 	.word	0x40023800

08003e78 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003e7c:	4b04      	ldr	r3, [pc, #16]	@ (8003e90 <LL_RCC_PLL_GetMainSource+0x18>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	40023800 	.word	0x40023800

08003e94 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003e98:	4b04      	ldr	r3, [pc, #16]	@ (8003eac <LL_RCC_PLL_GetN+0x18>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	099b      	lsrs	r3, r3, #6
 8003e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	40023800 	.word	0x40023800

08003eb0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003eb4:	4b04      	ldr	r3, [pc, #16]	@ (8003ec8 <LL_RCC_PLL_GetP+0x18>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	40023800 	.word	0x40023800

08003ecc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003ed0:	4b04      	ldr	r3, [pc, #16]	@ (8003ee4 <LL_RCC_PLL_GetDivider+0x18>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	40023800 	.word	0x40023800

08003ee8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003ef0:	f000 f820 	bl	8003f34 <RCC_GetSystemClockFreq>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 f840 	bl	8003f84 <RCC_GetHCLKClockFreq>
 8003f04:	4602      	mov	r2, r0
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 f84e 	bl	8003fb0 <RCC_GetPCLK1ClockFreq>
 8003f14:	4602      	mov	r2, r0
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 f85a 	bl	8003fd8 <RCC_GetPCLK2ClockFreq>
 8003f24:	4602      	mov	r2, r0
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	60da      	str	r2, [r3, #12]
}
 8003f2a:	bf00      	nop
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
	...

08003f34 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003f3e:	f7ff ff63 	bl	8003e08 <LL_RCC_GetSysClkSource>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d00c      	beq.n	8003f62 <RCC_GetSystemClockFreq+0x2e>
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	d80f      	bhi.n	8003f6c <RCC_GetSystemClockFreq+0x38>
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d002      	beq.n	8003f56 <RCC_GetSystemClockFreq+0x22>
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d003      	beq.n	8003f5c <RCC_GetSystemClockFreq+0x28>
 8003f54:	e00a      	b.n	8003f6c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003f56:	4b09      	ldr	r3, [pc, #36]	@ (8003f7c <RCC_GetSystemClockFreq+0x48>)
 8003f58:	607b      	str	r3, [r7, #4]
      break;
 8003f5a:	e00a      	b.n	8003f72 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003f5c:	4b08      	ldr	r3, [pc, #32]	@ (8003f80 <RCC_GetSystemClockFreq+0x4c>)
 8003f5e:	607b      	str	r3, [r7, #4]
      break;
 8003f60:	e007      	b.n	8003f72 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003f62:	2008      	movs	r0, #8
 8003f64:	f000 f84c 	bl	8004000 <RCC_PLL_GetFreqDomain_SYS>
 8003f68:	6078      	str	r0, [r7, #4]
      break;
 8003f6a:	e002      	b.n	8003f72 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003f6c:	4b03      	ldr	r3, [pc, #12]	@ (8003f7c <RCC_GetSystemClockFreq+0x48>)
 8003f6e:	607b      	str	r3, [r7, #4]
      break;
 8003f70:	bf00      	nop
  }

  return frequency;
 8003f72:	687b      	ldr	r3, [r7, #4]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	00f42400 	.word	0x00f42400
 8003f80:	007a1200 	.word	0x007a1200

08003f84 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003f8c:	f7ff ff4a 	bl	8003e24 <LL_RCC_GetAHBPrescaler>
 8003f90:	4603      	mov	r3, r0
 8003f92:	091b      	lsrs	r3, r3, #4
 8003f94:	f003 030f 	and.w	r3, r3, #15
 8003f98:	4a04      	ldr	r2, [pc, #16]	@ (8003fac <RCC_GetHCLKClockFreq+0x28>)
 8003f9a:	5cd3      	ldrb	r3, [r2, r3]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	40d3      	lsrs	r3, r2
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	08008024 	.word	0x08008024

08003fb0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003fb8:	f7ff ff42 	bl	8003e40 <LL_RCC_GetAPB1Prescaler>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	0a9b      	lsrs	r3, r3, #10
 8003fc0:	4a04      	ldr	r2, [pc, #16]	@ (8003fd4 <RCC_GetPCLK1ClockFreq+0x24>)
 8003fc2:	5cd3      	ldrb	r3, [r2, r3]
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	40d3      	lsrs	r3, r2
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	08008034 	.word	0x08008034

08003fd8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003fe0:	f7ff ff3c 	bl	8003e5c <LL_RCC_GetAPB2Prescaler>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	0b5b      	lsrs	r3, r3, #13
 8003fe8:	4a04      	ldr	r2, [pc, #16]	@ (8003ffc <RCC_GetPCLK2ClockFreq+0x24>)
 8003fea:	5cd3      	ldrb	r3, [r2, r3]
 8003fec:	461a      	mov	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	40d3      	lsrs	r3, r2
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	08008034 	.word	0x08008034

08004000 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8004000:	b590      	push	{r4, r7, lr}
 8004002:	b087      	sub	sp, #28
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8004008:	2300      	movs	r3, #0
 800400a:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 800400c:	2300      	movs	r3, #0
 800400e:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004014:	f7ff ff30 	bl	8003e78 <LL_RCC_PLL_GetMainSource>
 8004018:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d004      	beq.n	800402a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004026:	d003      	beq.n	8004030 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8004028:	e005      	b.n	8004036 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800402a:	4b12      	ldr	r3, [pc, #72]	@ (8004074 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800402c:	617b      	str	r3, [r7, #20]
      break;
 800402e:	e005      	b.n	800403c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004030:	4b11      	ldr	r3, [pc, #68]	@ (8004078 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8004032:	617b      	str	r3, [r7, #20]
      break;
 8004034:	e002      	b.n	800403c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8004036:	4b0f      	ldr	r3, [pc, #60]	@ (8004074 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004038:	617b      	str	r3, [r7, #20]
      break;
 800403a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b08      	cmp	r3, #8
 8004040:	d113      	bne.n	800406a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004042:	f7ff ff43 	bl	8003ecc <LL_RCC_PLL_GetDivider>
 8004046:	4602      	mov	r2, r0
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	fbb3 f4f2 	udiv	r4, r3, r2
 800404e:	f7ff ff21 	bl	8003e94 <LL_RCC_PLL_GetN>
 8004052:	4603      	mov	r3, r0
 8004054:	fb03 f404 	mul.w	r4, r3, r4
 8004058:	f7ff ff2a 	bl	8003eb0 <LL_RCC_PLL_GetP>
 800405c:	4603      	mov	r3, r0
 800405e:	0c1b      	lsrs	r3, r3, #16
 8004060:	3301      	adds	r3, #1
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	fbb4 f3f3 	udiv	r3, r4, r3
 8004068:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800406a:	693b      	ldr	r3, [r7, #16]
}
 800406c:	4618      	mov	r0, r3
 800406e:	371c      	adds	r7, #28
 8004070:	46bd      	mov	sp, r7
 8004072:	bd90      	pop	{r4, r7, pc}
 8004074:	00f42400 	.word	0x00f42400
 8004078:	007a1200 	.word	0x007a1200

0800407c <LL_SPI_IsEnabled>:
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800408c:	2b40      	cmp	r3, #64	@ 0x40
 800408e:	d101      	bne.n	8004094 <LL_SPI_IsEnabled+0x18>
 8004090:	2301      	movs	r3, #1
 8004092:	e000      	b.n	8004096 <LL_SPI_IsEnabled+0x1a>
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <LL_SPI_SetCRCPolynomial>:
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
 80040aa:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	461a      	mov	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	611a      	str	r2, [r3, #16]
}
 80040b6:	bf00      	nop
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b084      	sub	sp, #16
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
 80040ca:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f7ff ffd3 	bl	800407c <LL_SPI_IsEnabled>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d139      	bne.n	8004150 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040e4:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	6811      	ldr	r1, [r2, #0]
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	6852      	ldr	r2, [r2, #4]
 80040f0:	4311      	orrs	r1, r2
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	6892      	ldr	r2, [r2, #8]
 80040f6:	4311      	orrs	r1, r2
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	68d2      	ldr	r2, [r2, #12]
 80040fc:	4311      	orrs	r1, r2
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	6912      	ldr	r2, [r2, #16]
 8004102:	4311      	orrs	r1, r2
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	6952      	ldr	r2, [r2, #20]
 8004108:	4311      	orrs	r1, r2
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	6992      	ldr	r2, [r2, #24]
 800410e:	4311      	orrs	r1, r2
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	69d2      	ldr	r2, [r2, #28]
 8004114:	4311      	orrs	r1, r2
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	6a12      	ldr	r2, [r2, #32]
 800411a:	430a      	orrs	r2, r1
 800411c:	431a      	orrs	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f023 0204 	bic.w	r2, r3, #4
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	0c1b      	lsrs	r3, r3, #16
 8004130:	431a      	orrs	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800413e:	d105      	bne.n	800414c <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004144:	4619      	mov	r1, r3
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7ff ffab 	bl	80040a2 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800414c:	2300      	movs	r3, #0
 800414e:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	61da      	str	r2, [r3, #28]
  return status;
 800415c:	7bfb      	ldrb	r3, [r7, #15]
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <LL_TIM_SetPrescaler>:
{
 8004166:	b480      	push	{r7}
 8004168:	b083      	sub	sp, #12
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
 800416e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004176:	bf00      	nop
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <LL_TIM_SetAutoReload>:
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
 800418a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <LL_TIM_SetRepetitionCounter>:
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
 80041a6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <LL_TIM_OC_SetCompareCH1>:
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <LL_TIM_OC_SetCompareCH2>:
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
 80041de:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <LL_TIM_OC_SetCompareCH3>:
{
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
 80041fa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <LL_TIM_OC_SetCompareCH4>:
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800422a:	b480      	push	{r7}
 800422c:	b083      	sub	sp, #12
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	f043 0201 	orr.w	r2, r3, #1
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	615a      	str	r2, [r3, #20]
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
	...

0800424c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a3d      	ldr	r2, [pc, #244]	@ (8004354 <LL_TIM_Init+0x108>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d013      	beq.n	800428c <LL_TIM_Init+0x40>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800426a:	d00f      	beq.n	800428c <LL_TIM_Init+0x40>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a3a      	ldr	r2, [pc, #232]	@ (8004358 <LL_TIM_Init+0x10c>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d00b      	beq.n	800428c <LL_TIM_Init+0x40>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a39      	ldr	r2, [pc, #228]	@ (800435c <LL_TIM_Init+0x110>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d007      	beq.n	800428c <LL_TIM_Init+0x40>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a38      	ldr	r2, [pc, #224]	@ (8004360 <LL_TIM_Init+0x114>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d003      	beq.n	800428c <LL_TIM_Init+0x40>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a37      	ldr	r2, [pc, #220]	@ (8004364 <LL_TIM_Init+0x118>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d106      	bne.n	800429a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	4313      	orrs	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a2d      	ldr	r2, [pc, #180]	@ (8004354 <LL_TIM_Init+0x108>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d02b      	beq.n	80042fa <LL_TIM_Init+0xae>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042a8:	d027      	beq.n	80042fa <LL_TIM_Init+0xae>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a2a      	ldr	r2, [pc, #168]	@ (8004358 <LL_TIM_Init+0x10c>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d023      	beq.n	80042fa <LL_TIM_Init+0xae>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a29      	ldr	r2, [pc, #164]	@ (800435c <LL_TIM_Init+0x110>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d01f      	beq.n	80042fa <LL_TIM_Init+0xae>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a28      	ldr	r2, [pc, #160]	@ (8004360 <LL_TIM_Init+0x114>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d01b      	beq.n	80042fa <LL_TIM_Init+0xae>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a27      	ldr	r2, [pc, #156]	@ (8004364 <LL_TIM_Init+0x118>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d017      	beq.n	80042fa <LL_TIM_Init+0xae>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a26      	ldr	r2, [pc, #152]	@ (8004368 <LL_TIM_Init+0x11c>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d013      	beq.n	80042fa <LL_TIM_Init+0xae>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a25      	ldr	r2, [pc, #148]	@ (800436c <LL_TIM_Init+0x120>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d00f      	beq.n	80042fa <LL_TIM_Init+0xae>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a24      	ldr	r2, [pc, #144]	@ (8004370 <LL_TIM_Init+0x124>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d00b      	beq.n	80042fa <LL_TIM_Init+0xae>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a23      	ldr	r2, [pc, #140]	@ (8004374 <LL_TIM_Init+0x128>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d007      	beq.n	80042fa <LL_TIM_Init+0xae>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a22      	ldr	r2, [pc, #136]	@ (8004378 <LL_TIM_Init+0x12c>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d003      	beq.n	80042fa <LL_TIM_Init+0xae>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a21      	ldr	r2, [pc, #132]	@ (800437c <LL_TIM_Init+0x130>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d106      	bne.n	8004308 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	4313      	orrs	r3, r2
 8004306:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	4619      	mov	r1, r3
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7ff ff34 	bl	8004182 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	4619      	mov	r1, r3
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7ff ff20 	bl	8004166 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a0a      	ldr	r2, [pc, #40]	@ (8004354 <LL_TIM_Init+0x108>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d003      	beq.n	8004336 <LL_TIM_Init+0xea>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a0c      	ldr	r2, [pc, #48]	@ (8004364 <LL_TIM_Init+0x118>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d105      	bne.n	8004342 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	4619      	mov	r1, r3
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f7ff ff2e 	bl	800419e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7ff ff71 	bl	800422a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	40010000 	.word	0x40010000
 8004358:	40000400 	.word	0x40000400
 800435c:	40000800 	.word	0x40000800
 8004360:	40000c00 	.word	0x40000c00
 8004364:	40010400 	.word	0x40010400
 8004368:	40014000 	.word	0x40014000
 800436c:	40014400 	.word	0x40014400
 8004370:	40014800 	.word	0x40014800
 8004374:	40001800 	.word	0x40001800
 8004378:	40001c00 	.word	0x40001c00
 800437c:	40002000 	.word	0x40002000

08004380 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004396:	d027      	beq.n	80043e8 <LL_TIM_OC_Init+0x68>
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800439e:	d82a      	bhi.n	80043f6 <LL_TIM_OC_Init+0x76>
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043a6:	d018      	beq.n	80043da <LL_TIM_OC_Init+0x5a>
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043ae:	d822      	bhi.n	80043f6 <LL_TIM_OC_Init+0x76>
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d003      	beq.n	80043be <LL_TIM_OC_Init+0x3e>
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2b10      	cmp	r3, #16
 80043ba:	d007      	beq.n	80043cc <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80043bc:	e01b      	b.n	80043f6 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80043be:	6879      	ldr	r1, [r7, #4]
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 f81f 	bl	8004404 <OC1Config>
 80043c6:	4603      	mov	r3, r0
 80043c8:	75fb      	strb	r3, [r7, #23]
      break;
 80043ca:	e015      	b.n	80043f8 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80043cc:	6879      	ldr	r1, [r7, #4]
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 f884 	bl	80044dc <OC2Config>
 80043d4:	4603      	mov	r3, r0
 80043d6:	75fb      	strb	r3, [r7, #23]
      break;
 80043d8:	e00e      	b.n	80043f8 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 f8ed 	bl	80045bc <OC3Config>
 80043e2:	4603      	mov	r3, r0
 80043e4:	75fb      	strb	r3, [r7, #23]
      break;
 80043e6:	e007      	b.n	80043f8 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80043e8:	6879      	ldr	r1, [r7, #4]
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f000 f956 	bl	800469c <OC4Config>
 80043f0:	4603      	mov	r3, r0
 80043f2:	75fb      	strb	r3, [r7, #23]
      break;
 80043f4:	e000      	b.n	80043f8 <LL_TIM_OC_Init+0x78>
      break;
 80043f6:	bf00      	nop
  }

  return result;
 80043f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	f023 0201 	bic.w	r2, r3, #1
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0303 	bic.w	r3, r3, #3
 8004432:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4313      	orrs	r3, r2
 8004440:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f023 0202 	bic.w	r2, r3, #2
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	4313      	orrs	r3, r2
 800444e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f023 0201 	bic.w	r2, r3, #1
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	4313      	orrs	r3, r2
 800445c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a1c      	ldr	r2, [pc, #112]	@ (80044d4 <OC1Config+0xd0>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d003      	beq.n	800446e <OC1Config+0x6a>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a1b      	ldr	r2, [pc, #108]	@ (80044d8 <OC1Config+0xd4>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d11e      	bne.n	80044ac <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f023 0208 	bic.w	r2, r3, #8
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4313      	orrs	r3, r2
 800447c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f023 0204 	bic.w	r2, r3, #4
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4313      	orrs	r3, r2
 800448c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	4313      	orrs	r3, r2
 800449a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	4313      	orrs	r3, r2
 80044aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	4619      	mov	r1, r3
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7ff fe7b 	bl	80041ba <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	40010000 	.word	0x40010000
 80044d8:	40010400 	.word	0x40010400

080044dc <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	f023 0210 	bic.w	r2, r3, #16
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800450a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	021b      	lsls	r3, r3, #8
 8004518:	4313      	orrs	r3, r2
 800451a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f023 0220 	bic.w	r2, r3, #32
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	4313      	orrs	r3, r2
 800452a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f023 0210 	bic.w	r2, r3, #16
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	011b      	lsls	r3, r3, #4
 8004538:	4313      	orrs	r3, r2
 800453a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a1d      	ldr	r2, [pc, #116]	@ (80045b4 <OC2Config+0xd8>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d003      	beq.n	800454c <OC2Config+0x70>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a1c      	ldr	r2, [pc, #112]	@ (80045b8 <OC2Config+0xdc>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d11f      	bne.n	800458c <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	019b      	lsls	r3, r3, #6
 8004558:	4313      	orrs	r3, r2
 800455a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	019b      	lsls	r3, r3, #6
 8004568:	4313      	orrs	r3, r2
 800456a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4313      	orrs	r3, r2
 800457a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	4313      	orrs	r3, r2
 800458a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	4619      	mov	r1, r3
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7ff fe19 	bl	80041d6 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3718      	adds	r7, #24
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	40010000 	.word	0x40010000
 80045b8:	40010400 	.word	0x40010400

080045bc <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f023 0303 	bic.w	r3, r3, #3
 80045ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	021b      	lsls	r3, r3, #8
 8004606:	4313      	orrs	r3, r2
 8004608:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	021b      	lsls	r3, r3, #8
 8004616:	4313      	orrs	r3, r2
 8004618:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a1d      	ldr	r2, [pc, #116]	@ (8004694 <OC3Config+0xd8>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d003      	beq.n	800462a <OC3Config+0x6e>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a1c      	ldr	r2, [pc, #112]	@ (8004698 <OC3Config+0xdc>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d11f      	bne.n	800466a <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	029b      	lsls	r3, r3, #10
 8004636:	4313      	orrs	r3, r2
 8004638:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	029b      	lsls	r3, r3, #10
 8004646:	4313      	orrs	r3, r2
 8004648:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	011b      	lsls	r3, r3, #4
 8004656:	4313      	orrs	r3, r2
 8004658:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	69db      	ldr	r3, [r3, #28]
 8004664:	015b      	lsls	r3, r3, #5
 8004666:	4313      	orrs	r3, r2
 8004668:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	4619      	mov	r1, r3
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f7ff fdb8 	bl	80041f2 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3718      	adds	r7, #24
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	40010000 	.word	0x40010000
 8004698:	40010400 	.word	0x40010400

0800469c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	021b      	lsls	r3, r3, #8
 80046d8:	4313      	orrs	r3, r2
 80046da:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	031b      	lsls	r3, r3, #12
 80046e8:	4313      	orrs	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	031b      	lsls	r3, r3, #12
 80046f8:	4313      	orrs	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a11      	ldr	r2, [pc, #68]	@ (8004744 <OC4Config+0xa8>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d003      	beq.n	800470c <OC4Config+0x70>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a10      	ldr	r2, [pc, #64]	@ (8004748 <OC4Config+0xac>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d107      	bne.n	800471c <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	019b      	lsls	r3, r3, #6
 8004718:	4313      	orrs	r3, r2
 800471a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	4619      	mov	r1, r3
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7ff fd6d 	bl	800420e <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3718      	adds	r7, #24
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	40010000 	.word	0x40010000
 8004748:	40010400 	.word	0x40010400

0800474c <LL_USART_IsEnabled>:
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800475c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004760:	bf0c      	ite	eq
 8004762:	2301      	moveq	r3, #1
 8004764:	2300      	movne	r3, #0
 8004766:	b2db      	uxtb	r3, r3
}
 8004768:	4618      	mov	r0, r3
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <LL_USART_SetStopBitsLength>:
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	431a      	orrs	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	611a      	str	r2, [r3, #16]
}
 800478e:	bf00      	nop
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <LL_USART_SetHWFlowCtrl>:
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	615a      	str	r2, [r3, #20]
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <LL_USART_SetBaudRate>:
{
 80047c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047c4:	b0c0      	sub	sp, #256	@ 0x100
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80047cc:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 80047d0:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80047d4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80047d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047e0:	f040 810c 	bne.w	80049fc <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80047e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80047e8:	2200      	movs	r2, #0
 80047ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80047ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80047f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80047f6:	4622      	mov	r2, r4
 80047f8:	462b      	mov	r3, r5
 80047fa:	1891      	adds	r1, r2, r2
 80047fc:	6639      	str	r1, [r7, #96]	@ 0x60
 80047fe:	415b      	adcs	r3, r3
 8004800:	667b      	str	r3, [r7, #100]	@ 0x64
 8004802:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8004806:	4621      	mov	r1, r4
 8004808:	eb12 0801 	adds.w	r8, r2, r1
 800480c:	4629      	mov	r1, r5
 800480e:	eb43 0901 	adc.w	r9, r3, r1
 8004812:	f04f 0200 	mov.w	r2, #0
 8004816:	f04f 0300 	mov.w	r3, #0
 800481a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800481e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004822:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004826:	4690      	mov	r8, r2
 8004828:	4699      	mov	r9, r3
 800482a:	4623      	mov	r3, r4
 800482c:	eb18 0303 	adds.w	r3, r8, r3
 8004830:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004834:	462b      	mov	r3, r5
 8004836:	eb49 0303 	adc.w	r3, r9, r3
 800483a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800483e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004842:	2200      	movs	r2, #0
 8004844:	469a      	mov	sl, r3
 8004846:	4693      	mov	fp, r2
 8004848:	eb1a 030a 	adds.w	r3, sl, sl
 800484c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800484e:	eb4b 030b 	adc.w	r3, fp, fp
 8004852:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004854:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004858:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800485c:	f7fc f9a4 	bl	8000ba8 <__aeabi_uldivmod>
 8004860:	4602      	mov	r2, r0
 8004862:	460b      	mov	r3, r1
 8004864:	4b64      	ldr	r3, [pc, #400]	@ (80049f8 <LL_USART_SetBaudRate+0x238>)
 8004866:	fba3 2302 	umull	r2, r3, r3, r2
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	b29b      	uxth	r3, r3
 800486e:	011b      	lsls	r3, r3, #4
 8004870:	b29c      	uxth	r4, r3
 8004872:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004876:	2200      	movs	r2, #0
 8004878:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800487c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004880:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8004884:	4642      	mov	r2, r8
 8004886:	464b      	mov	r3, r9
 8004888:	1891      	adds	r1, r2, r2
 800488a:	6539      	str	r1, [r7, #80]	@ 0x50
 800488c:	415b      	adcs	r3, r3
 800488e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004890:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004894:	4641      	mov	r1, r8
 8004896:	1851      	adds	r1, r2, r1
 8004898:	64b9      	str	r1, [r7, #72]	@ 0x48
 800489a:	4649      	mov	r1, r9
 800489c:	414b      	adcs	r3, r1
 800489e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048a0:	f04f 0200 	mov.w	r2, #0
 80048a4:	f04f 0300 	mov.w	r3, #0
 80048a8:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 80048ac:	4659      	mov	r1, fp
 80048ae:	00cb      	lsls	r3, r1, #3
 80048b0:	4651      	mov	r1, sl
 80048b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048b6:	4651      	mov	r1, sl
 80048b8:	00ca      	lsls	r2, r1, #3
 80048ba:	4610      	mov	r0, r2
 80048bc:	4619      	mov	r1, r3
 80048be:	4603      	mov	r3, r0
 80048c0:	4642      	mov	r2, r8
 80048c2:	189b      	adds	r3, r3, r2
 80048c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80048c8:	464b      	mov	r3, r9
 80048ca:	460a      	mov	r2, r1
 80048cc:	eb42 0303 	adc.w	r3, r2, r3
 80048d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80048d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80048d8:	2200      	movs	r2, #0
 80048da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80048de:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80048e2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80048e6:	460b      	mov	r3, r1
 80048e8:	18db      	adds	r3, r3, r3
 80048ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80048ec:	4613      	mov	r3, r2
 80048ee:	eb42 0303 	adc.w	r3, r2, r3
 80048f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80048f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80048f8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80048fc:	f7fc f954 	bl	8000ba8 <__aeabi_uldivmod>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4611      	mov	r1, r2
 8004906:	4b3c      	ldr	r3, [pc, #240]	@ (80049f8 <LL_USART_SetBaudRate+0x238>)
 8004908:	fba3 2301 	umull	r2, r3, r3, r1
 800490c:	095b      	lsrs	r3, r3, #5
 800490e:	2264      	movs	r2, #100	@ 0x64
 8004910:	fb02 f303 	mul.w	r3, r2, r3
 8004914:	1acb      	subs	r3, r1, r3
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800491c:	4b36      	ldr	r3, [pc, #216]	@ (80049f8 <LL_USART_SetBaudRate+0x238>)
 800491e:	fba3 2302 	umull	r2, r3, r3, r2
 8004922:	095b      	lsrs	r3, r3, #5
 8004924:	b29b      	uxth	r3, r3
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	b29b      	uxth	r3, r3
 800492a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800492e:	b29b      	uxth	r3, r3
 8004930:	4423      	add	r3, r4
 8004932:	b29c      	uxth	r4, r3
 8004934:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004938:	2200      	movs	r2, #0
 800493a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800493e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004942:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8004946:	4642      	mov	r2, r8
 8004948:	464b      	mov	r3, r9
 800494a:	1891      	adds	r1, r2, r2
 800494c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800494e:	415b      	adcs	r3, r3
 8004950:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004952:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004956:	4641      	mov	r1, r8
 8004958:	1851      	adds	r1, r2, r1
 800495a:	6339      	str	r1, [r7, #48]	@ 0x30
 800495c:	4649      	mov	r1, r9
 800495e:	414b      	adcs	r3, r1
 8004960:	637b      	str	r3, [r7, #52]	@ 0x34
 8004962:	f04f 0200 	mov.w	r2, #0
 8004966:	f04f 0300 	mov.w	r3, #0
 800496a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800496e:	4659      	mov	r1, fp
 8004970:	00cb      	lsls	r3, r1, #3
 8004972:	4651      	mov	r1, sl
 8004974:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004978:	4651      	mov	r1, sl
 800497a:	00ca      	lsls	r2, r1, #3
 800497c:	4610      	mov	r0, r2
 800497e:	4619      	mov	r1, r3
 8004980:	4603      	mov	r3, r0
 8004982:	4642      	mov	r2, r8
 8004984:	189b      	adds	r3, r3, r2
 8004986:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800498a:	464b      	mov	r3, r9
 800498c:	460a      	mov	r2, r1
 800498e:	eb42 0303 	adc.w	r3, r2, r3
 8004992:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004996:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800499a:	2200      	movs	r2, #0
 800499c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049a0:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80049a4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80049a8:	460b      	mov	r3, r1
 80049aa:	18db      	adds	r3, r3, r3
 80049ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049ae:	4613      	mov	r3, r2
 80049b0:	eb42 0303 	adc.w	r3, r2, r3
 80049b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80049ba:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80049be:	f7fc f8f3 	bl	8000ba8 <__aeabi_uldivmod>
 80049c2:	4602      	mov	r2, r0
 80049c4:	460b      	mov	r3, r1
 80049c6:	4b0c      	ldr	r3, [pc, #48]	@ (80049f8 <LL_USART_SetBaudRate+0x238>)
 80049c8:	fba3 1302 	umull	r1, r3, r3, r2
 80049cc:	095b      	lsrs	r3, r3, #5
 80049ce:	2164      	movs	r1, #100	@ 0x64
 80049d0:	fb01 f303 	mul.w	r3, r1, r3
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	3332      	adds	r3, #50	@ 0x32
 80049da:	4a07      	ldr	r2, [pc, #28]	@ (80049f8 <LL_USART_SetBaudRate+0x238>)
 80049dc:	fba2 2303 	umull	r2, r3, r2, r3
 80049e0:	095b      	lsrs	r3, r3, #5
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	f003 0307 	and.w	r3, r3, #7
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	4423      	add	r3, r4
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	461a      	mov	r2, r3
 80049f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049f4:	609a      	str	r2, [r3, #8]
}
 80049f6:	e108      	b.n	8004c0a <LL_USART_SetBaudRate+0x44a>
 80049f8:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80049fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004a00:	2200      	movs	r2, #0
 8004a02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a06:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004a0a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8004a0e:	4642      	mov	r2, r8
 8004a10:	464b      	mov	r3, r9
 8004a12:	1891      	adds	r1, r2, r2
 8004a14:	6239      	str	r1, [r7, #32]
 8004a16:	415b      	adcs	r3, r3
 8004a18:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a1e:	4641      	mov	r1, r8
 8004a20:	1854      	adds	r4, r2, r1
 8004a22:	4649      	mov	r1, r9
 8004a24:	eb43 0501 	adc.w	r5, r3, r1
 8004a28:	f04f 0200 	mov.w	r2, #0
 8004a2c:	f04f 0300 	mov.w	r3, #0
 8004a30:	00eb      	lsls	r3, r5, #3
 8004a32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a36:	00e2      	lsls	r2, r4, #3
 8004a38:	4614      	mov	r4, r2
 8004a3a:	461d      	mov	r5, r3
 8004a3c:	4643      	mov	r3, r8
 8004a3e:	18e3      	adds	r3, r4, r3
 8004a40:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004a44:	464b      	mov	r3, r9
 8004a46:	eb45 0303 	adc.w	r3, r5, r3
 8004a4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004a4e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004a52:	2200      	movs	r2, #0
 8004a54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a58:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004a5c:	f04f 0200 	mov.w	r2, #0
 8004a60:	f04f 0300 	mov.w	r3, #0
 8004a64:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8004a68:	4629      	mov	r1, r5
 8004a6a:	008b      	lsls	r3, r1, #2
 8004a6c:	4621      	mov	r1, r4
 8004a6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a72:	4621      	mov	r1, r4
 8004a74:	008a      	lsls	r2, r1, #2
 8004a76:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8004a7a:	f7fc f895 	bl	8000ba8 <__aeabi_uldivmod>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	460b      	mov	r3, r1
 8004a82:	4b65      	ldr	r3, [pc, #404]	@ (8004c18 <LL_USART_SetBaudRate+0x458>)
 8004a84:	fba3 2302 	umull	r2, r3, r3, r2
 8004a88:	095b      	lsrs	r3, r3, #5
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	011b      	lsls	r3, r3, #4
 8004a8e:	b29c      	uxth	r4, r3
 8004a90:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004a94:	2200      	movs	r2, #0
 8004a96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a9e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8004aa2:	4642      	mov	r2, r8
 8004aa4:	464b      	mov	r3, r9
 8004aa6:	1891      	adds	r1, r2, r2
 8004aa8:	61b9      	str	r1, [r7, #24]
 8004aaa:	415b      	adcs	r3, r3
 8004aac:	61fb      	str	r3, [r7, #28]
 8004aae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ab2:	4641      	mov	r1, r8
 8004ab4:	1851      	adds	r1, r2, r1
 8004ab6:	6139      	str	r1, [r7, #16]
 8004ab8:	4649      	mov	r1, r9
 8004aba:	414b      	adcs	r3, r1
 8004abc:	617b      	str	r3, [r7, #20]
 8004abe:	f04f 0200 	mov.w	r2, #0
 8004ac2:	f04f 0300 	mov.w	r3, #0
 8004ac6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004aca:	4659      	mov	r1, fp
 8004acc:	00cb      	lsls	r3, r1, #3
 8004ace:	4651      	mov	r1, sl
 8004ad0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ad4:	4651      	mov	r1, sl
 8004ad6:	00ca      	lsls	r2, r1, #3
 8004ad8:	4610      	mov	r0, r2
 8004ada:	4619      	mov	r1, r3
 8004adc:	4603      	mov	r3, r0
 8004ade:	4642      	mov	r2, r8
 8004ae0:	189b      	adds	r3, r3, r2
 8004ae2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ae6:	464b      	mov	r3, r9
 8004ae8:	460a      	mov	r2, r1
 8004aea:	eb42 0303 	adc.w	r3, r2, r3
 8004aee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004af2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004af6:	2200      	movs	r2, #0
 8004af8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004afc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	f04f 0300 	mov.w	r3, #0
 8004b08:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8004b0c:	4649      	mov	r1, r9
 8004b0e:	008b      	lsls	r3, r1, #2
 8004b10:	4641      	mov	r1, r8
 8004b12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b16:	4641      	mov	r1, r8
 8004b18:	008a      	lsls	r2, r1, #2
 8004b1a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8004b1e:	f7fc f843 	bl	8000ba8 <__aeabi_uldivmod>
 8004b22:	4602      	mov	r2, r0
 8004b24:	460b      	mov	r3, r1
 8004b26:	4611      	mov	r1, r2
 8004b28:	4b3b      	ldr	r3, [pc, #236]	@ (8004c18 <LL_USART_SetBaudRate+0x458>)
 8004b2a:	fba3 2301 	umull	r2, r3, r3, r1
 8004b2e:	095b      	lsrs	r3, r3, #5
 8004b30:	2264      	movs	r2, #100	@ 0x64
 8004b32:	fb02 f303 	mul.w	r3, r2, r3
 8004b36:	1acb      	subs	r3, r1, r3
 8004b38:	011b      	lsls	r3, r3, #4
 8004b3a:	3332      	adds	r3, #50	@ 0x32
 8004b3c:	4a36      	ldr	r2, [pc, #216]	@ (8004c18 <LL_USART_SetBaudRate+0x458>)
 8004b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b42:	095b      	lsrs	r3, r3, #5
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	4423      	add	r3, r4
 8004b4e:	b29c      	uxth	r4, r3
 8004b50:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b54:	2200      	movs	r2, #0
 8004b56:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b58:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004b5a:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004b5e:	4642      	mov	r2, r8
 8004b60:	464b      	mov	r3, r9
 8004b62:	1891      	adds	r1, r2, r2
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	415b      	adcs	r3, r3
 8004b68:	60fb      	str	r3, [r7, #12]
 8004b6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b6e:	4641      	mov	r1, r8
 8004b70:	1851      	adds	r1, r2, r1
 8004b72:	6039      	str	r1, [r7, #0]
 8004b74:	4649      	mov	r1, r9
 8004b76:	414b      	adcs	r3, r1
 8004b78:	607b      	str	r3, [r7, #4]
 8004b7a:	f04f 0200 	mov.w	r2, #0
 8004b7e:	f04f 0300 	mov.w	r3, #0
 8004b82:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b86:	4659      	mov	r1, fp
 8004b88:	00cb      	lsls	r3, r1, #3
 8004b8a:	4651      	mov	r1, sl
 8004b8c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b90:	4651      	mov	r1, sl
 8004b92:	00ca      	lsls	r2, r1, #3
 8004b94:	4610      	mov	r0, r2
 8004b96:	4619      	mov	r1, r3
 8004b98:	4603      	mov	r3, r0
 8004b9a:	4642      	mov	r2, r8
 8004b9c:	189b      	adds	r3, r3, r2
 8004b9e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ba0:	464b      	mov	r3, r9
 8004ba2:	460a      	mov	r2, r1
 8004ba4:	eb42 0303 	adc.w	r3, r2, r3
 8004ba8:	677b      	str	r3, [r7, #116]	@ 0x74
 8004baa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004bae:	2200      	movs	r2, #0
 8004bb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bb2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004bb4:	f04f 0200 	mov.w	r2, #0
 8004bb8:	f04f 0300 	mov.w	r3, #0
 8004bbc:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8004bc0:	4649      	mov	r1, r9
 8004bc2:	008b      	lsls	r3, r1, #2
 8004bc4:	4641      	mov	r1, r8
 8004bc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bca:	4641      	mov	r1, r8
 8004bcc:	008a      	lsls	r2, r1, #2
 8004bce:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004bd2:	f7fb ffe9 	bl	8000ba8 <__aeabi_uldivmod>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	460b      	mov	r3, r1
 8004bda:	4b0f      	ldr	r3, [pc, #60]	@ (8004c18 <LL_USART_SetBaudRate+0x458>)
 8004bdc:	fba3 1302 	umull	r1, r3, r3, r2
 8004be0:	095b      	lsrs	r3, r3, #5
 8004be2:	2164      	movs	r1, #100	@ 0x64
 8004be4:	fb01 f303 	mul.w	r3, r1, r3
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	011b      	lsls	r3, r3, #4
 8004bec:	3332      	adds	r3, #50	@ 0x32
 8004bee:	4a0a      	ldr	r2, [pc, #40]	@ (8004c18 <LL_USART_SetBaudRate+0x458>)
 8004bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf4:	095b      	lsrs	r3, r3, #5
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	f003 030f 	and.w	r3, r3, #15
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	4423      	add	r3, r4
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	461a      	mov	r2, r3
 8004c04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c08:	609a      	str	r2, [r3, #8]
}
 8004c0a:	bf00      	nop
 8004c0c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004c10:	46bd      	mov	sp, r7
 8004c12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c16:	bf00      	nop
 8004c18:	51eb851f 	.word	0x51eb851f

08004c1c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b088      	sub	sp, #32
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7ff fd8c 	bl	800474c <LL_USART_IsEnabled>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d15e      	bne.n	8004cf8 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004c42:	f023 030c 	bic.w	r3, r3, #12
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	6851      	ldr	r1, [r2, #4]
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	68d2      	ldr	r2, [r2, #12]
 8004c4e:	4311      	orrs	r1, r2
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	6912      	ldr	r2, [r2, #16]
 8004c54:	4311      	orrs	r1, r2
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	6992      	ldr	r2, [r2, #24]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	4619      	mov	r1, r3
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f7ff fd83 	bl	8004774 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	4619      	mov	r1, r3
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7ff fd90 	bl	800479a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004c7a:	f107 0308 	add.w	r3, r7, #8
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7ff f932 	bl	8003ee8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a1f      	ldr	r2, [pc, #124]	@ (8004d04 <LL_USART_Init+0xe8>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d102      	bne.n	8004c92 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	61bb      	str	r3, [r7, #24]
 8004c90:	e021      	b.n	8004cd6 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a1c      	ldr	r2, [pc, #112]	@ (8004d08 <LL_USART_Init+0xec>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d102      	bne.n	8004ca0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	61bb      	str	r3, [r7, #24]
 8004c9e:	e01a      	b.n	8004cd6 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a1a      	ldr	r2, [pc, #104]	@ (8004d0c <LL_USART_Init+0xf0>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d102      	bne.n	8004cae <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	61bb      	str	r3, [r7, #24]
 8004cac:	e013      	b.n	8004cd6 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a17      	ldr	r2, [pc, #92]	@ (8004d10 <LL_USART_Init+0xf4>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d102      	bne.n	8004cbc <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	61bb      	str	r3, [r7, #24]
 8004cba:	e00c      	b.n	8004cd6 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a15      	ldr	r2, [pc, #84]	@ (8004d14 <LL_USART_Init+0xf8>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d102      	bne.n	8004cca <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	61bb      	str	r3, [r7, #24]
 8004cc8:	e005      	b.n	8004cd6 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a12      	ldr	r2, [pc, #72]	@ (8004d18 <LL_USART_Init+0xfc>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d101      	bne.n	8004cd6 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00d      	beq.n	8004cf8 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d009      	beq.n	8004cf8 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8004cf0:	69b9      	ldr	r1, [r7, #24]
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7ff fd64 	bl	80047c0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004cf8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3720      	adds	r7, #32
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	40011000 	.word	0x40011000
 8004d08:	40004400 	.word	0x40004400
 8004d0c:	40004800 	.word	0x40004800
 8004d10:	40011400 	.word	0x40011400
 8004d14:	40004c00 	.word	0x40004c00
 8004d18:	40005000 	.word	0x40005000

08004d1c <__cvt>:
 8004d1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d20:	ec57 6b10 	vmov	r6, r7, d0
 8004d24:	2f00      	cmp	r7, #0
 8004d26:	460c      	mov	r4, r1
 8004d28:	4619      	mov	r1, r3
 8004d2a:	463b      	mov	r3, r7
 8004d2c:	bfbb      	ittet	lt
 8004d2e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004d32:	461f      	movlt	r7, r3
 8004d34:	2300      	movge	r3, #0
 8004d36:	232d      	movlt	r3, #45	@ 0x2d
 8004d38:	700b      	strb	r3, [r1, #0]
 8004d3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d3c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004d40:	4691      	mov	r9, r2
 8004d42:	f023 0820 	bic.w	r8, r3, #32
 8004d46:	bfbc      	itt	lt
 8004d48:	4632      	movlt	r2, r6
 8004d4a:	4616      	movlt	r6, r2
 8004d4c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004d50:	d005      	beq.n	8004d5e <__cvt+0x42>
 8004d52:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004d56:	d100      	bne.n	8004d5a <__cvt+0x3e>
 8004d58:	3401      	adds	r4, #1
 8004d5a:	2102      	movs	r1, #2
 8004d5c:	e000      	b.n	8004d60 <__cvt+0x44>
 8004d5e:	2103      	movs	r1, #3
 8004d60:	ab03      	add	r3, sp, #12
 8004d62:	9301      	str	r3, [sp, #4]
 8004d64:	ab02      	add	r3, sp, #8
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	ec47 6b10 	vmov	d0, r6, r7
 8004d6c:	4653      	mov	r3, sl
 8004d6e:	4622      	mov	r2, r4
 8004d70:	f000 ff3e 	bl	8005bf0 <_dtoa_r>
 8004d74:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004d78:	4605      	mov	r5, r0
 8004d7a:	d119      	bne.n	8004db0 <__cvt+0x94>
 8004d7c:	f019 0f01 	tst.w	r9, #1
 8004d80:	d00e      	beq.n	8004da0 <__cvt+0x84>
 8004d82:	eb00 0904 	add.w	r9, r0, r4
 8004d86:	2200      	movs	r2, #0
 8004d88:	2300      	movs	r3, #0
 8004d8a:	4630      	mov	r0, r6
 8004d8c:	4639      	mov	r1, r7
 8004d8e:	f7fb fe9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d92:	b108      	cbz	r0, 8004d98 <__cvt+0x7c>
 8004d94:	f8cd 900c 	str.w	r9, [sp, #12]
 8004d98:	2230      	movs	r2, #48	@ 0x30
 8004d9a:	9b03      	ldr	r3, [sp, #12]
 8004d9c:	454b      	cmp	r3, r9
 8004d9e:	d31e      	bcc.n	8004dde <__cvt+0xc2>
 8004da0:	9b03      	ldr	r3, [sp, #12]
 8004da2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004da4:	1b5b      	subs	r3, r3, r5
 8004da6:	4628      	mov	r0, r5
 8004da8:	6013      	str	r3, [r2, #0]
 8004daa:	b004      	add	sp, #16
 8004dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004db0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004db4:	eb00 0904 	add.w	r9, r0, r4
 8004db8:	d1e5      	bne.n	8004d86 <__cvt+0x6a>
 8004dba:	7803      	ldrb	r3, [r0, #0]
 8004dbc:	2b30      	cmp	r3, #48	@ 0x30
 8004dbe:	d10a      	bne.n	8004dd6 <__cvt+0xba>
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	4630      	mov	r0, r6
 8004dc6:	4639      	mov	r1, r7
 8004dc8:	f7fb fe7e 	bl	8000ac8 <__aeabi_dcmpeq>
 8004dcc:	b918      	cbnz	r0, 8004dd6 <__cvt+0xba>
 8004dce:	f1c4 0401 	rsb	r4, r4, #1
 8004dd2:	f8ca 4000 	str.w	r4, [sl]
 8004dd6:	f8da 3000 	ldr.w	r3, [sl]
 8004dda:	4499      	add	r9, r3
 8004ddc:	e7d3      	b.n	8004d86 <__cvt+0x6a>
 8004dde:	1c59      	adds	r1, r3, #1
 8004de0:	9103      	str	r1, [sp, #12]
 8004de2:	701a      	strb	r2, [r3, #0]
 8004de4:	e7d9      	b.n	8004d9a <__cvt+0x7e>

08004de6 <__exponent>:
 8004de6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004de8:	2900      	cmp	r1, #0
 8004dea:	bfba      	itte	lt
 8004dec:	4249      	neglt	r1, r1
 8004dee:	232d      	movlt	r3, #45	@ 0x2d
 8004df0:	232b      	movge	r3, #43	@ 0x2b
 8004df2:	2909      	cmp	r1, #9
 8004df4:	7002      	strb	r2, [r0, #0]
 8004df6:	7043      	strb	r3, [r0, #1]
 8004df8:	dd29      	ble.n	8004e4e <__exponent+0x68>
 8004dfa:	f10d 0307 	add.w	r3, sp, #7
 8004dfe:	461d      	mov	r5, r3
 8004e00:	270a      	movs	r7, #10
 8004e02:	461a      	mov	r2, r3
 8004e04:	fbb1 f6f7 	udiv	r6, r1, r7
 8004e08:	fb07 1416 	mls	r4, r7, r6, r1
 8004e0c:	3430      	adds	r4, #48	@ 0x30
 8004e0e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004e12:	460c      	mov	r4, r1
 8004e14:	2c63      	cmp	r4, #99	@ 0x63
 8004e16:	f103 33ff 	add.w	r3, r3, #4294967295
 8004e1a:	4631      	mov	r1, r6
 8004e1c:	dcf1      	bgt.n	8004e02 <__exponent+0x1c>
 8004e1e:	3130      	adds	r1, #48	@ 0x30
 8004e20:	1e94      	subs	r4, r2, #2
 8004e22:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004e26:	1c41      	adds	r1, r0, #1
 8004e28:	4623      	mov	r3, r4
 8004e2a:	42ab      	cmp	r3, r5
 8004e2c:	d30a      	bcc.n	8004e44 <__exponent+0x5e>
 8004e2e:	f10d 0309 	add.w	r3, sp, #9
 8004e32:	1a9b      	subs	r3, r3, r2
 8004e34:	42ac      	cmp	r4, r5
 8004e36:	bf88      	it	hi
 8004e38:	2300      	movhi	r3, #0
 8004e3a:	3302      	adds	r3, #2
 8004e3c:	4403      	add	r3, r0
 8004e3e:	1a18      	subs	r0, r3, r0
 8004e40:	b003      	add	sp, #12
 8004e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e44:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004e48:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004e4c:	e7ed      	b.n	8004e2a <__exponent+0x44>
 8004e4e:	2330      	movs	r3, #48	@ 0x30
 8004e50:	3130      	adds	r1, #48	@ 0x30
 8004e52:	7083      	strb	r3, [r0, #2]
 8004e54:	70c1      	strb	r1, [r0, #3]
 8004e56:	1d03      	adds	r3, r0, #4
 8004e58:	e7f1      	b.n	8004e3e <__exponent+0x58>
	...

08004e5c <_printf_float>:
 8004e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e60:	b08d      	sub	sp, #52	@ 0x34
 8004e62:	460c      	mov	r4, r1
 8004e64:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004e68:	4616      	mov	r6, r2
 8004e6a:	461f      	mov	r7, r3
 8004e6c:	4605      	mov	r5, r0
 8004e6e:	f000 fdbf 	bl	80059f0 <_localeconv_r>
 8004e72:	6803      	ldr	r3, [r0, #0]
 8004e74:	9304      	str	r3, [sp, #16]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7fb f9fa 	bl	8000270 <strlen>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e80:	f8d8 3000 	ldr.w	r3, [r8]
 8004e84:	9005      	str	r0, [sp, #20]
 8004e86:	3307      	adds	r3, #7
 8004e88:	f023 0307 	bic.w	r3, r3, #7
 8004e8c:	f103 0208 	add.w	r2, r3, #8
 8004e90:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004e94:	f8d4 b000 	ldr.w	fp, [r4]
 8004e98:	f8c8 2000 	str.w	r2, [r8]
 8004e9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004ea0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004ea4:	9307      	str	r3, [sp, #28]
 8004ea6:	f8cd 8018 	str.w	r8, [sp, #24]
 8004eaa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004eae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004eb2:	4b9c      	ldr	r3, [pc, #624]	@ (8005124 <_printf_float+0x2c8>)
 8004eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb8:	f7fb fe38 	bl	8000b2c <__aeabi_dcmpun>
 8004ebc:	bb70      	cbnz	r0, 8004f1c <_printf_float+0xc0>
 8004ebe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ec2:	4b98      	ldr	r3, [pc, #608]	@ (8005124 <_printf_float+0x2c8>)
 8004ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec8:	f7fb fe12 	bl	8000af0 <__aeabi_dcmple>
 8004ecc:	bb30      	cbnz	r0, 8004f1c <_printf_float+0xc0>
 8004ece:	2200      	movs	r2, #0
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	4640      	mov	r0, r8
 8004ed4:	4649      	mov	r1, r9
 8004ed6:	f7fb fe01 	bl	8000adc <__aeabi_dcmplt>
 8004eda:	b110      	cbz	r0, 8004ee2 <_printf_float+0x86>
 8004edc:	232d      	movs	r3, #45	@ 0x2d
 8004ede:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ee2:	4a91      	ldr	r2, [pc, #580]	@ (8005128 <_printf_float+0x2cc>)
 8004ee4:	4b91      	ldr	r3, [pc, #580]	@ (800512c <_printf_float+0x2d0>)
 8004ee6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004eea:	bf94      	ite	ls
 8004eec:	4690      	movls	r8, r2
 8004eee:	4698      	movhi	r8, r3
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	6123      	str	r3, [r4, #16]
 8004ef4:	f02b 0304 	bic.w	r3, fp, #4
 8004ef8:	6023      	str	r3, [r4, #0]
 8004efa:	f04f 0900 	mov.w	r9, #0
 8004efe:	9700      	str	r7, [sp, #0]
 8004f00:	4633      	mov	r3, r6
 8004f02:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004f04:	4621      	mov	r1, r4
 8004f06:	4628      	mov	r0, r5
 8004f08:	f000 f9d2 	bl	80052b0 <_printf_common>
 8004f0c:	3001      	adds	r0, #1
 8004f0e:	f040 808d 	bne.w	800502c <_printf_float+0x1d0>
 8004f12:	f04f 30ff 	mov.w	r0, #4294967295
 8004f16:	b00d      	add	sp, #52	@ 0x34
 8004f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f1c:	4642      	mov	r2, r8
 8004f1e:	464b      	mov	r3, r9
 8004f20:	4640      	mov	r0, r8
 8004f22:	4649      	mov	r1, r9
 8004f24:	f7fb fe02 	bl	8000b2c <__aeabi_dcmpun>
 8004f28:	b140      	cbz	r0, 8004f3c <_printf_float+0xe0>
 8004f2a:	464b      	mov	r3, r9
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	bfbc      	itt	lt
 8004f30:	232d      	movlt	r3, #45	@ 0x2d
 8004f32:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004f36:	4a7e      	ldr	r2, [pc, #504]	@ (8005130 <_printf_float+0x2d4>)
 8004f38:	4b7e      	ldr	r3, [pc, #504]	@ (8005134 <_printf_float+0x2d8>)
 8004f3a:	e7d4      	b.n	8004ee6 <_printf_float+0x8a>
 8004f3c:	6863      	ldr	r3, [r4, #4]
 8004f3e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004f42:	9206      	str	r2, [sp, #24]
 8004f44:	1c5a      	adds	r2, r3, #1
 8004f46:	d13b      	bne.n	8004fc0 <_printf_float+0x164>
 8004f48:	2306      	movs	r3, #6
 8004f4a:	6063      	str	r3, [r4, #4]
 8004f4c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004f50:	2300      	movs	r3, #0
 8004f52:	6022      	str	r2, [r4, #0]
 8004f54:	9303      	str	r3, [sp, #12]
 8004f56:	ab0a      	add	r3, sp, #40	@ 0x28
 8004f58:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004f5c:	ab09      	add	r3, sp, #36	@ 0x24
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	6861      	ldr	r1, [r4, #4]
 8004f62:	ec49 8b10 	vmov	d0, r8, r9
 8004f66:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	f7ff fed6 	bl	8004d1c <__cvt>
 8004f70:	9b06      	ldr	r3, [sp, #24]
 8004f72:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004f74:	2b47      	cmp	r3, #71	@ 0x47
 8004f76:	4680      	mov	r8, r0
 8004f78:	d129      	bne.n	8004fce <_printf_float+0x172>
 8004f7a:	1cc8      	adds	r0, r1, #3
 8004f7c:	db02      	blt.n	8004f84 <_printf_float+0x128>
 8004f7e:	6863      	ldr	r3, [r4, #4]
 8004f80:	4299      	cmp	r1, r3
 8004f82:	dd41      	ble.n	8005008 <_printf_float+0x1ac>
 8004f84:	f1aa 0a02 	sub.w	sl, sl, #2
 8004f88:	fa5f fa8a 	uxtb.w	sl, sl
 8004f8c:	3901      	subs	r1, #1
 8004f8e:	4652      	mov	r2, sl
 8004f90:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004f94:	9109      	str	r1, [sp, #36]	@ 0x24
 8004f96:	f7ff ff26 	bl	8004de6 <__exponent>
 8004f9a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004f9c:	1813      	adds	r3, r2, r0
 8004f9e:	2a01      	cmp	r2, #1
 8004fa0:	4681      	mov	r9, r0
 8004fa2:	6123      	str	r3, [r4, #16]
 8004fa4:	dc02      	bgt.n	8004fac <_printf_float+0x150>
 8004fa6:	6822      	ldr	r2, [r4, #0]
 8004fa8:	07d2      	lsls	r2, r2, #31
 8004faa:	d501      	bpl.n	8004fb0 <_printf_float+0x154>
 8004fac:	3301      	adds	r3, #1
 8004fae:	6123      	str	r3, [r4, #16]
 8004fb0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d0a2      	beq.n	8004efe <_printf_float+0xa2>
 8004fb8:	232d      	movs	r3, #45	@ 0x2d
 8004fba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fbe:	e79e      	b.n	8004efe <_printf_float+0xa2>
 8004fc0:	9a06      	ldr	r2, [sp, #24]
 8004fc2:	2a47      	cmp	r2, #71	@ 0x47
 8004fc4:	d1c2      	bne.n	8004f4c <_printf_float+0xf0>
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1c0      	bne.n	8004f4c <_printf_float+0xf0>
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e7bd      	b.n	8004f4a <_printf_float+0xee>
 8004fce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004fd2:	d9db      	bls.n	8004f8c <_printf_float+0x130>
 8004fd4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004fd8:	d118      	bne.n	800500c <_printf_float+0x1b0>
 8004fda:	2900      	cmp	r1, #0
 8004fdc:	6863      	ldr	r3, [r4, #4]
 8004fde:	dd0b      	ble.n	8004ff8 <_printf_float+0x19c>
 8004fe0:	6121      	str	r1, [r4, #16]
 8004fe2:	b913      	cbnz	r3, 8004fea <_printf_float+0x18e>
 8004fe4:	6822      	ldr	r2, [r4, #0]
 8004fe6:	07d0      	lsls	r0, r2, #31
 8004fe8:	d502      	bpl.n	8004ff0 <_printf_float+0x194>
 8004fea:	3301      	adds	r3, #1
 8004fec:	440b      	add	r3, r1
 8004fee:	6123      	str	r3, [r4, #16]
 8004ff0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004ff2:	f04f 0900 	mov.w	r9, #0
 8004ff6:	e7db      	b.n	8004fb0 <_printf_float+0x154>
 8004ff8:	b913      	cbnz	r3, 8005000 <_printf_float+0x1a4>
 8004ffa:	6822      	ldr	r2, [r4, #0]
 8004ffc:	07d2      	lsls	r2, r2, #31
 8004ffe:	d501      	bpl.n	8005004 <_printf_float+0x1a8>
 8005000:	3302      	adds	r3, #2
 8005002:	e7f4      	b.n	8004fee <_printf_float+0x192>
 8005004:	2301      	movs	r3, #1
 8005006:	e7f2      	b.n	8004fee <_printf_float+0x192>
 8005008:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800500c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800500e:	4299      	cmp	r1, r3
 8005010:	db05      	blt.n	800501e <_printf_float+0x1c2>
 8005012:	6823      	ldr	r3, [r4, #0]
 8005014:	6121      	str	r1, [r4, #16]
 8005016:	07d8      	lsls	r0, r3, #31
 8005018:	d5ea      	bpl.n	8004ff0 <_printf_float+0x194>
 800501a:	1c4b      	adds	r3, r1, #1
 800501c:	e7e7      	b.n	8004fee <_printf_float+0x192>
 800501e:	2900      	cmp	r1, #0
 8005020:	bfd4      	ite	le
 8005022:	f1c1 0202 	rsble	r2, r1, #2
 8005026:	2201      	movgt	r2, #1
 8005028:	4413      	add	r3, r2
 800502a:	e7e0      	b.n	8004fee <_printf_float+0x192>
 800502c:	6823      	ldr	r3, [r4, #0]
 800502e:	055a      	lsls	r2, r3, #21
 8005030:	d407      	bmi.n	8005042 <_printf_float+0x1e6>
 8005032:	6923      	ldr	r3, [r4, #16]
 8005034:	4642      	mov	r2, r8
 8005036:	4631      	mov	r1, r6
 8005038:	4628      	mov	r0, r5
 800503a:	47b8      	blx	r7
 800503c:	3001      	adds	r0, #1
 800503e:	d12b      	bne.n	8005098 <_printf_float+0x23c>
 8005040:	e767      	b.n	8004f12 <_printf_float+0xb6>
 8005042:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005046:	f240 80dd 	bls.w	8005204 <_printf_float+0x3a8>
 800504a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800504e:	2200      	movs	r2, #0
 8005050:	2300      	movs	r3, #0
 8005052:	f7fb fd39 	bl	8000ac8 <__aeabi_dcmpeq>
 8005056:	2800      	cmp	r0, #0
 8005058:	d033      	beq.n	80050c2 <_printf_float+0x266>
 800505a:	4a37      	ldr	r2, [pc, #220]	@ (8005138 <_printf_float+0x2dc>)
 800505c:	2301      	movs	r3, #1
 800505e:	4631      	mov	r1, r6
 8005060:	4628      	mov	r0, r5
 8005062:	47b8      	blx	r7
 8005064:	3001      	adds	r0, #1
 8005066:	f43f af54 	beq.w	8004f12 <_printf_float+0xb6>
 800506a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800506e:	4543      	cmp	r3, r8
 8005070:	db02      	blt.n	8005078 <_printf_float+0x21c>
 8005072:	6823      	ldr	r3, [r4, #0]
 8005074:	07d8      	lsls	r0, r3, #31
 8005076:	d50f      	bpl.n	8005098 <_printf_float+0x23c>
 8005078:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800507c:	4631      	mov	r1, r6
 800507e:	4628      	mov	r0, r5
 8005080:	47b8      	blx	r7
 8005082:	3001      	adds	r0, #1
 8005084:	f43f af45 	beq.w	8004f12 <_printf_float+0xb6>
 8005088:	f04f 0900 	mov.w	r9, #0
 800508c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005090:	f104 0a1a 	add.w	sl, r4, #26
 8005094:	45c8      	cmp	r8, r9
 8005096:	dc09      	bgt.n	80050ac <_printf_float+0x250>
 8005098:	6823      	ldr	r3, [r4, #0]
 800509a:	079b      	lsls	r3, r3, #30
 800509c:	f100 8103 	bmi.w	80052a6 <_printf_float+0x44a>
 80050a0:	68e0      	ldr	r0, [r4, #12]
 80050a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80050a4:	4298      	cmp	r0, r3
 80050a6:	bfb8      	it	lt
 80050a8:	4618      	movlt	r0, r3
 80050aa:	e734      	b.n	8004f16 <_printf_float+0xba>
 80050ac:	2301      	movs	r3, #1
 80050ae:	4652      	mov	r2, sl
 80050b0:	4631      	mov	r1, r6
 80050b2:	4628      	mov	r0, r5
 80050b4:	47b8      	blx	r7
 80050b6:	3001      	adds	r0, #1
 80050b8:	f43f af2b 	beq.w	8004f12 <_printf_float+0xb6>
 80050bc:	f109 0901 	add.w	r9, r9, #1
 80050c0:	e7e8      	b.n	8005094 <_printf_float+0x238>
 80050c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	dc39      	bgt.n	800513c <_printf_float+0x2e0>
 80050c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005138 <_printf_float+0x2dc>)
 80050ca:	2301      	movs	r3, #1
 80050cc:	4631      	mov	r1, r6
 80050ce:	4628      	mov	r0, r5
 80050d0:	47b8      	blx	r7
 80050d2:	3001      	adds	r0, #1
 80050d4:	f43f af1d 	beq.w	8004f12 <_printf_float+0xb6>
 80050d8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80050dc:	ea59 0303 	orrs.w	r3, r9, r3
 80050e0:	d102      	bne.n	80050e8 <_printf_float+0x28c>
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	07d9      	lsls	r1, r3, #31
 80050e6:	d5d7      	bpl.n	8005098 <_printf_float+0x23c>
 80050e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050ec:	4631      	mov	r1, r6
 80050ee:	4628      	mov	r0, r5
 80050f0:	47b8      	blx	r7
 80050f2:	3001      	adds	r0, #1
 80050f4:	f43f af0d 	beq.w	8004f12 <_printf_float+0xb6>
 80050f8:	f04f 0a00 	mov.w	sl, #0
 80050fc:	f104 0b1a 	add.w	fp, r4, #26
 8005100:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005102:	425b      	negs	r3, r3
 8005104:	4553      	cmp	r3, sl
 8005106:	dc01      	bgt.n	800510c <_printf_float+0x2b0>
 8005108:	464b      	mov	r3, r9
 800510a:	e793      	b.n	8005034 <_printf_float+0x1d8>
 800510c:	2301      	movs	r3, #1
 800510e:	465a      	mov	r2, fp
 8005110:	4631      	mov	r1, r6
 8005112:	4628      	mov	r0, r5
 8005114:	47b8      	blx	r7
 8005116:	3001      	adds	r0, #1
 8005118:	f43f aefb 	beq.w	8004f12 <_printf_float+0xb6>
 800511c:	f10a 0a01 	add.w	sl, sl, #1
 8005120:	e7ee      	b.n	8005100 <_printf_float+0x2a4>
 8005122:	bf00      	nop
 8005124:	7fefffff 	.word	0x7fefffff
 8005128:	0800804b 	.word	0x0800804b
 800512c:	0800804f 	.word	0x0800804f
 8005130:	08008053 	.word	0x08008053
 8005134:	08008057 	.word	0x08008057
 8005138:	0800805b 	.word	0x0800805b
 800513c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800513e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005142:	4553      	cmp	r3, sl
 8005144:	bfa8      	it	ge
 8005146:	4653      	movge	r3, sl
 8005148:	2b00      	cmp	r3, #0
 800514a:	4699      	mov	r9, r3
 800514c:	dc36      	bgt.n	80051bc <_printf_float+0x360>
 800514e:	f04f 0b00 	mov.w	fp, #0
 8005152:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005156:	f104 021a 	add.w	r2, r4, #26
 800515a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800515c:	9306      	str	r3, [sp, #24]
 800515e:	eba3 0309 	sub.w	r3, r3, r9
 8005162:	455b      	cmp	r3, fp
 8005164:	dc31      	bgt.n	80051ca <_printf_float+0x36e>
 8005166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005168:	459a      	cmp	sl, r3
 800516a:	dc3a      	bgt.n	80051e2 <_printf_float+0x386>
 800516c:	6823      	ldr	r3, [r4, #0]
 800516e:	07da      	lsls	r2, r3, #31
 8005170:	d437      	bmi.n	80051e2 <_printf_float+0x386>
 8005172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005174:	ebaa 0903 	sub.w	r9, sl, r3
 8005178:	9b06      	ldr	r3, [sp, #24]
 800517a:	ebaa 0303 	sub.w	r3, sl, r3
 800517e:	4599      	cmp	r9, r3
 8005180:	bfa8      	it	ge
 8005182:	4699      	movge	r9, r3
 8005184:	f1b9 0f00 	cmp.w	r9, #0
 8005188:	dc33      	bgt.n	80051f2 <_printf_float+0x396>
 800518a:	f04f 0800 	mov.w	r8, #0
 800518e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005192:	f104 0b1a 	add.w	fp, r4, #26
 8005196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005198:	ebaa 0303 	sub.w	r3, sl, r3
 800519c:	eba3 0309 	sub.w	r3, r3, r9
 80051a0:	4543      	cmp	r3, r8
 80051a2:	f77f af79 	ble.w	8005098 <_printf_float+0x23c>
 80051a6:	2301      	movs	r3, #1
 80051a8:	465a      	mov	r2, fp
 80051aa:	4631      	mov	r1, r6
 80051ac:	4628      	mov	r0, r5
 80051ae:	47b8      	blx	r7
 80051b0:	3001      	adds	r0, #1
 80051b2:	f43f aeae 	beq.w	8004f12 <_printf_float+0xb6>
 80051b6:	f108 0801 	add.w	r8, r8, #1
 80051ba:	e7ec      	b.n	8005196 <_printf_float+0x33a>
 80051bc:	4642      	mov	r2, r8
 80051be:	4631      	mov	r1, r6
 80051c0:	4628      	mov	r0, r5
 80051c2:	47b8      	blx	r7
 80051c4:	3001      	adds	r0, #1
 80051c6:	d1c2      	bne.n	800514e <_printf_float+0x2f2>
 80051c8:	e6a3      	b.n	8004f12 <_printf_float+0xb6>
 80051ca:	2301      	movs	r3, #1
 80051cc:	4631      	mov	r1, r6
 80051ce:	4628      	mov	r0, r5
 80051d0:	9206      	str	r2, [sp, #24]
 80051d2:	47b8      	blx	r7
 80051d4:	3001      	adds	r0, #1
 80051d6:	f43f ae9c 	beq.w	8004f12 <_printf_float+0xb6>
 80051da:	9a06      	ldr	r2, [sp, #24]
 80051dc:	f10b 0b01 	add.w	fp, fp, #1
 80051e0:	e7bb      	b.n	800515a <_printf_float+0x2fe>
 80051e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051e6:	4631      	mov	r1, r6
 80051e8:	4628      	mov	r0, r5
 80051ea:	47b8      	blx	r7
 80051ec:	3001      	adds	r0, #1
 80051ee:	d1c0      	bne.n	8005172 <_printf_float+0x316>
 80051f0:	e68f      	b.n	8004f12 <_printf_float+0xb6>
 80051f2:	9a06      	ldr	r2, [sp, #24]
 80051f4:	464b      	mov	r3, r9
 80051f6:	4442      	add	r2, r8
 80051f8:	4631      	mov	r1, r6
 80051fa:	4628      	mov	r0, r5
 80051fc:	47b8      	blx	r7
 80051fe:	3001      	adds	r0, #1
 8005200:	d1c3      	bne.n	800518a <_printf_float+0x32e>
 8005202:	e686      	b.n	8004f12 <_printf_float+0xb6>
 8005204:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005208:	f1ba 0f01 	cmp.w	sl, #1
 800520c:	dc01      	bgt.n	8005212 <_printf_float+0x3b6>
 800520e:	07db      	lsls	r3, r3, #31
 8005210:	d536      	bpl.n	8005280 <_printf_float+0x424>
 8005212:	2301      	movs	r3, #1
 8005214:	4642      	mov	r2, r8
 8005216:	4631      	mov	r1, r6
 8005218:	4628      	mov	r0, r5
 800521a:	47b8      	blx	r7
 800521c:	3001      	adds	r0, #1
 800521e:	f43f ae78 	beq.w	8004f12 <_printf_float+0xb6>
 8005222:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005226:	4631      	mov	r1, r6
 8005228:	4628      	mov	r0, r5
 800522a:	47b8      	blx	r7
 800522c:	3001      	adds	r0, #1
 800522e:	f43f ae70 	beq.w	8004f12 <_printf_float+0xb6>
 8005232:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005236:	2200      	movs	r2, #0
 8005238:	2300      	movs	r3, #0
 800523a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800523e:	f7fb fc43 	bl	8000ac8 <__aeabi_dcmpeq>
 8005242:	b9c0      	cbnz	r0, 8005276 <_printf_float+0x41a>
 8005244:	4653      	mov	r3, sl
 8005246:	f108 0201 	add.w	r2, r8, #1
 800524a:	4631      	mov	r1, r6
 800524c:	4628      	mov	r0, r5
 800524e:	47b8      	blx	r7
 8005250:	3001      	adds	r0, #1
 8005252:	d10c      	bne.n	800526e <_printf_float+0x412>
 8005254:	e65d      	b.n	8004f12 <_printf_float+0xb6>
 8005256:	2301      	movs	r3, #1
 8005258:	465a      	mov	r2, fp
 800525a:	4631      	mov	r1, r6
 800525c:	4628      	mov	r0, r5
 800525e:	47b8      	blx	r7
 8005260:	3001      	adds	r0, #1
 8005262:	f43f ae56 	beq.w	8004f12 <_printf_float+0xb6>
 8005266:	f108 0801 	add.w	r8, r8, #1
 800526a:	45d0      	cmp	r8, sl
 800526c:	dbf3      	blt.n	8005256 <_printf_float+0x3fa>
 800526e:	464b      	mov	r3, r9
 8005270:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005274:	e6df      	b.n	8005036 <_printf_float+0x1da>
 8005276:	f04f 0800 	mov.w	r8, #0
 800527a:	f104 0b1a 	add.w	fp, r4, #26
 800527e:	e7f4      	b.n	800526a <_printf_float+0x40e>
 8005280:	2301      	movs	r3, #1
 8005282:	4642      	mov	r2, r8
 8005284:	e7e1      	b.n	800524a <_printf_float+0x3ee>
 8005286:	2301      	movs	r3, #1
 8005288:	464a      	mov	r2, r9
 800528a:	4631      	mov	r1, r6
 800528c:	4628      	mov	r0, r5
 800528e:	47b8      	blx	r7
 8005290:	3001      	adds	r0, #1
 8005292:	f43f ae3e 	beq.w	8004f12 <_printf_float+0xb6>
 8005296:	f108 0801 	add.w	r8, r8, #1
 800529a:	68e3      	ldr	r3, [r4, #12]
 800529c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800529e:	1a5b      	subs	r3, r3, r1
 80052a0:	4543      	cmp	r3, r8
 80052a2:	dcf0      	bgt.n	8005286 <_printf_float+0x42a>
 80052a4:	e6fc      	b.n	80050a0 <_printf_float+0x244>
 80052a6:	f04f 0800 	mov.w	r8, #0
 80052aa:	f104 0919 	add.w	r9, r4, #25
 80052ae:	e7f4      	b.n	800529a <_printf_float+0x43e>

080052b0 <_printf_common>:
 80052b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052b4:	4616      	mov	r6, r2
 80052b6:	4698      	mov	r8, r3
 80052b8:	688a      	ldr	r2, [r1, #8]
 80052ba:	690b      	ldr	r3, [r1, #16]
 80052bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80052c0:	4293      	cmp	r3, r2
 80052c2:	bfb8      	it	lt
 80052c4:	4613      	movlt	r3, r2
 80052c6:	6033      	str	r3, [r6, #0]
 80052c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80052cc:	4607      	mov	r7, r0
 80052ce:	460c      	mov	r4, r1
 80052d0:	b10a      	cbz	r2, 80052d6 <_printf_common+0x26>
 80052d2:	3301      	adds	r3, #1
 80052d4:	6033      	str	r3, [r6, #0]
 80052d6:	6823      	ldr	r3, [r4, #0]
 80052d8:	0699      	lsls	r1, r3, #26
 80052da:	bf42      	ittt	mi
 80052dc:	6833      	ldrmi	r3, [r6, #0]
 80052de:	3302      	addmi	r3, #2
 80052e0:	6033      	strmi	r3, [r6, #0]
 80052e2:	6825      	ldr	r5, [r4, #0]
 80052e4:	f015 0506 	ands.w	r5, r5, #6
 80052e8:	d106      	bne.n	80052f8 <_printf_common+0x48>
 80052ea:	f104 0a19 	add.w	sl, r4, #25
 80052ee:	68e3      	ldr	r3, [r4, #12]
 80052f0:	6832      	ldr	r2, [r6, #0]
 80052f2:	1a9b      	subs	r3, r3, r2
 80052f4:	42ab      	cmp	r3, r5
 80052f6:	dc26      	bgt.n	8005346 <_printf_common+0x96>
 80052f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80052fc:	6822      	ldr	r2, [r4, #0]
 80052fe:	3b00      	subs	r3, #0
 8005300:	bf18      	it	ne
 8005302:	2301      	movne	r3, #1
 8005304:	0692      	lsls	r2, r2, #26
 8005306:	d42b      	bmi.n	8005360 <_printf_common+0xb0>
 8005308:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800530c:	4641      	mov	r1, r8
 800530e:	4638      	mov	r0, r7
 8005310:	47c8      	blx	r9
 8005312:	3001      	adds	r0, #1
 8005314:	d01e      	beq.n	8005354 <_printf_common+0xa4>
 8005316:	6823      	ldr	r3, [r4, #0]
 8005318:	6922      	ldr	r2, [r4, #16]
 800531a:	f003 0306 	and.w	r3, r3, #6
 800531e:	2b04      	cmp	r3, #4
 8005320:	bf02      	ittt	eq
 8005322:	68e5      	ldreq	r5, [r4, #12]
 8005324:	6833      	ldreq	r3, [r6, #0]
 8005326:	1aed      	subeq	r5, r5, r3
 8005328:	68a3      	ldr	r3, [r4, #8]
 800532a:	bf0c      	ite	eq
 800532c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005330:	2500      	movne	r5, #0
 8005332:	4293      	cmp	r3, r2
 8005334:	bfc4      	itt	gt
 8005336:	1a9b      	subgt	r3, r3, r2
 8005338:	18ed      	addgt	r5, r5, r3
 800533a:	2600      	movs	r6, #0
 800533c:	341a      	adds	r4, #26
 800533e:	42b5      	cmp	r5, r6
 8005340:	d11a      	bne.n	8005378 <_printf_common+0xc8>
 8005342:	2000      	movs	r0, #0
 8005344:	e008      	b.n	8005358 <_printf_common+0xa8>
 8005346:	2301      	movs	r3, #1
 8005348:	4652      	mov	r2, sl
 800534a:	4641      	mov	r1, r8
 800534c:	4638      	mov	r0, r7
 800534e:	47c8      	blx	r9
 8005350:	3001      	adds	r0, #1
 8005352:	d103      	bne.n	800535c <_printf_common+0xac>
 8005354:	f04f 30ff 	mov.w	r0, #4294967295
 8005358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800535c:	3501      	adds	r5, #1
 800535e:	e7c6      	b.n	80052ee <_printf_common+0x3e>
 8005360:	18e1      	adds	r1, r4, r3
 8005362:	1c5a      	adds	r2, r3, #1
 8005364:	2030      	movs	r0, #48	@ 0x30
 8005366:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800536a:	4422      	add	r2, r4
 800536c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005370:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005374:	3302      	adds	r3, #2
 8005376:	e7c7      	b.n	8005308 <_printf_common+0x58>
 8005378:	2301      	movs	r3, #1
 800537a:	4622      	mov	r2, r4
 800537c:	4641      	mov	r1, r8
 800537e:	4638      	mov	r0, r7
 8005380:	47c8      	blx	r9
 8005382:	3001      	adds	r0, #1
 8005384:	d0e6      	beq.n	8005354 <_printf_common+0xa4>
 8005386:	3601      	adds	r6, #1
 8005388:	e7d9      	b.n	800533e <_printf_common+0x8e>
	...

0800538c <_printf_i>:
 800538c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005390:	7e0f      	ldrb	r7, [r1, #24]
 8005392:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005394:	2f78      	cmp	r7, #120	@ 0x78
 8005396:	4691      	mov	r9, r2
 8005398:	4680      	mov	r8, r0
 800539a:	460c      	mov	r4, r1
 800539c:	469a      	mov	sl, r3
 800539e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80053a2:	d807      	bhi.n	80053b4 <_printf_i+0x28>
 80053a4:	2f62      	cmp	r7, #98	@ 0x62
 80053a6:	d80a      	bhi.n	80053be <_printf_i+0x32>
 80053a8:	2f00      	cmp	r7, #0
 80053aa:	f000 80d2 	beq.w	8005552 <_printf_i+0x1c6>
 80053ae:	2f58      	cmp	r7, #88	@ 0x58
 80053b0:	f000 80b9 	beq.w	8005526 <_printf_i+0x19a>
 80053b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80053bc:	e03a      	b.n	8005434 <_printf_i+0xa8>
 80053be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80053c2:	2b15      	cmp	r3, #21
 80053c4:	d8f6      	bhi.n	80053b4 <_printf_i+0x28>
 80053c6:	a101      	add	r1, pc, #4	@ (adr r1, 80053cc <_printf_i+0x40>)
 80053c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053cc:	08005425 	.word	0x08005425
 80053d0:	08005439 	.word	0x08005439
 80053d4:	080053b5 	.word	0x080053b5
 80053d8:	080053b5 	.word	0x080053b5
 80053dc:	080053b5 	.word	0x080053b5
 80053e0:	080053b5 	.word	0x080053b5
 80053e4:	08005439 	.word	0x08005439
 80053e8:	080053b5 	.word	0x080053b5
 80053ec:	080053b5 	.word	0x080053b5
 80053f0:	080053b5 	.word	0x080053b5
 80053f4:	080053b5 	.word	0x080053b5
 80053f8:	08005539 	.word	0x08005539
 80053fc:	08005463 	.word	0x08005463
 8005400:	080054f3 	.word	0x080054f3
 8005404:	080053b5 	.word	0x080053b5
 8005408:	080053b5 	.word	0x080053b5
 800540c:	0800555b 	.word	0x0800555b
 8005410:	080053b5 	.word	0x080053b5
 8005414:	08005463 	.word	0x08005463
 8005418:	080053b5 	.word	0x080053b5
 800541c:	080053b5 	.word	0x080053b5
 8005420:	080054fb 	.word	0x080054fb
 8005424:	6833      	ldr	r3, [r6, #0]
 8005426:	1d1a      	adds	r2, r3, #4
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	6032      	str	r2, [r6, #0]
 800542c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005430:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005434:	2301      	movs	r3, #1
 8005436:	e09d      	b.n	8005574 <_printf_i+0x1e8>
 8005438:	6833      	ldr	r3, [r6, #0]
 800543a:	6820      	ldr	r0, [r4, #0]
 800543c:	1d19      	adds	r1, r3, #4
 800543e:	6031      	str	r1, [r6, #0]
 8005440:	0606      	lsls	r6, r0, #24
 8005442:	d501      	bpl.n	8005448 <_printf_i+0xbc>
 8005444:	681d      	ldr	r5, [r3, #0]
 8005446:	e003      	b.n	8005450 <_printf_i+0xc4>
 8005448:	0645      	lsls	r5, r0, #25
 800544a:	d5fb      	bpl.n	8005444 <_printf_i+0xb8>
 800544c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005450:	2d00      	cmp	r5, #0
 8005452:	da03      	bge.n	800545c <_printf_i+0xd0>
 8005454:	232d      	movs	r3, #45	@ 0x2d
 8005456:	426d      	negs	r5, r5
 8005458:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800545c:	4859      	ldr	r0, [pc, #356]	@ (80055c4 <_printf_i+0x238>)
 800545e:	230a      	movs	r3, #10
 8005460:	e011      	b.n	8005486 <_printf_i+0xfa>
 8005462:	6821      	ldr	r1, [r4, #0]
 8005464:	6833      	ldr	r3, [r6, #0]
 8005466:	0608      	lsls	r0, r1, #24
 8005468:	f853 5b04 	ldr.w	r5, [r3], #4
 800546c:	d402      	bmi.n	8005474 <_printf_i+0xe8>
 800546e:	0649      	lsls	r1, r1, #25
 8005470:	bf48      	it	mi
 8005472:	b2ad      	uxthmi	r5, r5
 8005474:	2f6f      	cmp	r7, #111	@ 0x6f
 8005476:	4853      	ldr	r0, [pc, #332]	@ (80055c4 <_printf_i+0x238>)
 8005478:	6033      	str	r3, [r6, #0]
 800547a:	bf14      	ite	ne
 800547c:	230a      	movne	r3, #10
 800547e:	2308      	moveq	r3, #8
 8005480:	2100      	movs	r1, #0
 8005482:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005486:	6866      	ldr	r6, [r4, #4]
 8005488:	60a6      	str	r6, [r4, #8]
 800548a:	2e00      	cmp	r6, #0
 800548c:	bfa2      	ittt	ge
 800548e:	6821      	ldrge	r1, [r4, #0]
 8005490:	f021 0104 	bicge.w	r1, r1, #4
 8005494:	6021      	strge	r1, [r4, #0]
 8005496:	b90d      	cbnz	r5, 800549c <_printf_i+0x110>
 8005498:	2e00      	cmp	r6, #0
 800549a:	d04b      	beq.n	8005534 <_printf_i+0x1a8>
 800549c:	4616      	mov	r6, r2
 800549e:	fbb5 f1f3 	udiv	r1, r5, r3
 80054a2:	fb03 5711 	mls	r7, r3, r1, r5
 80054a6:	5dc7      	ldrb	r7, [r0, r7]
 80054a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80054ac:	462f      	mov	r7, r5
 80054ae:	42bb      	cmp	r3, r7
 80054b0:	460d      	mov	r5, r1
 80054b2:	d9f4      	bls.n	800549e <_printf_i+0x112>
 80054b4:	2b08      	cmp	r3, #8
 80054b6:	d10b      	bne.n	80054d0 <_printf_i+0x144>
 80054b8:	6823      	ldr	r3, [r4, #0]
 80054ba:	07df      	lsls	r7, r3, #31
 80054bc:	d508      	bpl.n	80054d0 <_printf_i+0x144>
 80054be:	6923      	ldr	r3, [r4, #16]
 80054c0:	6861      	ldr	r1, [r4, #4]
 80054c2:	4299      	cmp	r1, r3
 80054c4:	bfde      	ittt	le
 80054c6:	2330      	movle	r3, #48	@ 0x30
 80054c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80054d0:	1b92      	subs	r2, r2, r6
 80054d2:	6122      	str	r2, [r4, #16]
 80054d4:	f8cd a000 	str.w	sl, [sp]
 80054d8:	464b      	mov	r3, r9
 80054da:	aa03      	add	r2, sp, #12
 80054dc:	4621      	mov	r1, r4
 80054de:	4640      	mov	r0, r8
 80054e0:	f7ff fee6 	bl	80052b0 <_printf_common>
 80054e4:	3001      	adds	r0, #1
 80054e6:	d14a      	bne.n	800557e <_printf_i+0x1f2>
 80054e8:	f04f 30ff 	mov.w	r0, #4294967295
 80054ec:	b004      	add	sp, #16
 80054ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054f2:	6823      	ldr	r3, [r4, #0]
 80054f4:	f043 0320 	orr.w	r3, r3, #32
 80054f8:	6023      	str	r3, [r4, #0]
 80054fa:	4833      	ldr	r0, [pc, #204]	@ (80055c8 <_printf_i+0x23c>)
 80054fc:	2778      	movs	r7, #120	@ 0x78
 80054fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	6831      	ldr	r1, [r6, #0]
 8005506:	061f      	lsls	r7, r3, #24
 8005508:	f851 5b04 	ldr.w	r5, [r1], #4
 800550c:	d402      	bmi.n	8005514 <_printf_i+0x188>
 800550e:	065f      	lsls	r7, r3, #25
 8005510:	bf48      	it	mi
 8005512:	b2ad      	uxthmi	r5, r5
 8005514:	6031      	str	r1, [r6, #0]
 8005516:	07d9      	lsls	r1, r3, #31
 8005518:	bf44      	itt	mi
 800551a:	f043 0320 	orrmi.w	r3, r3, #32
 800551e:	6023      	strmi	r3, [r4, #0]
 8005520:	b11d      	cbz	r5, 800552a <_printf_i+0x19e>
 8005522:	2310      	movs	r3, #16
 8005524:	e7ac      	b.n	8005480 <_printf_i+0xf4>
 8005526:	4827      	ldr	r0, [pc, #156]	@ (80055c4 <_printf_i+0x238>)
 8005528:	e7e9      	b.n	80054fe <_printf_i+0x172>
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	f023 0320 	bic.w	r3, r3, #32
 8005530:	6023      	str	r3, [r4, #0]
 8005532:	e7f6      	b.n	8005522 <_printf_i+0x196>
 8005534:	4616      	mov	r6, r2
 8005536:	e7bd      	b.n	80054b4 <_printf_i+0x128>
 8005538:	6833      	ldr	r3, [r6, #0]
 800553a:	6825      	ldr	r5, [r4, #0]
 800553c:	6961      	ldr	r1, [r4, #20]
 800553e:	1d18      	adds	r0, r3, #4
 8005540:	6030      	str	r0, [r6, #0]
 8005542:	062e      	lsls	r6, r5, #24
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	d501      	bpl.n	800554c <_printf_i+0x1c0>
 8005548:	6019      	str	r1, [r3, #0]
 800554a:	e002      	b.n	8005552 <_printf_i+0x1c6>
 800554c:	0668      	lsls	r0, r5, #25
 800554e:	d5fb      	bpl.n	8005548 <_printf_i+0x1bc>
 8005550:	8019      	strh	r1, [r3, #0]
 8005552:	2300      	movs	r3, #0
 8005554:	6123      	str	r3, [r4, #16]
 8005556:	4616      	mov	r6, r2
 8005558:	e7bc      	b.n	80054d4 <_printf_i+0x148>
 800555a:	6833      	ldr	r3, [r6, #0]
 800555c:	1d1a      	adds	r2, r3, #4
 800555e:	6032      	str	r2, [r6, #0]
 8005560:	681e      	ldr	r6, [r3, #0]
 8005562:	6862      	ldr	r2, [r4, #4]
 8005564:	2100      	movs	r1, #0
 8005566:	4630      	mov	r0, r6
 8005568:	f7fa fe32 	bl	80001d0 <memchr>
 800556c:	b108      	cbz	r0, 8005572 <_printf_i+0x1e6>
 800556e:	1b80      	subs	r0, r0, r6
 8005570:	6060      	str	r0, [r4, #4]
 8005572:	6863      	ldr	r3, [r4, #4]
 8005574:	6123      	str	r3, [r4, #16]
 8005576:	2300      	movs	r3, #0
 8005578:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800557c:	e7aa      	b.n	80054d4 <_printf_i+0x148>
 800557e:	6923      	ldr	r3, [r4, #16]
 8005580:	4632      	mov	r2, r6
 8005582:	4649      	mov	r1, r9
 8005584:	4640      	mov	r0, r8
 8005586:	47d0      	blx	sl
 8005588:	3001      	adds	r0, #1
 800558a:	d0ad      	beq.n	80054e8 <_printf_i+0x15c>
 800558c:	6823      	ldr	r3, [r4, #0]
 800558e:	079b      	lsls	r3, r3, #30
 8005590:	d413      	bmi.n	80055ba <_printf_i+0x22e>
 8005592:	68e0      	ldr	r0, [r4, #12]
 8005594:	9b03      	ldr	r3, [sp, #12]
 8005596:	4298      	cmp	r0, r3
 8005598:	bfb8      	it	lt
 800559a:	4618      	movlt	r0, r3
 800559c:	e7a6      	b.n	80054ec <_printf_i+0x160>
 800559e:	2301      	movs	r3, #1
 80055a0:	4632      	mov	r2, r6
 80055a2:	4649      	mov	r1, r9
 80055a4:	4640      	mov	r0, r8
 80055a6:	47d0      	blx	sl
 80055a8:	3001      	adds	r0, #1
 80055aa:	d09d      	beq.n	80054e8 <_printf_i+0x15c>
 80055ac:	3501      	adds	r5, #1
 80055ae:	68e3      	ldr	r3, [r4, #12]
 80055b0:	9903      	ldr	r1, [sp, #12]
 80055b2:	1a5b      	subs	r3, r3, r1
 80055b4:	42ab      	cmp	r3, r5
 80055b6:	dcf2      	bgt.n	800559e <_printf_i+0x212>
 80055b8:	e7eb      	b.n	8005592 <_printf_i+0x206>
 80055ba:	2500      	movs	r5, #0
 80055bc:	f104 0619 	add.w	r6, r4, #25
 80055c0:	e7f5      	b.n	80055ae <_printf_i+0x222>
 80055c2:	bf00      	nop
 80055c4:	0800805d 	.word	0x0800805d
 80055c8:	0800806e 	.word	0x0800806e

080055cc <std>:
 80055cc:	2300      	movs	r3, #0
 80055ce:	b510      	push	{r4, lr}
 80055d0:	4604      	mov	r4, r0
 80055d2:	e9c0 3300 	strd	r3, r3, [r0]
 80055d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055da:	6083      	str	r3, [r0, #8]
 80055dc:	8181      	strh	r1, [r0, #12]
 80055de:	6643      	str	r3, [r0, #100]	@ 0x64
 80055e0:	81c2      	strh	r2, [r0, #14]
 80055e2:	6183      	str	r3, [r0, #24]
 80055e4:	4619      	mov	r1, r3
 80055e6:	2208      	movs	r2, #8
 80055e8:	305c      	adds	r0, #92	@ 0x5c
 80055ea:	f000 f9f9 	bl	80059e0 <memset>
 80055ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005624 <std+0x58>)
 80055f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80055f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005628 <std+0x5c>)
 80055f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80055f6:	4b0d      	ldr	r3, [pc, #52]	@ (800562c <std+0x60>)
 80055f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80055fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005630 <std+0x64>)
 80055fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80055fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005634 <std+0x68>)
 8005600:	6224      	str	r4, [r4, #32]
 8005602:	429c      	cmp	r4, r3
 8005604:	d006      	beq.n	8005614 <std+0x48>
 8005606:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800560a:	4294      	cmp	r4, r2
 800560c:	d002      	beq.n	8005614 <std+0x48>
 800560e:	33d0      	adds	r3, #208	@ 0xd0
 8005610:	429c      	cmp	r4, r3
 8005612:	d105      	bne.n	8005620 <std+0x54>
 8005614:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800561c:	f000 ba5c 	b.w	8005ad8 <__retarget_lock_init_recursive>
 8005620:	bd10      	pop	{r4, pc}
 8005622:	bf00      	nop
 8005624:	08005831 	.word	0x08005831
 8005628:	08005853 	.word	0x08005853
 800562c:	0800588b 	.word	0x0800588b
 8005630:	080058af 	.word	0x080058af
 8005634:	20000298 	.word	0x20000298

08005638 <stdio_exit_handler>:
 8005638:	4a02      	ldr	r2, [pc, #8]	@ (8005644 <stdio_exit_handler+0xc>)
 800563a:	4903      	ldr	r1, [pc, #12]	@ (8005648 <stdio_exit_handler+0x10>)
 800563c:	4803      	ldr	r0, [pc, #12]	@ (800564c <stdio_exit_handler+0x14>)
 800563e:	f000 b869 	b.w	8005714 <_fwalk_sglue>
 8005642:	bf00      	nop
 8005644:	2000000c 	.word	0x2000000c
 8005648:	08007409 	.word	0x08007409
 800564c:	2000001c 	.word	0x2000001c

08005650 <cleanup_stdio>:
 8005650:	6841      	ldr	r1, [r0, #4]
 8005652:	4b0c      	ldr	r3, [pc, #48]	@ (8005684 <cleanup_stdio+0x34>)
 8005654:	4299      	cmp	r1, r3
 8005656:	b510      	push	{r4, lr}
 8005658:	4604      	mov	r4, r0
 800565a:	d001      	beq.n	8005660 <cleanup_stdio+0x10>
 800565c:	f001 fed4 	bl	8007408 <_fflush_r>
 8005660:	68a1      	ldr	r1, [r4, #8]
 8005662:	4b09      	ldr	r3, [pc, #36]	@ (8005688 <cleanup_stdio+0x38>)
 8005664:	4299      	cmp	r1, r3
 8005666:	d002      	beq.n	800566e <cleanup_stdio+0x1e>
 8005668:	4620      	mov	r0, r4
 800566a:	f001 fecd 	bl	8007408 <_fflush_r>
 800566e:	68e1      	ldr	r1, [r4, #12]
 8005670:	4b06      	ldr	r3, [pc, #24]	@ (800568c <cleanup_stdio+0x3c>)
 8005672:	4299      	cmp	r1, r3
 8005674:	d004      	beq.n	8005680 <cleanup_stdio+0x30>
 8005676:	4620      	mov	r0, r4
 8005678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800567c:	f001 bec4 	b.w	8007408 <_fflush_r>
 8005680:	bd10      	pop	{r4, pc}
 8005682:	bf00      	nop
 8005684:	20000298 	.word	0x20000298
 8005688:	20000300 	.word	0x20000300
 800568c:	20000368 	.word	0x20000368

08005690 <global_stdio_init.part.0>:
 8005690:	b510      	push	{r4, lr}
 8005692:	4b0b      	ldr	r3, [pc, #44]	@ (80056c0 <global_stdio_init.part.0+0x30>)
 8005694:	4c0b      	ldr	r4, [pc, #44]	@ (80056c4 <global_stdio_init.part.0+0x34>)
 8005696:	4a0c      	ldr	r2, [pc, #48]	@ (80056c8 <global_stdio_init.part.0+0x38>)
 8005698:	601a      	str	r2, [r3, #0]
 800569a:	4620      	mov	r0, r4
 800569c:	2200      	movs	r2, #0
 800569e:	2104      	movs	r1, #4
 80056a0:	f7ff ff94 	bl	80055cc <std>
 80056a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80056a8:	2201      	movs	r2, #1
 80056aa:	2109      	movs	r1, #9
 80056ac:	f7ff ff8e 	bl	80055cc <std>
 80056b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80056b4:	2202      	movs	r2, #2
 80056b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056ba:	2112      	movs	r1, #18
 80056bc:	f7ff bf86 	b.w	80055cc <std>
 80056c0:	200003d0 	.word	0x200003d0
 80056c4:	20000298 	.word	0x20000298
 80056c8:	08005639 	.word	0x08005639

080056cc <__sfp_lock_acquire>:
 80056cc:	4801      	ldr	r0, [pc, #4]	@ (80056d4 <__sfp_lock_acquire+0x8>)
 80056ce:	f000 ba04 	b.w	8005ada <__retarget_lock_acquire_recursive>
 80056d2:	bf00      	nop
 80056d4:	200003d9 	.word	0x200003d9

080056d8 <__sfp_lock_release>:
 80056d8:	4801      	ldr	r0, [pc, #4]	@ (80056e0 <__sfp_lock_release+0x8>)
 80056da:	f000 b9ff 	b.w	8005adc <__retarget_lock_release_recursive>
 80056de:	bf00      	nop
 80056e0:	200003d9 	.word	0x200003d9

080056e4 <__sinit>:
 80056e4:	b510      	push	{r4, lr}
 80056e6:	4604      	mov	r4, r0
 80056e8:	f7ff fff0 	bl	80056cc <__sfp_lock_acquire>
 80056ec:	6a23      	ldr	r3, [r4, #32]
 80056ee:	b11b      	cbz	r3, 80056f8 <__sinit+0x14>
 80056f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056f4:	f7ff bff0 	b.w	80056d8 <__sfp_lock_release>
 80056f8:	4b04      	ldr	r3, [pc, #16]	@ (800570c <__sinit+0x28>)
 80056fa:	6223      	str	r3, [r4, #32]
 80056fc:	4b04      	ldr	r3, [pc, #16]	@ (8005710 <__sinit+0x2c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1f5      	bne.n	80056f0 <__sinit+0xc>
 8005704:	f7ff ffc4 	bl	8005690 <global_stdio_init.part.0>
 8005708:	e7f2      	b.n	80056f0 <__sinit+0xc>
 800570a:	bf00      	nop
 800570c:	08005651 	.word	0x08005651
 8005710:	200003d0 	.word	0x200003d0

08005714 <_fwalk_sglue>:
 8005714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005718:	4607      	mov	r7, r0
 800571a:	4688      	mov	r8, r1
 800571c:	4614      	mov	r4, r2
 800571e:	2600      	movs	r6, #0
 8005720:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005724:	f1b9 0901 	subs.w	r9, r9, #1
 8005728:	d505      	bpl.n	8005736 <_fwalk_sglue+0x22>
 800572a:	6824      	ldr	r4, [r4, #0]
 800572c:	2c00      	cmp	r4, #0
 800572e:	d1f7      	bne.n	8005720 <_fwalk_sglue+0xc>
 8005730:	4630      	mov	r0, r6
 8005732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005736:	89ab      	ldrh	r3, [r5, #12]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d907      	bls.n	800574c <_fwalk_sglue+0x38>
 800573c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005740:	3301      	adds	r3, #1
 8005742:	d003      	beq.n	800574c <_fwalk_sglue+0x38>
 8005744:	4629      	mov	r1, r5
 8005746:	4638      	mov	r0, r7
 8005748:	47c0      	blx	r8
 800574a:	4306      	orrs	r6, r0
 800574c:	3568      	adds	r5, #104	@ 0x68
 800574e:	e7e9      	b.n	8005724 <_fwalk_sglue+0x10>

08005750 <iprintf>:
 8005750:	b40f      	push	{r0, r1, r2, r3}
 8005752:	b507      	push	{r0, r1, r2, lr}
 8005754:	4906      	ldr	r1, [pc, #24]	@ (8005770 <iprintf+0x20>)
 8005756:	ab04      	add	r3, sp, #16
 8005758:	6808      	ldr	r0, [r1, #0]
 800575a:	f853 2b04 	ldr.w	r2, [r3], #4
 800575e:	6881      	ldr	r1, [r0, #8]
 8005760:	9301      	str	r3, [sp, #4]
 8005762:	f001 fcb5 	bl	80070d0 <_vfiprintf_r>
 8005766:	b003      	add	sp, #12
 8005768:	f85d eb04 	ldr.w	lr, [sp], #4
 800576c:	b004      	add	sp, #16
 800576e:	4770      	bx	lr
 8005770:	20000018 	.word	0x20000018

08005774 <_puts_r>:
 8005774:	6a03      	ldr	r3, [r0, #32]
 8005776:	b570      	push	{r4, r5, r6, lr}
 8005778:	6884      	ldr	r4, [r0, #8]
 800577a:	4605      	mov	r5, r0
 800577c:	460e      	mov	r6, r1
 800577e:	b90b      	cbnz	r3, 8005784 <_puts_r+0x10>
 8005780:	f7ff ffb0 	bl	80056e4 <__sinit>
 8005784:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005786:	07db      	lsls	r3, r3, #31
 8005788:	d405      	bmi.n	8005796 <_puts_r+0x22>
 800578a:	89a3      	ldrh	r3, [r4, #12]
 800578c:	0598      	lsls	r0, r3, #22
 800578e:	d402      	bmi.n	8005796 <_puts_r+0x22>
 8005790:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005792:	f000 f9a2 	bl	8005ada <__retarget_lock_acquire_recursive>
 8005796:	89a3      	ldrh	r3, [r4, #12]
 8005798:	0719      	lsls	r1, r3, #28
 800579a:	d502      	bpl.n	80057a2 <_puts_r+0x2e>
 800579c:	6923      	ldr	r3, [r4, #16]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d135      	bne.n	800580e <_puts_r+0x9a>
 80057a2:	4621      	mov	r1, r4
 80057a4:	4628      	mov	r0, r5
 80057a6:	f000 f8c5 	bl	8005934 <__swsetup_r>
 80057aa:	b380      	cbz	r0, 800580e <_puts_r+0x9a>
 80057ac:	f04f 35ff 	mov.w	r5, #4294967295
 80057b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80057b2:	07da      	lsls	r2, r3, #31
 80057b4:	d405      	bmi.n	80057c2 <_puts_r+0x4e>
 80057b6:	89a3      	ldrh	r3, [r4, #12]
 80057b8:	059b      	lsls	r3, r3, #22
 80057ba:	d402      	bmi.n	80057c2 <_puts_r+0x4e>
 80057bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057be:	f000 f98d 	bl	8005adc <__retarget_lock_release_recursive>
 80057c2:	4628      	mov	r0, r5
 80057c4:	bd70      	pop	{r4, r5, r6, pc}
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	da04      	bge.n	80057d4 <_puts_r+0x60>
 80057ca:	69a2      	ldr	r2, [r4, #24]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	dc17      	bgt.n	8005800 <_puts_r+0x8c>
 80057d0:	290a      	cmp	r1, #10
 80057d2:	d015      	beq.n	8005800 <_puts_r+0x8c>
 80057d4:	6823      	ldr	r3, [r4, #0]
 80057d6:	1c5a      	adds	r2, r3, #1
 80057d8:	6022      	str	r2, [r4, #0]
 80057da:	7019      	strb	r1, [r3, #0]
 80057dc:	68a3      	ldr	r3, [r4, #8]
 80057de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80057e2:	3b01      	subs	r3, #1
 80057e4:	60a3      	str	r3, [r4, #8]
 80057e6:	2900      	cmp	r1, #0
 80057e8:	d1ed      	bne.n	80057c6 <_puts_r+0x52>
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	da11      	bge.n	8005812 <_puts_r+0x9e>
 80057ee:	4622      	mov	r2, r4
 80057f0:	210a      	movs	r1, #10
 80057f2:	4628      	mov	r0, r5
 80057f4:	f000 f85f 	bl	80058b6 <__swbuf_r>
 80057f8:	3001      	adds	r0, #1
 80057fa:	d0d7      	beq.n	80057ac <_puts_r+0x38>
 80057fc:	250a      	movs	r5, #10
 80057fe:	e7d7      	b.n	80057b0 <_puts_r+0x3c>
 8005800:	4622      	mov	r2, r4
 8005802:	4628      	mov	r0, r5
 8005804:	f000 f857 	bl	80058b6 <__swbuf_r>
 8005808:	3001      	adds	r0, #1
 800580a:	d1e7      	bne.n	80057dc <_puts_r+0x68>
 800580c:	e7ce      	b.n	80057ac <_puts_r+0x38>
 800580e:	3e01      	subs	r6, #1
 8005810:	e7e4      	b.n	80057dc <_puts_r+0x68>
 8005812:	6823      	ldr	r3, [r4, #0]
 8005814:	1c5a      	adds	r2, r3, #1
 8005816:	6022      	str	r2, [r4, #0]
 8005818:	220a      	movs	r2, #10
 800581a:	701a      	strb	r2, [r3, #0]
 800581c:	e7ee      	b.n	80057fc <_puts_r+0x88>
	...

08005820 <puts>:
 8005820:	4b02      	ldr	r3, [pc, #8]	@ (800582c <puts+0xc>)
 8005822:	4601      	mov	r1, r0
 8005824:	6818      	ldr	r0, [r3, #0]
 8005826:	f7ff bfa5 	b.w	8005774 <_puts_r>
 800582a:	bf00      	nop
 800582c:	20000018 	.word	0x20000018

08005830 <__sread>:
 8005830:	b510      	push	{r4, lr}
 8005832:	460c      	mov	r4, r1
 8005834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005838:	f000 f900 	bl	8005a3c <_read_r>
 800583c:	2800      	cmp	r0, #0
 800583e:	bfab      	itete	ge
 8005840:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005842:	89a3      	ldrhlt	r3, [r4, #12]
 8005844:	181b      	addge	r3, r3, r0
 8005846:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800584a:	bfac      	ite	ge
 800584c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800584e:	81a3      	strhlt	r3, [r4, #12]
 8005850:	bd10      	pop	{r4, pc}

08005852 <__swrite>:
 8005852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005856:	461f      	mov	r7, r3
 8005858:	898b      	ldrh	r3, [r1, #12]
 800585a:	05db      	lsls	r3, r3, #23
 800585c:	4605      	mov	r5, r0
 800585e:	460c      	mov	r4, r1
 8005860:	4616      	mov	r6, r2
 8005862:	d505      	bpl.n	8005870 <__swrite+0x1e>
 8005864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005868:	2302      	movs	r3, #2
 800586a:	2200      	movs	r2, #0
 800586c:	f000 f8d4 	bl	8005a18 <_lseek_r>
 8005870:	89a3      	ldrh	r3, [r4, #12]
 8005872:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005876:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800587a:	81a3      	strh	r3, [r4, #12]
 800587c:	4632      	mov	r2, r6
 800587e:	463b      	mov	r3, r7
 8005880:	4628      	mov	r0, r5
 8005882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005886:	f000 b8eb 	b.w	8005a60 <_write_r>

0800588a <__sseek>:
 800588a:	b510      	push	{r4, lr}
 800588c:	460c      	mov	r4, r1
 800588e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005892:	f000 f8c1 	bl	8005a18 <_lseek_r>
 8005896:	1c43      	adds	r3, r0, #1
 8005898:	89a3      	ldrh	r3, [r4, #12]
 800589a:	bf15      	itete	ne
 800589c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800589e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80058a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80058a6:	81a3      	strheq	r3, [r4, #12]
 80058a8:	bf18      	it	ne
 80058aa:	81a3      	strhne	r3, [r4, #12]
 80058ac:	bd10      	pop	{r4, pc}

080058ae <__sclose>:
 80058ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058b2:	f000 b8a1 	b.w	80059f8 <_close_r>

080058b6 <__swbuf_r>:
 80058b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b8:	460e      	mov	r6, r1
 80058ba:	4614      	mov	r4, r2
 80058bc:	4605      	mov	r5, r0
 80058be:	b118      	cbz	r0, 80058c8 <__swbuf_r+0x12>
 80058c0:	6a03      	ldr	r3, [r0, #32]
 80058c2:	b90b      	cbnz	r3, 80058c8 <__swbuf_r+0x12>
 80058c4:	f7ff ff0e 	bl	80056e4 <__sinit>
 80058c8:	69a3      	ldr	r3, [r4, #24]
 80058ca:	60a3      	str	r3, [r4, #8]
 80058cc:	89a3      	ldrh	r3, [r4, #12]
 80058ce:	071a      	lsls	r2, r3, #28
 80058d0:	d501      	bpl.n	80058d6 <__swbuf_r+0x20>
 80058d2:	6923      	ldr	r3, [r4, #16]
 80058d4:	b943      	cbnz	r3, 80058e8 <__swbuf_r+0x32>
 80058d6:	4621      	mov	r1, r4
 80058d8:	4628      	mov	r0, r5
 80058da:	f000 f82b 	bl	8005934 <__swsetup_r>
 80058de:	b118      	cbz	r0, 80058e8 <__swbuf_r+0x32>
 80058e0:	f04f 37ff 	mov.w	r7, #4294967295
 80058e4:	4638      	mov	r0, r7
 80058e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058e8:	6823      	ldr	r3, [r4, #0]
 80058ea:	6922      	ldr	r2, [r4, #16]
 80058ec:	1a98      	subs	r0, r3, r2
 80058ee:	6963      	ldr	r3, [r4, #20]
 80058f0:	b2f6      	uxtb	r6, r6
 80058f2:	4283      	cmp	r3, r0
 80058f4:	4637      	mov	r7, r6
 80058f6:	dc05      	bgt.n	8005904 <__swbuf_r+0x4e>
 80058f8:	4621      	mov	r1, r4
 80058fa:	4628      	mov	r0, r5
 80058fc:	f001 fd84 	bl	8007408 <_fflush_r>
 8005900:	2800      	cmp	r0, #0
 8005902:	d1ed      	bne.n	80058e0 <__swbuf_r+0x2a>
 8005904:	68a3      	ldr	r3, [r4, #8]
 8005906:	3b01      	subs	r3, #1
 8005908:	60a3      	str	r3, [r4, #8]
 800590a:	6823      	ldr	r3, [r4, #0]
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	6022      	str	r2, [r4, #0]
 8005910:	701e      	strb	r6, [r3, #0]
 8005912:	6962      	ldr	r2, [r4, #20]
 8005914:	1c43      	adds	r3, r0, #1
 8005916:	429a      	cmp	r2, r3
 8005918:	d004      	beq.n	8005924 <__swbuf_r+0x6e>
 800591a:	89a3      	ldrh	r3, [r4, #12]
 800591c:	07db      	lsls	r3, r3, #31
 800591e:	d5e1      	bpl.n	80058e4 <__swbuf_r+0x2e>
 8005920:	2e0a      	cmp	r6, #10
 8005922:	d1df      	bne.n	80058e4 <__swbuf_r+0x2e>
 8005924:	4621      	mov	r1, r4
 8005926:	4628      	mov	r0, r5
 8005928:	f001 fd6e 	bl	8007408 <_fflush_r>
 800592c:	2800      	cmp	r0, #0
 800592e:	d0d9      	beq.n	80058e4 <__swbuf_r+0x2e>
 8005930:	e7d6      	b.n	80058e0 <__swbuf_r+0x2a>
	...

08005934 <__swsetup_r>:
 8005934:	b538      	push	{r3, r4, r5, lr}
 8005936:	4b29      	ldr	r3, [pc, #164]	@ (80059dc <__swsetup_r+0xa8>)
 8005938:	4605      	mov	r5, r0
 800593a:	6818      	ldr	r0, [r3, #0]
 800593c:	460c      	mov	r4, r1
 800593e:	b118      	cbz	r0, 8005948 <__swsetup_r+0x14>
 8005940:	6a03      	ldr	r3, [r0, #32]
 8005942:	b90b      	cbnz	r3, 8005948 <__swsetup_r+0x14>
 8005944:	f7ff fece 	bl	80056e4 <__sinit>
 8005948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800594c:	0719      	lsls	r1, r3, #28
 800594e:	d422      	bmi.n	8005996 <__swsetup_r+0x62>
 8005950:	06da      	lsls	r2, r3, #27
 8005952:	d407      	bmi.n	8005964 <__swsetup_r+0x30>
 8005954:	2209      	movs	r2, #9
 8005956:	602a      	str	r2, [r5, #0]
 8005958:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800595c:	81a3      	strh	r3, [r4, #12]
 800595e:	f04f 30ff 	mov.w	r0, #4294967295
 8005962:	e033      	b.n	80059cc <__swsetup_r+0x98>
 8005964:	0758      	lsls	r0, r3, #29
 8005966:	d512      	bpl.n	800598e <__swsetup_r+0x5a>
 8005968:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800596a:	b141      	cbz	r1, 800597e <__swsetup_r+0x4a>
 800596c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005970:	4299      	cmp	r1, r3
 8005972:	d002      	beq.n	800597a <__swsetup_r+0x46>
 8005974:	4628      	mov	r0, r5
 8005976:	f000 feff 	bl	8006778 <_free_r>
 800597a:	2300      	movs	r3, #0
 800597c:	6363      	str	r3, [r4, #52]	@ 0x34
 800597e:	89a3      	ldrh	r3, [r4, #12]
 8005980:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005984:	81a3      	strh	r3, [r4, #12]
 8005986:	2300      	movs	r3, #0
 8005988:	6063      	str	r3, [r4, #4]
 800598a:	6923      	ldr	r3, [r4, #16]
 800598c:	6023      	str	r3, [r4, #0]
 800598e:	89a3      	ldrh	r3, [r4, #12]
 8005990:	f043 0308 	orr.w	r3, r3, #8
 8005994:	81a3      	strh	r3, [r4, #12]
 8005996:	6923      	ldr	r3, [r4, #16]
 8005998:	b94b      	cbnz	r3, 80059ae <__swsetup_r+0x7a>
 800599a:	89a3      	ldrh	r3, [r4, #12]
 800599c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80059a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059a4:	d003      	beq.n	80059ae <__swsetup_r+0x7a>
 80059a6:	4621      	mov	r1, r4
 80059a8:	4628      	mov	r0, r5
 80059aa:	f001 fd7b 	bl	80074a4 <__smakebuf_r>
 80059ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059b2:	f013 0201 	ands.w	r2, r3, #1
 80059b6:	d00a      	beq.n	80059ce <__swsetup_r+0x9a>
 80059b8:	2200      	movs	r2, #0
 80059ba:	60a2      	str	r2, [r4, #8]
 80059bc:	6962      	ldr	r2, [r4, #20]
 80059be:	4252      	negs	r2, r2
 80059c0:	61a2      	str	r2, [r4, #24]
 80059c2:	6922      	ldr	r2, [r4, #16]
 80059c4:	b942      	cbnz	r2, 80059d8 <__swsetup_r+0xa4>
 80059c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80059ca:	d1c5      	bne.n	8005958 <__swsetup_r+0x24>
 80059cc:	bd38      	pop	{r3, r4, r5, pc}
 80059ce:	0799      	lsls	r1, r3, #30
 80059d0:	bf58      	it	pl
 80059d2:	6962      	ldrpl	r2, [r4, #20]
 80059d4:	60a2      	str	r2, [r4, #8]
 80059d6:	e7f4      	b.n	80059c2 <__swsetup_r+0x8e>
 80059d8:	2000      	movs	r0, #0
 80059da:	e7f7      	b.n	80059cc <__swsetup_r+0x98>
 80059dc:	20000018 	.word	0x20000018

080059e0 <memset>:
 80059e0:	4402      	add	r2, r0
 80059e2:	4603      	mov	r3, r0
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d100      	bne.n	80059ea <memset+0xa>
 80059e8:	4770      	bx	lr
 80059ea:	f803 1b01 	strb.w	r1, [r3], #1
 80059ee:	e7f9      	b.n	80059e4 <memset+0x4>

080059f0 <_localeconv_r>:
 80059f0:	4800      	ldr	r0, [pc, #0]	@ (80059f4 <_localeconv_r+0x4>)
 80059f2:	4770      	bx	lr
 80059f4:	20000158 	.word	0x20000158

080059f8 <_close_r>:
 80059f8:	b538      	push	{r3, r4, r5, lr}
 80059fa:	4d06      	ldr	r5, [pc, #24]	@ (8005a14 <_close_r+0x1c>)
 80059fc:	2300      	movs	r3, #0
 80059fe:	4604      	mov	r4, r0
 8005a00:	4608      	mov	r0, r1
 8005a02:	602b      	str	r3, [r5, #0]
 8005a04:	f7fc fefa 	bl	80027fc <_close>
 8005a08:	1c43      	adds	r3, r0, #1
 8005a0a:	d102      	bne.n	8005a12 <_close_r+0x1a>
 8005a0c:	682b      	ldr	r3, [r5, #0]
 8005a0e:	b103      	cbz	r3, 8005a12 <_close_r+0x1a>
 8005a10:	6023      	str	r3, [r4, #0]
 8005a12:	bd38      	pop	{r3, r4, r5, pc}
 8005a14:	200003d4 	.word	0x200003d4

08005a18 <_lseek_r>:
 8005a18:	b538      	push	{r3, r4, r5, lr}
 8005a1a:	4d07      	ldr	r5, [pc, #28]	@ (8005a38 <_lseek_r+0x20>)
 8005a1c:	4604      	mov	r4, r0
 8005a1e:	4608      	mov	r0, r1
 8005a20:	4611      	mov	r1, r2
 8005a22:	2200      	movs	r2, #0
 8005a24:	602a      	str	r2, [r5, #0]
 8005a26:	461a      	mov	r2, r3
 8005a28:	f7fc ff0f 	bl	800284a <_lseek>
 8005a2c:	1c43      	adds	r3, r0, #1
 8005a2e:	d102      	bne.n	8005a36 <_lseek_r+0x1e>
 8005a30:	682b      	ldr	r3, [r5, #0]
 8005a32:	b103      	cbz	r3, 8005a36 <_lseek_r+0x1e>
 8005a34:	6023      	str	r3, [r4, #0]
 8005a36:	bd38      	pop	{r3, r4, r5, pc}
 8005a38:	200003d4 	.word	0x200003d4

08005a3c <_read_r>:
 8005a3c:	b538      	push	{r3, r4, r5, lr}
 8005a3e:	4d07      	ldr	r5, [pc, #28]	@ (8005a5c <_read_r+0x20>)
 8005a40:	4604      	mov	r4, r0
 8005a42:	4608      	mov	r0, r1
 8005a44:	4611      	mov	r1, r2
 8005a46:	2200      	movs	r2, #0
 8005a48:	602a      	str	r2, [r5, #0]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	f7fc feb9 	bl	80027c2 <_read>
 8005a50:	1c43      	adds	r3, r0, #1
 8005a52:	d102      	bne.n	8005a5a <_read_r+0x1e>
 8005a54:	682b      	ldr	r3, [r5, #0]
 8005a56:	b103      	cbz	r3, 8005a5a <_read_r+0x1e>
 8005a58:	6023      	str	r3, [r4, #0]
 8005a5a:	bd38      	pop	{r3, r4, r5, pc}
 8005a5c:	200003d4 	.word	0x200003d4

08005a60 <_write_r>:
 8005a60:	b538      	push	{r3, r4, r5, lr}
 8005a62:	4d07      	ldr	r5, [pc, #28]	@ (8005a80 <_write_r+0x20>)
 8005a64:	4604      	mov	r4, r0
 8005a66:	4608      	mov	r0, r1
 8005a68:	4611      	mov	r1, r2
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	602a      	str	r2, [r5, #0]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	f7fc fb4e 	bl	8002110 <_write>
 8005a74:	1c43      	adds	r3, r0, #1
 8005a76:	d102      	bne.n	8005a7e <_write_r+0x1e>
 8005a78:	682b      	ldr	r3, [r5, #0]
 8005a7a:	b103      	cbz	r3, 8005a7e <_write_r+0x1e>
 8005a7c:	6023      	str	r3, [r4, #0]
 8005a7e:	bd38      	pop	{r3, r4, r5, pc}
 8005a80:	200003d4 	.word	0x200003d4

08005a84 <__errno>:
 8005a84:	4b01      	ldr	r3, [pc, #4]	@ (8005a8c <__errno+0x8>)
 8005a86:	6818      	ldr	r0, [r3, #0]
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	20000018 	.word	0x20000018

08005a90 <__libc_init_array>:
 8005a90:	b570      	push	{r4, r5, r6, lr}
 8005a92:	4d0d      	ldr	r5, [pc, #52]	@ (8005ac8 <__libc_init_array+0x38>)
 8005a94:	4c0d      	ldr	r4, [pc, #52]	@ (8005acc <__libc_init_array+0x3c>)
 8005a96:	1b64      	subs	r4, r4, r5
 8005a98:	10a4      	asrs	r4, r4, #2
 8005a9a:	2600      	movs	r6, #0
 8005a9c:	42a6      	cmp	r6, r4
 8005a9e:	d109      	bne.n	8005ab4 <__libc_init_array+0x24>
 8005aa0:	4d0b      	ldr	r5, [pc, #44]	@ (8005ad0 <__libc_init_array+0x40>)
 8005aa2:	4c0c      	ldr	r4, [pc, #48]	@ (8005ad4 <__libc_init_array+0x44>)
 8005aa4:	f002 f9f2 	bl	8007e8c <_init>
 8005aa8:	1b64      	subs	r4, r4, r5
 8005aaa:	10a4      	asrs	r4, r4, #2
 8005aac:	2600      	movs	r6, #0
 8005aae:	42a6      	cmp	r6, r4
 8005ab0:	d105      	bne.n	8005abe <__libc_init_array+0x2e>
 8005ab2:	bd70      	pop	{r4, r5, r6, pc}
 8005ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ab8:	4798      	blx	r3
 8005aba:	3601      	adds	r6, #1
 8005abc:	e7ee      	b.n	8005a9c <__libc_init_array+0xc>
 8005abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ac2:	4798      	blx	r3
 8005ac4:	3601      	adds	r6, #1
 8005ac6:	e7f2      	b.n	8005aae <__libc_init_array+0x1e>
 8005ac8:	080083e0 	.word	0x080083e0
 8005acc:	080083e0 	.word	0x080083e0
 8005ad0:	080083e0 	.word	0x080083e0
 8005ad4:	080083e4 	.word	0x080083e4

08005ad8 <__retarget_lock_init_recursive>:
 8005ad8:	4770      	bx	lr

08005ada <__retarget_lock_acquire_recursive>:
 8005ada:	4770      	bx	lr

08005adc <__retarget_lock_release_recursive>:
 8005adc:	4770      	bx	lr

08005ade <quorem>:
 8005ade:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae2:	6903      	ldr	r3, [r0, #16]
 8005ae4:	690c      	ldr	r4, [r1, #16]
 8005ae6:	42a3      	cmp	r3, r4
 8005ae8:	4607      	mov	r7, r0
 8005aea:	db7e      	blt.n	8005bea <quorem+0x10c>
 8005aec:	3c01      	subs	r4, #1
 8005aee:	f101 0814 	add.w	r8, r1, #20
 8005af2:	00a3      	lsls	r3, r4, #2
 8005af4:	f100 0514 	add.w	r5, r0, #20
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005afe:	9301      	str	r3, [sp, #4]
 8005b00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b10:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b14:	d32e      	bcc.n	8005b74 <quorem+0x96>
 8005b16:	f04f 0a00 	mov.w	sl, #0
 8005b1a:	46c4      	mov	ip, r8
 8005b1c:	46ae      	mov	lr, r5
 8005b1e:	46d3      	mov	fp, sl
 8005b20:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005b24:	b298      	uxth	r0, r3
 8005b26:	fb06 a000 	mla	r0, r6, r0, sl
 8005b2a:	0c02      	lsrs	r2, r0, #16
 8005b2c:	0c1b      	lsrs	r3, r3, #16
 8005b2e:	fb06 2303 	mla	r3, r6, r3, r2
 8005b32:	f8de 2000 	ldr.w	r2, [lr]
 8005b36:	b280      	uxth	r0, r0
 8005b38:	b292      	uxth	r2, r2
 8005b3a:	1a12      	subs	r2, r2, r0
 8005b3c:	445a      	add	r2, fp
 8005b3e:	f8de 0000 	ldr.w	r0, [lr]
 8005b42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005b4c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005b50:	b292      	uxth	r2, r2
 8005b52:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005b56:	45e1      	cmp	r9, ip
 8005b58:	f84e 2b04 	str.w	r2, [lr], #4
 8005b5c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005b60:	d2de      	bcs.n	8005b20 <quorem+0x42>
 8005b62:	9b00      	ldr	r3, [sp, #0]
 8005b64:	58eb      	ldr	r3, [r5, r3]
 8005b66:	b92b      	cbnz	r3, 8005b74 <quorem+0x96>
 8005b68:	9b01      	ldr	r3, [sp, #4]
 8005b6a:	3b04      	subs	r3, #4
 8005b6c:	429d      	cmp	r5, r3
 8005b6e:	461a      	mov	r2, r3
 8005b70:	d32f      	bcc.n	8005bd2 <quorem+0xf4>
 8005b72:	613c      	str	r4, [r7, #16]
 8005b74:	4638      	mov	r0, r7
 8005b76:	f001 f979 	bl	8006e6c <__mcmp>
 8005b7a:	2800      	cmp	r0, #0
 8005b7c:	db25      	blt.n	8005bca <quorem+0xec>
 8005b7e:	4629      	mov	r1, r5
 8005b80:	2000      	movs	r0, #0
 8005b82:	f858 2b04 	ldr.w	r2, [r8], #4
 8005b86:	f8d1 c000 	ldr.w	ip, [r1]
 8005b8a:	fa1f fe82 	uxth.w	lr, r2
 8005b8e:	fa1f f38c 	uxth.w	r3, ip
 8005b92:	eba3 030e 	sub.w	r3, r3, lr
 8005b96:	4403      	add	r3, r0
 8005b98:	0c12      	lsrs	r2, r2, #16
 8005b9a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005b9e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ba8:	45c1      	cmp	r9, r8
 8005baa:	f841 3b04 	str.w	r3, [r1], #4
 8005bae:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005bb2:	d2e6      	bcs.n	8005b82 <quorem+0xa4>
 8005bb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bbc:	b922      	cbnz	r2, 8005bc8 <quorem+0xea>
 8005bbe:	3b04      	subs	r3, #4
 8005bc0:	429d      	cmp	r5, r3
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	d30b      	bcc.n	8005bde <quorem+0x100>
 8005bc6:	613c      	str	r4, [r7, #16]
 8005bc8:	3601      	adds	r6, #1
 8005bca:	4630      	mov	r0, r6
 8005bcc:	b003      	add	sp, #12
 8005bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bd2:	6812      	ldr	r2, [r2, #0]
 8005bd4:	3b04      	subs	r3, #4
 8005bd6:	2a00      	cmp	r2, #0
 8005bd8:	d1cb      	bne.n	8005b72 <quorem+0x94>
 8005bda:	3c01      	subs	r4, #1
 8005bdc:	e7c6      	b.n	8005b6c <quorem+0x8e>
 8005bde:	6812      	ldr	r2, [r2, #0]
 8005be0:	3b04      	subs	r3, #4
 8005be2:	2a00      	cmp	r2, #0
 8005be4:	d1ef      	bne.n	8005bc6 <quorem+0xe8>
 8005be6:	3c01      	subs	r4, #1
 8005be8:	e7ea      	b.n	8005bc0 <quorem+0xe2>
 8005bea:	2000      	movs	r0, #0
 8005bec:	e7ee      	b.n	8005bcc <quorem+0xee>
	...

08005bf0 <_dtoa_r>:
 8005bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf4:	69c7      	ldr	r7, [r0, #28]
 8005bf6:	b099      	sub	sp, #100	@ 0x64
 8005bf8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005bfc:	ec55 4b10 	vmov	r4, r5, d0
 8005c00:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005c02:	9109      	str	r1, [sp, #36]	@ 0x24
 8005c04:	4683      	mov	fp, r0
 8005c06:	920e      	str	r2, [sp, #56]	@ 0x38
 8005c08:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005c0a:	b97f      	cbnz	r7, 8005c2c <_dtoa_r+0x3c>
 8005c0c:	2010      	movs	r0, #16
 8005c0e:	f000 fdfd 	bl	800680c <malloc>
 8005c12:	4602      	mov	r2, r0
 8005c14:	f8cb 001c 	str.w	r0, [fp, #28]
 8005c18:	b920      	cbnz	r0, 8005c24 <_dtoa_r+0x34>
 8005c1a:	4ba7      	ldr	r3, [pc, #668]	@ (8005eb8 <_dtoa_r+0x2c8>)
 8005c1c:	21ef      	movs	r1, #239	@ 0xef
 8005c1e:	48a7      	ldr	r0, [pc, #668]	@ (8005ebc <_dtoa_r+0x2cc>)
 8005c20:	f001 fcbc 	bl	800759c <__assert_func>
 8005c24:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005c28:	6007      	str	r7, [r0, #0]
 8005c2a:	60c7      	str	r7, [r0, #12]
 8005c2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c30:	6819      	ldr	r1, [r3, #0]
 8005c32:	b159      	cbz	r1, 8005c4c <_dtoa_r+0x5c>
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	604a      	str	r2, [r1, #4]
 8005c38:	2301      	movs	r3, #1
 8005c3a:	4093      	lsls	r3, r2
 8005c3c:	608b      	str	r3, [r1, #8]
 8005c3e:	4658      	mov	r0, fp
 8005c40:	f000 feda 	bl	80069f8 <_Bfree>
 8005c44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	1e2b      	subs	r3, r5, #0
 8005c4e:	bfb9      	ittee	lt
 8005c50:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005c54:	9303      	strlt	r3, [sp, #12]
 8005c56:	2300      	movge	r3, #0
 8005c58:	6033      	strge	r3, [r6, #0]
 8005c5a:	9f03      	ldr	r7, [sp, #12]
 8005c5c:	4b98      	ldr	r3, [pc, #608]	@ (8005ec0 <_dtoa_r+0x2d0>)
 8005c5e:	bfbc      	itt	lt
 8005c60:	2201      	movlt	r2, #1
 8005c62:	6032      	strlt	r2, [r6, #0]
 8005c64:	43bb      	bics	r3, r7
 8005c66:	d112      	bne.n	8005c8e <_dtoa_r+0x9e>
 8005c68:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005c6a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005c6e:	6013      	str	r3, [r2, #0]
 8005c70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005c74:	4323      	orrs	r3, r4
 8005c76:	f000 854d 	beq.w	8006714 <_dtoa_r+0xb24>
 8005c7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005c7c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005ed4 <_dtoa_r+0x2e4>
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f000 854f 	beq.w	8006724 <_dtoa_r+0xb34>
 8005c86:	f10a 0303 	add.w	r3, sl, #3
 8005c8a:	f000 bd49 	b.w	8006720 <_dtoa_r+0xb30>
 8005c8e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005c92:	2200      	movs	r2, #0
 8005c94:	ec51 0b17 	vmov	r0, r1, d7
 8005c98:	2300      	movs	r3, #0
 8005c9a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005c9e:	f7fa ff13 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ca2:	4680      	mov	r8, r0
 8005ca4:	b158      	cbz	r0, 8005cbe <_dtoa_r+0xce>
 8005ca6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005ca8:	2301      	movs	r3, #1
 8005caa:	6013      	str	r3, [r2, #0]
 8005cac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005cae:	b113      	cbz	r3, 8005cb6 <_dtoa_r+0xc6>
 8005cb0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005cb2:	4b84      	ldr	r3, [pc, #528]	@ (8005ec4 <_dtoa_r+0x2d4>)
 8005cb4:	6013      	str	r3, [r2, #0]
 8005cb6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005ed8 <_dtoa_r+0x2e8>
 8005cba:	f000 bd33 	b.w	8006724 <_dtoa_r+0xb34>
 8005cbe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005cc2:	aa16      	add	r2, sp, #88	@ 0x58
 8005cc4:	a917      	add	r1, sp, #92	@ 0x5c
 8005cc6:	4658      	mov	r0, fp
 8005cc8:	f001 f980 	bl	8006fcc <__d2b>
 8005ccc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005cd0:	4681      	mov	r9, r0
 8005cd2:	2e00      	cmp	r6, #0
 8005cd4:	d077      	beq.n	8005dc6 <_dtoa_r+0x1d6>
 8005cd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005cd8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005cdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ce0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ce4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005ce8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005cec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	4b74      	ldr	r3, [pc, #464]	@ (8005ec8 <_dtoa_r+0x2d8>)
 8005cf6:	f7fa fac7 	bl	8000288 <__aeabi_dsub>
 8005cfa:	a369      	add	r3, pc, #420	@ (adr r3, 8005ea0 <_dtoa_r+0x2b0>)
 8005cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d00:	f7fa fc7a 	bl	80005f8 <__aeabi_dmul>
 8005d04:	a368      	add	r3, pc, #416	@ (adr r3, 8005ea8 <_dtoa_r+0x2b8>)
 8005d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0a:	f7fa fabf 	bl	800028c <__adddf3>
 8005d0e:	4604      	mov	r4, r0
 8005d10:	4630      	mov	r0, r6
 8005d12:	460d      	mov	r5, r1
 8005d14:	f7fa fc06 	bl	8000524 <__aeabi_i2d>
 8005d18:	a365      	add	r3, pc, #404	@ (adr r3, 8005eb0 <_dtoa_r+0x2c0>)
 8005d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1e:	f7fa fc6b 	bl	80005f8 <__aeabi_dmul>
 8005d22:	4602      	mov	r2, r0
 8005d24:	460b      	mov	r3, r1
 8005d26:	4620      	mov	r0, r4
 8005d28:	4629      	mov	r1, r5
 8005d2a:	f7fa faaf 	bl	800028c <__adddf3>
 8005d2e:	4604      	mov	r4, r0
 8005d30:	460d      	mov	r5, r1
 8005d32:	f7fa ff11 	bl	8000b58 <__aeabi_d2iz>
 8005d36:	2200      	movs	r2, #0
 8005d38:	4607      	mov	r7, r0
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	4629      	mov	r1, r5
 8005d40:	f7fa fecc 	bl	8000adc <__aeabi_dcmplt>
 8005d44:	b140      	cbz	r0, 8005d58 <_dtoa_r+0x168>
 8005d46:	4638      	mov	r0, r7
 8005d48:	f7fa fbec 	bl	8000524 <__aeabi_i2d>
 8005d4c:	4622      	mov	r2, r4
 8005d4e:	462b      	mov	r3, r5
 8005d50:	f7fa feba 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d54:	b900      	cbnz	r0, 8005d58 <_dtoa_r+0x168>
 8005d56:	3f01      	subs	r7, #1
 8005d58:	2f16      	cmp	r7, #22
 8005d5a:	d851      	bhi.n	8005e00 <_dtoa_r+0x210>
 8005d5c:	4b5b      	ldr	r3, [pc, #364]	@ (8005ecc <_dtoa_r+0x2dc>)
 8005d5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d6a:	f7fa feb7 	bl	8000adc <__aeabi_dcmplt>
 8005d6e:	2800      	cmp	r0, #0
 8005d70:	d048      	beq.n	8005e04 <_dtoa_r+0x214>
 8005d72:	3f01      	subs	r7, #1
 8005d74:	2300      	movs	r3, #0
 8005d76:	9312      	str	r3, [sp, #72]	@ 0x48
 8005d78:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005d7a:	1b9b      	subs	r3, r3, r6
 8005d7c:	1e5a      	subs	r2, r3, #1
 8005d7e:	bf44      	itt	mi
 8005d80:	f1c3 0801 	rsbmi	r8, r3, #1
 8005d84:	2300      	movmi	r3, #0
 8005d86:	9208      	str	r2, [sp, #32]
 8005d88:	bf54      	ite	pl
 8005d8a:	f04f 0800 	movpl.w	r8, #0
 8005d8e:	9308      	strmi	r3, [sp, #32]
 8005d90:	2f00      	cmp	r7, #0
 8005d92:	db39      	blt.n	8005e08 <_dtoa_r+0x218>
 8005d94:	9b08      	ldr	r3, [sp, #32]
 8005d96:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005d98:	443b      	add	r3, r7
 8005d9a:	9308      	str	r3, [sp, #32]
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005da0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005da2:	2b09      	cmp	r3, #9
 8005da4:	d864      	bhi.n	8005e70 <_dtoa_r+0x280>
 8005da6:	2b05      	cmp	r3, #5
 8005da8:	bfc4      	itt	gt
 8005daa:	3b04      	subgt	r3, #4
 8005dac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005dae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005db0:	f1a3 0302 	sub.w	r3, r3, #2
 8005db4:	bfcc      	ite	gt
 8005db6:	2400      	movgt	r4, #0
 8005db8:	2401      	movle	r4, #1
 8005dba:	2b03      	cmp	r3, #3
 8005dbc:	d863      	bhi.n	8005e86 <_dtoa_r+0x296>
 8005dbe:	e8df f003 	tbb	[pc, r3]
 8005dc2:	372a      	.short	0x372a
 8005dc4:	5535      	.short	0x5535
 8005dc6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005dca:	441e      	add	r6, r3
 8005dcc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005dd0:	2b20      	cmp	r3, #32
 8005dd2:	bfc1      	itttt	gt
 8005dd4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005dd8:	409f      	lslgt	r7, r3
 8005dda:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005dde:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005de2:	bfd6      	itet	le
 8005de4:	f1c3 0320 	rsble	r3, r3, #32
 8005de8:	ea47 0003 	orrgt.w	r0, r7, r3
 8005dec:	fa04 f003 	lslle.w	r0, r4, r3
 8005df0:	f7fa fb88 	bl	8000504 <__aeabi_ui2d>
 8005df4:	2201      	movs	r2, #1
 8005df6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005dfa:	3e01      	subs	r6, #1
 8005dfc:	9214      	str	r2, [sp, #80]	@ 0x50
 8005dfe:	e777      	b.n	8005cf0 <_dtoa_r+0x100>
 8005e00:	2301      	movs	r3, #1
 8005e02:	e7b8      	b.n	8005d76 <_dtoa_r+0x186>
 8005e04:	9012      	str	r0, [sp, #72]	@ 0x48
 8005e06:	e7b7      	b.n	8005d78 <_dtoa_r+0x188>
 8005e08:	427b      	negs	r3, r7
 8005e0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	eba8 0807 	sub.w	r8, r8, r7
 8005e12:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005e14:	e7c4      	b.n	8005da0 <_dtoa_r+0x1b0>
 8005e16:	2300      	movs	r3, #0
 8005e18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	dc35      	bgt.n	8005e8c <_dtoa_r+0x29c>
 8005e20:	2301      	movs	r3, #1
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	9307      	str	r3, [sp, #28]
 8005e26:	461a      	mov	r2, r3
 8005e28:	920e      	str	r2, [sp, #56]	@ 0x38
 8005e2a:	e00b      	b.n	8005e44 <_dtoa_r+0x254>
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e7f3      	b.n	8005e18 <_dtoa_r+0x228>
 8005e30:	2300      	movs	r3, #0
 8005e32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e36:	18fb      	adds	r3, r7, r3
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	9307      	str	r3, [sp, #28]
 8005e40:	bfb8      	it	lt
 8005e42:	2301      	movlt	r3, #1
 8005e44:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005e48:	2100      	movs	r1, #0
 8005e4a:	2204      	movs	r2, #4
 8005e4c:	f102 0514 	add.w	r5, r2, #20
 8005e50:	429d      	cmp	r5, r3
 8005e52:	d91f      	bls.n	8005e94 <_dtoa_r+0x2a4>
 8005e54:	6041      	str	r1, [r0, #4]
 8005e56:	4658      	mov	r0, fp
 8005e58:	f000 fd8e 	bl	8006978 <_Balloc>
 8005e5c:	4682      	mov	sl, r0
 8005e5e:	2800      	cmp	r0, #0
 8005e60:	d13c      	bne.n	8005edc <_dtoa_r+0x2ec>
 8005e62:	4b1b      	ldr	r3, [pc, #108]	@ (8005ed0 <_dtoa_r+0x2e0>)
 8005e64:	4602      	mov	r2, r0
 8005e66:	f240 11af 	movw	r1, #431	@ 0x1af
 8005e6a:	e6d8      	b.n	8005c1e <_dtoa_r+0x2e>
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e7e0      	b.n	8005e32 <_dtoa_r+0x242>
 8005e70:	2401      	movs	r4, #1
 8005e72:	2300      	movs	r3, #0
 8005e74:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e76:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005e78:	f04f 33ff 	mov.w	r3, #4294967295
 8005e7c:	9300      	str	r3, [sp, #0]
 8005e7e:	9307      	str	r3, [sp, #28]
 8005e80:	2200      	movs	r2, #0
 8005e82:	2312      	movs	r3, #18
 8005e84:	e7d0      	b.n	8005e28 <_dtoa_r+0x238>
 8005e86:	2301      	movs	r3, #1
 8005e88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e8a:	e7f5      	b.n	8005e78 <_dtoa_r+0x288>
 8005e8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	9307      	str	r3, [sp, #28]
 8005e92:	e7d7      	b.n	8005e44 <_dtoa_r+0x254>
 8005e94:	3101      	adds	r1, #1
 8005e96:	0052      	lsls	r2, r2, #1
 8005e98:	e7d8      	b.n	8005e4c <_dtoa_r+0x25c>
 8005e9a:	bf00      	nop
 8005e9c:	f3af 8000 	nop.w
 8005ea0:	636f4361 	.word	0x636f4361
 8005ea4:	3fd287a7 	.word	0x3fd287a7
 8005ea8:	8b60c8b3 	.word	0x8b60c8b3
 8005eac:	3fc68a28 	.word	0x3fc68a28
 8005eb0:	509f79fb 	.word	0x509f79fb
 8005eb4:	3fd34413 	.word	0x3fd34413
 8005eb8:	0800808c 	.word	0x0800808c
 8005ebc:	080080a3 	.word	0x080080a3
 8005ec0:	7ff00000 	.word	0x7ff00000
 8005ec4:	0800805c 	.word	0x0800805c
 8005ec8:	3ff80000 	.word	0x3ff80000
 8005ecc:	080081a0 	.word	0x080081a0
 8005ed0:	080080fb 	.word	0x080080fb
 8005ed4:	08008088 	.word	0x08008088
 8005ed8:	0800805b 	.word	0x0800805b
 8005edc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005ee0:	6018      	str	r0, [r3, #0]
 8005ee2:	9b07      	ldr	r3, [sp, #28]
 8005ee4:	2b0e      	cmp	r3, #14
 8005ee6:	f200 80a4 	bhi.w	8006032 <_dtoa_r+0x442>
 8005eea:	2c00      	cmp	r4, #0
 8005eec:	f000 80a1 	beq.w	8006032 <_dtoa_r+0x442>
 8005ef0:	2f00      	cmp	r7, #0
 8005ef2:	dd33      	ble.n	8005f5c <_dtoa_r+0x36c>
 8005ef4:	4bad      	ldr	r3, [pc, #692]	@ (80061ac <_dtoa_r+0x5bc>)
 8005ef6:	f007 020f 	and.w	r2, r7, #15
 8005efa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005efe:	ed93 7b00 	vldr	d7, [r3]
 8005f02:	05f8      	lsls	r0, r7, #23
 8005f04:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005f08:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005f0c:	d516      	bpl.n	8005f3c <_dtoa_r+0x34c>
 8005f0e:	4ba8      	ldr	r3, [pc, #672]	@ (80061b0 <_dtoa_r+0x5c0>)
 8005f10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f18:	f7fa fc98 	bl	800084c <__aeabi_ddiv>
 8005f1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f20:	f004 040f 	and.w	r4, r4, #15
 8005f24:	2603      	movs	r6, #3
 8005f26:	4da2      	ldr	r5, [pc, #648]	@ (80061b0 <_dtoa_r+0x5c0>)
 8005f28:	b954      	cbnz	r4, 8005f40 <_dtoa_r+0x350>
 8005f2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f32:	f7fa fc8b 	bl	800084c <__aeabi_ddiv>
 8005f36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f3a:	e028      	b.n	8005f8e <_dtoa_r+0x39e>
 8005f3c:	2602      	movs	r6, #2
 8005f3e:	e7f2      	b.n	8005f26 <_dtoa_r+0x336>
 8005f40:	07e1      	lsls	r1, r4, #31
 8005f42:	d508      	bpl.n	8005f56 <_dtoa_r+0x366>
 8005f44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f4c:	f7fa fb54 	bl	80005f8 <__aeabi_dmul>
 8005f50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f54:	3601      	adds	r6, #1
 8005f56:	1064      	asrs	r4, r4, #1
 8005f58:	3508      	adds	r5, #8
 8005f5a:	e7e5      	b.n	8005f28 <_dtoa_r+0x338>
 8005f5c:	f000 80d2 	beq.w	8006104 <_dtoa_r+0x514>
 8005f60:	427c      	negs	r4, r7
 8005f62:	4b92      	ldr	r3, [pc, #584]	@ (80061ac <_dtoa_r+0x5bc>)
 8005f64:	4d92      	ldr	r5, [pc, #584]	@ (80061b0 <_dtoa_r+0x5c0>)
 8005f66:	f004 020f 	and.w	r2, r4, #15
 8005f6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f72:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f76:	f7fa fb3f 	bl	80005f8 <__aeabi_dmul>
 8005f7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f7e:	1124      	asrs	r4, r4, #4
 8005f80:	2300      	movs	r3, #0
 8005f82:	2602      	movs	r6, #2
 8005f84:	2c00      	cmp	r4, #0
 8005f86:	f040 80b2 	bne.w	80060ee <_dtoa_r+0x4fe>
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1d3      	bne.n	8005f36 <_dtoa_r+0x346>
 8005f8e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005f90:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 80b7 	beq.w	8006108 <_dtoa_r+0x518>
 8005f9a:	4b86      	ldr	r3, [pc, #536]	@ (80061b4 <_dtoa_r+0x5c4>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	4629      	mov	r1, r5
 8005fa2:	f7fa fd9b 	bl	8000adc <__aeabi_dcmplt>
 8005fa6:	2800      	cmp	r0, #0
 8005fa8:	f000 80ae 	beq.w	8006108 <_dtoa_r+0x518>
 8005fac:	9b07      	ldr	r3, [sp, #28]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f000 80aa 	beq.w	8006108 <_dtoa_r+0x518>
 8005fb4:	9b00      	ldr	r3, [sp, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	dd37      	ble.n	800602a <_dtoa_r+0x43a>
 8005fba:	1e7b      	subs	r3, r7, #1
 8005fbc:	9304      	str	r3, [sp, #16]
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	4b7d      	ldr	r3, [pc, #500]	@ (80061b8 <_dtoa_r+0x5c8>)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	4629      	mov	r1, r5
 8005fc6:	f7fa fb17 	bl	80005f8 <__aeabi_dmul>
 8005fca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fce:	9c00      	ldr	r4, [sp, #0]
 8005fd0:	3601      	adds	r6, #1
 8005fd2:	4630      	mov	r0, r6
 8005fd4:	f7fa faa6 	bl	8000524 <__aeabi_i2d>
 8005fd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005fdc:	f7fa fb0c 	bl	80005f8 <__aeabi_dmul>
 8005fe0:	4b76      	ldr	r3, [pc, #472]	@ (80061bc <_dtoa_r+0x5cc>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f7fa f952 	bl	800028c <__adddf3>
 8005fe8:	4605      	mov	r5, r0
 8005fea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005fee:	2c00      	cmp	r4, #0
 8005ff0:	f040 808d 	bne.w	800610e <_dtoa_r+0x51e>
 8005ff4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ff8:	4b71      	ldr	r3, [pc, #452]	@ (80061c0 <_dtoa_r+0x5d0>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f7fa f944 	bl	8000288 <__aeabi_dsub>
 8006000:	4602      	mov	r2, r0
 8006002:	460b      	mov	r3, r1
 8006004:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006008:	462a      	mov	r2, r5
 800600a:	4633      	mov	r3, r6
 800600c:	f7fa fd84 	bl	8000b18 <__aeabi_dcmpgt>
 8006010:	2800      	cmp	r0, #0
 8006012:	f040 828b 	bne.w	800652c <_dtoa_r+0x93c>
 8006016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800601a:	462a      	mov	r2, r5
 800601c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006020:	f7fa fd5c 	bl	8000adc <__aeabi_dcmplt>
 8006024:	2800      	cmp	r0, #0
 8006026:	f040 8128 	bne.w	800627a <_dtoa_r+0x68a>
 800602a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800602e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006032:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006034:	2b00      	cmp	r3, #0
 8006036:	f2c0 815a 	blt.w	80062ee <_dtoa_r+0x6fe>
 800603a:	2f0e      	cmp	r7, #14
 800603c:	f300 8157 	bgt.w	80062ee <_dtoa_r+0x6fe>
 8006040:	4b5a      	ldr	r3, [pc, #360]	@ (80061ac <_dtoa_r+0x5bc>)
 8006042:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006046:	ed93 7b00 	vldr	d7, [r3]
 800604a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800604c:	2b00      	cmp	r3, #0
 800604e:	ed8d 7b00 	vstr	d7, [sp]
 8006052:	da03      	bge.n	800605c <_dtoa_r+0x46c>
 8006054:	9b07      	ldr	r3, [sp, #28]
 8006056:	2b00      	cmp	r3, #0
 8006058:	f340 8101 	ble.w	800625e <_dtoa_r+0x66e>
 800605c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006060:	4656      	mov	r6, sl
 8006062:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006066:	4620      	mov	r0, r4
 8006068:	4629      	mov	r1, r5
 800606a:	f7fa fbef 	bl	800084c <__aeabi_ddiv>
 800606e:	f7fa fd73 	bl	8000b58 <__aeabi_d2iz>
 8006072:	4680      	mov	r8, r0
 8006074:	f7fa fa56 	bl	8000524 <__aeabi_i2d>
 8006078:	e9dd 2300 	ldrd	r2, r3, [sp]
 800607c:	f7fa fabc 	bl	80005f8 <__aeabi_dmul>
 8006080:	4602      	mov	r2, r0
 8006082:	460b      	mov	r3, r1
 8006084:	4620      	mov	r0, r4
 8006086:	4629      	mov	r1, r5
 8006088:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800608c:	f7fa f8fc 	bl	8000288 <__aeabi_dsub>
 8006090:	f806 4b01 	strb.w	r4, [r6], #1
 8006094:	9d07      	ldr	r5, [sp, #28]
 8006096:	eba6 040a 	sub.w	r4, r6, sl
 800609a:	42a5      	cmp	r5, r4
 800609c:	4602      	mov	r2, r0
 800609e:	460b      	mov	r3, r1
 80060a0:	f040 8117 	bne.w	80062d2 <_dtoa_r+0x6e2>
 80060a4:	f7fa f8f2 	bl	800028c <__adddf3>
 80060a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060ac:	4604      	mov	r4, r0
 80060ae:	460d      	mov	r5, r1
 80060b0:	f7fa fd32 	bl	8000b18 <__aeabi_dcmpgt>
 80060b4:	2800      	cmp	r0, #0
 80060b6:	f040 80f9 	bne.w	80062ac <_dtoa_r+0x6bc>
 80060ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060be:	4620      	mov	r0, r4
 80060c0:	4629      	mov	r1, r5
 80060c2:	f7fa fd01 	bl	8000ac8 <__aeabi_dcmpeq>
 80060c6:	b118      	cbz	r0, 80060d0 <_dtoa_r+0x4e0>
 80060c8:	f018 0f01 	tst.w	r8, #1
 80060cc:	f040 80ee 	bne.w	80062ac <_dtoa_r+0x6bc>
 80060d0:	4649      	mov	r1, r9
 80060d2:	4658      	mov	r0, fp
 80060d4:	f000 fc90 	bl	80069f8 <_Bfree>
 80060d8:	2300      	movs	r3, #0
 80060da:	7033      	strb	r3, [r6, #0]
 80060dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80060de:	3701      	adds	r7, #1
 80060e0:	601f      	str	r7, [r3, #0]
 80060e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 831d 	beq.w	8006724 <_dtoa_r+0xb34>
 80060ea:	601e      	str	r6, [r3, #0]
 80060ec:	e31a      	b.n	8006724 <_dtoa_r+0xb34>
 80060ee:	07e2      	lsls	r2, r4, #31
 80060f0:	d505      	bpl.n	80060fe <_dtoa_r+0x50e>
 80060f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80060f6:	f7fa fa7f 	bl	80005f8 <__aeabi_dmul>
 80060fa:	3601      	adds	r6, #1
 80060fc:	2301      	movs	r3, #1
 80060fe:	1064      	asrs	r4, r4, #1
 8006100:	3508      	adds	r5, #8
 8006102:	e73f      	b.n	8005f84 <_dtoa_r+0x394>
 8006104:	2602      	movs	r6, #2
 8006106:	e742      	b.n	8005f8e <_dtoa_r+0x39e>
 8006108:	9c07      	ldr	r4, [sp, #28]
 800610a:	9704      	str	r7, [sp, #16]
 800610c:	e761      	b.n	8005fd2 <_dtoa_r+0x3e2>
 800610e:	4b27      	ldr	r3, [pc, #156]	@ (80061ac <_dtoa_r+0x5bc>)
 8006110:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006112:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006116:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800611a:	4454      	add	r4, sl
 800611c:	2900      	cmp	r1, #0
 800611e:	d053      	beq.n	80061c8 <_dtoa_r+0x5d8>
 8006120:	4928      	ldr	r1, [pc, #160]	@ (80061c4 <_dtoa_r+0x5d4>)
 8006122:	2000      	movs	r0, #0
 8006124:	f7fa fb92 	bl	800084c <__aeabi_ddiv>
 8006128:	4633      	mov	r3, r6
 800612a:	462a      	mov	r2, r5
 800612c:	f7fa f8ac 	bl	8000288 <__aeabi_dsub>
 8006130:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006134:	4656      	mov	r6, sl
 8006136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800613a:	f7fa fd0d 	bl	8000b58 <__aeabi_d2iz>
 800613e:	4605      	mov	r5, r0
 8006140:	f7fa f9f0 	bl	8000524 <__aeabi_i2d>
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800614c:	f7fa f89c 	bl	8000288 <__aeabi_dsub>
 8006150:	3530      	adds	r5, #48	@ 0x30
 8006152:	4602      	mov	r2, r0
 8006154:	460b      	mov	r3, r1
 8006156:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800615a:	f806 5b01 	strb.w	r5, [r6], #1
 800615e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006162:	f7fa fcbb 	bl	8000adc <__aeabi_dcmplt>
 8006166:	2800      	cmp	r0, #0
 8006168:	d171      	bne.n	800624e <_dtoa_r+0x65e>
 800616a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800616e:	4911      	ldr	r1, [pc, #68]	@ (80061b4 <_dtoa_r+0x5c4>)
 8006170:	2000      	movs	r0, #0
 8006172:	f7fa f889 	bl	8000288 <__aeabi_dsub>
 8006176:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800617a:	f7fa fcaf 	bl	8000adc <__aeabi_dcmplt>
 800617e:	2800      	cmp	r0, #0
 8006180:	f040 8095 	bne.w	80062ae <_dtoa_r+0x6be>
 8006184:	42a6      	cmp	r6, r4
 8006186:	f43f af50 	beq.w	800602a <_dtoa_r+0x43a>
 800618a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800618e:	4b0a      	ldr	r3, [pc, #40]	@ (80061b8 <_dtoa_r+0x5c8>)
 8006190:	2200      	movs	r2, #0
 8006192:	f7fa fa31 	bl	80005f8 <__aeabi_dmul>
 8006196:	4b08      	ldr	r3, [pc, #32]	@ (80061b8 <_dtoa_r+0x5c8>)
 8006198:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800619c:	2200      	movs	r2, #0
 800619e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061a2:	f7fa fa29 	bl	80005f8 <__aeabi_dmul>
 80061a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061aa:	e7c4      	b.n	8006136 <_dtoa_r+0x546>
 80061ac:	080081a0 	.word	0x080081a0
 80061b0:	08008178 	.word	0x08008178
 80061b4:	3ff00000 	.word	0x3ff00000
 80061b8:	40240000 	.word	0x40240000
 80061bc:	401c0000 	.word	0x401c0000
 80061c0:	40140000 	.word	0x40140000
 80061c4:	3fe00000 	.word	0x3fe00000
 80061c8:	4631      	mov	r1, r6
 80061ca:	4628      	mov	r0, r5
 80061cc:	f7fa fa14 	bl	80005f8 <__aeabi_dmul>
 80061d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80061d4:	9415      	str	r4, [sp, #84]	@ 0x54
 80061d6:	4656      	mov	r6, sl
 80061d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061dc:	f7fa fcbc 	bl	8000b58 <__aeabi_d2iz>
 80061e0:	4605      	mov	r5, r0
 80061e2:	f7fa f99f 	bl	8000524 <__aeabi_i2d>
 80061e6:	4602      	mov	r2, r0
 80061e8:	460b      	mov	r3, r1
 80061ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061ee:	f7fa f84b 	bl	8000288 <__aeabi_dsub>
 80061f2:	3530      	adds	r5, #48	@ 0x30
 80061f4:	f806 5b01 	strb.w	r5, [r6], #1
 80061f8:	4602      	mov	r2, r0
 80061fa:	460b      	mov	r3, r1
 80061fc:	42a6      	cmp	r6, r4
 80061fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006202:	f04f 0200 	mov.w	r2, #0
 8006206:	d124      	bne.n	8006252 <_dtoa_r+0x662>
 8006208:	4bac      	ldr	r3, [pc, #688]	@ (80064bc <_dtoa_r+0x8cc>)
 800620a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800620e:	f7fa f83d 	bl	800028c <__adddf3>
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800621a:	f7fa fc7d 	bl	8000b18 <__aeabi_dcmpgt>
 800621e:	2800      	cmp	r0, #0
 8006220:	d145      	bne.n	80062ae <_dtoa_r+0x6be>
 8006222:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006226:	49a5      	ldr	r1, [pc, #660]	@ (80064bc <_dtoa_r+0x8cc>)
 8006228:	2000      	movs	r0, #0
 800622a:	f7fa f82d 	bl	8000288 <__aeabi_dsub>
 800622e:	4602      	mov	r2, r0
 8006230:	460b      	mov	r3, r1
 8006232:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006236:	f7fa fc51 	bl	8000adc <__aeabi_dcmplt>
 800623a:	2800      	cmp	r0, #0
 800623c:	f43f aef5 	beq.w	800602a <_dtoa_r+0x43a>
 8006240:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006242:	1e73      	subs	r3, r6, #1
 8006244:	9315      	str	r3, [sp, #84]	@ 0x54
 8006246:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800624a:	2b30      	cmp	r3, #48	@ 0x30
 800624c:	d0f8      	beq.n	8006240 <_dtoa_r+0x650>
 800624e:	9f04      	ldr	r7, [sp, #16]
 8006250:	e73e      	b.n	80060d0 <_dtoa_r+0x4e0>
 8006252:	4b9b      	ldr	r3, [pc, #620]	@ (80064c0 <_dtoa_r+0x8d0>)
 8006254:	f7fa f9d0 	bl	80005f8 <__aeabi_dmul>
 8006258:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800625c:	e7bc      	b.n	80061d8 <_dtoa_r+0x5e8>
 800625e:	d10c      	bne.n	800627a <_dtoa_r+0x68a>
 8006260:	4b98      	ldr	r3, [pc, #608]	@ (80064c4 <_dtoa_r+0x8d4>)
 8006262:	2200      	movs	r2, #0
 8006264:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006268:	f7fa f9c6 	bl	80005f8 <__aeabi_dmul>
 800626c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006270:	f7fa fc48 	bl	8000b04 <__aeabi_dcmpge>
 8006274:	2800      	cmp	r0, #0
 8006276:	f000 8157 	beq.w	8006528 <_dtoa_r+0x938>
 800627a:	2400      	movs	r4, #0
 800627c:	4625      	mov	r5, r4
 800627e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006280:	43db      	mvns	r3, r3
 8006282:	9304      	str	r3, [sp, #16]
 8006284:	4656      	mov	r6, sl
 8006286:	2700      	movs	r7, #0
 8006288:	4621      	mov	r1, r4
 800628a:	4658      	mov	r0, fp
 800628c:	f000 fbb4 	bl	80069f8 <_Bfree>
 8006290:	2d00      	cmp	r5, #0
 8006292:	d0dc      	beq.n	800624e <_dtoa_r+0x65e>
 8006294:	b12f      	cbz	r7, 80062a2 <_dtoa_r+0x6b2>
 8006296:	42af      	cmp	r7, r5
 8006298:	d003      	beq.n	80062a2 <_dtoa_r+0x6b2>
 800629a:	4639      	mov	r1, r7
 800629c:	4658      	mov	r0, fp
 800629e:	f000 fbab 	bl	80069f8 <_Bfree>
 80062a2:	4629      	mov	r1, r5
 80062a4:	4658      	mov	r0, fp
 80062a6:	f000 fba7 	bl	80069f8 <_Bfree>
 80062aa:	e7d0      	b.n	800624e <_dtoa_r+0x65e>
 80062ac:	9704      	str	r7, [sp, #16]
 80062ae:	4633      	mov	r3, r6
 80062b0:	461e      	mov	r6, r3
 80062b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062b6:	2a39      	cmp	r2, #57	@ 0x39
 80062b8:	d107      	bne.n	80062ca <_dtoa_r+0x6da>
 80062ba:	459a      	cmp	sl, r3
 80062bc:	d1f8      	bne.n	80062b0 <_dtoa_r+0x6c0>
 80062be:	9a04      	ldr	r2, [sp, #16]
 80062c0:	3201      	adds	r2, #1
 80062c2:	9204      	str	r2, [sp, #16]
 80062c4:	2230      	movs	r2, #48	@ 0x30
 80062c6:	f88a 2000 	strb.w	r2, [sl]
 80062ca:	781a      	ldrb	r2, [r3, #0]
 80062cc:	3201      	adds	r2, #1
 80062ce:	701a      	strb	r2, [r3, #0]
 80062d0:	e7bd      	b.n	800624e <_dtoa_r+0x65e>
 80062d2:	4b7b      	ldr	r3, [pc, #492]	@ (80064c0 <_dtoa_r+0x8d0>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	f7fa f98f 	bl	80005f8 <__aeabi_dmul>
 80062da:	2200      	movs	r2, #0
 80062dc:	2300      	movs	r3, #0
 80062de:	4604      	mov	r4, r0
 80062e0:	460d      	mov	r5, r1
 80062e2:	f7fa fbf1 	bl	8000ac8 <__aeabi_dcmpeq>
 80062e6:	2800      	cmp	r0, #0
 80062e8:	f43f aebb 	beq.w	8006062 <_dtoa_r+0x472>
 80062ec:	e6f0      	b.n	80060d0 <_dtoa_r+0x4e0>
 80062ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80062f0:	2a00      	cmp	r2, #0
 80062f2:	f000 80db 	beq.w	80064ac <_dtoa_r+0x8bc>
 80062f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062f8:	2a01      	cmp	r2, #1
 80062fa:	f300 80bf 	bgt.w	800647c <_dtoa_r+0x88c>
 80062fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006300:	2a00      	cmp	r2, #0
 8006302:	f000 80b7 	beq.w	8006474 <_dtoa_r+0x884>
 8006306:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800630a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800630c:	4646      	mov	r6, r8
 800630e:	9a08      	ldr	r2, [sp, #32]
 8006310:	2101      	movs	r1, #1
 8006312:	441a      	add	r2, r3
 8006314:	4658      	mov	r0, fp
 8006316:	4498      	add	r8, r3
 8006318:	9208      	str	r2, [sp, #32]
 800631a:	f000 fc21 	bl	8006b60 <__i2b>
 800631e:	4605      	mov	r5, r0
 8006320:	b15e      	cbz	r6, 800633a <_dtoa_r+0x74a>
 8006322:	9b08      	ldr	r3, [sp, #32]
 8006324:	2b00      	cmp	r3, #0
 8006326:	dd08      	ble.n	800633a <_dtoa_r+0x74a>
 8006328:	42b3      	cmp	r3, r6
 800632a:	9a08      	ldr	r2, [sp, #32]
 800632c:	bfa8      	it	ge
 800632e:	4633      	movge	r3, r6
 8006330:	eba8 0803 	sub.w	r8, r8, r3
 8006334:	1af6      	subs	r6, r6, r3
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	9308      	str	r3, [sp, #32]
 800633a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800633c:	b1f3      	cbz	r3, 800637c <_dtoa_r+0x78c>
 800633e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 80b7 	beq.w	80064b4 <_dtoa_r+0x8c4>
 8006346:	b18c      	cbz	r4, 800636c <_dtoa_r+0x77c>
 8006348:	4629      	mov	r1, r5
 800634a:	4622      	mov	r2, r4
 800634c:	4658      	mov	r0, fp
 800634e:	f000 fcc7 	bl	8006ce0 <__pow5mult>
 8006352:	464a      	mov	r2, r9
 8006354:	4601      	mov	r1, r0
 8006356:	4605      	mov	r5, r0
 8006358:	4658      	mov	r0, fp
 800635a:	f000 fc17 	bl	8006b8c <__multiply>
 800635e:	4649      	mov	r1, r9
 8006360:	9004      	str	r0, [sp, #16]
 8006362:	4658      	mov	r0, fp
 8006364:	f000 fb48 	bl	80069f8 <_Bfree>
 8006368:	9b04      	ldr	r3, [sp, #16]
 800636a:	4699      	mov	r9, r3
 800636c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800636e:	1b1a      	subs	r2, r3, r4
 8006370:	d004      	beq.n	800637c <_dtoa_r+0x78c>
 8006372:	4649      	mov	r1, r9
 8006374:	4658      	mov	r0, fp
 8006376:	f000 fcb3 	bl	8006ce0 <__pow5mult>
 800637a:	4681      	mov	r9, r0
 800637c:	2101      	movs	r1, #1
 800637e:	4658      	mov	r0, fp
 8006380:	f000 fbee 	bl	8006b60 <__i2b>
 8006384:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006386:	4604      	mov	r4, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	f000 81cf 	beq.w	800672c <_dtoa_r+0xb3c>
 800638e:	461a      	mov	r2, r3
 8006390:	4601      	mov	r1, r0
 8006392:	4658      	mov	r0, fp
 8006394:	f000 fca4 	bl	8006ce0 <__pow5mult>
 8006398:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800639a:	2b01      	cmp	r3, #1
 800639c:	4604      	mov	r4, r0
 800639e:	f300 8095 	bgt.w	80064cc <_dtoa_r+0x8dc>
 80063a2:	9b02      	ldr	r3, [sp, #8]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f040 8087 	bne.w	80064b8 <_dtoa_r+0x8c8>
 80063aa:	9b03      	ldr	r3, [sp, #12]
 80063ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f040 8089 	bne.w	80064c8 <_dtoa_r+0x8d8>
 80063b6:	9b03      	ldr	r3, [sp, #12]
 80063b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80063bc:	0d1b      	lsrs	r3, r3, #20
 80063be:	051b      	lsls	r3, r3, #20
 80063c0:	b12b      	cbz	r3, 80063ce <_dtoa_r+0x7de>
 80063c2:	9b08      	ldr	r3, [sp, #32]
 80063c4:	3301      	adds	r3, #1
 80063c6:	9308      	str	r3, [sp, #32]
 80063c8:	f108 0801 	add.w	r8, r8, #1
 80063cc:	2301      	movs	r3, #1
 80063ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80063d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f000 81b0 	beq.w	8006738 <_dtoa_r+0xb48>
 80063d8:	6923      	ldr	r3, [r4, #16]
 80063da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80063de:	6918      	ldr	r0, [r3, #16]
 80063e0:	f000 fb72 	bl	8006ac8 <__hi0bits>
 80063e4:	f1c0 0020 	rsb	r0, r0, #32
 80063e8:	9b08      	ldr	r3, [sp, #32]
 80063ea:	4418      	add	r0, r3
 80063ec:	f010 001f 	ands.w	r0, r0, #31
 80063f0:	d077      	beq.n	80064e2 <_dtoa_r+0x8f2>
 80063f2:	f1c0 0320 	rsb	r3, r0, #32
 80063f6:	2b04      	cmp	r3, #4
 80063f8:	dd6b      	ble.n	80064d2 <_dtoa_r+0x8e2>
 80063fa:	9b08      	ldr	r3, [sp, #32]
 80063fc:	f1c0 001c 	rsb	r0, r0, #28
 8006400:	4403      	add	r3, r0
 8006402:	4480      	add	r8, r0
 8006404:	4406      	add	r6, r0
 8006406:	9308      	str	r3, [sp, #32]
 8006408:	f1b8 0f00 	cmp.w	r8, #0
 800640c:	dd05      	ble.n	800641a <_dtoa_r+0x82a>
 800640e:	4649      	mov	r1, r9
 8006410:	4642      	mov	r2, r8
 8006412:	4658      	mov	r0, fp
 8006414:	f000 fcbe 	bl	8006d94 <__lshift>
 8006418:	4681      	mov	r9, r0
 800641a:	9b08      	ldr	r3, [sp, #32]
 800641c:	2b00      	cmp	r3, #0
 800641e:	dd05      	ble.n	800642c <_dtoa_r+0x83c>
 8006420:	4621      	mov	r1, r4
 8006422:	461a      	mov	r2, r3
 8006424:	4658      	mov	r0, fp
 8006426:	f000 fcb5 	bl	8006d94 <__lshift>
 800642a:	4604      	mov	r4, r0
 800642c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800642e:	2b00      	cmp	r3, #0
 8006430:	d059      	beq.n	80064e6 <_dtoa_r+0x8f6>
 8006432:	4621      	mov	r1, r4
 8006434:	4648      	mov	r0, r9
 8006436:	f000 fd19 	bl	8006e6c <__mcmp>
 800643a:	2800      	cmp	r0, #0
 800643c:	da53      	bge.n	80064e6 <_dtoa_r+0x8f6>
 800643e:	1e7b      	subs	r3, r7, #1
 8006440:	9304      	str	r3, [sp, #16]
 8006442:	4649      	mov	r1, r9
 8006444:	2300      	movs	r3, #0
 8006446:	220a      	movs	r2, #10
 8006448:	4658      	mov	r0, fp
 800644a:	f000 faf7 	bl	8006a3c <__multadd>
 800644e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006450:	4681      	mov	r9, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	f000 8172 	beq.w	800673c <_dtoa_r+0xb4c>
 8006458:	2300      	movs	r3, #0
 800645a:	4629      	mov	r1, r5
 800645c:	220a      	movs	r2, #10
 800645e:	4658      	mov	r0, fp
 8006460:	f000 faec 	bl	8006a3c <__multadd>
 8006464:	9b00      	ldr	r3, [sp, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	4605      	mov	r5, r0
 800646a:	dc67      	bgt.n	800653c <_dtoa_r+0x94c>
 800646c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800646e:	2b02      	cmp	r3, #2
 8006470:	dc41      	bgt.n	80064f6 <_dtoa_r+0x906>
 8006472:	e063      	b.n	800653c <_dtoa_r+0x94c>
 8006474:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006476:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800647a:	e746      	b.n	800630a <_dtoa_r+0x71a>
 800647c:	9b07      	ldr	r3, [sp, #28]
 800647e:	1e5c      	subs	r4, r3, #1
 8006480:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006482:	42a3      	cmp	r3, r4
 8006484:	bfbf      	itttt	lt
 8006486:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006488:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800648a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800648c:	1ae3      	sublt	r3, r4, r3
 800648e:	bfb4      	ite	lt
 8006490:	18d2      	addlt	r2, r2, r3
 8006492:	1b1c      	subge	r4, r3, r4
 8006494:	9b07      	ldr	r3, [sp, #28]
 8006496:	bfbc      	itt	lt
 8006498:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800649a:	2400      	movlt	r4, #0
 800649c:	2b00      	cmp	r3, #0
 800649e:	bfb5      	itete	lt
 80064a0:	eba8 0603 	sublt.w	r6, r8, r3
 80064a4:	9b07      	ldrge	r3, [sp, #28]
 80064a6:	2300      	movlt	r3, #0
 80064a8:	4646      	movge	r6, r8
 80064aa:	e730      	b.n	800630e <_dtoa_r+0x71e>
 80064ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80064ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80064b0:	4646      	mov	r6, r8
 80064b2:	e735      	b.n	8006320 <_dtoa_r+0x730>
 80064b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80064b6:	e75c      	b.n	8006372 <_dtoa_r+0x782>
 80064b8:	2300      	movs	r3, #0
 80064ba:	e788      	b.n	80063ce <_dtoa_r+0x7de>
 80064bc:	3fe00000 	.word	0x3fe00000
 80064c0:	40240000 	.word	0x40240000
 80064c4:	40140000 	.word	0x40140000
 80064c8:	9b02      	ldr	r3, [sp, #8]
 80064ca:	e780      	b.n	80063ce <_dtoa_r+0x7de>
 80064cc:	2300      	movs	r3, #0
 80064ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80064d0:	e782      	b.n	80063d8 <_dtoa_r+0x7e8>
 80064d2:	d099      	beq.n	8006408 <_dtoa_r+0x818>
 80064d4:	9a08      	ldr	r2, [sp, #32]
 80064d6:	331c      	adds	r3, #28
 80064d8:	441a      	add	r2, r3
 80064da:	4498      	add	r8, r3
 80064dc:	441e      	add	r6, r3
 80064de:	9208      	str	r2, [sp, #32]
 80064e0:	e792      	b.n	8006408 <_dtoa_r+0x818>
 80064e2:	4603      	mov	r3, r0
 80064e4:	e7f6      	b.n	80064d4 <_dtoa_r+0x8e4>
 80064e6:	9b07      	ldr	r3, [sp, #28]
 80064e8:	9704      	str	r7, [sp, #16]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	dc20      	bgt.n	8006530 <_dtoa_r+0x940>
 80064ee:	9300      	str	r3, [sp, #0]
 80064f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	dd1e      	ble.n	8006534 <_dtoa_r+0x944>
 80064f6:	9b00      	ldr	r3, [sp, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f47f aec0 	bne.w	800627e <_dtoa_r+0x68e>
 80064fe:	4621      	mov	r1, r4
 8006500:	2205      	movs	r2, #5
 8006502:	4658      	mov	r0, fp
 8006504:	f000 fa9a 	bl	8006a3c <__multadd>
 8006508:	4601      	mov	r1, r0
 800650a:	4604      	mov	r4, r0
 800650c:	4648      	mov	r0, r9
 800650e:	f000 fcad 	bl	8006e6c <__mcmp>
 8006512:	2800      	cmp	r0, #0
 8006514:	f77f aeb3 	ble.w	800627e <_dtoa_r+0x68e>
 8006518:	4656      	mov	r6, sl
 800651a:	2331      	movs	r3, #49	@ 0x31
 800651c:	f806 3b01 	strb.w	r3, [r6], #1
 8006520:	9b04      	ldr	r3, [sp, #16]
 8006522:	3301      	adds	r3, #1
 8006524:	9304      	str	r3, [sp, #16]
 8006526:	e6ae      	b.n	8006286 <_dtoa_r+0x696>
 8006528:	9c07      	ldr	r4, [sp, #28]
 800652a:	9704      	str	r7, [sp, #16]
 800652c:	4625      	mov	r5, r4
 800652e:	e7f3      	b.n	8006518 <_dtoa_r+0x928>
 8006530:	9b07      	ldr	r3, [sp, #28]
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006536:	2b00      	cmp	r3, #0
 8006538:	f000 8104 	beq.w	8006744 <_dtoa_r+0xb54>
 800653c:	2e00      	cmp	r6, #0
 800653e:	dd05      	ble.n	800654c <_dtoa_r+0x95c>
 8006540:	4629      	mov	r1, r5
 8006542:	4632      	mov	r2, r6
 8006544:	4658      	mov	r0, fp
 8006546:	f000 fc25 	bl	8006d94 <__lshift>
 800654a:	4605      	mov	r5, r0
 800654c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800654e:	2b00      	cmp	r3, #0
 8006550:	d05a      	beq.n	8006608 <_dtoa_r+0xa18>
 8006552:	6869      	ldr	r1, [r5, #4]
 8006554:	4658      	mov	r0, fp
 8006556:	f000 fa0f 	bl	8006978 <_Balloc>
 800655a:	4606      	mov	r6, r0
 800655c:	b928      	cbnz	r0, 800656a <_dtoa_r+0x97a>
 800655e:	4b84      	ldr	r3, [pc, #528]	@ (8006770 <_dtoa_r+0xb80>)
 8006560:	4602      	mov	r2, r0
 8006562:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006566:	f7ff bb5a 	b.w	8005c1e <_dtoa_r+0x2e>
 800656a:	692a      	ldr	r2, [r5, #16]
 800656c:	3202      	adds	r2, #2
 800656e:	0092      	lsls	r2, r2, #2
 8006570:	f105 010c 	add.w	r1, r5, #12
 8006574:	300c      	adds	r0, #12
 8006576:	f001 f803 	bl	8007580 <memcpy>
 800657a:	2201      	movs	r2, #1
 800657c:	4631      	mov	r1, r6
 800657e:	4658      	mov	r0, fp
 8006580:	f000 fc08 	bl	8006d94 <__lshift>
 8006584:	f10a 0301 	add.w	r3, sl, #1
 8006588:	9307      	str	r3, [sp, #28]
 800658a:	9b00      	ldr	r3, [sp, #0]
 800658c:	4453      	add	r3, sl
 800658e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006590:	9b02      	ldr	r3, [sp, #8]
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	462f      	mov	r7, r5
 8006598:	930a      	str	r3, [sp, #40]	@ 0x28
 800659a:	4605      	mov	r5, r0
 800659c:	9b07      	ldr	r3, [sp, #28]
 800659e:	4621      	mov	r1, r4
 80065a0:	3b01      	subs	r3, #1
 80065a2:	4648      	mov	r0, r9
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	f7ff fa9a 	bl	8005ade <quorem>
 80065aa:	4639      	mov	r1, r7
 80065ac:	9002      	str	r0, [sp, #8]
 80065ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80065b2:	4648      	mov	r0, r9
 80065b4:	f000 fc5a 	bl	8006e6c <__mcmp>
 80065b8:	462a      	mov	r2, r5
 80065ba:	9008      	str	r0, [sp, #32]
 80065bc:	4621      	mov	r1, r4
 80065be:	4658      	mov	r0, fp
 80065c0:	f000 fc70 	bl	8006ea4 <__mdiff>
 80065c4:	68c2      	ldr	r2, [r0, #12]
 80065c6:	4606      	mov	r6, r0
 80065c8:	bb02      	cbnz	r2, 800660c <_dtoa_r+0xa1c>
 80065ca:	4601      	mov	r1, r0
 80065cc:	4648      	mov	r0, r9
 80065ce:	f000 fc4d 	bl	8006e6c <__mcmp>
 80065d2:	4602      	mov	r2, r0
 80065d4:	4631      	mov	r1, r6
 80065d6:	4658      	mov	r0, fp
 80065d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80065da:	f000 fa0d 	bl	80069f8 <_Bfree>
 80065de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80065e2:	9e07      	ldr	r6, [sp, #28]
 80065e4:	ea43 0102 	orr.w	r1, r3, r2
 80065e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065ea:	4319      	orrs	r1, r3
 80065ec:	d110      	bne.n	8006610 <_dtoa_r+0xa20>
 80065ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80065f2:	d029      	beq.n	8006648 <_dtoa_r+0xa58>
 80065f4:	9b08      	ldr	r3, [sp, #32]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	dd02      	ble.n	8006600 <_dtoa_r+0xa10>
 80065fa:	9b02      	ldr	r3, [sp, #8]
 80065fc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006600:	9b00      	ldr	r3, [sp, #0]
 8006602:	f883 8000 	strb.w	r8, [r3]
 8006606:	e63f      	b.n	8006288 <_dtoa_r+0x698>
 8006608:	4628      	mov	r0, r5
 800660a:	e7bb      	b.n	8006584 <_dtoa_r+0x994>
 800660c:	2201      	movs	r2, #1
 800660e:	e7e1      	b.n	80065d4 <_dtoa_r+0x9e4>
 8006610:	9b08      	ldr	r3, [sp, #32]
 8006612:	2b00      	cmp	r3, #0
 8006614:	db04      	blt.n	8006620 <_dtoa_r+0xa30>
 8006616:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006618:	430b      	orrs	r3, r1
 800661a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800661c:	430b      	orrs	r3, r1
 800661e:	d120      	bne.n	8006662 <_dtoa_r+0xa72>
 8006620:	2a00      	cmp	r2, #0
 8006622:	dded      	ble.n	8006600 <_dtoa_r+0xa10>
 8006624:	4649      	mov	r1, r9
 8006626:	2201      	movs	r2, #1
 8006628:	4658      	mov	r0, fp
 800662a:	f000 fbb3 	bl	8006d94 <__lshift>
 800662e:	4621      	mov	r1, r4
 8006630:	4681      	mov	r9, r0
 8006632:	f000 fc1b 	bl	8006e6c <__mcmp>
 8006636:	2800      	cmp	r0, #0
 8006638:	dc03      	bgt.n	8006642 <_dtoa_r+0xa52>
 800663a:	d1e1      	bne.n	8006600 <_dtoa_r+0xa10>
 800663c:	f018 0f01 	tst.w	r8, #1
 8006640:	d0de      	beq.n	8006600 <_dtoa_r+0xa10>
 8006642:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006646:	d1d8      	bne.n	80065fa <_dtoa_r+0xa0a>
 8006648:	9a00      	ldr	r2, [sp, #0]
 800664a:	2339      	movs	r3, #57	@ 0x39
 800664c:	7013      	strb	r3, [r2, #0]
 800664e:	4633      	mov	r3, r6
 8006650:	461e      	mov	r6, r3
 8006652:	3b01      	subs	r3, #1
 8006654:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006658:	2a39      	cmp	r2, #57	@ 0x39
 800665a:	d052      	beq.n	8006702 <_dtoa_r+0xb12>
 800665c:	3201      	adds	r2, #1
 800665e:	701a      	strb	r2, [r3, #0]
 8006660:	e612      	b.n	8006288 <_dtoa_r+0x698>
 8006662:	2a00      	cmp	r2, #0
 8006664:	dd07      	ble.n	8006676 <_dtoa_r+0xa86>
 8006666:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800666a:	d0ed      	beq.n	8006648 <_dtoa_r+0xa58>
 800666c:	9a00      	ldr	r2, [sp, #0]
 800666e:	f108 0301 	add.w	r3, r8, #1
 8006672:	7013      	strb	r3, [r2, #0]
 8006674:	e608      	b.n	8006288 <_dtoa_r+0x698>
 8006676:	9b07      	ldr	r3, [sp, #28]
 8006678:	9a07      	ldr	r2, [sp, #28]
 800667a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800667e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006680:	4293      	cmp	r3, r2
 8006682:	d028      	beq.n	80066d6 <_dtoa_r+0xae6>
 8006684:	4649      	mov	r1, r9
 8006686:	2300      	movs	r3, #0
 8006688:	220a      	movs	r2, #10
 800668a:	4658      	mov	r0, fp
 800668c:	f000 f9d6 	bl	8006a3c <__multadd>
 8006690:	42af      	cmp	r7, r5
 8006692:	4681      	mov	r9, r0
 8006694:	f04f 0300 	mov.w	r3, #0
 8006698:	f04f 020a 	mov.w	r2, #10
 800669c:	4639      	mov	r1, r7
 800669e:	4658      	mov	r0, fp
 80066a0:	d107      	bne.n	80066b2 <_dtoa_r+0xac2>
 80066a2:	f000 f9cb 	bl	8006a3c <__multadd>
 80066a6:	4607      	mov	r7, r0
 80066a8:	4605      	mov	r5, r0
 80066aa:	9b07      	ldr	r3, [sp, #28]
 80066ac:	3301      	adds	r3, #1
 80066ae:	9307      	str	r3, [sp, #28]
 80066b0:	e774      	b.n	800659c <_dtoa_r+0x9ac>
 80066b2:	f000 f9c3 	bl	8006a3c <__multadd>
 80066b6:	4629      	mov	r1, r5
 80066b8:	4607      	mov	r7, r0
 80066ba:	2300      	movs	r3, #0
 80066bc:	220a      	movs	r2, #10
 80066be:	4658      	mov	r0, fp
 80066c0:	f000 f9bc 	bl	8006a3c <__multadd>
 80066c4:	4605      	mov	r5, r0
 80066c6:	e7f0      	b.n	80066aa <_dtoa_r+0xaba>
 80066c8:	9b00      	ldr	r3, [sp, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	bfcc      	ite	gt
 80066ce:	461e      	movgt	r6, r3
 80066d0:	2601      	movle	r6, #1
 80066d2:	4456      	add	r6, sl
 80066d4:	2700      	movs	r7, #0
 80066d6:	4649      	mov	r1, r9
 80066d8:	2201      	movs	r2, #1
 80066da:	4658      	mov	r0, fp
 80066dc:	f000 fb5a 	bl	8006d94 <__lshift>
 80066e0:	4621      	mov	r1, r4
 80066e2:	4681      	mov	r9, r0
 80066e4:	f000 fbc2 	bl	8006e6c <__mcmp>
 80066e8:	2800      	cmp	r0, #0
 80066ea:	dcb0      	bgt.n	800664e <_dtoa_r+0xa5e>
 80066ec:	d102      	bne.n	80066f4 <_dtoa_r+0xb04>
 80066ee:	f018 0f01 	tst.w	r8, #1
 80066f2:	d1ac      	bne.n	800664e <_dtoa_r+0xa5e>
 80066f4:	4633      	mov	r3, r6
 80066f6:	461e      	mov	r6, r3
 80066f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066fc:	2a30      	cmp	r2, #48	@ 0x30
 80066fe:	d0fa      	beq.n	80066f6 <_dtoa_r+0xb06>
 8006700:	e5c2      	b.n	8006288 <_dtoa_r+0x698>
 8006702:	459a      	cmp	sl, r3
 8006704:	d1a4      	bne.n	8006650 <_dtoa_r+0xa60>
 8006706:	9b04      	ldr	r3, [sp, #16]
 8006708:	3301      	adds	r3, #1
 800670a:	9304      	str	r3, [sp, #16]
 800670c:	2331      	movs	r3, #49	@ 0x31
 800670e:	f88a 3000 	strb.w	r3, [sl]
 8006712:	e5b9      	b.n	8006288 <_dtoa_r+0x698>
 8006714:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006716:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006774 <_dtoa_r+0xb84>
 800671a:	b11b      	cbz	r3, 8006724 <_dtoa_r+0xb34>
 800671c:	f10a 0308 	add.w	r3, sl, #8
 8006720:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006722:	6013      	str	r3, [r2, #0]
 8006724:	4650      	mov	r0, sl
 8006726:	b019      	add	sp, #100	@ 0x64
 8006728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800672c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800672e:	2b01      	cmp	r3, #1
 8006730:	f77f ae37 	ble.w	80063a2 <_dtoa_r+0x7b2>
 8006734:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006736:	930a      	str	r3, [sp, #40]	@ 0x28
 8006738:	2001      	movs	r0, #1
 800673a:	e655      	b.n	80063e8 <_dtoa_r+0x7f8>
 800673c:	9b00      	ldr	r3, [sp, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	f77f aed6 	ble.w	80064f0 <_dtoa_r+0x900>
 8006744:	4656      	mov	r6, sl
 8006746:	4621      	mov	r1, r4
 8006748:	4648      	mov	r0, r9
 800674a:	f7ff f9c8 	bl	8005ade <quorem>
 800674e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006752:	f806 8b01 	strb.w	r8, [r6], #1
 8006756:	9b00      	ldr	r3, [sp, #0]
 8006758:	eba6 020a 	sub.w	r2, r6, sl
 800675c:	4293      	cmp	r3, r2
 800675e:	ddb3      	ble.n	80066c8 <_dtoa_r+0xad8>
 8006760:	4649      	mov	r1, r9
 8006762:	2300      	movs	r3, #0
 8006764:	220a      	movs	r2, #10
 8006766:	4658      	mov	r0, fp
 8006768:	f000 f968 	bl	8006a3c <__multadd>
 800676c:	4681      	mov	r9, r0
 800676e:	e7ea      	b.n	8006746 <_dtoa_r+0xb56>
 8006770:	080080fb 	.word	0x080080fb
 8006774:	0800807f 	.word	0x0800807f

08006778 <_free_r>:
 8006778:	b538      	push	{r3, r4, r5, lr}
 800677a:	4605      	mov	r5, r0
 800677c:	2900      	cmp	r1, #0
 800677e:	d041      	beq.n	8006804 <_free_r+0x8c>
 8006780:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006784:	1f0c      	subs	r4, r1, #4
 8006786:	2b00      	cmp	r3, #0
 8006788:	bfb8      	it	lt
 800678a:	18e4      	addlt	r4, r4, r3
 800678c:	f000 f8e8 	bl	8006960 <__malloc_lock>
 8006790:	4a1d      	ldr	r2, [pc, #116]	@ (8006808 <_free_r+0x90>)
 8006792:	6813      	ldr	r3, [r2, #0]
 8006794:	b933      	cbnz	r3, 80067a4 <_free_r+0x2c>
 8006796:	6063      	str	r3, [r4, #4]
 8006798:	6014      	str	r4, [r2, #0]
 800679a:	4628      	mov	r0, r5
 800679c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067a0:	f000 b8e4 	b.w	800696c <__malloc_unlock>
 80067a4:	42a3      	cmp	r3, r4
 80067a6:	d908      	bls.n	80067ba <_free_r+0x42>
 80067a8:	6820      	ldr	r0, [r4, #0]
 80067aa:	1821      	adds	r1, r4, r0
 80067ac:	428b      	cmp	r3, r1
 80067ae:	bf01      	itttt	eq
 80067b0:	6819      	ldreq	r1, [r3, #0]
 80067b2:	685b      	ldreq	r3, [r3, #4]
 80067b4:	1809      	addeq	r1, r1, r0
 80067b6:	6021      	streq	r1, [r4, #0]
 80067b8:	e7ed      	b.n	8006796 <_free_r+0x1e>
 80067ba:	461a      	mov	r2, r3
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	b10b      	cbz	r3, 80067c4 <_free_r+0x4c>
 80067c0:	42a3      	cmp	r3, r4
 80067c2:	d9fa      	bls.n	80067ba <_free_r+0x42>
 80067c4:	6811      	ldr	r1, [r2, #0]
 80067c6:	1850      	adds	r0, r2, r1
 80067c8:	42a0      	cmp	r0, r4
 80067ca:	d10b      	bne.n	80067e4 <_free_r+0x6c>
 80067cc:	6820      	ldr	r0, [r4, #0]
 80067ce:	4401      	add	r1, r0
 80067d0:	1850      	adds	r0, r2, r1
 80067d2:	4283      	cmp	r3, r0
 80067d4:	6011      	str	r1, [r2, #0]
 80067d6:	d1e0      	bne.n	800679a <_free_r+0x22>
 80067d8:	6818      	ldr	r0, [r3, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	6053      	str	r3, [r2, #4]
 80067de:	4408      	add	r0, r1
 80067e0:	6010      	str	r0, [r2, #0]
 80067e2:	e7da      	b.n	800679a <_free_r+0x22>
 80067e4:	d902      	bls.n	80067ec <_free_r+0x74>
 80067e6:	230c      	movs	r3, #12
 80067e8:	602b      	str	r3, [r5, #0]
 80067ea:	e7d6      	b.n	800679a <_free_r+0x22>
 80067ec:	6820      	ldr	r0, [r4, #0]
 80067ee:	1821      	adds	r1, r4, r0
 80067f0:	428b      	cmp	r3, r1
 80067f2:	bf04      	itt	eq
 80067f4:	6819      	ldreq	r1, [r3, #0]
 80067f6:	685b      	ldreq	r3, [r3, #4]
 80067f8:	6063      	str	r3, [r4, #4]
 80067fa:	bf04      	itt	eq
 80067fc:	1809      	addeq	r1, r1, r0
 80067fe:	6021      	streq	r1, [r4, #0]
 8006800:	6054      	str	r4, [r2, #4]
 8006802:	e7ca      	b.n	800679a <_free_r+0x22>
 8006804:	bd38      	pop	{r3, r4, r5, pc}
 8006806:	bf00      	nop
 8006808:	200003e0 	.word	0x200003e0

0800680c <malloc>:
 800680c:	4b02      	ldr	r3, [pc, #8]	@ (8006818 <malloc+0xc>)
 800680e:	4601      	mov	r1, r0
 8006810:	6818      	ldr	r0, [r3, #0]
 8006812:	f000 b825 	b.w	8006860 <_malloc_r>
 8006816:	bf00      	nop
 8006818:	20000018 	.word	0x20000018

0800681c <sbrk_aligned>:
 800681c:	b570      	push	{r4, r5, r6, lr}
 800681e:	4e0f      	ldr	r6, [pc, #60]	@ (800685c <sbrk_aligned+0x40>)
 8006820:	460c      	mov	r4, r1
 8006822:	6831      	ldr	r1, [r6, #0]
 8006824:	4605      	mov	r5, r0
 8006826:	b911      	cbnz	r1, 800682e <sbrk_aligned+0x12>
 8006828:	f000 fe9a 	bl	8007560 <_sbrk_r>
 800682c:	6030      	str	r0, [r6, #0]
 800682e:	4621      	mov	r1, r4
 8006830:	4628      	mov	r0, r5
 8006832:	f000 fe95 	bl	8007560 <_sbrk_r>
 8006836:	1c43      	adds	r3, r0, #1
 8006838:	d103      	bne.n	8006842 <sbrk_aligned+0x26>
 800683a:	f04f 34ff 	mov.w	r4, #4294967295
 800683e:	4620      	mov	r0, r4
 8006840:	bd70      	pop	{r4, r5, r6, pc}
 8006842:	1cc4      	adds	r4, r0, #3
 8006844:	f024 0403 	bic.w	r4, r4, #3
 8006848:	42a0      	cmp	r0, r4
 800684a:	d0f8      	beq.n	800683e <sbrk_aligned+0x22>
 800684c:	1a21      	subs	r1, r4, r0
 800684e:	4628      	mov	r0, r5
 8006850:	f000 fe86 	bl	8007560 <_sbrk_r>
 8006854:	3001      	adds	r0, #1
 8006856:	d1f2      	bne.n	800683e <sbrk_aligned+0x22>
 8006858:	e7ef      	b.n	800683a <sbrk_aligned+0x1e>
 800685a:	bf00      	nop
 800685c:	200003dc 	.word	0x200003dc

08006860 <_malloc_r>:
 8006860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006864:	1ccd      	adds	r5, r1, #3
 8006866:	f025 0503 	bic.w	r5, r5, #3
 800686a:	3508      	adds	r5, #8
 800686c:	2d0c      	cmp	r5, #12
 800686e:	bf38      	it	cc
 8006870:	250c      	movcc	r5, #12
 8006872:	2d00      	cmp	r5, #0
 8006874:	4606      	mov	r6, r0
 8006876:	db01      	blt.n	800687c <_malloc_r+0x1c>
 8006878:	42a9      	cmp	r1, r5
 800687a:	d904      	bls.n	8006886 <_malloc_r+0x26>
 800687c:	230c      	movs	r3, #12
 800687e:	6033      	str	r3, [r6, #0]
 8006880:	2000      	movs	r0, #0
 8006882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006886:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800695c <_malloc_r+0xfc>
 800688a:	f000 f869 	bl	8006960 <__malloc_lock>
 800688e:	f8d8 3000 	ldr.w	r3, [r8]
 8006892:	461c      	mov	r4, r3
 8006894:	bb44      	cbnz	r4, 80068e8 <_malloc_r+0x88>
 8006896:	4629      	mov	r1, r5
 8006898:	4630      	mov	r0, r6
 800689a:	f7ff ffbf 	bl	800681c <sbrk_aligned>
 800689e:	1c43      	adds	r3, r0, #1
 80068a0:	4604      	mov	r4, r0
 80068a2:	d158      	bne.n	8006956 <_malloc_r+0xf6>
 80068a4:	f8d8 4000 	ldr.w	r4, [r8]
 80068a8:	4627      	mov	r7, r4
 80068aa:	2f00      	cmp	r7, #0
 80068ac:	d143      	bne.n	8006936 <_malloc_r+0xd6>
 80068ae:	2c00      	cmp	r4, #0
 80068b0:	d04b      	beq.n	800694a <_malloc_r+0xea>
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	4639      	mov	r1, r7
 80068b6:	4630      	mov	r0, r6
 80068b8:	eb04 0903 	add.w	r9, r4, r3
 80068bc:	f000 fe50 	bl	8007560 <_sbrk_r>
 80068c0:	4581      	cmp	r9, r0
 80068c2:	d142      	bne.n	800694a <_malloc_r+0xea>
 80068c4:	6821      	ldr	r1, [r4, #0]
 80068c6:	1a6d      	subs	r5, r5, r1
 80068c8:	4629      	mov	r1, r5
 80068ca:	4630      	mov	r0, r6
 80068cc:	f7ff ffa6 	bl	800681c <sbrk_aligned>
 80068d0:	3001      	adds	r0, #1
 80068d2:	d03a      	beq.n	800694a <_malloc_r+0xea>
 80068d4:	6823      	ldr	r3, [r4, #0]
 80068d6:	442b      	add	r3, r5
 80068d8:	6023      	str	r3, [r4, #0]
 80068da:	f8d8 3000 	ldr.w	r3, [r8]
 80068de:	685a      	ldr	r2, [r3, #4]
 80068e0:	bb62      	cbnz	r2, 800693c <_malloc_r+0xdc>
 80068e2:	f8c8 7000 	str.w	r7, [r8]
 80068e6:	e00f      	b.n	8006908 <_malloc_r+0xa8>
 80068e8:	6822      	ldr	r2, [r4, #0]
 80068ea:	1b52      	subs	r2, r2, r5
 80068ec:	d420      	bmi.n	8006930 <_malloc_r+0xd0>
 80068ee:	2a0b      	cmp	r2, #11
 80068f0:	d917      	bls.n	8006922 <_malloc_r+0xc2>
 80068f2:	1961      	adds	r1, r4, r5
 80068f4:	42a3      	cmp	r3, r4
 80068f6:	6025      	str	r5, [r4, #0]
 80068f8:	bf18      	it	ne
 80068fa:	6059      	strne	r1, [r3, #4]
 80068fc:	6863      	ldr	r3, [r4, #4]
 80068fe:	bf08      	it	eq
 8006900:	f8c8 1000 	streq.w	r1, [r8]
 8006904:	5162      	str	r2, [r4, r5]
 8006906:	604b      	str	r3, [r1, #4]
 8006908:	4630      	mov	r0, r6
 800690a:	f000 f82f 	bl	800696c <__malloc_unlock>
 800690e:	f104 000b 	add.w	r0, r4, #11
 8006912:	1d23      	adds	r3, r4, #4
 8006914:	f020 0007 	bic.w	r0, r0, #7
 8006918:	1ac2      	subs	r2, r0, r3
 800691a:	bf1c      	itt	ne
 800691c:	1a1b      	subne	r3, r3, r0
 800691e:	50a3      	strne	r3, [r4, r2]
 8006920:	e7af      	b.n	8006882 <_malloc_r+0x22>
 8006922:	6862      	ldr	r2, [r4, #4]
 8006924:	42a3      	cmp	r3, r4
 8006926:	bf0c      	ite	eq
 8006928:	f8c8 2000 	streq.w	r2, [r8]
 800692c:	605a      	strne	r2, [r3, #4]
 800692e:	e7eb      	b.n	8006908 <_malloc_r+0xa8>
 8006930:	4623      	mov	r3, r4
 8006932:	6864      	ldr	r4, [r4, #4]
 8006934:	e7ae      	b.n	8006894 <_malloc_r+0x34>
 8006936:	463c      	mov	r4, r7
 8006938:	687f      	ldr	r7, [r7, #4]
 800693a:	e7b6      	b.n	80068aa <_malloc_r+0x4a>
 800693c:	461a      	mov	r2, r3
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	42a3      	cmp	r3, r4
 8006942:	d1fb      	bne.n	800693c <_malloc_r+0xdc>
 8006944:	2300      	movs	r3, #0
 8006946:	6053      	str	r3, [r2, #4]
 8006948:	e7de      	b.n	8006908 <_malloc_r+0xa8>
 800694a:	230c      	movs	r3, #12
 800694c:	6033      	str	r3, [r6, #0]
 800694e:	4630      	mov	r0, r6
 8006950:	f000 f80c 	bl	800696c <__malloc_unlock>
 8006954:	e794      	b.n	8006880 <_malloc_r+0x20>
 8006956:	6005      	str	r5, [r0, #0]
 8006958:	e7d6      	b.n	8006908 <_malloc_r+0xa8>
 800695a:	bf00      	nop
 800695c:	200003e0 	.word	0x200003e0

08006960 <__malloc_lock>:
 8006960:	4801      	ldr	r0, [pc, #4]	@ (8006968 <__malloc_lock+0x8>)
 8006962:	f7ff b8ba 	b.w	8005ada <__retarget_lock_acquire_recursive>
 8006966:	bf00      	nop
 8006968:	200003d8 	.word	0x200003d8

0800696c <__malloc_unlock>:
 800696c:	4801      	ldr	r0, [pc, #4]	@ (8006974 <__malloc_unlock+0x8>)
 800696e:	f7ff b8b5 	b.w	8005adc <__retarget_lock_release_recursive>
 8006972:	bf00      	nop
 8006974:	200003d8 	.word	0x200003d8

08006978 <_Balloc>:
 8006978:	b570      	push	{r4, r5, r6, lr}
 800697a:	69c6      	ldr	r6, [r0, #28]
 800697c:	4604      	mov	r4, r0
 800697e:	460d      	mov	r5, r1
 8006980:	b976      	cbnz	r6, 80069a0 <_Balloc+0x28>
 8006982:	2010      	movs	r0, #16
 8006984:	f7ff ff42 	bl	800680c <malloc>
 8006988:	4602      	mov	r2, r0
 800698a:	61e0      	str	r0, [r4, #28]
 800698c:	b920      	cbnz	r0, 8006998 <_Balloc+0x20>
 800698e:	4b18      	ldr	r3, [pc, #96]	@ (80069f0 <_Balloc+0x78>)
 8006990:	4818      	ldr	r0, [pc, #96]	@ (80069f4 <_Balloc+0x7c>)
 8006992:	216b      	movs	r1, #107	@ 0x6b
 8006994:	f000 fe02 	bl	800759c <__assert_func>
 8006998:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800699c:	6006      	str	r6, [r0, #0]
 800699e:	60c6      	str	r6, [r0, #12]
 80069a0:	69e6      	ldr	r6, [r4, #28]
 80069a2:	68f3      	ldr	r3, [r6, #12]
 80069a4:	b183      	cbz	r3, 80069c8 <_Balloc+0x50>
 80069a6:	69e3      	ldr	r3, [r4, #28]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80069ae:	b9b8      	cbnz	r0, 80069e0 <_Balloc+0x68>
 80069b0:	2101      	movs	r1, #1
 80069b2:	fa01 f605 	lsl.w	r6, r1, r5
 80069b6:	1d72      	adds	r2, r6, #5
 80069b8:	0092      	lsls	r2, r2, #2
 80069ba:	4620      	mov	r0, r4
 80069bc:	f000 fe0c 	bl	80075d8 <_calloc_r>
 80069c0:	b160      	cbz	r0, 80069dc <_Balloc+0x64>
 80069c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80069c6:	e00e      	b.n	80069e6 <_Balloc+0x6e>
 80069c8:	2221      	movs	r2, #33	@ 0x21
 80069ca:	2104      	movs	r1, #4
 80069cc:	4620      	mov	r0, r4
 80069ce:	f000 fe03 	bl	80075d8 <_calloc_r>
 80069d2:	69e3      	ldr	r3, [r4, #28]
 80069d4:	60f0      	str	r0, [r6, #12]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1e4      	bne.n	80069a6 <_Balloc+0x2e>
 80069dc:	2000      	movs	r0, #0
 80069de:	bd70      	pop	{r4, r5, r6, pc}
 80069e0:	6802      	ldr	r2, [r0, #0]
 80069e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80069e6:	2300      	movs	r3, #0
 80069e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80069ec:	e7f7      	b.n	80069de <_Balloc+0x66>
 80069ee:	bf00      	nop
 80069f0:	0800808c 	.word	0x0800808c
 80069f4:	0800810c 	.word	0x0800810c

080069f8 <_Bfree>:
 80069f8:	b570      	push	{r4, r5, r6, lr}
 80069fa:	69c6      	ldr	r6, [r0, #28]
 80069fc:	4605      	mov	r5, r0
 80069fe:	460c      	mov	r4, r1
 8006a00:	b976      	cbnz	r6, 8006a20 <_Bfree+0x28>
 8006a02:	2010      	movs	r0, #16
 8006a04:	f7ff ff02 	bl	800680c <malloc>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	61e8      	str	r0, [r5, #28]
 8006a0c:	b920      	cbnz	r0, 8006a18 <_Bfree+0x20>
 8006a0e:	4b09      	ldr	r3, [pc, #36]	@ (8006a34 <_Bfree+0x3c>)
 8006a10:	4809      	ldr	r0, [pc, #36]	@ (8006a38 <_Bfree+0x40>)
 8006a12:	218f      	movs	r1, #143	@ 0x8f
 8006a14:	f000 fdc2 	bl	800759c <__assert_func>
 8006a18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a1c:	6006      	str	r6, [r0, #0]
 8006a1e:	60c6      	str	r6, [r0, #12]
 8006a20:	b13c      	cbz	r4, 8006a32 <_Bfree+0x3a>
 8006a22:	69eb      	ldr	r3, [r5, #28]
 8006a24:	6862      	ldr	r2, [r4, #4]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a2c:	6021      	str	r1, [r4, #0]
 8006a2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a32:	bd70      	pop	{r4, r5, r6, pc}
 8006a34:	0800808c 	.word	0x0800808c
 8006a38:	0800810c 	.word	0x0800810c

08006a3c <__multadd>:
 8006a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a40:	690d      	ldr	r5, [r1, #16]
 8006a42:	4607      	mov	r7, r0
 8006a44:	460c      	mov	r4, r1
 8006a46:	461e      	mov	r6, r3
 8006a48:	f101 0c14 	add.w	ip, r1, #20
 8006a4c:	2000      	movs	r0, #0
 8006a4e:	f8dc 3000 	ldr.w	r3, [ip]
 8006a52:	b299      	uxth	r1, r3
 8006a54:	fb02 6101 	mla	r1, r2, r1, r6
 8006a58:	0c1e      	lsrs	r6, r3, #16
 8006a5a:	0c0b      	lsrs	r3, r1, #16
 8006a5c:	fb02 3306 	mla	r3, r2, r6, r3
 8006a60:	b289      	uxth	r1, r1
 8006a62:	3001      	adds	r0, #1
 8006a64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006a68:	4285      	cmp	r5, r0
 8006a6a:	f84c 1b04 	str.w	r1, [ip], #4
 8006a6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006a72:	dcec      	bgt.n	8006a4e <__multadd+0x12>
 8006a74:	b30e      	cbz	r6, 8006aba <__multadd+0x7e>
 8006a76:	68a3      	ldr	r3, [r4, #8]
 8006a78:	42ab      	cmp	r3, r5
 8006a7a:	dc19      	bgt.n	8006ab0 <__multadd+0x74>
 8006a7c:	6861      	ldr	r1, [r4, #4]
 8006a7e:	4638      	mov	r0, r7
 8006a80:	3101      	adds	r1, #1
 8006a82:	f7ff ff79 	bl	8006978 <_Balloc>
 8006a86:	4680      	mov	r8, r0
 8006a88:	b928      	cbnz	r0, 8006a96 <__multadd+0x5a>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8006ac0 <__multadd+0x84>)
 8006a8e:	480d      	ldr	r0, [pc, #52]	@ (8006ac4 <__multadd+0x88>)
 8006a90:	21ba      	movs	r1, #186	@ 0xba
 8006a92:	f000 fd83 	bl	800759c <__assert_func>
 8006a96:	6922      	ldr	r2, [r4, #16]
 8006a98:	3202      	adds	r2, #2
 8006a9a:	f104 010c 	add.w	r1, r4, #12
 8006a9e:	0092      	lsls	r2, r2, #2
 8006aa0:	300c      	adds	r0, #12
 8006aa2:	f000 fd6d 	bl	8007580 <memcpy>
 8006aa6:	4621      	mov	r1, r4
 8006aa8:	4638      	mov	r0, r7
 8006aaa:	f7ff ffa5 	bl	80069f8 <_Bfree>
 8006aae:	4644      	mov	r4, r8
 8006ab0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ab4:	3501      	adds	r5, #1
 8006ab6:	615e      	str	r6, [r3, #20]
 8006ab8:	6125      	str	r5, [r4, #16]
 8006aba:	4620      	mov	r0, r4
 8006abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ac0:	080080fb 	.word	0x080080fb
 8006ac4:	0800810c 	.word	0x0800810c

08006ac8 <__hi0bits>:
 8006ac8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006acc:	4603      	mov	r3, r0
 8006ace:	bf36      	itet	cc
 8006ad0:	0403      	lslcc	r3, r0, #16
 8006ad2:	2000      	movcs	r0, #0
 8006ad4:	2010      	movcc	r0, #16
 8006ad6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ada:	bf3c      	itt	cc
 8006adc:	021b      	lslcc	r3, r3, #8
 8006ade:	3008      	addcc	r0, #8
 8006ae0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ae4:	bf3c      	itt	cc
 8006ae6:	011b      	lslcc	r3, r3, #4
 8006ae8:	3004      	addcc	r0, #4
 8006aea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aee:	bf3c      	itt	cc
 8006af0:	009b      	lslcc	r3, r3, #2
 8006af2:	3002      	addcc	r0, #2
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	db05      	blt.n	8006b04 <__hi0bits+0x3c>
 8006af8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006afc:	f100 0001 	add.w	r0, r0, #1
 8006b00:	bf08      	it	eq
 8006b02:	2020      	moveq	r0, #32
 8006b04:	4770      	bx	lr

08006b06 <__lo0bits>:
 8006b06:	6803      	ldr	r3, [r0, #0]
 8006b08:	4602      	mov	r2, r0
 8006b0a:	f013 0007 	ands.w	r0, r3, #7
 8006b0e:	d00b      	beq.n	8006b28 <__lo0bits+0x22>
 8006b10:	07d9      	lsls	r1, r3, #31
 8006b12:	d421      	bmi.n	8006b58 <__lo0bits+0x52>
 8006b14:	0798      	lsls	r0, r3, #30
 8006b16:	bf49      	itett	mi
 8006b18:	085b      	lsrmi	r3, r3, #1
 8006b1a:	089b      	lsrpl	r3, r3, #2
 8006b1c:	2001      	movmi	r0, #1
 8006b1e:	6013      	strmi	r3, [r2, #0]
 8006b20:	bf5c      	itt	pl
 8006b22:	6013      	strpl	r3, [r2, #0]
 8006b24:	2002      	movpl	r0, #2
 8006b26:	4770      	bx	lr
 8006b28:	b299      	uxth	r1, r3
 8006b2a:	b909      	cbnz	r1, 8006b30 <__lo0bits+0x2a>
 8006b2c:	0c1b      	lsrs	r3, r3, #16
 8006b2e:	2010      	movs	r0, #16
 8006b30:	b2d9      	uxtb	r1, r3
 8006b32:	b909      	cbnz	r1, 8006b38 <__lo0bits+0x32>
 8006b34:	3008      	adds	r0, #8
 8006b36:	0a1b      	lsrs	r3, r3, #8
 8006b38:	0719      	lsls	r1, r3, #28
 8006b3a:	bf04      	itt	eq
 8006b3c:	091b      	lsreq	r3, r3, #4
 8006b3e:	3004      	addeq	r0, #4
 8006b40:	0799      	lsls	r1, r3, #30
 8006b42:	bf04      	itt	eq
 8006b44:	089b      	lsreq	r3, r3, #2
 8006b46:	3002      	addeq	r0, #2
 8006b48:	07d9      	lsls	r1, r3, #31
 8006b4a:	d403      	bmi.n	8006b54 <__lo0bits+0x4e>
 8006b4c:	085b      	lsrs	r3, r3, #1
 8006b4e:	f100 0001 	add.w	r0, r0, #1
 8006b52:	d003      	beq.n	8006b5c <__lo0bits+0x56>
 8006b54:	6013      	str	r3, [r2, #0]
 8006b56:	4770      	bx	lr
 8006b58:	2000      	movs	r0, #0
 8006b5a:	4770      	bx	lr
 8006b5c:	2020      	movs	r0, #32
 8006b5e:	4770      	bx	lr

08006b60 <__i2b>:
 8006b60:	b510      	push	{r4, lr}
 8006b62:	460c      	mov	r4, r1
 8006b64:	2101      	movs	r1, #1
 8006b66:	f7ff ff07 	bl	8006978 <_Balloc>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	b928      	cbnz	r0, 8006b7a <__i2b+0x1a>
 8006b6e:	4b05      	ldr	r3, [pc, #20]	@ (8006b84 <__i2b+0x24>)
 8006b70:	4805      	ldr	r0, [pc, #20]	@ (8006b88 <__i2b+0x28>)
 8006b72:	f240 1145 	movw	r1, #325	@ 0x145
 8006b76:	f000 fd11 	bl	800759c <__assert_func>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	6144      	str	r4, [r0, #20]
 8006b7e:	6103      	str	r3, [r0, #16]
 8006b80:	bd10      	pop	{r4, pc}
 8006b82:	bf00      	nop
 8006b84:	080080fb 	.word	0x080080fb
 8006b88:	0800810c 	.word	0x0800810c

08006b8c <__multiply>:
 8006b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b90:	4614      	mov	r4, r2
 8006b92:	690a      	ldr	r2, [r1, #16]
 8006b94:	6923      	ldr	r3, [r4, #16]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	bfa8      	it	ge
 8006b9a:	4623      	movge	r3, r4
 8006b9c:	460f      	mov	r7, r1
 8006b9e:	bfa4      	itt	ge
 8006ba0:	460c      	movge	r4, r1
 8006ba2:	461f      	movge	r7, r3
 8006ba4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006ba8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006bac:	68a3      	ldr	r3, [r4, #8]
 8006bae:	6861      	ldr	r1, [r4, #4]
 8006bb0:	eb0a 0609 	add.w	r6, sl, r9
 8006bb4:	42b3      	cmp	r3, r6
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	bfb8      	it	lt
 8006bba:	3101      	addlt	r1, #1
 8006bbc:	f7ff fedc 	bl	8006978 <_Balloc>
 8006bc0:	b930      	cbnz	r0, 8006bd0 <__multiply+0x44>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	4b44      	ldr	r3, [pc, #272]	@ (8006cd8 <__multiply+0x14c>)
 8006bc6:	4845      	ldr	r0, [pc, #276]	@ (8006cdc <__multiply+0x150>)
 8006bc8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006bcc:	f000 fce6 	bl	800759c <__assert_func>
 8006bd0:	f100 0514 	add.w	r5, r0, #20
 8006bd4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006bd8:	462b      	mov	r3, r5
 8006bda:	2200      	movs	r2, #0
 8006bdc:	4543      	cmp	r3, r8
 8006bde:	d321      	bcc.n	8006c24 <__multiply+0x98>
 8006be0:	f107 0114 	add.w	r1, r7, #20
 8006be4:	f104 0214 	add.w	r2, r4, #20
 8006be8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006bec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006bf0:	9302      	str	r3, [sp, #8]
 8006bf2:	1b13      	subs	r3, r2, r4
 8006bf4:	3b15      	subs	r3, #21
 8006bf6:	f023 0303 	bic.w	r3, r3, #3
 8006bfa:	3304      	adds	r3, #4
 8006bfc:	f104 0715 	add.w	r7, r4, #21
 8006c00:	42ba      	cmp	r2, r7
 8006c02:	bf38      	it	cc
 8006c04:	2304      	movcc	r3, #4
 8006c06:	9301      	str	r3, [sp, #4]
 8006c08:	9b02      	ldr	r3, [sp, #8]
 8006c0a:	9103      	str	r1, [sp, #12]
 8006c0c:	428b      	cmp	r3, r1
 8006c0e:	d80c      	bhi.n	8006c2a <__multiply+0x9e>
 8006c10:	2e00      	cmp	r6, #0
 8006c12:	dd03      	ble.n	8006c1c <__multiply+0x90>
 8006c14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d05b      	beq.n	8006cd4 <__multiply+0x148>
 8006c1c:	6106      	str	r6, [r0, #16]
 8006c1e:	b005      	add	sp, #20
 8006c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c24:	f843 2b04 	str.w	r2, [r3], #4
 8006c28:	e7d8      	b.n	8006bdc <__multiply+0x50>
 8006c2a:	f8b1 a000 	ldrh.w	sl, [r1]
 8006c2e:	f1ba 0f00 	cmp.w	sl, #0
 8006c32:	d024      	beq.n	8006c7e <__multiply+0xf2>
 8006c34:	f104 0e14 	add.w	lr, r4, #20
 8006c38:	46a9      	mov	r9, r5
 8006c3a:	f04f 0c00 	mov.w	ip, #0
 8006c3e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006c42:	f8d9 3000 	ldr.w	r3, [r9]
 8006c46:	fa1f fb87 	uxth.w	fp, r7
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006c50:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006c54:	f8d9 7000 	ldr.w	r7, [r9]
 8006c58:	4463      	add	r3, ip
 8006c5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006c5e:	fb0a c70b 	mla	r7, sl, fp, ip
 8006c62:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006c6c:	4572      	cmp	r2, lr
 8006c6e:	f849 3b04 	str.w	r3, [r9], #4
 8006c72:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006c76:	d8e2      	bhi.n	8006c3e <__multiply+0xb2>
 8006c78:	9b01      	ldr	r3, [sp, #4]
 8006c7a:	f845 c003 	str.w	ip, [r5, r3]
 8006c7e:	9b03      	ldr	r3, [sp, #12]
 8006c80:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006c84:	3104      	adds	r1, #4
 8006c86:	f1b9 0f00 	cmp.w	r9, #0
 8006c8a:	d021      	beq.n	8006cd0 <__multiply+0x144>
 8006c8c:	682b      	ldr	r3, [r5, #0]
 8006c8e:	f104 0c14 	add.w	ip, r4, #20
 8006c92:	46ae      	mov	lr, r5
 8006c94:	f04f 0a00 	mov.w	sl, #0
 8006c98:	f8bc b000 	ldrh.w	fp, [ip]
 8006c9c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006ca0:	fb09 770b 	mla	r7, r9, fp, r7
 8006ca4:	4457      	add	r7, sl
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006cac:	f84e 3b04 	str.w	r3, [lr], #4
 8006cb0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006cb4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006cb8:	f8be 3000 	ldrh.w	r3, [lr]
 8006cbc:	fb09 330a 	mla	r3, r9, sl, r3
 8006cc0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006cc4:	4562      	cmp	r2, ip
 8006cc6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006cca:	d8e5      	bhi.n	8006c98 <__multiply+0x10c>
 8006ccc:	9f01      	ldr	r7, [sp, #4]
 8006cce:	51eb      	str	r3, [r5, r7]
 8006cd0:	3504      	adds	r5, #4
 8006cd2:	e799      	b.n	8006c08 <__multiply+0x7c>
 8006cd4:	3e01      	subs	r6, #1
 8006cd6:	e79b      	b.n	8006c10 <__multiply+0x84>
 8006cd8:	080080fb 	.word	0x080080fb
 8006cdc:	0800810c 	.word	0x0800810c

08006ce0 <__pow5mult>:
 8006ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ce4:	4615      	mov	r5, r2
 8006ce6:	f012 0203 	ands.w	r2, r2, #3
 8006cea:	4607      	mov	r7, r0
 8006cec:	460e      	mov	r6, r1
 8006cee:	d007      	beq.n	8006d00 <__pow5mult+0x20>
 8006cf0:	4c25      	ldr	r4, [pc, #148]	@ (8006d88 <__pow5mult+0xa8>)
 8006cf2:	3a01      	subs	r2, #1
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006cfa:	f7ff fe9f 	bl	8006a3c <__multadd>
 8006cfe:	4606      	mov	r6, r0
 8006d00:	10ad      	asrs	r5, r5, #2
 8006d02:	d03d      	beq.n	8006d80 <__pow5mult+0xa0>
 8006d04:	69fc      	ldr	r4, [r7, #28]
 8006d06:	b97c      	cbnz	r4, 8006d28 <__pow5mult+0x48>
 8006d08:	2010      	movs	r0, #16
 8006d0a:	f7ff fd7f 	bl	800680c <malloc>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	61f8      	str	r0, [r7, #28]
 8006d12:	b928      	cbnz	r0, 8006d20 <__pow5mult+0x40>
 8006d14:	4b1d      	ldr	r3, [pc, #116]	@ (8006d8c <__pow5mult+0xac>)
 8006d16:	481e      	ldr	r0, [pc, #120]	@ (8006d90 <__pow5mult+0xb0>)
 8006d18:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006d1c:	f000 fc3e 	bl	800759c <__assert_func>
 8006d20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d24:	6004      	str	r4, [r0, #0]
 8006d26:	60c4      	str	r4, [r0, #12]
 8006d28:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006d2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d30:	b94c      	cbnz	r4, 8006d46 <__pow5mult+0x66>
 8006d32:	f240 2171 	movw	r1, #625	@ 0x271
 8006d36:	4638      	mov	r0, r7
 8006d38:	f7ff ff12 	bl	8006b60 <__i2b>
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d42:	4604      	mov	r4, r0
 8006d44:	6003      	str	r3, [r0, #0]
 8006d46:	f04f 0900 	mov.w	r9, #0
 8006d4a:	07eb      	lsls	r3, r5, #31
 8006d4c:	d50a      	bpl.n	8006d64 <__pow5mult+0x84>
 8006d4e:	4631      	mov	r1, r6
 8006d50:	4622      	mov	r2, r4
 8006d52:	4638      	mov	r0, r7
 8006d54:	f7ff ff1a 	bl	8006b8c <__multiply>
 8006d58:	4631      	mov	r1, r6
 8006d5a:	4680      	mov	r8, r0
 8006d5c:	4638      	mov	r0, r7
 8006d5e:	f7ff fe4b 	bl	80069f8 <_Bfree>
 8006d62:	4646      	mov	r6, r8
 8006d64:	106d      	asrs	r5, r5, #1
 8006d66:	d00b      	beq.n	8006d80 <__pow5mult+0xa0>
 8006d68:	6820      	ldr	r0, [r4, #0]
 8006d6a:	b938      	cbnz	r0, 8006d7c <__pow5mult+0x9c>
 8006d6c:	4622      	mov	r2, r4
 8006d6e:	4621      	mov	r1, r4
 8006d70:	4638      	mov	r0, r7
 8006d72:	f7ff ff0b 	bl	8006b8c <__multiply>
 8006d76:	6020      	str	r0, [r4, #0]
 8006d78:	f8c0 9000 	str.w	r9, [r0]
 8006d7c:	4604      	mov	r4, r0
 8006d7e:	e7e4      	b.n	8006d4a <__pow5mult+0x6a>
 8006d80:	4630      	mov	r0, r6
 8006d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d86:	bf00      	nop
 8006d88:	08008168 	.word	0x08008168
 8006d8c:	0800808c 	.word	0x0800808c
 8006d90:	0800810c 	.word	0x0800810c

08006d94 <__lshift>:
 8006d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d98:	460c      	mov	r4, r1
 8006d9a:	6849      	ldr	r1, [r1, #4]
 8006d9c:	6923      	ldr	r3, [r4, #16]
 8006d9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006da2:	68a3      	ldr	r3, [r4, #8]
 8006da4:	4607      	mov	r7, r0
 8006da6:	4691      	mov	r9, r2
 8006da8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006dac:	f108 0601 	add.w	r6, r8, #1
 8006db0:	42b3      	cmp	r3, r6
 8006db2:	db0b      	blt.n	8006dcc <__lshift+0x38>
 8006db4:	4638      	mov	r0, r7
 8006db6:	f7ff fddf 	bl	8006978 <_Balloc>
 8006dba:	4605      	mov	r5, r0
 8006dbc:	b948      	cbnz	r0, 8006dd2 <__lshift+0x3e>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	4b28      	ldr	r3, [pc, #160]	@ (8006e64 <__lshift+0xd0>)
 8006dc2:	4829      	ldr	r0, [pc, #164]	@ (8006e68 <__lshift+0xd4>)
 8006dc4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006dc8:	f000 fbe8 	bl	800759c <__assert_func>
 8006dcc:	3101      	adds	r1, #1
 8006dce:	005b      	lsls	r3, r3, #1
 8006dd0:	e7ee      	b.n	8006db0 <__lshift+0x1c>
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	f100 0114 	add.w	r1, r0, #20
 8006dd8:	f100 0210 	add.w	r2, r0, #16
 8006ddc:	4618      	mov	r0, r3
 8006dde:	4553      	cmp	r3, sl
 8006de0:	db33      	blt.n	8006e4a <__lshift+0xb6>
 8006de2:	6920      	ldr	r0, [r4, #16]
 8006de4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006de8:	f104 0314 	add.w	r3, r4, #20
 8006dec:	f019 091f 	ands.w	r9, r9, #31
 8006df0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006df4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006df8:	d02b      	beq.n	8006e52 <__lshift+0xbe>
 8006dfa:	f1c9 0e20 	rsb	lr, r9, #32
 8006dfe:	468a      	mov	sl, r1
 8006e00:	2200      	movs	r2, #0
 8006e02:	6818      	ldr	r0, [r3, #0]
 8006e04:	fa00 f009 	lsl.w	r0, r0, r9
 8006e08:	4310      	orrs	r0, r2
 8006e0a:	f84a 0b04 	str.w	r0, [sl], #4
 8006e0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e12:	459c      	cmp	ip, r3
 8006e14:	fa22 f20e 	lsr.w	r2, r2, lr
 8006e18:	d8f3      	bhi.n	8006e02 <__lshift+0x6e>
 8006e1a:	ebac 0304 	sub.w	r3, ip, r4
 8006e1e:	3b15      	subs	r3, #21
 8006e20:	f023 0303 	bic.w	r3, r3, #3
 8006e24:	3304      	adds	r3, #4
 8006e26:	f104 0015 	add.w	r0, r4, #21
 8006e2a:	4584      	cmp	ip, r0
 8006e2c:	bf38      	it	cc
 8006e2e:	2304      	movcc	r3, #4
 8006e30:	50ca      	str	r2, [r1, r3]
 8006e32:	b10a      	cbz	r2, 8006e38 <__lshift+0xa4>
 8006e34:	f108 0602 	add.w	r6, r8, #2
 8006e38:	3e01      	subs	r6, #1
 8006e3a:	4638      	mov	r0, r7
 8006e3c:	612e      	str	r6, [r5, #16]
 8006e3e:	4621      	mov	r1, r4
 8006e40:	f7ff fdda 	bl	80069f8 <_Bfree>
 8006e44:	4628      	mov	r0, r5
 8006e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e4e:	3301      	adds	r3, #1
 8006e50:	e7c5      	b.n	8006dde <__lshift+0x4a>
 8006e52:	3904      	subs	r1, #4
 8006e54:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e58:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e5c:	459c      	cmp	ip, r3
 8006e5e:	d8f9      	bhi.n	8006e54 <__lshift+0xc0>
 8006e60:	e7ea      	b.n	8006e38 <__lshift+0xa4>
 8006e62:	bf00      	nop
 8006e64:	080080fb 	.word	0x080080fb
 8006e68:	0800810c 	.word	0x0800810c

08006e6c <__mcmp>:
 8006e6c:	690a      	ldr	r2, [r1, #16]
 8006e6e:	4603      	mov	r3, r0
 8006e70:	6900      	ldr	r0, [r0, #16]
 8006e72:	1a80      	subs	r0, r0, r2
 8006e74:	b530      	push	{r4, r5, lr}
 8006e76:	d10e      	bne.n	8006e96 <__mcmp+0x2a>
 8006e78:	3314      	adds	r3, #20
 8006e7a:	3114      	adds	r1, #20
 8006e7c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006e80:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006e84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006e88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006e8c:	4295      	cmp	r5, r2
 8006e8e:	d003      	beq.n	8006e98 <__mcmp+0x2c>
 8006e90:	d205      	bcs.n	8006e9e <__mcmp+0x32>
 8006e92:	f04f 30ff 	mov.w	r0, #4294967295
 8006e96:	bd30      	pop	{r4, r5, pc}
 8006e98:	42a3      	cmp	r3, r4
 8006e9a:	d3f3      	bcc.n	8006e84 <__mcmp+0x18>
 8006e9c:	e7fb      	b.n	8006e96 <__mcmp+0x2a>
 8006e9e:	2001      	movs	r0, #1
 8006ea0:	e7f9      	b.n	8006e96 <__mcmp+0x2a>
	...

08006ea4 <__mdiff>:
 8006ea4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea8:	4689      	mov	r9, r1
 8006eaa:	4606      	mov	r6, r0
 8006eac:	4611      	mov	r1, r2
 8006eae:	4648      	mov	r0, r9
 8006eb0:	4614      	mov	r4, r2
 8006eb2:	f7ff ffdb 	bl	8006e6c <__mcmp>
 8006eb6:	1e05      	subs	r5, r0, #0
 8006eb8:	d112      	bne.n	8006ee0 <__mdiff+0x3c>
 8006eba:	4629      	mov	r1, r5
 8006ebc:	4630      	mov	r0, r6
 8006ebe:	f7ff fd5b 	bl	8006978 <_Balloc>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	b928      	cbnz	r0, 8006ed2 <__mdiff+0x2e>
 8006ec6:	4b3f      	ldr	r3, [pc, #252]	@ (8006fc4 <__mdiff+0x120>)
 8006ec8:	f240 2137 	movw	r1, #567	@ 0x237
 8006ecc:	483e      	ldr	r0, [pc, #248]	@ (8006fc8 <__mdiff+0x124>)
 8006ece:	f000 fb65 	bl	800759c <__assert_func>
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ed8:	4610      	mov	r0, r2
 8006eda:	b003      	add	sp, #12
 8006edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ee0:	bfbc      	itt	lt
 8006ee2:	464b      	movlt	r3, r9
 8006ee4:	46a1      	movlt	r9, r4
 8006ee6:	4630      	mov	r0, r6
 8006ee8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006eec:	bfba      	itte	lt
 8006eee:	461c      	movlt	r4, r3
 8006ef0:	2501      	movlt	r5, #1
 8006ef2:	2500      	movge	r5, #0
 8006ef4:	f7ff fd40 	bl	8006978 <_Balloc>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	b918      	cbnz	r0, 8006f04 <__mdiff+0x60>
 8006efc:	4b31      	ldr	r3, [pc, #196]	@ (8006fc4 <__mdiff+0x120>)
 8006efe:	f240 2145 	movw	r1, #581	@ 0x245
 8006f02:	e7e3      	b.n	8006ecc <__mdiff+0x28>
 8006f04:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006f08:	6926      	ldr	r6, [r4, #16]
 8006f0a:	60c5      	str	r5, [r0, #12]
 8006f0c:	f109 0310 	add.w	r3, r9, #16
 8006f10:	f109 0514 	add.w	r5, r9, #20
 8006f14:	f104 0e14 	add.w	lr, r4, #20
 8006f18:	f100 0b14 	add.w	fp, r0, #20
 8006f1c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006f20:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006f24:	9301      	str	r3, [sp, #4]
 8006f26:	46d9      	mov	r9, fp
 8006f28:	f04f 0c00 	mov.w	ip, #0
 8006f2c:	9b01      	ldr	r3, [sp, #4]
 8006f2e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006f32:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006f36:	9301      	str	r3, [sp, #4]
 8006f38:	fa1f f38a 	uxth.w	r3, sl
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	b283      	uxth	r3, r0
 8006f40:	1acb      	subs	r3, r1, r3
 8006f42:	0c00      	lsrs	r0, r0, #16
 8006f44:	4463      	add	r3, ip
 8006f46:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006f4a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006f54:	4576      	cmp	r6, lr
 8006f56:	f849 3b04 	str.w	r3, [r9], #4
 8006f5a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006f5e:	d8e5      	bhi.n	8006f2c <__mdiff+0x88>
 8006f60:	1b33      	subs	r3, r6, r4
 8006f62:	3b15      	subs	r3, #21
 8006f64:	f023 0303 	bic.w	r3, r3, #3
 8006f68:	3415      	adds	r4, #21
 8006f6a:	3304      	adds	r3, #4
 8006f6c:	42a6      	cmp	r6, r4
 8006f6e:	bf38      	it	cc
 8006f70:	2304      	movcc	r3, #4
 8006f72:	441d      	add	r5, r3
 8006f74:	445b      	add	r3, fp
 8006f76:	461e      	mov	r6, r3
 8006f78:	462c      	mov	r4, r5
 8006f7a:	4544      	cmp	r4, r8
 8006f7c:	d30e      	bcc.n	8006f9c <__mdiff+0xf8>
 8006f7e:	f108 0103 	add.w	r1, r8, #3
 8006f82:	1b49      	subs	r1, r1, r5
 8006f84:	f021 0103 	bic.w	r1, r1, #3
 8006f88:	3d03      	subs	r5, #3
 8006f8a:	45a8      	cmp	r8, r5
 8006f8c:	bf38      	it	cc
 8006f8e:	2100      	movcc	r1, #0
 8006f90:	440b      	add	r3, r1
 8006f92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006f96:	b191      	cbz	r1, 8006fbe <__mdiff+0x11a>
 8006f98:	6117      	str	r7, [r2, #16]
 8006f9a:	e79d      	b.n	8006ed8 <__mdiff+0x34>
 8006f9c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006fa0:	46e6      	mov	lr, ip
 8006fa2:	0c08      	lsrs	r0, r1, #16
 8006fa4:	fa1c fc81 	uxtah	ip, ip, r1
 8006fa8:	4471      	add	r1, lr
 8006faa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006fae:	b289      	uxth	r1, r1
 8006fb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006fb4:	f846 1b04 	str.w	r1, [r6], #4
 8006fb8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006fbc:	e7dd      	b.n	8006f7a <__mdiff+0xd6>
 8006fbe:	3f01      	subs	r7, #1
 8006fc0:	e7e7      	b.n	8006f92 <__mdiff+0xee>
 8006fc2:	bf00      	nop
 8006fc4:	080080fb 	.word	0x080080fb
 8006fc8:	0800810c 	.word	0x0800810c

08006fcc <__d2b>:
 8006fcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006fd0:	460f      	mov	r7, r1
 8006fd2:	2101      	movs	r1, #1
 8006fd4:	ec59 8b10 	vmov	r8, r9, d0
 8006fd8:	4616      	mov	r6, r2
 8006fda:	f7ff fccd 	bl	8006978 <_Balloc>
 8006fde:	4604      	mov	r4, r0
 8006fe0:	b930      	cbnz	r0, 8006ff0 <__d2b+0x24>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	4b23      	ldr	r3, [pc, #140]	@ (8007074 <__d2b+0xa8>)
 8006fe6:	4824      	ldr	r0, [pc, #144]	@ (8007078 <__d2b+0xac>)
 8006fe8:	f240 310f 	movw	r1, #783	@ 0x30f
 8006fec:	f000 fad6 	bl	800759c <__assert_func>
 8006ff0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006ff4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ff8:	b10d      	cbz	r5, 8006ffe <__d2b+0x32>
 8006ffa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ffe:	9301      	str	r3, [sp, #4]
 8007000:	f1b8 0300 	subs.w	r3, r8, #0
 8007004:	d023      	beq.n	800704e <__d2b+0x82>
 8007006:	4668      	mov	r0, sp
 8007008:	9300      	str	r3, [sp, #0]
 800700a:	f7ff fd7c 	bl	8006b06 <__lo0bits>
 800700e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007012:	b1d0      	cbz	r0, 800704a <__d2b+0x7e>
 8007014:	f1c0 0320 	rsb	r3, r0, #32
 8007018:	fa02 f303 	lsl.w	r3, r2, r3
 800701c:	430b      	orrs	r3, r1
 800701e:	40c2      	lsrs	r2, r0
 8007020:	6163      	str	r3, [r4, #20]
 8007022:	9201      	str	r2, [sp, #4]
 8007024:	9b01      	ldr	r3, [sp, #4]
 8007026:	61a3      	str	r3, [r4, #24]
 8007028:	2b00      	cmp	r3, #0
 800702a:	bf0c      	ite	eq
 800702c:	2201      	moveq	r2, #1
 800702e:	2202      	movne	r2, #2
 8007030:	6122      	str	r2, [r4, #16]
 8007032:	b1a5      	cbz	r5, 800705e <__d2b+0x92>
 8007034:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007038:	4405      	add	r5, r0
 800703a:	603d      	str	r5, [r7, #0]
 800703c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007040:	6030      	str	r0, [r6, #0]
 8007042:	4620      	mov	r0, r4
 8007044:	b003      	add	sp, #12
 8007046:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800704a:	6161      	str	r1, [r4, #20]
 800704c:	e7ea      	b.n	8007024 <__d2b+0x58>
 800704e:	a801      	add	r0, sp, #4
 8007050:	f7ff fd59 	bl	8006b06 <__lo0bits>
 8007054:	9b01      	ldr	r3, [sp, #4]
 8007056:	6163      	str	r3, [r4, #20]
 8007058:	3020      	adds	r0, #32
 800705a:	2201      	movs	r2, #1
 800705c:	e7e8      	b.n	8007030 <__d2b+0x64>
 800705e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007062:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007066:	6038      	str	r0, [r7, #0]
 8007068:	6918      	ldr	r0, [r3, #16]
 800706a:	f7ff fd2d 	bl	8006ac8 <__hi0bits>
 800706e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007072:	e7e5      	b.n	8007040 <__d2b+0x74>
 8007074:	080080fb 	.word	0x080080fb
 8007078:	0800810c 	.word	0x0800810c

0800707c <__sfputc_r>:
 800707c:	6893      	ldr	r3, [r2, #8]
 800707e:	3b01      	subs	r3, #1
 8007080:	2b00      	cmp	r3, #0
 8007082:	b410      	push	{r4}
 8007084:	6093      	str	r3, [r2, #8]
 8007086:	da08      	bge.n	800709a <__sfputc_r+0x1e>
 8007088:	6994      	ldr	r4, [r2, #24]
 800708a:	42a3      	cmp	r3, r4
 800708c:	db01      	blt.n	8007092 <__sfputc_r+0x16>
 800708e:	290a      	cmp	r1, #10
 8007090:	d103      	bne.n	800709a <__sfputc_r+0x1e>
 8007092:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007096:	f7fe bc0e 	b.w	80058b6 <__swbuf_r>
 800709a:	6813      	ldr	r3, [r2, #0]
 800709c:	1c58      	adds	r0, r3, #1
 800709e:	6010      	str	r0, [r2, #0]
 80070a0:	7019      	strb	r1, [r3, #0]
 80070a2:	4608      	mov	r0, r1
 80070a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070a8:	4770      	bx	lr

080070aa <__sfputs_r>:
 80070aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ac:	4606      	mov	r6, r0
 80070ae:	460f      	mov	r7, r1
 80070b0:	4614      	mov	r4, r2
 80070b2:	18d5      	adds	r5, r2, r3
 80070b4:	42ac      	cmp	r4, r5
 80070b6:	d101      	bne.n	80070bc <__sfputs_r+0x12>
 80070b8:	2000      	movs	r0, #0
 80070ba:	e007      	b.n	80070cc <__sfputs_r+0x22>
 80070bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070c0:	463a      	mov	r2, r7
 80070c2:	4630      	mov	r0, r6
 80070c4:	f7ff ffda 	bl	800707c <__sfputc_r>
 80070c8:	1c43      	adds	r3, r0, #1
 80070ca:	d1f3      	bne.n	80070b4 <__sfputs_r+0xa>
 80070cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080070d0 <_vfiprintf_r>:
 80070d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070d4:	460d      	mov	r5, r1
 80070d6:	b09d      	sub	sp, #116	@ 0x74
 80070d8:	4614      	mov	r4, r2
 80070da:	4698      	mov	r8, r3
 80070dc:	4606      	mov	r6, r0
 80070de:	b118      	cbz	r0, 80070e8 <_vfiprintf_r+0x18>
 80070e0:	6a03      	ldr	r3, [r0, #32]
 80070e2:	b90b      	cbnz	r3, 80070e8 <_vfiprintf_r+0x18>
 80070e4:	f7fe fafe 	bl	80056e4 <__sinit>
 80070e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80070ea:	07d9      	lsls	r1, r3, #31
 80070ec:	d405      	bmi.n	80070fa <_vfiprintf_r+0x2a>
 80070ee:	89ab      	ldrh	r3, [r5, #12]
 80070f0:	059a      	lsls	r2, r3, #22
 80070f2:	d402      	bmi.n	80070fa <_vfiprintf_r+0x2a>
 80070f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80070f6:	f7fe fcf0 	bl	8005ada <__retarget_lock_acquire_recursive>
 80070fa:	89ab      	ldrh	r3, [r5, #12]
 80070fc:	071b      	lsls	r3, r3, #28
 80070fe:	d501      	bpl.n	8007104 <_vfiprintf_r+0x34>
 8007100:	692b      	ldr	r3, [r5, #16]
 8007102:	b99b      	cbnz	r3, 800712c <_vfiprintf_r+0x5c>
 8007104:	4629      	mov	r1, r5
 8007106:	4630      	mov	r0, r6
 8007108:	f7fe fc14 	bl	8005934 <__swsetup_r>
 800710c:	b170      	cbz	r0, 800712c <_vfiprintf_r+0x5c>
 800710e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007110:	07dc      	lsls	r4, r3, #31
 8007112:	d504      	bpl.n	800711e <_vfiprintf_r+0x4e>
 8007114:	f04f 30ff 	mov.w	r0, #4294967295
 8007118:	b01d      	add	sp, #116	@ 0x74
 800711a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800711e:	89ab      	ldrh	r3, [r5, #12]
 8007120:	0598      	lsls	r0, r3, #22
 8007122:	d4f7      	bmi.n	8007114 <_vfiprintf_r+0x44>
 8007124:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007126:	f7fe fcd9 	bl	8005adc <__retarget_lock_release_recursive>
 800712a:	e7f3      	b.n	8007114 <_vfiprintf_r+0x44>
 800712c:	2300      	movs	r3, #0
 800712e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007130:	2320      	movs	r3, #32
 8007132:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007136:	f8cd 800c 	str.w	r8, [sp, #12]
 800713a:	2330      	movs	r3, #48	@ 0x30
 800713c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80072ec <_vfiprintf_r+0x21c>
 8007140:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007144:	f04f 0901 	mov.w	r9, #1
 8007148:	4623      	mov	r3, r4
 800714a:	469a      	mov	sl, r3
 800714c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007150:	b10a      	cbz	r2, 8007156 <_vfiprintf_r+0x86>
 8007152:	2a25      	cmp	r2, #37	@ 0x25
 8007154:	d1f9      	bne.n	800714a <_vfiprintf_r+0x7a>
 8007156:	ebba 0b04 	subs.w	fp, sl, r4
 800715a:	d00b      	beq.n	8007174 <_vfiprintf_r+0xa4>
 800715c:	465b      	mov	r3, fp
 800715e:	4622      	mov	r2, r4
 8007160:	4629      	mov	r1, r5
 8007162:	4630      	mov	r0, r6
 8007164:	f7ff ffa1 	bl	80070aa <__sfputs_r>
 8007168:	3001      	adds	r0, #1
 800716a:	f000 80a7 	beq.w	80072bc <_vfiprintf_r+0x1ec>
 800716e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007170:	445a      	add	r2, fp
 8007172:	9209      	str	r2, [sp, #36]	@ 0x24
 8007174:	f89a 3000 	ldrb.w	r3, [sl]
 8007178:	2b00      	cmp	r3, #0
 800717a:	f000 809f 	beq.w	80072bc <_vfiprintf_r+0x1ec>
 800717e:	2300      	movs	r3, #0
 8007180:	f04f 32ff 	mov.w	r2, #4294967295
 8007184:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007188:	f10a 0a01 	add.w	sl, sl, #1
 800718c:	9304      	str	r3, [sp, #16]
 800718e:	9307      	str	r3, [sp, #28]
 8007190:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007194:	931a      	str	r3, [sp, #104]	@ 0x68
 8007196:	4654      	mov	r4, sl
 8007198:	2205      	movs	r2, #5
 800719a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800719e:	4853      	ldr	r0, [pc, #332]	@ (80072ec <_vfiprintf_r+0x21c>)
 80071a0:	f7f9 f816 	bl	80001d0 <memchr>
 80071a4:	9a04      	ldr	r2, [sp, #16]
 80071a6:	b9d8      	cbnz	r0, 80071e0 <_vfiprintf_r+0x110>
 80071a8:	06d1      	lsls	r1, r2, #27
 80071aa:	bf44      	itt	mi
 80071ac:	2320      	movmi	r3, #32
 80071ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071b2:	0713      	lsls	r3, r2, #28
 80071b4:	bf44      	itt	mi
 80071b6:	232b      	movmi	r3, #43	@ 0x2b
 80071b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071bc:	f89a 3000 	ldrb.w	r3, [sl]
 80071c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80071c2:	d015      	beq.n	80071f0 <_vfiprintf_r+0x120>
 80071c4:	9a07      	ldr	r2, [sp, #28]
 80071c6:	4654      	mov	r4, sl
 80071c8:	2000      	movs	r0, #0
 80071ca:	f04f 0c0a 	mov.w	ip, #10
 80071ce:	4621      	mov	r1, r4
 80071d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071d4:	3b30      	subs	r3, #48	@ 0x30
 80071d6:	2b09      	cmp	r3, #9
 80071d8:	d94b      	bls.n	8007272 <_vfiprintf_r+0x1a2>
 80071da:	b1b0      	cbz	r0, 800720a <_vfiprintf_r+0x13a>
 80071dc:	9207      	str	r2, [sp, #28]
 80071de:	e014      	b.n	800720a <_vfiprintf_r+0x13a>
 80071e0:	eba0 0308 	sub.w	r3, r0, r8
 80071e4:	fa09 f303 	lsl.w	r3, r9, r3
 80071e8:	4313      	orrs	r3, r2
 80071ea:	9304      	str	r3, [sp, #16]
 80071ec:	46a2      	mov	sl, r4
 80071ee:	e7d2      	b.n	8007196 <_vfiprintf_r+0xc6>
 80071f0:	9b03      	ldr	r3, [sp, #12]
 80071f2:	1d19      	adds	r1, r3, #4
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	9103      	str	r1, [sp, #12]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	bfbb      	ittet	lt
 80071fc:	425b      	neglt	r3, r3
 80071fe:	f042 0202 	orrlt.w	r2, r2, #2
 8007202:	9307      	strge	r3, [sp, #28]
 8007204:	9307      	strlt	r3, [sp, #28]
 8007206:	bfb8      	it	lt
 8007208:	9204      	strlt	r2, [sp, #16]
 800720a:	7823      	ldrb	r3, [r4, #0]
 800720c:	2b2e      	cmp	r3, #46	@ 0x2e
 800720e:	d10a      	bne.n	8007226 <_vfiprintf_r+0x156>
 8007210:	7863      	ldrb	r3, [r4, #1]
 8007212:	2b2a      	cmp	r3, #42	@ 0x2a
 8007214:	d132      	bne.n	800727c <_vfiprintf_r+0x1ac>
 8007216:	9b03      	ldr	r3, [sp, #12]
 8007218:	1d1a      	adds	r2, r3, #4
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	9203      	str	r2, [sp, #12]
 800721e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007222:	3402      	adds	r4, #2
 8007224:	9305      	str	r3, [sp, #20]
 8007226:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80072fc <_vfiprintf_r+0x22c>
 800722a:	7821      	ldrb	r1, [r4, #0]
 800722c:	2203      	movs	r2, #3
 800722e:	4650      	mov	r0, sl
 8007230:	f7f8 ffce 	bl	80001d0 <memchr>
 8007234:	b138      	cbz	r0, 8007246 <_vfiprintf_r+0x176>
 8007236:	9b04      	ldr	r3, [sp, #16]
 8007238:	eba0 000a 	sub.w	r0, r0, sl
 800723c:	2240      	movs	r2, #64	@ 0x40
 800723e:	4082      	lsls	r2, r0
 8007240:	4313      	orrs	r3, r2
 8007242:	3401      	adds	r4, #1
 8007244:	9304      	str	r3, [sp, #16]
 8007246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800724a:	4829      	ldr	r0, [pc, #164]	@ (80072f0 <_vfiprintf_r+0x220>)
 800724c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007250:	2206      	movs	r2, #6
 8007252:	f7f8 ffbd 	bl	80001d0 <memchr>
 8007256:	2800      	cmp	r0, #0
 8007258:	d03f      	beq.n	80072da <_vfiprintf_r+0x20a>
 800725a:	4b26      	ldr	r3, [pc, #152]	@ (80072f4 <_vfiprintf_r+0x224>)
 800725c:	bb1b      	cbnz	r3, 80072a6 <_vfiprintf_r+0x1d6>
 800725e:	9b03      	ldr	r3, [sp, #12]
 8007260:	3307      	adds	r3, #7
 8007262:	f023 0307 	bic.w	r3, r3, #7
 8007266:	3308      	adds	r3, #8
 8007268:	9303      	str	r3, [sp, #12]
 800726a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800726c:	443b      	add	r3, r7
 800726e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007270:	e76a      	b.n	8007148 <_vfiprintf_r+0x78>
 8007272:	fb0c 3202 	mla	r2, ip, r2, r3
 8007276:	460c      	mov	r4, r1
 8007278:	2001      	movs	r0, #1
 800727a:	e7a8      	b.n	80071ce <_vfiprintf_r+0xfe>
 800727c:	2300      	movs	r3, #0
 800727e:	3401      	adds	r4, #1
 8007280:	9305      	str	r3, [sp, #20]
 8007282:	4619      	mov	r1, r3
 8007284:	f04f 0c0a 	mov.w	ip, #10
 8007288:	4620      	mov	r0, r4
 800728a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800728e:	3a30      	subs	r2, #48	@ 0x30
 8007290:	2a09      	cmp	r2, #9
 8007292:	d903      	bls.n	800729c <_vfiprintf_r+0x1cc>
 8007294:	2b00      	cmp	r3, #0
 8007296:	d0c6      	beq.n	8007226 <_vfiprintf_r+0x156>
 8007298:	9105      	str	r1, [sp, #20]
 800729a:	e7c4      	b.n	8007226 <_vfiprintf_r+0x156>
 800729c:	fb0c 2101 	mla	r1, ip, r1, r2
 80072a0:	4604      	mov	r4, r0
 80072a2:	2301      	movs	r3, #1
 80072a4:	e7f0      	b.n	8007288 <_vfiprintf_r+0x1b8>
 80072a6:	ab03      	add	r3, sp, #12
 80072a8:	9300      	str	r3, [sp, #0]
 80072aa:	462a      	mov	r2, r5
 80072ac:	4b12      	ldr	r3, [pc, #72]	@ (80072f8 <_vfiprintf_r+0x228>)
 80072ae:	a904      	add	r1, sp, #16
 80072b0:	4630      	mov	r0, r6
 80072b2:	f7fd fdd3 	bl	8004e5c <_printf_float>
 80072b6:	4607      	mov	r7, r0
 80072b8:	1c78      	adds	r0, r7, #1
 80072ba:	d1d6      	bne.n	800726a <_vfiprintf_r+0x19a>
 80072bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072be:	07d9      	lsls	r1, r3, #31
 80072c0:	d405      	bmi.n	80072ce <_vfiprintf_r+0x1fe>
 80072c2:	89ab      	ldrh	r3, [r5, #12]
 80072c4:	059a      	lsls	r2, r3, #22
 80072c6:	d402      	bmi.n	80072ce <_vfiprintf_r+0x1fe>
 80072c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072ca:	f7fe fc07 	bl	8005adc <__retarget_lock_release_recursive>
 80072ce:	89ab      	ldrh	r3, [r5, #12]
 80072d0:	065b      	lsls	r3, r3, #25
 80072d2:	f53f af1f 	bmi.w	8007114 <_vfiprintf_r+0x44>
 80072d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80072d8:	e71e      	b.n	8007118 <_vfiprintf_r+0x48>
 80072da:	ab03      	add	r3, sp, #12
 80072dc:	9300      	str	r3, [sp, #0]
 80072de:	462a      	mov	r2, r5
 80072e0:	4b05      	ldr	r3, [pc, #20]	@ (80072f8 <_vfiprintf_r+0x228>)
 80072e2:	a904      	add	r1, sp, #16
 80072e4:	4630      	mov	r0, r6
 80072e6:	f7fe f851 	bl	800538c <_printf_i>
 80072ea:	e7e4      	b.n	80072b6 <_vfiprintf_r+0x1e6>
 80072ec:	08008268 	.word	0x08008268
 80072f0:	08008272 	.word	0x08008272
 80072f4:	08004e5d 	.word	0x08004e5d
 80072f8:	080070ab 	.word	0x080070ab
 80072fc:	0800826e 	.word	0x0800826e

08007300 <__sflush_r>:
 8007300:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007308:	0716      	lsls	r6, r2, #28
 800730a:	4605      	mov	r5, r0
 800730c:	460c      	mov	r4, r1
 800730e:	d454      	bmi.n	80073ba <__sflush_r+0xba>
 8007310:	684b      	ldr	r3, [r1, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	dc02      	bgt.n	800731c <__sflush_r+0x1c>
 8007316:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007318:	2b00      	cmp	r3, #0
 800731a:	dd48      	ble.n	80073ae <__sflush_r+0xae>
 800731c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800731e:	2e00      	cmp	r6, #0
 8007320:	d045      	beq.n	80073ae <__sflush_r+0xae>
 8007322:	2300      	movs	r3, #0
 8007324:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007328:	682f      	ldr	r7, [r5, #0]
 800732a:	6a21      	ldr	r1, [r4, #32]
 800732c:	602b      	str	r3, [r5, #0]
 800732e:	d030      	beq.n	8007392 <__sflush_r+0x92>
 8007330:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007332:	89a3      	ldrh	r3, [r4, #12]
 8007334:	0759      	lsls	r1, r3, #29
 8007336:	d505      	bpl.n	8007344 <__sflush_r+0x44>
 8007338:	6863      	ldr	r3, [r4, #4]
 800733a:	1ad2      	subs	r2, r2, r3
 800733c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800733e:	b10b      	cbz	r3, 8007344 <__sflush_r+0x44>
 8007340:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007342:	1ad2      	subs	r2, r2, r3
 8007344:	2300      	movs	r3, #0
 8007346:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007348:	6a21      	ldr	r1, [r4, #32]
 800734a:	4628      	mov	r0, r5
 800734c:	47b0      	blx	r6
 800734e:	1c43      	adds	r3, r0, #1
 8007350:	89a3      	ldrh	r3, [r4, #12]
 8007352:	d106      	bne.n	8007362 <__sflush_r+0x62>
 8007354:	6829      	ldr	r1, [r5, #0]
 8007356:	291d      	cmp	r1, #29
 8007358:	d82b      	bhi.n	80073b2 <__sflush_r+0xb2>
 800735a:	4a2a      	ldr	r2, [pc, #168]	@ (8007404 <__sflush_r+0x104>)
 800735c:	410a      	asrs	r2, r1
 800735e:	07d6      	lsls	r6, r2, #31
 8007360:	d427      	bmi.n	80073b2 <__sflush_r+0xb2>
 8007362:	2200      	movs	r2, #0
 8007364:	6062      	str	r2, [r4, #4]
 8007366:	04d9      	lsls	r1, r3, #19
 8007368:	6922      	ldr	r2, [r4, #16]
 800736a:	6022      	str	r2, [r4, #0]
 800736c:	d504      	bpl.n	8007378 <__sflush_r+0x78>
 800736e:	1c42      	adds	r2, r0, #1
 8007370:	d101      	bne.n	8007376 <__sflush_r+0x76>
 8007372:	682b      	ldr	r3, [r5, #0]
 8007374:	b903      	cbnz	r3, 8007378 <__sflush_r+0x78>
 8007376:	6560      	str	r0, [r4, #84]	@ 0x54
 8007378:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800737a:	602f      	str	r7, [r5, #0]
 800737c:	b1b9      	cbz	r1, 80073ae <__sflush_r+0xae>
 800737e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007382:	4299      	cmp	r1, r3
 8007384:	d002      	beq.n	800738c <__sflush_r+0x8c>
 8007386:	4628      	mov	r0, r5
 8007388:	f7ff f9f6 	bl	8006778 <_free_r>
 800738c:	2300      	movs	r3, #0
 800738e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007390:	e00d      	b.n	80073ae <__sflush_r+0xae>
 8007392:	2301      	movs	r3, #1
 8007394:	4628      	mov	r0, r5
 8007396:	47b0      	blx	r6
 8007398:	4602      	mov	r2, r0
 800739a:	1c50      	adds	r0, r2, #1
 800739c:	d1c9      	bne.n	8007332 <__sflush_r+0x32>
 800739e:	682b      	ldr	r3, [r5, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d0c6      	beq.n	8007332 <__sflush_r+0x32>
 80073a4:	2b1d      	cmp	r3, #29
 80073a6:	d001      	beq.n	80073ac <__sflush_r+0xac>
 80073a8:	2b16      	cmp	r3, #22
 80073aa:	d11e      	bne.n	80073ea <__sflush_r+0xea>
 80073ac:	602f      	str	r7, [r5, #0]
 80073ae:	2000      	movs	r0, #0
 80073b0:	e022      	b.n	80073f8 <__sflush_r+0xf8>
 80073b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073b6:	b21b      	sxth	r3, r3
 80073b8:	e01b      	b.n	80073f2 <__sflush_r+0xf2>
 80073ba:	690f      	ldr	r7, [r1, #16]
 80073bc:	2f00      	cmp	r7, #0
 80073be:	d0f6      	beq.n	80073ae <__sflush_r+0xae>
 80073c0:	0793      	lsls	r3, r2, #30
 80073c2:	680e      	ldr	r6, [r1, #0]
 80073c4:	bf08      	it	eq
 80073c6:	694b      	ldreq	r3, [r1, #20]
 80073c8:	600f      	str	r7, [r1, #0]
 80073ca:	bf18      	it	ne
 80073cc:	2300      	movne	r3, #0
 80073ce:	eba6 0807 	sub.w	r8, r6, r7
 80073d2:	608b      	str	r3, [r1, #8]
 80073d4:	f1b8 0f00 	cmp.w	r8, #0
 80073d8:	dde9      	ble.n	80073ae <__sflush_r+0xae>
 80073da:	6a21      	ldr	r1, [r4, #32]
 80073dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80073de:	4643      	mov	r3, r8
 80073e0:	463a      	mov	r2, r7
 80073e2:	4628      	mov	r0, r5
 80073e4:	47b0      	blx	r6
 80073e6:	2800      	cmp	r0, #0
 80073e8:	dc08      	bgt.n	80073fc <__sflush_r+0xfc>
 80073ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073f2:	81a3      	strh	r3, [r4, #12]
 80073f4:	f04f 30ff 	mov.w	r0, #4294967295
 80073f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073fc:	4407      	add	r7, r0
 80073fe:	eba8 0800 	sub.w	r8, r8, r0
 8007402:	e7e7      	b.n	80073d4 <__sflush_r+0xd4>
 8007404:	dfbffffe 	.word	0xdfbffffe

08007408 <_fflush_r>:
 8007408:	b538      	push	{r3, r4, r5, lr}
 800740a:	690b      	ldr	r3, [r1, #16]
 800740c:	4605      	mov	r5, r0
 800740e:	460c      	mov	r4, r1
 8007410:	b913      	cbnz	r3, 8007418 <_fflush_r+0x10>
 8007412:	2500      	movs	r5, #0
 8007414:	4628      	mov	r0, r5
 8007416:	bd38      	pop	{r3, r4, r5, pc}
 8007418:	b118      	cbz	r0, 8007422 <_fflush_r+0x1a>
 800741a:	6a03      	ldr	r3, [r0, #32]
 800741c:	b90b      	cbnz	r3, 8007422 <_fflush_r+0x1a>
 800741e:	f7fe f961 	bl	80056e4 <__sinit>
 8007422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d0f3      	beq.n	8007412 <_fflush_r+0xa>
 800742a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800742c:	07d0      	lsls	r0, r2, #31
 800742e:	d404      	bmi.n	800743a <_fflush_r+0x32>
 8007430:	0599      	lsls	r1, r3, #22
 8007432:	d402      	bmi.n	800743a <_fflush_r+0x32>
 8007434:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007436:	f7fe fb50 	bl	8005ada <__retarget_lock_acquire_recursive>
 800743a:	4628      	mov	r0, r5
 800743c:	4621      	mov	r1, r4
 800743e:	f7ff ff5f 	bl	8007300 <__sflush_r>
 8007442:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007444:	07da      	lsls	r2, r3, #31
 8007446:	4605      	mov	r5, r0
 8007448:	d4e4      	bmi.n	8007414 <_fflush_r+0xc>
 800744a:	89a3      	ldrh	r3, [r4, #12]
 800744c:	059b      	lsls	r3, r3, #22
 800744e:	d4e1      	bmi.n	8007414 <_fflush_r+0xc>
 8007450:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007452:	f7fe fb43 	bl	8005adc <__retarget_lock_release_recursive>
 8007456:	e7dd      	b.n	8007414 <_fflush_r+0xc>

08007458 <__swhatbuf_r>:
 8007458:	b570      	push	{r4, r5, r6, lr}
 800745a:	460c      	mov	r4, r1
 800745c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007460:	2900      	cmp	r1, #0
 8007462:	b096      	sub	sp, #88	@ 0x58
 8007464:	4615      	mov	r5, r2
 8007466:	461e      	mov	r6, r3
 8007468:	da0d      	bge.n	8007486 <__swhatbuf_r+0x2e>
 800746a:	89a3      	ldrh	r3, [r4, #12]
 800746c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007470:	f04f 0100 	mov.w	r1, #0
 8007474:	bf14      	ite	ne
 8007476:	2340      	movne	r3, #64	@ 0x40
 8007478:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800747c:	2000      	movs	r0, #0
 800747e:	6031      	str	r1, [r6, #0]
 8007480:	602b      	str	r3, [r5, #0]
 8007482:	b016      	add	sp, #88	@ 0x58
 8007484:	bd70      	pop	{r4, r5, r6, pc}
 8007486:	466a      	mov	r2, sp
 8007488:	f000 f848 	bl	800751c <_fstat_r>
 800748c:	2800      	cmp	r0, #0
 800748e:	dbec      	blt.n	800746a <__swhatbuf_r+0x12>
 8007490:	9901      	ldr	r1, [sp, #4]
 8007492:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007496:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800749a:	4259      	negs	r1, r3
 800749c:	4159      	adcs	r1, r3
 800749e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80074a2:	e7eb      	b.n	800747c <__swhatbuf_r+0x24>

080074a4 <__smakebuf_r>:
 80074a4:	898b      	ldrh	r3, [r1, #12]
 80074a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074a8:	079d      	lsls	r5, r3, #30
 80074aa:	4606      	mov	r6, r0
 80074ac:	460c      	mov	r4, r1
 80074ae:	d507      	bpl.n	80074c0 <__smakebuf_r+0x1c>
 80074b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80074b4:	6023      	str	r3, [r4, #0]
 80074b6:	6123      	str	r3, [r4, #16]
 80074b8:	2301      	movs	r3, #1
 80074ba:	6163      	str	r3, [r4, #20]
 80074bc:	b003      	add	sp, #12
 80074be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074c0:	ab01      	add	r3, sp, #4
 80074c2:	466a      	mov	r2, sp
 80074c4:	f7ff ffc8 	bl	8007458 <__swhatbuf_r>
 80074c8:	9f00      	ldr	r7, [sp, #0]
 80074ca:	4605      	mov	r5, r0
 80074cc:	4639      	mov	r1, r7
 80074ce:	4630      	mov	r0, r6
 80074d0:	f7ff f9c6 	bl	8006860 <_malloc_r>
 80074d4:	b948      	cbnz	r0, 80074ea <__smakebuf_r+0x46>
 80074d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074da:	059a      	lsls	r2, r3, #22
 80074dc:	d4ee      	bmi.n	80074bc <__smakebuf_r+0x18>
 80074de:	f023 0303 	bic.w	r3, r3, #3
 80074e2:	f043 0302 	orr.w	r3, r3, #2
 80074e6:	81a3      	strh	r3, [r4, #12]
 80074e8:	e7e2      	b.n	80074b0 <__smakebuf_r+0xc>
 80074ea:	89a3      	ldrh	r3, [r4, #12]
 80074ec:	6020      	str	r0, [r4, #0]
 80074ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074f2:	81a3      	strh	r3, [r4, #12]
 80074f4:	9b01      	ldr	r3, [sp, #4]
 80074f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80074fa:	b15b      	cbz	r3, 8007514 <__smakebuf_r+0x70>
 80074fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007500:	4630      	mov	r0, r6
 8007502:	f000 f81d 	bl	8007540 <_isatty_r>
 8007506:	b128      	cbz	r0, 8007514 <__smakebuf_r+0x70>
 8007508:	89a3      	ldrh	r3, [r4, #12]
 800750a:	f023 0303 	bic.w	r3, r3, #3
 800750e:	f043 0301 	orr.w	r3, r3, #1
 8007512:	81a3      	strh	r3, [r4, #12]
 8007514:	89a3      	ldrh	r3, [r4, #12]
 8007516:	431d      	orrs	r5, r3
 8007518:	81a5      	strh	r5, [r4, #12]
 800751a:	e7cf      	b.n	80074bc <__smakebuf_r+0x18>

0800751c <_fstat_r>:
 800751c:	b538      	push	{r3, r4, r5, lr}
 800751e:	4d07      	ldr	r5, [pc, #28]	@ (800753c <_fstat_r+0x20>)
 8007520:	2300      	movs	r3, #0
 8007522:	4604      	mov	r4, r0
 8007524:	4608      	mov	r0, r1
 8007526:	4611      	mov	r1, r2
 8007528:	602b      	str	r3, [r5, #0]
 800752a:	f7fb f973 	bl	8002814 <_fstat>
 800752e:	1c43      	adds	r3, r0, #1
 8007530:	d102      	bne.n	8007538 <_fstat_r+0x1c>
 8007532:	682b      	ldr	r3, [r5, #0]
 8007534:	b103      	cbz	r3, 8007538 <_fstat_r+0x1c>
 8007536:	6023      	str	r3, [r4, #0]
 8007538:	bd38      	pop	{r3, r4, r5, pc}
 800753a:	bf00      	nop
 800753c:	200003d4 	.word	0x200003d4

08007540 <_isatty_r>:
 8007540:	b538      	push	{r3, r4, r5, lr}
 8007542:	4d06      	ldr	r5, [pc, #24]	@ (800755c <_isatty_r+0x1c>)
 8007544:	2300      	movs	r3, #0
 8007546:	4604      	mov	r4, r0
 8007548:	4608      	mov	r0, r1
 800754a:	602b      	str	r3, [r5, #0]
 800754c:	f7fb f972 	bl	8002834 <_isatty>
 8007550:	1c43      	adds	r3, r0, #1
 8007552:	d102      	bne.n	800755a <_isatty_r+0x1a>
 8007554:	682b      	ldr	r3, [r5, #0]
 8007556:	b103      	cbz	r3, 800755a <_isatty_r+0x1a>
 8007558:	6023      	str	r3, [r4, #0]
 800755a:	bd38      	pop	{r3, r4, r5, pc}
 800755c:	200003d4 	.word	0x200003d4

08007560 <_sbrk_r>:
 8007560:	b538      	push	{r3, r4, r5, lr}
 8007562:	4d06      	ldr	r5, [pc, #24]	@ (800757c <_sbrk_r+0x1c>)
 8007564:	2300      	movs	r3, #0
 8007566:	4604      	mov	r4, r0
 8007568:	4608      	mov	r0, r1
 800756a:	602b      	str	r3, [r5, #0]
 800756c:	f7fb f97a 	bl	8002864 <_sbrk>
 8007570:	1c43      	adds	r3, r0, #1
 8007572:	d102      	bne.n	800757a <_sbrk_r+0x1a>
 8007574:	682b      	ldr	r3, [r5, #0]
 8007576:	b103      	cbz	r3, 800757a <_sbrk_r+0x1a>
 8007578:	6023      	str	r3, [r4, #0]
 800757a:	bd38      	pop	{r3, r4, r5, pc}
 800757c:	200003d4 	.word	0x200003d4

08007580 <memcpy>:
 8007580:	440a      	add	r2, r1
 8007582:	4291      	cmp	r1, r2
 8007584:	f100 33ff 	add.w	r3, r0, #4294967295
 8007588:	d100      	bne.n	800758c <memcpy+0xc>
 800758a:	4770      	bx	lr
 800758c:	b510      	push	{r4, lr}
 800758e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007592:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007596:	4291      	cmp	r1, r2
 8007598:	d1f9      	bne.n	800758e <memcpy+0xe>
 800759a:	bd10      	pop	{r4, pc}

0800759c <__assert_func>:
 800759c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800759e:	4614      	mov	r4, r2
 80075a0:	461a      	mov	r2, r3
 80075a2:	4b09      	ldr	r3, [pc, #36]	@ (80075c8 <__assert_func+0x2c>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4605      	mov	r5, r0
 80075a8:	68d8      	ldr	r0, [r3, #12]
 80075aa:	b954      	cbnz	r4, 80075c2 <__assert_func+0x26>
 80075ac:	4b07      	ldr	r3, [pc, #28]	@ (80075cc <__assert_func+0x30>)
 80075ae:	461c      	mov	r4, r3
 80075b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80075b4:	9100      	str	r1, [sp, #0]
 80075b6:	462b      	mov	r3, r5
 80075b8:	4905      	ldr	r1, [pc, #20]	@ (80075d0 <__assert_func+0x34>)
 80075ba:	f000 f841 	bl	8007640 <fiprintf>
 80075be:	f000 f851 	bl	8007664 <abort>
 80075c2:	4b04      	ldr	r3, [pc, #16]	@ (80075d4 <__assert_func+0x38>)
 80075c4:	e7f4      	b.n	80075b0 <__assert_func+0x14>
 80075c6:	bf00      	nop
 80075c8:	20000018 	.word	0x20000018
 80075cc:	080082be 	.word	0x080082be
 80075d0:	08008290 	.word	0x08008290
 80075d4:	08008283 	.word	0x08008283

080075d8 <_calloc_r>:
 80075d8:	b570      	push	{r4, r5, r6, lr}
 80075da:	fba1 5402 	umull	r5, r4, r1, r2
 80075de:	b93c      	cbnz	r4, 80075f0 <_calloc_r+0x18>
 80075e0:	4629      	mov	r1, r5
 80075e2:	f7ff f93d 	bl	8006860 <_malloc_r>
 80075e6:	4606      	mov	r6, r0
 80075e8:	b928      	cbnz	r0, 80075f6 <_calloc_r+0x1e>
 80075ea:	2600      	movs	r6, #0
 80075ec:	4630      	mov	r0, r6
 80075ee:	bd70      	pop	{r4, r5, r6, pc}
 80075f0:	220c      	movs	r2, #12
 80075f2:	6002      	str	r2, [r0, #0]
 80075f4:	e7f9      	b.n	80075ea <_calloc_r+0x12>
 80075f6:	462a      	mov	r2, r5
 80075f8:	4621      	mov	r1, r4
 80075fa:	f7fe f9f1 	bl	80059e0 <memset>
 80075fe:	e7f5      	b.n	80075ec <_calloc_r+0x14>

08007600 <__ascii_mbtowc>:
 8007600:	b082      	sub	sp, #8
 8007602:	b901      	cbnz	r1, 8007606 <__ascii_mbtowc+0x6>
 8007604:	a901      	add	r1, sp, #4
 8007606:	b142      	cbz	r2, 800761a <__ascii_mbtowc+0x1a>
 8007608:	b14b      	cbz	r3, 800761e <__ascii_mbtowc+0x1e>
 800760a:	7813      	ldrb	r3, [r2, #0]
 800760c:	600b      	str	r3, [r1, #0]
 800760e:	7812      	ldrb	r2, [r2, #0]
 8007610:	1e10      	subs	r0, r2, #0
 8007612:	bf18      	it	ne
 8007614:	2001      	movne	r0, #1
 8007616:	b002      	add	sp, #8
 8007618:	4770      	bx	lr
 800761a:	4610      	mov	r0, r2
 800761c:	e7fb      	b.n	8007616 <__ascii_mbtowc+0x16>
 800761e:	f06f 0001 	mvn.w	r0, #1
 8007622:	e7f8      	b.n	8007616 <__ascii_mbtowc+0x16>

08007624 <__ascii_wctomb>:
 8007624:	4603      	mov	r3, r0
 8007626:	4608      	mov	r0, r1
 8007628:	b141      	cbz	r1, 800763c <__ascii_wctomb+0x18>
 800762a:	2aff      	cmp	r2, #255	@ 0xff
 800762c:	d904      	bls.n	8007638 <__ascii_wctomb+0x14>
 800762e:	228a      	movs	r2, #138	@ 0x8a
 8007630:	601a      	str	r2, [r3, #0]
 8007632:	f04f 30ff 	mov.w	r0, #4294967295
 8007636:	4770      	bx	lr
 8007638:	700a      	strb	r2, [r1, #0]
 800763a:	2001      	movs	r0, #1
 800763c:	4770      	bx	lr
	...

08007640 <fiprintf>:
 8007640:	b40e      	push	{r1, r2, r3}
 8007642:	b503      	push	{r0, r1, lr}
 8007644:	4601      	mov	r1, r0
 8007646:	ab03      	add	r3, sp, #12
 8007648:	4805      	ldr	r0, [pc, #20]	@ (8007660 <fiprintf+0x20>)
 800764a:	f853 2b04 	ldr.w	r2, [r3], #4
 800764e:	6800      	ldr	r0, [r0, #0]
 8007650:	9301      	str	r3, [sp, #4]
 8007652:	f7ff fd3d 	bl	80070d0 <_vfiprintf_r>
 8007656:	b002      	add	sp, #8
 8007658:	f85d eb04 	ldr.w	lr, [sp], #4
 800765c:	b003      	add	sp, #12
 800765e:	4770      	bx	lr
 8007660:	20000018 	.word	0x20000018

08007664 <abort>:
 8007664:	b508      	push	{r3, lr}
 8007666:	2006      	movs	r0, #6
 8007668:	f000 f82c 	bl	80076c4 <raise>
 800766c:	2001      	movs	r0, #1
 800766e:	f7fb f89d 	bl	80027ac <_exit>

08007672 <_raise_r>:
 8007672:	291f      	cmp	r1, #31
 8007674:	b538      	push	{r3, r4, r5, lr}
 8007676:	4605      	mov	r5, r0
 8007678:	460c      	mov	r4, r1
 800767a:	d904      	bls.n	8007686 <_raise_r+0x14>
 800767c:	2316      	movs	r3, #22
 800767e:	6003      	str	r3, [r0, #0]
 8007680:	f04f 30ff 	mov.w	r0, #4294967295
 8007684:	bd38      	pop	{r3, r4, r5, pc}
 8007686:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007688:	b112      	cbz	r2, 8007690 <_raise_r+0x1e>
 800768a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800768e:	b94b      	cbnz	r3, 80076a4 <_raise_r+0x32>
 8007690:	4628      	mov	r0, r5
 8007692:	f000 f831 	bl	80076f8 <_getpid_r>
 8007696:	4622      	mov	r2, r4
 8007698:	4601      	mov	r1, r0
 800769a:	4628      	mov	r0, r5
 800769c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076a0:	f000 b818 	b.w	80076d4 <_kill_r>
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d00a      	beq.n	80076be <_raise_r+0x4c>
 80076a8:	1c59      	adds	r1, r3, #1
 80076aa:	d103      	bne.n	80076b4 <_raise_r+0x42>
 80076ac:	2316      	movs	r3, #22
 80076ae:	6003      	str	r3, [r0, #0]
 80076b0:	2001      	movs	r0, #1
 80076b2:	e7e7      	b.n	8007684 <_raise_r+0x12>
 80076b4:	2100      	movs	r1, #0
 80076b6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80076ba:	4620      	mov	r0, r4
 80076bc:	4798      	blx	r3
 80076be:	2000      	movs	r0, #0
 80076c0:	e7e0      	b.n	8007684 <_raise_r+0x12>
	...

080076c4 <raise>:
 80076c4:	4b02      	ldr	r3, [pc, #8]	@ (80076d0 <raise+0xc>)
 80076c6:	4601      	mov	r1, r0
 80076c8:	6818      	ldr	r0, [r3, #0]
 80076ca:	f7ff bfd2 	b.w	8007672 <_raise_r>
 80076ce:	bf00      	nop
 80076d0:	20000018 	.word	0x20000018

080076d4 <_kill_r>:
 80076d4:	b538      	push	{r3, r4, r5, lr}
 80076d6:	4d07      	ldr	r5, [pc, #28]	@ (80076f4 <_kill_r+0x20>)
 80076d8:	2300      	movs	r3, #0
 80076da:	4604      	mov	r4, r0
 80076dc:	4608      	mov	r0, r1
 80076de:	4611      	mov	r1, r2
 80076e0:	602b      	str	r3, [r5, #0]
 80076e2:	f7fb f853 	bl	800278c <_kill>
 80076e6:	1c43      	adds	r3, r0, #1
 80076e8:	d102      	bne.n	80076f0 <_kill_r+0x1c>
 80076ea:	682b      	ldr	r3, [r5, #0]
 80076ec:	b103      	cbz	r3, 80076f0 <_kill_r+0x1c>
 80076ee:	6023      	str	r3, [r4, #0]
 80076f0:	bd38      	pop	{r3, r4, r5, pc}
 80076f2:	bf00      	nop
 80076f4:	200003d4 	.word	0x200003d4

080076f8 <_getpid_r>:
 80076f8:	f7fb b840 	b.w	800277c <_getpid>

080076fc <powf>:
 80076fc:	b508      	push	{r3, lr}
 80076fe:	ed2d 8b04 	vpush	{d8-d9}
 8007702:	eeb0 8a60 	vmov.f32	s16, s1
 8007706:	eeb0 9a40 	vmov.f32	s18, s0
 800770a:	f000 f85f 	bl	80077cc <__ieee754_powf>
 800770e:	eeb4 8a48 	vcmp.f32	s16, s16
 8007712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007716:	eef0 8a40 	vmov.f32	s17, s0
 800771a:	d63e      	bvs.n	800779a <powf+0x9e>
 800771c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8007720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007724:	d112      	bne.n	800774c <powf+0x50>
 8007726:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800772a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800772e:	d039      	beq.n	80077a4 <powf+0xa8>
 8007730:	eeb0 0a48 	vmov.f32	s0, s16
 8007734:	f000 f840 	bl	80077b8 <finitef>
 8007738:	b378      	cbz	r0, 800779a <powf+0x9e>
 800773a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800773e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007742:	d52a      	bpl.n	800779a <powf+0x9e>
 8007744:	f7fe f99e 	bl	8005a84 <__errno>
 8007748:	2322      	movs	r3, #34	@ 0x22
 800774a:	e014      	b.n	8007776 <powf+0x7a>
 800774c:	f000 f834 	bl	80077b8 <finitef>
 8007750:	b998      	cbnz	r0, 800777a <powf+0x7e>
 8007752:	eeb0 0a49 	vmov.f32	s0, s18
 8007756:	f000 f82f 	bl	80077b8 <finitef>
 800775a:	b170      	cbz	r0, 800777a <powf+0x7e>
 800775c:	eeb0 0a48 	vmov.f32	s0, s16
 8007760:	f000 f82a 	bl	80077b8 <finitef>
 8007764:	b148      	cbz	r0, 800777a <powf+0x7e>
 8007766:	eef4 8a68 	vcmp.f32	s17, s17
 800776a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800776e:	d7e9      	bvc.n	8007744 <powf+0x48>
 8007770:	f7fe f988 	bl	8005a84 <__errno>
 8007774:	2321      	movs	r3, #33	@ 0x21
 8007776:	6003      	str	r3, [r0, #0]
 8007778:	e00f      	b.n	800779a <powf+0x9e>
 800777a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800777e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007782:	d10a      	bne.n	800779a <powf+0x9e>
 8007784:	eeb0 0a49 	vmov.f32	s0, s18
 8007788:	f000 f816 	bl	80077b8 <finitef>
 800778c:	b128      	cbz	r0, 800779a <powf+0x9e>
 800778e:	eeb0 0a48 	vmov.f32	s0, s16
 8007792:	f000 f811 	bl	80077b8 <finitef>
 8007796:	2800      	cmp	r0, #0
 8007798:	d1d4      	bne.n	8007744 <powf+0x48>
 800779a:	eeb0 0a68 	vmov.f32	s0, s17
 800779e:	ecbd 8b04 	vpop	{d8-d9}
 80077a2:	bd08      	pop	{r3, pc}
 80077a4:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80077a8:	e7f7      	b.n	800779a <powf+0x9e>

080077aa <fabsf>:
 80077aa:	ee10 3a10 	vmov	r3, s0
 80077ae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80077b2:	ee00 3a10 	vmov	s0, r3
 80077b6:	4770      	bx	lr

080077b8 <finitef>:
 80077b8:	ee10 3a10 	vmov	r3, s0
 80077bc:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80077c0:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80077c4:	bfac      	ite	ge
 80077c6:	2000      	movge	r0, #0
 80077c8:	2001      	movlt	r0, #1
 80077ca:	4770      	bx	lr

080077cc <__ieee754_powf>:
 80077cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077d0:	ee10 4a90 	vmov	r4, s1
 80077d4:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 80077d8:	ed2d 8b02 	vpush	{d8}
 80077dc:	ee10 6a10 	vmov	r6, s0
 80077e0:	eeb0 8a40 	vmov.f32	s16, s0
 80077e4:	eef0 8a60 	vmov.f32	s17, s1
 80077e8:	d10c      	bne.n	8007804 <__ieee754_powf+0x38>
 80077ea:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 80077ee:	0076      	lsls	r6, r6, #1
 80077f0:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 80077f4:	f240 829c 	bls.w	8007d30 <__ieee754_powf+0x564>
 80077f8:	ee38 0a28 	vadd.f32	s0, s16, s17
 80077fc:	ecbd 8b02 	vpop	{d8}
 8007800:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007804:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8007808:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800780c:	d802      	bhi.n	8007814 <__ieee754_powf+0x48>
 800780e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8007812:	d908      	bls.n	8007826 <__ieee754_powf+0x5a>
 8007814:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8007818:	d1ee      	bne.n	80077f8 <__ieee754_powf+0x2c>
 800781a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800781e:	0064      	lsls	r4, r4, #1
 8007820:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8007824:	e7e6      	b.n	80077f4 <__ieee754_powf+0x28>
 8007826:	2e00      	cmp	r6, #0
 8007828:	da1e      	bge.n	8007868 <__ieee754_powf+0x9c>
 800782a:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800782e:	d22b      	bcs.n	8007888 <__ieee754_powf+0xbc>
 8007830:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8007834:	d332      	bcc.n	800789c <__ieee754_powf+0xd0>
 8007836:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800783a:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800783e:	fa49 f503 	asr.w	r5, r9, r3
 8007842:	fa05 f303 	lsl.w	r3, r5, r3
 8007846:	454b      	cmp	r3, r9
 8007848:	d126      	bne.n	8007898 <__ieee754_powf+0xcc>
 800784a:	f005 0501 	and.w	r5, r5, #1
 800784e:	f1c5 0502 	rsb	r5, r5, #2
 8007852:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8007856:	d122      	bne.n	800789e <__ieee754_powf+0xd2>
 8007858:	2c00      	cmp	r4, #0
 800785a:	f280 826f 	bge.w	8007d3c <__ieee754_powf+0x570>
 800785e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8007862:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8007866:	e7c9      	b.n	80077fc <__ieee754_powf+0x30>
 8007868:	2500      	movs	r5, #0
 800786a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800786e:	d1f0      	bne.n	8007852 <__ieee754_powf+0x86>
 8007870:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8007874:	f000 825c 	beq.w	8007d30 <__ieee754_powf+0x564>
 8007878:	d908      	bls.n	800788c <__ieee754_powf+0xc0>
 800787a:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 8007bdc <__ieee754_powf+0x410>
 800787e:	2c00      	cmp	r4, #0
 8007880:	bfa8      	it	ge
 8007882:	eeb0 0a68 	vmovge.f32	s0, s17
 8007886:	e7b9      	b.n	80077fc <__ieee754_powf+0x30>
 8007888:	2502      	movs	r5, #2
 800788a:	e7ee      	b.n	800786a <__ieee754_powf+0x9e>
 800788c:	2c00      	cmp	r4, #0
 800788e:	f280 8252 	bge.w	8007d36 <__ieee754_powf+0x56a>
 8007892:	eeb1 0a68 	vneg.f32	s0, s17
 8007896:	e7b1      	b.n	80077fc <__ieee754_powf+0x30>
 8007898:	2500      	movs	r5, #0
 800789a:	e7da      	b.n	8007852 <__ieee754_powf+0x86>
 800789c:	2500      	movs	r5, #0
 800789e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80078a2:	d102      	bne.n	80078aa <__ieee754_powf+0xde>
 80078a4:	ee28 0a08 	vmul.f32	s0, s16, s16
 80078a8:	e7a8      	b.n	80077fc <__ieee754_powf+0x30>
 80078aa:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80078ae:	d109      	bne.n	80078c4 <__ieee754_powf+0xf8>
 80078b0:	2e00      	cmp	r6, #0
 80078b2:	db07      	blt.n	80078c4 <__ieee754_powf+0xf8>
 80078b4:	eeb0 0a48 	vmov.f32	s0, s16
 80078b8:	ecbd 8b02 	vpop	{d8}
 80078bc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078c0:	f000 bae0 	b.w	8007e84 <__ieee754_sqrtf>
 80078c4:	eeb0 0a48 	vmov.f32	s0, s16
 80078c8:	f7ff ff6f 	bl	80077aa <fabsf>
 80078cc:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 80078d0:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80078d4:	4647      	mov	r7, r8
 80078d6:	d002      	beq.n	80078de <__ieee754_powf+0x112>
 80078d8:	f1b8 0f00 	cmp.w	r8, #0
 80078dc:	d117      	bne.n	800790e <__ieee754_powf+0x142>
 80078de:	2c00      	cmp	r4, #0
 80078e0:	bfbc      	itt	lt
 80078e2:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 80078e6:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80078ea:	2e00      	cmp	r6, #0
 80078ec:	da86      	bge.n	80077fc <__ieee754_powf+0x30>
 80078ee:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 80078f2:	ea58 0805 	orrs.w	r8, r8, r5
 80078f6:	d104      	bne.n	8007902 <__ieee754_powf+0x136>
 80078f8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80078fc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007900:	e77c      	b.n	80077fc <__ieee754_powf+0x30>
 8007902:	2d01      	cmp	r5, #1
 8007904:	f47f af7a 	bne.w	80077fc <__ieee754_powf+0x30>
 8007908:	eeb1 0a40 	vneg.f32	s0, s0
 800790c:	e776      	b.n	80077fc <__ieee754_powf+0x30>
 800790e:	0ff0      	lsrs	r0, r6, #31
 8007910:	3801      	subs	r0, #1
 8007912:	ea55 0300 	orrs.w	r3, r5, r0
 8007916:	d104      	bne.n	8007922 <__ieee754_powf+0x156>
 8007918:	ee38 8a48 	vsub.f32	s16, s16, s16
 800791c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8007920:	e76c      	b.n	80077fc <__ieee754_powf+0x30>
 8007922:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8007926:	d973      	bls.n	8007a10 <__ieee754_powf+0x244>
 8007928:	4bad      	ldr	r3, [pc, #692]	@ (8007be0 <__ieee754_powf+0x414>)
 800792a:	4598      	cmp	r8, r3
 800792c:	d808      	bhi.n	8007940 <__ieee754_powf+0x174>
 800792e:	2c00      	cmp	r4, #0
 8007930:	da0b      	bge.n	800794a <__ieee754_powf+0x17e>
 8007932:	2000      	movs	r0, #0
 8007934:	ecbd 8b02 	vpop	{d8}
 8007938:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800793c:	f000 ba9c 	b.w	8007e78 <__math_oflowf>
 8007940:	4ba8      	ldr	r3, [pc, #672]	@ (8007be4 <__ieee754_powf+0x418>)
 8007942:	4598      	cmp	r8, r3
 8007944:	d908      	bls.n	8007958 <__ieee754_powf+0x18c>
 8007946:	2c00      	cmp	r4, #0
 8007948:	dcf3      	bgt.n	8007932 <__ieee754_powf+0x166>
 800794a:	2000      	movs	r0, #0
 800794c:	ecbd 8b02 	vpop	{d8}
 8007950:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007954:	f000 ba8a 	b.w	8007e6c <__math_uflowf>
 8007958:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800795c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007960:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8007be8 <__ieee754_powf+0x41c>
 8007964:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8007968:	eee0 6a67 	vfms.f32	s13, s0, s15
 800796c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007970:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8007974:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007978:	ee27 7a27 	vmul.f32	s14, s14, s15
 800797c:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8007bec <__ieee754_powf+0x420>
 8007980:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8007984:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8007bf0 <__ieee754_powf+0x424>
 8007988:	eee0 7a07 	vfma.f32	s15, s0, s14
 800798c:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8007bf4 <__ieee754_powf+0x428>
 8007990:	eef0 6a67 	vmov.f32	s13, s15
 8007994:	eee0 6a07 	vfma.f32	s13, s0, s14
 8007998:	ee16 3a90 	vmov	r3, s13
 800799c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80079a0:	f023 030f 	bic.w	r3, r3, #15
 80079a4:	ee06 3a90 	vmov	s13, r3
 80079a8:	eee0 6a47 	vfms.f32	s13, s0, s14
 80079ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80079b0:	3d01      	subs	r5, #1
 80079b2:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 80079b6:	4305      	orrs	r5, r0
 80079b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079bc:	f024 040f 	bic.w	r4, r4, #15
 80079c0:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 80079c4:	bf18      	it	ne
 80079c6:	eeb0 8a47 	vmovne.f32	s16, s14
 80079ca:	ee07 4a10 	vmov	s14, r4
 80079ce:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80079d2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80079d6:	ee07 3a90 	vmov	s15, r3
 80079da:	eee7 0a27 	vfma.f32	s1, s14, s15
 80079de:	ee07 4a10 	vmov	s14, r4
 80079e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80079e6:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80079ea:	ee17 1a10 	vmov	r1, s14
 80079ee:	2900      	cmp	r1, #0
 80079f0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80079f4:	f340 80dd 	ble.w	8007bb2 <__ieee754_powf+0x3e6>
 80079f8:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80079fc:	f240 80ca 	bls.w	8007b94 <__ieee754_powf+0x3c8>
 8007a00:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a08:	bf4c      	ite	mi
 8007a0a:	2001      	movmi	r0, #1
 8007a0c:	2000      	movpl	r0, #0
 8007a0e:	e791      	b.n	8007934 <__ieee754_powf+0x168>
 8007a10:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8007a14:	bf01      	itttt	eq
 8007a16:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8007bf8 <__ieee754_powf+0x42c>
 8007a1a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8007a1e:	f06f 0317 	mvneq.w	r3, #23
 8007a22:	ee17 7a90 	vmoveq	r7, s15
 8007a26:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8007a2a:	bf18      	it	ne
 8007a2c:	2300      	movne	r3, #0
 8007a2e:	3a7f      	subs	r2, #127	@ 0x7f
 8007a30:	441a      	add	r2, r3
 8007a32:	4b72      	ldr	r3, [pc, #456]	@ (8007bfc <__ieee754_powf+0x430>)
 8007a34:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8007a38:	429f      	cmp	r7, r3
 8007a3a:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8007a3e:	dd06      	ble.n	8007a4e <__ieee754_powf+0x282>
 8007a40:	4b6f      	ldr	r3, [pc, #444]	@ (8007c00 <__ieee754_powf+0x434>)
 8007a42:	429f      	cmp	r7, r3
 8007a44:	f340 80a4 	ble.w	8007b90 <__ieee754_powf+0x3c4>
 8007a48:	3201      	adds	r2, #1
 8007a4a:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8007a4e:	2600      	movs	r6, #0
 8007a50:	4b6c      	ldr	r3, [pc, #432]	@ (8007c04 <__ieee754_powf+0x438>)
 8007a52:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8007a56:	ee07 1a10 	vmov	s14, r1
 8007a5a:	edd3 5a00 	vldr	s11, [r3]
 8007a5e:	4b6a      	ldr	r3, [pc, #424]	@ (8007c08 <__ieee754_powf+0x43c>)
 8007a60:	ee75 7a87 	vadd.f32	s15, s11, s14
 8007a64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a68:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8007a6c:	1049      	asrs	r1, r1, #1
 8007a6e:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8007a72:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8007a76:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8007a7a:	ee37 6a65 	vsub.f32	s12, s14, s11
 8007a7e:	ee07 1a90 	vmov	s15, r1
 8007a82:	ee26 5a24 	vmul.f32	s10, s12, s9
 8007a86:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8007a8a:	ee15 7a10 	vmov	r7, s10
 8007a8e:	401f      	ands	r7, r3
 8007a90:	ee06 7a90 	vmov	s13, r7
 8007a94:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8007a98:	ee37 7a65 	vsub.f32	s14, s14, s11
 8007a9c:	ee65 7a05 	vmul.f32	s15, s10, s10
 8007aa0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8007aa4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8007c0c <__ieee754_powf+0x440>
 8007aa8:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8007c10 <__ieee754_powf+0x444>
 8007aac:	eee7 5a87 	vfma.f32	s11, s15, s14
 8007ab0:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8007c14 <__ieee754_powf+0x448>
 8007ab4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8007ab8:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8007be8 <__ieee754_powf+0x41c>
 8007abc:	eee7 5a27 	vfma.f32	s11, s14, s15
 8007ac0:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8007c18 <__ieee754_powf+0x44c>
 8007ac4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8007ac8:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8007c1c <__ieee754_powf+0x450>
 8007acc:	ee26 6a24 	vmul.f32	s12, s12, s9
 8007ad0:	eee7 5a27 	vfma.f32	s11, s14, s15
 8007ad4:	ee35 7a26 	vadd.f32	s14, s10, s13
 8007ad8:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8007adc:	ee27 7a06 	vmul.f32	s14, s14, s12
 8007ae0:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8007ae4:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8007ae8:	eef0 5a67 	vmov.f32	s11, s15
 8007aec:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8007af0:	ee75 5a87 	vadd.f32	s11, s11, s14
 8007af4:	ee15 1a90 	vmov	r1, s11
 8007af8:	4019      	ands	r1, r3
 8007afa:	ee05 1a90 	vmov	s11, r1
 8007afe:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8007b02:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8007b06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b0a:	ee67 7a85 	vmul.f32	s15, s15, s10
 8007b0e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007b12:	eeb0 6a67 	vmov.f32	s12, s15
 8007b16:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8007b1a:	ee16 1a10 	vmov	r1, s12
 8007b1e:	4019      	ands	r1, r3
 8007b20:	ee06 1a10 	vmov	s12, r1
 8007b24:	eeb0 7a46 	vmov.f32	s14, s12
 8007b28:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8007b2c:	493c      	ldr	r1, [pc, #240]	@ (8007c20 <__ieee754_powf+0x454>)
 8007b2e:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8007b32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b36:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8007c24 <__ieee754_powf+0x458>
 8007b3a:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8007c28 <__ieee754_powf+0x45c>
 8007b3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b42:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8007c2c <__ieee754_powf+0x460>
 8007b46:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007b4a:	ed91 7a00 	vldr	s14, [r1]
 8007b4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b52:	ee07 2a10 	vmov	s14, r2
 8007b56:	eef0 6a67 	vmov.f32	s13, s15
 8007b5a:	4a35      	ldr	r2, [pc, #212]	@ (8007c30 <__ieee754_powf+0x464>)
 8007b5c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8007b60:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8007b64:	ed92 5a00 	vldr	s10, [r2]
 8007b68:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007b6c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8007b70:	ee76 6a87 	vadd.f32	s13, s13, s14
 8007b74:	ee16 2a90 	vmov	r2, s13
 8007b78:	4013      	ands	r3, r2
 8007b7a:	ee06 3a90 	vmov	s13, r3
 8007b7e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007b82:	ee37 7a45 	vsub.f32	s14, s14, s10
 8007b86:	eea6 7a65 	vfms.f32	s14, s12, s11
 8007b8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b8e:	e70f      	b.n	80079b0 <__ieee754_powf+0x1e4>
 8007b90:	2601      	movs	r6, #1
 8007b92:	e75d      	b.n	8007a50 <__ieee754_powf+0x284>
 8007b94:	d152      	bne.n	8007c3c <__ieee754_powf+0x470>
 8007b96:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8007c34 <__ieee754_powf+0x468>
 8007b9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007b9e:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8007ba2:	eef4 6ac7 	vcmpe.f32	s13, s14
 8007ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007baa:	f73f af29 	bgt.w	8007a00 <__ieee754_powf+0x234>
 8007bae:	2386      	movs	r3, #134	@ 0x86
 8007bb0:	e048      	b.n	8007c44 <__ieee754_powf+0x478>
 8007bb2:	4a21      	ldr	r2, [pc, #132]	@ (8007c38 <__ieee754_powf+0x46c>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d907      	bls.n	8007bc8 <__ieee754_powf+0x3fc>
 8007bb8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bc0:	bf4c      	ite	mi
 8007bc2:	2001      	movmi	r0, #1
 8007bc4:	2000      	movpl	r0, #0
 8007bc6:	e6c1      	b.n	800794c <__ieee754_powf+0x180>
 8007bc8:	d138      	bne.n	8007c3c <__ieee754_powf+0x470>
 8007bca:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007bce:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8007bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bd6:	dbea      	blt.n	8007bae <__ieee754_powf+0x3e2>
 8007bd8:	e7ee      	b.n	8007bb8 <__ieee754_powf+0x3ec>
 8007bda:	bf00      	nop
 8007bdc:	00000000 	.word	0x00000000
 8007be0:	3f7ffff3 	.word	0x3f7ffff3
 8007be4:	3f800007 	.word	0x3f800007
 8007be8:	3eaaaaab 	.word	0x3eaaaaab
 8007bec:	3fb8aa3b 	.word	0x3fb8aa3b
 8007bf0:	36eca570 	.word	0x36eca570
 8007bf4:	3fb8aa00 	.word	0x3fb8aa00
 8007bf8:	4b800000 	.word	0x4b800000
 8007bfc:	001cc471 	.word	0x001cc471
 8007c00:	005db3d6 	.word	0x005db3d6
 8007c04:	080083d0 	.word	0x080083d0
 8007c08:	fffff000 	.word	0xfffff000
 8007c0c:	3e6c3255 	.word	0x3e6c3255
 8007c10:	3e53f142 	.word	0x3e53f142
 8007c14:	3e8ba305 	.word	0x3e8ba305
 8007c18:	3edb6db7 	.word	0x3edb6db7
 8007c1c:	3f19999a 	.word	0x3f19999a
 8007c20:	080083c0 	.word	0x080083c0
 8007c24:	3f76384f 	.word	0x3f76384f
 8007c28:	3f763800 	.word	0x3f763800
 8007c2c:	369dc3a0 	.word	0x369dc3a0
 8007c30:	080083c8 	.word	0x080083c8
 8007c34:	3338aa3c 	.word	0x3338aa3c
 8007c38:	43160000 	.word	0x43160000
 8007c3c:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8007c40:	d971      	bls.n	8007d26 <__ieee754_powf+0x55a>
 8007c42:	15db      	asrs	r3, r3, #23
 8007c44:	3b7e      	subs	r3, #126	@ 0x7e
 8007c46:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8007c4a:	4118      	asrs	r0, r3
 8007c4c:	4408      	add	r0, r1
 8007c4e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8007c52:	4a3c      	ldr	r2, [pc, #240]	@ (8007d44 <__ieee754_powf+0x578>)
 8007c54:	3b7f      	subs	r3, #127	@ 0x7f
 8007c56:	411a      	asrs	r2, r3
 8007c58:	4002      	ands	r2, r0
 8007c5a:	ee07 2a10 	vmov	s14, r2
 8007c5e:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8007c62:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8007c66:	f1c3 0317 	rsb	r3, r3, #23
 8007c6a:	4118      	asrs	r0, r3
 8007c6c:	2900      	cmp	r1, #0
 8007c6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007c72:	bfb8      	it	lt
 8007c74:	4240      	neglt	r0, r0
 8007c76:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8007c7a:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8007d48 <__ieee754_powf+0x57c>
 8007c7e:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 8007d4c <__ieee754_powf+0x580>
 8007c82:	ee17 3a10 	vmov	r3, s14
 8007c86:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8007c8a:	f023 030f 	bic.w	r3, r3, #15
 8007c8e:	ee07 3a10 	vmov	s14, r3
 8007c92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c96:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007c9a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8007c9e:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8007d50 <__ieee754_powf+0x584>
 8007ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ca6:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8007caa:	eef0 6a67 	vmov.f32	s13, s15
 8007cae:	eee7 6a06 	vfma.f32	s13, s14, s12
 8007cb2:	eef0 5a66 	vmov.f32	s11, s13
 8007cb6:	eee7 5a46 	vfms.f32	s11, s14, s12
 8007cba:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8007cbe:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8007cc2:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 8007d54 <__ieee754_powf+0x588>
 8007cc6:	eddf 5a24 	vldr	s11, [pc, #144]	@ 8007d58 <__ieee754_powf+0x58c>
 8007cca:	eea7 6a25 	vfma.f32	s12, s14, s11
 8007cce:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8007d5c <__ieee754_powf+0x590>
 8007cd2:	eee6 5a07 	vfma.f32	s11, s12, s14
 8007cd6:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8007d60 <__ieee754_powf+0x594>
 8007cda:	eea5 6a87 	vfma.f32	s12, s11, s14
 8007cde:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8007d64 <__ieee754_powf+0x598>
 8007ce2:	eee6 5a07 	vfma.f32	s11, s12, s14
 8007ce6:	eeb0 6a66 	vmov.f32	s12, s13
 8007cea:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8007cee:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8007cf2:	ee66 5a86 	vmul.f32	s11, s13, s12
 8007cf6:	ee36 6a47 	vsub.f32	s12, s12, s14
 8007cfa:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8007cfe:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8007d02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d06:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007d0a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007d0e:	ee10 3a10 	vmov	r3, s0
 8007d12:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8007d16:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007d1a:	da06      	bge.n	8007d2a <__ieee754_powf+0x55e>
 8007d1c:	f000 f826 	bl	8007d6c <scalbnf>
 8007d20:	ee20 0a08 	vmul.f32	s0, s0, s16
 8007d24:	e56a      	b.n	80077fc <__ieee754_powf+0x30>
 8007d26:	2000      	movs	r0, #0
 8007d28:	e7a5      	b.n	8007c76 <__ieee754_powf+0x4aa>
 8007d2a:	ee00 3a10 	vmov	s0, r3
 8007d2e:	e7f7      	b.n	8007d20 <__ieee754_powf+0x554>
 8007d30:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007d34:	e562      	b.n	80077fc <__ieee754_powf+0x30>
 8007d36:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8007d68 <__ieee754_powf+0x59c>
 8007d3a:	e55f      	b.n	80077fc <__ieee754_powf+0x30>
 8007d3c:	eeb0 0a48 	vmov.f32	s0, s16
 8007d40:	e55c      	b.n	80077fc <__ieee754_powf+0x30>
 8007d42:	bf00      	nop
 8007d44:	ff800000 	.word	0xff800000
 8007d48:	3f317218 	.word	0x3f317218
 8007d4c:	3f317200 	.word	0x3f317200
 8007d50:	35bfbe8c 	.word	0x35bfbe8c
 8007d54:	b5ddea0e 	.word	0xb5ddea0e
 8007d58:	3331bb4c 	.word	0x3331bb4c
 8007d5c:	388ab355 	.word	0x388ab355
 8007d60:	bb360b61 	.word	0xbb360b61
 8007d64:	3e2aaaab 	.word	0x3e2aaaab
 8007d68:	00000000 	.word	0x00000000

08007d6c <scalbnf>:
 8007d6c:	ee10 3a10 	vmov	r3, s0
 8007d70:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8007d74:	d02b      	beq.n	8007dce <scalbnf+0x62>
 8007d76:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8007d7a:	d302      	bcc.n	8007d82 <scalbnf+0x16>
 8007d7c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007d80:	4770      	bx	lr
 8007d82:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8007d86:	d123      	bne.n	8007dd0 <scalbnf+0x64>
 8007d88:	4b24      	ldr	r3, [pc, #144]	@ (8007e1c <scalbnf+0xb0>)
 8007d8a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8007e20 <scalbnf+0xb4>
 8007d8e:	4298      	cmp	r0, r3
 8007d90:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007d94:	db17      	blt.n	8007dc6 <scalbnf+0x5a>
 8007d96:	ee10 3a10 	vmov	r3, s0
 8007d9a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007d9e:	3a19      	subs	r2, #25
 8007da0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8007da4:	4288      	cmp	r0, r1
 8007da6:	dd15      	ble.n	8007dd4 <scalbnf+0x68>
 8007da8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8007e24 <scalbnf+0xb8>
 8007dac:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8007e28 <scalbnf+0xbc>
 8007db0:	ee10 3a10 	vmov	r3, s0
 8007db4:	eeb0 7a67 	vmov.f32	s14, s15
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	bfb8      	it	lt
 8007dbc:	eef0 7a66 	vmovlt.f32	s15, s13
 8007dc0:	ee27 0a87 	vmul.f32	s0, s15, s14
 8007dc4:	4770      	bx	lr
 8007dc6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8007e2c <scalbnf+0xc0>
 8007dca:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007dce:	4770      	bx	lr
 8007dd0:	0dd2      	lsrs	r2, r2, #23
 8007dd2:	e7e5      	b.n	8007da0 <scalbnf+0x34>
 8007dd4:	4410      	add	r0, r2
 8007dd6:	28fe      	cmp	r0, #254	@ 0xfe
 8007dd8:	dce6      	bgt.n	8007da8 <scalbnf+0x3c>
 8007dda:	2800      	cmp	r0, #0
 8007ddc:	dd06      	ble.n	8007dec <scalbnf+0x80>
 8007dde:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007de2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8007de6:	ee00 3a10 	vmov	s0, r3
 8007dea:	4770      	bx	lr
 8007dec:	f110 0f16 	cmn.w	r0, #22
 8007df0:	da09      	bge.n	8007e06 <scalbnf+0x9a>
 8007df2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8007e2c <scalbnf+0xc0>
 8007df6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8007e30 <scalbnf+0xc4>
 8007dfa:	ee10 3a10 	vmov	r3, s0
 8007dfe:	eeb0 7a67 	vmov.f32	s14, s15
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	e7d9      	b.n	8007dba <scalbnf+0x4e>
 8007e06:	3019      	adds	r0, #25
 8007e08:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007e0c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8007e10:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8007e34 <scalbnf+0xc8>
 8007e14:	ee07 3a90 	vmov	s15, r3
 8007e18:	e7d7      	b.n	8007dca <scalbnf+0x5e>
 8007e1a:	bf00      	nop
 8007e1c:	ffff3cb0 	.word	0xffff3cb0
 8007e20:	4c000000 	.word	0x4c000000
 8007e24:	7149f2ca 	.word	0x7149f2ca
 8007e28:	f149f2ca 	.word	0xf149f2ca
 8007e2c:	0da24260 	.word	0x0da24260
 8007e30:	8da24260 	.word	0x8da24260
 8007e34:	33000000 	.word	0x33000000

08007e38 <with_errnof>:
 8007e38:	b510      	push	{r4, lr}
 8007e3a:	ed2d 8b02 	vpush	{d8}
 8007e3e:	eeb0 8a40 	vmov.f32	s16, s0
 8007e42:	4604      	mov	r4, r0
 8007e44:	f7fd fe1e 	bl	8005a84 <__errno>
 8007e48:	eeb0 0a48 	vmov.f32	s0, s16
 8007e4c:	ecbd 8b02 	vpop	{d8}
 8007e50:	6004      	str	r4, [r0, #0]
 8007e52:	bd10      	pop	{r4, pc}

08007e54 <xflowf>:
 8007e54:	b130      	cbz	r0, 8007e64 <xflowf+0x10>
 8007e56:	eef1 7a40 	vneg.f32	s15, s0
 8007e5a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007e5e:	2022      	movs	r0, #34	@ 0x22
 8007e60:	f7ff bfea 	b.w	8007e38 <with_errnof>
 8007e64:	eef0 7a40 	vmov.f32	s15, s0
 8007e68:	e7f7      	b.n	8007e5a <xflowf+0x6>
	...

08007e6c <__math_uflowf>:
 8007e6c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007e74 <__math_uflowf+0x8>
 8007e70:	f7ff bff0 	b.w	8007e54 <xflowf>
 8007e74:	10000000 	.word	0x10000000

08007e78 <__math_oflowf>:
 8007e78:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007e80 <__math_oflowf+0x8>
 8007e7c:	f7ff bfea 	b.w	8007e54 <xflowf>
 8007e80:	70000000 	.word	0x70000000

08007e84 <__ieee754_sqrtf>:
 8007e84:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007e88:	4770      	bx	lr
	...

08007e8c <_init>:
 8007e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8e:	bf00      	nop
 8007e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e92:	bc08      	pop	{r3}
 8007e94:	469e      	mov	lr, r3
 8007e96:	4770      	bx	lr

08007e98 <_fini>:
 8007e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e9a:	bf00      	nop
 8007e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e9e:	bc08      	pop	{r3}
 8007ea0:	469e      	mov	lr, r3
 8007ea2:	4770      	bx	lr
