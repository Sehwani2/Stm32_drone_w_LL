
Project_drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f460  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d8  0800f5f0  0800f5f0  000105f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fdc8  0800fdc8  000111d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fdc8  0800fdc8  00010dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fdd0  0800fdd0  000111d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fdd0  0800fdd0  00010dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fdd4  0800fdd4  00010dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800fdd8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000111d8  2**0
                  CONTENTS
 10 .bss          000004f8  200001d8  200001d8  000111d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200006d0  200006d0  000111d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000111d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000194e6  00000000  00000000  00011208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004844  00000000  00000000  0002a6ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001760  00000000  00000000  0002ef38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011c8  00000000  00000000  00030698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000278f4  00000000  00000000  00031860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001db33  00000000  00000000  00059154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dcf2c  00000000  00000000  00076c87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00153bb3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007324  00000000  00000000  00153bf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  0015af1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f5d8 	.word	0x0800f5d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800f5d8 	.word	0x0800f5d8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	683a      	ldr	r2, [r7, #0]
 8000ea6:	619a      	str	r2, [r3, #24]
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	041a      	lsls	r2, r3, #16
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	619a      	str	r2, [r3, #24]
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
	...

08000ed4 <AT24C08_Page_Write>:

#include "AT24C08.h"
#include "i2c.h"

void AT24C08_Page_Write(unsigned char page, unsigned char* data, unsigned char len)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af04      	add	r7, sp, #16
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	71bb      	strb	r3, [r7, #6]
	unsigned char devAddress = ((page*16)>>8<<1) | 0xA0;
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	011b      	lsls	r3, r3, #4
 8000ee8:	121b      	asrs	r3, r3, #8
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	b25b      	sxtb	r3, r3
 8000eee:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8000ef2:	b25b      	sxtb	r3, r3
 8000ef4:	73fb      	strb	r3, [r7, #15]
	unsigned char wordAddress = (page * 16) & 0xff;
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	011b      	lsls	r3, r3, #4
 8000efa:	73bb      	strb	r3, [r7, #14]
	// 쓰기 금지 해제
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8000efc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f00:	480e      	ldr	r0, [pc, #56]	@ (8000f3c <AT24C08_Page_Write+0x68>)
 8000f02:	f7ff ffd7 	bl	8000eb4 <LL_GPIO_ResetOutputPin>
	HAL_I2C_Mem_Write(&hi2c1, devAddress, wordAddress, I2C_MEMADD_SIZE_8BIT, &data[0], 16, 1);
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	b299      	uxth	r1, r3
 8000f0a:	7bbb      	ldrb	r3, [r7, #14]
 8000f0c:	b29a      	uxth	r2, r3
 8000f0e:	2301      	movs	r3, #1
 8000f10:	9302      	str	r3, [sp, #8]
 8000f12:	2310      	movs	r3, #16
 8000f14:	9301      	str	r3, [sp, #4]
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	4808      	ldr	r0, [pc, #32]	@ (8000f40 <AT24C08_Page_Write+0x6c>)
 8000f1e:	f007 fabb 	bl	8008498 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000f22:	2001      	movs	r0, #1
 8000f24:	f005 fe8e 	bl	8006c44 <HAL_Delay>
	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8000f28:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f2c:	4803      	ldr	r0, [pc, #12]	@ (8000f3c <AT24C08_Page_Write+0x68>)
 8000f2e:	f7ff ffb3 	bl	8000e98 <LL_GPIO_SetOutputPin>
}
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40020800 	.word	0x40020800
 8000f40:	200003f4 	.word	0x200003f4

08000f44 <AT24C08_Page_Read>:

void AT24C08_Page_Read(unsigned char page, unsigned char* data, unsigned char len)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af04      	add	r7, sp, #16
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	71fb      	strb	r3, [r7, #7]
 8000f50:	4613      	mov	r3, r2
 8000f52:	71bb      	strb	r3, [r7, #6]
	unsigned char devAddress = ((page*16)>>8<<1) | 0xA0;
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	121b      	asrs	r3, r3, #8
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	b25b      	sxtb	r3, r3
 8000f5e:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8000f62:	b25b      	sxtb	r3, r3
 8000f64:	73fb      	strb	r3, [r7, #15]
	unsigned char wordAddress = (page * 16) & 0xff;
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	011b      	lsls	r3, r3, #4
 8000f6a:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Read(&hi2c1, devAddress, wordAddress, I2C_MEMADD_SIZE_8BIT, &data[0], 16, 1);
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	b299      	uxth	r1, r3
 8000f70:	7bbb      	ldrb	r3, [r7, #14]
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	2301      	movs	r3, #1
 8000f76:	9302      	str	r3, [sp, #8]
 8000f78:	2310      	movs	r3, #16
 8000f7a:	9301      	str	r3, [sp, #4]
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	2301      	movs	r3, #1
 8000f82:	4803      	ldr	r0, [pc, #12]	@ (8000f90 <AT24C08_Page_Read+0x4c>)
 8000f84:	f007 fb82 	bl	800868c <HAL_I2C_Mem_Read>
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	200003f4 	.word	0x200003f4

08000f94 <EP_PIDGain_Write>:


void EP_PIDGain_Write(unsigned char id, float PGain, float IGain, float DGain)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08c      	sub	sp, #48	@ 0x30
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000fa0:	edc7 0a01 	vstr	s1, [r7, #4]
 8000fa4:	ed87 1a00 	vstr	s2, [r7]
 8000fa8:	73fb      	strb	r3, [r7, #15]
	unsigned char buf_write[16];
	Parser parser;
	unsigned char chksum = 0xff;
 8000faa:	23ff      	movs	r3, #255	@ 0xff
 8000fac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	buf_write[0] = 0x45;
 8000fb0:	2345      	movs	r3, #69	@ 0x45
 8000fb2:	763b      	strb	r3, [r7, #24]
	buf_write[1] = 0x50;
 8000fb4:	2350      	movs	r3, #80	@ 0x50
 8000fb6:	767b      	strb	r3, [r7, #25]
	buf_write[2] = id;
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
 8000fba:	76bb      	strb	r3, [r7, #26]

	parser.f = PGain; //float 바이트 단위로 쪼개기
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	617b      	str	r3, [r7, #20]
	buf_write[3] = parser.byte[0];
 8000fc0:	7d3b      	ldrb	r3, [r7, #20]
 8000fc2:	76fb      	strb	r3, [r7, #27]
	buf_write[4] = parser.byte[1];
 8000fc4:	7d7b      	ldrb	r3, [r7, #21]
 8000fc6:	773b      	strb	r3, [r7, #28]
	buf_write[5] = parser.byte[2];
 8000fc8:	7dbb      	ldrb	r3, [r7, #22]
 8000fca:	777b      	strb	r3, [r7, #29]
	buf_write[6] = parser.byte[3];
 8000fcc:	7dfb      	ldrb	r3, [r7, #23]
 8000fce:	77bb      	strb	r3, [r7, #30]
	parser.f = PGain;
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	617b      	str	r3, [r7, #20]
	buf_write[7] = parser.byte[0];
 8000fd4:	7d3b      	ldrb	r3, [r7, #20]
 8000fd6:	77fb      	strb	r3, [r7, #31]
	buf_write[8] = parser.byte[1];
 8000fd8:	7d7b      	ldrb	r3, [r7, #21]
 8000fda:	f887 3020 	strb.w	r3, [r7, #32]
	buf_write[9] = parser.byte[2];
 8000fde:	7dbb      	ldrb	r3, [r7, #22]
 8000fe0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	buf_write[10] = parser.byte[3];
 8000fe4:	7dfb      	ldrb	r3, [r7, #23]
 8000fe6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	parser.f = PGain;
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	617b      	str	r3, [r7, #20]
	buf_write[11] = parser.byte[0];
 8000fee:	7d3b      	ldrb	r3, [r7, #20]
 8000ff0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	buf_write[12] = parser.byte[1];
 8000ff4:	7d7b      	ldrb	r3, [r7, #21]
 8000ff6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	buf_write[13] = parser.byte[2];
 8000ffa:	7dbb      	ldrb	r3, [r7, #22]
 8000ffc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	buf_write[14] = parser.byte[3];
 8001000:	7dfb      	ldrb	r3, [r7, #23]
 8001002:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	for(int i=0; i<15; i++)
 8001006:	2300      	movs	r3, #0
 8001008:	62bb      	str	r3, [r7, #40]	@ 0x28
 800100a:	e00c      	b.n	8001026 <EP_PIDGain_Write+0x92>
	{
		chksum -= buf_write[i];
 800100c:	f107 0218 	add.w	r2, r7, #24
 8001010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001012:	4413      	add	r3, r2
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for(int i=0; i<15; i++)
 8001020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001022:	3301      	adds	r3, #1
 8001024:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001028:	2b0e      	cmp	r3, #14
 800102a:	ddef      	ble.n	800100c <EP_PIDGain_Write+0x78>
	}
	buf_write[15] = chksum;
 800102c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001030:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	switch(id)
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	2b05      	cmp	r3, #5
 8001038:	d83e      	bhi.n	80010b8 <EP_PIDGain_Write+0x124>
 800103a:	a201      	add	r2, pc, #4	@ (adr r2, 8001040 <EP_PIDGain_Write+0xac>)
 800103c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001040:	08001059 	.word	0x08001059
 8001044:	08001069 	.word	0x08001069
 8001048:	08001079 	.word	0x08001079
 800104c:	08001089 	.word	0x08001089
 8001050:	08001099 	.word	0x08001099
 8001054:	080010a9 	.word	0x080010a9
	{
	case 0:
		AT24C08_Page_Write(0,&buf_write[0],16);
 8001058:	f107 0318 	add.w	r3, r7, #24
 800105c:	2210      	movs	r2, #16
 800105e:	4619      	mov	r1, r3
 8001060:	2000      	movs	r0, #0
 8001062:	f7ff ff37 	bl	8000ed4 <AT24C08_Page_Write>
		break;
 8001066:	e027      	b.n	80010b8 <EP_PIDGain_Write+0x124>
	case 1:
		AT24C08_Page_Write(1,&buf_write[0],16);
 8001068:	f107 0318 	add.w	r3, r7, #24
 800106c:	2210      	movs	r2, #16
 800106e:	4619      	mov	r1, r3
 8001070:	2001      	movs	r0, #1
 8001072:	f7ff ff2f 	bl	8000ed4 <AT24C08_Page_Write>
		break;
 8001076:	e01f      	b.n	80010b8 <EP_PIDGain_Write+0x124>
	case 2:
		AT24C08_Page_Write(2,&buf_write[0],16);
 8001078:	f107 0318 	add.w	r3, r7, #24
 800107c:	2210      	movs	r2, #16
 800107e:	4619      	mov	r1, r3
 8001080:	2002      	movs	r0, #2
 8001082:	f7ff ff27 	bl	8000ed4 <AT24C08_Page_Write>
		break;
 8001086:	e017      	b.n	80010b8 <EP_PIDGain_Write+0x124>
	case 3:
		AT24C08_Page_Write(3,&buf_write[0],16);
 8001088:	f107 0318 	add.w	r3, r7, #24
 800108c:	2210      	movs	r2, #16
 800108e:	4619      	mov	r1, r3
 8001090:	2003      	movs	r0, #3
 8001092:	f7ff ff1f 	bl	8000ed4 <AT24C08_Page_Write>
		break;
 8001096:	e00f      	b.n	80010b8 <EP_PIDGain_Write+0x124>
	case 4:
		AT24C08_Page_Write(4,&buf_write[0],16);
 8001098:	f107 0318 	add.w	r3, r7, #24
 800109c:	2210      	movs	r2, #16
 800109e:	4619      	mov	r1, r3
 80010a0:	2004      	movs	r0, #4
 80010a2:	f7ff ff17 	bl	8000ed4 <AT24C08_Page_Write>
		break;
 80010a6:	e007      	b.n	80010b8 <EP_PIDGain_Write+0x124>
	case 5:
		AT24C08_Page_Write(5,&buf_write[0],16);
 80010a8:	f107 0318 	add.w	r3, r7, #24
 80010ac:	2210      	movs	r2, #16
 80010ae:	4619      	mov	r1, r3
 80010b0:	2005      	movs	r0, #5
 80010b2:	f7ff ff0f 	bl	8000ed4 <AT24C08_Page_Write>
		break;
 80010b6:	bf00      	nop
	}

}
 80010b8:	bf00      	nop
 80010ba:	3730      	adds	r7, #48	@ 0x30
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <EP_PIDGain_Read>:

unsigned char EP_PIDGain_Read(unsigned char id, float* PGain, float* IGain, float* DGain )
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08c      	sub	sp, #48	@ 0x30
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	4603      	mov	r3, r0
 80010ce:	73fb      	strb	r3, [r7, #15]
	unsigned char buf_read[16];
	Parser parser;

	switch(id)
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	2b05      	cmp	r3, #5
 80010d4:	d83e      	bhi.n	8001154 <EP_PIDGain_Read+0x94>
 80010d6:	a201      	add	r2, pc, #4	@ (adr r2, 80010dc <EP_PIDGain_Read+0x1c>)
 80010d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010dc:	080010f5 	.word	0x080010f5
 80010e0:	08001105 	.word	0x08001105
 80010e4:	08001115 	.word	0x08001115
 80010e8:	08001125 	.word	0x08001125
 80010ec:	08001135 	.word	0x08001135
 80010f0:	08001145 	.word	0x08001145
	{
	case 0:
		AT24C08_Page_Read(0,&buf_read[0],16);
 80010f4:	f107 0318 	add.w	r3, r7, #24
 80010f8:	2210      	movs	r2, #16
 80010fa:	4619      	mov	r1, r3
 80010fc:	2000      	movs	r0, #0
 80010fe:	f7ff ff21 	bl	8000f44 <AT24C08_Page_Read>
		break;
 8001102:	e027      	b.n	8001154 <EP_PIDGain_Read+0x94>
	case 1:
		AT24C08_Page_Read(1,&buf_read[0],16);
 8001104:	f107 0318 	add.w	r3, r7, #24
 8001108:	2210      	movs	r2, #16
 800110a:	4619      	mov	r1, r3
 800110c:	2001      	movs	r0, #1
 800110e:	f7ff ff19 	bl	8000f44 <AT24C08_Page_Read>
		break;
 8001112:	e01f      	b.n	8001154 <EP_PIDGain_Read+0x94>
	case 2:
		AT24C08_Page_Read(2,&buf_read[0],16);
 8001114:	f107 0318 	add.w	r3, r7, #24
 8001118:	2210      	movs	r2, #16
 800111a:	4619      	mov	r1, r3
 800111c:	2002      	movs	r0, #2
 800111e:	f7ff ff11 	bl	8000f44 <AT24C08_Page_Read>
		break;
 8001122:	e017      	b.n	8001154 <EP_PIDGain_Read+0x94>
	case 3:
		AT24C08_Page_Read(3,&buf_read[0],16);
 8001124:	f107 0318 	add.w	r3, r7, #24
 8001128:	2210      	movs	r2, #16
 800112a:	4619      	mov	r1, r3
 800112c:	2003      	movs	r0, #3
 800112e:	f7ff ff09 	bl	8000f44 <AT24C08_Page_Read>
		break;
 8001132:	e00f      	b.n	8001154 <EP_PIDGain_Read+0x94>
	case 4:
		AT24C08_Page_Read(4,&buf_read[0],16);
 8001134:	f107 0318 	add.w	r3, r7, #24
 8001138:	2210      	movs	r2, #16
 800113a:	4619      	mov	r1, r3
 800113c:	2004      	movs	r0, #4
 800113e:	f7ff ff01 	bl	8000f44 <AT24C08_Page_Read>
		break;
 8001142:	e007      	b.n	8001154 <EP_PIDGain_Read+0x94>
	case 5:
		AT24C08_Page_Read(5,&buf_read[0],16);
 8001144:	f107 0318 	add.w	r3, r7, #24
 8001148:	2210      	movs	r2, #16
 800114a:	4619      	mov	r1, r3
 800114c:	2005      	movs	r0, #5
 800114e:	f7ff fef9 	bl	8000f44 <AT24C08_Page_Read>
		break;
 8001152:	bf00      	nop
	}

	unsigned char chksum = 0xff;
 8001154:	23ff      	movs	r3, #255	@ 0xff
 8001156:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for(int i=0; i<15; i++)
 800115a:	2300      	movs	r3, #0
 800115c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800115e:	e00c      	b.n	800117a <EP_PIDGain_Read+0xba>
	{
		chksum -= buf_read[i];
 8001160:	f107 0218 	add.w	r2, r7, #24
 8001164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001166:	4413      	add	r3, r2
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for(int i=0; i<15; i++)
 8001174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001176:	3301      	adds	r3, #1
 8001178:	62bb      	str	r3, [r7, #40]	@ 0x28
 800117a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800117c:	2b0e      	cmp	r3, #14
 800117e:	ddef      	ble.n	8001160 <EP_PIDGain_Read+0xa0>
	}

	if(buf_read[15] == chksum && buf_read[0] == 0x45 && buf_read[1] == 0x50)
 8001180:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001184:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001188:	429a      	cmp	r2, r3
 800118a:	d12f      	bne.n	80011ec <EP_PIDGain_Read+0x12c>
 800118c:	7e3b      	ldrb	r3, [r7, #24]
 800118e:	2b45      	cmp	r3, #69	@ 0x45
 8001190:	d12c      	bne.n	80011ec <EP_PIDGain_Read+0x12c>
 8001192:	7e7b      	ldrb	r3, [r7, #25]
 8001194:	2b50      	cmp	r3, #80	@ 0x50
 8001196:	d129      	bne.n	80011ec <EP_PIDGain_Read+0x12c>
	{
		parser.byte[0] = buf_read[3];
 8001198:	7efb      	ldrb	r3, [r7, #27]
 800119a:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[4];
 800119c:	7f3b      	ldrb	r3, [r7, #28]
 800119e:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[5];
 80011a0:	7f7b      	ldrb	r3, [r7, #29]
 80011a2:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[6];
 80011a4:	7fbb      	ldrb	r3, [r7, #30]
 80011a6:	75fb      	strb	r3, [r7, #23]
		*PGain = parser.f;
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	601a      	str	r2, [r3, #0]

		parser.byte[0] = buf_read[7];
 80011ae:	7ffb      	ldrb	r3, [r7, #31]
 80011b0:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[8];
 80011b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011b6:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[9];
 80011b8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80011bc:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[10];
 80011be:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80011c2:	75fb      	strb	r3, [r7, #23]
		*IGain = parser.f;
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	601a      	str	r2, [r3, #0]

		parser.byte[0] = buf_read[11];
 80011ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80011ce:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[12];
 80011d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80011d4:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[13];
 80011d6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80011da:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[14];
 80011dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80011e0:	75fb      	strb	r3, [r7, #23]
		*DGain = parser.f;
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	601a      	str	r2, [r3, #0]

		return 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	e000      	b.n	80011ee <EP_PIDGain_Read+0x12e>
	}
	return 1;
 80011ec:	2301      	movs	r3, #1
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3730      	adds	r7, #48	@ 0x30
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop

080011f8 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	601a      	str	r2, [r3, #0]
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f023 0210 	bic.w	r2, r3, #16
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	431a      	orrs	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	605a      	str	r2, [r3, #4]
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(const SPI_TypeDef *SPIx)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b01      	cmp	r3, #1
 8001250:	d101      	bne.n	8001256 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b02      	cmp	r3, #2
 8001276:	d101      	bne.n	800127c <LL_SPI_IsActiveFlag_TXE+0x18>
 8001278:	2301      	movs	r3, #1
 800127a:	e000      	b.n	800127e <LL_SPI_IsActiveFlag_TXE+0x1a>
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	330c      	adds	r3, #12
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	b2db      	uxtb	r3, r3
}
 800129a:	4618      	mov	r0, r3
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b085      	sub	sp, #20
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
 80012ae:	460b      	mov	r3, r1
 80012b0:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	330c      	adds	r3, #12
 80012b6:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	78fa      	ldrb	r2, [r7, #3]
 80012bc:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80012be:	bf00      	nop
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <LL_GPIO_IsInputPinSet>:
{
 80012ca:	b480      	push	{r7}
 80012cc:	b083      	sub	sp, #12
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	691a      	ldr	r2, [r3, #16]
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	4013      	ands	r3, r2
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	429a      	cmp	r2, r3
 80012e0:	bf0c      	ite	eq
 80012e2:	2301      	moveq	r3, #1
 80012e4:	2300      	movne	r3, #0
 80012e6:	b2db      	uxtb	r3, r3
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <LL_GPIO_SetOutputPin>:
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	619a      	str	r2, [r3, #24]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <LL_GPIO_ResetOutputPin>:
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	041a      	lsls	r2, r3, #16
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	619a      	str	r2, [r3, #24]
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001338:	4b08      	ldr	r3, [pc, #32]	@ (800135c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800133a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800133c:	4907      	ldr	r1, [pc, #28]	@ (800135c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4313      	orrs	r3, r2
 8001342:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001344:	4b05      	ldr	r3, [pc, #20]	@ (800135c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001346:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4013      	ands	r3, r2
 800134c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800134e:	68fb      	ldr	r3, [r7, #12]
}
 8001350:	bf00      	nop
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	40023800 	.word	0x40023800

08001360 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001368:	4b08      	ldr	r3, [pc, #32]	@ (800138c <LL_APB1_GRP1_EnableClock+0x2c>)
 800136a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800136c:	4907      	ldr	r1, [pc, #28]	@ (800138c <LL_APB1_GRP1_EnableClock+0x2c>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4313      	orrs	r3, r2
 8001372:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001374:	4b05      	ldr	r3, [pc, #20]	@ (800138c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001376:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4013      	ands	r3, r2
 800137c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800137e:	68fb      	ldr	r3, [r7, #12]
}
 8001380:	bf00      	nop
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	40023800 	.word	0x40023800

08001390 <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b090      	sub	sp, #64	@ 0x40
 8001394:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001396:	f107 0318 	add.w	r3, r7, #24
 800139a:	2228      	movs	r2, #40	@ 0x28
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f00b fc36 	bl	800cc10 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	463b      	mov	r3, r7
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]
 80013b2:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80013b4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80013b8:	f7ff ffd2 	bl	8001360 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80013bc:	2002      	movs	r0, #2
 80013be:	f7ff ffb7 	bl	8001330 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80013c2:	2004      	movs	r0, #4
 80013c4:	f7ff ffb4 	bl	8001330 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80013c8:	2001      	movs	r0, #1
 80013ca:	f7ff ffb1 	bl	8001330 <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 80013ce:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80013d2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013d4:	2302      	movs	r3, #2
 80013d6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013e0:	2300      	movs	r3, #0
 80013e2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80013e4:	2305      	movs	r3, #5
 80013e6:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e8:	463b      	mov	r3, r7
 80013ea:	4619      	mov	r1, r3
 80013ec:	4841      	ldr	r0, [pc, #260]	@ (80014f4 <BNO080_GPIO_SPI_Initialization+0x164>)
 80013ee:	f009 fda2 	bl	800af36 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80013f6:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80013fa:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80013fc:	2300      	movs	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001400:	2302      	movs	r3, #2
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001404:	2301      	movs	r3, #1
 8001406:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001408:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800140c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800140e:	2318      	movs	r3, #24
 8001410:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001412:	2300      	movs	r3, #0
 8001414:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001416:	2300      	movs	r3, #0
 8001418:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 800141a:	230a      	movs	r3, #10
 800141c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 800141e:	f107 0318 	add.w	r3, r7, #24
 8001422:	4619      	mov	r1, r3
 8001424:	4834      	ldr	r0, [pc, #208]	@ (80014f8 <BNO080_GPIO_SPI_Initialization+0x168>)
 8001426:	f009 ff64 	bl	800b2f2 <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800142a:	2100      	movs	r1, #0
 800142c:	4832      	ldr	r0, [pc, #200]	@ (80014f8 <BNO080_GPIO_SPI_Initialization+0x168>)
 800142e:	f7ff fef3 	bl	8001218 <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 8001432:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001436:	4831      	ldr	r0, [pc, #196]	@ (80014fc <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001438:	f7ff ff6a 	bl	8001310 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 800143c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001440:	482c      	ldr	r0, [pc, #176]	@ (80014f4 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001442:	f7ff ff65 	bl	8001310 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 8001446:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800144a:	482d      	ldr	r0, [pc, #180]	@ (8001500 <BNO080_GPIO_SPI_Initialization+0x170>)
 800144c:	f7ff ff60 	bl	8001310 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 8001450:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001454:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001456:	2301      	movs	r3, #1
 8001458:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 8001466:	463b      	mov	r3, r7
 8001468:	4619      	mov	r1, r3
 800146a:	4822      	ldr	r0, [pc, #136]	@ (80014f4 <BNO080_GPIO_SPI_Initialization+0x164>)
 800146c:	f009 fd63 	bl	800af36 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 8001470:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001474:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001476:	2301      	movs	r3, #1
 8001478:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 8001486:	463b      	mov	r3, r7
 8001488:	4619      	mov	r1, r3
 800148a:	481c      	ldr	r0, [pc, #112]	@ (80014fc <BNO080_GPIO_SPI_Initialization+0x16c>)
 800148c:	f009 fd53 	bl	800af36 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 8001490:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001494:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001496:	2301      	movs	r3, #1
 8001498:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 80014a6:	463b      	mov	r3, r7
 80014a8:	4619      	mov	r1, r3
 80014aa:	4815      	ldr	r0, [pc, #84]	@ (8001500 <BNO080_GPIO_SPI_Initialization+0x170>)
 80014ac:	f009 fd43 	bl	800af36 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 80014b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014b4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80014ba:	2301      	movs	r3, #1
 80014bc:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 80014be:	463b      	mov	r3, r7
 80014c0:	4619      	mov	r1, r3
 80014c2:	480e      	ldr	r0, [pc, #56]	@ (80014fc <BNO080_GPIO_SPI_Initialization+0x16c>)
 80014c4:	f009 fd37 	bl	800af36 <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 80014c8:	480b      	ldr	r0, [pc, #44]	@ (80014f8 <BNO080_GPIO_SPI_Initialization+0x168>)
 80014ca:	f7ff fe95 	bl	80011f8 <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 80014ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014d2:	4808      	ldr	r0, [pc, #32]	@ (80014f4 <BNO080_GPIO_SPI_Initialization+0x164>)
 80014d4:	f7ff ff0e 	bl	80012f4 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 80014d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014dc:	4808      	ldr	r0, [pc, #32]	@ (8001500 <BNO080_GPIO_SPI_Initialization+0x170>)
 80014de:	f7ff ff09 	bl	80012f4 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 80014e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014e6:	4805      	ldr	r0, [pc, #20]	@ (80014fc <BNO080_GPIO_SPI_Initialization+0x16c>)
 80014e8:	f7ff ff04 	bl	80012f4 <LL_GPIO_SetOutputPin>
}
 80014ec:	bf00      	nop
 80014ee:	3740      	adds	r7, #64	@ 0x40
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40020400 	.word	0x40020400
 80014f8:	40003800 	.word	0x40003800
 80014fc:	40020800 	.word	0x40020800
 8001500:	40020000 	.word	0x40020000

08001504 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 800150a:	f7ff ff41 	bl	8001390 <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 800150e:	482e      	ldr	r0, [pc, #184]	@ (80015c8 <BNO080_Initialization+0xc4>)
 8001510:	f00b fa36 	bl	800c980 <iprintf>
	
	CHIP_DESELECT(BNO080);
 8001514:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001518:	482c      	ldr	r0, [pc, #176]	@ (80015cc <BNO080_Initialization+0xc8>)
 800151a:	f7ff feeb 	bl	80012f4 <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 800151e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001522:	482b      	ldr	r0, [pc, #172]	@ (80015d0 <BNO080_Initialization+0xcc>)
 8001524:	f7ff fee6 	bl	80012f4 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 8001528:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800152c:	4829      	ldr	r0, [pc, #164]	@ (80015d4 <BNO080_Initialization+0xd0>)
 800152e:	f7ff feef 	bl	8001310 <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 8001532:	20c8      	movs	r0, #200	@ 0xc8
 8001534:	f005 fb86 	bl	8006c44 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 8001538:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800153c:	4825      	ldr	r0, [pc, #148]	@ (80015d4 <BNO080_Initialization+0xd0>)
 800153e:	f7ff fed9 	bl	80012f4 <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 8001542:	f000 fc53 	bl	8001dec <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 8001546:	f000 fc51 	bl	8001dec <BNO080_waitForSPI>
	BNO080_receivePacket();
 800154a:	f000 fc73 	bl	8001e34 <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 800154e:	f000 fc4d 	bl	8001dec <BNO080_waitForSPI>
	BNO080_receivePacket();
 8001552:	f000 fc6f 	bl	8001e34 <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8001556:	4b20      	ldr	r3, [pc, #128]	@ (80015d8 <BNO080_Initialization+0xd4>)
 8001558:	22f9      	movs	r2, #249	@ 0xf9
 800155a:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 800155c:	4b1e      	ldr	r3, [pc, #120]	@ (80015d8 <BNO080_Initialization+0xd4>)
 800155e:	2200      	movs	r2, #0
 8001560:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 8001562:	2102      	movs	r1, #2
 8001564:	2002      	movs	r0, #2
 8001566:	f000 fcd5 	bl	8001f14 <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 800156a:	f000 fc3f 	bl	8001dec <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 800156e:	f000 fc61 	bl	8001e34 <BNO080_receivePacket>
 8001572:	4603      	mov	r3, r0
 8001574:	2b01      	cmp	r3, #1
 8001576:	d11b      	bne.n	80015b0 <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 8001578:	4b18      	ldr	r3, [pc, #96]	@ (80015dc <BNO080_Initialization+0xd8>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4619      	mov	r1, r3
 800157e:	4b17      	ldr	r3, [pc, #92]	@ (80015dc <BNO080_Initialization+0xd8>)
 8001580:	785b      	ldrb	r3, [r3, #1]
 8001582:	461a      	mov	r2, r3
 8001584:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <BNO080_Initialization+0xd8>)
 8001586:	789b      	ldrb	r3, [r3, #2]
 8001588:	4618      	mov	r0, r3
 800158a:	4b14      	ldr	r3, [pc, #80]	@ (80015dc <BNO080_Initialization+0xd8>)
 800158c:	78db      	ldrb	r3, [r3, #3]
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	4603      	mov	r3, r0
 8001592:	4813      	ldr	r0, [pc, #76]	@ (80015e0 <BNO080_Initialization+0xdc>)
 8001594:	f00b f9f4 	bl	800c980 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8001598:	4b0f      	ldr	r3, [pc, #60]	@ (80015d8 <BNO080_Initialization+0xd4>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2bf8      	cmp	r3, #248	@ 0xf8
 800159e:	d107      	bne.n	80015b0 <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 80015a0:	4b0d      	ldr	r3, [pc, #52]	@ (80015d8 <BNO080_Initialization+0xd4>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	4619      	mov	r1, r3
 80015a6:	480f      	ldr	r0, [pc, #60]	@ (80015e4 <BNO080_Initialization+0xe0>)
 80015a8:	f00b f9ea 	bl	800c980 <iprintf>
			return (0);
 80015ac:	2300      	movs	r3, #0
 80015ae:	e007      	b.n	80015c0 <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 80015b0:	4b09      	ldr	r3, [pc, #36]	@ (80015d8 <BNO080_Initialization+0xd4>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	22f8      	movs	r2, #248	@ 0xf8
 80015b6:	4619      	mov	r1, r3
 80015b8:	480b      	ldr	r0, [pc, #44]	@ (80015e8 <BNO080_Initialization+0xe4>)
 80015ba:	f00b f9e1 	bl	800c980 <iprintf>
	return (1); //Something went wrong
 80015be:	2301      	movs	r3, #1
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	0800f5f0 	.word	0x0800f5f0
 80015cc:	40020400 	.word	0x40020400
 80015d0:	40020000 	.word	0x40020000
 80015d4:	40020800 	.word	0x40020800
 80015d8:	200001f8 	.word	0x200001f8
 80015dc:	200001f4 	.word	0x200001f4
 80015e0:	0800f604 	.word	0x0800f604
 80015e4:	0800f61c 	.word	0x0800f61c
 80015e8:	0800f63c 	.word	0x0800f63c

080015ec <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 80015f6:	bf00      	nop
 80015f8:	480c      	ldr	r0, [pc, #48]	@ (800162c <SPI2_SendByte+0x40>)
 80015fa:	f7ff fe33 	bl	8001264 <LL_SPI_IsActiveFlag_TXE>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0f9      	beq.n	80015f8 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	4619      	mov	r1, r3
 8001608:	4808      	ldr	r0, [pc, #32]	@ (800162c <SPI2_SendByte+0x40>)
 800160a:	f7ff fe4c 	bl	80012a6 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 800160e:	bf00      	nop
 8001610:	4806      	ldr	r0, [pc, #24]	@ (800162c <SPI2_SendByte+0x40>)
 8001612:	f7ff fe14 	bl	800123e <LL_SPI_IsActiveFlag_RXNE>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0f9      	beq.n	8001610 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 800161c:	4803      	ldr	r0, [pc, #12]	@ (800162c <SPI2_SendByte+0x40>)
 800161e:	f7ff fe34 	bl	800128a <LL_SPI_ReceiveData8>
 8001622:	4603      	mov	r3, r0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40003800 	.word	0x40003800

08001630 <BNO080_dataAvailable>:
//////////////////////////////////////////////////////////////////////////

//Updates the latest variables if possible
//Returns false if new readings are not available
int BNO080_dataAvailable(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is NULL, then we'll rely on BNO080_receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8001634:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001638:	4811      	ldr	r0, [pc, #68]	@ (8001680 <BNO080_dataAvailable+0x50>)
 800163a:	f7ff fe46 	bl	80012ca <LL_GPIO_IsInputPinSet>
 800163e:	4603      	mov	r3, r0
 8001640:	2b01      	cmp	r3, #1
 8001642:	d101      	bne.n	8001648 <BNO080_dataAvailable+0x18>
		return (0);
 8001644:	2300      	movs	r3, #0
 8001646:	e019      	b.n	800167c <BNO080_dataAvailable+0x4c>

	if (BNO080_receivePacket() == 1)
 8001648:	f000 fbf4 	bl	8001e34 <BNO080_receivePacket>
 800164c:	4603      	mov	r3, r0
 800164e:	2b01      	cmp	r3, #1
 8001650:	d113      	bne.n	800167a <BNO080_dataAvailable+0x4a>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 8001652:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <BNO080_dataAvailable+0x54>)
 8001654:	789b      	ldrb	r3, [r3, #2]
 8001656:	2b03      	cmp	r3, #3
 8001658:	d107      	bne.n	800166a <BNO080_dataAvailable+0x3a>
 800165a:	4b0b      	ldr	r3, [pc, #44]	@ (8001688 <BNO080_dataAvailable+0x58>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2bfb      	cmp	r3, #251	@ 0xfb
 8001660:	d103      	bne.n	800166a <BNO080_dataAvailable+0x3a>
		{
			BNO080_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8001662:	f000 f82f 	bl	80016c4 <BNO080_parseInputReport>
			return (1);
 8001666:	2301      	movs	r3, #1
 8001668:	e008      	b.n	800167c <BNO080_dataAvailable+0x4c>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 800166a:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <BNO080_dataAvailable+0x54>)
 800166c:	789b      	ldrb	r3, [r3, #2]
 800166e:	2b02      	cmp	r3, #2
 8001670:	d103      	bne.n	800167a <BNO080_dataAvailable+0x4a>
		{
			BNO080_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 8001672:	f000 f80b 	bl	800168c <BNO080_parseCommandReport>
			return (1);
 8001676:	2301      	movs	r3, #1
 8001678:	e000      	b.n	800167c <BNO080_dataAvailable+0x4c>
		}
	}
	return (0);
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40020800 	.word	0x40020800
 8001684:	200001f4 	.word	0x200001f4
 8001688:	200001f8 	.word	0x200001f8

0800168c <BNO080_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO080_parseCommandReport(void)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 8001692:	4b0a      	ldr	r3, [pc, #40]	@ (80016bc <BNO080_parseCommandReport+0x30>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2bf1      	cmp	r3, #241	@ 0xf1
 8001698:	d109      	bne.n	80016ae <BNO080_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 800169a:	4b08      	ldr	r3, [pc, #32]	@ (80016bc <BNO080_parseCommandReport+0x30>)
 800169c:	789b      	ldrb	r3, [r3, #2]
 800169e:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	2b07      	cmp	r3, #7
 80016a4:	d103      	bne.n	80016ae <BNO080_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 80016a6:	4b05      	ldr	r3, [pc, #20]	@ (80016bc <BNO080_parseCommandReport+0x30>)
 80016a8:	795a      	ldrb	r2, [r3, #5]
 80016aa:	4b05      	ldr	r3, [pc, #20]	@ (80016c0 <BNO080_parseCommandReport+0x34>)
 80016ac:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	200001f8 	.word	0x200001f8
 80016c0:	200002bc 	.word	0x200002bc

080016c4 <BNO080_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO080_parseInputReport(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b087      	sub	sp, #28
 80016c8:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 80016ca:	4b98      	ldr	r3, [pc, #608]	@ (800192c <BNO080_parseInputReport+0x268>)
 80016cc:	785b      	ldrb	r3, [r3, #1]
 80016ce:	021b      	lsls	r3, r3, #8
 80016d0:	b21a      	sxth	r2, r3
 80016d2:	4b96      	ldr	r3, [pc, #600]	@ (800192c <BNO080_parseInputReport+0x268>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	b21b      	sxth	r3, r3
 80016d8:	4313      	orrs	r3, r2
 80016da:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 80016dc:	8a3b      	ldrh	r3, [r7, #16]
 80016de:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80016e2:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 80016e4:	8a3b      	ldrh	r3, [r7, #16]
 80016e6:	3b04      	subs	r3, #4
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 80016ec:	4b90      	ldr	r3, [pc, #576]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 80016ee:	791b      	ldrb	r3, [r3, #4]
 80016f0:	061a      	lsls	r2, r3, #24
 80016f2:	4b8f      	ldr	r3, [pc, #572]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 80016f4:	78db      	ldrb	r3, [r3, #3]
 80016f6:	041b      	lsls	r3, r3, #16
 80016f8:	431a      	orrs	r2, r3
 80016fa:	4b8d      	ldr	r3, [pc, #564]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 80016fc:	789b      	ldrb	r3, [r3, #2]
 80016fe:	021b      	lsls	r3, r3, #8
 8001700:	4313      	orrs	r3, r2
 8001702:	4a8b      	ldr	r2, [pc, #556]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 8001704:	7852      	ldrb	r2, [r2, #1]
 8001706:	4313      	orrs	r3, r2
 8001708:	4a8a      	ldr	r2, [pc, #552]	@ (8001934 <BNO080_parseInputReport+0x270>)
 800170a:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 800170c:	4b88      	ldr	r3, [pc, #544]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 800170e:	79db      	ldrb	r3, [r3, #7]
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 8001716:	4b86      	ldr	r3, [pc, #536]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 8001718:	7a9b      	ldrb	r3, [r3, #10]
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	b21a      	sxth	r2, r3
 800171e:	4b84      	ldr	r3, [pc, #528]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 8001720:	7a5b      	ldrb	r3, [r3, #9]
 8001722:	b21b      	sxth	r3, r3
 8001724:	4313      	orrs	r3, r2
 8001726:	b21b      	sxth	r3, r3
 8001728:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 800172a:	4b81      	ldr	r3, [pc, #516]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 800172c:	7b1b      	ldrb	r3, [r3, #12]
 800172e:	021b      	lsls	r3, r3, #8
 8001730:	b21a      	sxth	r2, r3
 8001732:	4b7f      	ldr	r3, [pc, #508]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 8001734:	7adb      	ldrb	r3, [r3, #11]
 8001736:	b21b      	sxth	r3, r3
 8001738:	4313      	orrs	r3, r2
 800173a:	b21b      	sxth	r3, r3
 800173c:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 800173e:	4b7c      	ldr	r3, [pc, #496]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 8001740:	7b9b      	ldrb	r3, [r3, #14]
 8001742:	021b      	lsls	r3, r3, #8
 8001744:	b21a      	sxth	r2, r3
 8001746:	4b7a      	ldr	r3, [pc, #488]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 8001748:	7b5b      	ldrb	r3, [r3, #13]
 800174a:	b21b      	sxth	r3, r3
 800174c:	4313      	orrs	r3, r2
 800174e:	b21b      	sxth	r3, r3
 8001750:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 800175a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800175e:	2b0e      	cmp	r3, #14
 8001760:	dd09      	ble.n	8001776 <BNO080_parseInputReport+0xb2>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 8001762:	4b73      	ldr	r3, [pc, #460]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 8001764:	7c1b      	ldrb	r3, [r3, #16]
 8001766:	021b      	lsls	r3, r3, #8
 8001768:	b21a      	sxth	r2, r3
 800176a:	4b71      	ldr	r3, [pc, #452]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 800176c:	7bdb      	ldrb	r3, [r3, #15]
 800176e:	b21b      	sxth	r3, r3
 8001770:	4313      	orrs	r3, r2
 8001772:	b21b      	sxth	r3, r3
 8001774:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 8001776:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800177a:	2b10      	cmp	r3, #16
 800177c:	dd09      	ble.n	8001792 <BNO080_parseInputReport+0xce>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 800177e:	4b6c      	ldr	r3, [pc, #432]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 8001780:	7c9b      	ldrb	r3, [r3, #18]
 8001782:	021b      	lsls	r3, r3, #8
 8001784:	b21a      	sxth	r2, r3
 8001786:	4b6a      	ldr	r3, [pc, #424]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 8001788:	7c5b      	ldrb	r3, [r3, #17]
 800178a:	b21b      	sxth	r3, r3
 800178c:	4313      	orrs	r3, r2
 800178e:	b21b      	sxth	r3, r3
 8001790:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 8001792:	4b67      	ldr	r3, [pc, #412]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 8001794:	795b      	ldrb	r3, [r3, #5]
 8001796:	2b1e      	cmp	r3, #30
 8001798:	dc46      	bgt.n	8001828 <BNO080_parseInputReport+0x164>
 800179a:	2b00      	cmp	r3, #0
 800179c:	f340 80bf 	ble.w	800191e <BNO080_parseInputReport+0x25a>
 80017a0:	3b01      	subs	r3, #1
 80017a2:	2b1d      	cmp	r3, #29
 80017a4:	f200 80bb 	bhi.w	800191e <BNO080_parseInputReport+0x25a>
 80017a8:	a201      	add	r2, pc, #4	@ (adr r2, 80017b0 <BNO080_parseInputReport+0xec>)
 80017aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ae:	bf00      	nop
 80017b0:	0800182f 	.word	0x0800182f
 80017b4:	08001867 	.word	0x08001867
 80017b8:	08001883 	.word	0x08001883
 80017bc:	0800184b 	.word	0x0800184b
 80017c0:	0800189f 	.word	0x0800189f
 80017c4:	0800191f 	.word	0x0800191f
 80017c8:	0800191f 	.word	0x0800191f
 80017cc:	0800189f 	.word	0x0800189f
 80017d0:	0800191f 	.word	0x0800191f
 80017d4:	0800191f 	.word	0x0800191f
 80017d8:	0800191f 	.word	0x0800191f
 80017dc:	0800191f 	.word	0x0800191f
 80017e0:	0800191f 	.word	0x0800191f
 80017e4:	0800191f 	.word	0x0800191f
 80017e8:	0800191f 	.word	0x0800191f
 80017ec:	0800191f 	.word	0x0800191f
 80017f0:	080018c7 	.word	0x080018c7
 80017f4:	0800191f 	.word	0x0800191f
 80017f8:	080018cf 	.word	0x080018cf
 80017fc:	0800191f 	.word	0x0800191f
 8001800:	0800191f 	.word	0x0800191f
 8001804:	0800191f 	.word	0x0800191f
 8001808:	0800191f 	.word	0x0800191f
 800180c:	0800191f 	.word	0x0800191f
 8001810:	0800191f 	.word	0x0800191f
 8001814:	0800191f 	.word	0x0800191f
 8001818:	0800191f 	.word	0x0800191f
 800181c:	0800191f 	.word	0x0800191f
 8001820:	0800191f 	.word	0x0800191f
 8001824:	080018d9 	.word	0x080018d9
 8001828:	2bf1      	cmp	r3, #241	@ 0xf1
 800182a:	d06d      	beq.n	8001908 <BNO080_parseInputReport+0x244>
			//See reference manual to add additional feature reports as needed
		}
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 800182c:	e077      	b.n	800191e <BNO080_parseInputReport+0x25a>
			accelAccuracy = status;
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	b29a      	uxth	r2, r3
 8001832:	4b41      	ldr	r3, [pc, #260]	@ (8001938 <BNO080_parseInputReport+0x274>)
 8001834:	801a      	strh	r2, [r3, #0]
			rawAccelX = data1;
 8001836:	4a41      	ldr	r2, [pc, #260]	@ (800193c <BNO080_parseInputReport+0x278>)
 8001838:	89bb      	ldrh	r3, [r7, #12]
 800183a:	8013      	strh	r3, [r2, #0]
			rawAccelY = data2;
 800183c:	4a40      	ldr	r2, [pc, #256]	@ (8001940 <BNO080_parseInputReport+0x27c>)
 800183e:	897b      	ldrh	r3, [r7, #10]
 8001840:	8013      	strh	r3, [r2, #0]
			rawAccelZ = data3;
 8001842:	4a40      	ldr	r2, [pc, #256]	@ (8001944 <BNO080_parseInputReport+0x280>)
 8001844:	893b      	ldrh	r3, [r7, #8]
 8001846:	8013      	strh	r3, [r2, #0]
			break;
 8001848:	e069      	b.n	800191e <BNO080_parseInputReport+0x25a>
			accelLinAccuracy = status;
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	b29a      	uxth	r2, r3
 800184e:	4b3e      	ldr	r3, [pc, #248]	@ (8001948 <BNO080_parseInputReport+0x284>)
 8001850:	801a      	strh	r2, [r3, #0]
			rawLinAccelX = data1;
 8001852:	4a3e      	ldr	r2, [pc, #248]	@ (800194c <BNO080_parseInputReport+0x288>)
 8001854:	89bb      	ldrh	r3, [r7, #12]
 8001856:	8013      	strh	r3, [r2, #0]
			rawLinAccelY = data2;
 8001858:	4a3d      	ldr	r2, [pc, #244]	@ (8001950 <BNO080_parseInputReport+0x28c>)
 800185a:	897b      	ldrh	r3, [r7, #10]
 800185c:	8013      	strh	r3, [r2, #0]
			rawLinAccelZ = data3;
 800185e:	4a3d      	ldr	r2, [pc, #244]	@ (8001954 <BNO080_parseInputReport+0x290>)
 8001860:	893b      	ldrh	r3, [r7, #8]
 8001862:	8013      	strh	r3, [r2, #0]
			break;
 8001864:	e05b      	b.n	800191e <BNO080_parseInputReport+0x25a>
			gyroAccuracy = status;
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	b29a      	uxth	r2, r3
 800186a:	4b3b      	ldr	r3, [pc, #236]	@ (8001958 <BNO080_parseInputReport+0x294>)
 800186c:	801a      	strh	r2, [r3, #0]
			rawGyroX = data1;
 800186e:	4a3b      	ldr	r2, [pc, #236]	@ (800195c <BNO080_parseInputReport+0x298>)
 8001870:	89bb      	ldrh	r3, [r7, #12]
 8001872:	8013      	strh	r3, [r2, #0]
			rawGyroY = data2;
 8001874:	4a3a      	ldr	r2, [pc, #232]	@ (8001960 <BNO080_parseInputReport+0x29c>)
 8001876:	897b      	ldrh	r3, [r7, #10]
 8001878:	8013      	strh	r3, [r2, #0]
			rawGyroZ = data3;
 800187a:	4a3a      	ldr	r2, [pc, #232]	@ (8001964 <BNO080_parseInputReport+0x2a0>)
 800187c:	893b      	ldrh	r3, [r7, #8]
 800187e:	8013      	strh	r3, [r2, #0]
			break;
 8001880:	e04d      	b.n	800191e <BNO080_parseInputReport+0x25a>
			magAccuracy = status;
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	b29a      	uxth	r2, r3
 8001886:	4b38      	ldr	r3, [pc, #224]	@ (8001968 <BNO080_parseInputReport+0x2a4>)
 8001888:	801a      	strh	r2, [r3, #0]
			rawMagX = data1;
 800188a:	4a38      	ldr	r2, [pc, #224]	@ (800196c <BNO080_parseInputReport+0x2a8>)
 800188c:	89bb      	ldrh	r3, [r7, #12]
 800188e:	8013      	strh	r3, [r2, #0]
			rawMagY = data2;
 8001890:	4a37      	ldr	r2, [pc, #220]	@ (8001970 <BNO080_parseInputReport+0x2ac>)
 8001892:	897b      	ldrh	r3, [r7, #10]
 8001894:	8013      	strh	r3, [r2, #0]
			rawMagZ = data3;
 8001896:	4a37      	ldr	r2, [pc, #220]	@ (8001974 <BNO080_parseInputReport+0x2b0>)
 8001898:	893b      	ldrh	r3, [r7, #8]
 800189a:	8013      	strh	r3, [r2, #0]
			break;
 800189c:	e03f      	b.n	800191e <BNO080_parseInputReport+0x25a>
			quatAccuracy = status;
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	4b35      	ldr	r3, [pc, #212]	@ (8001978 <BNO080_parseInputReport+0x2b4>)
 80018a4:	801a      	strh	r2, [r3, #0]
			rawQuatI = data1;
 80018a6:	4a35      	ldr	r2, [pc, #212]	@ (800197c <BNO080_parseInputReport+0x2b8>)
 80018a8:	89bb      	ldrh	r3, [r7, #12]
 80018aa:	8013      	strh	r3, [r2, #0]
			rawQuatJ = data2;
 80018ac:	4a34      	ldr	r2, [pc, #208]	@ (8001980 <BNO080_parseInputReport+0x2bc>)
 80018ae:	897b      	ldrh	r3, [r7, #10]
 80018b0:	8013      	strh	r3, [r2, #0]
			rawQuatK = data3;
 80018b2:	4a34      	ldr	r2, [pc, #208]	@ (8001984 <BNO080_parseInputReport+0x2c0>)
 80018b4:	893b      	ldrh	r3, [r7, #8]
 80018b6:	8013      	strh	r3, [r2, #0]
			rawQuatReal = data4;
 80018b8:	4a33      	ldr	r2, [pc, #204]	@ (8001988 <BNO080_parseInputReport+0x2c4>)
 80018ba:	8afb      	ldrh	r3, [r7, #22]
 80018bc:	8013      	strh	r3, [r2, #0]
			rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 80018be:	4a33      	ldr	r2, [pc, #204]	@ (800198c <BNO080_parseInputReport+0x2c8>)
 80018c0:	8abb      	ldrh	r3, [r7, #20]
 80018c2:	8013      	strh	r3, [r2, #0]
			break;
 80018c4:	e02b      	b.n	800191e <BNO080_parseInputReport+0x25a>
			stepCount = data3; //Bytes 8/9
 80018c6:	4a32      	ldr	r2, [pc, #200]	@ (8001990 <BNO080_parseInputReport+0x2cc>)
 80018c8:	893b      	ldrh	r3, [r7, #8]
 80018ca:	8013      	strh	r3, [r2, #0]
			break;
 80018cc:	e027      	b.n	800191e <BNO080_parseInputReport+0x25a>
			stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 80018ce:	4b18      	ldr	r3, [pc, #96]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 80018d0:	7a5a      	ldrb	r2, [r3, #9]
 80018d2:	4b30      	ldr	r3, [pc, #192]	@ (8001994 <BNO080_parseInputReport+0x2d0>)
 80018d4:	701a      	strb	r2, [r3, #0]
			break;
 80018d6:	e022      	b.n	800191e <BNO080_parseInputReport+0x25a>
			activityClassifier = shtpData[5 + 5]; //Most likely state
 80018d8:	4b15      	ldr	r3, [pc, #84]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 80018da:	7a9a      	ldrb	r2, [r3, #10]
 80018dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001998 <BNO080_parseInputReport+0x2d4>)
 80018de:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 80018e0:	2300      	movs	r3, #0
 80018e2:	74fb      	strb	r3, [r7, #19]
 80018e4:	e00c      	b.n	8001900 <BNO080_parseInputReport+0x23c>
				_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 80018e6:	7cfb      	ldrb	r3, [r7, #19]
 80018e8:	f103 020b 	add.w	r2, r3, #11
 80018ec:	4b2b      	ldr	r3, [pc, #172]	@ (800199c <BNO080_parseInputReport+0x2d8>)
 80018ee:	6819      	ldr	r1, [r3, #0]
 80018f0:	7cfb      	ldrb	r3, [r7, #19]
 80018f2:	440b      	add	r3, r1
 80018f4:	490e      	ldr	r1, [pc, #56]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 80018f6:	5c8a      	ldrb	r2, [r1, r2]
 80018f8:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 80018fa:	7cfb      	ldrb	r3, [r7, #19]
 80018fc:	3301      	adds	r3, #1
 80018fe:	74fb      	strb	r3, [r7, #19]
 8001900:	7cfb      	ldrb	r3, [r7, #19]
 8001902:	2b08      	cmp	r3, #8
 8001904:	d9ef      	bls.n	80018e6 <BNO080_parseInputReport+0x222>
			break;
 8001906:	e00a      	b.n	800191e <BNO080_parseInputReport+0x25a>
			uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 8001908:	4b09      	ldr	r3, [pc, #36]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 800190a:	79db      	ldrb	r3, [r3, #7]
 800190c:	71fb      	strb	r3, [r7, #7]
			if (command == COMMAND_ME_CALIBRATE)
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	2b07      	cmp	r3, #7
 8001912:	d103      	bne.n	800191c <BNO080_parseInputReport+0x258>
				calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8001914:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 8001916:	7a9a      	ldrb	r2, [r3, #10]
 8001918:	4b21      	ldr	r3, [pc, #132]	@ (80019a0 <BNO080_parseInputReport+0x2dc>)
 800191a:	701a      	strb	r2, [r3, #0]
			break;
 800191c:	bf00      	nop
}
 800191e:	bf00      	nop
 8001920:	371c      	adds	r7, #28
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	200001f4 	.word	0x200001f4
 8001930:	200001f8 	.word	0x200001f8
 8001934:	200002b0 	.word	0x200002b0
 8001938:	20000286 	.word	0x20000286
 800193c:	20000280 	.word	0x20000280
 8001940:	20000282 	.word	0x20000282
 8001944:	20000284 	.word	0x20000284
 8001948:	2000028e 	.word	0x2000028e
 800194c:	20000288 	.word	0x20000288
 8001950:	2000028a 	.word	0x2000028a
 8001954:	2000028c 	.word	0x2000028c
 8001958:	20000296 	.word	0x20000296
 800195c:	20000290 	.word	0x20000290
 8001960:	20000292 	.word	0x20000292
 8001964:	20000294 	.word	0x20000294
 8001968:	2000029e 	.word	0x2000029e
 800196c:	20000298 	.word	0x20000298
 8001970:	2000029a 	.word	0x2000029a
 8001974:	2000029c 	.word	0x2000029c
 8001978:	200002aa 	.word	0x200002aa
 800197c:	200002a0 	.word	0x200002a0
 8001980:	200002a2 	.word	0x200002a2
 8001984:	200002a4 	.word	0x200002a4
 8001988:	200002a6 	.word	0x200002a6
 800198c:	200002a8 	.word	0x200002a8
 8001990:	200002ac 	.word	0x200002ac
 8001994:	200002b4 	.word	0x200002b4
 8001998:	200002b5 	.word	0x200002b5
 800199c:	200002b8 	.word	0x200002b8
 80019a0:	200002bc 	.word	0x200002bc

080019a4 <BNO080_getQuatI>:

//Return the rotation vector quaternion I
float BNO080_getQuatI()
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatI, rotationVector_Q1);
 80019a8:	4b07      	ldr	r3, [pc, #28]	@ (80019c8 <BNO080_getQuatI+0x24>)
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	b21b      	sxth	r3, r3
 80019ae:	4a07      	ldr	r2, [pc, #28]	@ (80019cc <BNO080_getQuatI+0x28>)
 80019b0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f000 f8bb 	bl	8001b34 <BNO080_qToFloat>
 80019be:	eef0 7a40 	vmov.f32	s15, s0
}
 80019c2:	eeb0 0a67 	vmov.f32	s0, s15
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200002a0 	.word	0x200002a0
 80019cc:	20000000 	.word	0x20000000

080019d0 <BNO080_getQuatJ>:

//Return the rotation vector quaternion J
float BNO080_getQuatJ()
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatJ, rotationVector_Q1);
 80019d4:	4b07      	ldr	r3, [pc, #28]	@ (80019f4 <BNO080_getQuatJ+0x24>)
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	b21b      	sxth	r3, r3
 80019da:	4a07      	ldr	r2, [pc, #28]	@ (80019f8 <BNO080_getQuatJ+0x28>)
 80019dc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	4611      	mov	r1, r2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 f8a5 	bl	8001b34 <BNO080_qToFloat>
 80019ea:	eef0 7a40 	vmov.f32	s15, s0
}
 80019ee:	eeb0 0a67 	vmov.f32	s0, s15
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	200002a2 	.word	0x200002a2
 80019f8:	20000000 	.word	0x20000000

080019fc <BNO080_getQuatK>:

//Return the rotation vector quaternion K
float BNO080_getQuatK()
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatK, rotationVector_Q1);
 8001a00:	4b07      	ldr	r3, [pc, #28]	@ (8001a20 <BNO080_getQuatK+0x24>)
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	b21b      	sxth	r3, r3
 8001a06:	4a07      	ldr	r2, [pc, #28]	@ (8001a24 <BNO080_getQuatK+0x28>)
 8001a08:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 f88f 	bl	8001b34 <BNO080_qToFloat>
 8001a16:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	200002a4 	.word	0x200002a4
 8001a24:	20000000 	.word	0x20000000

08001a28 <BNO080_getQuatReal>:

//Return the rotation vector quaternion Real
float BNO080_getQuatReal()
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatReal, rotationVector_Q1);
 8001a2c:	4b07      	ldr	r3, [pc, #28]	@ (8001a4c <BNO080_getQuatReal+0x24>)
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	b21b      	sxth	r3, r3
 8001a32:	4a07      	ldr	r2, [pc, #28]	@ (8001a50 <BNO080_getQuatReal+0x28>)
 8001a34:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f000 f879 	bl	8001b34 <BNO080_qToFloat>
 8001a42:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a46:	eeb0 0a67 	vmov.f32	s0, s15
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	200002a6 	.word	0x200002a6
 8001a50:	20000000 	.word	0x20000000

08001a54 <BNO080_getQuatRadianAccuracy>:

//Return the rotation vector accuracy
float BNO080_getQuatRadianAccuracy()
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
 8001a58:	4b07      	ldr	r3, [pc, #28]	@ (8001a78 <BNO080_getQuatRadianAccuracy+0x24>)
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	b21b      	sxth	r3, r3
 8001a5e:	4a07      	ldr	r2, [pc, #28]	@ (8001a7c <BNO080_getQuatRadianAccuracy+0x28>)
 8001a60:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	4611      	mov	r1, r2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f000 f863 	bl	8001b34 <BNO080_qToFloat>
 8001a6e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a72:	eeb0 0a67 	vmov.f32	s0, s15
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	200002a8 	.word	0x200002a8
 8001a7c:	20000000 	.word	0x20000000

08001a80 <BNO080_getQuatAccuracy>:

//Return the acceleration component
uint8_t BNO080_getQuatAccuracy()
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
	return (quatAccuracy);
 8001a84:	4b03      	ldr	r3, [pc, #12]	@ (8001a94 <BNO080_getQuatAccuracy+0x14>)
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	b2db      	uxtb	r3, r3
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	200002aa 	.word	0x200002aa

08001a98 <BNO080_getMagX>:
	return (gyroAccuracy);
}

//Return the magnetometer component
float BNO080_getMagX()
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagX, magnetometer_Q1);
 8001a9c:	4b07      	ldr	r3, [pc, #28]	@ (8001abc <BNO080_getMagX+0x24>)
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	4a07      	ldr	r2, [pc, #28]	@ (8001ac0 <BNO080_getMagX+0x28>)
 8001aa4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	4611      	mov	r1, r2
 8001aac:	4618      	mov	r0, r3
 8001aae:	f000 f841 	bl	8001b34 <BNO080_qToFloat>
 8001ab2:	eef0 7a40 	vmov.f32	s15, s0
}
 8001ab6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000298 	.word	0x20000298
 8001ac0:	20000002 	.word	0x20000002

08001ac4 <BNO080_getMagY>:

//Return the magnetometer component
float BNO080_getMagY()
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagY, magnetometer_Q1);
 8001ac8:	4b07      	ldr	r3, [pc, #28]	@ (8001ae8 <BNO080_getMagY+0x24>)
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	b21b      	sxth	r3, r3
 8001ace:	4a07      	ldr	r2, [pc, #28]	@ (8001aec <BNO080_getMagY+0x28>)
 8001ad0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f000 f82b 	bl	8001b34 <BNO080_qToFloat>
 8001ade:	eef0 7a40 	vmov.f32	s15, s0
}
 8001ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	2000029a 	.word	0x2000029a
 8001aec:	20000002 	.word	0x20000002

08001af0 <BNO080_getMagZ>:

//Return the magnetometer component
float BNO080_getMagZ()
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagZ, magnetometer_Q1);
 8001af4:	4b07      	ldr	r3, [pc, #28]	@ (8001b14 <BNO080_getMagZ+0x24>)
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	b21b      	sxth	r3, r3
 8001afa:	4a07      	ldr	r2, [pc, #28]	@ (8001b18 <BNO080_getMagZ+0x28>)
 8001afc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	4611      	mov	r1, r2
 8001b04:	4618      	mov	r0, r3
 8001b06:	f000 f815 	bl	8001b34 <BNO080_qToFloat>
 8001b0a:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	2000029c 	.word	0x2000029c
 8001b18:	20000002 	.word	0x20000002

08001b1c <BNO080_getMagAccuracy>:

//Return the mag component
uint8_t BNO080_getMagAccuracy()
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
	return (magAccuracy);
 8001b20:	4b03      	ldr	r3, [pc, #12]	@ (8001b30 <BNO080_getMagAccuracy+0x14>)
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	b2db      	uxtb	r3, r3
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	2000029e 	.word	0x2000029e

08001b34 <BNO080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	ed2d 8b02 	vpush	{d8}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	460a      	mov	r2, r1
 8001b42:	80fb      	strh	r3, [r7, #6]
 8001b44:	4613      	mov	r3, r2
 8001b46:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 8001b48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b4c:	ee07 3a90 	vmov	s15, r3
 8001b50:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001b54:	797b      	ldrb	r3, [r7, #5]
 8001b56:	425b      	negs	r3, r3
 8001b58:	ee07 3a90 	vmov	s15, r3
 8001b5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b60:	eef0 0a67 	vmov.f32	s1, s15
 8001b64:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001b68:	f00c ff0e 	bl	800e988 <powf>
 8001b6c:	eef0 7a40 	vmov.f32	s15, s0
 8001b70:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8001b74:	eeb0 0a67 	vmov.f32	s0, s15
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	ecbd 8b02 	vpop	{d8}
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <BNO080_enableRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	4603      	mov	r3, r0
 8001b8a:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 8001b8c:	88fb      	ldrh	r3, [r7, #6]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	4619      	mov	r1, r3
 8001b92:	2005      	movs	r0, #5
 8001b94:	f000 f83a 	bl	8001c0c <BNO080_setFeatureCommand>
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <BNO080_enableGameRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableGameRotationVector(uint16_t timeBetweenReports)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_GAME_ROTATION_VECTOR, timeBetweenReports, 0);
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	2200      	movs	r2, #0
 8001bae:	4619      	mov	r1, r3
 8001bb0:	2008      	movs	r0, #8
 8001bb2:	f000 f82b 	bl	8001c0c <BNO080_setFeatureCommand>
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <BNO080_enableMagnetometer>:
	BNO080_setFeatureCommand(SENSOR_REPORTID_GYROSCOPE, timeBetweenReports, 0);
}

//Sends the packet to enable the magnetometer
void BNO080_enableMagnetometer(uint16_t timeBetweenReports)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_MAGNETIC_FIELD, timeBetweenReports, 0);
 8001bc8:	88fb      	ldrh	r3, [r7, #6]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	4619      	mov	r1, r3
 8001bce:	2003      	movs	r0, #3
 8001bd0:	f000 f81c 	bl	8001c0c <BNO080_setFeatureCommand>
}
 8001bd4:	bf00      	nop
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <BNO080_calibrateAll>:
	BNO080_sendCalibrateCommand(CALIBRATE_PLANAR_ACCEL);
}

//See 2.2 of the Calibration Procedure document 1000-4044
void BNO080_calibrateAll()
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
	BNO080_sendCalibrateCommand(CALIBRATE_ACCEL_GYRO_MAG);
 8001be0:	2004      	movs	r0, #4
 8001be2:	f000 f885 	bl	8001cf0 <BNO080_sendCalibrateCommand>
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <BNO080_calibrationComplete>:
}

//See page 51 of reference manual - ME Calibration Response
//Byte 5 is parsed during the readPacket and stored in calibrationStatus
int BNO080_calibrationComplete()
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
	if (calibrationStatus == 0)
 8001bf0:	4b05      	ldr	r3, [pc, #20]	@ (8001c08 <BNO080_calibrationComplete+0x1c>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <BNO080_calibrationComplete+0x10>
		return (1);
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e000      	b.n	8001bfe <BNO080_calibrationComplete+0x12>
	return (0);
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	200002bc 	.word	0x200002bc

08001c0c <BNO080_setFeatureCommand>:

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
 8001c18:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8001c1a:	4b24      	ldr	r3, [pc, #144]	@ (8001cac <BNO080_setFeatureCommand+0xa0>)
 8001c1c:	22fd      	movs	r2, #253	@ 0xfd
 8001c1e:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8001c20:	4a22      	ldr	r2, [pc, #136]	@ (8001cac <BNO080_setFeatureCommand+0xa0>)
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 8001c26:	4b21      	ldr	r3, [pc, #132]	@ (8001cac <BNO080_setFeatureCommand+0xa0>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 8001c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001cac <BNO080_setFeatureCommand+0xa0>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8001c32:	4b1e      	ldr	r3, [pc, #120]	@ (8001cac <BNO080_setFeatureCommand+0xa0>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cac <BNO080_setFeatureCommand+0xa0>)
 8001c3e:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	0a1b      	lsrs	r3, r3, #8
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	4b19      	ldr	r3, [pc, #100]	@ (8001cac <BNO080_setFeatureCommand+0xa0>)
 8001c48:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	0c1b      	lsrs	r3, r3, #16
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	4b16      	ldr	r3, [pc, #88]	@ (8001cac <BNO080_setFeatureCommand+0xa0>)
 8001c52:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	0e1b      	lsrs	r3, r3, #24
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4b14      	ldr	r3, [pc, #80]	@ (8001cac <BNO080_setFeatureCommand+0xa0>)
 8001c5c:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 8001c5e:	4b13      	ldr	r3, [pc, #76]	@ (8001cac <BNO080_setFeatureCommand+0xa0>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8001c64:	4b11      	ldr	r3, [pc, #68]	@ (8001cac <BNO080_setFeatureCommand+0xa0>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 8001c6a:	4b10      	ldr	r3, [pc, #64]	@ (8001cac <BNO080_setFeatureCommand+0xa0>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8001c70:	4b0e      	ldr	r3, [pc, #56]	@ (8001cac <BNO080_setFeatureCommand+0xa0>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001cac <BNO080_setFeatureCommand+0xa0>)
 8001c7c:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	0a1b      	lsrs	r3, r3, #8
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	4b09      	ldr	r3, [pc, #36]	@ (8001cac <BNO080_setFeatureCommand+0xa0>)
 8001c86:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	0c1b      	lsrs	r3, r3, #16
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	4b07      	ldr	r3, [pc, #28]	@ (8001cac <BNO080_setFeatureCommand+0xa0>)
 8001c90:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	0e1b      	lsrs	r3, r3, #24
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	4b04      	ldr	r3, [pc, #16]	@ (8001cac <BNO080_setFeatureCommand+0xa0>)
 8001c9a:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8001c9c:	2111      	movs	r1, #17
 8001c9e:	2002      	movs	r0, #2
 8001ca0:	f000 f938 	bl	8001f14 <BNO080_sendPacket>
}
 8001ca4:	bf00      	nop
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	200001f8 	.word	0x200001f8

08001cb0 <BNO080_sendCommand>:

//Tell the sensor to do a command
//See 6.3.8 page 41, Command request
//The caller is expected to set P0 through P8 prior to calling
void BNO080_sendCommand(uint8_t command)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
	shtpData[0] = SHTP_REPORT_COMMAND_REQUEST; //Command Request
 8001cba:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce8 <BNO080_sendCommand+0x38>)
 8001cbc:	22f2      	movs	r2, #242	@ 0xf2
 8001cbe:	701a      	strb	r2, [r3, #0]
	shtpData[1] = commandSequenceNumber++;	 //Increments automatically each function call
 8001cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8001cec <BNO080_sendCommand+0x3c>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	b2d1      	uxtb	r1, r2
 8001cc8:	4a08      	ldr	r2, [pc, #32]	@ (8001cec <BNO080_sendCommand+0x3c>)
 8001cca:	7011      	strb	r1, [r2, #0]
 8001ccc:	4a06      	ldr	r2, [pc, #24]	@ (8001ce8 <BNO080_sendCommand+0x38>)
 8001cce:	7053      	strb	r3, [r2, #1]
	shtpData[2] = command;					   //Command
 8001cd0:	4a05      	ldr	r2, [pc, #20]	@ (8001ce8 <BNO080_sendCommand+0x38>)
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	7093      	strb	r3, [r2, #2]
	shtpData[9] = 0;
	shtpData[10] = 0;
	shtpData[11] = 0;*/

	//Transmit packet on channel 2, 12 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 12);
 8001cd6:	210c      	movs	r1, #12
 8001cd8:	2002      	movs	r0, #2
 8001cda:	f000 f91b 	bl	8001f14 <BNO080_sendPacket>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200001f8 	.word	0x200001f8
 8001cec:	2000027e 	.word	0x2000027e

08001cf0 <BNO080_sendCalibrateCommand>:

//This tells the BNO080 to begin calibrating
//See page 50 of reference manual and the 1000-4044 calibration doc
void BNO080_sendCalibrateCommand(uint8_t thingToCalibrate)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	71fb      	strb	r3, [r7, #7]
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	73fb      	strb	r3, [r7, #15]
 8001cfe:	e006      	b.n	8001d0e <BNO080_sendCalibrateCommand+0x1e>
		shtpData[x] = 0;
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
 8001d02:	4a1d      	ldr	r2, [pc, #116]	@ (8001d78 <BNO080_sendCalibrateCommand+0x88>)
 8001d04:	2100      	movs	r1, #0
 8001d06:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	73fb      	strb	r3, [r7, #15]
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
 8001d10:	2b0b      	cmp	r3, #11
 8001d12:	d9f5      	bls.n	8001d00 <BNO080_sendCalibrateCommand+0x10>

	if (thingToCalibrate == CALIBRATE_ACCEL)
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d103      	bne.n	8001d22 <BNO080_sendCalibrateCommand+0x32>
		shtpData[3] = 1;
 8001d1a:	4b17      	ldr	r3, [pc, #92]	@ (8001d78 <BNO080_sendCalibrateCommand+0x88>)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	70da      	strb	r2, [r3, #3]
 8001d20:	e020      	b.n	8001d64 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_GYRO)
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d103      	bne.n	8001d30 <BNO080_sendCalibrateCommand+0x40>
		shtpData[4] = 1;
 8001d28:	4b13      	ldr	r3, [pc, #76]	@ (8001d78 <BNO080_sendCalibrateCommand+0x88>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	711a      	strb	r2, [r3, #4]
 8001d2e:	e019      	b.n	8001d64 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_MAG)
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d103      	bne.n	8001d3e <BNO080_sendCalibrateCommand+0x4e>
		shtpData[5] = 1;
 8001d36:	4b10      	ldr	r3, [pc, #64]	@ (8001d78 <BNO080_sendCalibrateCommand+0x88>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	715a      	strb	r2, [r3, #5]
 8001d3c:	e012      	b.n	8001d64 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_PLANAR_ACCEL)
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	2b03      	cmp	r3, #3
 8001d42:	d103      	bne.n	8001d4c <BNO080_sendCalibrateCommand+0x5c>
		shtpData[7] = 1;
 8001d44:	4b0c      	ldr	r3, [pc, #48]	@ (8001d78 <BNO080_sendCalibrateCommand+0x88>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	71da      	strb	r2, [r3, #7]
 8001d4a:	e00b      	b.n	8001d64 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_ACCEL_GYRO_MAG)
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d108      	bne.n	8001d64 <BNO080_sendCalibrateCommand+0x74>
	{
		shtpData[3] = 1;
 8001d52:	4b09      	ldr	r3, [pc, #36]	@ (8001d78 <BNO080_sendCalibrateCommand+0x88>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	70da      	strb	r2, [r3, #3]
		shtpData[4] = 1;
 8001d58:	4b07      	ldr	r3, [pc, #28]	@ (8001d78 <BNO080_sendCalibrateCommand+0x88>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	711a      	strb	r2, [r3, #4]
		shtpData[5] = 1;
 8001d5e:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <BNO080_sendCalibrateCommand+0x88>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	715a      	strb	r2, [r3, #5]
	}
	else if (thingToCalibrate == CALIBRATE_STOP)
		; //Do nothing, bytes are set to zero

	//Make the internal calStatus variable non-zero (operation failed) so that user can test while we wait
	calibrationStatus = 1;
 8001d64:	4b05      	ldr	r3, [pc, #20]	@ (8001d7c <BNO080_sendCalibrateCommand+0x8c>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	701a      	strb	r2, [r3, #0]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 8001d6a:	2007      	movs	r0, #7
 8001d6c:	f7ff ffa0 	bl	8001cb0 <BNO080_sendCommand>
}
 8001d70:	bf00      	nop
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	200001f8 	.word	0x200001f8
 8001d7c:	200002bc 	.word	0x200002bc

08001d80 <BNO080_requestCalibrationStatus>:

//Request ME Calibration Status from BNO080
//See page 51 of reference manual
void BNO080_requestCalibrationStatus()
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001d86:	2303      	movs	r3, #3
 8001d88:	71fb      	strb	r3, [r7, #7]
 8001d8a:	e006      	b.n	8001d9a <BNO080_requestCalibrationStatus+0x1a>
		shtpData[x] = 0;
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	4a09      	ldr	r2, [pc, #36]	@ (8001db4 <BNO080_requestCalibrationStatus+0x34>)
 8001d90:	2100      	movs	r1, #0
 8001d92:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	3301      	adds	r3, #1
 8001d98:	71fb      	strb	r3, [r7, #7]
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	2b0b      	cmp	r3, #11
 8001d9e:	d9f5      	bls.n	8001d8c <BNO080_requestCalibrationStatus+0xc>

	shtpData[6] = 0x01; //P3 - 0x01 - Subcommand: Get ME Calibration
 8001da0:	4b04      	ldr	r3, [pc, #16]	@ (8001db4 <BNO080_requestCalibrationStatus+0x34>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	719a      	strb	r2, [r3, #6]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 8001da6:	2007      	movs	r0, #7
 8001da8:	f7ff ff82 	bl	8001cb0 <BNO080_sendCommand>
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	200001f8 	.word	0x200001f8

08001db8 <BNO080_saveCalibration>:

//This tells the BNO080 to save the Dynamic Calibration Data (DCD) to flash
//See page 49 of reference manual and the 1000-4044 calibration doc
void BNO080_saveCalibration()
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	71fb      	strb	r3, [r7, #7]
 8001dc2:	e006      	b.n	8001dd2 <BNO080_saveCalibration+0x1a>
		shtpData[x] = 0;
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	4a08      	ldr	r2, [pc, #32]	@ (8001de8 <BNO080_saveCalibration+0x30>)
 8001dc8:	2100      	movs	r1, #0
 8001dca:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	71fb      	strb	r3, [r7, #7]
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	2b0b      	cmp	r3, #11
 8001dd6:	d9f5      	bls.n	8001dc4 <BNO080_saveCalibration+0xc>

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_DCD); //Save DCD command
 8001dd8:	2006      	movs	r0, #6
 8001dda:	f7ff ff69 	bl	8001cb0 <BNO080_sendCommand>
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200001f8 	.word	0x200001f8

08001dec <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001df2:	2300      	movs	r3, #0
 8001df4:	607b      	str	r3, [r7, #4]
 8001df6:	e00c      	b.n	8001e12 <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 8001df8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dfc:	480b      	ldr	r0, [pc, #44]	@ (8001e2c <BNO080_waitForSPI+0x40>)
 8001dfe:	f7ff fa64 	bl	80012ca <LL_GPIO_IsInputPinSet>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e00a      	b.n	8001e22 <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	607b      	str	r3, [r7, #4]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e18:	d1ee      	bne.n	8001df8 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 8001e1a:	4805      	ldr	r0, [pc, #20]	@ (8001e30 <BNO080_waitForSPI+0x44>)
 8001e1c:	f00a fe18 	bl	800ca50 <puts>
	return (0);
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40020800 	.word	0x40020800
 8001e30:	0800f688 	.word	0x0800f688

08001e34 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8001e3a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e3e:	4831      	ldr	r0, [pc, #196]	@ (8001f04 <BNO080_receivePacket+0xd0>)
 8001e40:	f7ff fa43 	bl	80012ca <LL_GPIO_IsInputPinSet>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e056      	b.n	8001efc <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 8001e4e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e52:	482d      	ldr	r0, [pc, #180]	@ (8001f08 <BNO080_receivePacket+0xd4>)
 8001e54:	f7ff fa5c 	bl	8001310 <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f7ff fbc7 	bl	80015ec <SPI2_SendByte>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 8001e62:	2000      	movs	r0, #0
 8001e64:	f7ff fbc2 	bl	80015ec <SPI2_SendByte>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f7ff fbbd 	bl	80015ec <SPI2_SendByte>
 8001e72:	4603      	mov	r3, r0
 8001e74:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 8001e76:	2000      	movs	r0, #0
 8001e78:	f7ff fbb8 	bl	80015ec <SPI2_SendByte>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8001e80:	4a22      	ldr	r2, [pc, #136]	@ (8001f0c <BNO080_receivePacket+0xd8>)
 8001e82:	7b7b      	ldrb	r3, [r7, #13]
 8001e84:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 8001e86:	4a21      	ldr	r2, [pc, #132]	@ (8001f0c <BNO080_receivePacket+0xd8>)
 8001e88:	7b3b      	ldrb	r3, [r7, #12]
 8001e8a:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8001e8c:	4a1f      	ldr	r2, [pc, #124]	@ (8001f0c <BNO080_receivePacket+0xd8>)
 8001e8e:	7afb      	ldrb	r3, [r7, #11]
 8001e90:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 8001e92:	4a1e      	ldr	r2, [pc, #120]	@ (8001f0c <BNO080_receivePacket+0xd8>)
 8001e94:	7abb      	ldrb	r3, [r7, #10]
 8001e96:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8001e98:	7b3b      	ldrb	r3, [r7, #12]
 8001e9a:	021b      	lsls	r3, r3, #8
 8001e9c:	b21a      	sxth	r2, r3
 8001e9e:	7b7b      	ldrb	r3, [r7, #13]
 8001ea0:	b21b      	sxth	r3, r3
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8001ea6:	893b      	ldrh	r3, [r7, #8]
 8001ea8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001eac:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8001eae:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	e020      	b.n	8001efc <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8001eba:	893b      	ldrh	r3, [r7, #8]
 8001ebc:	3b04      	subs	r3, #4
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	81fb      	strh	r3, [r7, #14]
 8001ec6:	e00e      	b.n	8001ee6 <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 8001ec8:	20ff      	movs	r0, #255	@ 0xff
 8001eca:	f7ff fb8f 	bl	80015ec <SPI2_SendByte>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8001ed2:	89fb      	ldrh	r3, [r7, #14]
 8001ed4:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ed6:	d803      	bhi.n	8001ee0 <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001ed8:	89fb      	ldrh	r3, [r7, #14]
 8001eda:	490d      	ldr	r1, [pc, #52]	@ (8001f10 <BNO080_receivePacket+0xdc>)
 8001edc:	79fa      	ldrb	r2, [r7, #7]
 8001ede:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001ee0:	89fb      	ldrh	r3, [r7, #14]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	81fb      	strh	r3, [r7, #14]
 8001ee6:	89fa      	ldrh	r2, [r7, #14]
 8001ee8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	dbeb      	blt.n	8001ec8 <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8001ef0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ef4:	4804      	ldr	r0, [pc, #16]	@ (8001f08 <BNO080_receivePacket+0xd4>)
 8001ef6:	f7ff f9fd 	bl	80012f4 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 8001efa:	2301      	movs	r3, #1
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40020800 	.word	0x40020800
 8001f08:	40020400 	.word	0x40020400
 8001f0c:	200001f4 	.word	0x200001f4
 8001f10:	200001f8 	.word	0x200001f8

08001f14 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	460a      	mov	r2, r1
 8001f1e:	71fb      	strb	r3, [r7, #7]
 8001f20:	4613      	mov	r3, r2
 8001f22:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8001f24:	79bb      	ldrb	r3, [r7, #6]
 8001f26:	3304      	adds	r3, #4
 8001f28:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 8001f2a:	f7ff ff5f 	bl	8001dec <BNO080_waitForSPI>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 8001f34:	2300      	movs	r3, #0
 8001f36:	e032      	b.n	8001f9e <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 8001f38:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f3c:	481a      	ldr	r0, [pc, #104]	@ (8001fa8 <BNO080_sendPacket+0x94>)
 8001f3e:	f7ff f9e7 	bl	8001310 <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 8001f42:	7bbb      	ldrb	r3, [r7, #14]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff fb51 	bl	80015ec <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 8001f4a:	7bbb      	ldrb	r3, [r7, #14]
 8001f4c:	121b      	asrs	r3, r3, #8
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fb4b 	bl	80015ec <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff fb47 	bl	80015ec <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	4a12      	ldr	r2, [pc, #72]	@ (8001fac <BNO080_sendPacket+0x98>)
 8001f62:	5cd2      	ldrb	r2, [r2, r3]
 8001f64:	1c51      	adds	r1, r2, #1
 8001f66:	b2c8      	uxtb	r0, r1
 8001f68:	4910      	ldr	r1, [pc, #64]	@ (8001fac <BNO080_sendPacket+0x98>)
 8001f6a:	54c8      	strb	r0, [r1, r3]
 8001f6c:	4610      	mov	r0, r2
 8001f6e:	f7ff fb3d 	bl	80015ec <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 8001f72:	2300      	movs	r3, #0
 8001f74:	73fb      	strb	r3, [r7, #15]
 8001f76:	e008      	b.n	8001f8a <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
 8001f7a:	4a0d      	ldr	r2, [pc, #52]	@ (8001fb0 <BNO080_sendPacket+0x9c>)
 8001f7c:	5cd3      	ldrb	r3, [r2, r3]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff fb34 	bl	80015ec <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
 8001f86:	3301      	adds	r3, #1
 8001f88:	73fb      	strb	r3, [r7, #15]
 8001f8a:	7bfa      	ldrb	r2, [r7, #15]
 8001f8c:	79bb      	ldrb	r3, [r7, #6]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d3f2      	bcc.n	8001f78 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 8001f92:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f96:	4804      	ldr	r0, [pc, #16]	@ (8001fa8 <BNO080_sendPacket+0x94>)
 8001f98:	f7ff f9ac 	bl	80012f4 <LL_GPIO_SetOutputPin>

	return (1);
 8001f9c:	2301      	movs	r3, #1
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40020400 	.word	0x40020400
 8001fac:	20000278 	.word	0x20000278
 8001fb0:	200001f8 	.word	0x200001f8

08001fb4 <iBus_Check_CHKSUM>:
#include "FS-IA6B.h"

FSiA6B_iBus iBus;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 8001fc0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001fc4:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i< len-2; i++)
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	e00a      	b.n	8001fe2 <iBus_Check_CHKSUM+0x2e>
	{
		chksum = chksum - data[i];
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	89fb      	ldrh	r3, [r7, #14]
 8001fd8:	1a9b      	subs	r3, r3, r2
 8001fda:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i< len-2; i++)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	78fb      	ldrb	r3, [r7, #3]
 8001fe4:	3b02      	subs	r3, #2
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	dbef      	blt.n	8001fcc <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff)==data[30]) && ((chksum>>8)==data[31]);
 8001fec:	89fb      	ldrh	r3, [r7, #14]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	321e      	adds	r2, #30
 8001ff4:	7812      	ldrb	r2, [r2, #0]
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d109      	bne.n	800200e <iBus_Check_CHKSUM+0x5a>
 8001ffa:	89fb      	ldrh	r3, [r7, #14]
 8001ffc:	0a1b      	lsrs	r3, r3, #8
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	321f      	adds	r2, #31
 8002004:	7812      	ldrb	r2, [r2, #0]
 8002006:	4293      	cmp	r3, r2
 8002008:	d101      	bne.n	800200e <iBus_Check_CHKSUM+0x5a>
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <iBus_Check_CHKSUM+0x5c>
 800200e:	2300      	movs	r3, #0
 8002010:	b2db      	uxtb	r3, r3
}
 8002012:	4618      	mov	r0, r3
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	6039      	str	r1, [r7, #0]
	iBus->RH =  (data[2]  | data[3]<<8)  & 0x0fff; // 하위 12비트만 사용
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3302      	adds	r3, #2
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	b21a      	sxth	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3303      	adds	r3, #3
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	021b      	lsls	r3, r3, #8
 8002038:	b21b      	sxth	r3, r3
 800203a:	4313      	orrs	r3, r2
 800203c:	b21b      	sxth	r3, r3
 800203e:	b29b      	uxth	r3, r3
 8002040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002044:	b29a      	uxth	r2, r3
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	801a      	strh	r2, [r3, #0]
	iBus->RV =  (data[4]  | data[5]<<8)  & 0x0fff;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	3304      	adds	r3, #4
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	b21a      	sxth	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	3305      	adds	r3, #5
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	021b      	lsls	r3, r3, #8
 800205a:	b21b      	sxth	r3, r3
 800205c:	4313      	orrs	r3, r2
 800205e:	b21b      	sxth	r3, r3
 8002060:	b29b      	uxth	r3, r3
 8002062:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002066:	b29a      	uxth	r2, r3
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	805a      	strh	r2, [r3, #2]
	iBus->LV =  (data[6]  | data[7]<<8)  & 0x0fff;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3306      	adds	r3, #6
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	b21a      	sxth	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3307      	adds	r3, #7
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	021b      	lsls	r3, r3, #8
 800207c:	b21b      	sxth	r3, r3
 800207e:	4313      	orrs	r3, r2
 8002080:	b21b      	sxth	r3, r3
 8002082:	b29b      	uxth	r3, r3
 8002084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002088:	b29a      	uxth	r2, r3
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	809a      	strh	r2, [r3, #4]
	iBus->LH =  (data[8]  | data[9]<<8)  & 0x0fff;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3308      	adds	r3, #8
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	b21a      	sxth	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3309      	adds	r3, #9
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	021b      	lsls	r3, r3, #8
 800209e:	b21b      	sxth	r3, r3
 80020a0:	4313      	orrs	r3, r2
 80020a2:	b21b      	sxth	r3, r3
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0fff;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	330a      	adds	r3, #10
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	b21a      	sxth	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	330b      	adds	r3, #11
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	021b      	lsls	r3, r3, #8
 80020c0:	b21b      	sxth	r3, r3
 80020c2:	4313      	orrs	r3, r2
 80020c4:	b21b      	sxth	r3, r3
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	811a      	strh	r2, [r3, #8]
	iBus->SwC = (data[12] | data[13]<<8) & 0x0fff;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	330c      	adds	r3, #12
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	b21a      	sxth	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	330d      	adds	r3, #13
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	021b      	lsls	r3, r3, #8
 80020e2:	b21b      	sxth	r3, r3
 80020e4:	4313      	orrs	r3, r2
 80020e6:	b21b      	sxth	r3, r3
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	819a      	strh	r2, [r3, #12]

	iBus->FailSafe = data[13] >> 4;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	330d      	adds	r3, #13
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	091b      	lsrs	r3, r3, #4
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	751a      	strb	r2, [r3, #20]
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <iBus_isActiveFailsafe>:

unsigned char iBus_isActiveFailsafe(FSiA6B_iBus* iBus)
{
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
	return iBus->FailSafe != 0;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	7d1b      	ldrb	r3, [r3, #20]
 800211a:	2b00      	cmp	r3, #0
 800211c:	bf14      	ite	ne
 800211e:	2301      	movne	r3, #1
 8002120:	2300      	moveq	r3, #0
 8002122:	b2db      	uxtb	r3, r3
}
 8002124:	4618      	mov	r0, r3
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <LL_SPI_Enable>:
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	601a      	str	r2, [r3, #0]
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <LL_SPI_SetStandard>:
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f023 0210 	bic.w	r2, r3, #16
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	605a      	str	r2, [r3, #4]
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <LL_SPI_IsActiveFlag_RXNE>:
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b01      	cmp	r3, #1
 8002188:	d101      	bne.n	800218e <LL_SPI_IsActiveFlag_RXNE+0x18>
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <LL_SPI_IsActiveFlag_TXE>:
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d101      	bne.n	80021b4 <LL_SPI_IsActiveFlag_TXE+0x18>
 80021b0:	2301      	movs	r3, #1
 80021b2:	e000      	b.n	80021b6 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <LL_SPI_ReceiveData8>:
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	330c      	adds	r3, #12
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	b2db      	uxtb	r3, r3
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <LL_SPI_TransmitData8>:
{
 80021de:	b480      	push	{r7}
 80021e0:	b085      	sub	sp, #20
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	460b      	mov	r3, r1
 80021e8:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	330c      	adds	r3, #12
 80021ee:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	78fa      	ldrb	r2, [r7, #3]
 80021f4:	701a      	strb	r2, [r3, #0]
}
 80021f6:	bf00      	nop
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <LL_GPIO_IsInputPinSet>:
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	4013      	ands	r3, r2
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	bf0c      	ite	eq
 800221a:	2301      	moveq	r3, #1
 800221c:	2300      	movne	r3, #0
 800221e:	b2db      	uxtb	r3, r3
}
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_GPIO_SetOutputPin>:
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	619a      	str	r2, [r3, #24]
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <LL_GPIO_ResetOutputPin>:
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	041a      	lsls	r2, r3, #16
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	619a      	str	r2, [r3, #24]
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
	...

08002268 <LL_AHB1_GRP1_EnableClock>:
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002270:	4b08      	ldr	r3, [pc, #32]	@ (8002294 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002272:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002274:	4907      	ldr	r1, [pc, #28]	@ (8002294 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4313      	orrs	r3, r2
 800227a:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800227c:	4b05      	ldr	r3, [pc, #20]	@ (8002294 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800227e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4013      	ands	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002286:	68fb      	ldr	r3, [r7, #12]
}
 8002288:	bf00      	nop
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	40023800 	.word	0x40023800

08002298 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80022a0:	4b08      	ldr	r3, [pc, #32]	@ (80022c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80022a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80022a4:	4907      	ldr	r1, [pc, #28]	@ (80022c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80022ac:	4b05      	ldr	r3, [pc, #20]	@ (80022c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80022ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4013      	ands	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022b6:	68fb      	ldr	r3, [r7, #12]
}
 80022b8:	bf00      	nop
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	40023800 	.word	0x40023800

080022c8 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b090      	sub	sp, #64	@ 0x40
 80022cc:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80022ce:	f107 0318 	add.w	r3, r7, #24
 80022d2:	2228      	movs	r2, #40	@ 0x28
 80022d4:	2100      	movs	r1, #0
 80022d6:	4618      	mov	r0, r3
 80022d8:	f00a fc9a 	bl	800cc10 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022dc:	463b      	mov	r3, r7
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	605a      	str	r2, [r3, #4]
 80022e4:	609a      	str	r2, [r3, #8]
 80022e6:	60da      	str	r2, [r3, #12]
 80022e8:	611a      	str	r2, [r3, #16]
 80022ea:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80022ec:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80022f0:	f7ff ffd2 	bl	8002298 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80022f4:	2001      	movs	r0, #1
 80022f6:	f7ff ffb7 	bl	8002268 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80022fa:	2004      	movs	r0, #4
 80022fc:	f7ff ffb4 	bl	8002268 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002300:	23e0      	movs	r3, #224	@ 0xe0
 8002302:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002304:	2302      	movs	r3, #2
 8002306:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002308:	2303      	movs	r3, #3
 800230a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002310:	2300      	movs	r3, #0
 8002312:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002314:	2305      	movs	r3, #5
 8002316:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002318:	463b      	mov	r3, r7
 800231a:	4619      	mov	r1, r3
 800231c:	4825      	ldr	r0, [pc, #148]	@ (80023b4 <ICM20602_GPIO_SPI_Initialization+0xec>)
 800231e:	f008 fe0a 	bl	800af36 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002322:	2300      	movs	r3, #0
 8002324:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002326:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800232a:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800232c:	2300      	movs	r3, #0
 800232e:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002330:	2302      	movs	r3, #2
 8002332:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002334:	2301      	movs	r3, #1
 8002336:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002338:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800233c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 800233e:	2310      	movs	r3, #16
 8002340:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002342:	2300      	movs	r3, #0
 8002344:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002346:	2300      	movs	r3, #0
 8002348:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 800234a:	230a      	movs	r3, #10
 800234c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 800234e:	f107 0318 	add.w	r3, r7, #24
 8002352:	4619      	mov	r1, r3
 8002354:	4818      	ldr	r0, [pc, #96]	@ (80023b8 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8002356:	f008 ffcc 	bl	800b2f2 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800235a:	2100      	movs	r1, #0
 800235c:	4816      	ldr	r0, [pc, #88]	@ (80023b8 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800235e:	f7ff fef7 	bl	8002150 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 8002362:	2110      	movs	r1, #16
 8002364:	4815      	ldr	r0, [pc, #84]	@ (80023bc <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8002366:	f7ff ff6f 	bl	8002248 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 800236a:	2310      	movs	r3, #16
 800236c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800236e:	2301      	movs	r3, #1
 8002370:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002372:	2303      	movs	r3, #3
 8002374:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800237a:	2300      	movs	r3, #0
 800237c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 800237e:	463b      	mov	r3, r7
 8002380:	4619      	mov	r1, r3
 8002382:	480e      	ldr	r0, [pc, #56]	@ (80023bc <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8002384:	f008 fdd7 	bl	800af36 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8002388:	2320      	movs	r3, #32
 800238a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800238c:	2300      	movs	r3, #0
 800238e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002390:	2301      	movs	r3, #1
 8002392:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8002394:	463b      	mov	r3, r7
 8002396:	4619      	mov	r1, r3
 8002398:	4808      	ldr	r0, [pc, #32]	@ (80023bc <ICM20602_GPIO_SPI_Initialization+0xf4>)
 800239a:	f008 fdcc 	bl	800af36 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 800239e:	4806      	ldr	r0, [pc, #24]	@ (80023b8 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80023a0:	f7ff fec6 	bl	8002130 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 80023a4:	2110      	movs	r1, #16
 80023a6:	4805      	ldr	r0, [pc, #20]	@ (80023bc <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80023a8:	f7ff ff40 	bl	800222c <LL_GPIO_SetOutputPin>
}
 80023ac:	bf00      	nop
 80023ae:	3740      	adds	r7, #64	@ 0x40
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40020000 	.word	0x40020000
 80023b8:	40013000 	.word	0x40013000
 80023bc:	40020800 	.word	0x40020800

080023c0 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 80023ca:	bf00      	nop
 80023cc:	480c      	ldr	r0, [pc, #48]	@ (8002400 <SPI1_SendByte+0x40>)
 80023ce:	f7ff fee5 	bl	800219c <LL_SPI_IsActiveFlag_TXE>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0f9      	beq.n	80023cc <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	4619      	mov	r1, r3
 80023dc:	4808      	ldr	r0, [pc, #32]	@ (8002400 <SPI1_SendByte+0x40>)
 80023de:	f7ff fefe 	bl	80021de <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 80023e2:	bf00      	nop
 80023e4:	4806      	ldr	r0, [pc, #24]	@ (8002400 <SPI1_SendByte+0x40>)
 80023e6:	f7ff fec6 	bl	8002176 <LL_SPI_IsActiveFlag_RXNE>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0f9      	beq.n	80023e4 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 80023f0:	4803      	ldr	r0, [pc, #12]	@ (8002400 <SPI1_SendByte+0x40>)
 80023f2:	f7ff fee6 	bl	80021c2 <LL_SPI_ReceiveData8>
 80023f6:	4603      	mov	r3, r0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40013000 	.word	0x40013000

08002404 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 800240e:	2110      	movs	r1, #16
 8002410:	480b      	ldr	r0, [pc, #44]	@ (8002440 <ICM20602_Readbyte+0x3c>)
 8002412:	f7ff ff19 	bl	8002248 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800241c:	b2db      	uxtb	r3, r3
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff ffce 	bl	80023c0 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8002424:	2000      	movs	r0, #0
 8002426:	f7ff ffcb 	bl	80023c0 <SPI1_SendByte>
 800242a:	4603      	mov	r3, r0
 800242c:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 800242e:	2110      	movs	r1, #16
 8002430:	4803      	ldr	r0, [pc, #12]	@ (8002440 <ICM20602_Readbyte+0x3c>)
 8002432:	f7ff fefb 	bl	800222c <LL_GPIO_SetOutputPin>
	
	return val;
 8002436:	7bfb      	ldrb	r3, [r7, #15]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40020800 	.word	0x40020800

08002444 <ICM20602_Readbytes>:

void ICM20602_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8002444:	b590      	push	{r4, r7, lr}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	603a      	str	r2, [r7, #0]
 800244e:	71fb      	strb	r3, [r7, #7]
 8002450:	460b      	mov	r3, r1
 8002452:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM20602);
 8002458:	2110      	movs	r1, #16
 800245a:	4810      	ldr	r0, [pc, #64]	@ (800249c <ICM20602_Readbytes+0x58>)
 800245c:	f7ff fef4 	bl	8002248 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002466:	b2db      	uxtb	r3, r3
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff ffa9 	bl	80023c0 <SPI1_SendByte>
	while(i < len)
 800246e:	e009      	b.n	8002484 <ICM20602_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	60fa      	str	r2, [r7, #12]
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	18d4      	adds	r4, r2, r3
 800247a:	2000      	movs	r0, #0
 800247c:	f7ff ffa0 	bl	80023c0 <SPI1_SendByte>
 8002480:	4603      	mov	r3, r0
 8002482:	7023      	strb	r3, [r4, #0]
	while(i < len)
 8002484:	79bb      	ldrb	r3, [r7, #6]
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	429a      	cmp	r2, r3
 800248a:	d3f1      	bcc.n	8002470 <ICM20602_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM20602);
 800248c:	2110      	movs	r1, #16
 800248e:	4803      	ldr	r0, [pc, #12]	@ (800249c <ICM20602_Readbytes+0x58>)
 8002490:	f7ff fecc 	bl	800222c <LL_GPIO_SetOutputPin>
}
 8002494:	bf00      	nop
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	bd90      	pop	{r4, r7, pc}
 800249c:	40020800 	.word	0x40020800

080024a0 <ICM20602_Writebyte>:

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	460a      	mov	r2, r1
 80024aa:	71fb      	strb	r3, [r7, #7]
 80024ac:	4613      	mov	r3, r2
 80024ae:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 80024b0:	2110      	movs	r1, #16
 80024b2:	480b      	ldr	r0, [pc, #44]	@ (80024e0 <ICM20602_Writebyte+0x40>)
 80024b4:	f7ff fec8 	bl	8002248 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff ff7d 	bl	80023c0 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 80024c6:	79bb      	ldrb	r3, [r7, #6]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff ff79 	bl	80023c0 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 80024ce:	2110      	movs	r1, #16
 80024d0:	4803      	ldr	r0, [pc, #12]	@ (80024e0 <ICM20602_Writebyte+0x40>)
 80024d2:	f7ff feab 	bl	800222c <LL_GPIO_SetOutputPin>
}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40020800 	.word	0x40020800

080024e4 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80024ea:	2300      	movs	r3, #0
 80024ec:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 80024ee:	f107 0308 	add.w	r3, r7, #8
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 80024f8:	463b      	mov	r3, r7
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8002500:	f7ff fee2 	bl	80022c8 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 8002504:	4833      	ldr	r0, [pc, #204]	@ (80025d4 <ICM20602_Initialization+0xf0>)
 8002506:	f00a fa3b 	bl	800c980 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 800250a:	2075      	movs	r0, #117	@ 0x75
 800250c:	f7ff ff7a 	bl	8002404 <ICM20602_Readbyte>
 8002510:	4603      	mov	r3, r0
 8002512:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	2b12      	cmp	r3, #18
 8002518:	d105      	bne.n	8002526 <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 800251a:	7bfb      	ldrb	r3, [r7, #15]
 800251c:	4619      	mov	r1, r3
 800251e:	482e      	ldr	r0, [pc, #184]	@ (80025d8 <ICM20602_Initialization+0xf4>)
 8002520:	f00a fa2e 	bl	800c980 <iprintf>
 8002524:	e012      	b.n	800254c <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	2b12      	cmp	r3, #18
 800252a:	d00f      	beq.n	800254c <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 800252c:	2075      	movs	r0, #117	@ 0x75
 800252e:	f7ff ff69 	bl	8002404 <ICM20602_Readbyte>
 8002532:	4603      	mov	r3, r0
 8002534:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	2b12      	cmp	r3, #18
 800253a:	d007      	beq.n	800254c <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	2212      	movs	r2, #18
 8002540:	4619      	mov	r1, r3
 8002542:	4826      	ldr	r0, [pc, #152]	@ (80025dc <ICM20602_Initialization+0xf8>)
 8002544:	f00a fa1c 	bl	800c980 <iprintf>
			return 1; //ERROR
 8002548:	2301      	movs	r3, #1
 800254a:	e03f      	b.n	80025cc <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 800254c:	2180      	movs	r1, #128	@ 0x80
 800254e:	206b      	movs	r0, #107	@ 0x6b
 8002550:	f7ff ffa6 	bl	80024a0 <ICM20602_Writebyte>
	HAL_Delay(50);
 8002554:	2032      	movs	r0, #50	@ 0x32
 8002556:	f004 fb75 	bl	8006c44 <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 800255a:	2101      	movs	r1, #1
 800255c:	206b      	movs	r0, #107	@ 0x6b
 800255e:	f7ff ff9f 	bl	80024a0 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 8002562:	2032      	movs	r0, #50	@ 0x32
 8002564:	f004 fb6e 	bl	8006c44 <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 8002568:	2138      	movs	r1, #56	@ 0x38
 800256a:	206c      	movs	r0, #108	@ 0x6c
 800256c:	f7ff ff98 	bl	80024a0 <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 8002570:	2032      	movs	r0, #50	@ 0x32
 8002572:	f004 fb67 	bl	8006c44 <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8002576:	2100      	movs	r1, #0
 8002578:	2019      	movs	r0, #25
 800257a:	f7ff ff91 	bl	80024a0 <ICM20602_Writebyte>
	HAL_Delay(50);
 800257e:	2032      	movs	r0, #50	@ 0x32
 8002580:	f004 fb60 	bl	8006c44 <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8002584:	2105      	movs	r1, #5
 8002586:	201a      	movs	r0, #26
 8002588:	f7ff ff8a 	bl	80024a0 <ICM20602_Writebyte>
	HAL_Delay(50);
 800258c:	2032      	movs	r0, #50	@ 0x32
 800258e:	f004 fb59 	bl	8006c44 <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8002592:	2118      	movs	r1, #24
 8002594:	201b      	movs	r0, #27
 8002596:	f7ff ff83 	bl	80024a0 <ICM20602_Writebyte>
	HAL_Delay(50);
 800259a:	2032      	movs	r0, #50	@ 0x32
 800259c:	f004 fb52 	bl	8006c44 <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 80025a0:	2118      	movs	r1, #24
 80025a2:	201c      	movs	r0, #28
 80025a4:	f7ff ff7c 	bl	80024a0 <ICM20602_Writebyte>
	HAL_Delay(50);
 80025a8:	2032      	movs	r0, #50	@ 0x32
 80025aa:	f004 fb4b 	bl	8006c44 <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 80025ae:	2103      	movs	r1, #3
 80025b0:	201d      	movs	r0, #29
 80025b2:	f7ff ff75 	bl	80024a0 <ICM20602_Writebyte>
	HAL_Delay(50);
 80025b6:	2032      	movs	r0, #50	@ 0x32
 80025b8:	f004 fb44 	bl	8006c44 <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 80025bc:	2101      	movs	r1, #1
 80025be:	2038      	movs	r0, #56	@ 0x38
 80025c0:	f7ff ff6e 	bl	80024a0 <ICM20602_Writebyte>
	HAL_Delay(50);
 80025c4:	2032      	movs	r0, #50	@ 0x32
 80025c6:	f004 fb3d 	bl	8006c44 <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	0800f69c 	.word	0x0800f69c
 80025d8:	0800f6b4 	.word	0x0800f6b4
 80025dc:	0800f6d8 	.word	0x0800f6d8

080025e0 <ICM20602_Get3AxisGyroRawData>:
	gyro[1] = ((data[10] << 8) | data[11]);
	gyro[2] = ((data[12] << 8) | data[13]);
}

void ICM20602_Get3AxisGyroRawData(short* gyro)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
	unsigned char data[6];
	ICM20602_Readbytes(GYRO_XOUT_H, 6, data);
 80025e8:	f107 0308 	add.w	r3, r7, #8
 80025ec:	461a      	mov	r2, r3
 80025ee:	2106      	movs	r1, #6
 80025f0:	2043      	movs	r0, #67	@ 0x43
 80025f2:	f7ff ff27 	bl	8002444 <ICM20602_Readbytes>
	
	gyro[0] = ((data[0] << 8) | data[1]);
 80025f6:	7a3b      	ldrb	r3, [r7, #8]
 80025f8:	021b      	lsls	r3, r3, #8
 80025fa:	b21a      	sxth	r2, r3
 80025fc:	7a7b      	ldrb	r3, [r7, #9]
 80025fe:	b21b      	sxth	r3, r3
 8002600:	4313      	orrs	r3, r2
 8002602:	b21a      	sxth	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[2] << 8) | data[3]);
 8002608:	7abb      	ldrb	r3, [r7, #10]
 800260a:	021b      	lsls	r3, r3, #8
 800260c:	b219      	sxth	r1, r3
 800260e:	7afb      	ldrb	r3, [r7, #11]
 8002610:	b21a      	sxth	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3302      	adds	r3, #2
 8002616:	430a      	orrs	r2, r1
 8002618:	b212      	sxth	r2, r2
 800261a:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[4] << 8) | data[5]);
 800261c:	7b3b      	ldrb	r3, [r7, #12]
 800261e:	021b      	lsls	r3, r3, #8
 8002620:	b219      	sxth	r1, r3
 8002622:	7b7b      	ldrb	r3, [r7, #13]
 8002624:	b21a      	sxth	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3304      	adds	r3, #4
 800262a:	430a      	orrs	r2, r1
 800262c:	b212      	sxth	r2, r2
 800262e:	801a      	strh	r2, [r3, #0]
}
 8002630:	bf00      	nop
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <ICM20602_DataReady>:
	accel[1] = ((data[2] << 8) | data[3]);
	accel[2] = ((data[4] << 8) | data[5]);
}

int ICM20602_DataReady(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM20602_INT_PORT, ICM20602_INT_PIN);
 800263c:	2120      	movs	r1, #32
 800263e:	4803      	ldr	r0, [pc, #12]	@ (800264c <ICM20602_DataReady+0x14>)
 8002640:	f7ff fddf 	bl	8002202 <LL_GPIO_IsInputPinSet>
 8002644:	4603      	mov	r3, r0
}
 8002646:	4618      	mov	r0, r3
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40020800 	.word	0x40020800

08002650 <LL_SPI_Enable>:
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	601a      	str	r2, [r3, #0]
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <LL_SPI_SetStandard>:
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f023 0210 	bic.w	r2, r3, #16
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	431a      	orrs	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	605a      	str	r2, [r3, #4]
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <LL_SPI_IsActiveFlag_RXNE>:
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <LL_SPI_IsActiveFlag_RXNE+0x18>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <LL_SPI_IsActiveFlag_TXE>:
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d101      	bne.n	80026d4 <LL_SPI_IsActiveFlag_TXE+0x18>
 80026d0:	2301      	movs	r3, #1
 80026d2:	e000      	b.n	80026d6 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <LL_SPI_ReceiveData8>:
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	330c      	adds	r3, #12
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	b2db      	uxtb	r3, r3
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <LL_SPI_TransmitData8>:
{
 80026fe:	b480      	push	{r7}
 8002700:	b085      	sub	sp, #20
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
 8002706:	460b      	mov	r3, r1
 8002708:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	330c      	adds	r3, #12
 800270e:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	78fa      	ldrb	r2, [r7, #3]
 8002714:	701a      	strb	r2, [r3, #0]
}
 8002716:	bf00      	nop
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <LL_GPIO_IsInputPinSet>:
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
 800272a:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691a      	ldr	r2, [r3, #16]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	4013      	ands	r3, r2
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	bf0c      	ite	eq
 800273a:	2301      	moveq	r3, #1
 800273c:	2300      	movne	r3, #0
 800273e:	b2db      	uxtb	r3, r3
}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <LL_GPIO_SetOutputPin>:
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	619a      	str	r2, [r3, #24]
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <LL_GPIO_ResetOutputPin>:
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	041a      	lsls	r2, r3, #16
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	619a      	str	r2, [r3, #24]
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
	...

08002788 <LL_AHB1_GRP1_EnableClock>:
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002790:	4b08      	ldr	r3, [pc, #32]	@ (80027b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002792:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002794:	4907      	ldr	r1, [pc, #28]	@ (80027b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4313      	orrs	r3, r2
 800279a:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800279c:	4b05      	ldr	r3, [pc, #20]	@ (80027b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800279e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4013      	ands	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027a6:	68fb      	ldr	r3, [r7, #12]
}
 80027a8:	bf00      	nop
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	40023800 	.word	0x40023800

080027b8 <LL_APB1_GRP1_EnableClock>:
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80027c0:	4b08      	ldr	r3, [pc, #32]	@ (80027e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80027c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027c4:	4907      	ldr	r1, [pc, #28]	@ (80027e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80027cc:	4b05      	ldr	r3, [pc, #20]	@ (80027e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80027ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4013      	ands	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027d6:	68fb      	ldr	r3, [r7, #12]
}
 80027d8:	bf00      	nop
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	40023800 	.word	0x40023800

080027e8 <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b090      	sub	sp, #64	@ 0x40
 80027ec:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80027ee:	f107 0318 	add.w	r3, r7, #24
 80027f2:	2228      	movs	r2, #40	@ 0x28
 80027f4:	2100      	movs	r1, #0
 80027f6:	4618      	mov	r0, r3
 80027f8:	f00a fa0a 	bl	800cc10 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fc:	463b      	mov	r3, r7
 80027fe:	2200      	movs	r2, #0
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	605a      	str	r2, [r3, #4]
 8002804:	609a      	str	r2, [r3, #8]
 8002806:	60da      	str	r2, [r3, #12]
 8002808:	611a      	str	r2, [r3, #16]
 800280a:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 800280c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002810:	f7ff ffd2 	bl	80027b8 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002814:	2002      	movs	r0, #2
 8002816:	f7ff ffb7 	bl	8002788 <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 800281a:	2338      	movs	r3, #56	@ 0x38
 800281c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800281e:	2302      	movs	r3, #2
 8002820:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002822:	2303      	movs	r3, #3
 8002824:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800282e:	2306      	movs	r3, #6
 8002830:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002832:	463b      	mov	r3, r7
 8002834:	4619      	mov	r1, r3
 8002836:	4826      	ldr	r0, [pc, #152]	@ (80028d0 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002838:	f008 fb7d 	bl	800af36 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800283c:	2300      	movs	r3, #0
 800283e:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002840:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002844:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002846:	2300      	movs	r3, #0
 8002848:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800284a:	2302      	movs	r3, #2
 800284c:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800284e:	2301      	movs	r3, #1
 8002850:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002852:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002856:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8002858:	2308      	movs	r3, #8
 800285a:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800285c:	2300      	movs	r3, #0
 800285e:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002860:	2300      	movs	r3, #0
 8002862:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 8002864:	230a      	movs	r3, #10
 8002866:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 8002868:	f107 0318 	add.w	r3, r7, #24
 800286c:	4619      	mov	r1, r3
 800286e:	4819      	ldr	r0, [pc, #100]	@ (80028d4 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8002870:	f008 fd3f 	bl	800b2f2 <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8002874:	2100      	movs	r1, #0
 8002876:	4817      	ldr	r0, [pc, #92]	@ (80028d4 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8002878:	f7ff fefa 	bl	8002670 <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 800287c:	2140      	movs	r1, #64	@ 0x40
 800287e:	4814      	ldr	r0, [pc, #80]	@ (80028d0 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002880:	f7ff ff72 	bl	8002768 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 8002884:	2340      	movs	r3, #64	@ 0x40
 8002886:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002888:	2301      	movs	r3, #1
 800288a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800288c:	2303      	movs	r3, #3
 800288e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002894:	2300      	movs	r3, #0
 8002896:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 8002898:	463b      	mov	r3, r7
 800289a:	4619      	mov	r1, r3
 800289c:	480c      	ldr	r0, [pc, #48]	@ (80028d0 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 800289e:	f008 fb4a 	bl	800af36 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 80028a2:	2380      	movs	r3, #128	@ 0x80
 80028a4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80028a6:	2300      	movs	r3, #0
 80028a8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80028aa:	2301      	movs	r3, #1
 80028ac:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 80028ae:	463b      	mov	r3, r7
 80028b0:	4619      	mov	r1, r3
 80028b2:	4807      	ldr	r0, [pc, #28]	@ (80028d0 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80028b4:	f008 fb3f 	bl	800af36 <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 80028b8:	4806      	ldr	r0, [pc, #24]	@ (80028d4 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 80028ba:	f7ff fec9 	bl	8002650 <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 80028be:	2140      	movs	r1, #64	@ 0x40
 80028c0:	4803      	ldr	r0, [pc, #12]	@ (80028d0 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80028c2:	f7ff ff43 	bl	800274c <LL_GPIO_SetOutputPin>
}
 80028c6:	bf00      	nop
 80028c8:	3740      	adds	r7, #64	@ 0x40
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40020400 	.word	0x40020400
 80028d4:	40003c00 	.word	0x40003c00

080028d8 <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 80028e2:	bf00      	nop
 80028e4:	480c      	ldr	r0, [pc, #48]	@ (8002918 <SPI3_SendByte+0x40>)
 80028e6:	f7ff fee9 	bl	80026bc <LL_SPI_IsActiveFlag_TXE>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0f9      	beq.n	80028e4 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	4619      	mov	r1, r3
 80028f4:	4808      	ldr	r0, [pc, #32]	@ (8002918 <SPI3_SendByte+0x40>)
 80028f6:	f7ff ff02 	bl	80026fe <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 80028fa:	bf00      	nop
 80028fc:	4806      	ldr	r0, [pc, #24]	@ (8002918 <SPI3_SendByte+0x40>)
 80028fe:	f7ff feca 	bl	8002696 <LL_SPI_IsActiveFlag_RXNE>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0f9      	beq.n	80028fc <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 8002908:	4803      	ldr	r0, [pc, #12]	@ (8002918 <SPI3_SendByte+0x40>)
 800290a:	f7ff feea 	bl	80026e2 <LL_SPI_ReceiveData8>
 800290e:	4603      	mov	r3, r0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40003c00 	.word	0x40003c00

0800291c <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 8002926:	2140      	movs	r1, #64	@ 0x40
 8002928:	480b      	ldr	r0, [pc, #44]	@ (8002958 <LPS22HH_Readbyte+0x3c>)
 800292a:	f7ff ff1d 	bl	8002768 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800292e:	79fb      	ldrb	r3, [r7, #7]
 8002930:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002934:	b2db      	uxtb	r3, r3
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff ffce 	bl	80028d8 <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 800293c:	2000      	movs	r0, #0
 800293e:	f7ff ffcb 	bl	80028d8 <SPI3_SendByte>
 8002942:	4603      	mov	r3, r0
 8002944:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 8002946:	2140      	movs	r1, #64	@ 0x40
 8002948:	4803      	ldr	r0, [pc, #12]	@ (8002958 <LPS22HH_Readbyte+0x3c>)
 800294a:	f7ff feff 	bl	800274c <LL_GPIO_SetOutputPin>
	
	return val;
 800294e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40020400 	.word	0x40020400

0800295c <LPS22HH_Readbytes>:

void LPS22HH_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 800295c:	b590      	push	{r4, r7, lr}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	603a      	str	r2, [r7, #0]
 8002966:	71fb      	strb	r3, [r7, #7]
 8002968:	460b      	mov	r3, r1
 800296a:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(LPS22HH);
 8002970:	2140      	movs	r1, #64	@ 0x40
 8002972:	4810      	ldr	r0, [pc, #64]	@ (80029b4 <LPS22HH_Readbytes+0x58>)
 8002974:	f7ff fef8 	bl	8002768 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800297e:	b2db      	uxtb	r3, r3
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff ffa9 	bl	80028d8 <SPI3_SendByte>
	while(i < len)
 8002986:	e009      	b.n	800299c <LPS22HH_Readbytes+0x40>
	{
		data[i++] = SPI3_SendByte(0x00); //Send DUMMY
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	60fa      	str	r2, [r7, #12]
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	18d4      	adds	r4, r2, r3
 8002992:	2000      	movs	r0, #0
 8002994:	f7ff ffa0 	bl	80028d8 <SPI3_SendByte>
 8002998:	4603      	mov	r3, r0
 800299a:	7023      	strb	r3, [r4, #0]
	while(i < len)
 800299c:	79bb      	ldrb	r3, [r7, #6]
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d3f1      	bcc.n	8002988 <LPS22HH_Readbytes+0x2c>
	}
	CHIP_DESELECT(LPS22HH);
 80029a4:	2140      	movs	r1, #64	@ 0x40
 80029a6:	4803      	ldr	r0, [pc, #12]	@ (80029b4 <LPS22HH_Readbytes+0x58>)
 80029a8:	f7ff fed0 	bl	800274c <LL_GPIO_SetOutputPin>
}
 80029ac:	bf00      	nop
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd90      	pop	{r4, r7, pc}
 80029b4:	40020400 	.word	0x40020400

080029b8 <LPS22HH_Writebyte>:

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	460a      	mov	r2, r1
 80029c2:	71fb      	strb	r3, [r7, #7]
 80029c4:	4613      	mov	r3, r2
 80029c6:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 80029c8:	2140      	movs	r1, #64	@ 0x40
 80029ca:	480b      	ldr	r0, [pc, #44]	@ (80029f8 <LPS22HH_Writebyte+0x40>)
 80029cc:	f7ff fecc 	bl	8002768 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff ff7d 	bl	80028d8 <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 80029de:	79bb      	ldrb	r3, [r7, #6]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff ff79 	bl	80028d8 <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 80029e6:	2140      	movs	r1, #64	@ 0x40
 80029e8:	4803      	ldr	r0, [pc, #12]	@ (80029f8 <LPS22HH_Writebyte+0x40>)
 80029ea:	f7ff feaf 	bl	800274c <LL_GPIO_SetOutputPin>
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40020400 	.word	0x40020400

080029fc <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 8002a02:	2300      	movs	r3, #0
 8002a04:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 8002a06:	f7ff feef 	bl	80027e8 <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 8002a0a:	4841      	ldr	r0, [pc, #260]	@ (8002b10 <LPS22HH_Initialization+0x114>)
 8002a0c:	f009 ffb8 	bl	800c980 <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 8002a10:	200f      	movs	r0, #15
 8002a12:	f7ff ff83 	bl	800291c <LPS22HH_Readbyte>
 8002a16:	4603      	mov	r3, r0
 8002a18:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	2bb3      	cmp	r3, #179	@ 0xb3
 8002a1e:	d105      	bne.n	8002a2c <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	4619      	mov	r1, r3
 8002a24:	483b      	ldr	r0, [pc, #236]	@ (8002b14 <LPS22HH_Initialization+0x118>)
 8002a26:	f009 ffab 	bl	800c980 <iprintf>
 8002a2a:	e012      	b.n	8002a52 <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	2bb3      	cmp	r3, #179	@ 0xb3
 8002a30:	d00f      	beq.n	8002a52 <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 8002a32:	200f      	movs	r0, #15
 8002a34:	f7ff ff72 	bl	800291c <LPS22HH_Readbyte>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 8002a3c:	79fb      	ldrb	r3, [r7, #7]
 8002a3e:	2bb3      	cmp	r3, #179	@ 0xb3
 8002a40:	d007      	beq.n	8002a52 <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 8002a42:	79fb      	ldrb	r3, [r7, #7]
 8002a44:	22b3      	movs	r2, #179	@ 0xb3
 8002a46:	4619      	mov	r1, r3
 8002a48:	4833      	ldr	r0, [pc, #204]	@ (8002b18 <LPS22HH_Initialization+0x11c>)
 8002a4a:	f009 ff99 	bl	800c980 <iprintf>
			return 1; //ERROR
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e059      	b.n	8002b06 <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 8002a52:	2104      	movs	r1, #4
 8002a54:	2011      	movs	r0, #17
 8002a56:	f7ff ffaf 	bl	80029b8 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 8002a5a:	2011      	movs	r0, #17
 8002a5c:	f7ff ff5e 	bl	800291c <LPS22HH_Readbyte>
 8002a60:	4603      	mov	r3, r0
 8002a62:	f003 0304 	and.w	r3, r3, #4
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f7      	bne.n	8002a5a <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002a6a:	2010      	movs	r0, #16
 8002a6c:	f7ff ff56 	bl	800291c <LPS22HH_Readbyte>
 8002a70:	4603      	mov	r3, r0
 8002a72:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 8002a74:	79bb      	ldrb	r3, [r7, #6]
 8002a76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a7a:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002a7c:	79bb      	ldrb	r3, [r7, #6]
 8002a7e:	4619      	mov	r1, r3
 8002a80:	2010      	movs	r0, #16
 8002a82:	f7ff ff99 	bl	80029b8 <LPS22HH_Writebyte>
	temp_reg = 0;
 8002a86:	2300      	movs	r3, #0
 8002a88:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002a8a:	2010      	movs	r0, #16
 8002a8c:	f7ff ff46 	bl	800291c <LPS22HH_Readbyte>
 8002a90:	4603      	mov	r3, r0
 8002a92:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002a94:	2010      	movs	r0, #16
 8002a96:	f7ff ff41 	bl	800291c <LPS22HH_Readbyte>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 8002a9e:	79bb      	ldrb	r3, [r7, #6]
 8002aa0:	f043 030c 	orr.w	r3, r3, #12
 8002aa4:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002aa6:	79bb      	ldrb	r3, [r7, #6]
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	2010      	movs	r0, #16
 8002aac:	f7ff ff84 	bl	80029b8 <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002ab0:	2010      	movs	r0, #16
 8002ab2:	f7ff ff33 	bl	800291c <LPS22HH_Readbyte>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8002aba:	79bb      	ldrb	r3, [r7, #6]
 8002abc:	f043 0302 	orr.w	r3, r3, #2
 8002ac0:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002ac2:	79bb      	ldrb	r3, [r7, #6]
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	2010      	movs	r0, #16
 8002ac8:	f7ff ff76 	bl	80029b8 <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 8002acc:	2011      	movs	r0, #17
 8002ace:	f7ff ff25 	bl	800291c <LPS22HH_Readbyte>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8002ad6:	79bb      	ldrb	r3, [r7, #6]
 8002ad8:	f043 0302 	orr.w	r3, r3, #2
 8002adc:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 8002ade:	79bb      	ldrb	r3, [r7, #6]
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	2011      	movs	r0, #17
 8002ae4:	f7ff ff68 	bl	80029b8 <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 8002ae8:	2012      	movs	r0, #18
 8002aea:	f7ff ff17 	bl	800291c <LPS22HH_Readbyte>
 8002aee:	4603      	mov	r3, r0
 8002af0:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 8002af2:	79bb      	ldrb	r3, [r7, #6]
 8002af4:	f043 0304 	orr.w	r3, r3, #4
 8002af8:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 8002afa:	79bb      	ldrb	r3, [r7, #6]
 8002afc:	4619      	mov	r1, r3
 8002afe:	2012      	movs	r0, #18
 8002b00:	f7ff ff5a 	bl	80029b8 <LPS22HH_Writebyte>
	
	return 0; //OK
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	0800f704 	.word	0x0800f704
 8002b14:	0800f718 	.word	0x0800f718
 8002b18:	0800f73c 	.word	0x0800f73c

08002b1c <LPS22HH_DataReady>:


int LPS22HH_DataReady(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(LPS22HH_INT_PORT, LPS22HH_INT_PIN);
 8002b20:	2180      	movs	r1, #128	@ 0x80
 8002b22:	4803      	ldr	r0, [pc, #12]	@ (8002b30 <LPS22HH_DataReady+0x14>)
 8002b24:	f7ff fdfd 	bl	8002722 <LL_GPIO_IsInputPinSet>
 8002b28:	4603      	mov	r3, r0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40020400 	.word	0x40020400

08002b34 <LPS22HH_GetPressure>:

void LPS22HH_GetPressure(int32_t* pressure)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(PRESSURE_OUT_XL, 3, (unsigned char*)pressure);
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	2103      	movs	r1, #3
 8002b40:	2028      	movs	r0, #40	@ 0x28
 8002b42:	f7ff ff0b 	bl	800295c <LPS22HH_Readbytes>
}
 8002b46:	bf00      	nop
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <LPS22HH_GetTemperature>:

void LPS22HH_GetTemperature(int16_t* temperature)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(TEMP_OUT_L, 2, (unsigned char*)temperature);
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	2102      	movs	r1, #2
 8002b5a:	202b      	movs	r0, #43	@ 0x2b
 8002b5c:	f7ff fefe 	bl	800295c <LPS22HH_Readbytes>
}
 8002b60:	bf00      	nop
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <getAltitude2>:
{
	return (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * 44307.69396f; //145366.45f * 0.3048f = 44307.69396f;
}

float getAltitude2(float pressure, float temperature) //Get Altitude with temperature correction.
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002b72:	edc7 0a00 	vstr	s1, [r7]
	return (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * (temperature + 273.15f) / 0.0065f;
 8002b76:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b7a:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8002bc0 <getAltitude2+0x58>
 8002b7e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b82:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8002bc4 <getAltitude2+0x5c>
 8002b86:	eeb0 0a47 	vmov.f32	s0, s14
 8002b8a:	f00b fefd 	bl	800e988 <powf>
 8002b8e:	eef0 7a40 	vmov.f32	s15, s0
 8002b92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b9a:	edd7 7a00 	vldr	s15, [r7]
 8002b9e:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8002bc8 <getAltitude2+0x60>
 8002ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002baa:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002bcc <getAltitude2+0x64>
 8002bae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002bb2:	eef0 7a66 	vmov.f32	s15, s13
}
 8002bb6:	eeb0 0a67 	vmov.f32	s0, s15
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	447d5000 	.word	0x447d5000
 8002bc4:	3e42c9b7 	.word	0x3e42c9b7
 8002bc8:	43889333 	.word	0x43889333
 8002bcc:	3bd4fdf4 	.word	0x3bd4fdf4

08002bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bd4:	4b04      	ldr	r3, [pc, #16]	@ (8002be8 <__NVIC_GetPriorityGrouping+0x18>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	0a1b      	lsrs	r3, r3, #8
 8002bda:	f003 0307 	and.w	r3, r3, #7
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	db0b      	blt.n	8002c16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	f003 021f 	and.w	r2, r3, #31
 8002c04:	4907      	ldr	r1, [pc, #28]	@ (8002c24 <__NVIC_EnableIRQ+0x38>)
 8002c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	2001      	movs	r0, #1
 8002c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	e000e100 	.word	0xe000e100

08002c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	6039      	str	r1, [r7, #0]
 8002c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	db0a      	blt.n	8002c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	490c      	ldr	r1, [pc, #48]	@ (8002c74 <__NVIC_SetPriority+0x4c>)
 8002c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c46:	0112      	lsls	r2, r2, #4
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c50:	e00a      	b.n	8002c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	4908      	ldr	r1, [pc, #32]	@ (8002c78 <__NVIC_SetPriority+0x50>)
 8002c58:	79fb      	ldrb	r3, [r7, #7]
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	3b04      	subs	r3, #4
 8002c60:	0112      	lsls	r2, r2, #4
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	440b      	add	r3, r1
 8002c66:	761a      	strb	r2, [r3, #24]
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	e000e100 	.word	0xe000e100
 8002c78:	e000ed00 	.word	0xe000ed00

08002c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b089      	sub	sp, #36	@ 0x24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f1c3 0307 	rsb	r3, r3, #7
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	bf28      	it	cs
 8002c9a:	2304      	movcs	r3, #4
 8002c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	2b06      	cmp	r3, #6
 8002ca4:	d902      	bls.n	8002cac <NVIC_EncodePriority+0x30>
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3b03      	subs	r3, #3
 8002caa:	e000      	b.n	8002cae <NVIC_EncodePriority+0x32>
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43da      	mvns	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	401a      	ands	r2, r3
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	fa01 f303 	lsl.w	r3, r1, r3
 8002cce:	43d9      	mvns	r1, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd4:	4313      	orrs	r3, r2
         );
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3724      	adds	r7, #36	@ 0x24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	60da      	str	r2, [r3, #12]
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	615a      	str	r2, [r3, #20]
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d3e:	2b80      	cmp	r3, #128	@ 0x80
 8002d40:	bf0c      	ite	eq
 8002d42:	2301      	moveq	r3, #1
 8002d44:	2300      	movne	r3, #0
 8002d46:	b2db      	uxtb	r3, r3
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002d60:	78fa      	ldrb	r2, [r7, #3]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	605a      	str	r2, [r3, #4]
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
	...

08002d74 <LL_AHB1_GRP1_EnableClock>:
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002d7c:	4b08      	ldr	r3, [pc, #32]	@ (8002da0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002d7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d80:	4907      	ldr	r1, [pc, #28]	@ (8002da0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002d88:	4b05      	ldr	r3, [pc, #20]	@ (8002da0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002d8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d92:	68fb      	ldr	r3, [r7, #12]
}
 8002d94:	bf00      	nop
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	40023800 	.word	0x40023800

08002da4 <LL_APB1_GRP1_EnableClock>:
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002dac:	4b08      	ldr	r3, [pc, #32]	@ (8002dd0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002dae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002db0:	4907      	ldr	r1, [pc, #28]	@ (8002dd0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002db8:	4b05      	ldr	r3, [pc, #20]	@ (8002dd0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002dba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
}
 8002dc4:	bf00      	nop
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	40023800 	.word	0x40023800

08002dd4 <M8N_TransmitData>:
 0xBF
}; //Save current configuration, Devices: BBR, FLASH, I2C-EEPROM, SPI-FLASH


void M8N_TransmitData(unsigned char* data, unsigned char len)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	70fb      	strb	r3, [r7, #3]
	for(int i=0; i<len; i++)
 8002de0:	2300      	movs	r3, #0
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	e011      	b.n	8002e0a <M8N_TransmitData+0x36>
	{
		while(!LL_USART_IsActiveFlag_TXE(UART4));
 8002de6:	bf00      	nop
 8002de8:	480c      	ldr	r0, [pc, #48]	@ (8002e1c <M8N_TransmitData+0x48>)
 8002dea:	f7ff ffa0 	bl	8002d2e <LL_USART_IsActiveFlag_TXE>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0f9      	beq.n	8002de8 <M8N_TransmitData+0x14>
		LL_USART_TransmitData8(UART4, *(data+i));
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	4413      	add	r3, r2
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4807      	ldr	r0, [pc, #28]	@ (8002e1c <M8N_TransmitData+0x48>)
 8002e00:	f7ff ffa8 	bl	8002d54 <LL_USART_TransmitData8>
	for(int i=0; i<len; i++)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	3301      	adds	r3, #1
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	78fb      	ldrb	r3, [r7, #3]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	dbe9      	blt.n	8002de6 <M8N_TransmitData+0x12>
	}
}
 8002e12:	bf00      	nop
 8002e14:	bf00      	nop
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40004c00 	.word	0x40004c00

08002e20 <M8N_Initialization>:

void M8N_Initialization(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
	N8M_UART4_Initialization();
 8002e24:	f000 f824 	bl	8002e70 <N8M_UART4_Initialization>

	M8N_TransmitData(&UBX_CFG_PRT[0], sizeof(UBX_CFG_PRT));
 8002e28:	211c      	movs	r1, #28
 8002e2a:	480d      	ldr	r0, [pc, #52]	@ (8002e60 <M8N_Initialization+0x40>)
 8002e2c:	f7ff ffd2 	bl	8002dd4 <M8N_TransmitData>
	HAL_Delay(100);
 8002e30:	2064      	movs	r0, #100	@ 0x64
 8002e32:	f003 ff07 	bl	8006c44 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_MSG[0], sizeof(UBX_CFG_MSG));
 8002e36:	2110      	movs	r1, #16
 8002e38:	480a      	ldr	r0, [pc, #40]	@ (8002e64 <M8N_Initialization+0x44>)
 8002e3a:	f7ff ffcb 	bl	8002dd4 <M8N_TransmitData>
	HAL_Delay(100);
 8002e3e:	2064      	movs	r0, #100	@ 0x64
 8002e40:	f003 ff00 	bl	8006c44 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_RATE[0], sizeof(UBX_CFG_RATE));
 8002e44:	210e      	movs	r1, #14
 8002e46:	4808      	ldr	r0, [pc, #32]	@ (8002e68 <M8N_Initialization+0x48>)
 8002e48:	f7ff ffc4 	bl	8002dd4 <M8N_TransmitData>
	HAL_Delay(100);
 8002e4c:	2064      	movs	r0, #100	@ 0x64
 8002e4e:	f003 fef9 	bl	8006c44 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_CFG[0], sizeof(UBX_CFG_CFG));
 8002e52:	2115      	movs	r1, #21
 8002e54:	4805      	ldr	r0, [pc, #20]	@ (8002e6c <M8N_Initialization+0x4c>)
 8002e56:	f7ff ffbd 	bl	8002dd4 <M8N_TransmitData>
}
 8002e5a:	bf00      	nop
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	0800f980 	.word	0x0800f980
 8002e64:	0800f99c 	.word	0x0800f99c
 8002e68:	0800f9ac 	.word	0x0800f9ac
 8002e6c:	0800f9bc 	.word	0x0800f9bc

08002e70 <N8M_UART4_Initialization>:

void N8M_UART4_Initialization(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08e      	sub	sp, #56	@ 0x38
 8002e74:	af00      	add	r7, sp, #0
	  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002e76:	f107 031c 	add.w	r3, r7, #28
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	605a      	str	r2, [r3, #4]
 8002e80:	609a      	str	r2, [r3, #8]
 8002e82:	60da      	str	r2, [r3, #12]
 8002e84:	611a      	str	r2, [r3, #16]
 8002e86:	615a      	str	r2, [r3, #20]
 8002e88:	619a      	str	r2, [r3, #24]

	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e8a:	1d3b      	adds	r3, r7, #4
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	605a      	str	r2, [r3, #4]
 8002e92:	609a      	str	r2, [r3, #8]
 8002e94:	60da      	str	r2, [r3, #12]
 8002e96:	611a      	str	r2, [r3, #16]
 8002e98:	615a      	str	r2, [r3, #20]

	  /* Peripheral clock enable */
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8002e9a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002e9e:	f7ff ff81 	bl	8002da4 <LL_APB1_GRP1_EnableClock>

	  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002ea2:	2004      	movs	r0, #4
 8002ea4:	f7ff ff66 	bl	8002d74 <LL_AHB1_GRP1_EnableClock>
	  /**UART4 GPIO Configuration
	  PC10   ------> UART4_TX
	  PC11   ------> UART4_RX
	  */
	  GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 8002ea8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002eac:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002ebe:	2308      	movs	r3, #8
 8002ec0:	61bb      	str	r3, [r7, #24]
	  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ec2:	1d3b      	adds	r3, r7, #4
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4819      	ldr	r0, [pc, #100]	@ (8002f2c <N8M_UART4_Initialization+0xbc>)
 8002ec8:	f008 f835 	bl	800af36 <LL_GPIO_Init>

	  /* UART4 interrupt Init */
	  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002ecc:	f7ff fe80 	bl	8002bd0 <__NVIC_GetPriorityGrouping>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff fed0 	bl	8002c7c <NVIC_EncodePriority>
 8002edc:	4603      	mov	r3, r0
 8002ede:	4619      	mov	r1, r3
 8002ee0:	2034      	movs	r0, #52	@ 0x34
 8002ee2:	f7ff fea1 	bl	8002c28 <__NVIC_SetPriority>
	  NVIC_EnableIRQ(UART4_IRQn);
 8002ee6:	2034      	movs	r0, #52	@ 0x34
 8002ee8:	f7ff fe80 	bl	8002bec <__NVIC_EnableIRQ>

	  /* USER CODE BEGIN UART4_Init 1 */

	  /* USER CODE END UART4_Init 1 */
	  USART_InitStruct.BaudRate = 9600;
 8002eec:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8002ef0:	61fb      	str	r3, [r7, #28]
	  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	623b      	str	r3, [r7, #32]
	  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	627b      	str	r3, [r7, #36]	@ 0x24
	  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002efa:	2300      	movs	r3, #0
 8002efc:	62bb      	str	r3, [r7, #40]	@ 0x28
	  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002efe:	230c      	movs	r3, #12
 8002f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002f02:	2300      	movs	r3, #0
 8002f04:	633b      	str	r3, [r7, #48]	@ 0x30
	  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002f06:	2300      	movs	r3, #0
 8002f08:	637b      	str	r3, [r7, #52]	@ 0x34
	  LL_USART_Init(UART4, &USART_InitStruct);
 8002f0a:	f107 031c 	add.w	r3, r7, #28
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4807      	ldr	r0, [pc, #28]	@ (8002f30 <N8M_UART4_Initialization+0xc0>)
 8002f12:	f008 ff9b 	bl	800be4c <LL_USART_Init>
	  LL_USART_ConfigAsyncMode(UART4);
 8002f16:	4806      	ldr	r0, [pc, #24]	@ (8002f30 <N8M_UART4_Initialization+0xc0>)
 8002f18:	f7ff fef3 	bl	8002d02 <LL_USART_ConfigAsyncMode>
	  LL_USART_Enable(UART4);
 8002f1c:	4804      	ldr	r0, [pc, #16]	@ (8002f30 <N8M_UART4_Initialization+0xc0>)
 8002f1e:	f7ff fee0 	bl	8002ce2 <LL_USART_Enable>
}
 8002f22:	bf00      	nop
 8002f24:	3738      	adds	r7, #56	@ 0x38
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40020800 	.word	0x40020800
 8002f30:	40004c00 	.word	0x40004c00

08002f34 <M8N_UBX_CHKSUM_Check>:

unsigned char M8N_UBX_CHKSUM_Check(unsigned char* data, unsigned char len)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	70fb      	strb	r3, [r7, #3]
	unsigned char CK_A = 0, CK_B =0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	73fb      	strb	r3, [r7, #15]
 8002f44:	2300      	movs	r3, #0
 8002f46:	73bb      	strb	r3, [r7, #14]

	for(int i=2; i< len-2; i++)
 8002f48:	2302      	movs	r3, #2
 8002f4a:	60bb      	str	r3, [r7, #8]
 8002f4c:	e00d      	b.n	8002f6a <M8N_UBX_CHKSUM_Check+0x36>
	{
		CK_A = CK_A + data[i];
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	4413      	add	r3, r2
 8002f54:	781a      	ldrb	r2, [r3, #0]
 8002f56:	7bfb      	ldrb	r3, [r7, #15]
 8002f58:	4413      	add	r3, r2
 8002f5a:	73fb      	strb	r3, [r7, #15]
		CK_B = CK_B + CK_A;
 8002f5c:	7bba      	ldrb	r2, [r7, #14]
 8002f5e:	7bfb      	ldrb	r3, [r7, #15]
 8002f60:	4413      	add	r3, r2
 8002f62:	73bb      	strb	r3, [r7, #14]
	for(int i=2; i< len-2; i++)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	3301      	adds	r3, #1
 8002f68:	60bb      	str	r3, [r7, #8]
 8002f6a:	78fb      	ldrb	r3, [r7, #3]
 8002f6c:	3b02      	subs	r3, #2
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	dbec      	blt.n	8002f4e <M8N_UBX_CHKSUM_Check+0x1a>
	}
	return (CK_A == data[len-2] && CK_B == data[len-1]);
 8002f74:	78fb      	ldrb	r3, [r7, #3]
 8002f76:	3b02      	subs	r3, #2
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	7bfa      	ldrb	r2, [r7, #15]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d109      	bne.n	8002f98 <M8N_UBX_CHKSUM_Check+0x64>
 8002f84:	78fb      	ldrb	r3, [r7, #3]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	7bba      	ldrb	r2, [r7, #14]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d101      	bne.n	8002f98 <M8N_UBX_CHKSUM_Check+0x64>
 8002f94:	2301      	movs	r3, #1
 8002f96:	e000      	b.n	8002f9a <M8N_UBX_CHKSUM_Check+0x66>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	b2db      	uxtb	r3, r3
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <M8N_UBX_NAV_POSLLH_Parsing>:

void M8N_UBX_NAV_POSLLH_Parsing(unsigned char* data, M8N_UBX_NAV_POSLLH* posllh)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
	posllh->CLASS 	= 	data[2];
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	789a      	ldrb	r2, [r3, #2]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	701a      	strb	r2, [r3, #0]
	posllh->ID 		= 	data[3];
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	78da      	ldrb	r2, [r3, #3]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	705a      	strb	r2, [r3, #1]
	posllh->LENGTH  =	data[4] | data[5] <<8;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	b21a      	sxth	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	3305      	adds	r3, #5
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	021b      	lsls	r3, r3, #8
 8002fd2:	b21b      	sxth	r3, r3
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	b21b      	sxth	r3, r3
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	805a      	strh	r2, [r3, #2]

	posllh->iTOW	=	data[6]  | data[7]  << 8 | data[8]  << 16 | data[9]  << 24;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	3306      	adds	r3, #6
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3307      	adds	r3, #7
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	021b      	lsls	r3, r3, #8
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3308      	adds	r3, #8
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	041b      	lsls	r3, r3, #16
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	3309      	adds	r3, #9
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	061b      	lsls	r3, r3, #24
 8003002:	4313      	orrs	r3, r2
 8003004:	461a      	mov	r2, r3
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	605a      	str	r2, [r3, #4]
	posllh->lon		=	data[10] | data[11] << 8 | data[12] << 16 | data[13] << 24;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	330a      	adds	r3, #10
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	461a      	mov	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	330b      	adds	r3, #11
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	021b      	lsls	r3, r3, #8
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	330c      	adds	r3, #12
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	041b      	lsls	r3, r3, #16
 8003024:	431a      	orrs	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	330d      	adds	r3, #13
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	061b      	lsls	r3, r3, #24
 800302e:	431a      	orrs	r2, r3
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	609a      	str	r2, [r3, #8]
	posllh->lat		=	data[14] | data[15] << 8 | data[16] << 16 | data[17] << 24;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	330e      	adds	r3, #14
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	461a      	mov	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	330f      	adds	r3, #15
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	021b      	lsls	r3, r3, #8
 8003044:	431a      	orrs	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3310      	adds	r3, #16
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	041b      	lsls	r3, r3, #16
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3311      	adds	r3, #17
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	061b      	lsls	r3, r3, #24
 8003058:	431a      	orrs	r2, r3
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	60da      	str	r2, [r3, #12]
	posllh->height	=	data[18] | data[19] << 8 | data[20] << 16 | data[21] << 24;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	3312      	adds	r3, #18
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	461a      	mov	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3313      	adds	r3, #19
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	021b      	lsls	r3, r3, #8
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3314      	adds	r3, #20
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	041b      	lsls	r3, r3, #16
 8003078:	431a      	orrs	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3315      	adds	r3, #21
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	061b      	lsls	r3, r3, #24
 8003082:	431a      	orrs	r2, r3
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	611a      	str	r2, [r3, #16]
	posllh->hMSL	=	data[22] | data[23] << 8 | data[24] << 16 | data[25] << 24;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3316      	adds	r3, #22
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	461a      	mov	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3317      	adds	r3, #23
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	021b      	lsls	r3, r3, #8
 8003098:	431a      	orrs	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3318      	adds	r3, #24
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	041b      	lsls	r3, r3, #16
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3319      	adds	r3, #25
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	061b      	lsls	r3, r3, #24
 80030ac:	431a      	orrs	r2, r3
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	615a      	str	r2, [r3, #20]
	posllh->hAcc	=	data[26] | data[27] << 8 | data[28] << 16 | data[29] << 24;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	331a      	adds	r3, #26
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	461a      	mov	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	331b      	adds	r3, #27
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	021b      	lsls	r3, r3, #8
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	331c      	adds	r3, #28
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	041b      	lsls	r3, r3, #16
 80030cc:	431a      	orrs	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	331d      	adds	r3, #29
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	061b      	lsls	r3, r3, #24
 80030d6:	4313      	orrs	r3, r2
 80030d8:	461a      	mov	r2, r3
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	619a      	str	r2, [r3, #24]
	posllh->vAcc	=	data[30] | data[31] << 8 | data[32] << 16 | data[33] << 24;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	331e      	adds	r3, #30
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	461a      	mov	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	331f      	adds	r3, #31
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	021b      	lsls	r3, r3, #8
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3320      	adds	r3, #32
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	041b      	lsls	r3, r3, #16
 80030f8:	431a      	orrs	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	3321      	adds	r3, #33	@ 0x21
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	061b      	lsls	r3, r3, #24
 8003102:	4313      	orrs	r3, r2
 8003104:	461a      	mov	r2, r3
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	61da      	str	r2, [r3, #28]

//	posllh->lon_f64 =  posllh->lon / 10000000.;
//	posllh->lat_f64 =  posllh->lat / 10000000.;

}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
	...

08003118 <Quaternion_Update>:
float BNO080_Roll;
float BNO080_Pitch;
float BNO080_Yaw;

void Quaternion_Update(float* q)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;
	float norm;

	norm = invSqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);    // normalize quaternion
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	ed93 7a00 	vldr	s14, [r3]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	edd3 7a00 	vldr	s15, [r3]
 800312c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3304      	adds	r3, #4
 8003134:	edd3 6a00 	vldr	s13, [r3]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3304      	adds	r3, #4
 800313c:	edd3 7a00 	vldr	s15, [r3]
 8003140:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003144:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3308      	adds	r3, #8
 800314c:	edd3 6a00 	vldr	s13, [r3]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3308      	adds	r3, #8
 8003154:	edd3 7a00 	vldr	s15, [r3]
 8003158:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800315c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	330c      	adds	r3, #12
 8003164:	edd3 6a00 	vldr	s13, [r3]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	330c      	adds	r3, #12
 800316c:	edd3 7a00 	vldr	s15, [r3]
 8003170:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003174:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003178:	eeb0 0a67 	vmov.f32	s0, s15
 800317c:	f000 f90e 	bl	800339c <invSqrt>
 8003180:	ed87 0a07 	vstr	s0, [r7, #28]
	
	q1 = q[0] * norm; //x
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	edd3 7a00 	vldr	s15, [r3]
 800318a:	ed97 7a07 	vldr	s14, [r7, #28]
 800318e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003192:	edc7 7a06 	vstr	s15, [r7, #24]
	q2 = q[1] * norm; //y
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	3304      	adds	r3, #4
 800319a:	edd3 7a00 	vldr	s15, [r3]
 800319e:	ed97 7a07 	vldr	s14, [r7, #28]
 80031a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a6:	edc7 7a05 	vstr	s15, [r7, #20]
	q3 = q[2] * norm; //z
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	3308      	adds	r3, #8
 80031ae:	edd3 7a00 	vldr	s15, [r3]
 80031b2:	ed97 7a07 	vldr	s14, [r7, #28]
 80031b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ba:	edc7 7a04 	vstr	s15, [r7, #16]
	q4 = q[3] * norm; //w
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	330c      	adds	r3, #12
 80031c2:	edd3 7a00 	vldr	s15, [r3]
 80031c6:	ed97 7a07 	vldr	s14, [r7, #28]
 80031ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ce:	edc7 7a03 	vstr	s15, [r7, #12]

	BNO080_Pitch = atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 80031d2:	ed97 7a05 	vldr	s14, [r7, #20]
 80031d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80031da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031de:	edd7 6a06 	vldr	s13, [r7, #24]
 80031e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80031e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ee:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80031f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80031f6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80031fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80031fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003202:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003206:	edd7 7a04 	vldr	s15, [r7, #16]
 800320a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800320e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003212:	edd7 7a03 	vldr	s15, [r7, #12]
 8003216:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800321a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800321e:	eef0 0a67 	vmov.f32	s1, s15
 8003222:	eeb0 0a66 	vmov.f32	s0, s13
 8003226:	f00b fbad 	bl	800e984 <atan2f>
 800322a:	eef0 7a40 	vmov.f32	s15, s0
 800322e:	4b55      	ldr	r3, [pc, #340]	@ (8003384 <Quaternion_Update+0x26c>)
 8003230:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  = -asinf(2.0f * (q2*q4 - q1*q3));
 8003234:	ed97 7a05 	vldr	s14, [r7, #20]
 8003238:	edd7 7a03 	vldr	s15, [r7, #12]
 800323c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003240:	edd7 6a06 	vldr	s13, [r7, #24]
 8003244:	edd7 7a04 	vldr	s15, [r7, #16]
 8003248:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800324c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003250:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003254:	eeb0 0a67 	vmov.f32	s0, s15
 8003258:	f00b fb68 	bl	800e92c <asinf>
 800325c:	eef0 7a40 	vmov.f32	s15, s0
 8003260:	eef1 7a67 	vneg.f32	s15, s15
 8003264:	4b48      	ldr	r3, [pc, #288]	@ (8003388 <Quaternion_Update+0x270>)
 8003266:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   = atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 800326a:	ed97 7a06 	vldr	s14, [r7, #24]
 800326e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003272:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003276:	edd7 6a04 	vldr	s13, [r7, #16]
 800327a:	edd7 7a03 	vldr	s15, [r7, #12]
 800327e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003282:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003286:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800328a:	edd7 7a06 	vldr	s15, [r7, #24]
 800328e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003292:	edd7 7a05 	vldr	s15, [r7, #20]
 8003296:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800329a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800329e:	edd7 7a04 	vldr	s15, [r7, #16]
 80032a2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80032a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80032ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80032b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032b6:	eef0 0a67 	vmov.f32	s1, s15
 80032ba:	eeb0 0a66 	vmov.f32	s0, s13
 80032be:	f00b fb61 	bl	800e984 <atan2f>
 80032c2:	eef0 7a40 	vmov.f32	s15, s0
 80032c6:	4b31      	ldr	r3, [pc, #196]	@ (800338c <Quaternion_Update+0x274>)
 80032c8:	edc3 7a00 	vstr	s15, [r3]

	BNO080_Pitch *= _180_DIV_PI;
 80032cc:	4b2d      	ldr	r3, [pc, #180]	@ (8003384 <Quaternion_Update+0x26c>)
 80032ce:	edd3 7a00 	vldr	s15, [r3]
 80032d2:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8003390 <Quaternion_Update+0x278>
 80032d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032da:	4b2a      	ldr	r3, [pc, #168]	@ (8003384 <Quaternion_Update+0x26c>)
 80032dc:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  *= _180_DIV_PI;
 80032e0:	4b29      	ldr	r3, [pc, #164]	@ (8003388 <Quaternion_Update+0x270>)
 80032e2:	edd3 7a00 	vldr	s15, [r3]
 80032e6:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8003390 <Quaternion_Update+0x278>
 80032ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032ee:	4b26      	ldr	r3, [pc, #152]	@ (8003388 <Quaternion_Update+0x270>)
 80032f0:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   *= _180_DIV_PI;
 80032f4:	4b25      	ldr	r3, [pc, #148]	@ (800338c <Quaternion_Update+0x274>)
 80032f6:	edd3 7a00 	vldr	s15, [r3]
 80032fa:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8003390 <Quaternion_Update+0x278>
 80032fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003302:	4b22      	ldr	r3, [pc, #136]	@ (800338c <Quaternion_Update+0x274>)
 8003304:	edc3 7a00 	vstr	s15, [r3]
	
	if(BNO080_Yaw>=0)
 8003308:	4b20      	ldr	r3, [pc, #128]	@ (800338c <Quaternion_Update+0x274>)
 800330a:	edd3 7a00 	vldr	s15, [r3]
 800330e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003316:	db0a      	blt.n	800332e <Quaternion_Update+0x216>
		BNO080_Yaw = 360.f - BNO080_Yaw;
 8003318:	4b1c      	ldr	r3, [pc, #112]	@ (800338c <Quaternion_Update+0x274>)
 800331a:	edd3 7a00 	vldr	s15, [r3]
 800331e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8003394 <Quaternion_Update+0x27c>
 8003322:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003326:	4b19      	ldr	r3, [pc, #100]	@ (800338c <Quaternion_Update+0x274>)
 8003328:	edc3 7a00 	vstr	s15, [r3]
 800332c:	e007      	b.n	800333e <Quaternion_Update+0x226>
	else	
		BNO080_Yaw = -BNO080_Yaw;
 800332e:	4b17      	ldr	r3, [pc, #92]	@ (800338c <Quaternion_Update+0x274>)
 8003330:	edd3 7a00 	vldr	s15, [r3]
 8003334:	eef1 7a67 	vneg.f32	s15, s15
 8003338:	4b14      	ldr	r3, [pc, #80]	@ (800338c <Quaternion_Update+0x274>)
 800333a:	edc3 7a00 	vstr	s15, [r3]
	
	
	if(BNO080_Pitch>=0)
 800333e:	4b11      	ldr	r3, [pc, #68]	@ (8003384 <Quaternion_Update+0x26c>)
 8003340:	edd3 7a00 	vldr	s15, [r3]
 8003344:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334c:	db0a      	blt.n	8003364 <Quaternion_Update+0x24c>
		BNO080_Pitch = 180.f - BNO080_Pitch;
 800334e:	4b0d      	ldr	r3, [pc, #52]	@ (8003384 <Quaternion_Update+0x26c>)
 8003350:	edd3 7a00 	vldr	s15, [r3]
 8003354:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8003398 <Quaternion_Update+0x280>
 8003358:	ee77 7a67 	vsub.f32	s15, s14, s15
 800335c:	4b09      	ldr	r3, [pc, #36]	@ (8003384 <Quaternion_Update+0x26c>)
 800335e:	edc3 7a00 	vstr	s15, [r3]
	else
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
}
 8003362:	e00b      	b.n	800337c <Quaternion_Update+0x264>
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
 8003364:	4b07      	ldr	r3, [pc, #28]	@ (8003384 <Quaternion_Update+0x26c>)
 8003366:	edd3 7a00 	vldr	s15, [r3]
 800336a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8003398 <Quaternion_Update+0x280>
 800336e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003372:	eef1 7a67 	vneg.f32	s15, s15
 8003376:	4b03      	ldr	r3, [pc, #12]	@ (8003384 <Quaternion_Update+0x26c>)
 8003378:	edc3 7a00 	vstr	s15, [r3]
}
 800337c:	bf00      	nop
 800337e:	3720      	adds	r7, #32
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	20000344 	.word	0x20000344
 8003388:	20000340 	.word	0x20000340
 800338c:	20000348 	.word	0x20000348
 8003390:	42652ee1 	.word	0x42652ee1
 8003394:	43b40000 	.word	0x43b40000
 8003398:	43340000 	.word	0x43340000

0800339c <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x)
{
 800339c:	b480      	push	{r7}
 800339e:	b087      	sub	sp, #28
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 80033a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80033aa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80033ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033b2:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80033ba:	f107 0310 	add.w	r3, r7, #16
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	105a      	asrs	r2, r3, #1
 80033c6:	4b12      	ldr	r3, [pc, #72]	@ (8003410 <invSqrt+0x74>)
 80033c8:	1a9b      	subs	r3, r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80033cc:	f107 030c 	add.w	r3, r7, #12
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80033d4:	ed97 7a04 	vldr	s14, [r7, #16]
 80033d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80033dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80033e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033e8:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80033ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80033f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033f8:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	ee07 3a90 	vmov	s15, r3
}
 8003402:	eeb0 0a67 	vmov.f32	s0, s15
 8003406:	371c      	adds	r7, #28
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	5f3759df 	.word	0x5f3759df

08003414 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800341a:	463b      	mov	r3, r7
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	605a      	str	r2, [r3, #4]
 8003422:	609a      	str	r2, [r3, #8]
 8003424:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003426:	4b21      	ldr	r3, [pc, #132]	@ (80034ac <MX_ADC1_Init+0x98>)
 8003428:	4a21      	ldr	r2, [pc, #132]	@ (80034b0 <MX_ADC1_Init+0x9c>)
 800342a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800342c:	4b1f      	ldr	r3, [pc, #124]	@ (80034ac <MX_ADC1_Init+0x98>)
 800342e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003432:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003434:	4b1d      	ldr	r3, [pc, #116]	@ (80034ac <MX_ADC1_Init+0x98>)
 8003436:	2200      	movs	r2, #0
 8003438:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800343a:	4b1c      	ldr	r3, [pc, #112]	@ (80034ac <MX_ADC1_Init+0x98>)
 800343c:	2200      	movs	r2, #0
 800343e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003440:	4b1a      	ldr	r3, [pc, #104]	@ (80034ac <MX_ADC1_Init+0x98>)
 8003442:	2201      	movs	r2, #1
 8003444:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003446:	4b19      	ldr	r3, [pc, #100]	@ (80034ac <MX_ADC1_Init+0x98>)
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800344e:	4b17      	ldr	r3, [pc, #92]	@ (80034ac <MX_ADC1_Init+0x98>)
 8003450:	2200      	movs	r2, #0
 8003452:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003454:	4b15      	ldr	r3, [pc, #84]	@ (80034ac <MX_ADC1_Init+0x98>)
 8003456:	4a17      	ldr	r2, [pc, #92]	@ (80034b4 <MX_ADC1_Init+0xa0>)
 8003458:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800345a:	4b14      	ldr	r3, [pc, #80]	@ (80034ac <MX_ADC1_Init+0x98>)
 800345c:	2200      	movs	r2, #0
 800345e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003460:	4b12      	ldr	r3, [pc, #72]	@ (80034ac <MX_ADC1_Init+0x98>)
 8003462:	2201      	movs	r2, #1
 8003464:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003466:	4b11      	ldr	r3, [pc, #68]	@ (80034ac <MX_ADC1_Init+0x98>)
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800346e:	4b0f      	ldr	r3, [pc, #60]	@ (80034ac <MX_ADC1_Init+0x98>)
 8003470:	2201      	movs	r2, #1
 8003472:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003474:	480d      	ldr	r0, [pc, #52]	@ (80034ac <MX_ADC1_Init+0x98>)
 8003476:	f003 fc09 	bl	8006c8c <HAL_ADC_Init>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003480:	f002 f99d 	bl	80057be <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003484:	2308      	movs	r3, #8
 8003486:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003488:	2301      	movs	r3, #1
 800348a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800348c:	2307      	movs	r3, #7
 800348e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003490:	463b      	mov	r3, r7
 8003492:	4619      	mov	r1, r3
 8003494:	4805      	ldr	r0, [pc, #20]	@ (80034ac <MX_ADC1_Init+0x98>)
 8003496:	f003 fd6b 	bl	8006f70 <HAL_ADC_ConfigChannel>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80034a0:	f002 f98d 	bl	80057be <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80034a4:	bf00      	nop
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	2000034c 	.word	0x2000034c
 80034b0:	40012000 	.word	0x40012000
 80034b4:	0f000001 	.word	0x0f000001

080034b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08a      	sub	sp, #40	@ 0x28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c0:	f107 0314 	add.w	r3, r7, #20
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	605a      	str	r2, [r3, #4]
 80034ca:	609a      	str	r2, [r3, #8]
 80034cc:	60da      	str	r2, [r3, #12]
 80034ce:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a2e      	ldr	r2, [pc, #184]	@ (8003590 <HAL_ADC_MspInit+0xd8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d156      	bne.n	8003588 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80034da:	2300      	movs	r3, #0
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	4b2d      	ldr	r3, [pc, #180]	@ (8003594 <HAL_ADC_MspInit+0xdc>)
 80034e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034e2:	4a2c      	ldr	r2, [pc, #176]	@ (8003594 <HAL_ADC_MspInit+0xdc>)
 80034e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80034ea:	4b2a      	ldr	r3, [pc, #168]	@ (8003594 <HAL_ADC_MspInit+0xdc>)
 80034ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034f6:	2300      	movs	r3, #0
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	4b26      	ldr	r3, [pc, #152]	@ (8003594 <HAL_ADC_MspInit+0xdc>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fe:	4a25      	ldr	r2, [pc, #148]	@ (8003594 <HAL_ADC_MspInit+0xdc>)
 8003500:	f043 0302 	orr.w	r3, r3, #2
 8003504:	6313      	str	r3, [r2, #48]	@ 0x30
 8003506:	4b23      	ldr	r3, [pc, #140]	@ (8003594 <HAL_ADC_MspInit+0xdc>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003512:	2301      	movs	r3, #1
 8003514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003516:	2303      	movs	r3, #3
 8003518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351a:	2300      	movs	r3, #0
 800351c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800351e:	f107 0314 	add.w	r3, r7, #20
 8003522:	4619      	mov	r1, r3
 8003524:	481c      	ldr	r0, [pc, #112]	@ (8003598 <HAL_ADC_MspInit+0xe0>)
 8003526:	f004 fcd7 	bl	8007ed8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800352a:	4b1c      	ldr	r3, [pc, #112]	@ (800359c <HAL_ADC_MspInit+0xe4>)
 800352c:	4a1c      	ldr	r2, [pc, #112]	@ (80035a0 <HAL_ADC_MspInit+0xe8>)
 800352e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003530:	4b1a      	ldr	r3, [pc, #104]	@ (800359c <HAL_ADC_MspInit+0xe4>)
 8003532:	2200      	movs	r2, #0
 8003534:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003536:	4b19      	ldr	r3, [pc, #100]	@ (800359c <HAL_ADC_MspInit+0xe4>)
 8003538:	2200      	movs	r2, #0
 800353a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800353c:	4b17      	ldr	r3, [pc, #92]	@ (800359c <HAL_ADC_MspInit+0xe4>)
 800353e:	2200      	movs	r2, #0
 8003540:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8003542:	4b16      	ldr	r3, [pc, #88]	@ (800359c <HAL_ADC_MspInit+0xe4>)
 8003544:	2200      	movs	r2, #0
 8003546:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003548:	4b14      	ldr	r3, [pc, #80]	@ (800359c <HAL_ADC_MspInit+0xe4>)
 800354a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800354e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003550:	4b12      	ldr	r3, [pc, #72]	@ (800359c <HAL_ADC_MspInit+0xe4>)
 8003552:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003556:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003558:	4b10      	ldr	r3, [pc, #64]	@ (800359c <HAL_ADC_MspInit+0xe4>)
 800355a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800355e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003560:	4b0e      	ldr	r3, [pc, #56]	@ (800359c <HAL_ADC_MspInit+0xe4>)
 8003562:	2200      	movs	r2, #0
 8003564:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003566:	4b0d      	ldr	r3, [pc, #52]	@ (800359c <HAL_ADC_MspInit+0xe4>)
 8003568:	2200      	movs	r2, #0
 800356a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800356c:	480b      	ldr	r0, [pc, #44]	@ (800359c <HAL_ADC_MspInit+0xe4>)
 800356e:	f004 f8b1 	bl	80076d4 <HAL_DMA_Init>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8003578:	f002 f921 	bl	80057be <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a07      	ldr	r2, [pc, #28]	@ (800359c <HAL_ADC_MspInit+0xe4>)
 8003580:	639a      	str	r2, [r3, #56]	@ 0x38
 8003582:	4a06      	ldr	r2, [pc, #24]	@ (800359c <HAL_ADC_MspInit+0xe4>)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003588:	bf00      	nop
 800358a:	3728      	adds	r7, #40	@ 0x28
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40012000 	.word	0x40012000
 8003594:	40023800 	.word	0x40023800
 8003598:	40020400 	.word	0x40020400
 800359c:	20000394 	.word	0x20000394
 80035a0:	40026410 	.word	0x40026410

080035a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80035aa:	2300      	movs	r3, #0
 80035ac:	607b      	str	r3, [r7, #4]
 80035ae:	4b0c      	ldr	r3, [pc, #48]	@ (80035e0 <MX_DMA_Init+0x3c>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b2:	4a0b      	ldr	r2, [pc, #44]	@ (80035e0 <MX_DMA_Init+0x3c>)
 80035b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80035b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ba:	4b09      	ldr	r3, [pc, #36]	@ (80035e0 <MX_DMA_Init+0x3c>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035c2:	607b      	str	r3, [r7, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80035c6:	2200      	movs	r2, #0
 80035c8:	2100      	movs	r1, #0
 80035ca:	2038      	movs	r0, #56	@ 0x38
 80035cc:	f004 f84b 	bl	8007666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80035d0:	2038      	movs	r0, #56	@ 0x38
 80035d2:	f004 f864 	bl	800769e <HAL_NVIC_EnableIRQ>

}
 80035d6:	bf00      	nop
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40023800 	.word	0x40023800

080035e4 <LL_GPIO_SetOutputPin>:
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	619a      	str	r2, [r3, #24]
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <LL_GPIO_ResetOutputPin>:
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	041a      	lsls	r2, r3, #16
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	619a      	str	r2, [r3, #24]
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
	...

08003620 <LL_AHB1_GRP1_EnableClock>:
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003628:	4b08      	ldr	r3, [pc, #32]	@ (800364c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800362a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800362c:	4907      	ldr	r1, [pc, #28]	@ (800364c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4313      	orrs	r3, r2
 8003632:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003634:	4b05      	ldr	r3, [pc, #20]	@ (800364c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003636:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4013      	ands	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800363e:	68fb      	ldr	r3, [r7, #12]
}
 8003640:	bf00      	nop
 8003642:	3714      	adds	r7, #20
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	40023800 	.word	0x40023800

08003650 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003656:	463b      	mov	r3, r7
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	605a      	str	r2, [r3, #4]
 800365e:	609a      	str	r2, [r3, #8]
 8003660:	60da      	str	r2, [r3, #12]
 8003662:	611a      	str	r2, [r3, #16]
 8003664:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003666:	2004      	movs	r0, #4
 8003668:	f7ff ffda 	bl	8003620 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800366c:	2080      	movs	r0, #128	@ 0x80
 800366e:	f7ff ffd7 	bl	8003620 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003672:	2001      	movs	r0, #1
 8003674:	f7ff ffd4 	bl	8003620 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003678:	2002      	movs	r0, #2
 800367a:	f7ff ffd1 	bl	8003620 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800367e:	2008      	movs	r0, #8
 8003680:	f7ff ffce 	bl	8003620 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8003684:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003688:	482e      	ldr	r0, [pc, #184]	@ (8003744 <MX_GPIO_Init+0xf4>)
 800368a:	f7ff ffab 	bl	80035e4 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4
 800368e:	f240 2117 	movw	r1, #535	@ 0x217
 8003692:	482c      	ldr	r0, [pc, #176]	@ (8003744 <MX_GPIO_Init+0xf4>)
 8003694:	f7ff ffb4 	bl	8003600 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_6);
 8003698:	f44f 5182 	mov.w	r1, #4160	@ 0x1040
 800369c:	482a      	ldr	r0, [pc, #168]	@ (8003748 <MX_GPIO_Init+0xf8>)
 800369e:	f7ff ffaf 	bl	8003600 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 80036a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80036a6:	4829      	ldr	r0, [pc, #164]	@ (800374c <MX_GPIO_Init+0xfc>)
 80036a8:	f7ff ffaa 	bl	8003600 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2
 80036ac:	f242 2317 	movw	r3, #8727	@ 0x2217
 80036b0:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80036b2:	2301      	movs	r3, #1
 80036b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80036b6:	2300      	movs	r3, #0
 80036b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80036ba:	2300      	movs	r3, #0
 80036bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80036be:	2300      	movs	r3, #0
 80036c0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036c2:	463b      	mov	r3, r7
 80036c4:	4619      	mov	r1, r3
 80036c6:	481f      	ldr	r0, [pc, #124]	@ (8003744 <MX_GPIO_Init+0xf4>)
 80036c8:	f007 fc35 	bl	800af36 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_8;
 80036cc:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80036d0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80036d2:	2300      	movs	r3, #0
 80036d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80036d6:	2300      	movs	r3, #0
 80036d8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036da:	463b      	mov	r3, r7
 80036dc:	4619      	mov	r1, r3
 80036de:	4819      	ldr	r0, [pc, #100]	@ (8003744 <MX_GPIO_Init+0xf4>)
 80036e0:	f007 fc29 	bl	800af36 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_6;
 80036e4:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 80036e8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80036ea:	2301      	movs	r3, #1
 80036ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80036ee:	2300      	movs	r3, #0
 80036f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80036f2:	2300      	movs	r3, #0
 80036f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80036f6:	2300      	movs	r3, #0
 80036f8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036fa:	463b      	mov	r3, r7
 80036fc:	4619      	mov	r1, r3
 80036fe:	4812      	ldr	r0, [pc, #72]	@ (8003748 <MX_GPIO_Init+0xf8>)
 8003700:	f007 fc19 	bl	800af36 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8003704:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003708:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800370a:	2301      	movs	r3, #1
 800370c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800370e:	2300      	movs	r3, #0
 8003710:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003712:	2300      	movs	r3, #0
 8003714:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003716:	2300      	movs	r3, #0
 8003718:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800371a:	463b      	mov	r3, r7
 800371c:	4619      	mov	r1, r3
 800371e:	480b      	ldr	r0, [pc, #44]	@ (800374c <MX_GPIO_Init+0xfc>)
 8003720:	f007 fc09 	bl	800af36 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8003724:	2380      	movs	r3, #128	@ 0x80
 8003726:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003728:	2300      	movs	r3, #0
 800372a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800372c:	2300      	movs	r3, #0
 800372e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003730:	463b      	mov	r3, r7
 8003732:	4619      	mov	r1, r3
 8003734:	4804      	ldr	r0, [pc, #16]	@ (8003748 <MX_GPIO_Init+0xf8>)
 8003736:	f007 fbfe 	bl	800af36 <LL_GPIO_Init>

}
 800373a:	bf00      	nop
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40020800 	.word	0x40020800
 8003748:	40020400 	.word	0x40020400
 800374c:	40020000 	.word	0x40020000

08003750 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003754:	4b12      	ldr	r3, [pc, #72]	@ (80037a0 <MX_I2C1_Init+0x50>)
 8003756:	4a13      	ldr	r2, [pc, #76]	@ (80037a4 <MX_I2C1_Init+0x54>)
 8003758:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800375a:	4b11      	ldr	r3, [pc, #68]	@ (80037a0 <MX_I2C1_Init+0x50>)
 800375c:	4a12      	ldr	r2, [pc, #72]	@ (80037a8 <MX_I2C1_Init+0x58>)
 800375e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003760:	4b0f      	ldr	r3, [pc, #60]	@ (80037a0 <MX_I2C1_Init+0x50>)
 8003762:	2200      	movs	r2, #0
 8003764:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003766:	4b0e      	ldr	r3, [pc, #56]	@ (80037a0 <MX_I2C1_Init+0x50>)
 8003768:	2200      	movs	r2, #0
 800376a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800376c:	4b0c      	ldr	r3, [pc, #48]	@ (80037a0 <MX_I2C1_Init+0x50>)
 800376e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003772:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003774:	4b0a      	ldr	r3, [pc, #40]	@ (80037a0 <MX_I2C1_Init+0x50>)
 8003776:	2200      	movs	r2, #0
 8003778:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800377a:	4b09      	ldr	r3, [pc, #36]	@ (80037a0 <MX_I2C1_Init+0x50>)
 800377c:	2200      	movs	r2, #0
 800377e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003780:	4b07      	ldr	r3, [pc, #28]	@ (80037a0 <MX_I2C1_Init+0x50>)
 8003782:	2200      	movs	r2, #0
 8003784:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003786:	4b06      	ldr	r3, [pc, #24]	@ (80037a0 <MX_I2C1_Init+0x50>)
 8003788:	2200      	movs	r2, #0
 800378a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800378c:	4804      	ldr	r0, [pc, #16]	@ (80037a0 <MX_I2C1_Init+0x50>)
 800378e:	f004 fd3f 	bl	8008210 <HAL_I2C_Init>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003798:	f002 f811 	bl	80057be <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800379c:	bf00      	nop
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	200003f4 	.word	0x200003f4
 80037a4:	40005400 	.word	0x40005400
 80037a8:	00061a80 	.word	0x00061a80

080037ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08a      	sub	sp, #40	@ 0x28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b4:	f107 0314 	add.w	r3, r7, #20
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	605a      	str	r2, [r3, #4]
 80037be:	609a      	str	r2, [r3, #8]
 80037c0:	60da      	str	r2, [r3, #12]
 80037c2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a19      	ldr	r2, [pc, #100]	@ (8003830 <HAL_I2C_MspInit+0x84>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d12c      	bne.n	8003828 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ce:	2300      	movs	r3, #0
 80037d0:	613b      	str	r3, [r7, #16]
 80037d2:	4b18      	ldr	r3, [pc, #96]	@ (8003834 <HAL_I2C_MspInit+0x88>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d6:	4a17      	ldr	r2, [pc, #92]	@ (8003834 <HAL_I2C_MspInit+0x88>)
 80037d8:	f043 0302 	orr.w	r3, r3, #2
 80037dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80037de:	4b15      	ldr	r3, [pc, #84]	@ (8003834 <HAL_I2C_MspInit+0x88>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	613b      	str	r3, [r7, #16]
 80037e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80037ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80037ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037f0:	2312      	movs	r3, #18
 80037f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f4:	2300      	movs	r3, #0
 80037f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037f8:	2303      	movs	r3, #3
 80037fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80037fc:	2304      	movs	r3, #4
 80037fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003800:	f107 0314 	add.w	r3, r7, #20
 8003804:	4619      	mov	r1, r3
 8003806:	480c      	ldr	r0, [pc, #48]	@ (8003838 <HAL_I2C_MspInit+0x8c>)
 8003808:	f004 fb66 	bl	8007ed8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800380c:	2300      	movs	r3, #0
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	4b08      	ldr	r3, [pc, #32]	@ (8003834 <HAL_I2C_MspInit+0x88>)
 8003812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003814:	4a07      	ldr	r2, [pc, #28]	@ (8003834 <HAL_I2C_MspInit+0x88>)
 8003816:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800381a:	6413      	str	r3, [r2, #64]	@ 0x40
 800381c:	4b05      	ldr	r3, [pc, #20]	@ (8003834 <HAL_I2C_MspInit+0x88>)
 800381e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003820:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003828:	bf00      	nop
 800382a:	3728      	adds	r7, #40	@ 0x28
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	40005400 	.word	0x40005400
 8003834:	40023800 	.word	0x40023800
 8003838:	40020400 	.word	0x40020400

0800383c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f043 0201 	orr.w	r2, r3, #1
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	601a      	str	r2, [r3, #0]
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1a      	ldr	r2, [r3, #32]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	431a      	orrs	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	621a      	str	r2, [r3, #32]
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
 8003886:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a1a      	ldr	r2, [r3, #32]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	43db      	mvns	r3, r3
 8003890:	401a      	ands	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	621a      	str	r2, [r3, #32]
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f043 0201 	orr.w	r2, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	60da      	str	r2, [r3, #12]
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <LL_USART_IsActiveFlag_TXE>:
{
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038d2:	2b80      	cmp	r3, #128	@ 0x80
 80038d4:	bf0c      	ite	eq
 80038d6:	2301      	moveq	r3, #1
 80038d8:	2300      	movne	r3, #0
 80038da:	b2db      	uxtb	r3, r3
}
 80038dc:	4618      	mov	r0, r3
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <LL_USART_EnableIT_RXNE>:
{
 80038e8:	b480      	push	{r7}
 80038ea:	b089      	sub	sp, #36	@ 0x24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	330c      	adds	r3, #12
 80038f4:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	e853 3f00 	ldrex	r3, [r3]
 80038fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	f043 0320 	orr.w	r3, r3, #32
 8003904:	61fb      	str	r3, [r7, #28]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	330c      	adds	r3, #12
 800390a:	69fa      	ldr	r2, [r7, #28]
 800390c:	61ba      	str	r2, [r7, #24]
 800390e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003910:	6979      	ldr	r1, [r7, #20]
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	e841 2300 	strex	r3, r2, [r1]
 8003918:	613b      	str	r3, [r7, #16]
   return(result);
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1e7      	bne.n	80038f0 <LL_USART_EnableIT_RXNE+0x8>
}
 8003920:	bf00      	nop
 8003922:	bf00      	nop
 8003924:	3724      	adds	r7, #36	@ 0x24
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <LL_USART_TransmitData8>:
{
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	460b      	mov	r3, r1
 8003938:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800393a:	78fa      	ldrb	r2, [r7, #3]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	605a      	str	r2, [r3, #4]
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <LL_GPIO_SetOutputPin>:
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	619a      	str	r2, [r3, #24]
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <LL_GPIO_ResetOutputPin>:
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	041a      	lsls	r2, r3, #16
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	619a      	str	r2, [r3, #24]
}
 800397a:	bf00      	nop
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8003986:	b480      	push	{r7}
 8003988:	b085      	sub	sp, #20
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
 800398e:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	4013      	ands	r3, r2
 800399c:	041a      	lsls	r2, r3, #16
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	43d9      	mvns	r1, r3
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	400b      	ands	r3, r1
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	619a      	str	r2, [r3, #24]
}
 80039ac:	bf00      	nop
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char* p, int len)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++)
 80039c4:	2300      	movs	r3, #0
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	e011      	b.n	80039ee <_write+0x36>
	{
		while(!LL_USART_IsActiveFlag_TXE(USART6));
 80039ca:	bf00      	nop
 80039cc:	480c      	ldr	r0, [pc, #48]	@ (8003a00 <_write+0x48>)
 80039ce:	f7ff ff78 	bl	80038c2 <LL_USART_IsActiveFlag_TXE>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0f9      	beq.n	80039cc <_write+0x14>
		LL_USART_TransmitData8(USART6, *(p+i));
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	4413      	add	r3, r2
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	4619      	mov	r1, r3
 80039e2:	4807      	ldr	r0, [pc, #28]	@ (8003a00 <_write+0x48>)
 80039e4:	f7ff ffa3 	bl	800392e <LL_USART_TransmitData8>
	for(int i=0; i<len; i++)
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	3301      	adds	r3, #1
 80039ec:	617b      	str	r3, [r7, #20]
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	dbe9      	blt.n	80039ca <_write+0x12>
	}
	return len;
 80039f6:	687b      	ldr	r3, [r7, #4]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3718      	adds	r7, #24
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40011400 	.word	0x40011400

08003a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a04:	b590      	push	{r4, r7, lr}
 8003a06:	b095      	sub	sp, #84	@ 0x54
 8003a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	float q[4];
	float quatRadianAccuracy;
	unsigned char buf_read[16] = {1};
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	61bb      	str	r3, [r7, #24]
 8003a0e:	f107 031c 	add.w	r3, r7, #28
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	605a      	str	r2, [r3, #4]
 8003a18:	609a      	str	r2, [r3, #8]
	unsigned char buf_write[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8003a1a:	4b98      	ldr	r3, [pc, #608]	@ (8003c7c <main+0x278>)
 8003a1c:	f107 0408 	add.w	r4, r7, #8
 8003a20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	unsigned short adcVal;

	short gyro_x_offset = -12, gyro_y_offset = 11, gyro_z_offset = 12;
 8003a26:	f64f 73f4 	movw	r3, #65524	@ 0xfff4
 8003a2a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003a2e:	230b      	movs	r3, #11
 8003a30:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8003a34:	230c      	movs	r3, #12
 8003a36:	87fb      	strh	r3, [r7, #62]	@ 0x3e
	unsigned char motor_arming_flag = 0;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	unsigned short iBus_SwA_Prev = 0;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

	unsigned char iBus_rx_cnt=0;
 8003a44:	2300      	movs	r3, #0
 8003a46:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a4a:	f003 f889 	bl	8006b60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a4e:	f001 f96d 	bl	8004d2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a52:	f7ff fdfd 	bl	8003650 <MX_GPIO_Init>
  MX_DMA_Init();
 8003a56:	f7ff fda5 	bl	80035a4 <MX_DMA_Init>
  MX_TIM3_Init();
 8003a5a:	f002 fc5b 	bl	8006314 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8003a5e:	f002 ffa5 	bl	80069ac <MX_USART6_UART_Init>
  MX_SPI2_Init();
 8003a62:	f001 ff5f 	bl	8005924 <MX_SPI2_Init>
  MX_SPI1_Init();
 8003a66:	f001 ff0b 	bl	8005880 <MX_SPI1_Init>
  MX_SPI3_Init();
 8003a6a:	f001 ffaf 	bl	80059cc <MX_SPI3_Init>
  MX_UART4_Init();
 8003a6e:	f002 fe99 	bl	80067a4 <MX_UART4_Init>
  MX_UART5_Init();
 8003a72:	f002 fef9 	bl	8006868 <MX_UART5_Init>
  MX_TIM5_Init();
 8003a76:	f002 fcc1 	bl	80063fc <MX_TIM5_Init>
  MX_I2C1_Init();
 8003a7a:	f7ff fe69 	bl	8003750 <MX_I2C1_Init>
  MX_ADC1_Init();
 8003a7e:	f7ff fcc9 	bl	8003414 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8003a82:	f002 ff69 	bl	8006958 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8003a86:	f002 fd5b 	bl	8006540 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM3); //Buzzer
 8003a8a:	487d      	ldr	r0, [pc, #500]	@ (8003c80 <main+0x27c>)
 8003a8c:	f7ff fed6 	bl	800383c <LL_TIM_EnableCounter>

  LL_TIM_EnableCounter(TIM7); //10Hz, 50Hz, 1kHz loop
 8003a90:	487c      	ldr	r0, [pc, #496]	@ (8003c84 <main+0x280>)
 8003a92:	f7ff fed3 	bl	800383c <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_UPDATE(TIM7);
 8003a96:	487b      	ldr	r0, [pc, #492]	@ (8003c84 <main+0x280>)
 8003a98:	f7ff ff03 	bl	80038a2 <LL_TIM_EnableIT_UPDATE>

  LL_USART_EnableIT_RXNE(USART6); //Debug UART
 8003a9c:	487a      	ldr	r0, [pc, #488]	@ (8003c88 <main+0x284>)
 8003a9e:	f7ff ff23 	bl	80038e8 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART4); //GPS
 8003aa2:	487a      	ldr	r0, [pc, #488]	@ (8003c8c <main+0x288>)
 8003aa4:	f7ff ff20 	bl	80038e8 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART5); //FS-iA6B
 8003aa8:	4879      	ldr	r0, [pc, #484]	@ (8003c90 <main+0x28c>)
 8003aaa:	f7ff ff1d 	bl	80038e8 <LL_USART_EnableIT_RXNE>

  LL_TIM_EnableCounter(TIM5); //Motor PWM
 8003aae:	4879      	ldr	r0, [pc, #484]	@ (8003c94 <main+0x290>)
 8003ab0:	f7ff fec4 	bl	800383c <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH1);
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	4877      	ldr	r0, [pc, #476]	@ (8003c94 <main+0x290>)
 8003ab8:	f7ff fed0 	bl	800385c <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH2);
 8003abc:	2110      	movs	r1, #16
 8003abe:	4875      	ldr	r0, [pc, #468]	@ (8003c94 <main+0x290>)
 8003ac0:	f7ff fecc 	bl	800385c <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH3);
 8003ac4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003ac8:	4872      	ldr	r0, [pc, #456]	@ (8003c94 <main+0x290>)
 8003aca:	f7ff fec7 	bl	800385c <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH4);
 8003ace:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003ad2:	4870      	ldr	r0, [pc, #448]	@ (8003c94 <main+0x290>)
 8003ad4:	f7ff fec2 	bl	800385c <LL_TIM_CC_EnableChannel>

  HAL_ADC_Start_DMA(&hadc1, &adcVal, 1); //Battery ADC
 8003ad8:	1dbb      	adds	r3, r7, #6
 8003ada:	2201      	movs	r2, #1
 8003adc:	4619      	mov	r1, r3
 8003ade:	486e      	ldr	r0, [pc, #440]	@ (8003c98 <main+0x294>)
 8003ae0:	f003 f918 	bl	8006d14 <HAL_ADC_Start_DMA>

  HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1); //Telemetry
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	496d      	ldr	r1, [pc, #436]	@ (8003c9c <main+0x298>)
 8003ae8:	486d      	ldr	r0, [pc, #436]	@ (8003ca0 <main+0x29c>)
 8003aea:	f006 f95e 	bl	8009daa <HAL_UART_Receive_IT>


  if(BNO080_Initialization() != 0)
 8003aee:	f7fd fd09 	bl	8001504 <BNO080_Initialization>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d03b      	beq.n	8003b70 <main+0x16c>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003af8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003afc:	4860      	ldr	r0, [pc, #384]	@ (8003c80 <main+0x27c>)
 8003afe:	f7ff fead 	bl	800385c <LL_TIM_CC_EnableChannel>

	  TIM3->PSC = 1000;
 8003b02:	4b5f      	ldr	r3, [pc, #380]	@ (8003c80 <main+0x27c>)
 8003b04:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003b08:	629a      	str	r2, [r3, #40]	@ 0x28
	  HAL_Delay(100);
 8003b0a:	2064      	movs	r0, #100	@ 0x64
 8003b0c:	f003 f89a 	bl	8006c44 <HAL_Delay>
	  TIM3->PSC = 1500;
 8003b10:	4b5b      	ldr	r3, [pc, #364]	@ (8003c80 <main+0x27c>)
 8003b12:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003b16:	629a      	str	r2, [r3, #40]	@ 0x28
	  HAL_Delay(100);
 8003b18:	2064      	movs	r0, #100	@ 0x64
 8003b1a:	f003 f893 	bl	8006c44 <HAL_Delay>
	  TIM3->PSC = 2000;
 8003b1e:	4b58      	ldr	r3, [pc, #352]	@ (8003c80 <main+0x27c>)
 8003b20:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003b24:	629a      	str	r2, [r3, #40]	@ 0x28
	  HAL_Delay(100);
 8003b26:	2064      	movs	r0, #100	@ 0x64
 8003b28:	f003 f88c 	bl	8006c44 <HAL_Delay>

	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003b2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b30:	4853      	ldr	r0, [pc, #332]	@ (8003c80 <main+0x27c>)
 8003b32:	f7ff fea4 	bl	800387e <LL_TIM_CC_DisableChannel>

	  printf("\nBNO080 failed. Program shutting down...\n");
 8003b36:	485b      	ldr	r0, [pc, #364]	@ (8003ca4 <main+0x2a0>)
 8003b38:	f008 ff8a 	bl	800ca50 <puts>
	  while(1)
	  {
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003b3c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b40:	484f      	ldr	r0, [pc, #316]	@ (8003c80 <main+0x27c>)
 8003b42:	f7ff fe9c 	bl	800387e <LL_TIM_CC_DisableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 8003b46:	2101      	movs	r1, #1
 8003b48:	4857      	ldr	r0, [pc, #348]	@ (8003ca8 <main+0x2a4>)
 8003b4a:	f7ff ff1c 	bl	8003986 <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 8003b4e:	20c8      	movs	r0, #200	@ 0xc8
 8003b50:	f003 f878 	bl	8006c44 <HAL_Delay>
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003b54:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b58:	4849      	ldr	r0, [pc, #292]	@ (8003c80 <main+0x27c>)
 8003b5a:	f7ff fe7f 	bl	800385c <LL_TIM_CC_EnableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 8003b5e:	2101      	movs	r1, #1
 8003b60:	4851      	ldr	r0, [pc, #324]	@ (8003ca8 <main+0x2a4>)
 8003b62:	f7ff ff10 	bl	8003986 <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 8003b66:	20c8      	movs	r0, #200	@ 0xc8
 8003b68:	f003 f86c 	bl	8006c44 <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003b6c:	bf00      	nop
 8003b6e:	e7e5      	b.n	8003b3c <main+0x138>
	  }
  }
  BNO080_enableRotationVector(2500);
 8003b70:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8003b74:	f7fe f805 	bl	8001b82 <BNO080_enableRotationVector>

  if(ICM20602_Initialization() != 0)
 8003b78:	f7fe fcb4 	bl	80024e4 <ICM20602_Initialization>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d03b      	beq.n	8003bfa <main+0x1f6>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003b82:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b86:	483e      	ldr	r0, [pc, #248]	@ (8003c80 <main+0x27c>)
 8003b88:	f7ff fe68 	bl	800385c <LL_TIM_CC_EnableChannel>

	  TIM3->PSC = 1000;
 8003b8c:	4b3c      	ldr	r3, [pc, #240]	@ (8003c80 <main+0x27c>)
 8003b8e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003b92:	629a      	str	r2, [r3, #40]	@ 0x28
	  HAL_Delay(100);
 8003b94:	2064      	movs	r0, #100	@ 0x64
 8003b96:	f003 f855 	bl	8006c44 <HAL_Delay>
	  TIM3->PSC = 1500;
 8003b9a:	4b39      	ldr	r3, [pc, #228]	@ (8003c80 <main+0x27c>)
 8003b9c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003ba0:	629a      	str	r2, [r3, #40]	@ 0x28
	  HAL_Delay(100);
 8003ba2:	2064      	movs	r0, #100	@ 0x64
 8003ba4:	f003 f84e 	bl	8006c44 <HAL_Delay>
	  TIM3->PSC = 2000;
 8003ba8:	4b35      	ldr	r3, [pc, #212]	@ (8003c80 <main+0x27c>)
 8003baa:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003bae:	629a      	str	r2, [r3, #40]	@ 0x28
	  HAL_Delay(100);
 8003bb0:	2064      	movs	r0, #100	@ 0x64
 8003bb2:	f003 f847 	bl	8006c44 <HAL_Delay>

	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003bb6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003bba:	4831      	ldr	r0, [pc, #196]	@ (8003c80 <main+0x27c>)
 8003bbc:	f7ff fe5f 	bl	800387e <LL_TIM_CC_DisableChannel>

	  printf("\nICM-20602 failed. Program shutting down...\n");
 8003bc0:	483a      	ldr	r0, [pc, #232]	@ (8003cac <main+0x2a8>)
 8003bc2:	f008 ff45 	bl	800ca50 <puts>
	  while(1)
	  {
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003bc6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003bca:	482d      	ldr	r0, [pc, #180]	@ (8003c80 <main+0x27c>)
 8003bcc:	f7ff fe57 	bl	800387e <LL_TIM_CC_DisableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 8003bd0:	2102      	movs	r1, #2
 8003bd2:	4835      	ldr	r0, [pc, #212]	@ (8003ca8 <main+0x2a4>)
 8003bd4:	f7ff fed7 	bl	8003986 <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 8003bd8:	20c8      	movs	r0, #200	@ 0xc8
 8003bda:	f003 f833 	bl	8006c44 <HAL_Delay>
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003bde:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003be2:	4827      	ldr	r0, [pc, #156]	@ (8003c80 <main+0x27c>)
 8003be4:	f7ff fe3a 	bl	800385c <LL_TIM_CC_EnableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 8003be8:	2102      	movs	r1, #2
 8003bea:	482f      	ldr	r0, [pc, #188]	@ (8003ca8 <main+0x2a4>)
 8003bec:	f7ff fecb 	bl	8003986 <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 8003bf0:	20c8      	movs	r0, #200	@ 0xc8
 8003bf2:	f003 f827 	bl	8006c44 <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003bf6:	bf00      	nop
 8003bf8:	e7e5      	b.n	8003bc6 <main+0x1c2>
	  }
  }

  if(LPS22HH_Initialization() != 0)
 8003bfa:	f7fe feff 	bl	80029fc <LPS22HH_Initialization>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d057      	beq.n	8003cb4 <main+0x2b0>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003c04:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003c08:	481d      	ldr	r0, [pc, #116]	@ (8003c80 <main+0x27c>)
 8003c0a:	f7ff fe27 	bl	800385c <LL_TIM_CC_EnableChannel>

	  TIM3->PSC = 1000;
 8003c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8003c80 <main+0x27c>)
 8003c10:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003c14:	629a      	str	r2, [r3, #40]	@ 0x28
	  HAL_Delay(100);
 8003c16:	2064      	movs	r0, #100	@ 0x64
 8003c18:	f003 f814 	bl	8006c44 <HAL_Delay>
	  TIM3->PSC = 1500;
 8003c1c:	4b18      	ldr	r3, [pc, #96]	@ (8003c80 <main+0x27c>)
 8003c1e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003c22:	629a      	str	r2, [r3, #40]	@ 0x28
	  HAL_Delay(100);
 8003c24:	2064      	movs	r0, #100	@ 0x64
 8003c26:	f003 f80d 	bl	8006c44 <HAL_Delay>
	  TIM3->PSC = 2000;
 8003c2a:	4b15      	ldr	r3, [pc, #84]	@ (8003c80 <main+0x27c>)
 8003c2c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003c30:	629a      	str	r2, [r3, #40]	@ 0x28
	  HAL_Delay(100);
 8003c32:	2064      	movs	r0, #100	@ 0x64
 8003c34:	f003 f806 	bl	8006c44 <HAL_Delay>

	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003c38:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003c3c:	4810      	ldr	r0, [pc, #64]	@ (8003c80 <main+0x27c>)
 8003c3e:	f7ff fe1e 	bl	800387e <LL_TIM_CC_DisableChannel>

	  printf("\nLPS22HH failed. Program shutting down...\n");
 8003c42:	481b      	ldr	r0, [pc, #108]	@ (8003cb0 <main+0x2ac>)
 8003c44:	f008 ff04 	bl	800ca50 <puts>
	  while(1)
	  {
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003c48:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003c4c:	480c      	ldr	r0, [pc, #48]	@ (8003c80 <main+0x27c>)
 8003c4e:	f7ff fe16 	bl	800387e <LL_TIM_CC_DisableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 8003c52:	2104      	movs	r1, #4
 8003c54:	4814      	ldr	r0, [pc, #80]	@ (8003ca8 <main+0x2a4>)
 8003c56:	f7ff fe96 	bl	8003986 <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 8003c5a:	20c8      	movs	r0, #200	@ 0xc8
 8003c5c:	f002 fff2 	bl	8006c44 <HAL_Delay>
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003c60:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003c64:	4806      	ldr	r0, [pc, #24]	@ (8003c80 <main+0x27c>)
 8003c66:	f7ff fdf9 	bl	800385c <LL_TIM_CC_EnableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 8003c6a:	2104      	movs	r1, #4
 8003c6c:	480e      	ldr	r0, [pc, #56]	@ (8003ca8 <main+0x2a4>)
 8003c6e:	f7ff fe8a 	bl	8003986 <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 8003c72:	20c8      	movs	r0, #200	@ 0xc8
 8003c74:	f002 ffe6 	bl	8006c44 <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003c78:	bf00      	nop
 8003c7a:	e7e5      	b.n	8003c48 <main+0x244>
 8003c7c:	0800f840 	.word	0x0800f840
 8003c80:	40000400 	.word	0x40000400
 8003c84:	40001400 	.word	0x40001400
 8003c88:	40011400 	.word	0x40011400
 8003c8c:	40004c00 	.word	0x40004c00
 8003c90:	40005000 	.word	0x40005000
 8003c94:	40000c00 	.word	0x40000c00
 8003c98:	2000034c 	.word	0x2000034c
 8003c9c:	20000529 	.word	0x20000529
 8003ca0:	20000538 	.word	0x20000538
 8003ca4:	0800f768 	.word	0x0800f768
 8003ca8:	40020800 	.word	0x40020800
 8003cac:	0800f794 	.word	0x0800f794
 8003cb0:	0800f7c0 	.word	0x0800f7c0
	  }
  }

  printf("All sensors OK!\n\n");
 8003cb4:	48c5      	ldr	r0, [pc, #788]	@ (8003fcc <main+0x5c8>)
 8003cb6:	f008 fecb 	bl	800ca50 <puts>

  M8N_Initialization();
 8003cba:	f7ff f8b1 	bl	8002e20 <M8N_Initialization>



  // ICM offset remove
  ICM20602_Writebyte(0x13, (gyro_x_offset*-2)>>8);
 8003cbe:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	@ 0x42
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	07db      	lsls	r3, r3, #31
 8003cc6:	1a9b      	subs	r3, r3, r2
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	121b      	asrs	r3, r3, #8
 8003ccc:	4619      	mov	r1, r3
 8003cce:	2013      	movs	r0, #19
 8003cd0:	f7fe fbe6 	bl	80024a0 <ICM20602_Writebyte>
  ICM20602_Writebyte(0x14, (gyro_x_offset*-2));
 8003cd4:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	@ 0x42
 8003cd8:	4613      	mov	r3, r2
 8003cda:	07db      	lsls	r3, r3, #31
 8003cdc:	1a9b      	subs	r3, r3, r2
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	2014      	movs	r0, #20
 8003ce4:	f7fe fbdc 	bl	80024a0 <ICM20602_Writebyte>

  ICM20602_Writebyte(0x15, (gyro_y_offset*-2)>>8);
 8003ce8:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	@ 0x40
 8003cec:	4613      	mov	r3, r2
 8003cee:	07db      	lsls	r3, r3, #31
 8003cf0:	1a9b      	subs	r3, r3, r2
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	121b      	asrs	r3, r3, #8
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	2015      	movs	r0, #21
 8003cfa:	f7fe fbd1 	bl	80024a0 <ICM20602_Writebyte>
  ICM20602_Writebyte(0x16, (gyro_y_offset*-2));
 8003cfe:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	@ 0x40
 8003d02:	4613      	mov	r3, r2
 8003d04:	07db      	lsls	r3, r3, #31
 8003d06:	1a9b      	subs	r3, r3, r2
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	2016      	movs	r0, #22
 8003d0e:	f7fe fbc7 	bl	80024a0 <ICM20602_Writebyte>

  ICM20602_Writebyte(0x17, (gyro_z_offset*-2)>>8);
 8003d12:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	@ 0x3e
 8003d16:	4613      	mov	r3, r2
 8003d18:	07db      	lsls	r3, r3, #31
 8003d1a:	1a9b      	subs	r3, r3, r2
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	121b      	asrs	r3, r3, #8
 8003d20:	4619      	mov	r1, r3
 8003d22:	2017      	movs	r0, #23
 8003d24:	f7fe fbbc 	bl	80024a0 <ICM20602_Writebyte>
  ICM20602_Writebyte(0x18, (gyro_z_offset*-2));
 8003d28:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	@ 0x3e
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	07db      	lsls	r3, r3, #31
 8003d30:	1a9b      	subs	r3, r3, r2
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	4619      	mov	r1, r3
 8003d36:	2018      	movs	r0, #24
 8003d38:	f7fe fbb2 	bl	80024a0 <ICM20602_Writebyte>
  /////

  printf("Loading PID Gain...\n");
 8003d3c:	48a4      	ldr	r0, [pc, #656]	@ (8003fd0 <main+0x5cc>)
 8003d3e:	f008 fe87 	bl	800ca50 <puts>


    if(EP_PIDGain_Read(0, &roll_in_kp, &roll_in_ki, &roll_in_kd) != 0 ||
 8003d42:	4ba4      	ldr	r3, [pc, #656]	@ (8003fd4 <main+0x5d0>)
 8003d44:	4aa4      	ldr	r2, [pc, #656]	@ (8003fd8 <main+0x5d4>)
 8003d46:	49a5      	ldr	r1, [pc, #660]	@ (8003fdc <main+0x5d8>)
 8003d48:	2000      	movs	r0, #0
 8003d4a:	f7fd f9b9 	bl	80010c0 <EP_PIDGain_Read>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d12c      	bne.n	8003dae <main+0x3aa>
  		  EP_PIDGain_Read(1, &roll_out_kp, &roll_out_ki, &roll_out_kd) != 0 ||
 8003d54:	4ba2      	ldr	r3, [pc, #648]	@ (8003fe0 <main+0x5dc>)
 8003d56:	4aa3      	ldr	r2, [pc, #652]	@ (8003fe4 <main+0x5e0>)
 8003d58:	49a3      	ldr	r1, [pc, #652]	@ (8003fe8 <main+0x5e4>)
 8003d5a:	2001      	movs	r0, #1
 8003d5c:	f7fd f9b0 	bl	80010c0 <EP_PIDGain_Read>
 8003d60:	4603      	mov	r3, r0
    if(EP_PIDGain_Read(0, &roll_in_kp, &roll_in_ki, &roll_in_kd) != 0 ||
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d123      	bne.n	8003dae <main+0x3aa>
  		  EP_PIDGain_Read(2, &pitch_in_kp, &pitch_in_ki, &pitch_in_kd) != 0 ||
 8003d66:	4ba1      	ldr	r3, [pc, #644]	@ (8003fec <main+0x5e8>)
 8003d68:	4aa1      	ldr	r2, [pc, #644]	@ (8003ff0 <main+0x5ec>)
 8003d6a:	49a2      	ldr	r1, [pc, #648]	@ (8003ff4 <main+0x5f0>)
 8003d6c:	2002      	movs	r0, #2
 8003d6e:	f7fd f9a7 	bl	80010c0 <EP_PIDGain_Read>
 8003d72:	4603      	mov	r3, r0
  		  EP_PIDGain_Read(1, &roll_out_kp, &roll_out_ki, &roll_out_kd) != 0 ||
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d11a      	bne.n	8003dae <main+0x3aa>
  		  EP_PIDGain_Read(3, &pitch_out_kp, &pitch_out_ki, &pitch_out_kd) != 0 ||
 8003d78:	4b9f      	ldr	r3, [pc, #636]	@ (8003ff8 <main+0x5f4>)
 8003d7a:	4aa0      	ldr	r2, [pc, #640]	@ (8003ffc <main+0x5f8>)
 8003d7c:	49a0      	ldr	r1, [pc, #640]	@ (8004000 <main+0x5fc>)
 8003d7e:	2003      	movs	r0, #3
 8003d80:	f7fd f99e 	bl	80010c0 <EP_PIDGain_Read>
 8003d84:	4603      	mov	r3, r0
  		  EP_PIDGain_Read(2, &pitch_in_kp, &pitch_in_ki, &pitch_in_kd) != 0 ||
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d111      	bne.n	8003dae <main+0x3aa>
  		  EP_PIDGain_Read(4, &yaw_heading_kp, &yaw_heading_ki, &yaw_heading_kd) != 0 ||
 8003d8a:	4b9e      	ldr	r3, [pc, #632]	@ (8004004 <main+0x600>)
 8003d8c:	4a9e      	ldr	r2, [pc, #632]	@ (8004008 <main+0x604>)
 8003d8e:	499f      	ldr	r1, [pc, #636]	@ (800400c <main+0x608>)
 8003d90:	2004      	movs	r0, #4
 8003d92:	f7fd f995 	bl	80010c0 <EP_PIDGain_Read>
 8003d96:	4603      	mov	r3, r0
  		  EP_PIDGain_Read(3, &pitch_out_kp, &pitch_out_ki, &pitch_out_kd) != 0 ||
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d108      	bne.n	8003dae <main+0x3aa>
  		  EP_PIDGain_Read(5, &yaw_rate_kp, &yaw_rate_ki, &yaw_rate_kd) != 0)
 8003d9c:	4b9c      	ldr	r3, [pc, #624]	@ (8004010 <main+0x60c>)
 8003d9e:	4a9d      	ldr	r2, [pc, #628]	@ (8004014 <main+0x610>)
 8003da0:	499d      	ldr	r1, [pc, #628]	@ (8004018 <main+0x614>)
 8003da2:	2005      	movs	r0, #5
 8003da4:	f7fd f98c 	bl	80010c0 <EP_PIDGain_Read>
 8003da8:	4603      	mov	r3, r0
  		  EP_PIDGain_Read(4, &yaw_heading_kp, &yaw_heading_ki, &yaw_heading_kd) != 0 ||
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d026      	beq.n	8003dfc <main+0x3f8>
    {
  	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003dae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003db2:	489a      	ldr	r0, [pc, #616]	@ (800401c <main+0x618>)
 8003db4:	f7ff fd52 	bl	800385c <LL_TIM_CC_EnableChannel>

  	  TIM3->PSC = 1000;
 8003db8:	4b98      	ldr	r3, [pc, #608]	@ (800401c <main+0x618>)
 8003dba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003dbe:	629a      	str	r2, [r3, #40]	@ 0x28
  	  HAL_Delay(100);
 8003dc0:	2064      	movs	r0, #100	@ 0x64
 8003dc2:	f002 ff3f 	bl	8006c44 <HAL_Delay>
  	  TIM3->PSC = 1500;
 8003dc6:	4b95      	ldr	r3, [pc, #596]	@ (800401c <main+0x618>)
 8003dc8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003dcc:	629a      	str	r2, [r3, #40]	@ 0x28
  	  HAL_Delay(100);
 8003dce:	2064      	movs	r0, #100	@ 0x64
 8003dd0:	f002 ff38 	bl	8006c44 <HAL_Delay>
  	  TIM3->PSC = 2000;
 8003dd4:	4b91      	ldr	r3, [pc, #580]	@ (800401c <main+0x618>)
 8003dd6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003dda:	629a      	str	r2, [r3, #40]	@ 0x28
  	  HAL_Delay(100);
 8003ddc:	2064      	movs	r0, #100	@ 0x64
 8003dde:	f002 ff31 	bl	8006c44 <HAL_Delay>

  	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003de2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003de6:	488d      	ldr	r0, [pc, #564]	@ (800401c <main+0x618>)
 8003de8:	f7ff fd49 	bl	800387e <LL_TIM_CC_DisableChannel>

  	  HAL_Delay(500);
 8003dec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003df0:	f002 ff28 	bl	8006c44 <HAL_Delay>
  	  printf("\nCouldn't load PID gain.\n");
 8003df4:	488a      	ldr	r0, [pc, #552]	@ (8004020 <main+0x61c>)
 8003df6:	f008 fe2b 	bl	800ca50 <puts>
 8003dfa:	e098      	b.n	8003f2e <main+0x52a>
    }
    else
    {
  	  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 0, roll_in_kp, roll_in_ki, roll_in_kd);
 8003dfc:	4b77      	ldr	r3, [pc, #476]	@ (8003fdc <main+0x5d8>)
 8003dfe:	edd3 7a00 	vldr	s15, [r3]
 8003e02:	4b75      	ldr	r3, [pc, #468]	@ (8003fd8 <main+0x5d4>)
 8003e04:	ed93 7a00 	vldr	s14, [r3]
 8003e08:	4b72      	ldr	r3, [pc, #456]	@ (8003fd4 <main+0x5d0>)
 8003e0a:	edd3 6a00 	vldr	s13, [r3]
 8003e0e:	eeb0 1a66 	vmov.f32	s2, s13
 8003e12:	eef0 0a47 	vmov.f32	s1, s14
 8003e16:	eeb0 0a67 	vmov.f32	s0, s15
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	4881      	ldr	r0, [pc, #516]	@ (8004024 <main+0x620>)
 8003e1e:	f001 fc7b 	bl	8005718 <Encode_Msg_PID_Gain>
  	  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003e22:	230a      	movs	r3, #10
 8003e24:	2214      	movs	r2, #20
 8003e26:	497f      	ldr	r1, [pc, #508]	@ (8004024 <main+0x620>)
 8003e28:	487f      	ldr	r0, [pc, #508]	@ (8004028 <main+0x624>)
 8003e2a:	f005 fefd 	bl	8009c28 <HAL_UART_Transmit>
  	  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 1, roll_out_kp, roll_out_ki, roll_out_kd);
 8003e2e:	4b6e      	ldr	r3, [pc, #440]	@ (8003fe8 <main+0x5e4>)
 8003e30:	edd3 7a00 	vldr	s15, [r3]
 8003e34:	4b6b      	ldr	r3, [pc, #428]	@ (8003fe4 <main+0x5e0>)
 8003e36:	ed93 7a00 	vldr	s14, [r3]
 8003e3a:	4b69      	ldr	r3, [pc, #420]	@ (8003fe0 <main+0x5dc>)
 8003e3c:	edd3 6a00 	vldr	s13, [r3]
 8003e40:	eeb0 1a66 	vmov.f32	s2, s13
 8003e44:	eef0 0a47 	vmov.f32	s1, s14
 8003e48:	eeb0 0a67 	vmov.f32	s0, s15
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	4875      	ldr	r0, [pc, #468]	@ (8004024 <main+0x620>)
 8003e50:	f001 fc62 	bl	8005718 <Encode_Msg_PID_Gain>
  	  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003e54:	230a      	movs	r3, #10
 8003e56:	2214      	movs	r2, #20
 8003e58:	4972      	ldr	r1, [pc, #456]	@ (8004024 <main+0x620>)
 8003e5a:	4873      	ldr	r0, [pc, #460]	@ (8004028 <main+0x624>)
 8003e5c:	f005 fee4 	bl	8009c28 <HAL_UART_Transmit>
  	  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 2, pitch_in_kp, pitch_in_ki, pitch_in_kd);
 8003e60:	4b64      	ldr	r3, [pc, #400]	@ (8003ff4 <main+0x5f0>)
 8003e62:	edd3 7a00 	vldr	s15, [r3]
 8003e66:	4b62      	ldr	r3, [pc, #392]	@ (8003ff0 <main+0x5ec>)
 8003e68:	ed93 7a00 	vldr	s14, [r3]
 8003e6c:	4b5f      	ldr	r3, [pc, #380]	@ (8003fec <main+0x5e8>)
 8003e6e:	edd3 6a00 	vldr	s13, [r3]
 8003e72:	eeb0 1a66 	vmov.f32	s2, s13
 8003e76:	eef0 0a47 	vmov.f32	s1, s14
 8003e7a:	eeb0 0a67 	vmov.f32	s0, s15
 8003e7e:	2102      	movs	r1, #2
 8003e80:	4868      	ldr	r0, [pc, #416]	@ (8004024 <main+0x620>)
 8003e82:	f001 fc49 	bl	8005718 <Encode_Msg_PID_Gain>
  	  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003e86:	230a      	movs	r3, #10
 8003e88:	2214      	movs	r2, #20
 8003e8a:	4966      	ldr	r1, [pc, #408]	@ (8004024 <main+0x620>)
 8003e8c:	4866      	ldr	r0, [pc, #408]	@ (8004028 <main+0x624>)
 8003e8e:	f005 fecb 	bl	8009c28 <HAL_UART_Transmit>
  	  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 3, pitch_out_kp, pitch_out_ki, pitch_out_kd);
 8003e92:	4b5b      	ldr	r3, [pc, #364]	@ (8004000 <main+0x5fc>)
 8003e94:	edd3 7a00 	vldr	s15, [r3]
 8003e98:	4b58      	ldr	r3, [pc, #352]	@ (8003ffc <main+0x5f8>)
 8003e9a:	ed93 7a00 	vldr	s14, [r3]
 8003e9e:	4b56      	ldr	r3, [pc, #344]	@ (8003ff8 <main+0x5f4>)
 8003ea0:	edd3 6a00 	vldr	s13, [r3]
 8003ea4:	eeb0 1a66 	vmov.f32	s2, s13
 8003ea8:	eef0 0a47 	vmov.f32	s1, s14
 8003eac:	eeb0 0a67 	vmov.f32	s0, s15
 8003eb0:	2103      	movs	r1, #3
 8003eb2:	485c      	ldr	r0, [pc, #368]	@ (8004024 <main+0x620>)
 8003eb4:	f001 fc30 	bl	8005718 <Encode_Msg_PID_Gain>
  	  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003eb8:	230a      	movs	r3, #10
 8003eba:	2214      	movs	r2, #20
 8003ebc:	4959      	ldr	r1, [pc, #356]	@ (8004024 <main+0x620>)
 8003ebe:	485a      	ldr	r0, [pc, #360]	@ (8004028 <main+0x624>)
 8003ec0:	f005 feb2 	bl	8009c28 <HAL_UART_Transmit>
  	  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 4, yaw_heading_kp, yaw_heading_ki, yaw_heading_kd);
 8003ec4:	4b51      	ldr	r3, [pc, #324]	@ (800400c <main+0x608>)
 8003ec6:	edd3 7a00 	vldr	s15, [r3]
 8003eca:	4b4f      	ldr	r3, [pc, #316]	@ (8004008 <main+0x604>)
 8003ecc:	ed93 7a00 	vldr	s14, [r3]
 8003ed0:	4b4c      	ldr	r3, [pc, #304]	@ (8004004 <main+0x600>)
 8003ed2:	edd3 6a00 	vldr	s13, [r3]
 8003ed6:	eeb0 1a66 	vmov.f32	s2, s13
 8003eda:	eef0 0a47 	vmov.f32	s1, s14
 8003ede:	eeb0 0a67 	vmov.f32	s0, s15
 8003ee2:	2104      	movs	r1, #4
 8003ee4:	484f      	ldr	r0, [pc, #316]	@ (8004024 <main+0x620>)
 8003ee6:	f001 fc17 	bl	8005718 <Encode_Msg_PID_Gain>
  	  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003eea:	230a      	movs	r3, #10
 8003eec:	2214      	movs	r2, #20
 8003eee:	494d      	ldr	r1, [pc, #308]	@ (8004024 <main+0x620>)
 8003ef0:	484d      	ldr	r0, [pc, #308]	@ (8004028 <main+0x624>)
 8003ef2:	f005 fe99 	bl	8009c28 <HAL_UART_Transmit>
  	  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 5, yaw_rate_kp, yaw_rate_ki, yaw_rate_kd);
 8003ef6:	4b48      	ldr	r3, [pc, #288]	@ (8004018 <main+0x614>)
 8003ef8:	edd3 7a00 	vldr	s15, [r3]
 8003efc:	4b45      	ldr	r3, [pc, #276]	@ (8004014 <main+0x610>)
 8003efe:	ed93 7a00 	vldr	s14, [r3]
 8003f02:	4b43      	ldr	r3, [pc, #268]	@ (8004010 <main+0x60c>)
 8003f04:	edd3 6a00 	vldr	s13, [r3]
 8003f08:	eeb0 1a66 	vmov.f32	s2, s13
 8003f0c:	eef0 0a47 	vmov.f32	s1, s14
 8003f10:	eeb0 0a67 	vmov.f32	s0, s15
 8003f14:	2105      	movs	r1, #5
 8003f16:	4843      	ldr	r0, [pc, #268]	@ (8004024 <main+0x620>)
 8003f18:	f001 fbfe 	bl	8005718 <Encode_Msg_PID_Gain>
  	  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003f1c:	230a      	movs	r3, #10
 8003f1e:	2214      	movs	r2, #20
 8003f20:	4940      	ldr	r1, [pc, #256]	@ (8004024 <main+0x620>)
 8003f22:	4841      	ldr	r0, [pc, #260]	@ (8004028 <main+0x624>)
 8003f24:	f005 fe80 	bl	8009c28 <HAL_UART_Transmit>
  	  printf("\nAll gains OK!\n\n");
 8003f28:	4840      	ldr	r0, [pc, #256]	@ (800402c <main+0x628>)
 8003f2a:	f008 fd91 	bl	800ca50 <puts>
    }


  while(Is_iBus_Received() == 0)
 8003f2e:	e013      	b.n	8003f58 <main+0x554>
  {
	  LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4);
 8003f30:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003f34:	4839      	ldr	r0, [pc, #228]	@ (800401c <main+0x618>)
 8003f36:	f7ff fc91 	bl	800385c <LL_TIM_CC_EnableChannel>
	  TIM3->PSC = 3000; // buzzer pwm
 8003f3a:	4b38      	ldr	r3, [pc, #224]	@ (800401c <main+0x618>)
 8003f3c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003f40:	629a      	str	r2, [r3, #40]	@ 0x28
	  HAL_Delay(200);
 8003f42:	20c8      	movs	r0, #200	@ 0xc8
 8003f44:	f002 fe7e 	bl	8006c44 <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003f48:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003f4c:	4833      	ldr	r0, [pc, #204]	@ (800401c <main+0x618>)
 8003f4e:	f7ff fc96 	bl	800387e <LL_TIM_CC_DisableChannel>
	  HAL_Delay(200);
 8003f52:	20c8      	movs	r0, #200	@ 0xc8
 8003f54:	f002 fe76 	bl	8006c44 <HAL_Delay>
  while(Is_iBus_Received() == 0)
 8003f58:	f000 ff78 	bl	8004e4c <Is_iBus_Received>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0e6      	beq.n	8003f30 <main+0x52c>
  }

  if(iBus.SwC == 2000)
 8003f62:	4b33      	ldr	r3, [pc, #204]	@ (8004030 <main+0x62c>)
 8003f64:	899b      	ldrh	r3, [r3, #12]
 8003f66:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003f6a:	d163      	bne.n	8004034 <main+0x630>
  {
	  LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4);
 8003f6c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003f70:	482a      	ldr	r0, [pc, #168]	@ (800401c <main+0x618>)
 8003f72:	f7ff fc73 	bl	800385c <LL_TIM_CC_EnableChannel>
	  TIM3->PSC = 1500;
 8003f76:	4b29      	ldr	r3, [pc, #164]	@ (800401c <main+0x618>)
 8003f78:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003f7c:	629a      	str	r2, [r3, #40]	@ 0x28
	  HAL_Delay(200);
 8003f7e:	20c8      	movs	r0, #200	@ 0xc8
 8003f80:	f002 fe60 	bl	8006c44 <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003f84:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003f88:	4824      	ldr	r0, [pc, #144]	@ (800401c <main+0x618>)
 8003f8a:	f7ff fc78 	bl	800387e <LL_TIM_CC_DisableChannel>

	  ESC_Calibration();
 8003f8e:	f000 ff7d 	bl	8004e8c <ESC_Calibration>
	  while(iBus.SwC != 1000)
 8003f92:	e015      	b.n	8003fc0 <main+0x5bc>
	  {
		  Is_iBus_Received();
 8003f94:	f000 ff5a 	bl	8004e4c <Is_iBus_Received>

		  LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4);
 8003f98:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003f9c:	481f      	ldr	r0, [pc, #124]	@ (800401c <main+0x618>)
 8003f9e:	f7ff fc5d 	bl	800385c <LL_TIM_CC_EnableChannel>
		  TIM3->PSC = 1500;
 8003fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800401c <main+0x618>)
 8003fa4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003fa8:	629a      	str	r2, [r3, #40]	@ 0x28
		  HAL_Delay(200);
 8003faa:	20c8      	movs	r0, #200	@ 0xc8
 8003fac:	f002 fe4a 	bl	8006c44 <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003fb0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003fb4:	4819      	ldr	r0, [pc, #100]	@ (800401c <main+0x618>)
 8003fb6:	f7ff fc62 	bl	800387e <LL_TIM_CC_DisableChannel>
		  HAL_Delay(200);
 8003fba:	20c8      	movs	r0, #200	@ 0xc8
 8003fbc:	f002 fe42 	bl	8006c44 <HAL_Delay>
	  while(iBus.SwC != 1000)
 8003fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8004030 <main+0x62c>)
 8003fc2:	899b      	ldrh	r3, [r3, #12]
 8003fc4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003fc8:	d1e4      	bne.n	8003f94 <main+0x590>
 8003fca:	e07d      	b.n	80040c8 <main+0x6c4>
 8003fcc:	0800f7ec 	.word	0x0800f7ec
 8003fd0:	0800f800 	.word	0x0800f800
 8003fd4:	20000494 	.word	0x20000494
 8003fd8:	20000490 	.word	0x20000490
 8003fdc:	2000048c 	.word	0x2000048c
 8003fe0:	200004a0 	.word	0x200004a0
 8003fe4:	2000049c 	.word	0x2000049c
 8003fe8:	20000498 	.word	0x20000498
 8003fec:	200004ac 	.word	0x200004ac
 8003ff0:	200004a8 	.word	0x200004a8
 8003ff4:	200004a4 	.word	0x200004a4
 8003ff8:	200004b8 	.word	0x200004b8
 8003ffc:	200004b4 	.word	0x200004b4
 8004000:	200004b0 	.word	0x200004b0
 8004004:	200004c4 	.word	0x200004c4
 8004008:	200004c0 	.word	0x200004c0
 800400c:	200004bc 	.word	0x200004bc
 8004010:	200004d0 	.word	0x200004d0
 8004014:	200004cc 	.word	0x200004cc
 8004018:	200004c8 	.word	0x200004c8
 800401c:	40000400 	.word	0x40000400
 8004020:	0800f814 	.word	0x0800f814
 8004024:	20000448 	.word	0x20000448
 8004028:	20000538 	.word	0x20000538
 800402c:	0800f830 	.word	0x0800f830
 8004030:	200002c0 	.word	0x200002c0
	  }
  }
  else if(iBus.SwC == 1500)
 8004034:	4bb9      	ldr	r3, [pc, #740]	@ (800431c <main+0x918>)
 8004036:	899b      	ldrh	r3, [r3, #12]
 8004038:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800403c:	4293      	cmp	r3, r2
 800403e:	d143      	bne.n	80040c8 <main+0x6c4>
  {
	  LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4);
 8004040:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004044:	48b6      	ldr	r0, [pc, #728]	@ (8004320 <main+0x91c>)
 8004046:	f7ff fc09 	bl	800385c <LL_TIM_CC_EnableChannel>
	  TIM3->PSC = 1500;
 800404a:	4bb5      	ldr	r3, [pc, #724]	@ (8004320 <main+0x91c>)
 800404c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004050:	629a      	str	r2, [r3, #40]	@ 0x28
	  HAL_Delay(200);
 8004052:	20c8      	movs	r0, #200	@ 0xc8
 8004054:	f002 fdf6 	bl	8006c44 <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004058:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800405c:	48b0      	ldr	r0, [pc, #704]	@ (8004320 <main+0x91c>)
 800405e:	f7ff fc0e 	bl	800387e <LL_TIM_CC_DisableChannel>

	  BNO080_Calibration();
 8004062:	f000 ff41 	bl	8004ee8 <BNO080_Calibration>
	  while(iBus.SwC != 1000)
 8004066:	e015      	b.n	8004094 <main+0x690>
	  {
		  Is_iBus_Received();
 8004068:	f000 fef0 	bl	8004e4c <Is_iBus_Received>

		  LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4);
 800406c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004070:	48ab      	ldr	r0, [pc, #684]	@ (8004320 <main+0x91c>)
 8004072:	f7ff fbf3 	bl	800385c <LL_TIM_CC_EnableChannel>
		  TIM3->PSC = 1500;
 8004076:	4baa      	ldr	r3, [pc, #680]	@ (8004320 <main+0x91c>)
 8004078:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800407c:	629a      	str	r2, [r3, #40]	@ 0x28
		  HAL_Delay(200);
 800407e:	20c8      	movs	r0, #200	@ 0xc8
 8004080:	f002 fde0 	bl	8006c44 <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004084:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004088:	48a5      	ldr	r0, [pc, #660]	@ (8004320 <main+0x91c>)
 800408a:	f7ff fbf8 	bl	800387e <LL_TIM_CC_DisableChannel>
		  HAL_Delay(200);
 800408e:	20c8      	movs	r0, #200	@ 0xc8
 8004090:	f002 fdd8 	bl	8006c44 <HAL_Delay>
	  while(iBus.SwC != 1000)
 8004094:	4ba1      	ldr	r3, [pc, #644]	@ (800431c <main+0x918>)
 8004096:	899b      	ldrh	r3, [r3, #12]
 8004098:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800409c:	d1e4      	bne.n	8004068 <main+0x664>
	  }
  }

  while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000)
 800409e:	e013      	b.n	80040c8 <main+0x6c4>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80040a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80040a4:	489e      	ldr	r0, [pc, #632]	@ (8004320 <main+0x91c>)
 80040a6:	f7ff fbd9 	bl	800385c <LL_TIM_CC_EnableChannel>

	  TIM3->PSC = 1000;
 80040aa:	4b9d      	ldr	r3, [pc, #628]	@ (8004320 <main+0x91c>)
 80040ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80040b0:	629a      	str	r2, [r3, #40]	@ 0x28
	  HAL_Delay(70);
 80040b2:	2046      	movs	r0, #70	@ 0x46
 80040b4:	f002 fdc6 	bl	8006c44 <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80040b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80040bc:	4898      	ldr	r0, [pc, #608]	@ (8004320 <main+0x91c>)
 80040be:	f7ff fbde 	bl	800387e <LL_TIM_CC_DisableChannel>
	  HAL_Delay(70);
 80040c2:	2046      	movs	r0, #70	@ 0x46
 80040c4:	f002 fdbe 	bl	8006c44 <HAL_Delay>
  while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000)
 80040c8:	f000 fe9a 	bl	8004e00 <Is_iBus_Throttle_Min>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0e6      	beq.n	80040a0 <main+0x69c>
 80040d2:	4b92      	ldr	r3, [pc, #584]	@ (800431c <main+0x918>)
 80040d4:	891b      	ldrh	r3, [r3, #8]
 80040d6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80040da:	d0e1      	beq.n	80040a0 <main+0x69c>
  }

  // buzzer on
  LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4);
 80040dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80040e0:	488f      	ldr	r0, [pc, #572]	@ (8004320 <main+0x91c>)
 80040e2:	f7ff fbbb 	bl	800385c <LL_TIM_CC_EnableChannel>

  TIM3->PSC = 2000; // buzzer pwm
 80040e6:	4b8e      	ldr	r3, [pc, #568]	@ (8004320 <main+0x91c>)
 80040e8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80040ec:	629a      	str	r2, [r3, #40]	@ 0x28
  //TIM3->CCR4 = TIM3->ARR/2; // PWM Width
  HAL_Delay(100);
 80040ee:	2064      	movs	r0, #100	@ 0x64
 80040f0:	f002 fda8 	bl	8006c44 <HAL_Delay>
  TIM3->PSC = 1500; // buzzer pwm
 80040f4:	4b8a      	ldr	r3, [pc, #552]	@ (8004320 <main+0x91c>)
 80040f6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80040fa:	629a      	str	r2, [r3, #40]	@ 0x28
   HAL_Delay(100);
 80040fc:	2064      	movs	r0, #100	@ 0x64
 80040fe:	f002 fda1 	bl	8006c44 <HAL_Delay>
  TIM3->PSC = 1000; // buzzer pwm
 8004102:	4b87      	ldr	r3, [pc, #540]	@ (8004320 <main+0x91c>)
 8004104:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004108:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_Delay(100);
 800410a:	2064      	movs	r0, #100	@ 0x64
 800410c:	f002 fd9a 	bl	8006c44 <HAL_Delay>

  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004110:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004114:	4882      	ldr	r0, [pc, #520]	@ (8004320 <main+0x91c>)
 8004116:	f7ff fbb2 	bl	800387e <LL_TIM_CC_DisableChannel>
  {

	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */
	  if(iBus.SwA == 2000 && iBus_SwA_Prev != 2000)
 800411a:	4b80      	ldr	r3, [pc, #512]	@ (800431c <main+0x918>)
 800411c:	891b      	ldrh	r3, [r3, #8]
 800411e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004122:	d12c      	bne.n	800417e <main+0x77a>
 8004124:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004128:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800412c:	d027      	beq.n	800417e <main+0x77a>
	  {
		  if(iBus.LV < 1010)
 800412e:	4b7b      	ldr	r3, [pc, #492]	@ (800431c <main+0x918>)
 8004130:	889b      	ldrh	r3, [r3, #4]
 8004132:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8004136:	4293      	cmp	r3, r2
 8004138:	d817      	bhi.n	800416a <main+0x766>
		  {
			  motor_arming_flag = 1;
 800413a:	2301      	movs	r3, #1
 800413c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8004140:	e01d      	b.n	800417e <main+0x77a>
		  }
		  else
		  {
			  while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000)
			  {
				  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004142:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004146:	4876      	ldr	r0, [pc, #472]	@ (8004320 <main+0x91c>)
 8004148:	f7ff fb88 	bl	800385c <LL_TIM_CC_EnableChannel>

				  TIM3->PSC = 1000;
 800414c:	4b74      	ldr	r3, [pc, #464]	@ (8004320 <main+0x91c>)
 800414e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004152:	629a      	str	r2, [r3, #40]	@ 0x28
				  HAL_Delay(70);
 8004154:	2046      	movs	r0, #70	@ 0x46
 8004156:	f002 fd75 	bl	8006c44 <HAL_Delay>
				  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800415a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800415e:	4870      	ldr	r0, [pc, #448]	@ (8004320 <main+0x91c>)
 8004160:	f7ff fb8d 	bl	800387e <LL_TIM_CC_DisableChannel>
				  HAL_Delay(70);
 8004164:	2046      	movs	r0, #70	@ 0x46
 8004166:	f002 fd6d 	bl	8006c44 <HAL_Delay>
			  while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000)
 800416a:	f000 fe49 	bl	8004e00 <Is_iBus_Throttle_Min>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d0e6      	beq.n	8004142 <main+0x73e>
 8004174:	4b69      	ldr	r3, [pc, #420]	@ (800431c <main+0x918>)
 8004176:	891b      	ldrh	r3, [r3, #8]
 8004178:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800417c:	d0e1      	beq.n	8004142 <main+0x73e>
			  }
		  }
	  }
	  iBus_SwA_Prev = iBus.SwA;
 800417e:	4b67      	ldr	r3, [pc, #412]	@ (800431c <main+0x918>)
 8004180:	891b      	ldrh	r3, [r3, #8]
 8004182:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

	  if(iBus.SwA != 2000)
 8004186:	4b65      	ldr	r3, [pc, #404]	@ (800431c <main+0x918>)
 8004188:	891b      	ldrh	r3, [r3, #8]
 800418a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800418e:	d002      	beq.n	8004196 <main+0x792>
	  {
		  motor_arming_flag = 0;
 8004190:	2300      	movs	r3, #0
 8004192:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	  }

	  if(motor_arming_flag == 1)
 8004196:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800419a:	2b01      	cmp	r3, #1
 800419c:	d149      	bne.n	8004232 <main+0x82e>
	  {
		  if(failsafe_flag == 0)
 800419e:	4b61      	ldr	r3, [pc, #388]	@ (8004324 <main+0x920>)
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d134      	bne.n	8004210 <main+0x80c>
		  {
			  TIM5->CCR1 = 10500 + 500 + (iBus.LV - 1000) * 10;
 80041a6:	4b5d      	ldr	r3, [pc, #372]	@ (800431c <main+0x918>)
 80041a8:	889b      	ldrh	r3, [r3, #4]
 80041aa:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 80041ae:	4613      	mov	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 80041ba:	3338      	adds	r3, #56	@ 0x38
 80041bc:	4a5a      	ldr	r2, [pc, #360]	@ (8004328 <main+0x924>)
 80041be:	6353      	str	r3, [r2, #52]	@ 0x34
			  TIM5->CCR2 = 10500 + 500 + (iBus.LV - 1000) * 10;
 80041c0:	4b56      	ldr	r3, [pc, #344]	@ (800431c <main+0x918>)
 80041c2:	889b      	ldrh	r3, [r3, #4]
 80041c4:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 80041c8:	4613      	mov	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 80041d4:	3338      	adds	r3, #56	@ 0x38
 80041d6:	4a54      	ldr	r2, [pc, #336]	@ (8004328 <main+0x924>)
 80041d8:	6393      	str	r3, [r2, #56]	@ 0x38
			  TIM5->CCR3 = 10500 + 500 + (iBus.LV - 1000) * 10;
 80041da:	4b50      	ldr	r3, [pc, #320]	@ (800431c <main+0x918>)
 80041dc:	889b      	ldrh	r3, [r3, #4]
 80041de:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 80041e2:	4613      	mov	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4413      	add	r3, r2
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 80041ee:	3338      	adds	r3, #56	@ 0x38
 80041f0:	4a4d      	ldr	r2, [pc, #308]	@ (8004328 <main+0x924>)
 80041f2:	63d3      	str	r3, [r2, #60]	@ 0x3c
			  TIM5->CCR4 = 10500 + 500 + (iBus.LV - 1000) * 10;
 80041f4:	4b49      	ldr	r3, [pc, #292]	@ (800431c <main+0x918>)
 80041f6:	889b      	ldrh	r3, [r3, #4]
 80041f8:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 80041fc:	4613      	mov	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 8004208:	3338      	adds	r3, #56	@ 0x38
 800420a:	4a47      	ldr	r2, [pc, #284]	@ (8004328 <main+0x924>)
 800420c:	6413      	str	r3, [r2, #64]	@ 0x40
 800420e:	e020      	b.n	8004252 <main+0x84e>
		  }
		  else
		  {
			  TIM5->CCR1 = 10500;
 8004210:	4b45      	ldr	r3, [pc, #276]	@ (8004328 <main+0x924>)
 8004212:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004216:	635a      	str	r2, [r3, #52]	@ 0x34
			  TIM5->CCR2 = 10500;
 8004218:	4b43      	ldr	r3, [pc, #268]	@ (8004328 <main+0x924>)
 800421a:	f642 1204 	movw	r2, #10500	@ 0x2904
 800421e:	639a      	str	r2, [r3, #56]	@ 0x38
			  TIM5->CCR3 = 10500;
 8004220:	4b41      	ldr	r3, [pc, #260]	@ (8004328 <main+0x924>)
 8004222:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004226:	63da      	str	r2, [r3, #60]	@ 0x3c
			  TIM5->CCR4 = 10500;
 8004228:	4b3f      	ldr	r3, [pc, #252]	@ (8004328 <main+0x924>)
 800422a:	f642 1204 	movw	r2, #10500	@ 0x2904
 800422e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004230:	e00f      	b.n	8004252 <main+0x84e>
		  }
	  }
	  else
	  {
		  TIM5->CCR1 = 10500;
 8004232:	4b3d      	ldr	r3, [pc, #244]	@ (8004328 <main+0x924>)
 8004234:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004238:	635a      	str	r2, [r3, #52]	@ 0x34
		  TIM5->CCR2 = 10500;
 800423a:	4b3b      	ldr	r3, [pc, #236]	@ (8004328 <main+0x924>)
 800423c:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004240:	639a      	str	r2, [r3, #56]	@ 0x38
		  TIM5->CCR3 = 10500;
 8004242:	4b39      	ldr	r3, [pc, #228]	@ (8004328 <main+0x924>)
 8004244:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004248:	63da      	str	r2, [r3, #60]	@ 0x3c
		  TIM5->CCR4 = 10500;
 800424a:	4b37      	ldr	r3, [pc, #220]	@ (8004328 <main+0x924>)
 800424c:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004250:	641a      	str	r2, [r3, #64]	@ 0x40
//	  TIM5->CCR2 = 10500 + (iBus.LV - 1000) * 10.5f;
//	  TIM5->CCR3 = 10500+ (iBus.LV - 1000) * 10.5f;
//	  TIM5->CCR4 = 10500+ (iBus.LV - 1000) * 10.5f;

	  //telemtry
	  if(telemetry_rx_cplt_flag == 1)
 8004252:	4b36      	ldr	r3, [pc, #216]	@ (800432c <main+0x928>)
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	2b01      	cmp	r3, #1
 8004258:	f040 83a8 	bne.w	80049ac <main+0xfa8>
	  {
		  telemetry_rx_cplt_flag = 0;
 800425c:	4b33      	ldr	r3, [pc, #204]	@ (800432c <main+0x928>)
 800425e:	2200      	movs	r2, #0
 8004260:	701a      	strb	r2, [r3, #0]

		  if(iBus.SwA == 1000)
 8004262:	4b2e      	ldr	r3, [pc, #184]	@ (800431c <main+0x918>)
 8004264:	891b      	ldrh	r3, [r3, #8]
 8004266:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800426a:	f040 839f 	bne.w	80049ac <main+0xfa8>
		  {
			  unsigned char chksum = 0xff;
 800426e:	23ff      	movs	r3, #255	@ 0xff
 8004270:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
			  for(int i=0;i<19;i++) chksum = chksum - telemetry_rx_buf[i];
 8004274:	2300      	movs	r3, #0
 8004276:	647b      	str	r3, [r7, #68]	@ 0x44
 8004278:	e00b      	b.n	8004292 <main+0x88e>
 800427a:	4a2d      	ldr	r2, [pc, #180]	@ (8004330 <main+0x92c>)
 800427c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800427e:	4413      	add	r3, r2
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	f897 204a 	ldrb.w	r2, [r7, #74]	@ 0x4a
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 800428c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800428e:	3301      	adds	r3, #1
 8004290:	647b      	str	r3, [r7, #68]	@ 0x44
 8004292:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004294:	2b12      	cmp	r3, #18
 8004296:	ddf0      	ble.n	800427a <main+0x876>

			  if(chksum == telemetry_rx_buf[19])
 8004298:	4b25      	ldr	r3, [pc, #148]	@ (8004330 <main+0x92c>)
 800429a:	7cdb      	ldrb	r3, [r3, #19]
 800429c:	f897 204a 	ldrb.w	r2, [r7, #74]	@ 0x4a
 80042a0:	429a      	cmp	r2, r3
 80042a2:	f040 8383 	bne.w	80049ac <main+0xfa8>
			  {
				  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80042a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80042aa:	481d      	ldr	r0, [pc, #116]	@ (8004320 <main+0x91c>)
 80042ac:	f7ff fad6 	bl	800385c <LL_TIM_CC_EnableChannel>

				  TIM3->PSC = 1000;
 80042b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004320 <main+0x91c>)
 80042b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80042b6:	629a      	str	r2, [r3, #40]	@ 0x28
				  HAL_Delay(10);
 80042b8:	200a      	movs	r0, #10
 80042ba:	f002 fcc3 	bl	8006c44 <HAL_Delay>

				  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80042be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80042c2:	4817      	ldr	r0, [pc, #92]	@ (8004320 <main+0x91c>)
 80042c4:	f7ff fadb 	bl	800387e <LL_TIM_CC_DisableChannel>

				  switch(telemetry_rx_buf[2])
 80042c8:	4b19      	ldr	r3, [pc, #100]	@ (8004330 <main+0x92c>)
 80042ca:	789b      	ldrb	r3, [r3, #2]
 80042cc:	2b10      	cmp	r3, #16
 80042ce:	f200 836d 	bhi.w	80049ac <main+0xfa8>
 80042d2:	a201      	add	r2, pc, #4	@ (adr r2, 80042d8 <main+0x8d4>)
 80042d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d8:	08004335 	.word	0x08004335
 80042dc:	080043b9 	.word	0x080043b9
 80042e0:	0800443d 	.word	0x0800443d
 80042e4:	080044c1 	.word	0x080044c1
 80042e8:	08004545 	.word	0x08004545
 80042ec:	0800461d 	.word	0x0800461d
 80042f0:	080049ad 	.word	0x080049ad
 80042f4:	080049ad 	.word	0x080049ad
 80042f8:	080049ad 	.word	0x080049ad
 80042fc:	080049ad 	.word	0x080049ad
 8004300:	080049ad 	.word	0x080049ad
 8004304:	080049ad 	.word	0x080049ad
 8004308:	080049ad 	.word	0x080049ad
 800430c:	080049ad 	.word	0x080049ad
 8004310:	080049ad 	.word	0x080049ad
 8004314:	080049ad 	.word	0x080049ad
 8004318:	080046a1 	.word	0x080046a1
 800431c:	200002c0 	.word	0x200002c0
 8004320:	40000400 	.word	0x40000400
 8004324:	200004d4 	.word	0x200004d4
 8004328:	40000c00 	.word	0x40000c00
 800432c:	20000484 	.word	0x20000484
 8004330:	20000470 	.word	0x20000470
				  {
				  case 0:
					  roll_in_kp = *(float*)&telemetry_rx_buf[3];
 8004334:	4ba4      	ldr	r3, [pc, #656]	@ (80045c8 <main+0xbc4>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4aa4      	ldr	r2, [pc, #656]	@ (80045cc <main+0xbc8>)
 800433a:	6013      	str	r3, [r2, #0]
					  roll_in_ki = *(float*)&telemetry_rx_buf[7];
 800433c:	4ba4      	ldr	r3, [pc, #656]	@ (80045d0 <main+0xbcc>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4aa4      	ldr	r2, [pc, #656]	@ (80045d4 <main+0xbd0>)
 8004342:	6013      	str	r3, [r2, #0]
					  roll_in_kd = *(float*)&telemetry_rx_buf[11];
 8004344:	4ba4      	ldr	r3, [pc, #656]	@ (80045d8 <main+0xbd4>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4aa4      	ldr	r2, [pc, #656]	@ (80045dc <main+0xbd8>)
 800434a:	6013      	str	r3, [r2, #0]
					  EP_PIDGain_Write(telemetry_rx_buf[2], roll_in_kp, roll_in_ki, roll_in_kd);
 800434c:	4ba4      	ldr	r3, [pc, #656]	@ (80045e0 <main+0xbdc>)
 800434e:	789b      	ldrb	r3, [r3, #2]
 8004350:	4a9e      	ldr	r2, [pc, #632]	@ (80045cc <main+0xbc8>)
 8004352:	edd2 7a00 	vldr	s15, [r2]
 8004356:	4a9f      	ldr	r2, [pc, #636]	@ (80045d4 <main+0xbd0>)
 8004358:	ed92 7a00 	vldr	s14, [r2]
 800435c:	4a9f      	ldr	r2, [pc, #636]	@ (80045dc <main+0xbd8>)
 800435e:	edd2 6a00 	vldr	s13, [r2]
 8004362:	eeb0 1a66 	vmov.f32	s2, s13
 8004366:	eef0 0a47 	vmov.f32	s1, s14
 800436a:	eeb0 0a67 	vmov.f32	s0, s15
 800436e:	4618      	mov	r0, r3
 8004370:	f7fc fe10 	bl	8000f94 <EP_PIDGain_Write>
					  EP_PIDGain_Read(telemetry_rx_buf[2], &roll_in_kp, &roll_in_ki, &roll_in_kd);
 8004374:	4b9a      	ldr	r3, [pc, #616]	@ (80045e0 <main+0xbdc>)
 8004376:	7898      	ldrb	r0, [r3, #2]
 8004378:	4b98      	ldr	r3, [pc, #608]	@ (80045dc <main+0xbd8>)
 800437a:	4a96      	ldr	r2, [pc, #600]	@ (80045d4 <main+0xbd0>)
 800437c:	4993      	ldr	r1, [pc, #588]	@ (80045cc <main+0xbc8>)
 800437e:	f7fc fe9f 	bl	80010c0 <EP_PIDGain_Read>
					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], roll_in_kp, roll_in_ki, roll_in_kd);
 8004382:	4b97      	ldr	r3, [pc, #604]	@ (80045e0 <main+0xbdc>)
 8004384:	789b      	ldrb	r3, [r3, #2]
 8004386:	4a91      	ldr	r2, [pc, #580]	@ (80045cc <main+0xbc8>)
 8004388:	edd2 7a00 	vldr	s15, [r2]
 800438c:	4a91      	ldr	r2, [pc, #580]	@ (80045d4 <main+0xbd0>)
 800438e:	ed92 7a00 	vldr	s14, [r2]
 8004392:	4a92      	ldr	r2, [pc, #584]	@ (80045dc <main+0xbd8>)
 8004394:	edd2 6a00 	vldr	s13, [r2]
 8004398:	eeb0 1a66 	vmov.f32	s2, s13
 800439c:	eef0 0a47 	vmov.f32	s1, s14
 80043a0:	eeb0 0a67 	vmov.f32	s0, s15
 80043a4:	4619      	mov	r1, r3
 80043a6:	488f      	ldr	r0, [pc, #572]	@ (80045e4 <main+0xbe0>)
 80043a8:	f001 f9b6 	bl	8005718 <Encode_Msg_PID_Gain>
					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 80043ac:	2214      	movs	r2, #20
 80043ae:	498d      	ldr	r1, [pc, #564]	@ (80045e4 <main+0xbe0>)
 80043b0:	488d      	ldr	r0, [pc, #564]	@ (80045e8 <main+0xbe4>)
 80043b2:	f005 fcc4 	bl	8009d3e <HAL_UART_Transmit_IT>
					  break;
 80043b6:	e2f9      	b.n	80049ac <main+0xfa8>
				  case 1:
					  roll_out_kp = *(float*)&telemetry_rx_buf[3];
 80043b8:	4b83      	ldr	r3, [pc, #524]	@ (80045c8 <main+0xbc4>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a8b      	ldr	r2, [pc, #556]	@ (80045ec <main+0xbe8>)
 80043be:	6013      	str	r3, [r2, #0]
					  roll_out_ki = *(float*)&telemetry_rx_buf[7];
 80043c0:	4b83      	ldr	r3, [pc, #524]	@ (80045d0 <main+0xbcc>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a8a      	ldr	r2, [pc, #552]	@ (80045f0 <main+0xbec>)
 80043c6:	6013      	str	r3, [r2, #0]
					  roll_out_kd = *(float*)&telemetry_rx_buf[11];
 80043c8:	4b83      	ldr	r3, [pc, #524]	@ (80045d8 <main+0xbd4>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a89      	ldr	r2, [pc, #548]	@ (80045f4 <main+0xbf0>)
 80043ce:	6013      	str	r3, [r2, #0]
					  EP_PIDGain_Write(telemetry_rx_buf[2], roll_out_kp, roll_out_ki, roll_out_kd);
 80043d0:	4b83      	ldr	r3, [pc, #524]	@ (80045e0 <main+0xbdc>)
 80043d2:	789b      	ldrb	r3, [r3, #2]
 80043d4:	4a85      	ldr	r2, [pc, #532]	@ (80045ec <main+0xbe8>)
 80043d6:	edd2 7a00 	vldr	s15, [r2]
 80043da:	4a85      	ldr	r2, [pc, #532]	@ (80045f0 <main+0xbec>)
 80043dc:	ed92 7a00 	vldr	s14, [r2]
 80043e0:	4a84      	ldr	r2, [pc, #528]	@ (80045f4 <main+0xbf0>)
 80043e2:	edd2 6a00 	vldr	s13, [r2]
 80043e6:	eeb0 1a66 	vmov.f32	s2, s13
 80043ea:	eef0 0a47 	vmov.f32	s1, s14
 80043ee:	eeb0 0a67 	vmov.f32	s0, s15
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fc fdce 	bl	8000f94 <EP_PIDGain_Write>
					  EP_PIDGain_Read(telemetry_rx_buf[2], &roll_out_kp, &roll_out_ki, &roll_out_kd);
 80043f8:	4b79      	ldr	r3, [pc, #484]	@ (80045e0 <main+0xbdc>)
 80043fa:	7898      	ldrb	r0, [r3, #2]
 80043fc:	4b7d      	ldr	r3, [pc, #500]	@ (80045f4 <main+0xbf0>)
 80043fe:	4a7c      	ldr	r2, [pc, #496]	@ (80045f0 <main+0xbec>)
 8004400:	497a      	ldr	r1, [pc, #488]	@ (80045ec <main+0xbe8>)
 8004402:	f7fc fe5d 	bl	80010c0 <EP_PIDGain_Read>
					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], roll_out_kp, roll_out_ki, roll_out_kd);
 8004406:	4b76      	ldr	r3, [pc, #472]	@ (80045e0 <main+0xbdc>)
 8004408:	789b      	ldrb	r3, [r3, #2]
 800440a:	4a78      	ldr	r2, [pc, #480]	@ (80045ec <main+0xbe8>)
 800440c:	edd2 7a00 	vldr	s15, [r2]
 8004410:	4a77      	ldr	r2, [pc, #476]	@ (80045f0 <main+0xbec>)
 8004412:	ed92 7a00 	vldr	s14, [r2]
 8004416:	4a77      	ldr	r2, [pc, #476]	@ (80045f4 <main+0xbf0>)
 8004418:	edd2 6a00 	vldr	s13, [r2]
 800441c:	eeb0 1a66 	vmov.f32	s2, s13
 8004420:	eef0 0a47 	vmov.f32	s1, s14
 8004424:	eeb0 0a67 	vmov.f32	s0, s15
 8004428:	4619      	mov	r1, r3
 800442a:	486e      	ldr	r0, [pc, #440]	@ (80045e4 <main+0xbe0>)
 800442c:	f001 f974 	bl	8005718 <Encode_Msg_PID_Gain>
					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8004430:	2214      	movs	r2, #20
 8004432:	496c      	ldr	r1, [pc, #432]	@ (80045e4 <main+0xbe0>)
 8004434:	486c      	ldr	r0, [pc, #432]	@ (80045e8 <main+0xbe4>)
 8004436:	f005 fc82 	bl	8009d3e <HAL_UART_Transmit_IT>
					  break;
 800443a:	e2b7      	b.n	80049ac <main+0xfa8>
				  case 2:
					  pitch_in_kp = *(float*)&telemetry_rx_buf[3];
 800443c:	4b62      	ldr	r3, [pc, #392]	@ (80045c8 <main+0xbc4>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a6d      	ldr	r2, [pc, #436]	@ (80045f8 <main+0xbf4>)
 8004442:	6013      	str	r3, [r2, #0]
					  pitch_in_ki = *(float*)&telemetry_rx_buf[7];
 8004444:	4b62      	ldr	r3, [pc, #392]	@ (80045d0 <main+0xbcc>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a6c      	ldr	r2, [pc, #432]	@ (80045fc <main+0xbf8>)
 800444a:	6013      	str	r3, [r2, #0]
					  pitch_in_kd = *(float*)&telemetry_rx_buf[11];
 800444c:	4b62      	ldr	r3, [pc, #392]	@ (80045d8 <main+0xbd4>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a6b      	ldr	r2, [pc, #428]	@ (8004600 <main+0xbfc>)
 8004452:	6013      	str	r3, [r2, #0]
					  EP_PIDGain_Write(telemetry_rx_buf[2], pitch_in_kp, pitch_in_ki, pitch_in_kd);
 8004454:	4b62      	ldr	r3, [pc, #392]	@ (80045e0 <main+0xbdc>)
 8004456:	789b      	ldrb	r3, [r3, #2]
 8004458:	4a67      	ldr	r2, [pc, #412]	@ (80045f8 <main+0xbf4>)
 800445a:	edd2 7a00 	vldr	s15, [r2]
 800445e:	4a67      	ldr	r2, [pc, #412]	@ (80045fc <main+0xbf8>)
 8004460:	ed92 7a00 	vldr	s14, [r2]
 8004464:	4a66      	ldr	r2, [pc, #408]	@ (8004600 <main+0xbfc>)
 8004466:	edd2 6a00 	vldr	s13, [r2]
 800446a:	eeb0 1a66 	vmov.f32	s2, s13
 800446e:	eef0 0a47 	vmov.f32	s1, s14
 8004472:	eeb0 0a67 	vmov.f32	s0, s15
 8004476:	4618      	mov	r0, r3
 8004478:	f7fc fd8c 	bl	8000f94 <EP_PIDGain_Write>
					  EP_PIDGain_Read(telemetry_rx_buf[2], &pitch_in_kp, &pitch_in_ki, &pitch_in_kd);
 800447c:	4b58      	ldr	r3, [pc, #352]	@ (80045e0 <main+0xbdc>)
 800447e:	7898      	ldrb	r0, [r3, #2]
 8004480:	4b5f      	ldr	r3, [pc, #380]	@ (8004600 <main+0xbfc>)
 8004482:	4a5e      	ldr	r2, [pc, #376]	@ (80045fc <main+0xbf8>)
 8004484:	495c      	ldr	r1, [pc, #368]	@ (80045f8 <main+0xbf4>)
 8004486:	f7fc fe1b 	bl	80010c0 <EP_PIDGain_Read>
					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], pitch_in_kp, pitch_in_ki, pitch_in_kd);
 800448a:	4b55      	ldr	r3, [pc, #340]	@ (80045e0 <main+0xbdc>)
 800448c:	789b      	ldrb	r3, [r3, #2]
 800448e:	4a5a      	ldr	r2, [pc, #360]	@ (80045f8 <main+0xbf4>)
 8004490:	edd2 7a00 	vldr	s15, [r2]
 8004494:	4a59      	ldr	r2, [pc, #356]	@ (80045fc <main+0xbf8>)
 8004496:	ed92 7a00 	vldr	s14, [r2]
 800449a:	4a59      	ldr	r2, [pc, #356]	@ (8004600 <main+0xbfc>)
 800449c:	edd2 6a00 	vldr	s13, [r2]
 80044a0:	eeb0 1a66 	vmov.f32	s2, s13
 80044a4:	eef0 0a47 	vmov.f32	s1, s14
 80044a8:	eeb0 0a67 	vmov.f32	s0, s15
 80044ac:	4619      	mov	r1, r3
 80044ae:	484d      	ldr	r0, [pc, #308]	@ (80045e4 <main+0xbe0>)
 80044b0:	f001 f932 	bl	8005718 <Encode_Msg_PID_Gain>
					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 80044b4:	2214      	movs	r2, #20
 80044b6:	494b      	ldr	r1, [pc, #300]	@ (80045e4 <main+0xbe0>)
 80044b8:	484b      	ldr	r0, [pc, #300]	@ (80045e8 <main+0xbe4>)
 80044ba:	f005 fc40 	bl	8009d3e <HAL_UART_Transmit_IT>
					  break;
 80044be:	e275      	b.n	80049ac <main+0xfa8>
				  case 3:
					  pitch_out_kp = *(float*)&telemetry_rx_buf[3];
 80044c0:	4b41      	ldr	r3, [pc, #260]	@ (80045c8 <main+0xbc4>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a4f      	ldr	r2, [pc, #316]	@ (8004604 <main+0xc00>)
 80044c6:	6013      	str	r3, [r2, #0]
					  pitch_out_ki = *(float*)&telemetry_rx_buf[7];
 80044c8:	4b41      	ldr	r3, [pc, #260]	@ (80045d0 <main+0xbcc>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a4e      	ldr	r2, [pc, #312]	@ (8004608 <main+0xc04>)
 80044ce:	6013      	str	r3, [r2, #0]
					  pitch_out_kd = *(float*)&telemetry_rx_buf[11];
 80044d0:	4b41      	ldr	r3, [pc, #260]	@ (80045d8 <main+0xbd4>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a4d      	ldr	r2, [pc, #308]	@ (800460c <main+0xc08>)
 80044d6:	6013      	str	r3, [r2, #0]
					  EP_PIDGain_Write(telemetry_rx_buf[2], pitch_out_kp, pitch_out_ki, pitch_out_kd);
 80044d8:	4b41      	ldr	r3, [pc, #260]	@ (80045e0 <main+0xbdc>)
 80044da:	789b      	ldrb	r3, [r3, #2]
 80044dc:	4a49      	ldr	r2, [pc, #292]	@ (8004604 <main+0xc00>)
 80044de:	edd2 7a00 	vldr	s15, [r2]
 80044e2:	4a49      	ldr	r2, [pc, #292]	@ (8004608 <main+0xc04>)
 80044e4:	ed92 7a00 	vldr	s14, [r2]
 80044e8:	4a48      	ldr	r2, [pc, #288]	@ (800460c <main+0xc08>)
 80044ea:	edd2 6a00 	vldr	s13, [r2]
 80044ee:	eeb0 1a66 	vmov.f32	s2, s13
 80044f2:	eef0 0a47 	vmov.f32	s1, s14
 80044f6:	eeb0 0a67 	vmov.f32	s0, s15
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7fc fd4a 	bl	8000f94 <EP_PIDGain_Write>
					  EP_PIDGain_Read(telemetry_rx_buf[2], &pitch_out_kp, &pitch_out_ki, &pitch_out_kd);
 8004500:	4b37      	ldr	r3, [pc, #220]	@ (80045e0 <main+0xbdc>)
 8004502:	7898      	ldrb	r0, [r3, #2]
 8004504:	4b41      	ldr	r3, [pc, #260]	@ (800460c <main+0xc08>)
 8004506:	4a40      	ldr	r2, [pc, #256]	@ (8004608 <main+0xc04>)
 8004508:	493e      	ldr	r1, [pc, #248]	@ (8004604 <main+0xc00>)
 800450a:	f7fc fdd9 	bl	80010c0 <EP_PIDGain_Read>
					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], pitch_out_kp, pitch_out_ki, pitch_out_kd);
 800450e:	4b34      	ldr	r3, [pc, #208]	@ (80045e0 <main+0xbdc>)
 8004510:	789b      	ldrb	r3, [r3, #2]
 8004512:	4a3c      	ldr	r2, [pc, #240]	@ (8004604 <main+0xc00>)
 8004514:	edd2 7a00 	vldr	s15, [r2]
 8004518:	4a3b      	ldr	r2, [pc, #236]	@ (8004608 <main+0xc04>)
 800451a:	ed92 7a00 	vldr	s14, [r2]
 800451e:	4a3b      	ldr	r2, [pc, #236]	@ (800460c <main+0xc08>)
 8004520:	edd2 6a00 	vldr	s13, [r2]
 8004524:	eeb0 1a66 	vmov.f32	s2, s13
 8004528:	eef0 0a47 	vmov.f32	s1, s14
 800452c:	eeb0 0a67 	vmov.f32	s0, s15
 8004530:	4619      	mov	r1, r3
 8004532:	482c      	ldr	r0, [pc, #176]	@ (80045e4 <main+0xbe0>)
 8004534:	f001 f8f0 	bl	8005718 <Encode_Msg_PID_Gain>
					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8004538:	2214      	movs	r2, #20
 800453a:	492a      	ldr	r1, [pc, #168]	@ (80045e4 <main+0xbe0>)
 800453c:	482a      	ldr	r0, [pc, #168]	@ (80045e8 <main+0xbe4>)
 800453e:	f005 fbfe 	bl	8009d3e <HAL_UART_Transmit_IT>
					  break;
 8004542:	e233      	b.n	80049ac <main+0xfa8>
				  case 4:
					  yaw_heading_kp = *(float*)&telemetry_rx_buf[3];
 8004544:	4b20      	ldr	r3, [pc, #128]	@ (80045c8 <main+0xbc4>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a31      	ldr	r2, [pc, #196]	@ (8004610 <main+0xc0c>)
 800454a:	6013      	str	r3, [r2, #0]
					  yaw_heading_ki = *(float*)&telemetry_rx_buf[7];
 800454c:	4b20      	ldr	r3, [pc, #128]	@ (80045d0 <main+0xbcc>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a30      	ldr	r2, [pc, #192]	@ (8004614 <main+0xc10>)
 8004552:	6013      	str	r3, [r2, #0]
					  yaw_heading_kd = *(float*)&telemetry_rx_buf[11];
 8004554:	4b20      	ldr	r3, [pc, #128]	@ (80045d8 <main+0xbd4>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a2f      	ldr	r2, [pc, #188]	@ (8004618 <main+0xc14>)
 800455a:	6013      	str	r3, [r2, #0]
					  EP_PIDGain_Write(telemetry_rx_buf[2], yaw_heading_kp, yaw_heading_ki, yaw_heading_kd);
 800455c:	4b20      	ldr	r3, [pc, #128]	@ (80045e0 <main+0xbdc>)
 800455e:	789b      	ldrb	r3, [r3, #2]
 8004560:	4a2b      	ldr	r2, [pc, #172]	@ (8004610 <main+0xc0c>)
 8004562:	edd2 7a00 	vldr	s15, [r2]
 8004566:	4a2b      	ldr	r2, [pc, #172]	@ (8004614 <main+0xc10>)
 8004568:	ed92 7a00 	vldr	s14, [r2]
 800456c:	4a2a      	ldr	r2, [pc, #168]	@ (8004618 <main+0xc14>)
 800456e:	edd2 6a00 	vldr	s13, [r2]
 8004572:	eeb0 1a66 	vmov.f32	s2, s13
 8004576:	eef0 0a47 	vmov.f32	s1, s14
 800457a:	eeb0 0a67 	vmov.f32	s0, s15
 800457e:	4618      	mov	r0, r3
 8004580:	f7fc fd08 	bl	8000f94 <EP_PIDGain_Write>
					  EP_PIDGain_Read(telemetry_rx_buf[2], &yaw_heading_kp, &yaw_heading_ki, &yaw_heading_kd);
 8004584:	4b16      	ldr	r3, [pc, #88]	@ (80045e0 <main+0xbdc>)
 8004586:	7898      	ldrb	r0, [r3, #2]
 8004588:	4b23      	ldr	r3, [pc, #140]	@ (8004618 <main+0xc14>)
 800458a:	4a22      	ldr	r2, [pc, #136]	@ (8004614 <main+0xc10>)
 800458c:	4920      	ldr	r1, [pc, #128]	@ (8004610 <main+0xc0c>)
 800458e:	f7fc fd97 	bl	80010c0 <EP_PIDGain_Read>
					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], yaw_heading_kp, yaw_heading_ki, yaw_heading_kd);
 8004592:	4b13      	ldr	r3, [pc, #76]	@ (80045e0 <main+0xbdc>)
 8004594:	789b      	ldrb	r3, [r3, #2]
 8004596:	4a1e      	ldr	r2, [pc, #120]	@ (8004610 <main+0xc0c>)
 8004598:	edd2 7a00 	vldr	s15, [r2]
 800459c:	4a1d      	ldr	r2, [pc, #116]	@ (8004614 <main+0xc10>)
 800459e:	ed92 7a00 	vldr	s14, [r2]
 80045a2:	4a1d      	ldr	r2, [pc, #116]	@ (8004618 <main+0xc14>)
 80045a4:	edd2 6a00 	vldr	s13, [r2]
 80045a8:	eeb0 1a66 	vmov.f32	s2, s13
 80045ac:	eef0 0a47 	vmov.f32	s1, s14
 80045b0:	eeb0 0a67 	vmov.f32	s0, s15
 80045b4:	4619      	mov	r1, r3
 80045b6:	480b      	ldr	r0, [pc, #44]	@ (80045e4 <main+0xbe0>)
 80045b8:	f001 f8ae 	bl	8005718 <Encode_Msg_PID_Gain>
					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 80045bc:	2214      	movs	r2, #20
 80045be:	4909      	ldr	r1, [pc, #36]	@ (80045e4 <main+0xbe0>)
 80045c0:	4809      	ldr	r0, [pc, #36]	@ (80045e8 <main+0xbe4>)
 80045c2:	f005 fbbc 	bl	8009d3e <HAL_UART_Transmit_IT>
					  break;
 80045c6:	e1f1      	b.n	80049ac <main+0xfa8>
 80045c8:	20000473 	.word	0x20000473
 80045cc:	2000048c 	.word	0x2000048c
 80045d0:	20000477 	.word	0x20000477
 80045d4:	20000490 	.word	0x20000490
 80045d8:	2000047b 	.word	0x2000047b
 80045dc:	20000494 	.word	0x20000494
 80045e0:	20000470 	.word	0x20000470
 80045e4:	20000448 	.word	0x20000448
 80045e8:	20000538 	.word	0x20000538
 80045ec:	20000498 	.word	0x20000498
 80045f0:	2000049c 	.word	0x2000049c
 80045f4:	200004a0 	.word	0x200004a0
 80045f8:	200004a4 	.word	0x200004a4
 80045fc:	200004a8 	.word	0x200004a8
 8004600:	200004ac 	.word	0x200004ac
 8004604:	200004b0 	.word	0x200004b0
 8004608:	200004b4 	.word	0x200004b4
 800460c:	200004b8 	.word	0x200004b8
 8004610:	200004bc 	.word	0x200004bc
 8004614:	200004c0 	.word	0x200004c0
 8004618:	200004c4 	.word	0x200004c4
				  case 5:
					  yaw_rate_kp = *(float*)&telemetry_rx_buf[3];
 800461c:	4b7f      	ldr	r3, [pc, #508]	@ (800481c <main+0xe18>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a7f      	ldr	r2, [pc, #508]	@ (8004820 <main+0xe1c>)
 8004622:	6013      	str	r3, [r2, #0]
					  yaw_rate_ki = *(float*)&telemetry_rx_buf[7];
 8004624:	4b7f      	ldr	r3, [pc, #508]	@ (8004824 <main+0xe20>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a7f      	ldr	r2, [pc, #508]	@ (8004828 <main+0xe24>)
 800462a:	6013      	str	r3, [r2, #0]
					  yaw_rate_kd = *(float*)&telemetry_rx_buf[11];
 800462c:	4b7f      	ldr	r3, [pc, #508]	@ (800482c <main+0xe28>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a7f      	ldr	r2, [pc, #508]	@ (8004830 <main+0xe2c>)
 8004632:	6013      	str	r3, [r2, #0]
					  EP_PIDGain_Write(telemetry_rx_buf[2], yaw_rate_kp, yaw_rate_ki, yaw_rate_kd);
 8004634:	4b7f      	ldr	r3, [pc, #508]	@ (8004834 <main+0xe30>)
 8004636:	789b      	ldrb	r3, [r3, #2]
 8004638:	4a79      	ldr	r2, [pc, #484]	@ (8004820 <main+0xe1c>)
 800463a:	edd2 7a00 	vldr	s15, [r2]
 800463e:	4a7a      	ldr	r2, [pc, #488]	@ (8004828 <main+0xe24>)
 8004640:	ed92 7a00 	vldr	s14, [r2]
 8004644:	4a7a      	ldr	r2, [pc, #488]	@ (8004830 <main+0xe2c>)
 8004646:	edd2 6a00 	vldr	s13, [r2]
 800464a:	eeb0 1a66 	vmov.f32	s2, s13
 800464e:	eef0 0a47 	vmov.f32	s1, s14
 8004652:	eeb0 0a67 	vmov.f32	s0, s15
 8004656:	4618      	mov	r0, r3
 8004658:	f7fc fc9c 	bl	8000f94 <EP_PIDGain_Write>
					  EP_PIDGain_Read(telemetry_rx_buf[2], &yaw_rate_kp, &yaw_rate_ki, &yaw_rate_kd);
 800465c:	4b75      	ldr	r3, [pc, #468]	@ (8004834 <main+0xe30>)
 800465e:	7898      	ldrb	r0, [r3, #2]
 8004660:	4b73      	ldr	r3, [pc, #460]	@ (8004830 <main+0xe2c>)
 8004662:	4a71      	ldr	r2, [pc, #452]	@ (8004828 <main+0xe24>)
 8004664:	496e      	ldr	r1, [pc, #440]	@ (8004820 <main+0xe1c>)
 8004666:	f7fc fd2b 	bl	80010c0 <EP_PIDGain_Read>
					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], yaw_rate_kp, yaw_rate_ki, yaw_rate_kd);
 800466a:	4b72      	ldr	r3, [pc, #456]	@ (8004834 <main+0xe30>)
 800466c:	789b      	ldrb	r3, [r3, #2]
 800466e:	4a6c      	ldr	r2, [pc, #432]	@ (8004820 <main+0xe1c>)
 8004670:	edd2 7a00 	vldr	s15, [r2]
 8004674:	4a6c      	ldr	r2, [pc, #432]	@ (8004828 <main+0xe24>)
 8004676:	ed92 7a00 	vldr	s14, [r2]
 800467a:	4a6d      	ldr	r2, [pc, #436]	@ (8004830 <main+0xe2c>)
 800467c:	edd2 6a00 	vldr	s13, [r2]
 8004680:	eeb0 1a66 	vmov.f32	s2, s13
 8004684:	eef0 0a47 	vmov.f32	s1, s14
 8004688:	eeb0 0a67 	vmov.f32	s0, s15
 800468c:	4619      	mov	r1, r3
 800468e:	486a      	ldr	r0, [pc, #424]	@ (8004838 <main+0xe34>)
 8004690:	f001 f842 	bl	8005718 <Encode_Msg_PID_Gain>
					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8004694:	2214      	movs	r2, #20
 8004696:	4968      	ldr	r1, [pc, #416]	@ (8004838 <main+0xe34>)
 8004698:	4868      	ldr	r0, [pc, #416]	@ (800483c <main+0xe38>)
 800469a:	f005 fb50 	bl	8009d3e <HAL_UART_Transmit_IT>
					  break;
 800469e:	e185      	b.n	80049ac <main+0xfa8>
				  case 0x10:
					  switch(telemetry_rx_buf[3])
 80046a0:	4b64      	ldr	r3, [pc, #400]	@ (8004834 <main+0xe30>)
 80046a2:	78db      	ldrb	r3, [r3, #3]
 80046a4:	2b06      	cmp	r3, #6
 80046a6:	f200 8180 	bhi.w	80049aa <main+0xfa6>
 80046aa:	a201      	add	r2, pc, #4	@ (adr r2, 80046b0 <main+0xcac>)
 80046ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b0:	080046cd 	.word	0x080046cd
 80046b4:	08004705 	.word	0x08004705
 80046b8:	0800473d 	.word	0x0800473d
 80046bc:	08004775 	.word	0x08004775
 80046c0:	080047ad 	.word	0x080047ad
 80046c4:	080047e5 	.word	0x080047e5
 80046c8:	0800487d 	.word	0x0800487d
					  {
					  case 0:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], roll_in_kp, roll_in_ki, roll_in_kd);
 80046cc:	4b59      	ldr	r3, [pc, #356]	@ (8004834 <main+0xe30>)
 80046ce:	78db      	ldrb	r3, [r3, #3]
 80046d0:	4a5b      	ldr	r2, [pc, #364]	@ (8004840 <main+0xe3c>)
 80046d2:	edd2 7a00 	vldr	s15, [r2]
 80046d6:	4a5b      	ldr	r2, [pc, #364]	@ (8004844 <main+0xe40>)
 80046d8:	ed92 7a00 	vldr	s14, [r2]
 80046dc:	4a5a      	ldr	r2, [pc, #360]	@ (8004848 <main+0xe44>)
 80046de:	edd2 6a00 	vldr	s13, [r2]
 80046e2:	eeb0 1a66 	vmov.f32	s2, s13
 80046e6:	eef0 0a47 	vmov.f32	s1, s14
 80046ea:	eeb0 0a67 	vmov.f32	s0, s15
 80046ee:	4619      	mov	r1, r3
 80046f0:	4851      	ldr	r0, [pc, #324]	@ (8004838 <main+0xe34>)
 80046f2:	f001 f811 	bl	8005718 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80046f6:	230a      	movs	r3, #10
 80046f8:	2214      	movs	r2, #20
 80046fa:	494f      	ldr	r1, [pc, #316]	@ (8004838 <main+0xe34>)
 80046fc:	484f      	ldr	r0, [pc, #316]	@ (800483c <main+0xe38>)
 80046fe:	f005 fa93 	bl	8009c28 <HAL_UART_Transmit>
						  break;
 8004702:	e152      	b.n	80049aa <main+0xfa6>
					  case 1:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], roll_out_kp, roll_out_ki, roll_out_kd);
 8004704:	4b4b      	ldr	r3, [pc, #300]	@ (8004834 <main+0xe30>)
 8004706:	78db      	ldrb	r3, [r3, #3]
 8004708:	4a50      	ldr	r2, [pc, #320]	@ (800484c <main+0xe48>)
 800470a:	edd2 7a00 	vldr	s15, [r2]
 800470e:	4a50      	ldr	r2, [pc, #320]	@ (8004850 <main+0xe4c>)
 8004710:	ed92 7a00 	vldr	s14, [r2]
 8004714:	4a4f      	ldr	r2, [pc, #316]	@ (8004854 <main+0xe50>)
 8004716:	edd2 6a00 	vldr	s13, [r2]
 800471a:	eeb0 1a66 	vmov.f32	s2, s13
 800471e:	eef0 0a47 	vmov.f32	s1, s14
 8004722:	eeb0 0a67 	vmov.f32	s0, s15
 8004726:	4619      	mov	r1, r3
 8004728:	4843      	ldr	r0, [pc, #268]	@ (8004838 <main+0xe34>)
 800472a:	f000 fff5 	bl	8005718 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800472e:	230a      	movs	r3, #10
 8004730:	2214      	movs	r2, #20
 8004732:	4941      	ldr	r1, [pc, #260]	@ (8004838 <main+0xe34>)
 8004734:	4841      	ldr	r0, [pc, #260]	@ (800483c <main+0xe38>)
 8004736:	f005 fa77 	bl	8009c28 <HAL_UART_Transmit>
						  break;
 800473a:	e136      	b.n	80049aa <main+0xfa6>
					  case 2:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], pitch_in_kp, pitch_in_ki, pitch_in_kd);
 800473c:	4b3d      	ldr	r3, [pc, #244]	@ (8004834 <main+0xe30>)
 800473e:	78db      	ldrb	r3, [r3, #3]
 8004740:	4a45      	ldr	r2, [pc, #276]	@ (8004858 <main+0xe54>)
 8004742:	edd2 7a00 	vldr	s15, [r2]
 8004746:	4a45      	ldr	r2, [pc, #276]	@ (800485c <main+0xe58>)
 8004748:	ed92 7a00 	vldr	s14, [r2]
 800474c:	4a44      	ldr	r2, [pc, #272]	@ (8004860 <main+0xe5c>)
 800474e:	edd2 6a00 	vldr	s13, [r2]
 8004752:	eeb0 1a66 	vmov.f32	s2, s13
 8004756:	eef0 0a47 	vmov.f32	s1, s14
 800475a:	eeb0 0a67 	vmov.f32	s0, s15
 800475e:	4619      	mov	r1, r3
 8004760:	4835      	ldr	r0, [pc, #212]	@ (8004838 <main+0xe34>)
 8004762:	f000 ffd9 	bl	8005718 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004766:	230a      	movs	r3, #10
 8004768:	2214      	movs	r2, #20
 800476a:	4933      	ldr	r1, [pc, #204]	@ (8004838 <main+0xe34>)
 800476c:	4833      	ldr	r0, [pc, #204]	@ (800483c <main+0xe38>)
 800476e:	f005 fa5b 	bl	8009c28 <HAL_UART_Transmit>
						  break;
 8004772:	e11a      	b.n	80049aa <main+0xfa6>
					  case 3:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], pitch_out_kp, pitch_out_ki, pitch_out_kd);
 8004774:	4b2f      	ldr	r3, [pc, #188]	@ (8004834 <main+0xe30>)
 8004776:	78db      	ldrb	r3, [r3, #3]
 8004778:	4a3a      	ldr	r2, [pc, #232]	@ (8004864 <main+0xe60>)
 800477a:	edd2 7a00 	vldr	s15, [r2]
 800477e:	4a3a      	ldr	r2, [pc, #232]	@ (8004868 <main+0xe64>)
 8004780:	ed92 7a00 	vldr	s14, [r2]
 8004784:	4a39      	ldr	r2, [pc, #228]	@ (800486c <main+0xe68>)
 8004786:	edd2 6a00 	vldr	s13, [r2]
 800478a:	eeb0 1a66 	vmov.f32	s2, s13
 800478e:	eef0 0a47 	vmov.f32	s1, s14
 8004792:	eeb0 0a67 	vmov.f32	s0, s15
 8004796:	4619      	mov	r1, r3
 8004798:	4827      	ldr	r0, [pc, #156]	@ (8004838 <main+0xe34>)
 800479a:	f000 ffbd 	bl	8005718 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800479e:	230a      	movs	r3, #10
 80047a0:	2214      	movs	r2, #20
 80047a2:	4925      	ldr	r1, [pc, #148]	@ (8004838 <main+0xe34>)
 80047a4:	4825      	ldr	r0, [pc, #148]	@ (800483c <main+0xe38>)
 80047a6:	f005 fa3f 	bl	8009c28 <HAL_UART_Transmit>
						  break;
 80047aa:	e0fe      	b.n	80049aa <main+0xfa6>
					  case 4:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], yaw_heading_kp, yaw_heading_ki, yaw_heading_kd);
 80047ac:	4b21      	ldr	r3, [pc, #132]	@ (8004834 <main+0xe30>)
 80047ae:	78db      	ldrb	r3, [r3, #3]
 80047b0:	4a2f      	ldr	r2, [pc, #188]	@ (8004870 <main+0xe6c>)
 80047b2:	edd2 7a00 	vldr	s15, [r2]
 80047b6:	4a2f      	ldr	r2, [pc, #188]	@ (8004874 <main+0xe70>)
 80047b8:	ed92 7a00 	vldr	s14, [r2]
 80047bc:	4a2e      	ldr	r2, [pc, #184]	@ (8004878 <main+0xe74>)
 80047be:	edd2 6a00 	vldr	s13, [r2]
 80047c2:	eeb0 1a66 	vmov.f32	s2, s13
 80047c6:	eef0 0a47 	vmov.f32	s1, s14
 80047ca:	eeb0 0a67 	vmov.f32	s0, s15
 80047ce:	4619      	mov	r1, r3
 80047d0:	4819      	ldr	r0, [pc, #100]	@ (8004838 <main+0xe34>)
 80047d2:	f000 ffa1 	bl	8005718 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80047d6:	230a      	movs	r3, #10
 80047d8:	2214      	movs	r2, #20
 80047da:	4917      	ldr	r1, [pc, #92]	@ (8004838 <main+0xe34>)
 80047dc:	4817      	ldr	r0, [pc, #92]	@ (800483c <main+0xe38>)
 80047de:	f005 fa23 	bl	8009c28 <HAL_UART_Transmit>
						  break;
 80047e2:	e0e2      	b.n	80049aa <main+0xfa6>
					  case 5:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], yaw_rate_kp, yaw_rate_ki, yaw_rate_kd);
 80047e4:	4b13      	ldr	r3, [pc, #76]	@ (8004834 <main+0xe30>)
 80047e6:	78db      	ldrb	r3, [r3, #3]
 80047e8:	4a0d      	ldr	r2, [pc, #52]	@ (8004820 <main+0xe1c>)
 80047ea:	edd2 7a00 	vldr	s15, [r2]
 80047ee:	4a0e      	ldr	r2, [pc, #56]	@ (8004828 <main+0xe24>)
 80047f0:	ed92 7a00 	vldr	s14, [r2]
 80047f4:	4a0e      	ldr	r2, [pc, #56]	@ (8004830 <main+0xe2c>)
 80047f6:	edd2 6a00 	vldr	s13, [r2]
 80047fa:	eeb0 1a66 	vmov.f32	s2, s13
 80047fe:	eef0 0a47 	vmov.f32	s1, s14
 8004802:	eeb0 0a67 	vmov.f32	s0, s15
 8004806:	4619      	mov	r1, r3
 8004808:	480b      	ldr	r0, [pc, #44]	@ (8004838 <main+0xe34>)
 800480a:	f000 ff85 	bl	8005718 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800480e:	230a      	movs	r3, #10
 8004810:	2214      	movs	r2, #20
 8004812:	4909      	ldr	r1, [pc, #36]	@ (8004838 <main+0xe34>)
 8004814:	4809      	ldr	r0, [pc, #36]	@ (800483c <main+0xe38>)
 8004816:	f005 fa07 	bl	8009c28 <HAL_UART_Transmit>
						  break;
 800481a:	e0c6      	b.n	80049aa <main+0xfa6>
 800481c:	20000473 	.word	0x20000473
 8004820:	200004c8 	.word	0x200004c8
 8004824:	20000477 	.word	0x20000477
 8004828:	200004cc 	.word	0x200004cc
 800482c:	2000047b 	.word	0x2000047b
 8004830:	200004d0 	.word	0x200004d0
 8004834:	20000470 	.word	0x20000470
 8004838:	20000448 	.word	0x20000448
 800483c:	20000538 	.word	0x20000538
 8004840:	2000048c 	.word	0x2000048c
 8004844:	20000490 	.word	0x20000490
 8004848:	20000494 	.word	0x20000494
 800484c:	20000498 	.word	0x20000498
 8004850:	2000049c 	.word	0x2000049c
 8004854:	200004a0 	.word	0x200004a0
 8004858:	200004a4 	.word	0x200004a4
 800485c:	200004a8 	.word	0x200004a8
 8004860:	200004ac 	.word	0x200004ac
 8004864:	200004b0 	.word	0x200004b0
 8004868:	200004b4 	.word	0x200004b4
 800486c:	200004b8 	.word	0x200004b8
 8004870:	200004bc 	.word	0x200004bc
 8004874:	200004c0 	.word	0x200004c0
 8004878:	200004c4 	.word	0x200004c4
					  case 6:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 0, roll_in_kp, roll_in_ki, roll_in_kd);
 800487c:	4b6f      	ldr	r3, [pc, #444]	@ (8004a3c <main+0x1038>)
 800487e:	edd3 7a00 	vldr	s15, [r3]
 8004882:	4b6f      	ldr	r3, [pc, #444]	@ (8004a40 <main+0x103c>)
 8004884:	ed93 7a00 	vldr	s14, [r3]
 8004888:	4b6e      	ldr	r3, [pc, #440]	@ (8004a44 <main+0x1040>)
 800488a:	edd3 6a00 	vldr	s13, [r3]
 800488e:	eeb0 1a66 	vmov.f32	s2, s13
 8004892:	eef0 0a47 	vmov.f32	s1, s14
 8004896:	eeb0 0a67 	vmov.f32	s0, s15
 800489a:	2100      	movs	r1, #0
 800489c:	486a      	ldr	r0, [pc, #424]	@ (8004a48 <main+0x1044>)
 800489e:	f000 ff3b 	bl	8005718 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80048a2:	230a      	movs	r3, #10
 80048a4:	2214      	movs	r2, #20
 80048a6:	4968      	ldr	r1, [pc, #416]	@ (8004a48 <main+0x1044>)
 80048a8:	4868      	ldr	r0, [pc, #416]	@ (8004a4c <main+0x1048>)
 80048aa:	f005 f9bd 	bl	8009c28 <HAL_UART_Transmit>
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 1, roll_out_kp, roll_out_ki, roll_out_kd);
 80048ae:	4b68      	ldr	r3, [pc, #416]	@ (8004a50 <main+0x104c>)
 80048b0:	edd3 7a00 	vldr	s15, [r3]
 80048b4:	4b67      	ldr	r3, [pc, #412]	@ (8004a54 <main+0x1050>)
 80048b6:	ed93 7a00 	vldr	s14, [r3]
 80048ba:	4b67      	ldr	r3, [pc, #412]	@ (8004a58 <main+0x1054>)
 80048bc:	edd3 6a00 	vldr	s13, [r3]
 80048c0:	eeb0 1a66 	vmov.f32	s2, s13
 80048c4:	eef0 0a47 	vmov.f32	s1, s14
 80048c8:	eeb0 0a67 	vmov.f32	s0, s15
 80048cc:	2101      	movs	r1, #1
 80048ce:	485e      	ldr	r0, [pc, #376]	@ (8004a48 <main+0x1044>)
 80048d0:	f000 ff22 	bl	8005718 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80048d4:	230a      	movs	r3, #10
 80048d6:	2214      	movs	r2, #20
 80048d8:	495b      	ldr	r1, [pc, #364]	@ (8004a48 <main+0x1044>)
 80048da:	485c      	ldr	r0, [pc, #368]	@ (8004a4c <main+0x1048>)
 80048dc:	f005 f9a4 	bl	8009c28 <HAL_UART_Transmit>
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 2, pitch_in_kp, pitch_in_ki, pitch_in_kd);
 80048e0:	4b5e      	ldr	r3, [pc, #376]	@ (8004a5c <main+0x1058>)
 80048e2:	edd3 7a00 	vldr	s15, [r3]
 80048e6:	4b5e      	ldr	r3, [pc, #376]	@ (8004a60 <main+0x105c>)
 80048e8:	ed93 7a00 	vldr	s14, [r3]
 80048ec:	4b5d      	ldr	r3, [pc, #372]	@ (8004a64 <main+0x1060>)
 80048ee:	edd3 6a00 	vldr	s13, [r3]
 80048f2:	eeb0 1a66 	vmov.f32	s2, s13
 80048f6:	eef0 0a47 	vmov.f32	s1, s14
 80048fa:	eeb0 0a67 	vmov.f32	s0, s15
 80048fe:	2102      	movs	r1, #2
 8004900:	4851      	ldr	r0, [pc, #324]	@ (8004a48 <main+0x1044>)
 8004902:	f000 ff09 	bl	8005718 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004906:	230a      	movs	r3, #10
 8004908:	2214      	movs	r2, #20
 800490a:	494f      	ldr	r1, [pc, #316]	@ (8004a48 <main+0x1044>)
 800490c:	484f      	ldr	r0, [pc, #316]	@ (8004a4c <main+0x1048>)
 800490e:	f005 f98b 	bl	8009c28 <HAL_UART_Transmit>
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 3, pitch_out_kp, pitch_out_ki, pitch_out_kd);
 8004912:	4b55      	ldr	r3, [pc, #340]	@ (8004a68 <main+0x1064>)
 8004914:	edd3 7a00 	vldr	s15, [r3]
 8004918:	4b54      	ldr	r3, [pc, #336]	@ (8004a6c <main+0x1068>)
 800491a:	ed93 7a00 	vldr	s14, [r3]
 800491e:	4b54      	ldr	r3, [pc, #336]	@ (8004a70 <main+0x106c>)
 8004920:	edd3 6a00 	vldr	s13, [r3]
 8004924:	eeb0 1a66 	vmov.f32	s2, s13
 8004928:	eef0 0a47 	vmov.f32	s1, s14
 800492c:	eeb0 0a67 	vmov.f32	s0, s15
 8004930:	2103      	movs	r1, #3
 8004932:	4845      	ldr	r0, [pc, #276]	@ (8004a48 <main+0x1044>)
 8004934:	f000 fef0 	bl	8005718 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004938:	230a      	movs	r3, #10
 800493a:	2214      	movs	r2, #20
 800493c:	4942      	ldr	r1, [pc, #264]	@ (8004a48 <main+0x1044>)
 800493e:	4843      	ldr	r0, [pc, #268]	@ (8004a4c <main+0x1048>)
 8004940:	f005 f972 	bl	8009c28 <HAL_UART_Transmit>
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 4, yaw_heading_kp, yaw_heading_ki, yaw_heading_kd);
 8004944:	4b4b      	ldr	r3, [pc, #300]	@ (8004a74 <main+0x1070>)
 8004946:	edd3 7a00 	vldr	s15, [r3]
 800494a:	4b4b      	ldr	r3, [pc, #300]	@ (8004a78 <main+0x1074>)
 800494c:	ed93 7a00 	vldr	s14, [r3]
 8004950:	4b4a      	ldr	r3, [pc, #296]	@ (8004a7c <main+0x1078>)
 8004952:	edd3 6a00 	vldr	s13, [r3]
 8004956:	eeb0 1a66 	vmov.f32	s2, s13
 800495a:	eef0 0a47 	vmov.f32	s1, s14
 800495e:	eeb0 0a67 	vmov.f32	s0, s15
 8004962:	2104      	movs	r1, #4
 8004964:	4838      	ldr	r0, [pc, #224]	@ (8004a48 <main+0x1044>)
 8004966:	f000 fed7 	bl	8005718 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800496a:	230a      	movs	r3, #10
 800496c:	2214      	movs	r2, #20
 800496e:	4936      	ldr	r1, [pc, #216]	@ (8004a48 <main+0x1044>)
 8004970:	4836      	ldr	r0, [pc, #216]	@ (8004a4c <main+0x1048>)
 8004972:	f005 f959 	bl	8009c28 <HAL_UART_Transmit>
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 5, yaw_rate_kp, yaw_rate_ki, yaw_rate_kd);
 8004976:	4b42      	ldr	r3, [pc, #264]	@ (8004a80 <main+0x107c>)
 8004978:	edd3 7a00 	vldr	s15, [r3]
 800497c:	4b41      	ldr	r3, [pc, #260]	@ (8004a84 <main+0x1080>)
 800497e:	ed93 7a00 	vldr	s14, [r3]
 8004982:	4b41      	ldr	r3, [pc, #260]	@ (8004a88 <main+0x1084>)
 8004984:	edd3 6a00 	vldr	s13, [r3]
 8004988:	eeb0 1a66 	vmov.f32	s2, s13
 800498c:	eef0 0a47 	vmov.f32	s1, s14
 8004990:	eeb0 0a67 	vmov.f32	s0, s15
 8004994:	2105      	movs	r1, #5
 8004996:	482c      	ldr	r0, [pc, #176]	@ (8004a48 <main+0x1044>)
 8004998:	f000 febe 	bl	8005718 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800499c:	230a      	movs	r3, #10
 800499e:	2214      	movs	r2, #20
 80049a0:	4929      	ldr	r1, [pc, #164]	@ (8004a48 <main+0x1044>)
 80049a2:	482a      	ldr	r0, [pc, #168]	@ (8004a4c <main+0x1048>)
 80049a4:	f005 f940 	bl	8009c28 <HAL_UART_Transmit>
						  break;
 80049a8:	bf00      	nop
					  }
					  break;
 80049aa:	bf00      	nop
				  }
			  }
		  }
	  }

	  if(tim7_20ms_flag == 1 && tim7_100ms_flag != 1)
 80049ac:	4b37      	ldr	r3, [pc, #220]	@ (8004a8c <main+0x1088>)
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d10f      	bne.n	80049d4 <main+0xfd0>
 80049b4:	4b36      	ldr	r3, [pc, #216]	@ (8004a90 <main+0x108c>)
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d00b      	beq.n	80049d4 <main+0xfd0>
	  {
		  tim7_20ms_flag = 0;
 80049bc:	4b33      	ldr	r3, [pc, #204]	@ (8004a8c <main+0x1088>)
 80049be:	2200      	movs	r2, #0
 80049c0:	701a      	strb	r2, [r3, #0]

		  Encode_Msg_AHRS(&telemetry_tx_buf[0]);
 80049c2:	4821      	ldr	r0, [pc, #132]	@ (8004a48 <main+0x1044>)
 80049c4:	f000 fc6c 	bl	80052a0 <Encode_Msg_AHRS>

		  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 80049c8:	2214      	movs	r2, #20
 80049ca:	491f      	ldr	r1, [pc, #124]	@ (8004a48 <main+0x1044>)
 80049cc:	481f      	ldr	r0, [pc, #124]	@ (8004a4c <main+0x1048>)
 80049ce:	f005 f9b6 	bl	8009d3e <HAL_UART_Transmit_IT>
 80049d2:	e018      	b.n	8004a06 <main+0x1002>
	  }

	  else if(tim7_20ms_flag == 1 && tim7_100ms_flag == 1)
 80049d4:	4b2d      	ldr	r3, [pc, #180]	@ (8004a8c <main+0x1088>)
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d114      	bne.n	8004a06 <main+0x1002>
 80049dc:	4b2c      	ldr	r3, [pc, #176]	@ (8004a90 <main+0x108c>)
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d110      	bne.n	8004a06 <main+0x1002>
	  {
		  tim7_20ms_flag = 0;
 80049e4:	4b29      	ldr	r3, [pc, #164]	@ (8004a8c <main+0x1088>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	701a      	strb	r2, [r3, #0]
		  tim7_100ms_flag = 0;
 80049ea:	4b29      	ldr	r3, [pc, #164]	@ (8004a90 <main+0x108c>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	701a      	strb	r2, [r3, #0]

		  Encode_Msg_AHRS(&telemetry_tx_buf[0]);
 80049f0:	4815      	ldr	r0, [pc, #84]	@ (8004a48 <main+0x1044>)
 80049f2:	f000 fc55 	bl	80052a0 <Encode_Msg_AHRS>
		  Encode_Msg_GPS(&telemetry_tx_buf[20]);
 80049f6:	4827      	ldr	r0, [pc, #156]	@ (8004a94 <main+0x1090>)
 80049f8:	f000 fdce 	bl	8005598 <Encode_Msg_GPS>

		  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 40);
 80049fc:	2228      	movs	r2, #40	@ 0x28
 80049fe:	4912      	ldr	r1, [pc, #72]	@ (8004a48 <main+0x1044>)
 8004a00:	4812      	ldr	r0, [pc, #72]	@ (8004a4c <main+0x1048>)
 8004a02:	f005 f99c 	bl	8009d3e <HAL_UART_Transmit_IT>
	  }

	  // bat check
	  batVolt = adcVal * 0.003619f;
 8004a06:	88fb      	ldrh	r3, [r7, #6]
 8004a08:	ee07 3a90 	vmov	s15, r3
 8004a0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a10:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8004a98 <main+0x1094>
 8004a14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a18:	4b20      	ldr	r3, [pc, #128]	@ (8004a9c <main+0x1098>)
 8004a1a:	edc3 7a00 	vstr	s15, [r3]
	  //printf("%d\t%.2f\n", adcVal, batVolt);
	  if(batVolt < 10.0f)
 8004a1e:	4b1f      	ldr	r3, [pc, #124]	@ (8004a9c <main+0x1098>)
 8004a20:	edd3 7a00 	vldr	s15, [r3]
 8004a24:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004a28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a30:	d538      	bpl.n	8004aa4 <main+0x10a0>
	  {
		  low_bat_flag = 1;
 8004a32:	4b1b      	ldr	r3, [pc, #108]	@ (8004aa0 <main+0x109c>)
 8004a34:	2201      	movs	r2, #1
 8004a36:	701a      	strb	r2, [r3, #0]
 8004a38:	e037      	b.n	8004aaa <main+0x10a6>
 8004a3a:	bf00      	nop
 8004a3c:	2000048c 	.word	0x2000048c
 8004a40:	20000490 	.word	0x20000490
 8004a44:	20000494 	.word	0x20000494
 8004a48:	20000448 	.word	0x20000448
 8004a4c:	20000538 	.word	0x20000538
 8004a50:	20000498 	.word	0x20000498
 8004a54:	2000049c 	.word	0x2000049c
 8004a58:	200004a0 	.word	0x200004a0
 8004a5c:	200004a4 	.word	0x200004a4
 8004a60:	200004a8 	.word	0x200004a8
 8004a64:	200004ac 	.word	0x200004ac
 8004a68:	200004b0 	.word	0x200004b0
 8004a6c:	200004b4 	.word	0x200004b4
 8004a70:	200004b8 	.word	0x200004b8
 8004a74:	200004bc 	.word	0x200004bc
 8004a78:	200004c0 	.word	0x200004c0
 8004a7c:	200004c4 	.word	0x200004c4
 8004a80:	200004c8 	.word	0x200004c8
 8004a84:	200004cc 	.word	0x200004cc
 8004a88:	200004d0 	.word	0x200004d0
 8004a8c:	2000052a 	.word	0x2000052a
 8004a90:	2000052b 	.word	0x2000052b
 8004a94:	2000045c 	.word	0x2000045c
 8004a98:	3b6d2cbf 	.word	0x3b6d2cbf
 8004a9c:	20000488 	.word	0x20000488
 8004aa0:	200004d5 	.word	0x200004d5
	  }
	  else
	  {
		  low_bat_flag = 0;
 8004aa4:	4b8c      	ldr	r3, [pc, #560]	@ (8004cd8 <main+0x12d4>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	701a      	strb	r2, [r3, #0]
	  }

	  //BNO080
	  if(BNO080_dataAvailable() == 1)
 8004aaa:	f7fc fdc1 	bl	8001630 <BNO080_dataAvailable>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d124      	bne.n	8004afe <main+0x10fa>
	  {
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	4889      	ldr	r0, [pc, #548]	@ (8004cdc <main+0x12d8>)
 8004ab8:	f7fe ff65 	bl	8003986 <LL_GPIO_TogglePin>

		  q[0] = BNO080_getQuatI();
 8004abc:	f7fc ff72 	bl	80019a4 <BNO080_getQuatI>
 8004ac0:	eef0 7a40 	vmov.f32	s15, s0
 8004ac4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		  q[1] = BNO080_getQuatJ();
 8004ac8:	f7fc ff82 	bl	80019d0 <BNO080_getQuatJ>
 8004acc:	eef0 7a40 	vmov.f32	s15, s0
 8004ad0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		  q[2] = BNO080_getQuatK();
 8004ad4:	f7fc ff92 	bl	80019fc <BNO080_getQuatK>
 8004ad8:	eef0 7a40 	vmov.f32	s15, s0
 8004adc:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		  q[3] = BNO080_getQuatReal();
 8004ae0:	f7fc ffa2 	bl	8001a28 <BNO080_getQuatReal>
 8004ae4:	eef0 7a40 	vmov.f32	s15, s0
 8004ae8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		  quatRadianAccuracy = BNO080_getQuatRadianAccuracy();
 8004aec:	f7fc ffb2 	bl	8001a54 <BNO080_getQuatRadianAccuracy>
 8004af0:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38

		  Quaternion_Update(&q[0]);
 8004af4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7fe fb0d 	bl	8003118 <Quaternion_Update>
		  //printf("%.2f\t%.2f\n", BNO080_Roll, BNO080_Pitch);
		  //printf("%.2f\n", BNO080_Yaw);
	  }

	  //ICM20602
	  if(ICM20602_DataReady() == 1)
 8004afe:	f7fd fd9b 	bl	8002638 <ICM20602_DataReady>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d13c      	bne.n	8004b82 <main+0x117e>
	  {
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 8004b08:	2102      	movs	r1, #2
 8004b0a:	4874      	ldr	r0, [pc, #464]	@ (8004cdc <main+0x12d8>)
 8004b0c:	f7fe ff3b 	bl	8003986 <LL_GPIO_TogglePin>

		  ICM20602_Get3AxisGyroRawData(&ICM20602.gyro_x_raw);
 8004b10:	4873      	ldr	r0, [pc, #460]	@ (8004ce0 <main+0x12dc>)
 8004b12:	f7fd fd65 	bl	80025e0 <ICM20602_Get3AxisGyroRawData>

		  ICM20602.gyro_x = ICM20602.gyro_x_raw * 2000.f / 32768.f;
 8004b16:	4b73      	ldr	r3, [pc, #460]	@ (8004ce4 <main+0x12e0>)
 8004b18:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004b1c:	ee07 3a90 	vmov	s15, r3
 8004b20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b24:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8004ce8 <main+0x12e4>
 8004b28:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004b2c:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004cec <main+0x12e8>
 8004b30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b34:	4b6b      	ldr	r3, [pc, #428]	@ (8004ce4 <main+0x12e0>)
 8004b36:	edc3 7a07 	vstr	s15, [r3, #28]
		  ICM20602.gyro_y = ICM20602.gyro_y_raw * 2000.f / 32768.f;
 8004b3a:	4b6a      	ldr	r3, [pc, #424]	@ (8004ce4 <main+0x12e0>)
 8004b3c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004b40:	ee07 3a90 	vmov	s15, r3
 8004b44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b48:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8004ce8 <main+0x12e4>
 8004b4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004b50:	eddf 6a66 	vldr	s13, [pc, #408]	@ 8004cec <main+0x12e8>
 8004b54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b58:	4b62      	ldr	r3, [pc, #392]	@ (8004ce4 <main+0x12e0>)
 8004b5a:	edc3 7a08 	vstr	s15, [r3, #32]
		  ICM20602.gyro_z = ICM20602.gyro_z_raw * 2000.f / 32768.f;
 8004b5e:	4b61      	ldr	r3, [pc, #388]	@ (8004ce4 <main+0x12e0>)
 8004b60:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004b64:	ee07 3a90 	vmov	s15, r3
 8004b68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b6c:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8004ce8 <main+0x12e4>
 8004b70:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004b74:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8004cec <main+0x12e8>
 8004b78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b7c:	4b59      	ldr	r3, [pc, #356]	@ (8004ce4 <main+0x12e0>)
 8004b7e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		  //printf("%d,%d,%d\n", ICM20602.gyro_x_raw, ICM20602.gyro_y_raw, ICM20602.gyro_z_raw);
		  //printf("%d,%d,%d\n", (int)(ICM20602.gyro_x*100), (int)(ICM20602.gyro_y*100), (int)(ICM20602.gyro_z*100));
	  }

	  // LPS22HH
	  if(LPS22HH_DataReady() == 1)
 8004b82:	f7fd ffcb 	bl	8002b1c <LPS22HH_DataReady>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d138      	bne.n	8004bfe <main+0x11fa>
	  {
		  LPS22HH_GetPressure(&LPS22HH.pressure_raw);
 8004b8c:	4858      	ldr	r0, [pc, #352]	@ (8004cf0 <main+0x12ec>)
 8004b8e:	f7fd ffd1 	bl	8002b34 <LPS22HH_GetPressure>
		  LPS22HH_GetTemperature(&LPS22HH.temperature_raw);
 8004b92:	4858      	ldr	r0, [pc, #352]	@ (8004cf4 <main+0x12f0>)
 8004b94:	f7fd ffdb 	bl	8002b4e <LPS22HH_GetTemperature>

		  LPS22HH.baroAlt = getAltitude2(LPS22HH.pressure_raw/4096.f, LPS22HH.temperature_raw/100.f);
 8004b98:	4b55      	ldr	r3, [pc, #340]	@ (8004cf0 <main+0x12ec>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	ee07 3a90 	vmov	s15, r3
 8004ba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ba4:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8004cf8 <main+0x12f4>
 8004ba8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004bac:	4b50      	ldr	r3, [pc, #320]	@ (8004cf0 <main+0x12ec>)
 8004bae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004bb2:	ee07 3a90 	vmov	s15, r3
 8004bb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bba:	ed9f 6a50 	vldr	s12, [pc, #320]	@ 8004cfc <main+0x12f8>
 8004bbe:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8004bc2:	eef0 0a66 	vmov.f32	s1, s13
 8004bc6:	eeb0 0a47 	vmov.f32	s0, s14
 8004bca:	f7fd ffcd 	bl	8002b68 <getAltitude2>
 8004bce:	eef0 7a40 	vmov.f32	s15, s0
 8004bd2:	4b47      	ldr	r3, [pc, #284]	@ (8004cf0 <main+0x12ec>)
 8004bd4:	edc3 7a02 	vstr	s15, [r3, #8]
		  LPS22HH.baroAltFilt = LPS22HH.baroAltFilt * X + LPS22HH.baroAlt * (1.0f - X);
 8004bd8:	4b45      	ldr	r3, [pc, #276]	@ (8004cf0 <main+0x12ec>)
 8004bda:	edd3 7a03 	vldr	s15, [r3, #12]
 8004bde:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8004d00 <main+0x12fc>
 8004be2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004be6:	4b42      	ldr	r3, [pc, #264]	@ (8004cf0 <main+0x12ec>)
 8004be8:	edd3 7a02 	vldr	s15, [r3, #8]
 8004bec:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8004d04 <main+0x1300>
 8004bf0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004bf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bf8:	4b3d      	ldr	r3, [pc, #244]	@ (8004cf0 <main+0x12ec>)
 8004bfa:	edc3 7a03 	vstr	s15, [r3, #12]
		  //	  		  printf("%f ",LPS22HH.baroAlt * 100);
		  //	  		  printf("%f\n",LPS22HH.baroAltFilt * 100);
	  }
	  //gps
	  if(m8n_rx_cplt_flag == 1)
 8004bfe:	4b42      	ldr	r3, [pc, #264]	@ (8004d08 <main+0x1304>)
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d111      	bne.n	8004c2a <main+0x1226>
	  {
		  m8n_rx_cplt_flag = 0;
 8004c06:	4b40      	ldr	r3, [pc, #256]	@ (8004d08 <main+0x1304>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	701a      	strb	r2, [r3, #0]

		  if(M8N_UBX_CHKSUM_Check(&m8n_rx_buf[0], 36) == 1)
 8004c0c:	2124      	movs	r1, #36	@ 0x24
 8004c0e:	483f      	ldr	r0, [pc, #252]	@ (8004d0c <main+0x1308>)
 8004c10:	f7fe f990 	bl	8002f34 <M8N_UBX_CHKSUM_Check>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d107      	bne.n	8004c2a <main+0x1226>
		  {
			  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 8004c1a:	2104      	movs	r1, #4
 8004c1c:	482f      	ldr	r0, [pc, #188]	@ (8004cdc <main+0x12d8>)
 8004c1e:	f7fe feb2 	bl	8003986 <LL_GPIO_TogglePin>
			  M8N_UBX_NAV_POSLLH_Parsing(&m8n_rx_buf[0], &posllh);
 8004c22:	493b      	ldr	r1, [pc, #236]	@ (8004d10 <main+0x130c>)
 8004c24:	4839      	ldr	r0, [pc, #228]	@ (8004d0c <main+0x1308>)
 8004c26:	f7fe f9bf 	bl	8002fa8 <M8N_UBX_NAV_POSLLH_Parsing>

			  //printf("LAT: %ld\tLON: %ld\tHeight: %ld\n", posllh.lat, posllh.lon, posllh.height);
		  }
	  }

	  if(ibus_rx_cplt_flag == 1)
 8004c2a:	4b3a      	ldr	r3, [pc, #232]	@ (8004d14 <main+0x1310>)
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d123      	bne.n	8004c7a <main+0x1276>
	  {
		  ibus_rx_cplt_flag = 0;
 8004c32:	4b38      	ldr	r3, [pc, #224]	@ (8004d14 <main+0x1310>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	701a      	strb	r2, [r3, #0]
		  if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1)
 8004c38:	2120      	movs	r1, #32
 8004c3a:	4837      	ldr	r0, [pc, #220]	@ (8004d18 <main+0x1314>)
 8004c3c:	f7fd f9ba 	bl	8001fb4 <iBus_Check_CHKSUM>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d119      	bne.n	8004c7a <main+0x1276>
		  {
			  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 8004c46:	2104      	movs	r1, #4
 8004c48:	4824      	ldr	r0, [pc, #144]	@ (8004cdc <main+0x12d8>)
 8004c4a:	f7fe fe9c 	bl	8003986 <LL_GPIO_TogglePin>

			  iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8004c4e:	4933      	ldr	r1, [pc, #204]	@ (8004d1c <main+0x1318>)
 8004c50:	4831      	ldr	r0, [pc, #196]	@ (8004d18 <main+0x1314>)
 8004c52:	f7fd f9e4 	bl	800201e <iBus_Parsing>
			  iBus_rx_cnt++;
 8004c56:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

			  if(iBus_isActiveFailsafe(&iBus) == 1)
 8004c60:	482e      	ldr	r0, [pc, #184]	@ (8004d1c <main+0x1318>)
 8004c62:	f7fd fa54 	bl	800210e <iBus_isActiveFailsafe>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d103      	bne.n	8004c74 <main+0x1270>
			  {
				  failsafe_flag = 1;
 8004c6c:	4b2c      	ldr	r3, [pc, #176]	@ (8004d20 <main+0x131c>)
 8004c6e:	2201      	movs	r2, #1
 8004c70:	701a      	strb	r2, [r3, #0]
 8004c72:	e002      	b.n	8004c7a <main+0x1276>
			  }
			  else
			  {
				  failsafe_flag = 0;
 8004c74:	4b2a      	ldr	r3, [pc, #168]	@ (8004d20 <main+0x131c>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	701a      	strb	r2, [r3, #0]
			  //printf("%d\t%d\t%d\t%d\t%d\t%d\n",
			  //iBus.RH, iBus.RV, iBus.LV, iBus.LH, iBus.SwA, iBus.SwC);
			  //HAL_Delay(100);
		  }
	  }
	  if(tim7_1000ms_flag == 1)
 8004c7a:	4b2a      	ldr	r3, [pc, #168]	@ (8004d24 <main+0x1320>)
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d10c      	bne.n	8004c9c <main+0x1298>
	  {
		  tim7_1000ms_flag = 0;
 8004c82:	4b28      	ldr	r3, [pc, #160]	@ (8004d24 <main+0x1320>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	701a      	strb	r2, [r3, #0]
		  if(iBus_rx_cnt == 0)
 8004c88:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d102      	bne.n	8004c96 <main+0x1292>
		  {
			  failsafe_flag = 2;
 8004c90:	4b23      	ldr	r3, [pc, #140]	@ (8004d20 <main+0x131c>)
 8004c92:	2202      	movs	r2, #2
 8004c94:	701a      	strb	r2, [r3, #0]
		  }
		  iBus_rx_cnt = 0;
 8004c96:	2300      	movs	r3, #0
 8004c98:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	  }

	  if(failsafe_flag == 1 || failsafe_flag == 2 || low_bat_flag == 1 || iBus.SwC == 2000)
 8004c9c:	4b20      	ldr	r3, [pc, #128]	@ (8004d20 <main+0x131c>)
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d00c      	beq.n	8004cbe <main+0x12ba>
 8004ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8004d20 <main+0x131c>)
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d008      	beq.n	8004cbe <main+0x12ba>
 8004cac:	4b0a      	ldr	r3, [pc, #40]	@ (8004cd8 <main+0x12d4>)
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d004      	beq.n	8004cbe <main+0x12ba>
 8004cb4:	4b19      	ldr	r3, [pc, #100]	@ (8004d1c <main+0x1318>)
 8004cb6:	899b      	ldrh	r3, [r3, #12]
 8004cb8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004cbc:	d105      	bne.n	8004cca <main+0x12c6>
	  {
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004cbe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004cc2:	4819      	ldr	r0, [pc, #100]	@ (8004d28 <main+0x1324>)
 8004cc4:	f7fe fdca 	bl	800385c <LL_TIM_CC_EnableChannel>
 8004cc8:	e004      	b.n	8004cd4 <main+0x12d0>
	  }
	  else
	  {
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004cca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004cce:	4816      	ldr	r0, [pc, #88]	@ (8004d28 <main+0x1324>)
 8004cd0:	f7fe fdd5 	bl	800387e <LL_TIM_CC_DisableChannel>
	  if(iBus.SwA == 2000 && iBus_SwA_Prev != 2000)
 8004cd4:	f7ff ba21 	b.w	800411a <main+0x716>
 8004cd8:	200004d5 	.word	0x200004d5
 8004cdc:	40020800 	.word	0x40020800
 8004ce0:	200002e0 	.word	0x200002e0
 8004ce4:	200002d8 	.word	0x200002d8
 8004ce8:	44fa0000 	.word	0x44fa0000
 8004cec:	47000000 	.word	0x47000000
 8004cf0:	20000300 	.word	0x20000300
 8004cf4:	20000304 	.word	0x20000304
 8004cf8:	45800000 	.word	0x45800000
 8004cfc:	42c80000 	.word	0x42c80000
 8004d00:	3f666666 	.word	0x3f666666
 8004d04:	3dccccd0 	.word	0x3dccccd0
 8004d08:	20000504 	.word	0x20000504
 8004d0c:	200004e0 	.word	0x200004e0
 8004d10:	20000310 	.word	0x20000310
 8004d14:	20000528 	.word	0x20000528
 8004d18:	20000508 	.word	0x20000508
 8004d1c:	200002c0 	.word	0x200002c0
 8004d20:	200004d4 	.word	0x200004d4
 8004d24:	2000052c 	.word	0x2000052c
 8004d28:	40000400 	.word	0x40000400

08004d2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b094      	sub	sp, #80	@ 0x50
 8004d30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004d32:	f107 0320 	add.w	r3, r7, #32
 8004d36:	2230      	movs	r2, #48	@ 0x30
 8004d38:	2100      	movs	r1, #0
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f007 ff68 	bl	800cc10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004d40:	f107 030c 	add.w	r3, r7, #12
 8004d44:	2200      	movs	r2, #0
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	605a      	str	r2, [r3, #4]
 8004d4a:	609a      	str	r2, [r3, #8]
 8004d4c:	60da      	str	r2, [r3, #12]
 8004d4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d50:	2300      	movs	r3, #0
 8004d52:	60bb      	str	r3, [r7, #8]
 8004d54:	4b28      	ldr	r3, [pc, #160]	@ (8004df8 <SystemClock_Config+0xcc>)
 8004d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d58:	4a27      	ldr	r2, [pc, #156]	@ (8004df8 <SystemClock_Config+0xcc>)
 8004d5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d60:	4b25      	ldr	r3, [pc, #148]	@ (8004df8 <SystemClock_Config+0xcc>)
 8004d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d68:	60bb      	str	r3, [r7, #8]
 8004d6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	607b      	str	r3, [r7, #4]
 8004d70:	4b22      	ldr	r3, [pc, #136]	@ (8004dfc <SystemClock_Config+0xd0>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a21      	ldr	r2, [pc, #132]	@ (8004dfc <SystemClock_Config+0xd0>)
 8004d76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d7a:	6013      	str	r3, [r2, #0]
 8004d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8004dfc <SystemClock_Config+0xd0>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d84:	607b      	str	r3, [r7, #4]
 8004d86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004d8c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004d90:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d92:	2302      	movs	r3, #2
 8004d94:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004d96:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004d9c:	2304      	movs	r3, #4
 8004d9e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004da0:	23a8      	movs	r3, #168	@ 0xa8
 8004da2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004da4:	2302      	movs	r3, #2
 8004da6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004da8:	2304      	movs	r3, #4
 8004daa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004dac:	f107 0320 	add.w	r3, r7, #32
 8004db0:	4618      	mov	r0, r3
 8004db2:	f004 fa51 	bl	8009258 <HAL_RCC_OscConfig>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004dbc:	f000 fcff 	bl	80057be <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004dc0:	230f      	movs	r3, #15
 8004dc2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004dcc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004dd0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004dd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004dd6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004dd8:	f107 030c 	add.w	r3, r7, #12
 8004ddc:	2105      	movs	r1, #5
 8004dde:	4618      	mov	r0, r3
 8004de0:	f004 fcb2 	bl	8009748 <HAL_RCC_ClockConfig>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004dea:	f000 fce8 	bl	80057be <Error_Handler>
  }
}
 8004dee:	bf00      	nop
 8004df0:	3750      	adds	r7, #80	@ 0x50
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	40023800 	.word	0x40023800
 8004dfc:	40007000 	.word	0x40007000

08004e00 <Is_iBus_Throttle_Min>:

/* USER CODE BEGIN 4 */
int Is_iBus_Throttle_Min(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag == 1)
 8004e04:	4b0e      	ldr	r3, [pc, #56]	@ (8004e40 <Is_iBus_Throttle_Min+0x40>)
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d115      	bne.n	8004e38 <Is_iBus_Throttle_Min+0x38>
	{
		ibus_rx_cplt_flag = 0;
 8004e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004e40 <Is_iBus_Throttle_Min+0x40>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	701a      	strb	r2, [r3, #0]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0],32) == 1)
 8004e12:	2120      	movs	r1, #32
 8004e14:	480b      	ldr	r0, [pc, #44]	@ (8004e44 <Is_iBus_Throttle_Min+0x44>)
 8004e16:	f7fd f8cd 	bl	8001fb4 <iBus_Check_CHKSUM>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d10b      	bne.n	8004e38 <Is_iBus_Throttle_Min+0x38>
		{
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8004e20:	4909      	ldr	r1, [pc, #36]	@ (8004e48 <Is_iBus_Throttle_Min+0x48>)
 8004e22:	4808      	ldr	r0, [pc, #32]	@ (8004e44 <Is_iBus_Throttle_Min+0x44>)
 8004e24:	f7fd f8fb 	bl	800201e <iBus_Parsing>

			if(iBus.LV < 1010) return 1;
 8004e28:	4b07      	ldr	r3, [pc, #28]	@ (8004e48 <Is_iBus_Throttle_Min+0x48>)
 8004e2a:	889b      	ldrh	r3, [r3, #4]
 8004e2c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d801      	bhi.n	8004e38 <Is_iBus_Throttle_Min+0x38>
 8004e34:	2301      	movs	r3, #1
 8004e36:	e000      	b.n	8004e3a <Is_iBus_Throttle_Min+0x3a>
		}
	}
	return 0;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	20000528 	.word	0x20000528
 8004e44:	20000508 	.word	0x20000508
 8004e48:	200002c0 	.word	0x200002c0

08004e4c <Is_iBus_Received>:

int Is_iBus_Received(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag == 1)
 8004e50:	4b0b      	ldr	r3, [pc, #44]	@ (8004e80 <Is_iBus_Received+0x34>)
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d10f      	bne.n	8004e78 <Is_iBus_Received+0x2c>
		{
			ibus_rx_cplt_flag = 0;
 8004e58:	4b09      	ldr	r3, [pc, #36]	@ (8004e80 <Is_iBus_Received+0x34>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	701a      	strb	r2, [r3, #0]
			if(iBus_Check_CHKSUM(&ibus_rx_buf[0],32) == 1)
 8004e5e:	2120      	movs	r1, #32
 8004e60:	4808      	ldr	r0, [pc, #32]	@ (8004e84 <Is_iBus_Received+0x38>)
 8004e62:	f7fd f8a7 	bl	8001fb4 <iBus_Check_CHKSUM>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d105      	bne.n	8004e78 <Is_iBus_Received+0x2c>
			{
				iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8004e6c:	4906      	ldr	r1, [pc, #24]	@ (8004e88 <Is_iBus_Received+0x3c>)
 8004e6e:	4805      	ldr	r0, [pc, #20]	@ (8004e84 <Is_iBus_Received+0x38>)
 8004e70:	f7fd f8d5 	bl	800201e <iBus_Parsing>

				return 1;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e000      	b.n	8004e7a <Is_iBus_Received+0x2e>
			}
		}
		return 0;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	20000528 	.word	0x20000528
 8004e84:	20000508 	.word	0x20000508
 8004e88:	200002c0 	.word	0x200002c0

08004e8c <ESC_Calibration>:

void ESC_Calibration(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
	 TIM5->CCR1 = 21000;
 8004e90:	4b14      	ldr	r3, [pc, #80]	@ (8004ee4 <ESC_Calibration+0x58>)
 8004e92:	f245 2208 	movw	r2, #21000	@ 0x5208
 8004e96:	635a      	str	r2, [r3, #52]	@ 0x34
	  TIM5->CCR2 = 21000;
 8004e98:	4b12      	ldr	r3, [pc, #72]	@ (8004ee4 <ESC_Calibration+0x58>)
 8004e9a:	f245 2208 	movw	r2, #21000	@ 0x5208
 8004e9e:	639a      	str	r2, [r3, #56]	@ 0x38
	  TIM5->CCR3 = 21000;
 8004ea0:	4b10      	ldr	r3, [pc, #64]	@ (8004ee4 <ESC_Calibration+0x58>)
 8004ea2:	f245 2208 	movw	r2, #21000	@ 0x5208
 8004ea6:	63da      	str	r2, [r3, #60]	@ 0x3c
	  TIM5->CCR4 = 21000;
 8004ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8004ee4 <ESC_Calibration+0x58>)
 8004eaa:	f245 2208 	movw	r2, #21000	@ 0x5208
 8004eae:	641a      	str	r2, [r3, #64]	@ 0x40
	  HAL_Delay(7000);
 8004eb0:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8004eb4:	f001 fec6 	bl	8006c44 <HAL_Delay>
	  TIM5->CCR1 = 10500;
 8004eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee4 <ESC_Calibration+0x58>)
 8004eba:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004ebe:	635a      	str	r2, [r3, #52]	@ 0x34
	  TIM5->CCR2 = 10500;
 8004ec0:	4b08      	ldr	r3, [pc, #32]	@ (8004ee4 <ESC_Calibration+0x58>)
 8004ec2:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004ec6:	639a      	str	r2, [r3, #56]	@ 0x38
	  TIM5->CCR3 = 10500;
 8004ec8:	4b06      	ldr	r3, [pc, #24]	@ (8004ee4 <ESC_Calibration+0x58>)
 8004eca:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004ece:	63da      	str	r2, [r3, #60]	@ 0x3c
	  TIM5->CCR4 = 10500;
 8004ed0:	4b04      	ldr	r3, [pc, #16]	@ (8004ee4 <ESC_Calibration+0x58>)
 8004ed2:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004ed6:	641a      	str	r2, [r3, #64]	@ 0x40
	  HAL_Delay(8000);
 8004ed8:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 8004edc:	f001 feb2 	bl	8006c44 <HAL_Delay>
}
 8004ee0:	bf00      	nop
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	40000c00 	.word	0x40000c00

08004ee8 <BNO080_Calibration>:

void BNO080_Calibration(void)
{
 8004ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004eec:	b090      	sub	sp, #64	@ 0x40
 8004eee:	af06      	add	r7, sp, #24
	//Resets BNO080 to disable All output
	BNO080_Initialization();
 8004ef0:	f7fc fb08 	bl	8001504 <BNO080_Initialization>

	//BNO080/BNO085 Configuration
	//Enable dynamic calibration for accelerometer, gyroscope, and magnetometer
	//Enable Game Rotation Vector output
	//Enable Magnetic Field output
	BNO080_calibrateAll(); //Turn on cal for Accel, Gyro, and Mag
 8004ef4:	f7fc fe72 	bl	8001bdc <BNO080_calibrateAll>
	BNO080_enableGameRotationVector(20000); //Send data update every 20ms (50Hz)
 8004ef8:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8004efc:	f7fc fe50 	bl	8001ba0 <BNO080_enableGameRotationVector>
	BNO080_enableMagnetometer(20000); //Send data update every 20ms (50Hz)
 8004f00:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8004f04:	f7fc fe5b 	bl	8001bbe <BNO080_enableMagnetometer>

	//Once magnetic field is 2 or 3, run the Save DCD Now command
  	printf("Calibrating BNO080. Pull up FS-i6 SWC to end calibration and save to flash\n");
 8004f08:	489d      	ldr	r0, [pc, #628]	@ (8005180 <BNO080_Calibration+0x298>)
 8004f0a:	f007 fda1 	bl	800ca50 <puts>
  	printf("Output in form x, y, z, in uTesla\n\n");
 8004f0e:	489d      	ldr	r0, [pc, #628]	@ (8005184 <BNO080_Calibration+0x29c>)
 8004f10:	f007 fd9e 	bl	800ca50 <puts>

	//while loop for calibration procedure
	//Iterates until iBus.SwC is mid point (1500)
	//Calibration procedure should be done while this loop is in iteration.
	while(iBus.SwC == 1500)
 8004f14:	e0b8      	b.n	8005088 <BNO080_Calibration+0x1a0>
	{
		if(BNO080_dataAvailable() == 1)
 8004f16:	f7fc fb8b 	bl	8001630 <BNO080_dataAvailable>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	f040 80ae 	bne.w	800507e <BNO080_Calibration+0x196>
		{
			//Observing the status bit of the magnetic field output
			float x = BNO080_getMagX();
 8004f22:	f7fc fdb9 	bl	8001a98 <BNO080_getMagX>
 8004f26:	ed87 0a08 	vstr	s0, [r7, #32]
			float y = BNO080_getMagY();
 8004f2a:	f7fc fdcb 	bl	8001ac4 <BNO080_getMagY>
 8004f2e:	ed87 0a07 	vstr	s0, [r7, #28]
			float z = BNO080_getMagZ();
 8004f32:	f7fc fddd 	bl	8001af0 <BNO080_getMagZ>
 8004f36:	ed87 0a06 	vstr	s0, [r7, #24]
			unsigned char accuracy = BNO080_getMagAccuracy();
 8004f3a:	f7fc fdef 	bl	8001b1c <BNO080_getMagAccuracy>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	75fb      	strb	r3, [r7, #23]

			float quatI = BNO080_getQuatI();
 8004f42:	f7fc fd2f 	bl	80019a4 <BNO080_getQuatI>
 8004f46:	ed87 0a04 	vstr	s0, [r7, #16]
			float quatJ = BNO080_getQuatJ();
 8004f4a:	f7fc fd41 	bl	80019d0 <BNO080_getQuatJ>
 8004f4e:	ed87 0a03 	vstr	s0, [r7, #12]
			float quatK = BNO080_getQuatK();
 8004f52:	f7fc fd53 	bl	80019fc <BNO080_getQuatK>
 8004f56:	ed87 0a02 	vstr	s0, [r7, #8]
			float quatReal = BNO080_getQuatReal();
 8004f5a:	f7fc fd65 	bl	8001a28 <BNO080_getQuatReal>
 8004f5e:	ed87 0a01 	vstr	s0, [r7, #4]
			unsigned char sensorAccuracy = BNO080_getQuatAccuracy();
 8004f62:	f7fc fd8d 	bl	8001a80 <BNO080_getQuatAccuracy>
 8004f66:	4603      	mov	r3, r0
 8004f68:	70fb      	strb	r3, [r7, #3]

			printf("%f,%f,%f,", x, y, z);
 8004f6a:	6a38      	ldr	r0, [r7, #32]
 8004f6c:	f7fb faec 	bl	8000548 <__aeabi_f2d>
 8004f70:	4680      	mov	r8, r0
 8004f72:	4689      	mov	r9, r1
 8004f74:	69f8      	ldr	r0, [r7, #28]
 8004f76:	f7fb fae7 	bl	8000548 <__aeabi_f2d>
 8004f7a:	4604      	mov	r4, r0
 8004f7c:	460d      	mov	r5, r1
 8004f7e:	69b8      	ldr	r0, [r7, #24]
 8004f80:	f7fb fae2 	bl	8000548 <__aeabi_f2d>
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f8c:	e9cd 4500 	strd	r4, r5, [sp]
 8004f90:	4642      	mov	r2, r8
 8004f92:	464b      	mov	r3, r9
 8004f94:	487c      	ldr	r0, [pc, #496]	@ (8005188 <BNO080_Calibration+0x2a0>)
 8004f96:	f007 fcf3 	bl	800c980 <iprintf>
			if (accuracy == 0) printf("Unreliable\t");
 8004f9a:	7dfb      	ldrb	r3, [r7, #23]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d103      	bne.n	8004fa8 <BNO080_Calibration+0xc0>
 8004fa0:	487a      	ldr	r0, [pc, #488]	@ (800518c <BNO080_Calibration+0x2a4>)
 8004fa2:	f007 fced 	bl	800c980 <iprintf>
 8004fa6:	e013      	b.n	8004fd0 <BNO080_Calibration+0xe8>
			else if (accuracy == 1) printf("Low\t");
 8004fa8:	7dfb      	ldrb	r3, [r7, #23]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d103      	bne.n	8004fb6 <BNO080_Calibration+0xce>
 8004fae:	4878      	ldr	r0, [pc, #480]	@ (8005190 <BNO080_Calibration+0x2a8>)
 8004fb0:	f007 fce6 	bl	800c980 <iprintf>
 8004fb4:	e00c      	b.n	8004fd0 <BNO080_Calibration+0xe8>
			else if (accuracy == 2) printf("Medium\t");
 8004fb6:	7dfb      	ldrb	r3, [r7, #23]
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d103      	bne.n	8004fc4 <BNO080_Calibration+0xdc>
 8004fbc:	4875      	ldr	r0, [pc, #468]	@ (8005194 <BNO080_Calibration+0x2ac>)
 8004fbe:	f007 fcdf 	bl	800c980 <iprintf>
 8004fc2:	e005      	b.n	8004fd0 <BNO080_Calibration+0xe8>
			else if (accuracy == 3) printf("High\t");
 8004fc4:	7dfb      	ldrb	r3, [r7, #23]
 8004fc6:	2b03      	cmp	r3, #3
 8004fc8:	d102      	bne.n	8004fd0 <BNO080_Calibration+0xe8>
 8004fca:	4873      	ldr	r0, [pc, #460]	@ (8005198 <BNO080_Calibration+0x2b0>)
 8004fcc:	f007 fcd8 	bl	800c980 <iprintf>

			printf("\t%f,%f,%f,%f,", quatI, quatI, quatI, quatReal);
 8004fd0:	6938      	ldr	r0, [r7, #16]
 8004fd2:	f7fb fab9 	bl	8000548 <__aeabi_f2d>
 8004fd6:	4682      	mov	sl, r0
 8004fd8:	468b      	mov	fp, r1
 8004fda:	6938      	ldr	r0, [r7, #16]
 8004fdc:	f7fb fab4 	bl	8000548 <__aeabi_f2d>
 8004fe0:	4604      	mov	r4, r0
 8004fe2:	460d      	mov	r5, r1
 8004fe4:	6938      	ldr	r0, [r7, #16]
 8004fe6:	f7fb faaf 	bl	8000548 <__aeabi_f2d>
 8004fea:	4680      	mov	r8, r0
 8004fec:	4689      	mov	r9, r1
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7fb faaa 	bl	8000548 <__aeabi_f2d>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004ffc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8005000:	e9cd 4500 	strd	r4, r5, [sp]
 8005004:	4652      	mov	r2, sl
 8005006:	465b      	mov	r3, fp
 8005008:	4864      	ldr	r0, [pc, #400]	@ (800519c <BNO080_Calibration+0x2b4>)
 800500a:	f007 fcb9 	bl	800c980 <iprintf>
			if (sensorAccuracy == 0) printf("Unreliable\n");
 800500e:	78fb      	ldrb	r3, [r7, #3]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d103      	bne.n	800501c <BNO080_Calibration+0x134>
 8005014:	4862      	ldr	r0, [pc, #392]	@ (80051a0 <BNO080_Calibration+0x2b8>)
 8005016:	f007 fd1b 	bl	800ca50 <puts>
 800501a:	e013      	b.n	8005044 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 1) printf("Low\n");
 800501c:	78fb      	ldrb	r3, [r7, #3]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d103      	bne.n	800502a <BNO080_Calibration+0x142>
 8005022:	4860      	ldr	r0, [pc, #384]	@ (80051a4 <BNO080_Calibration+0x2bc>)
 8005024:	f007 fd14 	bl	800ca50 <puts>
 8005028:	e00c      	b.n	8005044 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 2) printf("Medium\n");
 800502a:	78fb      	ldrb	r3, [r7, #3]
 800502c:	2b02      	cmp	r3, #2
 800502e:	d103      	bne.n	8005038 <BNO080_Calibration+0x150>
 8005030:	485d      	ldr	r0, [pc, #372]	@ (80051a8 <BNO080_Calibration+0x2c0>)
 8005032:	f007 fd0d 	bl	800ca50 <puts>
 8005036:	e005      	b.n	8005044 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 3) printf("High\n");
 8005038:	78fb      	ldrb	r3, [r7, #3]
 800503a:	2b03      	cmp	r3, #3
 800503c:	d102      	bne.n	8005044 <BNO080_Calibration+0x15c>
 800503e:	485b      	ldr	r0, [pc, #364]	@ (80051ac <BNO080_Calibration+0x2c4>)
 8005040:	f007 fd06 	bl	800ca50 <puts>

			//Turn the LED and buzzer on when both accuracy and sensorAccuracy is high
			if(accuracy == 3 && sensorAccuracy == 3)
 8005044:	7dfb      	ldrb	r3, [r7, #23]
 8005046:	2b03      	cmp	r3, #3
 8005048:	d110      	bne.n	800506c <BNO080_Calibration+0x184>
 800504a:	78fb      	ldrb	r3, [r7, #3]
 800504c:	2b03      	cmp	r3, #3
 800504e:	d10d      	bne.n	800506c <BNO080_Calibration+0x184>
			{
				LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 8005050:	2107      	movs	r1, #7
 8005052:	4857      	ldr	r0, [pc, #348]	@ (80051b0 <BNO080_Calibration+0x2c8>)
 8005054:	f7fe fc7a 	bl	800394c <LL_GPIO_SetOutputPin>
				TIM3->PSC = 65000; //Very low frequency
 8005058:	4b56      	ldr	r3, [pc, #344]	@ (80051b4 <BNO080_Calibration+0x2cc>)
 800505a:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 800505e:	629a      	str	r2, [r3, #40]	@ 0x28
				LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8005060:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005064:	4853      	ldr	r0, [pc, #332]	@ (80051b4 <BNO080_Calibration+0x2cc>)
 8005066:	f7fe fbf9 	bl	800385c <LL_TIM_CC_EnableChannel>
 800506a:	e008      	b.n	800507e <BNO080_Calibration+0x196>
			}
			else
			{
				LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 800506c:	2107      	movs	r1, #7
 800506e:	4850      	ldr	r0, [pc, #320]	@ (80051b0 <BNO080_Calibration+0x2c8>)
 8005070:	f7fe fc7a 	bl	8003968 <LL_GPIO_ResetOutputPin>
				LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8005074:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005078:	484e      	ldr	r0, [pc, #312]	@ (80051b4 <BNO080_Calibration+0x2cc>)
 800507a:	f7fe fc00 	bl	800387e <LL_TIM_CC_DisableChannel>
			}
		}

		Is_iBus_Received(); //Refreshes iBus Data for iBus.SwC
 800507e:	f7ff fee5 	bl	8004e4c <Is_iBus_Received>
		HAL_Delay(100);
 8005082:	2064      	movs	r0, #100	@ 0x64
 8005084:	f001 fdde 	bl	8006c44 <HAL_Delay>
	while(iBus.SwC == 1500)
 8005088:	4b4b      	ldr	r3, [pc, #300]	@ (80051b8 <BNO080_Calibration+0x2d0>)
 800508a:	899b      	ldrh	r3, [r3, #12]
 800508c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005090:	4293      	cmp	r3, r2
 8005092:	f43f af40 	beq.w	8004f16 <BNO080_Calibration+0x2e>
	}

	//Ends the loop when iBus.SwC is not mid point
	//Turn the LED and buzzer off
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 8005096:	2107      	movs	r1, #7
 8005098:	4845      	ldr	r0, [pc, #276]	@ (80051b0 <BNO080_Calibration+0x2c8>)
 800509a:	f7fe fc65 	bl	8003968 <LL_GPIO_ResetOutputPin>
	LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800509e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80050a2:	4844      	ldr	r0, [pc, #272]	@ (80051b4 <BNO080_Calibration+0x2cc>)
 80050a4:	f7fe fbeb 	bl	800387e <LL_TIM_CC_DisableChannel>

	//Saves the current dynamic calibration data (DCD) to memory
	//Sends command to get the latest calibration status
	BNO080_saveCalibration();
 80050a8:	f7fc fe86 	bl	8001db8 <BNO080_saveCalibration>
	BNO080_requestCalibrationStatus();
 80050ac:	f7fc fe68 	bl	8001d80 <BNO080_requestCalibrationStatus>

	//Wait for calibration response, timeout if no response
	int counter = 100;
 80050b0:	2364      	movs	r3, #100	@ 0x64
 80050b2:	627b      	str	r3, [r7, #36]	@ 0x24
	while(1)
	{
		if(--counter == 0) break;
 80050b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b6:	3b01      	subs	r3, #1
 80050b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80050ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d02f      	beq.n	8005120 <BNO080_Calibration+0x238>
		if(BNO080_dataAvailable())
 80050c0:	f7fc fab6 	bl	8001630 <BNO080_dataAvailable>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d026      	beq.n	8005118 <BNO080_Calibration+0x230>
		{
			//The IMU can report many different things. We must wait
			//for the ME Calibration Response Status byte to go to zero
			if(BNO080_calibrationComplete() == 1)
 80050ca:	f7fc fd8f 	bl	8001bec <BNO080_calibrationComplete>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d121      	bne.n	8005118 <BNO080_Calibration+0x230>
			{
				printf("\nCalibration data successfully stored\n");
 80050d4:	4839      	ldr	r0, [pc, #228]	@ (80051bc <BNO080_Calibration+0x2d4>)
 80050d6:	f007 fcbb 	bl	800ca50 <puts>
				LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80050da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80050de:	4835      	ldr	r0, [pc, #212]	@ (80051b4 <BNO080_Calibration+0x2cc>)
 80050e0:	f7fe fbbc 	bl	800385c <LL_TIM_CC_EnableChannel>
				TIM3->PSC = 2000;
 80050e4:	4b33      	ldr	r3, [pc, #204]	@ (80051b4 <BNO080_Calibration+0x2cc>)
 80050e6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80050ea:	629a      	str	r2, [r3, #40]	@ 0x28
				HAL_Delay(300);
 80050ec:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80050f0:	f001 fda8 	bl	8006c44 <HAL_Delay>
				TIM3->PSC = 1500;
 80050f4:	4b2f      	ldr	r3, [pc, #188]	@ (80051b4 <BNO080_Calibration+0x2cc>)
 80050f6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80050fa:	629a      	str	r2, [r3, #40]	@ 0x28
				HAL_Delay(300);
 80050fc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8005100:	f001 fda0 	bl	8006c44 <HAL_Delay>
				LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8005104:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005108:	482a      	ldr	r0, [pc, #168]	@ (80051b4 <BNO080_Calibration+0x2cc>)
 800510a:	f7fe fbb8 	bl	800387e <LL_TIM_CC_DisableChannel>
				HAL_Delay(1000);
 800510e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005112:	f001 fd97 	bl	8006c44 <HAL_Delay>
				break;
 8005116:	e004      	b.n	8005122 <BNO080_Calibration+0x23a>
			}
		}
		HAL_Delay(10);
 8005118:	200a      	movs	r0, #10
 800511a:	f001 fd93 	bl	8006c44 <HAL_Delay>
		if(--counter == 0) break;
 800511e:	e7c9      	b.n	80050b4 <BNO080_Calibration+0x1cc>
 8005120:	bf00      	nop
	}
	if(counter == 0)
 8005122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005124:	2b00      	cmp	r3, #0
 8005126:	d120      	bne.n	800516a <BNO080_Calibration+0x282>
	{
		printf("\nCalibration data failed to store. Please try again.\n");
 8005128:	4825      	ldr	r0, [pc, #148]	@ (80051c0 <BNO080_Calibration+0x2d8>)
 800512a:	f007 fc91 	bl	800ca50 <puts>
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800512e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005132:	4820      	ldr	r0, [pc, #128]	@ (80051b4 <BNO080_Calibration+0x2cc>)
 8005134:	f7fe fb92 	bl	800385c <LL_TIM_CC_EnableChannel>
		TIM3->PSC = 1500;
 8005138:	4b1e      	ldr	r3, [pc, #120]	@ (80051b4 <BNO080_Calibration+0x2cc>)
 800513a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800513e:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(300);
 8005140:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8005144:	f001 fd7e 	bl	8006c44 <HAL_Delay>
		TIM3->PSC = 2000;
 8005148:	4b1a      	ldr	r3, [pc, #104]	@ (80051b4 <BNO080_Calibration+0x2cc>)
 800514a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800514e:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(300);
 8005150:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8005154:	f001 fd76 	bl	8006c44 <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8005158:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800515c:	4815      	ldr	r0, [pc, #84]	@ (80051b4 <BNO080_Calibration+0x2cc>)
 800515e:	f7fe fb8e 	bl	800387e <LL_TIM_CC_DisableChannel>
		HAL_Delay(1000);
 8005162:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005166:	f001 fd6d 	bl	8006c44 <HAL_Delay>
	//In general, calibration should be left on at all times. The BNO080
	//auto-calibrates and auto-records cal data roughly every 5 minutes

	//Resets BNO080 to disable Game Rotation Vector and Magnetometer
	//Enables Rotation Vector
	BNO080_Initialization();
 800516a:	f7fc f9cb 	bl	8001504 <BNO080_Initialization>
	BNO080_enableRotationVector(2500); //Send data update every 2.5ms (400Hz)
 800516e:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8005172:	f7fc fd06 	bl	8001b82 <BNO080_enableRotationVector>
}
 8005176:	bf00      	nop
 8005178:	3728      	adds	r7, #40	@ 0x28
 800517a:	46bd      	mov	sp, r7
 800517c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005180:	0800f850 	.word	0x0800f850
 8005184:	0800f89c 	.word	0x0800f89c
 8005188:	0800f8c0 	.word	0x0800f8c0
 800518c:	0800f8cc 	.word	0x0800f8cc
 8005190:	0800f8d8 	.word	0x0800f8d8
 8005194:	0800f8e0 	.word	0x0800f8e0
 8005198:	0800f8e8 	.word	0x0800f8e8
 800519c:	0800f8f0 	.word	0x0800f8f0
 80051a0:	0800f900 	.word	0x0800f900
 80051a4:	0800f90c 	.word	0x0800f90c
 80051a8:	0800f910 	.word	0x0800f910
 80051ac:	0800f918 	.word	0x0800f918
 80051b0:	40020800 	.word	0x40020800
 80051b4:	40000400 	.word	0x40000400
 80051b8:	200002c0 	.word	0x200002c0
 80051bc:	0800f920 	.word	0x0800f920
 80051c0:	0800f948 	.word	0x0800f948

080051c4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
	static unsigned char cnt = 0;

	if(huart->Instance == USART1)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a2d      	ldr	r2, [pc, #180]	@ (8005288 <HAL_UART_RxCpltCallback+0xc4>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d154      	bne.n	8005280 <HAL_UART_RxCpltCallback+0xbc>
	{
		HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 80051d6:	2201      	movs	r2, #1
 80051d8:	492c      	ldr	r1, [pc, #176]	@ (800528c <HAL_UART_RxCpltCallback+0xc8>)
 80051da:	482d      	ldr	r0, [pc, #180]	@ (8005290 <HAL_UART_RxCpltCallback+0xcc>)
 80051dc:	f004 fde5 	bl	8009daa <HAL_UART_Receive_IT>

		switch(cnt)
 80051e0:	4b2c      	ldr	r3, [pc, #176]	@ (8005294 <HAL_UART_RxCpltCallback+0xd0>)
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	2b13      	cmp	r3, #19
 80051e6:	d02e      	beq.n	8005246 <HAL_UART_RxCpltCallback+0x82>
 80051e8:	2b13      	cmp	r3, #19
 80051ea:	dc3a      	bgt.n	8005262 <HAL_UART_RxCpltCallback+0x9e>
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d002      	beq.n	80051f6 <HAL_UART_RxCpltCallback+0x32>
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d012      	beq.n	800521a <HAL_UART_RxCpltCallback+0x56>
 80051f4:	e035      	b.n	8005262 <HAL_UART_RxCpltCallback+0x9e>
		{
		case 0:
			if(uart1_rx_data == 0x47)
 80051f6:	4b25      	ldr	r3, [pc, #148]	@ (800528c <HAL_UART_RxCpltCallback+0xc8>)
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	2b47      	cmp	r3, #71	@ 0x47
 80051fc:	d13f      	bne.n	800527e <HAL_UART_RxCpltCallback+0xba>
			{
				telemetry_rx_buf[cnt] = uart1_rx_data;
 80051fe:	4b25      	ldr	r3, [pc, #148]	@ (8005294 <HAL_UART_RxCpltCallback+0xd0>)
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	461a      	mov	r2, r3
 8005204:	4b21      	ldr	r3, [pc, #132]	@ (800528c <HAL_UART_RxCpltCallback+0xc8>)
 8005206:	7819      	ldrb	r1, [r3, #0]
 8005208:	4b23      	ldr	r3, [pc, #140]	@ (8005298 <HAL_UART_RxCpltCallback+0xd4>)
 800520a:	5499      	strb	r1, [r3, r2]
				cnt++;
 800520c:	4b21      	ldr	r3, [pc, #132]	@ (8005294 <HAL_UART_RxCpltCallback+0xd0>)
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	3301      	adds	r3, #1
 8005212:	b2da      	uxtb	r2, r3
 8005214:	4b1f      	ldr	r3, [pc, #124]	@ (8005294 <HAL_UART_RxCpltCallback+0xd0>)
 8005216:	701a      	strb	r2, [r3, #0]
			}
			break;
 8005218:	e031      	b.n	800527e <HAL_UART_RxCpltCallback+0xba>
		case 1:
			if(uart1_rx_data == 0x53)
 800521a:	4b1c      	ldr	r3, [pc, #112]	@ (800528c <HAL_UART_RxCpltCallback+0xc8>)
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	2b53      	cmp	r3, #83	@ 0x53
 8005220:	d10d      	bne.n	800523e <HAL_UART_RxCpltCallback+0x7a>
			{
				telemetry_rx_buf[cnt] = uart1_rx_data;
 8005222:	4b1c      	ldr	r3, [pc, #112]	@ (8005294 <HAL_UART_RxCpltCallback+0xd0>)
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	461a      	mov	r2, r3
 8005228:	4b18      	ldr	r3, [pc, #96]	@ (800528c <HAL_UART_RxCpltCallback+0xc8>)
 800522a:	7819      	ldrb	r1, [r3, #0]
 800522c:	4b1a      	ldr	r3, [pc, #104]	@ (8005298 <HAL_UART_RxCpltCallback+0xd4>)
 800522e:	5499      	strb	r1, [r3, r2]
				cnt++;
 8005230:	4b18      	ldr	r3, [pc, #96]	@ (8005294 <HAL_UART_RxCpltCallback+0xd0>)
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	3301      	adds	r3, #1
 8005236:	b2da      	uxtb	r2, r3
 8005238:	4b16      	ldr	r3, [pc, #88]	@ (8005294 <HAL_UART_RxCpltCallback+0xd0>)
 800523a:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt = 0;
			break;
 800523c:	e020      	b.n	8005280 <HAL_UART_RxCpltCallback+0xbc>
				cnt = 0;
 800523e:	4b15      	ldr	r3, [pc, #84]	@ (8005294 <HAL_UART_RxCpltCallback+0xd0>)
 8005240:	2200      	movs	r2, #0
 8005242:	701a      	strb	r2, [r3, #0]
			break;
 8005244:	e01c      	b.n	8005280 <HAL_UART_RxCpltCallback+0xbc>
		case 19:
			telemetry_rx_buf[cnt] = uart1_rx_data;
 8005246:	4b13      	ldr	r3, [pc, #76]	@ (8005294 <HAL_UART_RxCpltCallback+0xd0>)
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	461a      	mov	r2, r3
 800524c:	4b0f      	ldr	r3, [pc, #60]	@ (800528c <HAL_UART_RxCpltCallback+0xc8>)
 800524e:	7819      	ldrb	r1, [r3, #0]
 8005250:	4b11      	ldr	r3, [pc, #68]	@ (8005298 <HAL_UART_RxCpltCallback+0xd4>)
 8005252:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8005254:	4b0f      	ldr	r3, [pc, #60]	@ (8005294 <HAL_UART_RxCpltCallback+0xd0>)
 8005256:	2200      	movs	r2, #0
 8005258:	701a      	strb	r2, [r3, #0]
			telemetry_rx_cplt_flag = 1;
 800525a:	4b10      	ldr	r3, [pc, #64]	@ (800529c <HAL_UART_RxCpltCallback+0xd8>)
 800525c:	2201      	movs	r2, #1
 800525e:	701a      	strb	r2, [r3, #0]
			break;
 8005260:	e00e      	b.n	8005280 <HAL_UART_RxCpltCallback+0xbc>
		default:
			telemetry_rx_buf[cnt] = uart1_rx_data;
 8005262:	4b0c      	ldr	r3, [pc, #48]	@ (8005294 <HAL_UART_RxCpltCallback+0xd0>)
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	4b08      	ldr	r3, [pc, #32]	@ (800528c <HAL_UART_RxCpltCallback+0xc8>)
 800526a:	7819      	ldrb	r1, [r3, #0]
 800526c:	4b0a      	ldr	r3, [pc, #40]	@ (8005298 <HAL_UART_RxCpltCallback+0xd4>)
 800526e:	5499      	strb	r1, [r3, r2]
			cnt++;
 8005270:	4b08      	ldr	r3, [pc, #32]	@ (8005294 <HAL_UART_RxCpltCallback+0xd0>)
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	3301      	adds	r3, #1
 8005276:	b2da      	uxtb	r2, r3
 8005278:	4b06      	ldr	r3, [pc, #24]	@ (8005294 <HAL_UART_RxCpltCallback+0xd0>)
 800527a:	701a      	strb	r2, [r3, #0]
			break;
 800527c:	e000      	b.n	8005280 <HAL_UART_RxCpltCallback+0xbc>
			break;
 800527e:	bf00      	nop
		}
	}
}
 8005280:	bf00      	nop
 8005282:	3708      	adds	r7, #8
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	40011000 	.word	0x40011000
 800528c:	20000529 	.word	0x20000529
 8005290:	20000538 	.word	0x20000538
 8005294:	200004d6 	.word	0x200004d6
 8005298:	20000470 	.word	0x20000470
 800529c:	20000484 	.word	0x20000484

080052a0 <Encode_Msg_AHRS>:

void Encode_Msg_AHRS(unsigned char* telemetry_tx_buf)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
	  telemetry_tx_buf[0] = 0x46;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2246      	movs	r2, #70	@ 0x46
 80052ac:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[1] = 0x43;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	3301      	adds	r3, #1
 80052b2:	2243      	movs	r2, #67	@ 0x43
 80052b4:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[2] = 0x10;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	3302      	adds	r3, #2
 80052ba:	2210      	movs	r2, #16
 80052bc:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[3] = (short)(BNO080_Roll*100);
 80052be:	4bae      	ldr	r3, [pc, #696]	@ (8005578 <Encode_Msg_AHRS+0x2d8>)
 80052c0:	edd3 7a00 	vldr	s15, [r3]
 80052c4:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 800557c <Encode_Msg_AHRS+0x2dc>
 80052c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052d0:	ee17 3a90 	vmov	r3, s15
 80052d4:	b21a      	sxth	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	3303      	adds	r3, #3
 80052da:	b2d2      	uxtb	r2, r2
 80052dc:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[4] = ((short)(BNO080_Roll*100))>>8;
 80052de:	4ba6      	ldr	r3, [pc, #664]	@ (8005578 <Encode_Msg_AHRS+0x2d8>)
 80052e0:	edd3 7a00 	vldr	s15, [r3]
 80052e4:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 800557c <Encode_Msg_AHRS+0x2dc>
 80052e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052f0:	ee17 3a90 	vmov	r3, s15
 80052f4:	b21b      	sxth	r3, r3
 80052f6:	121b      	asrs	r3, r3, #8
 80052f8:	b21a      	sxth	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3304      	adds	r3, #4
 80052fe:	b2d2      	uxtb	r2, r2
 8005300:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[5] = (short)(BNO080_Pitch*100);
 8005302:	4b9f      	ldr	r3, [pc, #636]	@ (8005580 <Encode_Msg_AHRS+0x2e0>)
 8005304:	edd3 7a00 	vldr	s15, [r3]
 8005308:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 800557c <Encode_Msg_AHRS+0x2dc>
 800530c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005310:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005314:	ee17 3a90 	vmov	r3, s15
 8005318:	b21a      	sxth	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	3305      	adds	r3, #5
 800531e:	b2d2      	uxtb	r2, r2
 8005320:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[6] = ((short)(BNO080_Pitch*100))>>8;
 8005322:	4b97      	ldr	r3, [pc, #604]	@ (8005580 <Encode_Msg_AHRS+0x2e0>)
 8005324:	edd3 7a00 	vldr	s15, [r3]
 8005328:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 800557c <Encode_Msg_AHRS+0x2dc>
 800532c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005330:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005334:	ee17 3a90 	vmov	r3, s15
 8005338:	b21b      	sxth	r3, r3
 800533a:	121b      	asrs	r3, r3, #8
 800533c:	b21a      	sxth	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	3306      	adds	r3, #6
 8005342:	b2d2      	uxtb	r2, r2
 8005344:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[7] = (unsigned short)(BNO080_Yaw*100);
 8005346:	4b8f      	ldr	r3, [pc, #572]	@ (8005584 <Encode_Msg_AHRS+0x2e4>)
 8005348:	edd3 7a00 	vldr	s15, [r3]
 800534c:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 800557c <Encode_Msg_AHRS+0x2dc>
 8005350:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005354:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005358:	ee17 3a90 	vmov	r3, s15
 800535c:	b29a      	uxth	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	3307      	adds	r3, #7
 8005362:	b2d2      	uxtb	r2, r2
 8005364:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[8] = ((unsigned short)(BNO080_Yaw*100))>>8;
 8005366:	4b87      	ldr	r3, [pc, #540]	@ (8005584 <Encode_Msg_AHRS+0x2e4>)
 8005368:	edd3 7a00 	vldr	s15, [r3]
 800536c:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 800557c <Encode_Msg_AHRS+0x2dc>
 8005370:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005374:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005378:	ee17 3a90 	vmov	r3, s15
 800537c:	b29b      	uxth	r3, r3
 800537e:	0a1b      	lsrs	r3, r3, #8
 8005380:	b29a      	uxth	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	3308      	adds	r3, #8
 8005386:	b2d2      	uxtb	r2, r2
 8005388:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[9] = (short)(LPS22HH.baroAltFilt*10);
 800538a:	4b7f      	ldr	r3, [pc, #508]	@ (8005588 <Encode_Msg_AHRS+0x2e8>)
 800538c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005390:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005394:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005398:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800539c:	ee17 3a90 	vmov	r3, s15
 80053a0:	b21a      	sxth	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	3309      	adds	r3, #9
 80053a6:	b2d2      	uxtb	r2, r2
 80053a8:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[10] = ((short)(LPS22HH.baroAltFilt*10))>>8;
 80053aa:	4b77      	ldr	r3, [pc, #476]	@ (8005588 <Encode_Msg_AHRS+0x2e8>)
 80053ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80053b0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80053b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053bc:	ee17 3a90 	vmov	r3, s15
 80053c0:	b21b      	sxth	r3, r3
 80053c2:	121b      	asrs	r3, r3, #8
 80053c4:	b21a      	sxth	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	330a      	adds	r3, #10
 80053ca:	b2d2      	uxtb	r2, r2
 80053cc:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[11] = (short)((iBus.RH-1500)*0.1f*100);
 80053ce:	4b6f      	ldr	r3, [pc, #444]	@ (800558c <Encode_Msg_AHRS+0x2ec>)
 80053d0:	881b      	ldrh	r3, [r3, #0]
 80053d2:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80053d6:	ee07 3a90 	vmov	s15, r3
 80053da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053de:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8005590 <Encode_Msg_AHRS+0x2f0>
 80053e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053e6:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 800557c <Encode_Msg_AHRS+0x2dc>
 80053ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053f2:	ee17 3a90 	vmov	r3, s15
 80053f6:	b21a      	sxth	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	330b      	adds	r3, #11
 80053fc:	b2d2      	uxtb	r2, r2
 80053fe:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[12] = ((short)((iBus.RH-1500)*0.1f*100))>>8;
 8005400:	4b62      	ldr	r3, [pc, #392]	@ (800558c <Encode_Msg_AHRS+0x2ec>)
 8005402:	881b      	ldrh	r3, [r3, #0]
 8005404:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8005408:	ee07 3a90 	vmov	s15, r3
 800540c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005410:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8005590 <Encode_Msg_AHRS+0x2f0>
 8005414:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005418:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800557c <Encode_Msg_AHRS+0x2dc>
 800541c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005420:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005424:	ee17 3a90 	vmov	r3, s15
 8005428:	b21b      	sxth	r3, r3
 800542a:	121b      	asrs	r3, r3, #8
 800542c:	b21a      	sxth	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	330c      	adds	r3, #12
 8005432:	b2d2      	uxtb	r2, r2
 8005434:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[13] = (short)((iBus.RV-1500)*0.1f*100);
 8005436:	4b55      	ldr	r3, [pc, #340]	@ (800558c <Encode_Msg_AHRS+0x2ec>)
 8005438:	885b      	ldrh	r3, [r3, #2]
 800543a:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 800543e:	ee07 3a90 	vmov	s15, r3
 8005442:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005446:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8005590 <Encode_Msg_AHRS+0x2f0>
 800544a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800544e:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 800557c <Encode_Msg_AHRS+0x2dc>
 8005452:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005456:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800545a:	ee17 3a90 	vmov	r3, s15
 800545e:	b21a      	sxth	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	330d      	adds	r3, #13
 8005464:	b2d2      	uxtb	r2, r2
 8005466:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[14] = ((short)((iBus.RV-1500)*0.1f*100))>>8;
 8005468:	4b48      	ldr	r3, [pc, #288]	@ (800558c <Encode_Msg_AHRS+0x2ec>)
 800546a:	885b      	ldrh	r3, [r3, #2]
 800546c:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8005470:	ee07 3a90 	vmov	s15, r3
 8005474:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005478:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8005590 <Encode_Msg_AHRS+0x2f0>
 800547c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005480:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 800557c <Encode_Msg_AHRS+0x2dc>
 8005484:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005488:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800548c:	ee17 3a90 	vmov	r3, s15
 8005490:	b21b      	sxth	r3, r3
 8005492:	121b      	asrs	r3, r3, #8
 8005494:	b21a      	sxth	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	330e      	adds	r3, #14
 800549a:	b2d2      	uxtb	r2, r2
 800549c:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[15] = (unsigned short)((iBus.LH-1000)*0.36f*100);
 800549e:	4b3b      	ldr	r3, [pc, #236]	@ (800558c <Encode_Msg_AHRS+0x2ec>)
 80054a0:	88db      	ldrh	r3, [r3, #6]
 80054a2:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80054a6:	ee07 3a90 	vmov	s15, r3
 80054aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054ae:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8005594 <Encode_Msg_AHRS+0x2f4>
 80054b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054b6:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800557c <Encode_Msg_AHRS+0x2dc>
 80054ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054c2:	ee17 3a90 	vmov	r3, s15
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	330f      	adds	r3, #15
 80054cc:	b2d2      	uxtb	r2, r2
 80054ce:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[16] = ((unsigned short)((iBus.LH-1000)*0.36f*100))>>8;
 80054d0:	4b2e      	ldr	r3, [pc, #184]	@ (800558c <Encode_Msg_AHRS+0x2ec>)
 80054d2:	88db      	ldrh	r3, [r3, #6]
 80054d4:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80054d8:	ee07 3a90 	vmov	s15, r3
 80054dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054e0:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8005594 <Encode_Msg_AHRS+0x2f4>
 80054e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054e8:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800557c <Encode_Msg_AHRS+0x2dc>
 80054ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054f4:	ee17 3a90 	vmov	r3, s15
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	0a1b      	lsrs	r3, r3, #8
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	3310      	adds	r3, #16
 8005502:	b2d2      	uxtb	r2, r2
 8005504:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[17] = (short)(iBus.LV*10);
 8005506:	4b21      	ldr	r3, [pc, #132]	@ (800558c <Encode_Msg_AHRS+0x2ec>)
 8005508:	889b      	ldrh	r3, [r3, #4]
 800550a:	b2da      	uxtb	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	3311      	adds	r3, #17
 8005510:	4611      	mov	r1, r2
 8005512:	0089      	lsls	r1, r1, #2
 8005514:	440a      	add	r2, r1
 8005516:	0052      	lsls	r2, r2, #1
 8005518:	b2d2      	uxtb	r2, r2
 800551a:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[18] = ((short)(iBus.LV*10)) >> 8;
 800551c:	4b1b      	ldr	r3, [pc, #108]	@ (800558c <Encode_Msg_AHRS+0x2ec>)
 800551e:	889b      	ldrh	r3, [r3, #4]
 8005520:	461a      	mov	r2, r3
 8005522:	0092      	lsls	r2, r2, #2
 8005524:	4413      	add	r3, r2
 8005526:	005b      	lsls	r3, r3, #1
 8005528:	b29b      	uxth	r3, r3
 800552a:	b21b      	sxth	r3, r3
 800552c:	121b      	asrs	r3, r3, #8
 800552e:	b21a      	sxth	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	3312      	adds	r3, #18
 8005534:	b2d2      	uxtb	r2, r2
 8005536:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[19] = 0xff;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	3313      	adds	r3, #19
 800553c:	22ff      	movs	r2, #255	@ 0xff
 800553e:	701a      	strb	r2, [r3, #0]

	  for(int i=0;i<19;i++) telemetry_tx_buf[19] = telemetry_tx_buf[19] - telemetry_tx_buf[i];
 8005540:	2300      	movs	r3, #0
 8005542:	60fb      	str	r3, [r7, #12]
 8005544:	e00e      	b.n	8005564 <Encode_Msg_AHRS+0x2c4>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	3313      	adds	r3, #19
 800554a:	7819      	ldrb	r1, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	4413      	add	r3, r2
 8005552:	781a      	ldrb	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	3313      	adds	r3, #19
 8005558:	1a8a      	subs	r2, r1, r2
 800555a:	b2d2      	uxtb	r2, r2
 800555c:	701a      	strb	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	3301      	adds	r3, #1
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2b12      	cmp	r3, #18
 8005568:	dded      	ble.n	8005546 <Encode_Msg_AHRS+0x2a6>
}
 800556a:	bf00      	nop
 800556c:	bf00      	nop
 800556e:	3714      	adds	r7, #20
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	20000340 	.word	0x20000340
 800557c:	42c80000 	.word	0x42c80000
 8005580:	20000344 	.word	0x20000344
 8005584:	20000348 	.word	0x20000348
 8005588:	20000300 	.word	0x20000300
 800558c:	200002c0 	.word	0x200002c0
 8005590:	3dcccccd 	.word	0x3dcccccd
 8005594:	3eb851ec 	.word	0x3eb851ec

08005598 <Encode_Msg_GPS>:

void Encode_Msg_GPS(unsigned char* telemetry_tx_buf)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
	  telemetry_tx_buf[0] = 0x46;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2246      	movs	r2, #70	@ 0x46
 80055a4:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[1] = 0x43;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	3301      	adds	r3, #1
 80055aa:	2243      	movs	r2, #67	@ 0x43
 80055ac:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[2] = 0x11;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	3302      	adds	r3, #2
 80055b2:	2211      	movs	r2, #17
 80055b4:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[3] = posllh.lat;
 80055b6:	4b53      	ldr	r3, [pc, #332]	@ (8005704 <Encode_Msg_GPS+0x16c>)
 80055b8:	68da      	ldr	r2, [r3, #12]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	3303      	adds	r3, #3
 80055be:	b2d2      	uxtb	r2, r2
 80055c0:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[4] = posllh.lat>>8;
 80055c2:	4b50      	ldr	r3, [pc, #320]	@ (8005704 <Encode_Msg_GPS+0x16c>)
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	121a      	asrs	r2, r3, #8
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	3304      	adds	r3, #4
 80055cc:	b2d2      	uxtb	r2, r2
 80055ce:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[5] = posllh.lat>>16;
 80055d0:	4b4c      	ldr	r3, [pc, #304]	@ (8005704 <Encode_Msg_GPS+0x16c>)
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	141a      	asrs	r2, r3, #16
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	3305      	adds	r3, #5
 80055da:	b2d2      	uxtb	r2, r2
 80055dc:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[6] = posllh.lat>>24;
 80055de:	4b49      	ldr	r3, [pc, #292]	@ (8005704 <Encode_Msg_GPS+0x16c>)
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	161a      	asrs	r2, r3, #24
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	3306      	adds	r3, #6
 80055e8:	b2d2      	uxtb	r2, r2
 80055ea:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[7] = posllh.lon;
 80055ec:	4b45      	ldr	r3, [pc, #276]	@ (8005704 <Encode_Msg_GPS+0x16c>)
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	3307      	adds	r3, #7
 80055f4:	b2d2      	uxtb	r2, r2
 80055f6:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[8] = posllh.lon>>8;
 80055f8:	4b42      	ldr	r3, [pc, #264]	@ (8005704 <Encode_Msg_GPS+0x16c>)
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	121a      	asrs	r2, r3, #8
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	3308      	adds	r3, #8
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[9] = posllh.lon>>16;
 8005606:	4b3f      	ldr	r3, [pc, #252]	@ (8005704 <Encode_Msg_GPS+0x16c>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	141a      	asrs	r2, r3, #16
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	3309      	adds	r3, #9
 8005610:	b2d2      	uxtb	r2, r2
 8005612:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[10] = posllh.lon>>24;
 8005614:	4b3b      	ldr	r3, [pc, #236]	@ (8005704 <Encode_Msg_GPS+0x16c>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	161a      	asrs	r2, r3, #24
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	330a      	adds	r3, #10
 800561e:	b2d2      	uxtb	r2, r2
 8005620:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[11] = (unsigned short)(batVolt*100);
 8005622:	4b39      	ldr	r3, [pc, #228]	@ (8005708 <Encode_Msg_GPS+0x170>)
 8005624:	edd3 7a00 	vldr	s15, [r3]
 8005628:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800570c <Encode_Msg_GPS+0x174>
 800562c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005630:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005634:	ee17 3a90 	vmov	r3, s15
 8005638:	b29a      	uxth	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	330b      	adds	r3, #11
 800563e:	b2d2      	uxtb	r2, r2
 8005640:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[12] = ((unsigned short)(batVolt*100))>>8;
 8005642:	4b31      	ldr	r3, [pc, #196]	@ (8005708 <Encode_Msg_GPS+0x170>)
 8005644:	edd3 7a00 	vldr	s15, [r3]
 8005648:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800570c <Encode_Msg_GPS+0x174>
 800564c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005650:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005654:	ee17 3a90 	vmov	r3, s15
 8005658:	b29b      	uxth	r3, r3
 800565a:	0a1b      	lsrs	r3, r3, #8
 800565c:	b29a      	uxth	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	330c      	adds	r3, #12
 8005662:	b2d2      	uxtb	r2, r2
 8005664:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[13] = iBus.SwA == 1000 ? 0 : 1;
 8005666:	4b2a      	ldr	r3, [pc, #168]	@ (8005710 <Encode_Msg_GPS+0x178>)
 8005668:	891b      	ldrh	r3, [r3, #8]
 800566a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800566e:	bf14      	ite	ne
 8005670:	2301      	movne	r3, #1
 8005672:	2300      	moveq	r3, #0
 8005674:	b2da      	uxtb	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	330d      	adds	r3, #13
 800567a:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[14] = iBus.SwC == 1000 ? 0 : iBus.SwC == 1500 ? 1 : 2;
 800567c:	4b24      	ldr	r3, [pc, #144]	@ (8005710 <Encode_Msg_GPS+0x178>)
 800567e:	899b      	ldrh	r3, [r3, #12]
 8005680:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005684:	d009      	beq.n	800569a <Encode_Msg_GPS+0x102>
 8005686:	4b22      	ldr	r3, [pc, #136]	@ (8005710 <Encode_Msg_GPS+0x178>)
 8005688:	899b      	ldrh	r3, [r3, #12]
 800568a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800568e:	4293      	cmp	r3, r2
 8005690:	d101      	bne.n	8005696 <Encode_Msg_GPS+0xfe>
 8005692:	2301      	movs	r3, #1
 8005694:	e002      	b.n	800569c <Encode_Msg_GPS+0x104>
 8005696:	2302      	movs	r3, #2
 8005698:	e000      	b.n	800569c <Encode_Msg_GPS+0x104>
 800569a:	2300      	movs	r3, #0
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	320e      	adds	r2, #14
 80056a0:	7013      	strb	r3, [r2, #0]

	  telemetry_tx_buf[15] = failsafe_flag;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	330f      	adds	r3, #15
 80056a6:	4a1b      	ldr	r2, [pc, #108]	@ (8005714 <Encode_Msg_GPS+0x17c>)
 80056a8:	7812      	ldrb	r2, [r2, #0]
 80056aa:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[16] = 0x00;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	3310      	adds	r3, #16
 80056b0:	2200      	movs	r2, #0
 80056b2:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[17] = 0x00;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	3311      	adds	r3, #17
 80056b8:	2200      	movs	r2, #0
 80056ba:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[18] = 0x00;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3312      	adds	r3, #18
 80056c0:	2200      	movs	r2, #0
 80056c2:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[19] = 0xff;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	3313      	adds	r3, #19
 80056c8:	22ff      	movs	r2, #255	@ 0xff
 80056ca:	701a      	strb	r2, [r3, #0]

	  for(int i=0;i<19;i++) telemetry_tx_buf[19] = telemetry_tx_buf[19] - telemetry_tx_buf[i];
 80056cc:	2300      	movs	r3, #0
 80056ce:	60fb      	str	r3, [r7, #12]
 80056d0:	e00e      	b.n	80056f0 <Encode_Msg_GPS+0x158>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	3313      	adds	r3, #19
 80056d6:	7819      	ldrb	r1, [r3, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	4413      	add	r3, r2
 80056de:	781a      	ldrb	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	3313      	adds	r3, #19
 80056e4:	1a8a      	subs	r2, r1, r2
 80056e6:	b2d2      	uxtb	r2, r2
 80056e8:	701a      	strb	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	3301      	adds	r3, #1
 80056ee:	60fb      	str	r3, [r7, #12]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2b12      	cmp	r3, #18
 80056f4:	dded      	ble.n	80056d2 <Encode_Msg_GPS+0x13a>
}
 80056f6:	bf00      	nop
 80056f8:	bf00      	nop
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	20000310 	.word	0x20000310
 8005708:	20000488 	.word	0x20000488
 800570c:	42c80000 	.word	0x42c80000
 8005710:	200002c0 	.word	0x200002c0
 8005714:	200004d4 	.word	0x200004d4

08005718 <Encode_Msg_PID_Gain>:

void Encode_Msg_PID_Gain(unsigned char* telemetry_tx_buf, unsigned char id, float p, float i, float d)
{
 8005718:	b480      	push	{r7}
 800571a:	b089      	sub	sp, #36	@ 0x24
 800571c:	af00      	add	r7, sp, #0
 800571e:	6178      	str	r0, [r7, #20]
 8005720:	460b      	mov	r3, r1
 8005722:	ed87 0a03 	vstr	s0, [r7, #12]
 8005726:	edc7 0a02 	vstr	s1, [r7, #8]
 800572a:	ed87 1a01 	vstr	s2, [r7, #4]
 800572e:	74fb      	strb	r3, [r7, #19]
	  telemetry_tx_buf[0] = 0x46;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	2246      	movs	r2, #70	@ 0x46
 8005734:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[1] = 0x43;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	3301      	adds	r3, #1
 800573a:	2243      	movs	r2, #67	@ 0x43
 800573c:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[2] = id;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	3302      	adds	r3, #2
 8005742:	7cfa      	ldrb	r2, [r7, #19]
 8005744:	701a      	strb	r2, [r3, #0]

//	  memcpy(&telemetry_tx_buf[3], &p, 4);
//	  memcpy(&telemetry_tx_buf[7], &i, 4);
//	  memcpy(&telemetry_tx_buf[11], &d, 4);

	  *(float*)&telemetry_tx_buf[3] = p;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	3303      	adds	r3, #3
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	601a      	str	r2, [r3, #0]
	  *(float*)&telemetry_tx_buf[7] = i;
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	3307      	adds	r3, #7
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	601a      	str	r2, [r3, #0]
	  *(float*)&telemetry_tx_buf[11] = d;
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	330b      	adds	r3, #11
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	601a      	str	r2, [r3, #0]

	  telemetry_tx_buf[15] = 0x00;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	330f      	adds	r3, #15
 8005762:	2200      	movs	r2, #0
 8005764:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[16] = 0x00;
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	3310      	adds	r3, #16
 800576a:	2200      	movs	r2, #0
 800576c:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[17] = 0x00;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	3311      	adds	r3, #17
 8005772:	2200      	movs	r2, #0
 8005774:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[18] = 0x00;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	3312      	adds	r3, #18
 800577a:	2200      	movs	r2, #0
 800577c:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[19] = 0xff;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	3313      	adds	r3, #19
 8005782:	22ff      	movs	r2, #255	@ 0xff
 8005784:	701a      	strb	r2, [r3, #0]

	  for(int i=0;i<19;i++) telemetry_tx_buf[19] = telemetry_tx_buf[19] - telemetry_tx_buf[i];
 8005786:	2300      	movs	r3, #0
 8005788:	61fb      	str	r3, [r7, #28]
 800578a:	e00e      	b.n	80057aa <Encode_Msg_PID_Gain+0x92>
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	3313      	adds	r3, #19
 8005790:	7819      	ldrb	r1, [r3, #0]
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	4413      	add	r3, r2
 8005798:	781a      	ldrb	r2, [r3, #0]
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	3313      	adds	r3, #19
 800579e:	1a8a      	subs	r2, r1, r2
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	701a      	strb	r2, [r3, #0]
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	3301      	adds	r3, #1
 80057a8:	61fb      	str	r3, [r7, #28]
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	2b12      	cmp	r3, #18
 80057ae:	dded      	ble.n	800578c <Encode_Msg_PID_Gain+0x74>
}
 80057b0:	bf00      	nop
 80057b2:	bf00      	nop
 80057b4:	3724      	adds	r7, #36	@ 0x24
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80057be:	b480      	push	{r7}
 80057c0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80057c2:	b672      	cpsid	i
}
 80057c4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80057c6:	bf00      	nop
 80057c8:	e7fd      	b.n	80057c6 <Error_Handler+0x8>

080057ca <LL_SPI_SetStandard>:
{
 80057ca:	b480      	push	{r7}
 80057cc:	b083      	sub	sp, #12
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
 80057d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f023 0210 	bic.w	r2, r3, #16
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	431a      	orrs	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	605a      	str	r2, [r3, #4]
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <LL_AHB1_GRP1_EnableClock>:
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80057f8:	4b08      	ldr	r3, [pc, #32]	@ (800581c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80057fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057fc:	4907      	ldr	r1, [pc, #28]	@ (800581c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4313      	orrs	r3, r2
 8005802:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005804:	4b05      	ldr	r3, [pc, #20]	@ (800581c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005806:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4013      	ands	r3, r2
 800580c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800580e:	68fb      	ldr	r3, [r7, #12]
}
 8005810:	bf00      	nop
 8005812:	3714      	adds	r7, #20
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	40023800 	.word	0x40023800

08005820 <LL_APB1_GRP1_EnableClock>:
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8005828:	4b08      	ldr	r3, [pc, #32]	@ (800584c <LL_APB1_GRP1_EnableClock+0x2c>)
 800582a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800582c:	4907      	ldr	r1, [pc, #28]	@ (800584c <LL_APB1_GRP1_EnableClock+0x2c>)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4313      	orrs	r3, r2
 8005832:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8005834:	4b05      	ldr	r3, [pc, #20]	@ (800584c <LL_APB1_GRP1_EnableClock+0x2c>)
 8005836:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4013      	ands	r3, r2
 800583c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800583e:	68fb      	ldr	r3, [r7, #12]
}
 8005840:	bf00      	nop
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr
 800584c:	40023800 	.word	0x40023800

08005850 <LL_APB2_GRP1_EnableClock>:
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005858:	4b08      	ldr	r3, [pc, #32]	@ (800587c <LL_APB2_GRP1_EnableClock+0x2c>)
 800585a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800585c:	4907      	ldr	r1, [pc, #28]	@ (800587c <LL_APB2_GRP1_EnableClock+0x2c>)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4313      	orrs	r3, r2
 8005862:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005864:	4b05      	ldr	r3, [pc, #20]	@ (800587c <LL_APB2_GRP1_EnableClock+0x2c>)
 8005866:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4013      	ands	r3, r2
 800586c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800586e:	68fb      	ldr	r3, [r7, #12]
}
 8005870:	bf00      	nop
 8005872:	3714      	adds	r7, #20
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	40023800 	.word	0x40023800

08005880 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b090      	sub	sp, #64	@ 0x40
 8005884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8005886:	f107 0318 	add.w	r3, r7, #24
 800588a:	2228      	movs	r2, #40	@ 0x28
 800588c:	2100      	movs	r1, #0
 800588e:	4618      	mov	r0, r3
 8005890:	f007 f9be 	bl	800cc10 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005894:	463b      	mov	r3, r7
 8005896:	2200      	movs	r2, #0
 8005898:	601a      	str	r2, [r3, #0]
 800589a:	605a      	str	r2, [r3, #4]
 800589c:	609a      	str	r2, [r3, #8]
 800589e:	60da      	str	r2, [r3, #12]
 80058a0:	611a      	str	r2, [r3, #16]
 80058a2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80058a4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80058a8:	f7ff ffd2 	bl	8005850 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80058ac:	2001      	movs	r0, #1
 80058ae:	f7ff ff9f 	bl	80057f0 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80058b2:	23e0      	movs	r3, #224	@ 0xe0
 80058b4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80058b6:	2302      	movs	r3, #2
 80058b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80058ba:	2303      	movs	r3, #3
 80058bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80058be:	2300      	movs	r3, #0
 80058c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80058c2:	2300      	movs	r3, #0
 80058c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80058c6:	2305      	movs	r3, #5
 80058c8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058ca:	463b      	mov	r3, r7
 80058cc:	4619      	mov	r1, r3
 80058ce:	4813      	ldr	r0, [pc, #76]	@ (800591c <MX_SPI1_Init+0x9c>)
 80058d0:	f005 fb31 	bl	800af36 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80058d4:	2300      	movs	r3, #0
 80058d6:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80058d8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80058dc:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80058de:	2300      	movs	r3, #0
 80058e0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80058e2:	2302      	movs	r3, #2
 80058e4:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80058e6:	2301      	movs	r3, #1
 80058e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80058ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80058ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 80058f0:	2310      	movs	r3, #16
 80058f2:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80058f4:	2300      	movs	r3, #0
 80058f6:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80058f8:	2300      	movs	r3, #0
 80058fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 80058fc:	230a      	movs	r3, #10
 80058fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8005900:	f107 0318 	add.w	r3, r7, #24
 8005904:	4619      	mov	r1, r3
 8005906:	4806      	ldr	r0, [pc, #24]	@ (8005920 <MX_SPI1_Init+0xa0>)
 8005908:	f005 fcf3 	bl	800b2f2 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 800590c:	2100      	movs	r1, #0
 800590e:	4804      	ldr	r0, [pc, #16]	@ (8005920 <MX_SPI1_Init+0xa0>)
 8005910:	f7ff ff5b 	bl	80057ca <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005914:	bf00      	nop
 8005916:	3740      	adds	r7, #64	@ 0x40
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	40020000 	.word	0x40020000
 8005920:	40013000 	.word	0x40013000

08005924 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b090      	sub	sp, #64	@ 0x40
 8005928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800592a:	f107 0318 	add.w	r3, r7, #24
 800592e:	2228      	movs	r2, #40	@ 0x28
 8005930:	2100      	movs	r1, #0
 8005932:	4618      	mov	r0, r3
 8005934:	f007 f96c 	bl	800cc10 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005938:	463b      	mov	r3, r7
 800593a:	2200      	movs	r2, #0
 800593c:	601a      	str	r2, [r3, #0]
 800593e:	605a      	str	r2, [r3, #4]
 8005940:	609a      	str	r2, [r3, #8]
 8005942:	60da      	str	r2, [r3, #12]
 8005944:	611a      	str	r2, [r3, #16]
 8005946:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8005948:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800594c:	f7ff ff68 	bl	8005820 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8005950:	2002      	movs	r0, #2
 8005952:	f7ff ff4d 	bl	80057f0 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8005956:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800595a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800595c:	2302      	movs	r3, #2
 800595e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005960:	2303      	movs	r3, #3
 8005962:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005964:	2300      	movs	r3, #0
 8005966:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005968:	2300      	movs	r3, #0
 800596a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800596c:	2305      	movs	r3, #5
 800596e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005970:	463b      	mov	r3, r7
 8005972:	4619      	mov	r1, r3
 8005974:	4813      	ldr	r0, [pc, #76]	@ (80059c4 <MX_SPI2_Init+0xa0>)
 8005976:	f005 fade 	bl	800af36 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800597a:	2300      	movs	r3, #0
 800597c:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800597e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005982:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8005984:	2300      	movs	r3, #0
 8005986:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8005988:	2302      	movs	r3, #2
 800598a:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800598c:	2301      	movs	r3, #1
 800598e:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8005990:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005994:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8005996:	2318      	movs	r3, #24
 8005998:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800599a:	2300      	movs	r3, #0
 800599c:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800599e:	2300      	movs	r3, #0
 80059a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 80059a2:	230a      	movs	r3, #10
 80059a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 80059a6:	f107 0318 	add.w	r3, r7, #24
 80059aa:	4619      	mov	r1, r3
 80059ac:	4806      	ldr	r0, [pc, #24]	@ (80059c8 <MX_SPI2_Init+0xa4>)
 80059ae:	f005 fca0 	bl	800b2f2 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 80059b2:	2100      	movs	r1, #0
 80059b4:	4804      	ldr	r0, [pc, #16]	@ (80059c8 <MX_SPI2_Init+0xa4>)
 80059b6:	f7ff ff08 	bl	80057ca <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80059ba:	bf00      	nop
 80059bc:	3740      	adds	r7, #64	@ 0x40
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	40020400 	.word	0x40020400
 80059c8:	40003800 	.word	0x40003800

080059cc <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b090      	sub	sp, #64	@ 0x40
 80059d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80059d2:	f107 0318 	add.w	r3, r7, #24
 80059d6:	2228      	movs	r2, #40	@ 0x28
 80059d8:	2100      	movs	r1, #0
 80059da:	4618      	mov	r0, r3
 80059dc:	f007 f918 	bl	800cc10 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059e0:	463b      	mov	r3, r7
 80059e2:	2200      	movs	r2, #0
 80059e4:	601a      	str	r2, [r3, #0]
 80059e6:	605a      	str	r2, [r3, #4]
 80059e8:	609a      	str	r2, [r3, #8]
 80059ea:	60da      	str	r2, [r3, #12]
 80059ec:	611a      	str	r2, [r3, #16]
 80059ee:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80059f0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80059f4:	f7ff ff14 	bl	8005820 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80059f8:	2002      	movs	r0, #2
 80059fa:	f7ff fef9 	bl	80057f0 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 80059fe:	2338      	movs	r3, #56	@ 0x38
 8005a00:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005a02:	2302      	movs	r3, #2
 8005a04:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005a06:	2303      	movs	r3, #3
 8005a08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8005a12:	2306      	movs	r3, #6
 8005a14:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a16:	463b      	mov	r3, r7
 8005a18:	4619      	mov	r1, r3
 8005a1a:	4813      	ldr	r0, [pc, #76]	@ (8005a68 <MX_SPI3_Init+0x9c>)
 8005a1c:	f005 fa8b 	bl	800af36 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8005a20:	2300      	movs	r3, #0
 8005a22:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8005a24:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005a28:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8005a2e:	2302      	movs	r3, #2
 8005a30:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8005a32:	2301      	movs	r3, #1
 8005a34:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8005a36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8005a3c:	2308      	movs	r3, #8
 8005a3e:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8005a40:	2300      	movs	r3, #0
 8005a42:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8005a44:	2300      	movs	r3, #0
 8005a46:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8005a48:	230a      	movs	r3, #10
 8005a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8005a4c:	f107 0318 	add.w	r3, r7, #24
 8005a50:	4619      	mov	r1, r3
 8005a52:	4806      	ldr	r0, [pc, #24]	@ (8005a6c <MX_SPI3_Init+0xa0>)
 8005a54:	f005 fc4d 	bl	800b2f2 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8005a58:	2100      	movs	r1, #0
 8005a5a:	4804      	ldr	r0, [pc, #16]	@ (8005a6c <MX_SPI3_Init+0xa0>)
 8005a5c:	f7ff feb5 	bl	80057ca <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8005a60:	bf00      	nop
 8005a62:	3740      	adds	r7, #64	@ 0x40
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	40020400 	.word	0x40020400
 8005a6c:	40003c00 	.word	0x40003c00

08005a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a76:	2300      	movs	r3, #0
 8005a78:	607b      	str	r3, [r7, #4]
 8005a7a:	4b10      	ldr	r3, [pc, #64]	@ (8005abc <HAL_MspInit+0x4c>)
 8005a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a7e:	4a0f      	ldr	r2, [pc, #60]	@ (8005abc <HAL_MspInit+0x4c>)
 8005a80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a84:	6453      	str	r3, [r2, #68]	@ 0x44
 8005a86:	4b0d      	ldr	r3, [pc, #52]	@ (8005abc <HAL_MspInit+0x4c>)
 8005a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a8e:	607b      	str	r3, [r7, #4]
 8005a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a92:	2300      	movs	r3, #0
 8005a94:	603b      	str	r3, [r7, #0]
 8005a96:	4b09      	ldr	r3, [pc, #36]	@ (8005abc <HAL_MspInit+0x4c>)
 8005a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9a:	4a08      	ldr	r2, [pc, #32]	@ (8005abc <HAL_MspInit+0x4c>)
 8005a9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005aa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005aa2:	4b06      	ldr	r3, [pc, #24]	@ (8005abc <HAL_MspInit+0x4c>)
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005aaa:	603b      	str	r3, [r7, #0]
 8005aac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005aae:	bf00      	nop
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	40023800 	.word	0x40023800

08005ac0 <LL_TIM_ClearFlag_UPDATE>:
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f06f 0201 	mvn.w	r2, #1
 8005ace:	611a      	str	r2, [r3, #16]
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <LL_TIM_IsActiveFlag_UPDATE>:
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d101      	bne.n	8005af4 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8005af0:	2301      	movs	r3, #1
 8005af2:	e000      	b.n	8005af6 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <LL_USART_IsActiveFlag_RXNE>:
{
 8005b02:	b480      	push	{r7}
 8005b04:	b083      	sub	sp, #12
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0320 	and.w	r3, r3, #32
 8005b12:	2b20      	cmp	r3, #32
 8005b14:	bf0c      	ite	eq
 8005b16:	2301      	moveq	r3, #1
 8005b18:	2300      	movne	r3, #0
 8005b1a:	b2db      	uxtb	r3, r3
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <LL_USART_ClearFlag_RXNE>:
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f06f 0220 	mvn.w	r2, #32
 8005b36:	601a      	str	r2, [r3, #0]
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <LL_USART_ReceiveData8>:
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	b2db      	uxtb	r3, r3
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005b62:	bf00      	nop
 8005b64:	e7fd      	b.n	8005b62 <NMI_Handler+0x4>

08005b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b66:	b480      	push	{r7}
 8005b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b6a:	bf00      	nop
 8005b6c:	e7fd      	b.n	8005b6a <HardFault_Handler+0x4>

08005b6e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b72:	bf00      	nop
 8005b74:	e7fd      	b.n	8005b72 <MemManage_Handler+0x4>

08005b76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b76:	b480      	push	{r7}
 8005b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b7a:	bf00      	nop
 8005b7c:	e7fd      	b.n	8005b7a <BusFault_Handler+0x4>

08005b7e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b82:	bf00      	nop
 8005b84:	e7fd      	b.n	8005b82 <UsageFault_Handler+0x4>

08005b86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005b86:	b480      	push	{r7}
 8005b88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005b8a:	bf00      	nop
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b94:	b480      	push	{r7}
 8005b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b98:	bf00      	nop
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005ba6:	bf00      	nop
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005bb4:	f001 f826 	bl	8006c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005bb8:	bf00      	nop
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 8005bc0:	4802      	ldr	r0, [pc, #8]	@ (8005bcc <USART1_IRQHandler+0x10>)
 8005bc2:	f004 f917 	bl	8009df4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005bc6:	bf00      	nop
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	20000538 	.word	0x20000538

08005bd0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	static unsigned char cnt = 0;

	if(LL_USART_IsActiveFlag_RXNE(UART4))
 8005bd4:	4832      	ldr	r0, [pc, #200]	@ (8005ca0 <UART4_IRQHandler+0xd0>)
 8005bd6:	f7ff ff94 	bl	8005b02 <LL_USART_IsActiveFlag_RXNE>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d05c      	beq.n	8005c9a <UART4_IRQHandler+0xca>
	{
		LL_USART_ClearFlag_RXNE(UART4);
 8005be0:	482f      	ldr	r0, [pc, #188]	@ (8005ca0 <UART4_IRQHandler+0xd0>)
 8005be2:	f7ff ffa1 	bl	8005b28 <LL_USART_ClearFlag_RXNE>
		uart4_rx_data = LL_USART_ReceiveData8(UART4);
 8005be6:	482e      	ldr	r0, [pc, #184]	@ (8005ca0 <UART4_IRQHandler+0xd0>)
 8005be8:	f7ff ffac 	bl	8005b44 <LL_USART_ReceiveData8>
 8005bec:	4603      	mov	r3, r0
 8005bee:	461a      	mov	r2, r3
 8005bf0:	4b2c      	ldr	r3, [pc, #176]	@ (8005ca4 <UART4_IRQHandler+0xd4>)
 8005bf2:	701a      	strb	r2, [r3, #0]
		uart4_rx_flag = 1;
 8005bf4:	4b2c      	ldr	r3, [pc, #176]	@ (8005ca8 <UART4_IRQHandler+0xd8>)
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	701a      	strb	r2, [r3, #0]

		//LL_USART_TransmitData8(USART6, uart4_rx_data);

		switch(cnt)
 8005bfa:	4b2c      	ldr	r3, [pc, #176]	@ (8005cac <UART4_IRQHandler+0xdc>)
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	2b23      	cmp	r3, #35	@ 0x23
 8005c00:	d02e      	beq.n	8005c60 <UART4_IRQHandler+0x90>
 8005c02:	2b23      	cmp	r3, #35	@ 0x23
 8005c04:	dc3a      	bgt.n	8005c7c <UART4_IRQHandler+0xac>
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d002      	beq.n	8005c10 <UART4_IRQHandler+0x40>
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d012      	beq.n	8005c34 <UART4_IRQHandler+0x64>
 8005c0e:	e035      	b.n	8005c7c <UART4_IRQHandler+0xac>
		{
		case 0:
			if(uart4_rx_data == 0xb5)
 8005c10:	4b24      	ldr	r3, [pc, #144]	@ (8005ca4 <UART4_IRQHandler+0xd4>)
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	2bb5      	cmp	r3, #181	@ 0xb5
 8005c16:	d13f      	bne.n	8005c98 <UART4_IRQHandler+0xc8>
			{
				m8n_rx_buf[cnt] = uart4_rx_data;
 8005c18:	4b24      	ldr	r3, [pc, #144]	@ (8005cac <UART4_IRQHandler+0xdc>)
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	4b21      	ldr	r3, [pc, #132]	@ (8005ca4 <UART4_IRQHandler+0xd4>)
 8005c20:	7819      	ldrb	r1, [r3, #0]
 8005c22:	4b23      	ldr	r3, [pc, #140]	@ (8005cb0 <UART4_IRQHandler+0xe0>)
 8005c24:	5499      	strb	r1, [r3, r2]
				cnt++;
 8005c26:	4b21      	ldr	r3, [pc, #132]	@ (8005cac <UART4_IRQHandler+0xdc>)
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	4b1f      	ldr	r3, [pc, #124]	@ (8005cac <UART4_IRQHandler+0xdc>)
 8005c30:	701a      	strb	r2, [r3, #0]
			}
			break;
 8005c32:	e031      	b.n	8005c98 <UART4_IRQHandler+0xc8>
		case 1:
			if(uart4_rx_data == 0x62)
 8005c34:	4b1b      	ldr	r3, [pc, #108]	@ (8005ca4 <UART4_IRQHandler+0xd4>)
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	2b62      	cmp	r3, #98	@ 0x62
 8005c3a:	d10d      	bne.n	8005c58 <UART4_IRQHandler+0x88>
			{
				m8n_rx_buf[cnt] = uart4_rx_data;
 8005c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8005cac <UART4_IRQHandler+0xdc>)
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	461a      	mov	r2, r3
 8005c42:	4b18      	ldr	r3, [pc, #96]	@ (8005ca4 <UART4_IRQHandler+0xd4>)
 8005c44:	7819      	ldrb	r1, [r3, #0]
 8005c46:	4b1a      	ldr	r3, [pc, #104]	@ (8005cb0 <UART4_IRQHandler+0xe0>)
 8005c48:	5499      	strb	r1, [r3, r2]
				cnt++;
 8005c4a:	4b18      	ldr	r3, [pc, #96]	@ (8005cac <UART4_IRQHandler+0xdc>)
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	b2da      	uxtb	r2, r3
 8005c52:	4b16      	ldr	r3, [pc, #88]	@ (8005cac <UART4_IRQHandler+0xdc>)
 8005c54:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt = 0;
			break;
 8005c56:	e020      	b.n	8005c9a <UART4_IRQHandler+0xca>
				cnt = 0;
 8005c58:	4b14      	ldr	r3, [pc, #80]	@ (8005cac <UART4_IRQHandler+0xdc>)
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	701a      	strb	r2, [r3, #0]
			break;
 8005c5e:	e01c      	b.n	8005c9a <UART4_IRQHandler+0xca>
		case 35:
			m8n_rx_buf[cnt] = uart4_rx_data;
 8005c60:	4b12      	ldr	r3, [pc, #72]	@ (8005cac <UART4_IRQHandler+0xdc>)
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	461a      	mov	r2, r3
 8005c66:	4b0f      	ldr	r3, [pc, #60]	@ (8005ca4 <UART4_IRQHandler+0xd4>)
 8005c68:	7819      	ldrb	r1, [r3, #0]
 8005c6a:	4b11      	ldr	r3, [pc, #68]	@ (8005cb0 <UART4_IRQHandler+0xe0>)
 8005c6c:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8005c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8005cac <UART4_IRQHandler+0xdc>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	701a      	strb	r2, [r3, #0]
			m8n_rx_cplt_flag = 1;
 8005c74:	4b0f      	ldr	r3, [pc, #60]	@ (8005cb4 <UART4_IRQHandler+0xe4>)
 8005c76:	2201      	movs	r2, #1
 8005c78:	701a      	strb	r2, [r3, #0]
			break;
 8005c7a:	e00e      	b.n	8005c9a <UART4_IRQHandler+0xca>
		default:
			m8n_rx_buf[cnt] = uart4_rx_data;
 8005c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8005cac <UART4_IRQHandler+0xdc>)
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	461a      	mov	r2, r3
 8005c82:	4b08      	ldr	r3, [pc, #32]	@ (8005ca4 <UART4_IRQHandler+0xd4>)
 8005c84:	7819      	ldrb	r1, [r3, #0]
 8005c86:	4b0a      	ldr	r3, [pc, #40]	@ (8005cb0 <UART4_IRQHandler+0xe0>)
 8005c88:	5499      	strb	r1, [r3, r2]
			cnt++;
 8005c8a:	4b08      	ldr	r3, [pc, #32]	@ (8005cac <UART4_IRQHandler+0xdc>)
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	4b06      	ldr	r3, [pc, #24]	@ (8005cac <UART4_IRQHandler+0xdc>)
 8005c94:	701a      	strb	r2, [r3, #0]
			break;
 8005c96:	e000      	b.n	8005c9a <UART4_IRQHandler+0xca>
			break;
 8005c98:	bf00      	nop
	}
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8005c9a:	bf00      	nop
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	40004c00 	.word	0x40004c00
 8005ca4:	200004da 	.word	0x200004da
 8005ca8:	200004d9 	.word	0x200004d9
 8005cac:	2000052d 	.word	0x2000052d
 8005cb0:	200004e0 	.word	0x200004e0
 8005cb4:	20000504 	.word	0x20000504

08005cb8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	static unsigned char cnt = 0;
	if(LL_USART_IsActiveFlag_RXNE(UART5))
 8005cbc:	4832      	ldr	r0, [pc, #200]	@ (8005d88 <UART5_IRQHandler+0xd0>)
 8005cbe:	f7ff ff20 	bl	8005b02 <LL_USART_IsActiveFlag_RXNE>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d05c      	beq.n	8005d82 <UART5_IRQHandler+0xca>
	{
		LL_USART_ClearFlag_RXNE(UART5);
 8005cc8:	482f      	ldr	r0, [pc, #188]	@ (8005d88 <UART5_IRQHandler+0xd0>)
 8005cca:	f7ff ff2d 	bl	8005b28 <LL_USART_ClearFlag_RXNE>
		uart5_rx_data = LL_USART_ReceiveData8(UART5);
 8005cce:	482e      	ldr	r0, [pc, #184]	@ (8005d88 <UART5_IRQHandler+0xd0>)
 8005cd0:	f7ff ff38 	bl	8005b44 <LL_USART_ReceiveData8>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	4b2c      	ldr	r3, [pc, #176]	@ (8005d8c <UART5_IRQHandler+0xd4>)
 8005cda:	701a      	strb	r2, [r3, #0]
		uart5_rx_flag = 1;
 8005cdc:	4b2c      	ldr	r3, [pc, #176]	@ (8005d90 <UART5_IRQHandler+0xd8>)
 8005cde:	2201      	movs	r2, #1
 8005ce0:	701a      	strb	r2, [r3, #0]

		switch(cnt)
 8005ce2:	4b2c      	ldr	r3, [pc, #176]	@ (8005d94 <UART5_IRQHandler+0xdc>)
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	2b1f      	cmp	r3, #31
 8005ce8:	d02e      	beq.n	8005d48 <UART5_IRQHandler+0x90>
 8005cea:	2b1f      	cmp	r3, #31
 8005cec:	dc3a      	bgt.n	8005d64 <UART5_IRQHandler+0xac>
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d002      	beq.n	8005cf8 <UART5_IRQHandler+0x40>
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d012      	beq.n	8005d1c <UART5_IRQHandler+0x64>
 8005cf6:	e035      	b.n	8005d64 <UART5_IRQHandler+0xac>
		{
		case 0:
			if(uart5_rx_data == 0x20)
 8005cf8:	4b24      	ldr	r3, [pc, #144]	@ (8005d8c <UART5_IRQHandler+0xd4>)
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	2b20      	cmp	r3, #32
 8005cfe:	d13f      	bne.n	8005d80 <UART5_IRQHandler+0xc8>
			{
				ibus_rx_buf[cnt] = uart5_rx_data;
 8005d00:	4b24      	ldr	r3, [pc, #144]	@ (8005d94 <UART5_IRQHandler+0xdc>)
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	461a      	mov	r2, r3
 8005d06:	4b21      	ldr	r3, [pc, #132]	@ (8005d8c <UART5_IRQHandler+0xd4>)
 8005d08:	7819      	ldrb	r1, [r3, #0]
 8005d0a:	4b23      	ldr	r3, [pc, #140]	@ (8005d98 <UART5_IRQHandler+0xe0>)
 8005d0c:	5499      	strb	r1, [r3, r2]
				cnt++;
 8005d0e:	4b21      	ldr	r3, [pc, #132]	@ (8005d94 <UART5_IRQHandler+0xdc>)
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	3301      	adds	r3, #1
 8005d14:	b2da      	uxtb	r2, r3
 8005d16:	4b1f      	ldr	r3, [pc, #124]	@ (8005d94 <UART5_IRQHandler+0xdc>)
 8005d18:	701a      	strb	r2, [r3, #0]
			}
			break;
 8005d1a:	e031      	b.n	8005d80 <UART5_IRQHandler+0xc8>
		case 1:
			if(uart5_rx_data == 0x40)
 8005d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8005d8c <UART5_IRQHandler+0xd4>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b40      	cmp	r3, #64	@ 0x40
 8005d22:	d10d      	bne.n	8005d40 <UART5_IRQHandler+0x88>
			{
				ibus_rx_buf[cnt] = uart5_rx_data;
 8005d24:	4b1b      	ldr	r3, [pc, #108]	@ (8005d94 <UART5_IRQHandler+0xdc>)
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	461a      	mov	r2, r3
 8005d2a:	4b18      	ldr	r3, [pc, #96]	@ (8005d8c <UART5_IRQHandler+0xd4>)
 8005d2c:	7819      	ldrb	r1, [r3, #0]
 8005d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8005d98 <UART5_IRQHandler+0xe0>)
 8005d30:	5499      	strb	r1, [r3, r2]
				cnt++;
 8005d32:	4b18      	ldr	r3, [pc, #96]	@ (8005d94 <UART5_IRQHandler+0xdc>)
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	3301      	adds	r3, #1
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	4b16      	ldr	r3, [pc, #88]	@ (8005d94 <UART5_IRQHandler+0xdc>)
 8005d3c:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt = 0;
			break;
 8005d3e:	e020      	b.n	8005d82 <UART5_IRQHandler+0xca>
				cnt = 0;
 8005d40:	4b14      	ldr	r3, [pc, #80]	@ (8005d94 <UART5_IRQHandler+0xdc>)
 8005d42:	2200      	movs	r2, #0
 8005d44:	701a      	strb	r2, [r3, #0]
			break;
 8005d46:	e01c      	b.n	8005d82 <UART5_IRQHandler+0xca>
		case 31:
			ibus_rx_buf[cnt] = uart5_rx_data;
 8005d48:	4b12      	ldr	r3, [pc, #72]	@ (8005d94 <UART5_IRQHandler+0xdc>)
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8005d8c <UART5_IRQHandler+0xd4>)
 8005d50:	7819      	ldrb	r1, [r3, #0]
 8005d52:	4b11      	ldr	r3, [pc, #68]	@ (8005d98 <UART5_IRQHandler+0xe0>)
 8005d54:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8005d56:	4b0f      	ldr	r3, [pc, #60]	@ (8005d94 <UART5_IRQHandler+0xdc>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 8005d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8005d9c <UART5_IRQHandler+0xe4>)
 8005d5e:	2201      	movs	r2, #1
 8005d60:	701a      	strb	r2, [r3, #0]
			break;
 8005d62:	e00e      	b.n	8005d82 <UART5_IRQHandler+0xca>
		default:
			ibus_rx_buf[cnt] = uart5_rx_data;
 8005d64:	4b0b      	ldr	r3, [pc, #44]	@ (8005d94 <UART5_IRQHandler+0xdc>)
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	461a      	mov	r2, r3
 8005d6a:	4b08      	ldr	r3, [pc, #32]	@ (8005d8c <UART5_IRQHandler+0xd4>)
 8005d6c:	7819      	ldrb	r1, [r3, #0]
 8005d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8005d98 <UART5_IRQHandler+0xe0>)
 8005d70:	5499      	strb	r1, [r3, r2]
			cnt++;
 8005d72:	4b08      	ldr	r3, [pc, #32]	@ (8005d94 <UART5_IRQHandler+0xdc>)
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	3301      	adds	r3, #1
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	4b06      	ldr	r3, [pc, #24]	@ (8005d94 <UART5_IRQHandler+0xdc>)
 8005d7c:	701a      	strb	r2, [r3, #0]
			break;
 8005d7e:	e000      	b.n	8005d82 <UART5_IRQHandler+0xca>
			break;
 8005d80:	bf00      	nop
	}
  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8005d82:	bf00      	nop
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	40005000 	.word	0x40005000
 8005d8c:	200004dc 	.word	0x200004dc
 8005d90:	200004db 	.word	0x200004db
 8005d94:	2000052e 	.word	0x2000052e
 8005d98:	20000508 	.word	0x20000508
 8005d9c:	20000528 	.word	0x20000528

08005da0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	static unsigned char tim7_20ms_count = 0;
	static unsigned char tim7_100ms_count = 0;
	static unsigned short tim7_1000ms_count = 0;
	if(LL_TIM_IsActiveFlag_UPDATE(TIM7))
 8005da4:	481d      	ldr	r0, [pc, #116]	@ (8005e1c <TIM7_IRQHandler+0x7c>)
 8005da6:	f7ff fe99 	bl	8005adc <LL_TIM_IsActiveFlag_UPDATE>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d033      	beq.n	8005e18 <TIM7_IRQHandler+0x78>
	{
		LL_TIM_ClearFlag_UPDATE(TIM7);
 8005db0:	481a      	ldr	r0, [pc, #104]	@ (8005e1c <TIM7_IRQHandler+0x7c>)
 8005db2:	f7ff fe85 	bl	8005ac0 <LL_TIM_ClearFlag_UPDATE>
		tim7_20ms_count++;
 8005db6:	4b1a      	ldr	r3, [pc, #104]	@ (8005e20 <TIM7_IRQHandler+0x80>)
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	4b18      	ldr	r3, [pc, #96]	@ (8005e20 <TIM7_IRQHandler+0x80>)
 8005dc0:	701a      	strb	r2, [r3, #0]
		if(tim7_20ms_count == 20)
 8005dc2:	4b17      	ldr	r3, [pc, #92]	@ (8005e20 <TIM7_IRQHandler+0x80>)
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	2b14      	cmp	r3, #20
 8005dc8:	d105      	bne.n	8005dd6 <TIM7_IRQHandler+0x36>
		{
			tim7_20ms_count = 0;
 8005dca:	4b15      	ldr	r3, [pc, #84]	@ (8005e20 <TIM7_IRQHandler+0x80>)
 8005dcc:	2200      	movs	r2, #0
 8005dce:	701a      	strb	r2, [r3, #0]
			tim7_20ms_flag = 1;
 8005dd0:	4b14      	ldr	r3, [pc, #80]	@ (8005e24 <TIM7_IRQHandler+0x84>)
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	701a      	strb	r2, [r3, #0]
		}

		tim7_100ms_count++;
 8005dd6:	4b14      	ldr	r3, [pc, #80]	@ (8005e28 <TIM7_IRQHandler+0x88>)
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	b2da      	uxtb	r2, r3
 8005dde:	4b12      	ldr	r3, [pc, #72]	@ (8005e28 <TIM7_IRQHandler+0x88>)
 8005de0:	701a      	strb	r2, [r3, #0]
		if(tim7_100ms_count == 100)
 8005de2:	4b11      	ldr	r3, [pc, #68]	@ (8005e28 <TIM7_IRQHandler+0x88>)
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	2b64      	cmp	r3, #100	@ 0x64
 8005de8:	d105      	bne.n	8005df6 <TIM7_IRQHandler+0x56>
		{
			tim7_100ms_count = 0;
 8005dea:	4b0f      	ldr	r3, [pc, #60]	@ (8005e28 <TIM7_IRQHandler+0x88>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	701a      	strb	r2, [r3, #0]
			tim7_100ms_flag = 1;
 8005df0:	4b0e      	ldr	r3, [pc, #56]	@ (8005e2c <TIM7_IRQHandler+0x8c>)
 8005df2:	2201      	movs	r2, #1
 8005df4:	701a      	strb	r2, [r3, #0]
		}

		tim7_1000ms_count++;
 8005df6:	4b0e      	ldr	r3, [pc, #56]	@ (8005e30 <TIM7_IRQHandler+0x90>)
 8005df8:	881b      	ldrh	r3, [r3, #0]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8005e30 <TIM7_IRQHandler+0x90>)
 8005e00:	801a      	strh	r2, [r3, #0]
		if(tim7_1000ms_count == 1000)
 8005e02:	4b0b      	ldr	r3, [pc, #44]	@ (8005e30 <TIM7_IRQHandler+0x90>)
 8005e04:	881b      	ldrh	r3, [r3, #0]
 8005e06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e0a:	d105      	bne.n	8005e18 <TIM7_IRQHandler+0x78>
		{
			tim7_1000ms_count = 0;
 8005e0c:	4b08      	ldr	r3, [pc, #32]	@ (8005e30 <TIM7_IRQHandler+0x90>)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	801a      	strh	r2, [r3, #0]
			tim7_1000ms_flag = 1;
 8005e12:	4b08      	ldr	r3, [pc, #32]	@ (8005e34 <TIM7_IRQHandler+0x94>)
 8005e14:	2201      	movs	r2, #1
 8005e16:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM7_IRQn 0 */
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005e18:	bf00      	nop
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	40001400 	.word	0x40001400
 8005e20:	2000052f 	.word	0x2000052f
 8005e24:	2000052a 	.word	0x2000052a
 8005e28:	20000530 	.word	0x20000530
 8005e2c:	2000052b 	.word	0x2000052b
 8005e30:	20000532 	.word	0x20000532
 8005e34:	2000052c 	.word	0x2000052c

08005e38 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_adc1);
 8005e3c:	4802      	ldr	r0, [pc, #8]	@ (8005e48 <DMA2_Stream0_IRQHandler+0x10>)
 8005e3e:	f001 fde1 	bl	8007a04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005e42:	bf00      	nop
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	20000394 	.word	0x20000394

08005e4c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6))
 8005e50:	480a      	ldr	r0, [pc, #40]	@ (8005e7c <USART6_IRQHandler+0x30>)
 8005e52:	f7ff fe56 	bl	8005b02 <LL_USART_IsActiveFlag_RXNE>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00c      	beq.n	8005e76 <USART6_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART6);
 8005e5c:	4807      	ldr	r0, [pc, #28]	@ (8005e7c <USART6_IRQHandler+0x30>)
 8005e5e:	f7ff fe63 	bl	8005b28 <LL_USART_ClearFlag_RXNE>
		uart6_rx_data = LL_USART_ReceiveData8(USART6);
 8005e62:	4806      	ldr	r0, [pc, #24]	@ (8005e7c <USART6_IRQHandler+0x30>)
 8005e64:	f7ff fe6e 	bl	8005b44 <LL_USART_ReceiveData8>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	4b04      	ldr	r3, [pc, #16]	@ (8005e80 <USART6_IRQHandler+0x34>)
 8005e6e:	701a      	strb	r2, [r3, #0]
		uart6_rx_flag = 1;
 8005e70:	4b04      	ldr	r3, [pc, #16]	@ (8005e84 <USART6_IRQHandler+0x38>)
 8005e72:	2201      	movs	r2, #1
 8005e74:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8005e76:	bf00      	nop
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	40011400 	.word	0x40011400
 8005e80:	200004d8 	.word	0x200004d8
 8005e84:	200004d7 	.word	0x200004d7

08005e88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	af00      	add	r7, sp, #0
  return 1;
 8005e8c:	2301      	movs	r3, #1
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <_kill>:

int _kill(int pid, int sig)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005ea2:	f006 ff07 	bl	800ccb4 <__errno>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2216      	movs	r2, #22
 8005eaa:	601a      	str	r2, [r3, #0]
  return -1;
 8005eac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3708      	adds	r7, #8
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <_exit>:

void _exit (int status)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f7ff ffe7 	bl	8005e98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005eca:	bf00      	nop
 8005ecc:	e7fd      	b.n	8005eca <_exit+0x12>

08005ece <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b086      	sub	sp, #24
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	60f8      	str	r0, [r7, #12]
 8005ed6:	60b9      	str	r1, [r7, #8]
 8005ed8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005eda:	2300      	movs	r3, #0
 8005edc:	617b      	str	r3, [r7, #20]
 8005ede:	e00a      	b.n	8005ef6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005ee0:	f3af 8000 	nop.w
 8005ee4:	4601      	mov	r1, r0
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	1c5a      	adds	r2, r3, #1
 8005eea:	60ba      	str	r2, [r7, #8]
 8005eec:	b2ca      	uxtb	r2, r1
 8005eee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	dbf0      	blt.n	8005ee0 <_read+0x12>
  }

  return len;
 8005efe:	687b      	ldr	r3, [r7, #4]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3718      	adds	r7, #24
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <_close>:
  }
  return len;
}

int _close(int file)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005f10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005f30:	605a      	str	r2, [r3, #4]
  return 0;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <_isatty>:

int _isatty(int file)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005f48:	2301      	movs	r3, #1
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b085      	sub	sp, #20
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	60f8      	str	r0, [r7, #12]
 8005f5e:	60b9      	str	r1, [r7, #8]
 8005f60:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005f78:	4a14      	ldr	r2, [pc, #80]	@ (8005fcc <_sbrk+0x5c>)
 8005f7a:	4b15      	ldr	r3, [pc, #84]	@ (8005fd0 <_sbrk+0x60>)
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005f84:	4b13      	ldr	r3, [pc, #76]	@ (8005fd4 <_sbrk+0x64>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d102      	bne.n	8005f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005f8c:	4b11      	ldr	r3, [pc, #68]	@ (8005fd4 <_sbrk+0x64>)
 8005f8e:	4a12      	ldr	r2, [pc, #72]	@ (8005fd8 <_sbrk+0x68>)
 8005f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005f92:	4b10      	ldr	r3, [pc, #64]	@ (8005fd4 <_sbrk+0x64>)
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4413      	add	r3, r2
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d207      	bcs.n	8005fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005fa0:	f006 fe88 	bl	800ccb4 <__errno>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	220c      	movs	r2, #12
 8005fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005faa:	f04f 33ff 	mov.w	r3, #4294967295
 8005fae:	e009      	b.n	8005fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005fb0:	4b08      	ldr	r3, [pc, #32]	@ (8005fd4 <_sbrk+0x64>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005fb6:	4b07      	ldr	r3, [pc, #28]	@ (8005fd4 <_sbrk+0x64>)
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	4a05      	ldr	r2, [pc, #20]	@ (8005fd4 <_sbrk+0x64>)
 8005fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3718      	adds	r7, #24
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	20020000 	.word	0x20020000
 8005fd0:	00000400 	.word	0x00000400
 8005fd4:	20000534 	.word	0x20000534
 8005fd8:	200006d0 	.word	0x200006d0

08005fdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005fe0:	4b06      	ldr	r3, [pc, #24]	@ (8005ffc <SystemInit+0x20>)
 8005fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fe6:	4a05      	ldr	r2, [pc, #20]	@ (8005ffc <SystemInit+0x20>)
 8005fe8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005fec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005ff0:	bf00      	nop
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	e000ed00 	.word	0xe000ed00

08006000 <__NVIC_GetPriorityGrouping>:
{
 8006000:	b480      	push	{r7}
 8006002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006004:	4b04      	ldr	r3, [pc, #16]	@ (8006018 <__NVIC_GetPriorityGrouping+0x18>)
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	0a1b      	lsrs	r3, r3, #8
 800600a:	f003 0307 	and.w	r3, r3, #7
}
 800600e:	4618      	mov	r0, r3
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr
 8006018:	e000ed00 	.word	0xe000ed00

0800601c <__NVIC_EnableIRQ>:
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	4603      	mov	r3, r0
 8006024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800602a:	2b00      	cmp	r3, #0
 800602c:	db0b      	blt.n	8006046 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800602e:	79fb      	ldrb	r3, [r7, #7]
 8006030:	f003 021f 	and.w	r2, r3, #31
 8006034:	4907      	ldr	r1, [pc, #28]	@ (8006054 <__NVIC_EnableIRQ+0x38>)
 8006036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800603a:	095b      	lsrs	r3, r3, #5
 800603c:	2001      	movs	r0, #1
 800603e:	fa00 f202 	lsl.w	r2, r0, r2
 8006042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006046:	bf00      	nop
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	e000e100 	.word	0xe000e100

08006058 <__NVIC_SetPriority>:
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	4603      	mov	r3, r0
 8006060:	6039      	str	r1, [r7, #0]
 8006062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006068:	2b00      	cmp	r3, #0
 800606a:	db0a      	blt.n	8006082 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	b2da      	uxtb	r2, r3
 8006070:	490c      	ldr	r1, [pc, #48]	@ (80060a4 <__NVIC_SetPriority+0x4c>)
 8006072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006076:	0112      	lsls	r2, r2, #4
 8006078:	b2d2      	uxtb	r2, r2
 800607a:	440b      	add	r3, r1
 800607c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006080:	e00a      	b.n	8006098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	b2da      	uxtb	r2, r3
 8006086:	4908      	ldr	r1, [pc, #32]	@ (80060a8 <__NVIC_SetPriority+0x50>)
 8006088:	79fb      	ldrb	r3, [r7, #7]
 800608a:	f003 030f 	and.w	r3, r3, #15
 800608e:	3b04      	subs	r3, #4
 8006090:	0112      	lsls	r2, r2, #4
 8006092:	b2d2      	uxtb	r2, r2
 8006094:	440b      	add	r3, r1
 8006096:	761a      	strb	r2, [r3, #24]
}
 8006098:	bf00      	nop
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr
 80060a4:	e000e100 	.word	0xe000e100
 80060a8:	e000ed00 	.word	0xe000ed00

080060ac <NVIC_EncodePriority>:
{
 80060ac:	b480      	push	{r7}
 80060ae:	b089      	sub	sp, #36	@ 0x24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f003 0307 	and.w	r3, r3, #7
 80060be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	f1c3 0307 	rsb	r3, r3, #7
 80060c6:	2b04      	cmp	r3, #4
 80060c8:	bf28      	it	cs
 80060ca:	2304      	movcs	r3, #4
 80060cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	3304      	adds	r3, #4
 80060d2:	2b06      	cmp	r3, #6
 80060d4:	d902      	bls.n	80060dc <NVIC_EncodePriority+0x30>
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	3b03      	subs	r3, #3
 80060da:	e000      	b.n	80060de <NVIC_EncodePriority+0x32>
 80060dc:	2300      	movs	r3, #0
 80060de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060e0:	f04f 32ff 	mov.w	r2, #4294967295
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ea:	43da      	mvns	r2, r3
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	401a      	ands	r2, r3
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80060f4:	f04f 31ff 	mov.w	r1, #4294967295
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	fa01 f303 	lsl.w	r3, r1, r3
 80060fe:	43d9      	mvns	r1, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006104:	4313      	orrs	r3, r2
}
 8006106:	4618      	mov	r0, r3
 8006108:	3724      	adds	r7, #36	@ 0x24
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <LL_TIM_EnableARRPreload>:
{
 8006112:	b480      	push	{r7}
 8006114:	b083      	sub	sp, #12
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	601a      	str	r2, [r3, #0]
}
 8006126:	bf00      	nop
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
	...

08006134 <LL_TIM_OC_EnableFast>:
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d01c      	beq.n	800617e <LL_TIM_OC_EnableFast+0x4a>
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	2b04      	cmp	r3, #4
 8006148:	d017      	beq.n	800617a <LL_TIM_OC_EnableFast+0x46>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b10      	cmp	r3, #16
 800614e:	d012      	beq.n	8006176 <LL_TIM_OC_EnableFast+0x42>
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	2b40      	cmp	r3, #64	@ 0x40
 8006154:	d00d      	beq.n	8006172 <LL_TIM_OC_EnableFast+0x3e>
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800615c:	d007      	beq.n	800616e <LL_TIM_OC_EnableFast+0x3a>
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006164:	d101      	bne.n	800616a <LL_TIM_OC_EnableFast+0x36>
 8006166:	2305      	movs	r3, #5
 8006168:	e00a      	b.n	8006180 <LL_TIM_OC_EnableFast+0x4c>
 800616a:	2306      	movs	r3, #6
 800616c:	e008      	b.n	8006180 <LL_TIM_OC_EnableFast+0x4c>
 800616e:	2304      	movs	r3, #4
 8006170:	e006      	b.n	8006180 <LL_TIM_OC_EnableFast+0x4c>
 8006172:	2303      	movs	r3, #3
 8006174:	e004      	b.n	8006180 <LL_TIM_OC_EnableFast+0x4c>
 8006176:	2302      	movs	r3, #2
 8006178:	e002      	b.n	8006180 <LL_TIM_OC_EnableFast+0x4c>
 800617a:	2301      	movs	r3, #1
 800617c:	e000      	b.n	8006180 <LL_TIM_OC_EnableFast+0x4c>
 800617e:	2300      	movs	r3, #0
 8006180:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	3318      	adds	r3, #24
 8006186:	4619      	mov	r1, r3
 8006188:	7bfb      	ldrb	r3, [r7, #15]
 800618a:	4a0a      	ldr	r2, [pc, #40]	@ (80061b4 <LL_TIM_OC_EnableFast+0x80>)
 800618c:	5cd3      	ldrb	r3, [r2, r3]
 800618e:	440b      	add	r3, r1
 8006190:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	7bfb      	ldrb	r3, [r7, #15]
 8006198:	4907      	ldr	r1, [pc, #28]	@ (80061b8 <LL_TIM_OC_EnableFast+0x84>)
 800619a:	5ccb      	ldrb	r3, [r1, r3]
 800619c:	4619      	mov	r1, r3
 800619e:	2304      	movs	r3, #4
 80061a0:	408b      	lsls	r3, r1
 80061a2:	431a      	orrs	r2, r3
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	601a      	str	r2, [r3, #0]
}
 80061a8:	bf00      	nop
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr
 80061b4:	0800f9ec 	.word	0x0800f9ec
 80061b8:	0800f9f4 	.word	0x0800f9f4

080061bc <LL_TIM_OC_EnablePreload>:
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d01c      	beq.n	8006206 <LL_TIM_OC_EnablePreload+0x4a>
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	2b04      	cmp	r3, #4
 80061d0:	d017      	beq.n	8006202 <LL_TIM_OC_EnablePreload+0x46>
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	2b10      	cmp	r3, #16
 80061d6:	d012      	beq.n	80061fe <LL_TIM_OC_EnablePreload+0x42>
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	2b40      	cmp	r3, #64	@ 0x40
 80061dc:	d00d      	beq.n	80061fa <LL_TIM_OC_EnablePreload+0x3e>
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061e4:	d007      	beq.n	80061f6 <LL_TIM_OC_EnablePreload+0x3a>
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061ec:	d101      	bne.n	80061f2 <LL_TIM_OC_EnablePreload+0x36>
 80061ee:	2305      	movs	r3, #5
 80061f0:	e00a      	b.n	8006208 <LL_TIM_OC_EnablePreload+0x4c>
 80061f2:	2306      	movs	r3, #6
 80061f4:	e008      	b.n	8006208 <LL_TIM_OC_EnablePreload+0x4c>
 80061f6:	2304      	movs	r3, #4
 80061f8:	e006      	b.n	8006208 <LL_TIM_OC_EnablePreload+0x4c>
 80061fa:	2303      	movs	r3, #3
 80061fc:	e004      	b.n	8006208 <LL_TIM_OC_EnablePreload+0x4c>
 80061fe:	2302      	movs	r3, #2
 8006200:	e002      	b.n	8006208 <LL_TIM_OC_EnablePreload+0x4c>
 8006202:	2301      	movs	r3, #1
 8006204:	e000      	b.n	8006208 <LL_TIM_OC_EnablePreload+0x4c>
 8006206:	2300      	movs	r3, #0
 8006208:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	3318      	adds	r3, #24
 800620e:	4619      	mov	r1, r3
 8006210:	7bfb      	ldrb	r3, [r7, #15]
 8006212:	4a0a      	ldr	r2, [pc, #40]	@ (800623c <LL_TIM_OC_EnablePreload+0x80>)
 8006214:	5cd3      	ldrb	r3, [r2, r3]
 8006216:	440b      	add	r3, r1
 8006218:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	7bfb      	ldrb	r3, [r7, #15]
 8006220:	4907      	ldr	r1, [pc, #28]	@ (8006240 <LL_TIM_OC_EnablePreload+0x84>)
 8006222:	5ccb      	ldrb	r3, [r1, r3]
 8006224:	4619      	mov	r1, r3
 8006226:	2308      	movs	r3, #8
 8006228:	408b      	lsls	r3, r1
 800622a:	431a      	orrs	r2, r3
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	601a      	str	r2, [r3, #0]
}
 8006230:	bf00      	nop
 8006232:	3714      	adds	r7, #20
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	0800f9ec 	.word	0x0800f9ec
 8006240:	0800f9f4 	.word	0x0800f9f4

08006244 <LL_TIM_SetClockSource>:
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006256:	f023 0307 	bic.w	r3, r3, #7
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	431a      	orrs	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	609a      	str	r2, [r3, #8]
}
 8006262:	bf00      	nop
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <LL_TIM_SetTriggerOutput>:
{
 800626e:	b480      	push	{r7}
 8006270:	b083      	sub	sp, #12
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
 8006276:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	431a      	orrs	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	605a      	str	r2, [r3, #4]
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <LL_TIM_DisableMasterSlaveMode>:
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	609a      	str	r2, [r3, #8]
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <LL_AHB1_GRP1_EnableClock>:
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80062bc:	4b08      	ldr	r3, [pc, #32]	@ (80062e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80062be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062c0:	4907      	ldr	r1, [pc, #28]	@ (80062e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80062c8:	4b05      	ldr	r3, [pc, #20]	@ (80062e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80062ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4013      	ands	r3, r2
 80062d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80062d2:	68fb      	ldr	r3, [r7, #12]
}
 80062d4:	bf00      	nop
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	40023800 	.word	0x40023800

080062e4 <LL_APB1_GRP1_EnableClock>:
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80062ec:	4b08      	ldr	r3, [pc, #32]	@ (8006310 <LL_APB1_GRP1_EnableClock+0x2c>)
 80062ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80062f0:	4907      	ldr	r1, [pc, #28]	@ (8006310 <LL_APB1_GRP1_EnableClock+0x2c>)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80062f8:	4b05      	ldr	r3, [pc, #20]	@ (8006310 <LL_APB1_GRP1_EnableClock+0x2c>)
 80062fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4013      	ands	r3, r2
 8006300:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006302:	68fb      	ldr	r3, [r7, #12]
}
 8006304:	bf00      	nop
 8006306:	3714      	adds	r7, #20
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr
 8006310:	40023800 	.word	0x40023800

08006314 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b094      	sub	sp, #80	@ 0x50
 8006318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800631a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800631e:	2200      	movs	r2, #0
 8006320:	601a      	str	r2, [r3, #0]
 8006322:	605a      	str	r2, [r3, #4]
 8006324:	609a      	str	r2, [r3, #8]
 8006326:	60da      	str	r2, [r3, #12]
 8006328:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800632a:	f107 031c 	add.w	r3, r7, #28
 800632e:	2220      	movs	r2, #32
 8006330:	2100      	movs	r1, #0
 8006332:	4618      	mov	r0, r3
 8006334:	f006 fc6c 	bl	800cc10 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006338:	1d3b      	adds	r3, r7, #4
 800633a:	2200      	movs	r2, #0
 800633c:	601a      	str	r2, [r3, #0]
 800633e:	605a      	str	r2, [r3, #4]
 8006340:	609a      	str	r2, [r3, #8]
 8006342:	60da      	str	r2, [r3, #12]
 8006344:	611a      	str	r2, [r3, #16]
 8006346:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8006348:	2002      	movs	r0, #2
 800634a:	f7ff ffcb 	bl	80062e4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 1000-LL_TIM_IC_FILTER_FDIV1_N2;
 800634e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006352:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8006354:	2300      	movs	r3, #0
 8006356:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 21-LL_TIM_IC_FILTER_FDIV1_N2;
 8006358:	4b25      	ldr	r3, [pc, #148]	@ (80063f0 <MX_TIM3_Init+0xdc>)
 800635a:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800635c:	2300      	movs	r3, #0
 800635e:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8006360:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006364:	4619      	mov	r1, r3
 8006366:	4823      	ldr	r0, [pc, #140]	@ (80063f4 <MX_TIM3_Init+0xe0>)
 8006368:	f005 f888 	bl	800b47c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 800636c:	4821      	ldr	r0, [pc, #132]	@ (80063f4 <MX_TIM3_Init+0xe0>)
 800636e:	f7ff fed0 	bl	8006112 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8006372:	2100      	movs	r1, #0
 8006374:	481f      	ldr	r0, [pc, #124]	@ (80063f4 <MX_TIM3_Init+0xe0>)
 8006376:	f7ff ff65 	bl	8006244 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 800637a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800637e:	481d      	ldr	r0, [pc, #116]	@ (80063f4 <MX_TIM3_Init+0xe0>)
 8006380:	f7ff ff1c 	bl	80061bc <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8006384:	2360      	movs	r3, #96	@ 0x60
 8006386:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8006388:	2300      	movs	r3, #0
 800638a:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800638c:	2300      	movs	r3, #0
 800638e:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 8006390:	230a      	movs	r3, #10
 8006392:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8006394:	2300      	movs	r3, #0
 8006396:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8006398:	f107 031c 	add.w	r3, r7, #28
 800639c:	461a      	mov	r2, r3
 800639e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80063a2:	4814      	ldr	r0, [pc, #80]	@ (80063f4 <MX_TIM3_Init+0xe0>)
 80063a4:	f005 f904 	bl	800b5b0 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 80063a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80063ac:	4811      	ldr	r0, [pc, #68]	@ (80063f4 <MX_TIM3_Init+0xe0>)
 80063ae:	f7ff fec1 	bl	8006134 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80063b2:	2100      	movs	r1, #0
 80063b4:	480f      	ldr	r0, [pc, #60]	@ (80063f4 <MX_TIM3_Init+0xe0>)
 80063b6:	f7ff ff5a 	bl	800626e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80063ba:	480e      	ldr	r0, [pc, #56]	@ (80063f4 <MX_TIM3_Init+0xe0>)
 80063bc:	f7ff ff6a 	bl	8006294 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80063c0:	2002      	movs	r0, #2
 80063c2:	f7ff ff77 	bl	80062b4 <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80063c6:	2302      	movs	r3, #2
 80063c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80063ca:	2302      	movs	r3, #2
 80063cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80063ce:	2300      	movs	r3, #0
 80063d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80063d2:	2300      	movs	r3, #0
 80063d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80063d6:	2300      	movs	r3, #0
 80063d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80063da:	2302      	movs	r3, #2
 80063dc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063de:	1d3b      	adds	r3, r7, #4
 80063e0:	4619      	mov	r1, r3
 80063e2:	4805      	ldr	r0, [pc, #20]	@ (80063f8 <MX_TIM3_Init+0xe4>)
 80063e4:	f004 fda7 	bl	800af36 <LL_GPIO_Init>

}
 80063e8:	bf00      	nop
 80063ea:	3750      	adds	r7, #80	@ 0x50
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	fff00015 	.word	0xfff00015
 80063f4:	40000400 	.word	0x40000400
 80063f8:	40020400 	.word	0x40020400

080063fc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b094      	sub	sp, #80	@ 0x50
 8006400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8006402:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006406:	2200      	movs	r2, #0
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	605a      	str	r2, [r3, #4]
 800640c:	609a      	str	r2, [r3, #8]
 800640e:	60da      	str	r2, [r3, #12]
 8006410:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8006412:	f107 031c 	add.w	r3, r7, #28
 8006416:	2220      	movs	r2, #32
 8006418:	2100      	movs	r1, #0
 800641a:	4618      	mov	r0, r3
 800641c:	f006 fbf8 	bl	800cc10 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006420:	1d3b      	adds	r3, r7, #4
 8006422:	2200      	movs	r2, #0
 8006424:	601a      	str	r2, [r3, #0]
 8006426:	605a      	str	r2, [r3, #4]
 8006428:	609a      	str	r2, [r3, #8]
 800642a:	60da      	str	r2, [r3, #12]
 800642c:	611a      	str	r2, [r3, #16]
 800642e:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 8006430:	2008      	movs	r0, #8
 8006432:	f7ff ff57 	bl	80062e4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8006436:	2300      	movs	r3, #0
 8006438:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800643a:	2300      	movs	r3, #0
 800643c:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 41999;
 800643e:	f24a 430f 	movw	r3, #41999	@ 0xa40f
 8006442:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8006444:	2300      	movs	r3, #0
 8006446:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 8006448:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800644c:	4619      	mov	r1, r3
 800644e:	483a      	ldr	r0, [pc, #232]	@ (8006538 <MX_TIM5_Init+0x13c>)
 8006450:	f005 f814 	bl	800b47c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM5);
 8006454:	4838      	ldr	r0, [pc, #224]	@ (8006538 <MX_TIM5_Init+0x13c>)
 8006456:	f7ff fe5c 	bl	8006112 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 800645a:	2100      	movs	r1, #0
 800645c:	4836      	ldr	r0, [pc, #216]	@ (8006538 <MX_TIM5_Init+0x13c>)
 800645e:	f7ff fef1 	bl	8006244 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH1);
 8006462:	2101      	movs	r1, #1
 8006464:	4834      	ldr	r0, [pc, #208]	@ (8006538 <MX_TIM5_Init+0x13c>)
 8006466:	f7ff fea9 	bl	80061bc <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800646a:	2360      	movs	r3, #96	@ 0x60
 800646c:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800646e:	2300      	movs	r3, #0
 8006470:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8006472:	2300      	movs	r3, #0
 8006474:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8006476:	2300      	movs	r3, #0
 8006478:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800647a:	2300      	movs	r3, #0
 800647c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800647e:	f107 031c 	add.w	r3, r7, #28
 8006482:	461a      	mov	r2, r3
 8006484:	2101      	movs	r1, #1
 8006486:	482c      	ldr	r0, [pc, #176]	@ (8006538 <MX_TIM5_Init+0x13c>)
 8006488:	f005 f892 	bl	800b5b0 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH1);
 800648c:	2101      	movs	r1, #1
 800648e:	482a      	ldr	r0, [pc, #168]	@ (8006538 <MX_TIM5_Init+0x13c>)
 8006490:	f7ff fe50 	bl	8006134 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH2);
 8006494:	2110      	movs	r1, #16
 8006496:	4828      	ldr	r0, [pc, #160]	@ (8006538 <MX_TIM5_Init+0x13c>)
 8006498:	f7ff fe90 	bl	80061bc <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800649c:	f107 031c 	add.w	r3, r7, #28
 80064a0:	461a      	mov	r2, r3
 80064a2:	2110      	movs	r1, #16
 80064a4:	4824      	ldr	r0, [pc, #144]	@ (8006538 <MX_TIM5_Init+0x13c>)
 80064a6:	f005 f883 	bl	800b5b0 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH2);
 80064aa:	2110      	movs	r1, #16
 80064ac:	4822      	ldr	r0, [pc, #136]	@ (8006538 <MX_TIM5_Init+0x13c>)
 80064ae:	f7ff fe41 	bl	8006134 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH3);
 80064b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80064b6:	4820      	ldr	r0, [pc, #128]	@ (8006538 <MX_TIM5_Init+0x13c>)
 80064b8:	f7ff fe80 	bl	80061bc <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80064bc:	f107 031c 	add.w	r3, r7, #28
 80064c0:	461a      	mov	r2, r3
 80064c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80064c6:	481c      	ldr	r0, [pc, #112]	@ (8006538 <MX_TIM5_Init+0x13c>)
 80064c8:	f005 f872 	bl	800b5b0 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH3);
 80064cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80064d0:	4819      	ldr	r0, [pc, #100]	@ (8006538 <MX_TIM5_Init+0x13c>)
 80064d2:	f7ff fe2f 	bl	8006134 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH4);
 80064d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80064da:	4817      	ldr	r0, [pc, #92]	@ (8006538 <MX_TIM5_Init+0x13c>)
 80064dc:	f7ff fe6e 	bl	80061bc <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80064e0:	f107 031c 	add.w	r3, r7, #28
 80064e4:	461a      	mov	r2, r3
 80064e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80064ea:	4813      	ldr	r0, [pc, #76]	@ (8006538 <MX_TIM5_Init+0x13c>)
 80064ec:	f005 f860 	bl	800b5b0 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH4);
 80064f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80064f4:	4810      	ldr	r0, [pc, #64]	@ (8006538 <MX_TIM5_Init+0x13c>)
 80064f6:	f7ff fe1d 	bl	8006134 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 80064fa:	2100      	movs	r1, #0
 80064fc:	480e      	ldr	r0, [pc, #56]	@ (8006538 <MX_TIM5_Init+0x13c>)
 80064fe:	f7ff feb6 	bl	800626e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8006502:	480d      	ldr	r0, [pc, #52]	@ (8006538 <MX_TIM5_Init+0x13c>)
 8006504:	f7ff fec6 	bl	8006294 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8006508:	2001      	movs	r0, #1
 800650a:	f7ff fed3 	bl	80062b4 <LL_AHB1_GRP1_EnableClock>
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 800650e:	230f      	movs	r3, #15
 8006510:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006512:	2302      	movs	r3, #2
 8006514:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006516:	2300      	movs	r3, #0
 8006518:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800651a:	2300      	movs	r3, #0
 800651c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800651e:	2300      	movs	r3, #0
 8006520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8006522:	2302      	movs	r3, #2
 8006524:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006526:	1d3b      	adds	r3, r7, #4
 8006528:	4619      	mov	r1, r3
 800652a:	4804      	ldr	r0, [pc, #16]	@ (800653c <MX_TIM5_Init+0x140>)
 800652c:	f004 fd03 	bl	800af36 <LL_GPIO_Init>

}
 8006530:	bf00      	nop
 8006532:	3750      	adds	r7, #80	@ 0x50
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	40000c00 	.word	0x40000c00
 800653c:	40020000 	.word	0x40020000

08006540 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8006546:	1d3b      	adds	r3, r7, #4
 8006548:	2200      	movs	r2, #0
 800654a:	601a      	str	r2, [r3, #0]
 800654c:	605a      	str	r2, [r3, #4]
 800654e:	609a      	str	r2, [r3, #8]
 8006550:	60da      	str	r2, [r3, #12]
 8006552:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 8006554:	2020      	movs	r0, #32
 8006556:	f7ff fec5 	bl	80062e4 <LL_APB1_GRP1_EnableClock>

  /* TIM7 interrupt Init */
  NVIC_SetPriority(TIM7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800655a:	f7ff fd51 	bl	8006000 <__NVIC_GetPriorityGrouping>
 800655e:	4603      	mov	r3, r0
 8006560:	2200      	movs	r2, #0
 8006562:	2100      	movs	r1, #0
 8006564:	4618      	mov	r0, r3
 8006566:	f7ff fda1 	bl	80060ac <NVIC_EncodePriority>
 800656a:	4603      	mov	r3, r0
 800656c:	4619      	mov	r1, r3
 800656e:	2037      	movs	r0, #55	@ 0x37
 8006570:	f7ff fd72 	bl	8006058 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_IRQn);
 8006574:	2037      	movs	r0, #55	@ 0x37
 8006576:	f7ff fd51 	bl	800601c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 42000-LL_TIM_IC_FILTER_FDIV1_N2;
 800657a:	f24a 4310 	movw	r3, #42000	@ 0xa410
 800657e:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8006580:	2300      	movs	r3, #0
 8006582:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = LL_TIM_IC_FILTER_FDIV1_N4-LL_TIM_IC_FILTER_FDIV1_N2;
 8006584:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006588:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 800658a:	1d3b      	adds	r3, r7, #4
 800658c:	4619      	mov	r1, r3
 800658e:	4808      	ldr	r0, [pc, #32]	@ (80065b0 <MX_TIM7_Init+0x70>)
 8006590:	f004 ff74 	bl	800b47c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM7);
 8006594:	4806      	ldr	r0, [pc, #24]	@ (80065b0 <MX_TIM7_Init+0x70>)
 8006596:	f7ff fdbc 	bl	8006112 <LL_TIM_EnableARRPreload>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 800659a:	2100      	movs	r1, #0
 800659c:	4804      	ldr	r0, [pc, #16]	@ (80065b0 <MX_TIM7_Init+0x70>)
 800659e:	f7ff fe66 	bl	800626e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 80065a2:	4803      	ldr	r0, [pc, #12]	@ (80065b0 <MX_TIM7_Init+0x70>)
 80065a4:	f7ff fe76 	bl	8006294 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80065a8:	bf00      	nop
 80065aa:	3718      	adds	r7, #24
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	40001400 	.word	0x40001400

080065b4 <__NVIC_GetPriorityGrouping>:
{
 80065b4:	b480      	push	{r7}
 80065b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80065b8:	4b04      	ldr	r3, [pc, #16]	@ (80065cc <__NVIC_GetPriorityGrouping+0x18>)
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	0a1b      	lsrs	r3, r3, #8
 80065be:	f003 0307 	and.w	r3, r3, #7
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	e000ed00 	.word	0xe000ed00

080065d0 <__NVIC_EnableIRQ>:
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	4603      	mov	r3, r0
 80065d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	db0b      	blt.n	80065fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80065e2:	79fb      	ldrb	r3, [r7, #7]
 80065e4:	f003 021f 	and.w	r2, r3, #31
 80065e8:	4907      	ldr	r1, [pc, #28]	@ (8006608 <__NVIC_EnableIRQ+0x38>)
 80065ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065ee:	095b      	lsrs	r3, r3, #5
 80065f0:	2001      	movs	r0, #1
 80065f2:	fa00 f202 	lsl.w	r2, r0, r2
 80065f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80065fa:	bf00      	nop
 80065fc:	370c      	adds	r7, #12
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	e000e100 	.word	0xe000e100

0800660c <__NVIC_SetPriority>:
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	4603      	mov	r3, r0
 8006614:	6039      	str	r1, [r7, #0]
 8006616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800661c:	2b00      	cmp	r3, #0
 800661e:	db0a      	blt.n	8006636 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	b2da      	uxtb	r2, r3
 8006624:	490c      	ldr	r1, [pc, #48]	@ (8006658 <__NVIC_SetPriority+0x4c>)
 8006626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800662a:	0112      	lsls	r2, r2, #4
 800662c:	b2d2      	uxtb	r2, r2
 800662e:	440b      	add	r3, r1
 8006630:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006634:	e00a      	b.n	800664c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	b2da      	uxtb	r2, r3
 800663a:	4908      	ldr	r1, [pc, #32]	@ (800665c <__NVIC_SetPriority+0x50>)
 800663c:	79fb      	ldrb	r3, [r7, #7]
 800663e:	f003 030f 	and.w	r3, r3, #15
 8006642:	3b04      	subs	r3, #4
 8006644:	0112      	lsls	r2, r2, #4
 8006646:	b2d2      	uxtb	r2, r2
 8006648:	440b      	add	r3, r1
 800664a:	761a      	strb	r2, [r3, #24]
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	e000e100 	.word	0xe000e100
 800665c:	e000ed00 	.word	0xe000ed00

08006660 <NVIC_EncodePriority>:
{
 8006660:	b480      	push	{r7}
 8006662:	b089      	sub	sp, #36	@ 0x24
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f003 0307 	and.w	r3, r3, #7
 8006672:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	f1c3 0307 	rsb	r3, r3, #7
 800667a:	2b04      	cmp	r3, #4
 800667c:	bf28      	it	cs
 800667e:	2304      	movcs	r3, #4
 8006680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	3304      	adds	r3, #4
 8006686:	2b06      	cmp	r3, #6
 8006688:	d902      	bls.n	8006690 <NVIC_EncodePriority+0x30>
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	3b03      	subs	r3, #3
 800668e:	e000      	b.n	8006692 <NVIC_EncodePriority+0x32>
 8006690:	2300      	movs	r3, #0
 8006692:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006694:	f04f 32ff 	mov.w	r2, #4294967295
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	fa02 f303 	lsl.w	r3, r2, r3
 800669e:	43da      	mvns	r2, r3
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	401a      	ands	r2, r3
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80066a8:	f04f 31ff 	mov.w	r1, #4294967295
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	fa01 f303 	lsl.w	r3, r1, r3
 80066b2:	43d9      	mvns	r1, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066b8:	4313      	orrs	r3, r2
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3724      	adds	r7, #36	@ 0x24
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <LL_USART_Enable>:
{
 80066c6:	b480      	push	{r7}
 80066c8:	b083      	sub	sp, #12
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	60da      	str	r2, [r3, #12]
}
 80066da:	bf00      	nop
 80066dc:	370c      	adds	r7, #12
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <LL_USART_ConfigAsyncMode>:
{
 80066e6:	b480      	push	{r7}
 80066e8:	b083      	sub	sp, #12
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	615a      	str	r2, [r3, #20]
}
 8006706:	bf00      	nop
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
	...

08006714 <LL_AHB1_GRP1_EnableClock>:
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800671c:	4b08      	ldr	r3, [pc, #32]	@ (8006740 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800671e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006720:	4907      	ldr	r1, [pc, #28]	@ (8006740 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4313      	orrs	r3, r2
 8006726:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8006728:	4b05      	ldr	r3, [pc, #20]	@ (8006740 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800672a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4013      	ands	r3, r2
 8006730:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006732:	68fb      	ldr	r3, [r7, #12]
}
 8006734:	bf00      	nop
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr
 8006740:	40023800 	.word	0x40023800

08006744 <LL_APB1_GRP1_EnableClock>:
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800674c:	4b08      	ldr	r3, [pc, #32]	@ (8006770 <LL_APB1_GRP1_EnableClock+0x2c>)
 800674e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006750:	4907      	ldr	r1, [pc, #28]	@ (8006770 <LL_APB1_GRP1_EnableClock+0x2c>)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4313      	orrs	r3, r2
 8006756:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8006758:	4b05      	ldr	r3, [pc, #20]	@ (8006770 <LL_APB1_GRP1_EnableClock+0x2c>)
 800675a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4013      	ands	r3, r2
 8006760:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006762:	68fb      	ldr	r3, [r7, #12]
}
 8006764:	bf00      	nop
 8006766:	3714      	adds	r7, #20
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr
 8006770:	40023800 	.word	0x40023800

08006774 <LL_APB2_GRP1_EnableClock>:
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800677c:	4b08      	ldr	r3, [pc, #32]	@ (80067a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800677e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006780:	4907      	ldr	r1, [pc, #28]	@ (80067a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4313      	orrs	r3, r2
 8006786:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006788:	4b05      	ldr	r3, [pc, #20]	@ (80067a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800678a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4013      	ands	r3, r2
 8006790:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006792:	68fb      	ldr	r3, [r7, #12]
}
 8006794:	bf00      	nop
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr
 80067a0:	40023800 	.word	0x40023800

080067a4 <MX_UART4_Init>:

UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b08e      	sub	sp, #56	@ 0x38
 80067a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80067aa:	f107 031c 	add.w	r3, r7, #28
 80067ae:	2200      	movs	r2, #0
 80067b0:	601a      	str	r2, [r3, #0]
 80067b2:	605a      	str	r2, [r3, #4]
 80067b4:	609a      	str	r2, [r3, #8]
 80067b6:	60da      	str	r2, [r3, #12]
 80067b8:	611a      	str	r2, [r3, #16]
 80067ba:	615a      	str	r2, [r3, #20]
 80067bc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067be:	1d3b      	adds	r3, r7, #4
 80067c0:	2200      	movs	r2, #0
 80067c2:	601a      	str	r2, [r3, #0]
 80067c4:	605a      	str	r2, [r3, #4]
 80067c6:	609a      	str	r2, [r3, #8]
 80067c8:	60da      	str	r2, [r3, #12]
 80067ca:	611a      	str	r2, [r3, #16]
 80067cc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 80067ce:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80067d2:	f7ff ffb7 	bl	8006744 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80067d6:	2004      	movs	r0, #4
 80067d8:	f7ff ff9c 	bl	8006714 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 80067dc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80067e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80067e2:	2302      	movs	r3, #2
 80067e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80067e6:	2303      	movs	r3, #3
 80067e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80067ea:	2300      	movs	r3, #0
 80067ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80067ee:	2300      	movs	r3, #0
 80067f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80067f2:	2308      	movs	r3, #8
 80067f4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80067f6:	1d3b      	adds	r3, r7, #4
 80067f8:	4619      	mov	r1, r3
 80067fa:	4819      	ldr	r0, [pc, #100]	@ (8006860 <MX_UART4_Init+0xbc>)
 80067fc:	f004 fb9b 	bl	800af36 <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006800:	f7ff fed8 	bl	80065b4 <__NVIC_GetPriorityGrouping>
 8006804:	4603      	mov	r3, r0
 8006806:	2200      	movs	r2, #0
 8006808:	2100      	movs	r1, #0
 800680a:	4618      	mov	r0, r3
 800680c:	f7ff ff28 	bl	8006660 <NVIC_EncodePriority>
 8006810:	4603      	mov	r3, r0
 8006812:	4619      	mov	r1, r3
 8006814:	2034      	movs	r0, #52	@ 0x34
 8006816:	f7ff fef9 	bl	800660c <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 800681a:	2034      	movs	r0, #52	@ 0x34
 800681c:	f7ff fed8 	bl	80065d0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 8006820:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8006824:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8006826:	2300      	movs	r3, #0
 8006828:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800682a:	2300      	movs	r3, #0
 800682c:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800682e:	2300      	movs	r3, #0
 8006830:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8006832:	230c      	movs	r3, #12
 8006834:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8006836:	2300      	movs	r3, #0
 8006838:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800683a:	2300      	movs	r3, #0
 800683c:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 800683e:	f107 031c 	add.w	r3, r7, #28
 8006842:	4619      	mov	r1, r3
 8006844:	4807      	ldr	r0, [pc, #28]	@ (8006864 <MX_UART4_Init+0xc0>)
 8006846:	f005 fb01 	bl	800be4c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 800684a:	4806      	ldr	r0, [pc, #24]	@ (8006864 <MX_UART4_Init+0xc0>)
 800684c:	f7ff ff4b 	bl	80066e6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 8006850:	4804      	ldr	r0, [pc, #16]	@ (8006864 <MX_UART4_Init+0xc0>)
 8006852:	f7ff ff38 	bl	80066c6 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8006856:	bf00      	nop
 8006858:	3738      	adds	r7, #56	@ 0x38
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	40020800 	.word	0x40020800
 8006864:	40004c00 	.word	0x40004c00

08006868 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b08e      	sub	sp, #56	@ 0x38
 800686c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800686e:	f107 031c 	add.w	r3, r7, #28
 8006872:	2200      	movs	r2, #0
 8006874:	601a      	str	r2, [r3, #0]
 8006876:	605a      	str	r2, [r3, #4]
 8006878:	609a      	str	r2, [r3, #8]
 800687a:	60da      	str	r2, [r3, #12]
 800687c:	611a      	str	r2, [r3, #16]
 800687e:	615a      	str	r2, [r3, #20]
 8006880:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006882:	1d3b      	adds	r3, r7, #4
 8006884:	2200      	movs	r2, #0
 8006886:	601a      	str	r2, [r3, #0]
 8006888:	605a      	str	r2, [r3, #4]
 800688a:	609a      	str	r2, [r3, #8]
 800688c:	60da      	str	r2, [r3, #12]
 800688e:	611a      	str	r2, [r3, #16]
 8006890:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 8006892:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8006896:	f7ff ff55 	bl	8006744 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800689a:	2004      	movs	r0, #4
 800689c:	f7ff ff3a 	bl	8006714 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80068a0:	2008      	movs	r0, #8
 80068a2:	f7ff ff37 	bl	8006714 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 80068a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80068aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80068ac:	2302      	movs	r3, #2
 80068ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80068b0:	2303      	movs	r3, #3
 80068b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80068b4:	2300      	movs	r3, #0
 80068b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80068b8:	2300      	movs	r3, #0
 80068ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80068bc:	2308      	movs	r3, #8
 80068be:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80068c0:	1d3b      	adds	r3, r7, #4
 80068c2:	4619      	mov	r1, r3
 80068c4:	4821      	ldr	r0, [pc, #132]	@ (800694c <MX_UART5_Init+0xe4>)
 80068c6:	f004 fb36 	bl	800af36 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80068ca:	2304      	movs	r3, #4
 80068cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80068ce:	2302      	movs	r3, #2
 80068d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80068d2:	2303      	movs	r3, #3
 80068d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80068d6:	2300      	movs	r3, #0
 80068d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80068da:	2300      	movs	r3, #0
 80068dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80068de:	2308      	movs	r3, #8
 80068e0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80068e2:	1d3b      	adds	r3, r7, #4
 80068e4:	4619      	mov	r1, r3
 80068e6:	481a      	ldr	r0, [pc, #104]	@ (8006950 <MX_UART5_Init+0xe8>)
 80068e8:	f004 fb25 	bl	800af36 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80068ec:	f7ff fe62 	bl	80065b4 <__NVIC_GetPriorityGrouping>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2200      	movs	r2, #0
 80068f4:	2100      	movs	r1, #0
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7ff feb2 	bl	8006660 <NVIC_EncodePriority>
 80068fc:	4603      	mov	r3, r0
 80068fe:	4619      	mov	r1, r3
 8006900:	2035      	movs	r0, #53	@ 0x35
 8006902:	f7ff fe83 	bl	800660c <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8006906:	2035      	movs	r0, #53	@ 0x35
 8006908:	f7ff fe62 	bl	80065d0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800690c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8006910:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8006912:	2300      	movs	r3, #0
 8006914:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8006916:	2300      	movs	r3, #0
 8006918:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800691a:	2300      	movs	r3, #0
 800691c:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 800691e:	2304      	movs	r3, #4
 8006920:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8006922:	2300      	movs	r3, #0
 8006924:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8006926:	2300      	movs	r3, #0
 8006928:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 800692a:	f107 031c 	add.w	r3, r7, #28
 800692e:	4619      	mov	r1, r3
 8006930:	4808      	ldr	r0, [pc, #32]	@ (8006954 <MX_UART5_Init+0xec>)
 8006932:	f005 fa8b 	bl	800be4c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8006936:	4807      	ldr	r0, [pc, #28]	@ (8006954 <MX_UART5_Init+0xec>)
 8006938:	f7ff fed5 	bl	80066e6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 800693c:	4805      	ldr	r0, [pc, #20]	@ (8006954 <MX_UART5_Init+0xec>)
 800693e:	f7ff fec2 	bl	80066c6 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8006942:	bf00      	nop
 8006944:	3738      	adds	r7, #56	@ 0x38
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	40020800 	.word	0x40020800
 8006950:	40020c00 	.word	0x40020c00
 8006954:	40005000 	.word	0x40005000

08006958 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800695c:	4b11      	ldr	r3, [pc, #68]	@ (80069a4 <MX_USART1_UART_Init+0x4c>)
 800695e:	4a12      	ldr	r2, [pc, #72]	@ (80069a8 <MX_USART1_UART_Init+0x50>)
 8006960:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006962:	4b10      	ldr	r3, [pc, #64]	@ (80069a4 <MX_USART1_UART_Init+0x4c>)
 8006964:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006968:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800696a:	4b0e      	ldr	r3, [pc, #56]	@ (80069a4 <MX_USART1_UART_Init+0x4c>)
 800696c:	2200      	movs	r2, #0
 800696e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006970:	4b0c      	ldr	r3, [pc, #48]	@ (80069a4 <MX_USART1_UART_Init+0x4c>)
 8006972:	2200      	movs	r2, #0
 8006974:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006976:	4b0b      	ldr	r3, [pc, #44]	@ (80069a4 <MX_USART1_UART_Init+0x4c>)
 8006978:	2200      	movs	r2, #0
 800697a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800697c:	4b09      	ldr	r3, [pc, #36]	@ (80069a4 <MX_USART1_UART_Init+0x4c>)
 800697e:	220c      	movs	r2, #12
 8006980:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006982:	4b08      	ldr	r3, [pc, #32]	@ (80069a4 <MX_USART1_UART_Init+0x4c>)
 8006984:	2200      	movs	r2, #0
 8006986:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006988:	4b06      	ldr	r3, [pc, #24]	@ (80069a4 <MX_USART1_UART_Init+0x4c>)
 800698a:	2200      	movs	r2, #0
 800698c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800698e:	4805      	ldr	r0, [pc, #20]	@ (80069a4 <MX_USART1_UART_Init+0x4c>)
 8006990:	f003 f8fa 	bl	8009b88 <HAL_UART_Init>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d001      	beq.n	800699e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800699a:	f7fe ff10 	bl	80057be <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800699e:	bf00      	nop
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	20000538 	.word	0x20000538
 80069a8:	40011000 	.word	0x40011000

080069ac <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b08e      	sub	sp, #56	@ 0x38
 80069b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80069b2:	f107 031c 	add.w	r3, r7, #28
 80069b6:	2200      	movs	r2, #0
 80069b8:	601a      	str	r2, [r3, #0]
 80069ba:	605a      	str	r2, [r3, #4]
 80069bc:	609a      	str	r2, [r3, #8]
 80069be:	60da      	str	r2, [r3, #12]
 80069c0:	611a      	str	r2, [r3, #16]
 80069c2:	615a      	str	r2, [r3, #20]
 80069c4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069c6:	1d3b      	adds	r3, r7, #4
 80069c8:	2200      	movs	r2, #0
 80069ca:	601a      	str	r2, [r3, #0]
 80069cc:	605a      	str	r2, [r3, #4]
 80069ce:	609a      	str	r2, [r3, #8]
 80069d0:	60da      	str	r2, [r3, #12]
 80069d2:	611a      	str	r2, [r3, #16]
 80069d4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 80069d6:	2020      	movs	r0, #32
 80069d8:	f7ff fecc 	bl	8006774 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80069dc:	2004      	movs	r0, #4
 80069de:	f7ff fe99 	bl	8006714 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80069e2:	23c0      	movs	r3, #192	@ 0xc0
 80069e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80069e6:	2302      	movs	r3, #2
 80069e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80069ea:	2303      	movs	r3, #3
 80069ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80069ee:	2300      	movs	r3, #0
 80069f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80069f2:	2300      	movs	r3, #0
 80069f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80069f6:	2308      	movs	r3, #8
 80069f8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80069fa:	1d3b      	adds	r3, r7, #4
 80069fc:	4619      	mov	r1, r3
 80069fe:	4819      	ldr	r0, [pc, #100]	@ (8006a64 <MX_USART6_UART_Init+0xb8>)
 8006a00:	f004 fa99 	bl	800af36 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006a04:	f7ff fdd6 	bl	80065b4 <__NVIC_GetPriorityGrouping>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7ff fe26 	bl	8006660 <NVIC_EncodePriority>
 8006a14:	4603      	mov	r3, r0
 8006a16:	4619      	mov	r1, r3
 8006a18:	2047      	movs	r0, #71	@ 0x47
 8006a1a:	f7ff fdf7 	bl	800660c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8006a1e:	2047      	movs	r0, #71	@ 0x47
 8006a20:	f7ff fdd6 	bl	80065d0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8006a24:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8006a28:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8006a32:	2300      	movs	r3, #0
 8006a34:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8006a36:	230c      	movs	r3, #12
 8006a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8006a42:	f107 031c 	add.w	r3, r7, #28
 8006a46:	4619      	mov	r1, r3
 8006a48:	4807      	ldr	r0, [pc, #28]	@ (8006a68 <MX_USART6_UART_Init+0xbc>)
 8006a4a:	f005 f9ff 	bl	800be4c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8006a4e:	4806      	ldr	r0, [pc, #24]	@ (8006a68 <MX_USART6_UART_Init+0xbc>)
 8006a50:	f7ff fe49 	bl	80066e6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8006a54:	4804      	ldr	r0, [pc, #16]	@ (8006a68 <MX_USART6_UART_Init+0xbc>)
 8006a56:	f7ff fe36 	bl	80066c6 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8006a5a:	bf00      	nop
 8006a5c:	3738      	adds	r7, #56	@ 0x38
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	40020800 	.word	0x40020800
 8006a68:	40011400 	.word	0x40011400

08006a6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b08a      	sub	sp, #40	@ 0x28
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a74:	f107 0314 	add.w	r3, r7, #20
 8006a78:	2200      	movs	r2, #0
 8006a7a:	601a      	str	r2, [r3, #0]
 8006a7c:	605a      	str	r2, [r3, #4]
 8006a7e:	609a      	str	r2, [r3, #8]
 8006a80:	60da      	str	r2, [r3, #12]
 8006a82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a1d      	ldr	r2, [pc, #116]	@ (8006b00 <HAL_UART_MspInit+0x94>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d134      	bne.n	8006af8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006a8e:	2300      	movs	r3, #0
 8006a90:	613b      	str	r3, [r7, #16]
 8006a92:	4b1c      	ldr	r3, [pc, #112]	@ (8006b04 <HAL_UART_MspInit+0x98>)
 8006a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a96:	4a1b      	ldr	r2, [pc, #108]	@ (8006b04 <HAL_UART_MspInit+0x98>)
 8006a98:	f043 0310 	orr.w	r3, r3, #16
 8006a9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8006a9e:	4b19      	ldr	r3, [pc, #100]	@ (8006b04 <HAL_UART_MspInit+0x98>)
 8006aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aa2:	f003 0310 	and.w	r3, r3, #16
 8006aa6:	613b      	str	r3, [r7, #16]
 8006aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006aaa:	2300      	movs	r3, #0
 8006aac:	60fb      	str	r3, [r7, #12]
 8006aae:	4b15      	ldr	r3, [pc, #84]	@ (8006b04 <HAL_UART_MspInit+0x98>)
 8006ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab2:	4a14      	ldr	r2, [pc, #80]	@ (8006b04 <HAL_UART_MspInit+0x98>)
 8006ab4:	f043 0301 	orr.w	r3, r3, #1
 8006ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8006aba:	4b12      	ldr	r3, [pc, #72]	@ (8006b04 <HAL_UART_MspInit+0x98>)
 8006abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	60fb      	str	r3, [r7, #12]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006ac6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8006aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006acc:	2302      	movs	r3, #2
 8006ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006ad8:	2307      	movs	r3, #7
 8006ada:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006adc:	f107 0314 	add.w	r3, r7, #20
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	4809      	ldr	r0, [pc, #36]	@ (8006b08 <HAL_UART_MspInit+0x9c>)
 8006ae4:	f001 f9f8 	bl	8007ed8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006ae8:	2200      	movs	r2, #0
 8006aea:	2100      	movs	r1, #0
 8006aec:	2025      	movs	r0, #37	@ 0x25
 8006aee:	f000 fdba 	bl	8007666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006af2:	2025      	movs	r0, #37	@ 0x25
 8006af4:	f000 fdd3 	bl	800769e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006af8:	bf00      	nop
 8006afa:	3728      	adds	r7, #40	@ 0x28
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	40011000 	.word	0x40011000
 8006b04:	40023800 	.word	0x40023800
 8006b08:	40020000 	.word	0x40020000

08006b0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006b0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006b44 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8006b10:	f7ff fa64 	bl	8005fdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006b14:	480c      	ldr	r0, [pc, #48]	@ (8006b48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006b16:	490d      	ldr	r1, [pc, #52]	@ (8006b4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006b18:	4a0d      	ldr	r2, [pc, #52]	@ (8006b50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006b1c:	e002      	b.n	8006b24 <LoopCopyDataInit>

08006b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006b22:	3304      	adds	r3, #4

08006b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006b28:	d3f9      	bcc.n	8006b1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8006b54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006b2c:	4c0a      	ldr	r4, [pc, #40]	@ (8006b58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006b30:	e001      	b.n	8006b36 <LoopFillZerobss>

08006b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006b34:	3204      	adds	r2, #4

08006b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006b38:	d3fb      	bcc.n	8006b32 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8006b3a:	f006 f8c1 	bl	800ccc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006b3e:	f7fc ff61 	bl	8003a04 <main>
  bx  lr    
 8006b42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006b44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006b4c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8006b50:	0800fdd8 	.word	0x0800fdd8
  ldr r2, =_sbss
 8006b54:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8006b58:	200006d0 	.word	0x200006d0

08006b5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006b5c:	e7fe      	b.n	8006b5c <ADC_IRQHandler>
	...

08006b60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006b64:	4b0e      	ldr	r3, [pc, #56]	@ (8006ba0 <HAL_Init+0x40>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a0d      	ldr	r2, [pc, #52]	@ (8006ba0 <HAL_Init+0x40>)
 8006b6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006b6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006b70:	4b0b      	ldr	r3, [pc, #44]	@ (8006ba0 <HAL_Init+0x40>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a0a      	ldr	r2, [pc, #40]	@ (8006ba0 <HAL_Init+0x40>)
 8006b76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006b7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006b7c:	4b08      	ldr	r3, [pc, #32]	@ (8006ba0 <HAL_Init+0x40>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a07      	ldr	r2, [pc, #28]	@ (8006ba0 <HAL_Init+0x40>)
 8006b82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006b88:	2003      	movs	r0, #3
 8006b8a:	f000 fd61 	bl	8007650 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006b8e:	200f      	movs	r0, #15
 8006b90:	f000 f808 	bl	8006ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006b94:	f7fe ff6c 	bl	8005a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	40023c00 	.word	0x40023c00

08006ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006bac:	4b12      	ldr	r3, [pc, #72]	@ (8006bf8 <HAL_InitTick+0x54>)
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	4b12      	ldr	r3, [pc, #72]	@ (8006bfc <HAL_InitTick+0x58>)
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f000 fd79 	bl	80076ba <HAL_SYSTICK_Config>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d001      	beq.n	8006bd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e00e      	b.n	8006bf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2b0f      	cmp	r3, #15
 8006bd6:	d80a      	bhi.n	8006bee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006bd8:	2200      	movs	r2, #0
 8006bda:	6879      	ldr	r1, [r7, #4]
 8006bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8006be0:	f000 fd41 	bl	8007666 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006be4:	4a06      	ldr	r2, [pc, #24]	@ (8006c00 <HAL_InitTick+0x5c>)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006bea:	2300      	movs	r3, #0
 8006bec:	e000      	b.n	8006bf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3708      	adds	r7, #8
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	20000004 	.word	0x20000004
 8006bfc:	2000000c 	.word	0x2000000c
 8006c00:	20000008 	.word	0x20000008

08006c04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006c04:	b480      	push	{r7}
 8006c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006c08:	4b06      	ldr	r3, [pc, #24]	@ (8006c24 <HAL_IncTick+0x20>)
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	4b06      	ldr	r3, [pc, #24]	@ (8006c28 <HAL_IncTick+0x24>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4413      	add	r3, r2
 8006c14:	4a04      	ldr	r2, [pc, #16]	@ (8006c28 <HAL_IncTick+0x24>)
 8006c16:	6013      	str	r3, [r2, #0]
}
 8006c18:	bf00      	nop
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	2000000c 	.word	0x2000000c
 8006c28:	20000580 	.word	0x20000580

08006c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8006c30:	4b03      	ldr	r3, [pc, #12]	@ (8006c40 <HAL_GetTick+0x14>)
 8006c32:	681b      	ldr	r3, [r3, #0]
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	20000580 	.word	0x20000580

08006c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006c4c:	f7ff ffee 	bl	8006c2c <HAL_GetTick>
 8006c50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c5c:	d005      	beq.n	8006c6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8006c88 <HAL_Delay+0x44>)
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	461a      	mov	r2, r3
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	4413      	add	r3, r2
 8006c68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006c6a:	bf00      	nop
 8006c6c:	f7ff ffde 	bl	8006c2c <HAL_GetTick>
 8006c70:	4602      	mov	r2, r0
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d8f7      	bhi.n	8006c6c <HAL_Delay+0x28>
  {
  }
}
 8006c7c:	bf00      	nop
 8006c7e:	bf00      	nop
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	2000000c 	.word	0x2000000c

08006c8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c94:	2300      	movs	r3, #0
 8006c96:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d101      	bne.n	8006ca2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e033      	b.n	8006d0a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d109      	bne.n	8006cbe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f7fc fc04 	bl	80034b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc2:	f003 0310 	and.w	r3, r3, #16
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d118      	bne.n	8006cfc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cce:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006cd2:	f023 0302 	bic.w	r3, r3, #2
 8006cd6:	f043 0202 	orr.w	r2, r3, #2
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 fa68 	bl	80071b4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cee:	f023 0303 	bic.w	r3, r3, #3
 8006cf2:	f043 0201 	orr.w	r2, r3, #1
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	641a      	str	r2, [r3, #64]	@ 0x40
 8006cfa:	e001      	b.n	8006d00 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
	...

08006d14 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b086      	sub	sp, #24
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006d20:	2300      	movs	r3, #0
 8006d22:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d101      	bne.n	8006d32 <HAL_ADC_Start_DMA+0x1e>
 8006d2e:	2302      	movs	r3, #2
 8006d30:	e0e9      	b.n	8006f06 <HAL_ADC_Start_DMA+0x1f2>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2201      	movs	r2, #1
 8006d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	f003 0301 	and.w	r3, r3, #1
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d018      	beq.n	8006d7a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	689a      	ldr	r2, [r3, #8]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f042 0201 	orr.w	r2, r2, #1
 8006d56:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006d58:	4b6d      	ldr	r3, [pc, #436]	@ (8006f10 <HAL_ADC_Start_DMA+0x1fc>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a6d      	ldr	r2, [pc, #436]	@ (8006f14 <HAL_ADC_Start_DMA+0x200>)
 8006d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d62:	0c9a      	lsrs	r2, r3, #18
 8006d64:	4613      	mov	r3, r2
 8006d66:	005b      	lsls	r3, r3, #1
 8006d68:	4413      	add	r3, r2
 8006d6a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8006d6c:	e002      	b.n	8006d74 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	3b01      	subs	r3, #1
 8006d72:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d1f9      	bne.n	8006d6e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d88:	d107      	bne.n	8006d9a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	689a      	ldr	r2, [r3, #8]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006d98:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f003 0301 	and.w	r3, r3, #1
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	f040 80a1 	bne.w	8006eec <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dae:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006db2:	f023 0301 	bic.w	r3, r3, #1
 8006db6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d007      	beq.n	8006ddc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006dd4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006de4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006de8:	d106      	bne.n	8006df8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dee:	f023 0206 	bic.w	r2, r3, #6
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	645a      	str	r2, [r3, #68]	@ 0x44
 8006df6:	e002      	b.n	8006dfe <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006e06:	4b44      	ldr	r3, [pc, #272]	@ (8006f18 <HAL_ADC_Start_DMA+0x204>)
 8006e08:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e0e:	4a43      	ldr	r2, [pc, #268]	@ (8006f1c <HAL_ADC_Start_DMA+0x208>)
 8006e10:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e16:	4a42      	ldr	r2, [pc, #264]	@ (8006f20 <HAL_ADC_Start_DMA+0x20c>)
 8006e18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e1e:	4a41      	ldr	r2, [pc, #260]	@ (8006f24 <HAL_ADC_Start_DMA+0x210>)
 8006e20:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8006e2a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8006e3a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	689a      	ldr	r2, [r3, #8]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e4a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	334c      	adds	r3, #76	@ 0x4c
 8006e56:	4619      	mov	r1, r3
 8006e58:	68ba      	ldr	r2, [r7, #8]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f000 fce8 	bl	8007830 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	f003 031f 	and.w	r3, r3, #31
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d12a      	bne.n	8006ec2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a2d      	ldr	r2, [pc, #180]	@ (8006f28 <HAL_ADC_Start_DMA+0x214>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d015      	beq.n	8006ea2 <HAL_ADC_Start_DMA+0x18e>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a2c      	ldr	r2, [pc, #176]	@ (8006f2c <HAL_ADC_Start_DMA+0x218>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d105      	bne.n	8006e8c <HAL_ADC_Start_DMA+0x178>
 8006e80:	4b25      	ldr	r3, [pc, #148]	@ (8006f18 <HAL_ADC_Start_DMA+0x204>)
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	f003 031f 	and.w	r3, r3, #31
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00a      	beq.n	8006ea2 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a27      	ldr	r2, [pc, #156]	@ (8006f30 <HAL_ADC_Start_DMA+0x21c>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d136      	bne.n	8006f04 <HAL_ADC_Start_DMA+0x1f0>
 8006e96:	4b20      	ldr	r3, [pc, #128]	@ (8006f18 <HAL_ADC_Start_DMA+0x204>)
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	f003 0310 	and.w	r3, r3, #16
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d130      	bne.n	8006f04 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d129      	bne.n	8006f04 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	689a      	ldr	r2, [r3, #8]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006ebe:	609a      	str	r2, [r3, #8]
 8006ec0:	e020      	b.n	8006f04 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a18      	ldr	r2, [pc, #96]	@ (8006f28 <HAL_ADC_Start_DMA+0x214>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d11b      	bne.n	8006f04 <HAL_ADC_Start_DMA+0x1f0>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d114      	bne.n	8006f04 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	689a      	ldr	r2, [r3, #8]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006ee8:	609a      	str	r2, [r3, #8]
 8006eea:	e00b      	b.n	8006f04 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ef0:	f043 0210 	orr.w	r2, r3, #16
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006efc:	f043 0201 	orr.w	r2, r3, #1
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3718      	adds	r7, #24
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	20000004 	.word	0x20000004
 8006f14:	431bde83 	.word	0x431bde83
 8006f18:	40012300 	.word	0x40012300
 8006f1c:	080073ad 	.word	0x080073ad
 8006f20:	08007467 	.word	0x08007467
 8006f24:	08007483 	.word	0x08007483
 8006f28:	40012000 	.word	0x40012000
 8006f2c:	40012100 	.word	0x40012100
 8006f30:	40012200 	.word	0x40012200

08006f34 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d101      	bne.n	8006f8c <HAL_ADC_ConfigChannel+0x1c>
 8006f88:	2302      	movs	r3, #2
 8006f8a:	e105      	b.n	8007198 <HAL_ADC_ConfigChannel+0x228>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b09      	cmp	r3, #9
 8006f9a:	d925      	bls.n	8006fe8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68d9      	ldr	r1, [r3, #12]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	461a      	mov	r2, r3
 8006faa:	4613      	mov	r3, r2
 8006fac:	005b      	lsls	r3, r3, #1
 8006fae:	4413      	add	r3, r2
 8006fb0:	3b1e      	subs	r3, #30
 8006fb2:	2207      	movs	r2, #7
 8006fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb8:	43da      	mvns	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	400a      	ands	r2, r1
 8006fc0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68d9      	ldr	r1, [r3, #12]
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	689a      	ldr	r2, [r3, #8]
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	005b      	lsls	r3, r3, #1
 8006fd8:	4403      	add	r3, r0
 8006fda:	3b1e      	subs	r3, #30
 8006fdc:	409a      	lsls	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	430a      	orrs	r2, r1
 8006fe4:	60da      	str	r2, [r3, #12]
 8006fe6:	e022      	b.n	800702e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6919      	ldr	r1, [r3, #16]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	005b      	lsls	r3, r3, #1
 8006ffa:	4413      	add	r3, r2
 8006ffc:	2207      	movs	r2, #7
 8006ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8007002:	43da      	mvns	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	400a      	ands	r2, r1
 800700a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6919      	ldr	r1, [r3, #16]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	689a      	ldr	r2, [r3, #8]
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	b29b      	uxth	r3, r3
 800701c:	4618      	mov	r0, r3
 800701e:	4603      	mov	r3, r0
 8007020:	005b      	lsls	r3, r3, #1
 8007022:	4403      	add	r3, r0
 8007024:	409a      	lsls	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	430a      	orrs	r2, r1
 800702c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	2b06      	cmp	r3, #6
 8007034:	d824      	bhi.n	8007080 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	4613      	mov	r3, r2
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	4413      	add	r3, r2
 8007046:	3b05      	subs	r3, #5
 8007048:	221f      	movs	r2, #31
 800704a:	fa02 f303 	lsl.w	r3, r2, r3
 800704e:	43da      	mvns	r2, r3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	400a      	ands	r2, r1
 8007056:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	b29b      	uxth	r3, r3
 8007064:	4618      	mov	r0, r3
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	685a      	ldr	r2, [r3, #4]
 800706a:	4613      	mov	r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4413      	add	r3, r2
 8007070:	3b05      	subs	r3, #5
 8007072:	fa00 f203 	lsl.w	r2, r0, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	430a      	orrs	r2, r1
 800707c:	635a      	str	r2, [r3, #52]	@ 0x34
 800707e:	e04c      	b.n	800711a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	2b0c      	cmp	r3, #12
 8007086:	d824      	bhi.n	80070d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	685a      	ldr	r2, [r3, #4]
 8007092:	4613      	mov	r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	4413      	add	r3, r2
 8007098:	3b23      	subs	r3, #35	@ 0x23
 800709a:	221f      	movs	r2, #31
 800709c:	fa02 f303 	lsl.w	r3, r2, r3
 80070a0:	43da      	mvns	r2, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	400a      	ands	r2, r1
 80070a8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	4618      	mov	r0, r3
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	4613      	mov	r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	3b23      	subs	r3, #35	@ 0x23
 80070c4:	fa00 f203 	lsl.w	r2, r0, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	430a      	orrs	r2, r1
 80070ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80070d0:	e023      	b.n	800711a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	685a      	ldr	r2, [r3, #4]
 80070dc:	4613      	mov	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	3b41      	subs	r3, #65	@ 0x41
 80070e4:	221f      	movs	r2, #31
 80070e6:	fa02 f303 	lsl.w	r3, r2, r3
 80070ea:	43da      	mvns	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	400a      	ands	r2, r1
 80070f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	b29b      	uxth	r3, r3
 8007100:	4618      	mov	r0, r3
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	685a      	ldr	r2, [r3, #4]
 8007106:	4613      	mov	r3, r2
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	4413      	add	r3, r2
 800710c:	3b41      	subs	r3, #65	@ 0x41
 800710e:	fa00 f203 	lsl.w	r2, r0, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	430a      	orrs	r2, r1
 8007118:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800711a:	4b22      	ldr	r3, [pc, #136]	@ (80071a4 <HAL_ADC_ConfigChannel+0x234>)
 800711c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a21      	ldr	r2, [pc, #132]	@ (80071a8 <HAL_ADC_ConfigChannel+0x238>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d109      	bne.n	800713c <HAL_ADC_ConfigChannel+0x1cc>
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2b12      	cmp	r3, #18
 800712e:	d105      	bne.n	800713c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a19      	ldr	r2, [pc, #100]	@ (80071a8 <HAL_ADC_ConfigChannel+0x238>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d123      	bne.n	800718e <HAL_ADC_ConfigChannel+0x21e>
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2b10      	cmp	r3, #16
 800714c:	d003      	beq.n	8007156 <HAL_ADC_ConfigChannel+0x1e6>
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2b11      	cmp	r3, #17
 8007154:	d11b      	bne.n	800718e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2b10      	cmp	r3, #16
 8007168:	d111      	bne.n	800718e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800716a:	4b10      	ldr	r3, [pc, #64]	@ (80071ac <HAL_ADC_ConfigChannel+0x23c>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a10      	ldr	r2, [pc, #64]	@ (80071b0 <HAL_ADC_ConfigChannel+0x240>)
 8007170:	fba2 2303 	umull	r2, r3, r2, r3
 8007174:	0c9a      	lsrs	r2, r3, #18
 8007176:	4613      	mov	r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	4413      	add	r3, r2
 800717c:	005b      	lsls	r3, r3, #1
 800717e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8007180:	e002      	b.n	8007188 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	3b01      	subs	r3, #1
 8007186:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1f9      	bne.n	8007182 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3714      	adds	r7, #20
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr
 80071a4:	40012300 	.word	0x40012300
 80071a8:	40012000 	.word	0x40012000
 80071ac:	20000004 	.word	0x20000004
 80071b0:	431bde83 	.word	0x431bde83

080071b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b085      	sub	sp, #20
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80071bc:	4b79      	ldr	r3, [pc, #484]	@ (80073a4 <ADC_Init+0x1f0>)
 80071be:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	431a      	orrs	r2, r3
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	685a      	ldr	r2, [r3, #4]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80071e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	6859      	ldr	r1, [r3, #4]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	021a      	lsls	r2, r3, #8
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	430a      	orrs	r2, r1
 80071fc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800720c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	6859      	ldr	r1, [r3, #4]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	689a      	ldr	r2, [r3, #8]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	430a      	orrs	r2, r1
 800721e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	689a      	ldr	r2, [r3, #8]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800722e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6899      	ldr	r1, [r3, #8]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	68da      	ldr	r2, [r3, #12]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	430a      	orrs	r2, r1
 8007240:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007246:	4a58      	ldr	r2, [pc, #352]	@ (80073a8 <ADC_Init+0x1f4>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d022      	beq.n	8007292 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	689a      	ldr	r2, [r3, #8]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800725a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	6899      	ldr	r1, [r3, #8]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	430a      	orrs	r2, r1
 800726c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	689a      	ldr	r2, [r3, #8]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800727c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	6899      	ldr	r1, [r3, #8]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	609a      	str	r2, [r3, #8]
 8007290:	e00f      	b.n	80072b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	689a      	ldr	r2, [r3, #8]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80072a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	689a      	ldr	r2, [r3, #8]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80072b0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	689a      	ldr	r2, [r3, #8]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f022 0202 	bic.w	r2, r2, #2
 80072c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	6899      	ldr	r1, [r3, #8]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	7e1b      	ldrb	r3, [r3, #24]
 80072cc:	005a      	lsls	r2, r3, #1
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	430a      	orrs	r2, r1
 80072d4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d01b      	beq.n	8007318 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	685a      	ldr	r2, [r3, #4]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072ee:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	685a      	ldr	r2, [r3, #4]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80072fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6859      	ldr	r1, [r3, #4]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800730a:	3b01      	subs	r3, #1
 800730c:	035a      	lsls	r2, r3, #13
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	430a      	orrs	r2, r1
 8007314:	605a      	str	r2, [r3, #4]
 8007316:	e007      	b.n	8007328 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	685a      	ldr	r2, [r3, #4]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007326:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8007336:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	69db      	ldr	r3, [r3, #28]
 8007342:	3b01      	subs	r3, #1
 8007344:	051a      	lsls	r2, r3, #20
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	430a      	orrs	r2, r1
 800734c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	689a      	ldr	r2, [r3, #8]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800735c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	6899      	ldr	r1, [r3, #8]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800736a:	025a      	lsls	r2, r3, #9
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	430a      	orrs	r2, r1
 8007372:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	689a      	ldr	r2, [r3, #8]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007382:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	6899      	ldr	r1, [r3, #8]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	695b      	ldr	r3, [r3, #20]
 800738e:	029a      	lsls	r2, r3, #10
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	430a      	orrs	r2, r1
 8007396:	609a      	str	r2, [r3, #8]
}
 8007398:	bf00      	nop
 800739a:	3714      	adds	r7, #20
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr
 80073a4:	40012300 	.word	0x40012300
 80073a8:	0f000001 	.word	0x0f000001

080073ac <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073b8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073be:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d13c      	bne.n	8007440 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ca:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d12b      	bne.n	8007438 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d127      	bne.n	8007438 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ee:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d006      	beq.n	8007404 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007400:	2b00      	cmp	r3, #0
 8007402:	d119      	bne.n	8007438 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	685a      	ldr	r2, [r3, #4]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f022 0220 	bic.w	r2, r2, #32
 8007412:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007418:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007424:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007428:	2b00      	cmp	r3, #0
 800742a:	d105      	bne.n	8007438 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007430:	f043 0201 	orr.w	r2, r3, #1
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f7ff fd7b 	bl	8006f34 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800743e:	e00e      	b.n	800745e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007444:	f003 0310 	and.w	r3, r3, #16
 8007448:	2b00      	cmp	r3, #0
 800744a:	d003      	beq.n	8007454 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	f7ff fd85 	bl	8006f5c <HAL_ADC_ErrorCallback>
}
 8007452:	e004      	b.n	800745e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	4798      	blx	r3
}
 800745e:	bf00      	nop
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b084      	sub	sp, #16
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007472:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f7ff fd67 	bl	8006f48 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800747a:	bf00      	nop
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b084      	sub	sp, #16
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800748e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2240      	movs	r2, #64	@ 0x40
 8007494:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800749a:	f043 0204 	orr.w	r2, r3, #4
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f7ff fd5a 	bl	8006f5c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80074a8:	bf00      	nop
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <__NVIC_SetPriorityGrouping>:
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f003 0307 	and.w	r3, r3, #7
 80074be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80074c0:	4b0c      	ldr	r3, [pc, #48]	@ (80074f4 <__NVIC_SetPriorityGrouping+0x44>)
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80074cc:	4013      	ands	r3, r2
 80074ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80074d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80074dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80074e2:	4a04      	ldr	r2, [pc, #16]	@ (80074f4 <__NVIC_SetPriorityGrouping+0x44>)
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	60d3      	str	r3, [r2, #12]
}
 80074e8:	bf00      	nop
 80074ea:	3714      	adds	r7, #20
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr
 80074f4:	e000ed00 	.word	0xe000ed00

080074f8 <__NVIC_GetPriorityGrouping>:
{
 80074f8:	b480      	push	{r7}
 80074fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80074fc:	4b04      	ldr	r3, [pc, #16]	@ (8007510 <__NVIC_GetPriorityGrouping+0x18>)
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	0a1b      	lsrs	r3, r3, #8
 8007502:	f003 0307 	and.w	r3, r3, #7
}
 8007506:	4618      	mov	r0, r3
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr
 8007510:	e000ed00 	.word	0xe000ed00

08007514 <__NVIC_EnableIRQ>:
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	4603      	mov	r3, r0
 800751c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800751e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007522:	2b00      	cmp	r3, #0
 8007524:	db0b      	blt.n	800753e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007526:	79fb      	ldrb	r3, [r7, #7]
 8007528:	f003 021f 	and.w	r2, r3, #31
 800752c:	4907      	ldr	r1, [pc, #28]	@ (800754c <__NVIC_EnableIRQ+0x38>)
 800752e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007532:	095b      	lsrs	r3, r3, #5
 8007534:	2001      	movs	r0, #1
 8007536:	fa00 f202 	lsl.w	r2, r0, r2
 800753a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800753e:	bf00      	nop
 8007540:	370c      	adds	r7, #12
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	e000e100 	.word	0xe000e100

08007550 <__NVIC_SetPriority>:
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	4603      	mov	r3, r0
 8007558:	6039      	str	r1, [r7, #0]
 800755a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800755c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007560:	2b00      	cmp	r3, #0
 8007562:	db0a      	blt.n	800757a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	b2da      	uxtb	r2, r3
 8007568:	490c      	ldr	r1, [pc, #48]	@ (800759c <__NVIC_SetPriority+0x4c>)
 800756a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800756e:	0112      	lsls	r2, r2, #4
 8007570:	b2d2      	uxtb	r2, r2
 8007572:	440b      	add	r3, r1
 8007574:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007578:	e00a      	b.n	8007590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	b2da      	uxtb	r2, r3
 800757e:	4908      	ldr	r1, [pc, #32]	@ (80075a0 <__NVIC_SetPriority+0x50>)
 8007580:	79fb      	ldrb	r3, [r7, #7]
 8007582:	f003 030f 	and.w	r3, r3, #15
 8007586:	3b04      	subs	r3, #4
 8007588:	0112      	lsls	r2, r2, #4
 800758a:	b2d2      	uxtb	r2, r2
 800758c:	440b      	add	r3, r1
 800758e:	761a      	strb	r2, [r3, #24]
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr
 800759c:	e000e100 	.word	0xe000e100
 80075a0:	e000ed00 	.word	0xe000ed00

080075a4 <NVIC_EncodePriority>:
{
 80075a4:	b480      	push	{r7}
 80075a6:	b089      	sub	sp, #36	@ 0x24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f003 0307 	and.w	r3, r3, #7
 80075b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	f1c3 0307 	rsb	r3, r3, #7
 80075be:	2b04      	cmp	r3, #4
 80075c0:	bf28      	it	cs
 80075c2:	2304      	movcs	r3, #4
 80075c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	3304      	adds	r3, #4
 80075ca:	2b06      	cmp	r3, #6
 80075cc:	d902      	bls.n	80075d4 <NVIC_EncodePriority+0x30>
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	3b03      	subs	r3, #3
 80075d2:	e000      	b.n	80075d6 <NVIC_EncodePriority+0x32>
 80075d4:	2300      	movs	r3, #0
 80075d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075d8:	f04f 32ff 	mov.w	r2, #4294967295
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	fa02 f303 	lsl.w	r3, r2, r3
 80075e2:	43da      	mvns	r2, r3
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	401a      	ands	r2, r3
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80075ec:	f04f 31ff 	mov.w	r1, #4294967295
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	fa01 f303 	lsl.w	r3, r1, r3
 80075f6:	43d9      	mvns	r1, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075fc:	4313      	orrs	r3, r2
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3724      	adds	r7, #36	@ 0x24
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
	...

0800760c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	3b01      	subs	r3, #1
 8007618:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800761c:	d301      	bcc.n	8007622 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800761e:	2301      	movs	r3, #1
 8007620:	e00f      	b.n	8007642 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007622:	4a0a      	ldr	r2, [pc, #40]	@ (800764c <SysTick_Config+0x40>)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	3b01      	subs	r3, #1
 8007628:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800762a:	210f      	movs	r1, #15
 800762c:	f04f 30ff 	mov.w	r0, #4294967295
 8007630:	f7ff ff8e 	bl	8007550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007634:	4b05      	ldr	r3, [pc, #20]	@ (800764c <SysTick_Config+0x40>)
 8007636:	2200      	movs	r2, #0
 8007638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800763a:	4b04      	ldr	r3, [pc, #16]	@ (800764c <SysTick_Config+0x40>)
 800763c:	2207      	movs	r2, #7
 800763e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3708      	adds	r7, #8
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	e000e010 	.word	0xe000e010

08007650 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f7ff ff29 	bl	80074b0 <__NVIC_SetPriorityGrouping>
}
 800765e:	bf00      	nop
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007666:	b580      	push	{r7, lr}
 8007668:	b086      	sub	sp, #24
 800766a:	af00      	add	r7, sp, #0
 800766c:	4603      	mov	r3, r0
 800766e:	60b9      	str	r1, [r7, #8]
 8007670:	607a      	str	r2, [r7, #4]
 8007672:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007674:	2300      	movs	r3, #0
 8007676:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007678:	f7ff ff3e 	bl	80074f8 <__NVIC_GetPriorityGrouping>
 800767c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	68b9      	ldr	r1, [r7, #8]
 8007682:	6978      	ldr	r0, [r7, #20]
 8007684:	f7ff ff8e 	bl	80075a4 <NVIC_EncodePriority>
 8007688:	4602      	mov	r2, r0
 800768a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800768e:	4611      	mov	r1, r2
 8007690:	4618      	mov	r0, r3
 8007692:	f7ff ff5d 	bl	8007550 <__NVIC_SetPriority>
}
 8007696:	bf00      	nop
 8007698:	3718      	adds	r7, #24
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b082      	sub	sp, #8
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	4603      	mov	r3, r0
 80076a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80076a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076ac:	4618      	mov	r0, r3
 80076ae:	f7ff ff31 	bl	8007514 <__NVIC_EnableIRQ>
}
 80076b2:	bf00      	nop
 80076b4:	3708      	adds	r7, #8
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b082      	sub	sp, #8
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7ff ffa2 	bl	800760c <SysTick_Config>
 80076c8:	4603      	mov	r3, r0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3708      	adds	r7, #8
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
	...

080076d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b086      	sub	sp, #24
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80076dc:	2300      	movs	r3, #0
 80076de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80076e0:	f7ff faa4 	bl	8006c2c <HAL_GetTick>
 80076e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d101      	bne.n	80076f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e099      	b.n	8007824 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2202      	movs	r2, #2
 80076f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f022 0201 	bic.w	r2, r2, #1
 800770e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007710:	e00f      	b.n	8007732 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007712:	f7ff fa8b 	bl	8006c2c <HAL_GetTick>
 8007716:	4602      	mov	r2, r0
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	1ad3      	subs	r3, r2, r3
 800771c:	2b05      	cmp	r3, #5
 800771e:	d908      	bls.n	8007732 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2220      	movs	r2, #32
 8007724:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2203      	movs	r2, #3
 800772a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800772e:	2303      	movs	r3, #3
 8007730:	e078      	b.n	8007824 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0301 	and.w	r3, r3, #1
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1e8      	bne.n	8007712 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007748:	697a      	ldr	r2, [r7, #20]
 800774a:	4b38      	ldr	r3, [pc, #224]	@ (800782c <HAL_DMA_Init+0x158>)
 800774c:	4013      	ands	r3, r2
 800774e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685a      	ldr	r2, [r3, #4]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800775e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800776a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007776:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a1b      	ldr	r3, [r3, #32]
 800777c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	4313      	orrs	r3, r2
 8007782:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007788:	2b04      	cmp	r3, #4
 800778a:	d107      	bne.n	800779c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007794:	4313      	orrs	r3, r2
 8007796:	697a      	ldr	r2, [r7, #20]
 8007798:	4313      	orrs	r3, r2
 800779a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	697a      	ldr	r2, [r7, #20]
 80077a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	f023 0307 	bic.w	r3, r3, #7
 80077b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b8:	697a      	ldr	r2, [r7, #20]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c2:	2b04      	cmp	r3, #4
 80077c4:	d117      	bne.n	80077f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ca:	697a      	ldr	r2, [r7, #20]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00e      	beq.n	80077f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 fb01 	bl	8007de0 <DMA_CheckFifoParam>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d008      	beq.n	80077f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2240      	movs	r2, #64	@ 0x40
 80077e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80077f2:	2301      	movs	r3, #1
 80077f4:	e016      	b.n	8007824 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fab8 	bl	8007d74 <DMA_CalcBaseAndBitshift>
 8007804:	4603      	mov	r3, r0
 8007806:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800780c:	223f      	movs	r2, #63	@ 0x3f
 800780e:	409a      	lsls	r2, r3
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2201      	movs	r2, #1
 800781e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3718      	adds	r7, #24
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	f010803f 	.word	0xf010803f

08007830 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	607a      	str	r2, [r7, #4]
 800783c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800783e:	2300      	movs	r3, #0
 8007840:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007846:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800784e:	2b01      	cmp	r3, #1
 8007850:	d101      	bne.n	8007856 <HAL_DMA_Start_IT+0x26>
 8007852:	2302      	movs	r3, #2
 8007854:	e040      	b.n	80078d8 <HAL_DMA_Start_IT+0xa8>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2201      	movs	r2, #1
 800785a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007864:	b2db      	uxtb	r3, r3
 8007866:	2b01      	cmp	r3, #1
 8007868:	d12f      	bne.n	80078ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2202      	movs	r2, #2
 800786e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	68b9      	ldr	r1, [r7, #8]
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	f000 fa4a 	bl	8007d18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007888:	223f      	movs	r2, #63	@ 0x3f
 800788a:	409a      	lsls	r2, r3
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f042 0216 	orr.w	r2, r2, #22
 800789e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d007      	beq.n	80078b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f042 0208 	orr.w	r2, r2, #8
 80078b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f042 0201 	orr.w	r2, r2, #1
 80078c6:	601a      	str	r2, [r3, #0]
 80078c8:	e005      	b.n	80078d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2200      	movs	r2, #0
 80078ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80078d2:	2302      	movs	r3, #2
 80078d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80078d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3718      	adds	r7, #24
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80078ee:	f7ff f99d 	bl	8006c2c <HAL_GetTick>
 80078f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d008      	beq.n	8007912 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2280      	movs	r2, #128	@ 0x80
 8007904:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	e052      	b.n	80079b8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f022 0216 	bic.w	r2, r2, #22
 8007920:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	695a      	ldr	r2, [r3, #20]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007930:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007936:	2b00      	cmp	r3, #0
 8007938:	d103      	bne.n	8007942 <HAL_DMA_Abort+0x62>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800793e:	2b00      	cmp	r3, #0
 8007940:	d007      	beq.n	8007952 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f022 0208 	bic.w	r2, r2, #8
 8007950:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f022 0201 	bic.w	r2, r2, #1
 8007960:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007962:	e013      	b.n	800798c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007964:	f7ff f962 	bl	8006c2c <HAL_GetTick>
 8007968:	4602      	mov	r2, r0
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	2b05      	cmp	r3, #5
 8007970:	d90c      	bls.n	800798c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2220      	movs	r2, #32
 8007976:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2203      	movs	r2, #3
 800797c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8007988:	2303      	movs	r3, #3
 800798a:	e015      	b.n	80079b8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f003 0301 	and.w	r3, r3, #1
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1e4      	bne.n	8007964 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800799e:	223f      	movs	r2, #63	@ 0x3f
 80079a0:	409a      	lsls	r2, r3
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2201      	movs	r2, #1
 80079aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3710      	adds	r7, #16
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d004      	beq.n	80079de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2280      	movs	r2, #128	@ 0x80
 80079d8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e00c      	b.n	80079f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2205      	movs	r2, #5
 80079e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f022 0201 	bic.w	r2, r2, #1
 80079f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b086      	sub	sp, #24
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007a10:	4b8e      	ldr	r3, [pc, #568]	@ (8007c4c <HAL_DMA_IRQHandler+0x248>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a8e      	ldr	r2, [pc, #568]	@ (8007c50 <HAL_DMA_IRQHandler+0x24c>)
 8007a16:	fba2 2303 	umull	r2, r3, r2, r3
 8007a1a:	0a9b      	lsrs	r3, r3, #10
 8007a1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a2e:	2208      	movs	r2, #8
 8007a30:	409a      	lsls	r2, r3
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	4013      	ands	r3, r2
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d01a      	beq.n	8007a70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 0304 	and.w	r3, r3, #4
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d013      	beq.n	8007a70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f022 0204 	bic.w	r2, r2, #4
 8007a56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a5c:	2208      	movs	r2, #8
 8007a5e:	409a      	lsls	r2, r3
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a68:	f043 0201 	orr.w	r2, r3, #1
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a74:	2201      	movs	r2, #1
 8007a76:	409a      	lsls	r2, r3
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d012      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	695b      	ldr	r3, [r3, #20]
 8007a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00b      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a92:	2201      	movs	r2, #1
 8007a94:	409a      	lsls	r2, r3
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a9e:	f043 0202 	orr.w	r2, r3, #2
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007aaa:	2204      	movs	r2, #4
 8007aac:	409a      	lsls	r2, r3
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	4013      	ands	r3, r2
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d012      	beq.n	8007adc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 0302 	and.w	r3, r3, #2
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00b      	beq.n	8007adc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ac8:	2204      	movs	r2, #4
 8007aca:	409a      	lsls	r2, r3
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ad4:	f043 0204 	orr.w	r2, r3, #4
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ae0:	2210      	movs	r2, #16
 8007ae2:	409a      	lsls	r2, r3
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	4013      	ands	r3, r2
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d043      	beq.n	8007b74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 0308 	and.w	r3, r3, #8
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d03c      	beq.n	8007b74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007afe:	2210      	movs	r2, #16
 8007b00:	409a      	lsls	r2, r3
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d018      	beq.n	8007b46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d108      	bne.n	8007b34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d024      	beq.n	8007b74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	4798      	blx	r3
 8007b32:	e01f      	b.n	8007b74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d01b      	beq.n	8007b74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	4798      	blx	r3
 8007b44:	e016      	b.n	8007b74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d107      	bne.n	8007b64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f022 0208 	bic.w	r2, r2, #8
 8007b62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d003      	beq.n	8007b74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b78:	2220      	movs	r2, #32
 8007b7a:	409a      	lsls	r2, r3
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	4013      	ands	r3, r2
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f000 808f 	beq.w	8007ca4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 0310 	and.w	r3, r3, #16
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f000 8087 	beq.w	8007ca4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b9a:	2220      	movs	r2, #32
 8007b9c:	409a      	lsls	r2, r3
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	2b05      	cmp	r3, #5
 8007bac:	d136      	bne.n	8007c1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f022 0216 	bic.w	r2, r2, #22
 8007bbc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	695a      	ldr	r2, [r3, #20]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007bcc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d103      	bne.n	8007bde <HAL_DMA_IRQHandler+0x1da>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d007      	beq.n	8007bee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f022 0208 	bic.w	r2, r2, #8
 8007bec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bf2:	223f      	movs	r2, #63	@ 0x3f
 8007bf4:	409a      	lsls	r2, r3
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d07e      	beq.n	8007d10 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	4798      	blx	r3
        }
        return;
 8007c1a:	e079      	b.n	8007d10 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d01d      	beq.n	8007c66 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d10d      	bne.n	8007c54 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d031      	beq.n	8007ca4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	4798      	blx	r3
 8007c48:	e02c      	b.n	8007ca4 <HAL_DMA_IRQHandler+0x2a0>
 8007c4a:	bf00      	nop
 8007c4c:	20000004 	.word	0x20000004
 8007c50:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d023      	beq.n	8007ca4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	4798      	blx	r3
 8007c64:	e01e      	b.n	8007ca4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d10f      	bne.n	8007c94 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f022 0210 	bic.w	r2, r2, #16
 8007c82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d003      	beq.n	8007ca4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d032      	beq.n	8007d12 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cb0:	f003 0301 	and.w	r3, r3, #1
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d022      	beq.n	8007cfe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2205      	movs	r2, #5
 8007cbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f022 0201 	bic.w	r2, r2, #1
 8007cce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	60bb      	str	r3, [r7, #8]
 8007cd6:	697a      	ldr	r2, [r7, #20]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d307      	bcc.n	8007cec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 0301 	and.w	r3, r3, #1
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1f2      	bne.n	8007cd0 <HAL_DMA_IRQHandler+0x2cc>
 8007cea:	e000      	b.n	8007cee <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007cec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d005      	beq.n	8007d12 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	4798      	blx	r3
 8007d0e:	e000      	b.n	8007d12 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007d10:	bf00      	nop
    }
  }
}
 8007d12:	3718      	adds	r7, #24
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
 8007d24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007d34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	683a      	ldr	r2, [r7, #0]
 8007d3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	2b40      	cmp	r3, #64	@ 0x40
 8007d44:	d108      	bne.n	8007d58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	68ba      	ldr	r2, [r7, #8]
 8007d54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007d56:	e007      	b.n	8007d68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68ba      	ldr	r2, [r7, #8]
 8007d5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	60da      	str	r2, [r3, #12]
}
 8007d68:	bf00      	nop
 8007d6a:	3714      	adds	r7, #20
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b085      	sub	sp, #20
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	3b10      	subs	r3, #16
 8007d84:	4a14      	ldr	r2, [pc, #80]	@ (8007dd8 <DMA_CalcBaseAndBitshift+0x64>)
 8007d86:	fba2 2303 	umull	r2, r3, r2, r3
 8007d8a:	091b      	lsrs	r3, r3, #4
 8007d8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007d8e:	4a13      	ldr	r2, [pc, #76]	@ (8007ddc <DMA_CalcBaseAndBitshift+0x68>)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	4413      	add	r3, r2
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	461a      	mov	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2b03      	cmp	r3, #3
 8007da0:	d909      	bls.n	8007db6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8007daa:	f023 0303 	bic.w	r3, r3, #3
 8007dae:	1d1a      	adds	r2, r3, #4
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	659a      	str	r2, [r3, #88]	@ 0x58
 8007db4:	e007      	b.n	8007dc6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8007dbe:	f023 0303 	bic.w	r3, r3, #3
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3714      	adds	r7, #20
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr
 8007dd6:	bf00      	nop
 8007dd8:	aaaaaaab 	.word	0xaaaaaaab
 8007ddc:	0800f9fc 	.word	0x0800f9fc

08007de0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007de8:	2300      	movs	r3, #0
 8007dea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007df0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d11f      	bne.n	8007e3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	2b03      	cmp	r3, #3
 8007dfe:	d856      	bhi.n	8007eae <DMA_CheckFifoParam+0xce>
 8007e00:	a201      	add	r2, pc, #4	@ (adr r2, 8007e08 <DMA_CheckFifoParam+0x28>)
 8007e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e06:	bf00      	nop
 8007e08:	08007e19 	.word	0x08007e19
 8007e0c:	08007e2b 	.word	0x08007e2b
 8007e10:	08007e19 	.word	0x08007e19
 8007e14:	08007eaf 	.word	0x08007eaf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d046      	beq.n	8007eb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007e28:	e043      	b.n	8007eb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e2e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007e32:	d140      	bne.n	8007eb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007e38:	e03d      	b.n	8007eb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	699b      	ldr	r3, [r3, #24]
 8007e3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e42:	d121      	bne.n	8007e88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	2b03      	cmp	r3, #3
 8007e48:	d837      	bhi.n	8007eba <DMA_CheckFifoParam+0xda>
 8007e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e50 <DMA_CheckFifoParam+0x70>)
 8007e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e50:	08007e61 	.word	0x08007e61
 8007e54:	08007e67 	.word	0x08007e67
 8007e58:	08007e61 	.word	0x08007e61
 8007e5c:	08007e79 	.word	0x08007e79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	73fb      	strb	r3, [r7, #15]
      break;
 8007e64:	e030      	b.n	8007ec8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d025      	beq.n	8007ebe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007e76:	e022      	b.n	8007ebe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e7c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007e80:	d11f      	bne.n	8007ec2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007e86:	e01c      	b.n	8007ec2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d903      	bls.n	8007e96 <DMA_CheckFifoParam+0xb6>
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	2b03      	cmp	r3, #3
 8007e92:	d003      	beq.n	8007e9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007e94:	e018      	b.n	8007ec8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	73fb      	strb	r3, [r7, #15]
      break;
 8007e9a:	e015      	b.n	8007ec8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ea0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00e      	beq.n	8007ec6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8007eac:	e00b      	b.n	8007ec6 <DMA_CheckFifoParam+0xe6>
      break;
 8007eae:	bf00      	nop
 8007eb0:	e00a      	b.n	8007ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8007eb2:	bf00      	nop
 8007eb4:	e008      	b.n	8007ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8007eb6:	bf00      	nop
 8007eb8:	e006      	b.n	8007ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8007eba:	bf00      	nop
 8007ebc:	e004      	b.n	8007ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8007ebe:	bf00      	nop
 8007ec0:	e002      	b.n	8007ec8 <DMA_CheckFifoParam+0xe8>
      break;   
 8007ec2:	bf00      	nop
 8007ec4:	e000      	b.n	8007ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8007ec6:	bf00      	nop
    }
  } 
  
  return status; 
 8007ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3714      	adds	r7, #20
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop

08007ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b089      	sub	sp, #36	@ 0x24
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007eea:	2300      	movs	r3, #0
 8007eec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007eee:	2300      	movs	r3, #0
 8007ef0:	61fb      	str	r3, [r7, #28]
 8007ef2:	e16b      	b.n	80081cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8007efc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	4013      	ands	r3, r2
 8007f06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007f08:	693a      	ldr	r2, [r7, #16]
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	f040 815a 	bne.w	80081c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	f003 0303 	and.w	r3, r3, #3
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d005      	beq.n	8007f2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d130      	bne.n	8007f8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	005b      	lsls	r3, r3, #1
 8007f34:	2203      	movs	r2, #3
 8007f36:	fa02 f303 	lsl.w	r3, r2, r3
 8007f3a:	43db      	mvns	r3, r3
 8007f3c:	69ba      	ldr	r2, [r7, #24]
 8007f3e:	4013      	ands	r3, r2
 8007f40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	68da      	ldr	r2, [r3, #12]
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	005b      	lsls	r3, r3, #1
 8007f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f4e:	69ba      	ldr	r2, [r7, #24]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	69ba      	ldr	r2, [r7, #24]
 8007f58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007f60:	2201      	movs	r2, #1
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	fa02 f303 	lsl.w	r3, r2, r3
 8007f68:	43db      	mvns	r3, r3
 8007f6a:	69ba      	ldr	r2, [r7, #24]
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	091b      	lsrs	r3, r3, #4
 8007f76:	f003 0201 	and.w	r2, r3, #1
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f80:	69ba      	ldr	r2, [r7, #24]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	69ba      	ldr	r2, [r7, #24]
 8007f8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	f003 0303 	and.w	r3, r3, #3
 8007f94:	2b03      	cmp	r3, #3
 8007f96:	d017      	beq.n	8007fc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	005b      	lsls	r3, r3, #1
 8007fa2:	2203      	movs	r2, #3
 8007fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8007fa8:	43db      	mvns	r3, r3
 8007faa:	69ba      	ldr	r2, [r7, #24]
 8007fac:	4013      	ands	r3, r2
 8007fae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	689a      	ldr	r2, [r3, #8]
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	005b      	lsls	r3, r3, #1
 8007fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fbc:	69ba      	ldr	r2, [r7, #24]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	69ba      	ldr	r2, [r7, #24]
 8007fc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	f003 0303 	and.w	r3, r3, #3
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d123      	bne.n	800801c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	08da      	lsrs	r2, r3, #3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	3208      	adds	r2, #8
 8007fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	f003 0307 	and.w	r3, r3, #7
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	220f      	movs	r2, #15
 8007fec:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff0:	43db      	mvns	r3, r3
 8007ff2:	69ba      	ldr	r2, [r7, #24]
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	691a      	ldr	r2, [r3, #16]
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	f003 0307 	and.w	r3, r3, #7
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	fa02 f303 	lsl.w	r3, r2, r3
 8008008:	69ba      	ldr	r2, [r7, #24]
 800800a:	4313      	orrs	r3, r2
 800800c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	08da      	lsrs	r2, r3, #3
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	3208      	adds	r2, #8
 8008016:	69b9      	ldr	r1, [r7, #24]
 8008018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	005b      	lsls	r3, r3, #1
 8008026:	2203      	movs	r2, #3
 8008028:	fa02 f303 	lsl.w	r3, r2, r3
 800802c:	43db      	mvns	r3, r3
 800802e:	69ba      	ldr	r2, [r7, #24]
 8008030:	4013      	ands	r3, r2
 8008032:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	f003 0203 	and.w	r2, r3, #3
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	005b      	lsls	r3, r3, #1
 8008040:	fa02 f303 	lsl.w	r3, r2, r3
 8008044:	69ba      	ldr	r2, [r7, #24]
 8008046:	4313      	orrs	r3, r2
 8008048:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	69ba      	ldr	r2, [r7, #24]
 800804e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008058:	2b00      	cmp	r3, #0
 800805a:	f000 80b4 	beq.w	80081c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800805e:	2300      	movs	r3, #0
 8008060:	60fb      	str	r3, [r7, #12]
 8008062:	4b60      	ldr	r3, [pc, #384]	@ (80081e4 <HAL_GPIO_Init+0x30c>)
 8008064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008066:	4a5f      	ldr	r2, [pc, #380]	@ (80081e4 <HAL_GPIO_Init+0x30c>)
 8008068:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800806c:	6453      	str	r3, [r2, #68]	@ 0x44
 800806e:	4b5d      	ldr	r3, [pc, #372]	@ (80081e4 <HAL_GPIO_Init+0x30c>)
 8008070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008072:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008076:	60fb      	str	r3, [r7, #12]
 8008078:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800807a:	4a5b      	ldr	r2, [pc, #364]	@ (80081e8 <HAL_GPIO_Init+0x310>)
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	089b      	lsrs	r3, r3, #2
 8008080:	3302      	adds	r3, #2
 8008082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008086:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	f003 0303 	and.w	r3, r3, #3
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	220f      	movs	r2, #15
 8008092:	fa02 f303 	lsl.w	r3, r2, r3
 8008096:	43db      	mvns	r3, r3
 8008098:	69ba      	ldr	r2, [r7, #24]
 800809a:	4013      	ands	r3, r2
 800809c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4a52      	ldr	r2, [pc, #328]	@ (80081ec <HAL_GPIO_Init+0x314>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d02b      	beq.n	80080fe <HAL_GPIO_Init+0x226>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a51      	ldr	r2, [pc, #324]	@ (80081f0 <HAL_GPIO_Init+0x318>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d025      	beq.n	80080fa <HAL_GPIO_Init+0x222>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a50      	ldr	r2, [pc, #320]	@ (80081f4 <HAL_GPIO_Init+0x31c>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d01f      	beq.n	80080f6 <HAL_GPIO_Init+0x21e>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a4f      	ldr	r2, [pc, #316]	@ (80081f8 <HAL_GPIO_Init+0x320>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d019      	beq.n	80080f2 <HAL_GPIO_Init+0x21a>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a4e      	ldr	r2, [pc, #312]	@ (80081fc <HAL_GPIO_Init+0x324>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d013      	beq.n	80080ee <HAL_GPIO_Init+0x216>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a4d      	ldr	r2, [pc, #308]	@ (8008200 <HAL_GPIO_Init+0x328>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d00d      	beq.n	80080ea <HAL_GPIO_Init+0x212>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a4c      	ldr	r2, [pc, #304]	@ (8008204 <HAL_GPIO_Init+0x32c>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d007      	beq.n	80080e6 <HAL_GPIO_Init+0x20e>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a4b      	ldr	r2, [pc, #300]	@ (8008208 <HAL_GPIO_Init+0x330>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d101      	bne.n	80080e2 <HAL_GPIO_Init+0x20a>
 80080de:	2307      	movs	r3, #7
 80080e0:	e00e      	b.n	8008100 <HAL_GPIO_Init+0x228>
 80080e2:	2308      	movs	r3, #8
 80080e4:	e00c      	b.n	8008100 <HAL_GPIO_Init+0x228>
 80080e6:	2306      	movs	r3, #6
 80080e8:	e00a      	b.n	8008100 <HAL_GPIO_Init+0x228>
 80080ea:	2305      	movs	r3, #5
 80080ec:	e008      	b.n	8008100 <HAL_GPIO_Init+0x228>
 80080ee:	2304      	movs	r3, #4
 80080f0:	e006      	b.n	8008100 <HAL_GPIO_Init+0x228>
 80080f2:	2303      	movs	r3, #3
 80080f4:	e004      	b.n	8008100 <HAL_GPIO_Init+0x228>
 80080f6:	2302      	movs	r3, #2
 80080f8:	e002      	b.n	8008100 <HAL_GPIO_Init+0x228>
 80080fa:	2301      	movs	r3, #1
 80080fc:	e000      	b.n	8008100 <HAL_GPIO_Init+0x228>
 80080fe:	2300      	movs	r3, #0
 8008100:	69fa      	ldr	r2, [r7, #28]
 8008102:	f002 0203 	and.w	r2, r2, #3
 8008106:	0092      	lsls	r2, r2, #2
 8008108:	4093      	lsls	r3, r2
 800810a:	69ba      	ldr	r2, [r7, #24]
 800810c:	4313      	orrs	r3, r2
 800810e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008110:	4935      	ldr	r1, [pc, #212]	@ (80081e8 <HAL_GPIO_Init+0x310>)
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	089b      	lsrs	r3, r3, #2
 8008116:	3302      	adds	r3, #2
 8008118:	69ba      	ldr	r2, [r7, #24]
 800811a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800811e:	4b3b      	ldr	r3, [pc, #236]	@ (800820c <HAL_GPIO_Init+0x334>)
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	43db      	mvns	r3, r3
 8008128:	69ba      	ldr	r2, [r7, #24]
 800812a:	4013      	ands	r3, r2
 800812c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008136:	2b00      	cmp	r3, #0
 8008138:	d003      	beq.n	8008142 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800813a:	69ba      	ldr	r2, [r7, #24]
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	4313      	orrs	r3, r2
 8008140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008142:	4a32      	ldr	r2, [pc, #200]	@ (800820c <HAL_GPIO_Init+0x334>)
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008148:	4b30      	ldr	r3, [pc, #192]	@ (800820c <HAL_GPIO_Init+0x334>)
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	43db      	mvns	r3, r3
 8008152:	69ba      	ldr	r2, [r7, #24]
 8008154:	4013      	ands	r3, r2
 8008156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008160:	2b00      	cmp	r3, #0
 8008162:	d003      	beq.n	800816c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008164:	69ba      	ldr	r2, [r7, #24]
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	4313      	orrs	r3, r2
 800816a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800816c:	4a27      	ldr	r2, [pc, #156]	@ (800820c <HAL_GPIO_Init+0x334>)
 800816e:	69bb      	ldr	r3, [r7, #24]
 8008170:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008172:	4b26      	ldr	r3, [pc, #152]	@ (800820c <HAL_GPIO_Init+0x334>)
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	43db      	mvns	r3, r3
 800817c:	69ba      	ldr	r2, [r7, #24]
 800817e:	4013      	ands	r3, r2
 8008180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800818a:	2b00      	cmp	r3, #0
 800818c:	d003      	beq.n	8008196 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800818e:	69ba      	ldr	r2, [r7, #24]
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	4313      	orrs	r3, r2
 8008194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008196:	4a1d      	ldr	r2, [pc, #116]	@ (800820c <HAL_GPIO_Init+0x334>)
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800819c:	4b1b      	ldr	r3, [pc, #108]	@ (800820c <HAL_GPIO_Init+0x334>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	43db      	mvns	r3, r3
 80081a6:	69ba      	ldr	r2, [r7, #24]
 80081a8:	4013      	ands	r3, r2
 80081aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d003      	beq.n	80081c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80081b8:	69ba      	ldr	r2, [r7, #24]
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	4313      	orrs	r3, r2
 80081be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80081c0:	4a12      	ldr	r2, [pc, #72]	@ (800820c <HAL_GPIO_Init+0x334>)
 80081c2:	69bb      	ldr	r3, [r7, #24]
 80081c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80081c6:	69fb      	ldr	r3, [r7, #28]
 80081c8:	3301      	adds	r3, #1
 80081ca:	61fb      	str	r3, [r7, #28]
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	2b0f      	cmp	r3, #15
 80081d0:	f67f ae90 	bls.w	8007ef4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80081d4:	bf00      	nop
 80081d6:	bf00      	nop
 80081d8:	3724      	adds	r7, #36	@ 0x24
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	40023800 	.word	0x40023800
 80081e8:	40013800 	.word	0x40013800
 80081ec:	40020000 	.word	0x40020000
 80081f0:	40020400 	.word	0x40020400
 80081f4:	40020800 	.word	0x40020800
 80081f8:	40020c00 	.word	0x40020c00
 80081fc:	40021000 	.word	0x40021000
 8008200:	40021400 	.word	0x40021400
 8008204:	40021800 	.word	0x40021800
 8008208:	40021c00 	.word	0x40021c00
 800820c:	40013c00 	.word	0x40013c00

08008210 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d101      	bne.n	8008222 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e12b      	b.n	800847a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008228:	b2db      	uxtb	r3, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	d106      	bne.n	800823c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f7fb fab8 	bl	80037ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2224      	movs	r2, #36	@ 0x24
 8008240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f022 0201 	bic.w	r2, r2, #1
 8008252:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008262:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008272:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008274:	f001 fc60 	bl	8009b38 <HAL_RCC_GetPCLK1Freq>
 8008278:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	4a81      	ldr	r2, [pc, #516]	@ (8008484 <HAL_I2C_Init+0x274>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d807      	bhi.n	8008294 <HAL_I2C_Init+0x84>
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	4a80      	ldr	r2, [pc, #512]	@ (8008488 <HAL_I2C_Init+0x278>)
 8008288:	4293      	cmp	r3, r2
 800828a:	bf94      	ite	ls
 800828c:	2301      	movls	r3, #1
 800828e:	2300      	movhi	r3, #0
 8008290:	b2db      	uxtb	r3, r3
 8008292:	e006      	b.n	80082a2 <HAL_I2C_Init+0x92>
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	4a7d      	ldr	r2, [pc, #500]	@ (800848c <HAL_I2C_Init+0x27c>)
 8008298:	4293      	cmp	r3, r2
 800829a:	bf94      	ite	ls
 800829c:	2301      	movls	r3, #1
 800829e:	2300      	movhi	r3, #0
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d001      	beq.n	80082aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e0e7      	b.n	800847a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	4a78      	ldr	r2, [pc, #480]	@ (8008490 <HAL_I2C_Init+0x280>)
 80082ae:	fba2 2303 	umull	r2, r3, r2, r3
 80082b2:	0c9b      	lsrs	r3, r3, #18
 80082b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	430a      	orrs	r2, r1
 80082c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	6a1b      	ldr	r3, [r3, #32]
 80082d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	4a6a      	ldr	r2, [pc, #424]	@ (8008484 <HAL_I2C_Init+0x274>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d802      	bhi.n	80082e4 <HAL_I2C_Init+0xd4>
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	3301      	adds	r3, #1
 80082e2:	e009      	b.n	80082f8 <HAL_I2C_Init+0xe8>
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80082ea:	fb02 f303 	mul.w	r3, r2, r3
 80082ee:	4a69      	ldr	r2, [pc, #420]	@ (8008494 <HAL_I2C_Init+0x284>)
 80082f0:	fba2 2303 	umull	r2, r3, r2, r3
 80082f4:	099b      	lsrs	r3, r3, #6
 80082f6:	3301      	adds	r3, #1
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	6812      	ldr	r2, [r2, #0]
 80082fc:	430b      	orrs	r3, r1
 80082fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	69db      	ldr	r3, [r3, #28]
 8008306:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800830a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	495c      	ldr	r1, [pc, #368]	@ (8008484 <HAL_I2C_Init+0x274>)
 8008314:	428b      	cmp	r3, r1
 8008316:	d819      	bhi.n	800834c <HAL_I2C_Init+0x13c>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	1e59      	subs	r1, r3, #1
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	005b      	lsls	r3, r3, #1
 8008322:	fbb1 f3f3 	udiv	r3, r1, r3
 8008326:	1c59      	adds	r1, r3, #1
 8008328:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800832c:	400b      	ands	r3, r1
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00a      	beq.n	8008348 <HAL_I2C_Init+0x138>
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	1e59      	subs	r1, r3, #1
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	005b      	lsls	r3, r3, #1
 800833c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008340:	3301      	adds	r3, #1
 8008342:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008346:	e051      	b.n	80083ec <HAL_I2C_Init+0x1dc>
 8008348:	2304      	movs	r3, #4
 800834a:	e04f      	b.n	80083ec <HAL_I2C_Init+0x1dc>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d111      	bne.n	8008378 <HAL_I2C_Init+0x168>
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	1e58      	subs	r0, r3, #1
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6859      	ldr	r1, [r3, #4]
 800835c:	460b      	mov	r3, r1
 800835e:	005b      	lsls	r3, r3, #1
 8008360:	440b      	add	r3, r1
 8008362:	fbb0 f3f3 	udiv	r3, r0, r3
 8008366:	3301      	adds	r3, #1
 8008368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800836c:	2b00      	cmp	r3, #0
 800836e:	bf0c      	ite	eq
 8008370:	2301      	moveq	r3, #1
 8008372:	2300      	movne	r3, #0
 8008374:	b2db      	uxtb	r3, r3
 8008376:	e012      	b.n	800839e <HAL_I2C_Init+0x18e>
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	1e58      	subs	r0, r3, #1
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6859      	ldr	r1, [r3, #4]
 8008380:	460b      	mov	r3, r1
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	440b      	add	r3, r1
 8008386:	0099      	lsls	r1, r3, #2
 8008388:	440b      	add	r3, r1
 800838a:	fbb0 f3f3 	udiv	r3, r0, r3
 800838e:	3301      	adds	r3, #1
 8008390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008394:	2b00      	cmp	r3, #0
 8008396:	bf0c      	ite	eq
 8008398:	2301      	moveq	r3, #1
 800839a:	2300      	movne	r3, #0
 800839c:	b2db      	uxtb	r3, r3
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d001      	beq.n	80083a6 <HAL_I2C_Init+0x196>
 80083a2:	2301      	movs	r3, #1
 80083a4:	e022      	b.n	80083ec <HAL_I2C_Init+0x1dc>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d10e      	bne.n	80083cc <HAL_I2C_Init+0x1bc>
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	1e58      	subs	r0, r3, #1
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6859      	ldr	r1, [r3, #4]
 80083b6:	460b      	mov	r3, r1
 80083b8:	005b      	lsls	r3, r3, #1
 80083ba:	440b      	add	r3, r1
 80083bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80083c0:	3301      	adds	r3, #1
 80083c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083ca:	e00f      	b.n	80083ec <HAL_I2C_Init+0x1dc>
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	1e58      	subs	r0, r3, #1
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6859      	ldr	r1, [r3, #4]
 80083d4:	460b      	mov	r3, r1
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	440b      	add	r3, r1
 80083da:	0099      	lsls	r1, r3, #2
 80083dc:	440b      	add	r3, r1
 80083de:	fbb0 f3f3 	udiv	r3, r0, r3
 80083e2:	3301      	adds	r3, #1
 80083e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80083ec:	6879      	ldr	r1, [r7, #4]
 80083ee:	6809      	ldr	r1, [r1, #0]
 80083f0:	4313      	orrs	r3, r2
 80083f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	69da      	ldr	r2, [r3, #28]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6a1b      	ldr	r3, [r3, #32]
 8008406:	431a      	orrs	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	430a      	orrs	r2, r1
 800840e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800841a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	6911      	ldr	r1, [r2, #16]
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	68d2      	ldr	r2, [r2, #12]
 8008426:	4311      	orrs	r1, r2
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	6812      	ldr	r2, [r2, #0]
 800842c:	430b      	orrs	r3, r1
 800842e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	695a      	ldr	r2, [r3, #20]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	431a      	orrs	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	430a      	orrs	r2, r1
 800844a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f042 0201 	orr.w	r2, r2, #1
 800845a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2220      	movs	r2, #32
 8008466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	000186a0 	.word	0x000186a0
 8008488:	001e847f 	.word	0x001e847f
 800848c:	003d08ff 	.word	0x003d08ff
 8008490:	431bde83 	.word	0x431bde83
 8008494:	10624dd3 	.word	0x10624dd3

08008498 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b088      	sub	sp, #32
 800849c:	af02      	add	r7, sp, #8
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	4608      	mov	r0, r1
 80084a2:	4611      	mov	r1, r2
 80084a4:	461a      	mov	r2, r3
 80084a6:	4603      	mov	r3, r0
 80084a8:	817b      	strh	r3, [r7, #10]
 80084aa:	460b      	mov	r3, r1
 80084ac:	813b      	strh	r3, [r7, #8]
 80084ae:	4613      	mov	r3, r2
 80084b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80084b2:	f7fe fbbb 	bl	8006c2c <HAL_GetTick>
 80084b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	2b20      	cmp	r3, #32
 80084c2:	f040 80d9 	bne.w	8008678 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	9300      	str	r3, [sp, #0]
 80084ca:	2319      	movs	r3, #25
 80084cc:	2201      	movs	r2, #1
 80084ce:	496d      	ldr	r1, [pc, #436]	@ (8008684 <HAL_I2C_Mem_Write+0x1ec>)
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f000 fc8b 	bl	8008dec <I2C_WaitOnFlagUntilTimeout>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d001      	beq.n	80084e0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80084dc:	2302      	movs	r3, #2
 80084de:	e0cc      	b.n	800867a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d101      	bne.n	80084ee <HAL_I2C_Mem_Write+0x56>
 80084ea:	2302      	movs	r3, #2
 80084ec:	e0c5      	b.n	800867a <HAL_I2C_Mem_Write+0x1e2>
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2201      	movs	r2, #1
 80084f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f003 0301 	and.w	r3, r3, #1
 8008500:	2b01      	cmp	r3, #1
 8008502:	d007      	beq.n	8008514 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f042 0201 	orr.w	r2, r2, #1
 8008512:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008522:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2221      	movs	r2, #33	@ 0x21
 8008528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2240      	movs	r2, #64	@ 0x40
 8008530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2200      	movs	r2, #0
 8008538:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6a3a      	ldr	r2, [r7, #32]
 800853e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008544:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800854a:	b29a      	uxth	r2, r3
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	4a4d      	ldr	r2, [pc, #308]	@ (8008688 <HAL_I2C_Mem_Write+0x1f0>)
 8008554:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008556:	88f8      	ldrh	r0, [r7, #6]
 8008558:	893a      	ldrh	r2, [r7, #8]
 800855a:	8979      	ldrh	r1, [r7, #10]
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	9301      	str	r3, [sp, #4]
 8008560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008562:	9300      	str	r3, [sp, #0]
 8008564:	4603      	mov	r3, r0
 8008566:	68f8      	ldr	r0, [r7, #12]
 8008568:	f000 fac2 	bl	8008af0 <I2C_RequestMemoryWrite>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d052      	beq.n	8008618 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	e081      	b.n	800867a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008576:	697a      	ldr	r2, [r7, #20]
 8008578:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800857a:	68f8      	ldr	r0, [r7, #12]
 800857c:	f000 fd50 	bl	8009020 <I2C_WaitOnTXEFlagUntilTimeout>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00d      	beq.n	80085a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800858a:	2b04      	cmp	r3, #4
 800858c:	d107      	bne.n	800859e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800859c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	e06b      	b.n	800867a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085a6:	781a      	ldrb	r2, [r3, #0]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085b2:	1c5a      	adds	r2, r3, #1
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085bc:	3b01      	subs	r3, #1
 80085be:	b29a      	uxth	r2, r3
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	3b01      	subs	r3, #1
 80085cc:	b29a      	uxth	r2, r3
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	695b      	ldr	r3, [r3, #20]
 80085d8:	f003 0304 	and.w	r3, r3, #4
 80085dc:	2b04      	cmp	r3, #4
 80085de:	d11b      	bne.n	8008618 <HAL_I2C_Mem_Write+0x180>
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d017      	beq.n	8008618 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ec:	781a      	ldrb	r2, [r3, #0]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085f8:	1c5a      	adds	r2, r3, #1
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008602:	3b01      	subs	r3, #1
 8008604:	b29a      	uxth	r2, r3
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800860e:	b29b      	uxth	r3, r3
 8008610:	3b01      	subs	r3, #1
 8008612:	b29a      	uxth	r2, r3
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800861c:	2b00      	cmp	r3, #0
 800861e:	d1aa      	bne.n	8008576 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008620:	697a      	ldr	r2, [r7, #20]
 8008622:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f000 fd43 	bl	80090b0 <I2C_WaitOnBTFFlagUntilTimeout>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00d      	beq.n	800864c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008634:	2b04      	cmp	r3, #4
 8008636:	d107      	bne.n	8008648 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008646:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	e016      	b.n	800867a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800865a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2220      	movs	r2, #32
 8008660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2200      	movs	r2, #0
 8008668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2200      	movs	r2, #0
 8008670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008674:	2300      	movs	r3, #0
 8008676:	e000      	b.n	800867a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008678:	2302      	movs	r3, #2
  }
}
 800867a:	4618      	mov	r0, r3
 800867c:	3718      	adds	r7, #24
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	00100002 	.word	0x00100002
 8008688:	ffff0000 	.word	0xffff0000

0800868c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b08c      	sub	sp, #48	@ 0x30
 8008690:	af02      	add	r7, sp, #8
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	4608      	mov	r0, r1
 8008696:	4611      	mov	r1, r2
 8008698:	461a      	mov	r2, r3
 800869a:	4603      	mov	r3, r0
 800869c:	817b      	strh	r3, [r7, #10]
 800869e:	460b      	mov	r3, r1
 80086a0:	813b      	strh	r3, [r7, #8]
 80086a2:	4613      	mov	r3, r2
 80086a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80086a6:	f7fe fac1 	bl	8006c2c <HAL_GetTick>
 80086aa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	2b20      	cmp	r3, #32
 80086b6:	f040 8214 	bne.w	8008ae2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80086ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086bc:	9300      	str	r3, [sp, #0]
 80086be:	2319      	movs	r3, #25
 80086c0:	2201      	movs	r2, #1
 80086c2:	497b      	ldr	r1, [pc, #492]	@ (80088b0 <HAL_I2C_Mem_Read+0x224>)
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f000 fb91 	bl	8008dec <I2C_WaitOnFlagUntilTimeout>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d001      	beq.n	80086d4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80086d0:	2302      	movs	r3, #2
 80086d2:	e207      	b.n	8008ae4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d101      	bne.n	80086e2 <HAL_I2C_Mem_Read+0x56>
 80086de:	2302      	movs	r3, #2
 80086e0:	e200      	b.n	8008ae4 <HAL_I2C_Mem_Read+0x458>
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2201      	movs	r2, #1
 80086e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f003 0301 	and.w	r3, r3, #1
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d007      	beq.n	8008708 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f042 0201 	orr.w	r2, r2, #1
 8008706:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008716:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2222      	movs	r2, #34	@ 0x22
 800871c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2240      	movs	r2, #64	@ 0x40
 8008724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2200      	movs	r2, #0
 800872c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008732:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008738:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800873e:	b29a      	uxth	r2, r3
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	4a5b      	ldr	r2, [pc, #364]	@ (80088b4 <HAL_I2C_Mem_Read+0x228>)
 8008748:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800874a:	88f8      	ldrh	r0, [r7, #6]
 800874c:	893a      	ldrh	r2, [r7, #8]
 800874e:	8979      	ldrh	r1, [r7, #10]
 8008750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008752:	9301      	str	r3, [sp, #4]
 8008754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008756:	9300      	str	r3, [sp, #0]
 8008758:	4603      	mov	r3, r0
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	f000 fa5e 	bl	8008c1c <I2C_RequestMemoryRead>
 8008760:	4603      	mov	r3, r0
 8008762:	2b00      	cmp	r3, #0
 8008764:	d001      	beq.n	800876a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	e1bc      	b.n	8008ae4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800876e:	2b00      	cmp	r3, #0
 8008770:	d113      	bne.n	800879a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008772:	2300      	movs	r3, #0
 8008774:	623b      	str	r3, [r7, #32]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	695b      	ldr	r3, [r3, #20]
 800877c:	623b      	str	r3, [r7, #32]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	699b      	ldr	r3, [r3, #24]
 8008784:	623b      	str	r3, [r7, #32]
 8008786:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008796:	601a      	str	r2, [r3, #0]
 8008798:	e190      	b.n	8008abc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d11b      	bne.n	80087da <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80087b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087b2:	2300      	movs	r3, #0
 80087b4:	61fb      	str	r3, [r7, #28]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	695b      	ldr	r3, [r3, #20]
 80087bc:	61fb      	str	r3, [r7, #28]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	699b      	ldr	r3, [r3, #24]
 80087c4:	61fb      	str	r3, [r7, #28]
 80087c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80087d6:	601a      	str	r2, [r3, #0]
 80087d8:	e170      	b.n	8008abc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087de:	2b02      	cmp	r3, #2
 80087e0:	d11b      	bne.n	800881a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80087f0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008800:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008802:	2300      	movs	r3, #0
 8008804:	61bb      	str	r3, [r7, #24]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	695b      	ldr	r3, [r3, #20]
 800880c:	61bb      	str	r3, [r7, #24]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	699b      	ldr	r3, [r3, #24]
 8008814:	61bb      	str	r3, [r7, #24]
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	e150      	b.n	8008abc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800881a:	2300      	movs	r3, #0
 800881c:	617b      	str	r3, [r7, #20]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	695b      	ldr	r3, [r3, #20]
 8008824:	617b      	str	r3, [r7, #20]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	699b      	ldr	r3, [r3, #24]
 800882c:	617b      	str	r3, [r7, #20]
 800882e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008830:	e144      	b.n	8008abc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008836:	2b03      	cmp	r3, #3
 8008838:	f200 80f1 	bhi.w	8008a1e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008840:	2b01      	cmp	r3, #1
 8008842:	d123      	bne.n	800888c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008844:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008846:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f000 fc79 	bl	8009140 <I2C_WaitOnRXNEFlagUntilTimeout>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d001      	beq.n	8008858 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	e145      	b.n	8008ae4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	691a      	ldr	r2, [r3, #16]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008862:	b2d2      	uxtb	r2, r2
 8008864:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800886a:	1c5a      	adds	r2, r3, #1
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008874:	3b01      	subs	r3, #1
 8008876:	b29a      	uxth	r2, r3
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008880:	b29b      	uxth	r3, r3
 8008882:	3b01      	subs	r3, #1
 8008884:	b29a      	uxth	r2, r3
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800888a:	e117      	b.n	8008abc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008890:	2b02      	cmp	r3, #2
 8008892:	d14e      	bne.n	8008932 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008896:	9300      	str	r3, [sp, #0]
 8008898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800889a:	2200      	movs	r2, #0
 800889c:	4906      	ldr	r1, [pc, #24]	@ (80088b8 <HAL_I2C_Mem_Read+0x22c>)
 800889e:	68f8      	ldr	r0, [r7, #12]
 80088a0:	f000 faa4 	bl	8008dec <I2C_WaitOnFlagUntilTimeout>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d008      	beq.n	80088bc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e11a      	b.n	8008ae4 <HAL_I2C_Mem_Read+0x458>
 80088ae:	bf00      	nop
 80088b0:	00100002 	.word	0x00100002
 80088b4:	ffff0000 	.word	0xffff0000
 80088b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80088ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	691a      	ldr	r2, [r3, #16]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088d6:	b2d2      	uxtb	r2, r2
 80088d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088de:	1c5a      	adds	r2, r3, #1
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088e8:	3b01      	subs	r3, #1
 80088ea:	b29a      	uxth	r2, r3
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	3b01      	subs	r3, #1
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	691a      	ldr	r2, [r3, #16]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008908:	b2d2      	uxtb	r2, r2
 800890a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008910:	1c5a      	adds	r2, r3, #1
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800891a:	3b01      	subs	r3, #1
 800891c:	b29a      	uxth	r2, r3
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008926:	b29b      	uxth	r3, r3
 8008928:	3b01      	subs	r3, #1
 800892a:	b29a      	uxth	r2, r3
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008930:	e0c4      	b.n	8008abc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008938:	2200      	movs	r2, #0
 800893a:	496c      	ldr	r1, [pc, #432]	@ (8008aec <HAL_I2C_Mem_Read+0x460>)
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f000 fa55 	bl	8008dec <I2C_WaitOnFlagUntilTimeout>
 8008942:	4603      	mov	r3, r0
 8008944:	2b00      	cmp	r3, #0
 8008946:	d001      	beq.n	800894c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008948:	2301      	movs	r3, #1
 800894a:	e0cb      	b.n	8008ae4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800895a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	691a      	ldr	r2, [r3, #16]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008966:	b2d2      	uxtb	r2, r2
 8008968:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800896e:	1c5a      	adds	r2, r3, #1
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008978:	3b01      	subs	r3, #1
 800897a:	b29a      	uxth	r2, r3
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008984:	b29b      	uxth	r3, r3
 8008986:	3b01      	subs	r3, #1
 8008988:	b29a      	uxth	r2, r3
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800898e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008990:	9300      	str	r3, [sp, #0]
 8008992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008994:	2200      	movs	r2, #0
 8008996:	4955      	ldr	r1, [pc, #340]	@ (8008aec <HAL_I2C_Mem_Read+0x460>)
 8008998:	68f8      	ldr	r0, [r7, #12]
 800899a:	f000 fa27 	bl	8008dec <I2C_WaitOnFlagUntilTimeout>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d001      	beq.n	80089a8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80089a4:	2301      	movs	r3, #1
 80089a6:	e09d      	b.n	8008ae4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80089b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	691a      	ldr	r2, [r3, #16]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089c2:	b2d2      	uxtb	r2, r2
 80089c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ca:	1c5a      	adds	r2, r3, #1
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089d4:	3b01      	subs	r3, #1
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	3b01      	subs	r3, #1
 80089e4:	b29a      	uxth	r2, r3
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	691a      	ldr	r2, [r3, #16]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089f4:	b2d2      	uxtb	r2, r2
 80089f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089fc:	1c5a      	adds	r2, r3, #1
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a06:	3b01      	subs	r3, #1
 8008a08:	b29a      	uxth	r2, r3
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	3b01      	subs	r3, #1
 8008a16:	b29a      	uxth	r2, r3
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008a1c:	e04e      	b.n	8008abc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a20:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008a22:	68f8      	ldr	r0, [r7, #12]
 8008a24:	f000 fb8c 	bl	8009140 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d001      	beq.n	8008a32 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e058      	b.n	8008ae4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	691a      	ldr	r2, [r3, #16]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a3c:	b2d2      	uxtb	r2, r2
 8008a3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a44:	1c5a      	adds	r2, r3, #1
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a4e:	3b01      	subs	r3, #1
 8008a50:	b29a      	uxth	r2, r3
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	3b01      	subs	r3, #1
 8008a5e:	b29a      	uxth	r2, r3
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	695b      	ldr	r3, [r3, #20]
 8008a6a:	f003 0304 	and.w	r3, r3, #4
 8008a6e:	2b04      	cmp	r3, #4
 8008a70:	d124      	bne.n	8008abc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a76:	2b03      	cmp	r3, #3
 8008a78:	d107      	bne.n	8008a8a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a88:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	691a      	ldr	r2, [r3, #16]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a94:	b2d2      	uxtb	r2, r2
 8008a96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a9c:	1c5a      	adds	r2, r3, #1
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008aa6:	3b01      	subs	r3, #1
 8008aa8:	b29a      	uxth	r2, r3
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	3b01      	subs	r3, #1
 8008ab6:	b29a      	uxth	r2, r3
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f47f aeb6 	bne.w	8008832 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2220      	movs	r2, #32
 8008aca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	e000      	b.n	8008ae4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8008ae2:	2302      	movs	r3, #2
  }
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3728      	adds	r7, #40	@ 0x28
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	00010004 	.word	0x00010004

08008af0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b088      	sub	sp, #32
 8008af4:	af02      	add	r7, sp, #8
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	4608      	mov	r0, r1
 8008afa:	4611      	mov	r1, r2
 8008afc:	461a      	mov	r2, r3
 8008afe:	4603      	mov	r3, r0
 8008b00:	817b      	strh	r3, [r7, #10]
 8008b02:	460b      	mov	r3, r1
 8008b04:	813b      	strh	r3, [r7, #8]
 8008b06:	4613      	mov	r3, r2
 8008b08:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008b18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b1c:	9300      	str	r3, [sp, #0]
 8008b1e:	6a3b      	ldr	r3, [r7, #32]
 8008b20:	2200      	movs	r2, #0
 8008b22:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f000 f960 	bl	8008dec <I2C_WaitOnFlagUntilTimeout>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00d      	beq.n	8008b4e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b40:	d103      	bne.n	8008b4a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b48:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008b4a:	2303      	movs	r3, #3
 8008b4c:	e05f      	b.n	8008c0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008b4e:	897b      	ldrh	r3, [r7, #10]
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	461a      	mov	r2, r3
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008b5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b60:	6a3a      	ldr	r2, [r7, #32]
 8008b62:	492d      	ldr	r1, [pc, #180]	@ (8008c18 <I2C_RequestMemoryWrite+0x128>)
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	f000 f9bb 	bl	8008ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d001      	beq.n	8008b74 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008b70:	2301      	movs	r3, #1
 8008b72:	e04c      	b.n	8008c0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b74:	2300      	movs	r3, #0
 8008b76:	617b      	str	r3, [r7, #20]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	695b      	ldr	r3, [r3, #20]
 8008b7e:	617b      	str	r3, [r7, #20]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	699b      	ldr	r3, [r3, #24]
 8008b86:	617b      	str	r3, [r7, #20]
 8008b88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b8c:	6a39      	ldr	r1, [r7, #32]
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	f000 fa46 	bl	8009020 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00d      	beq.n	8008bb6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b9e:	2b04      	cmp	r3, #4
 8008ba0:	d107      	bne.n	8008bb2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008bb0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e02b      	b.n	8008c0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008bb6:	88fb      	ldrh	r3, [r7, #6]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d105      	bne.n	8008bc8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008bbc:	893b      	ldrh	r3, [r7, #8]
 8008bbe:	b2da      	uxtb	r2, r3
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	611a      	str	r2, [r3, #16]
 8008bc6:	e021      	b.n	8008c0c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008bc8:	893b      	ldrh	r3, [r7, #8]
 8008bca:	0a1b      	lsrs	r3, r3, #8
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	b2da      	uxtb	r2, r3
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bd8:	6a39      	ldr	r1, [r7, #32]
 8008bda:	68f8      	ldr	r0, [r7, #12]
 8008bdc:	f000 fa20 	bl	8009020 <I2C_WaitOnTXEFlagUntilTimeout>
 8008be0:	4603      	mov	r3, r0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d00d      	beq.n	8008c02 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bea:	2b04      	cmp	r3, #4
 8008bec:	d107      	bne.n	8008bfe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008bfc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e005      	b.n	8008c0e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008c02:	893b      	ldrh	r3, [r7, #8]
 8008c04:	b2da      	uxtb	r2, r3
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008c0c:	2300      	movs	r3, #0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3718      	adds	r7, #24
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	00010002 	.word	0x00010002

08008c1c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b088      	sub	sp, #32
 8008c20:	af02      	add	r7, sp, #8
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	4608      	mov	r0, r1
 8008c26:	4611      	mov	r1, r2
 8008c28:	461a      	mov	r2, r3
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	817b      	strh	r3, [r7, #10]
 8008c2e:	460b      	mov	r3, r1
 8008c30:	813b      	strh	r3, [r7, #8]
 8008c32:	4613      	mov	r3, r2
 8008c34:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008c44:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008c54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c58:	9300      	str	r3, [sp, #0]
 8008c5a:	6a3b      	ldr	r3, [r7, #32]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008c62:	68f8      	ldr	r0, [r7, #12]
 8008c64:	f000 f8c2 	bl	8008dec <I2C_WaitOnFlagUntilTimeout>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00d      	beq.n	8008c8a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c7c:	d103      	bne.n	8008c86 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c84:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008c86:	2303      	movs	r3, #3
 8008c88:	e0aa      	b.n	8008de0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008c8a:	897b      	ldrh	r3, [r7, #10]
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	461a      	mov	r2, r3
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008c98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c9c:	6a3a      	ldr	r2, [r7, #32]
 8008c9e:	4952      	ldr	r1, [pc, #328]	@ (8008de8 <I2C_RequestMemoryRead+0x1cc>)
 8008ca0:	68f8      	ldr	r0, [r7, #12]
 8008ca2:	f000 f91d 	bl	8008ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d001      	beq.n	8008cb0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	e097      	b.n	8008de0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	617b      	str	r3, [r7, #20]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	695b      	ldr	r3, [r3, #20]
 8008cba:	617b      	str	r3, [r7, #20]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	699b      	ldr	r3, [r3, #24]
 8008cc2:	617b      	str	r3, [r7, #20]
 8008cc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cc8:	6a39      	ldr	r1, [r7, #32]
 8008cca:	68f8      	ldr	r0, [r7, #12]
 8008ccc:	f000 f9a8 	bl	8009020 <I2C_WaitOnTXEFlagUntilTimeout>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d00d      	beq.n	8008cf2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cda:	2b04      	cmp	r3, #4
 8008cdc:	d107      	bne.n	8008cee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008cec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e076      	b.n	8008de0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008cf2:	88fb      	ldrh	r3, [r7, #6]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d105      	bne.n	8008d04 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008cf8:	893b      	ldrh	r3, [r7, #8]
 8008cfa:	b2da      	uxtb	r2, r3
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	611a      	str	r2, [r3, #16]
 8008d02:	e021      	b.n	8008d48 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008d04:	893b      	ldrh	r3, [r7, #8]
 8008d06:	0a1b      	lsrs	r3, r3, #8
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	b2da      	uxtb	r2, r3
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d14:	6a39      	ldr	r1, [r7, #32]
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f000 f982 	bl	8009020 <I2C_WaitOnTXEFlagUntilTimeout>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d00d      	beq.n	8008d3e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d26:	2b04      	cmp	r3, #4
 8008d28:	d107      	bne.n	8008d3a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e050      	b.n	8008de0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008d3e:	893b      	ldrh	r3, [r7, #8]
 8008d40:	b2da      	uxtb	r2, r3
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d4a:	6a39      	ldr	r1, [r7, #32]
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f000 f967 	bl	8009020 <I2C_WaitOnTXEFlagUntilTimeout>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d00d      	beq.n	8008d74 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d5c:	2b04      	cmp	r3, #4
 8008d5e:	d107      	bne.n	8008d70 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d6e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	e035      	b.n	8008de0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008d82:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d86:	9300      	str	r3, [sp, #0]
 8008d88:	6a3b      	ldr	r3, [r7, #32]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	f000 f82b 	bl	8008dec <I2C_WaitOnFlagUntilTimeout>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d00d      	beq.n	8008db8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008da6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008daa:	d103      	bne.n	8008db4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008db2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008db4:	2303      	movs	r3, #3
 8008db6:	e013      	b.n	8008de0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008db8:	897b      	ldrh	r3, [r7, #10]
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	f043 0301 	orr.w	r3, r3, #1
 8008dc0:	b2da      	uxtb	r2, r3
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dca:	6a3a      	ldr	r2, [r7, #32]
 8008dcc:	4906      	ldr	r1, [pc, #24]	@ (8008de8 <I2C_RequestMemoryRead+0x1cc>)
 8008dce:	68f8      	ldr	r0, [r7, #12]
 8008dd0:	f000 f886 	bl	8008ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d001      	beq.n	8008dde <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e000      	b.n	8008de0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008dde:	2300      	movs	r3, #0
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3718      	adds	r7, #24
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	00010002 	.word	0x00010002

08008dec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	603b      	str	r3, [r7, #0]
 8008df8:	4613      	mov	r3, r2
 8008dfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008dfc:	e048      	b.n	8008e90 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e04:	d044      	beq.n	8008e90 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e06:	f7fd ff11 	bl	8006c2c <HAL_GetTick>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	69bb      	ldr	r3, [r7, #24]
 8008e0e:	1ad3      	subs	r3, r2, r3
 8008e10:	683a      	ldr	r2, [r7, #0]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d302      	bcc.n	8008e1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d139      	bne.n	8008e90 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	0c1b      	lsrs	r3, r3, #16
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d10d      	bne.n	8008e42 <I2C_WaitOnFlagUntilTimeout+0x56>
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	695b      	ldr	r3, [r3, #20]
 8008e2c:	43da      	mvns	r2, r3
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	4013      	ands	r3, r2
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	bf0c      	ite	eq
 8008e38:	2301      	moveq	r3, #1
 8008e3a:	2300      	movne	r3, #0
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	461a      	mov	r2, r3
 8008e40:	e00c      	b.n	8008e5c <I2C_WaitOnFlagUntilTimeout+0x70>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	699b      	ldr	r3, [r3, #24]
 8008e48:	43da      	mvns	r2, r3
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	4013      	ands	r3, r2
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	bf0c      	ite	eq
 8008e54:	2301      	moveq	r3, #1
 8008e56:	2300      	movne	r3, #0
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	79fb      	ldrb	r3, [r7, #7]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d116      	bne.n	8008e90 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2200      	movs	r2, #0
 8008e66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2220      	movs	r2, #32
 8008e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e7c:	f043 0220 	orr.w	r2, r3, #32
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2200      	movs	r2, #0
 8008e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e023      	b.n	8008ed8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	0c1b      	lsrs	r3, r3, #16
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d10d      	bne.n	8008eb6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	695b      	ldr	r3, [r3, #20]
 8008ea0:	43da      	mvns	r2, r3
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	bf0c      	ite	eq
 8008eac:	2301      	moveq	r3, #1
 8008eae:	2300      	movne	r3, #0
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	e00c      	b.n	8008ed0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	699b      	ldr	r3, [r3, #24]
 8008ebc:	43da      	mvns	r2, r3
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	bf0c      	ite	eq
 8008ec8:	2301      	moveq	r3, #1
 8008eca:	2300      	movne	r3, #0
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	461a      	mov	r2, r3
 8008ed0:	79fb      	ldrb	r3, [r7, #7]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d093      	beq.n	8008dfe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	607a      	str	r2, [r7, #4]
 8008eec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008eee:	e071      	b.n	8008fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	695b      	ldr	r3, [r3, #20]
 8008ef6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008efa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008efe:	d123      	bne.n	8008f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f0e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008f18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2220      	movs	r2, #32
 8008f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f34:	f043 0204 	orr.w	r2, r3, #4
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	e067      	b.n	8009018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f4e:	d041      	beq.n	8008fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f50:	f7fd fe6c 	bl	8006c2c <HAL_GetTick>
 8008f54:	4602      	mov	r2, r0
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	1ad3      	subs	r3, r2, r3
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d302      	bcc.n	8008f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d136      	bne.n	8008fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	0c1b      	lsrs	r3, r3, #16
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d10c      	bne.n	8008f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	695b      	ldr	r3, [r3, #20]
 8008f76:	43da      	mvns	r2, r3
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	4013      	ands	r3, r2
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	bf14      	ite	ne
 8008f82:	2301      	movne	r3, #1
 8008f84:	2300      	moveq	r3, #0
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	e00b      	b.n	8008fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	699b      	ldr	r3, [r3, #24]
 8008f90:	43da      	mvns	r2, r3
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	4013      	ands	r3, r2
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	bf14      	ite	ne
 8008f9c:	2301      	movne	r3, #1
 8008f9e:	2300      	moveq	r3, #0
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d016      	beq.n	8008fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2220      	movs	r2, #32
 8008fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fc0:	f043 0220 	orr.w	r2, r3, #32
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	e021      	b.n	8009018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	0c1b      	lsrs	r3, r3, #16
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d10c      	bne.n	8008ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	695b      	ldr	r3, [r3, #20]
 8008fe4:	43da      	mvns	r2, r3
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	4013      	ands	r3, r2
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	bf14      	ite	ne
 8008ff0:	2301      	movne	r3, #1
 8008ff2:	2300      	moveq	r3, #0
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	e00b      	b.n	8009010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	699b      	ldr	r3, [r3, #24]
 8008ffe:	43da      	mvns	r2, r3
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	4013      	ands	r3, r2
 8009004:	b29b      	uxth	r3, r3
 8009006:	2b00      	cmp	r3, #0
 8009008:	bf14      	ite	ne
 800900a:	2301      	movne	r3, #1
 800900c:	2300      	moveq	r3, #0
 800900e:	b2db      	uxtb	r3, r3
 8009010:	2b00      	cmp	r3, #0
 8009012:	f47f af6d 	bne.w	8008ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009016:	2300      	movs	r3, #0
}
 8009018:	4618      	mov	r0, r3
 800901a:	3710      	adds	r7, #16
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800902c:	e034      	b.n	8009098 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800902e:	68f8      	ldr	r0, [r7, #12]
 8009030:	f000 f8e3 	bl	80091fa <I2C_IsAcknowledgeFailed>
 8009034:	4603      	mov	r3, r0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d001      	beq.n	800903e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800903a:	2301      	movs	r3, #1
 800903c:	e034      	b.n	80090a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009044:	d028      	beq.n	8009098 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009046:	f7fd fdf1 	bl	8006c2c <HAL_GetTick>
 800904a:	4602      	mov	r2, r0
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	1ad3      	subs	r3, r2, r3
 8009050:	68ba      	ldr	r2, [r7, #8]
 8009052:	429a      	cmp	r2, r3
 8009054:	d302      	bcc.n	800905c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d11d      	bne.n	8009098 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	695b      	ldr	r3, [r3, #20]
 8009062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009066:	2b80      	cmp	r3, #128	@ 0x80
 8009068:	d016      	beq.n	8009098 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2200      	movs	r2, #0
 800906e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2220      	movs	r2, #32
 8009074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2200      	movs	r2, #0
 800907c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009084:	f043 0220 	orr.w	r2, r3, #32
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2200      	movs	r2, #0
 8009090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	e007      	b.n	80090a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	695b      	ldr	r3, [r3, #20]
 800909e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090a2:	2b80      	cmp	r3, #128	@ 0x80
 80090a4:	d1c3      	bne.n	800902e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80090bc:	e034      	b.n	8009128 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80090be:	68f8      	ldr	r0, [r7, #12]
 80090c0:	f000 f89b 	bl	80091fa <I2C_IsAcknowledgeFailed>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d001      	beq.n	80090ce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80090ca:	2301      	movs	r3, #1
 80090cc:	e034      	b.n	8009138 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090d4:	d028      	beq.n	8009128 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090d6:	f7fd fda9 	bl	8006c2c <HAL_GetTick>
 80090da:	4602      	mov	r2, r0
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	1ad3      	subs	r3, r2, r3
 80090e0:	68ba      	ldr	r2, [r7, #8]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d302      	bcc.n	80090ec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d11d      	bne.n	8009128 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	695b      	ldr	r3, [r3, #20]
 80090f2:	f003 0304 	and.w	r3, r3, #4
 80090f6:	2b04      	cmp	r3, #4
 80090f8:	d016      	beq.n	8009128 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2200      	movs	r2, #0
 80090fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2220      	movs	r2, #32
 8009104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2200      	movs	r2, #0
 800910c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009114:	f043 0220 	orr.w	r2, r3, #32
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2200      	movs	r2, #0
 8009120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009124:	2301      	movs	r3, #1
 8009126:	e007      	b.n	8009138 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	695b      	ldr	r3, [r3, #20]
 800912e:	f003 0304 	and.w	r3, r3, #4
 8009132:	2b04      	cmp	r3, #4
 8009134:	d1c3      	bne.n	80090be <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009136:	2300      	movs	r3, #0
}
 8009138:	4618      	mov	r0, r3
 800913a:	3710      	adds	r7, #16
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800914c:	e049      	b.n	80091e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	695b      	ldr	r3, [r3, #20]
 8009154:	f003 0310 	and.w	r3, r3, #16
 8009158:	2b10      	cmp	r3, #16
 800915a:	d119      	bne.n	8009190 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f06f 0210 	mvn.w	r2, #16
 8009164:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2200      	movs	r2, #0
 800916a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2220      	movs	r2, #32
 8009170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2200      	movs	r2, #0
 8009178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2200      	movs	r2, #0
 8009188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800918c:	2301      	movs	r3, #1
 800918e:	e030      	b.n	80091f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009190:	f7fd fd4c 	bl	8006c2c <HAL_GetTick>
 8009194:	4602      	mov	r2, r0
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	1ad3      	subs	r3, r2, r3
 800919a:	68ba      	ldr	r2, [r7, #8]
 800919c:	429a      	cmp	r2, r3
 800919e:	d302      	bcc.n	80091a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d11d      	bne.n	80091e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	695b      	ldr	r3, [r3, #20]
 80091ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091b0:	2b40      	cmp	r3, #64	@ 0x40
 80091b2:	d016      	beq.n	80091e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2200      	movs	r2, #0
 80091b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2220      	movs	r2, #32
 80091be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2200      	movs	r2, #0
 80091c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091ce:	f043 0220 	orr.w	r2, r3, #32
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80091de:	2301      	movs	r3, #1
 80091e0:	e007      	b.n	80091f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	695b      	ldr	r3, [r3, #20]
 80091e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091ec:	2b40      	cmp	r3, #64	@ 0x40
 80091ee:	d1ae      	bne.n	800914e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80091f0:	2300      	movs	r3, #0
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3710      	adds	r7, #16
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80091fa:	b480      	push	{r7}
 80091fc:	b083      	sub	sp, #12
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	695b      	ldr	r3, [r3, #20]
 8009208:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800920c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009210:	d11b      	bne.n	800924a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800921a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2220      	movs	r2, #32
 8009226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009236:	f043 0204 	orr.w	r2, r3, #4
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2200      	movs	r2, #0
 8009242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009246:	2301      	movs	r3, #1
 8009248:	e000      	b.n	800924c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b086      	sub	sp, #24
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d101      	bne.n	800926a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009266:	2301      	movs	r3, #1
 8009268:	e267      	b.n	800973a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f003 0301 	and.w	r3, r3, #1
 8009272:	2b00      	cmp	r3, #0
 8009274:	d075      	beq.n	8009362 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009276:	4b88      	ldr	r3, [pc, #544]	@ (8009498 <HAL_RCC_OscConfig+0x240>)
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	f003 030c 	and.w	r3, r3, #12
 800927e:	2b04      	cmp	r3, #4
 8009280:	d00c      	beq.n	800929c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009282:	4b85      	ldr	r3, [pc, #532]	@ (8009498 <HAL_RCC_OscConfig+0x240>)
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800928a:	2b08      	cmp	r3, #8
 800928c:	d112      	bne.n	80092b4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800928e:	4b82      	ldr	r3, [pc, #520]	@ (8009498 <HAL_RCC_OscConfig+0x240>)
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009296:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800929a:	d10b      	bne.n	80092b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800929c:	4b7e      	ldr	r3, [pc, #504]	@ (8009498 <HAL_RCC_OscConfig+0x240>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d05b      	beq.n	8009360 <HAL_RCC_OscConfig+0x108>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d157      	bne.n	8009360 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80092b0:	2301      	movs	r3, #1
 80092b2:	e242      	b.n	800973a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092bc:	d106      	bne.n	80092cc <HAL_RCC_OscConfig+0x74>
 80092be:	4b76      	ldr	r3, [pc, #472]	@ (8009498 <HAL_RCC_OscConfig+0x240>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4a75      	ldr	r2, [pc, #468]	@ (8009498 <HAL_RCC_OscConfig+0x240>)
 80092c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80092c8:	6013      	str	r3, [r2, #0]
 80092ca:	e01d      	b.n	8009308 <HAL_RCC_OscConfig+0xb0>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80092d4:	d10c      	bne.n	80092f0 <HAL_RCC_OscConfig+0x98>
 80092d6:	4b70      	ldr	r3, [pc, #448]	@ (8009498 <HAL_RCC_OscConfig+0x240>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a6f      	ldr	r2, [pc, #444]	@ (8009498 <HAL_RCC_OscConfig+0x240>)
 80092dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80092e0:	6013      	str	r3, [r2, #0]
 80092e2:	4b6d      	ldr	r3, [pc, #436]	@ (8009498 <HAL_RCC_OscConfig+0x240>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a6c      	ldr	r2, [pc, #432]	@ (8009498 <HAL_RCC_OscConfig+0x240>)
 80092e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80092ec:	6013      	str	r3, [r2, #0]
 80092ee:	e00b      	b.n	8009308 <HAL_RCC_OscConfig+0xb0>
 80092f0:	4b69      	ldr	r3, [pc, #420]	@ (8009498 <HAL_RCC_OscConfig+0x240>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a68      	ldr	r2, [pc, #416]	@ (8009498 <HAL_RCC_OscConfig+0x240>)
 80092f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80092fa:	6013      	str	r3, [r2, #0]
 80092fc:	4b66      	ldr	r3, [pc, #408]	@ (8009498 <HAL_RCC_OscConfig+0x240>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a65      	ldr	r2, [pc, #404]	@ (8009498 <HAL_RCC_OscConfig+0x240>)
 8009302:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009306:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d013      	beq.n	8009338 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009310:	f7fd fc8c 	bl	8006c2c <HAL_GetTick>
 8009314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009316:	e008      	b.n	800932a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009318:	f7fd fc88 	bl	8006c2c <HAL_GetTick>
 800931c:	4602      	mov	r2, r0
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	1ad3      	subs	r3, r2, r3
 8009322:	2b64      	cmp	r3, #100	@ 0x64
 8009324:	d901      	bls.n	800932a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009326:	2303      	movs	r3, #3
 8009328:	e207      	b.n	800973a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800932a:	4b5b      	ldr	r3, [pc, #364]	@ (8009498 <HAL_RCC_OscConfig+0x240>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009332:	2b00      	cmp	r3, #0
 8009334:	d0f0      	beq.n	8009318 <HAL_RCC_OscConfig+0xc0>
 8009336:	e014      	b.n	8009362 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009338:	f7fd fc78 	bl	8006c2c <HAL_GetTick>
 800933c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800933e:	e008      	b.n	8009352 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009340:	f7fd fc74 	bl	8006c2c <HAL_GetTick>
 8009344:	4602      	mov	r2, r0
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	1ad3      	subs	r3, r2, r3
 800934a:	2b64      	cmp	r3, #100	@ 0x64
 800934c:	d901      	bls.n	8009352 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800934e:	2303      	movs	r3, #3
 8009350:	e1f3      	b.n	800973a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009352:	4b51      	ldr	r3, [pc, #324]	@ (8009498 <HAL_RCC_OscConfig+0x240>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800935a:	2b00      	cmp	r3, #0
 800935c:	d1f0      	bne.n	8009340 <HAL_RCC_OscConfig+0xe8>
 800935e:	e000      	b.n	8009362 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f003 0302 	and.w	r3, r3, #2
 800936a:	2b00      	cmp	r3, #0
 800936c:	d063      	beq.n	8009436 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800936e:	4b4a      	ldr	r3, [pc, #296]	@ (8009498 <HAL_RCC_OscConfig+0x240>)
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	f003 030c 	and.w	r3, r3, #12
 8009376:	2b00      	cmp	r3, #0
 8009378:	d00b      	beq.n	8009392 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800937a:	4b47      	ldr	r3, [pc, #284]	@ (8009498 <HAL_RCC_OscConfig+0x240>)
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009382:	2b08      	cmp	r3, #8
 8009384:	d11c      	bne.n	80093c0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009386:	4b44      	ldr	r3, [pc, #272]	@ (8009498 <HAL_RCC_OscConfig+0x240>)
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800938e:	2b00      	cmp	r3, #0
 8009390:	d116      	bne.n	80093c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009392:	4b41      	ldr	r3, [pc, #260]	@ (8009498 <HAL_RCC_OscConfig+0x240>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f003 0302 	and.w	r3, r3, #2
 800939a:	2b00      	cmp	r3, #0
 800939c:	d005      	beq.n	80093aa <HAL_RCC_OscConfig+0x152>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d001      	beq.n	80093aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e1c7      	b.n	800973a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093aa:	4b3b      	ldr	r3, [pc, #236]	@ (8009498 <HAL_RCC_OscConfig+0x240>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	00db      	lsls	r3, r3, #3
 80093b8:	4937      	ldr	r1, [pc, #220]	@ (8009498 <HAL_RCC_OscConfig+0x240>)
 80093ba:	4313      	orrs	r3, r2
 80093bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80093be:	e03a      	b.n	8009436 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d020      	beq.n	800940a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80093c8:	4b34      	ldr	r3, [pc, #208]	@ (800949c <HAL_RCC_OscConfig+0x244>)
 80093ca:	2201      	movs	r2, #1
 80093cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093ce:	f7fd fc2d 	bl	8006c2c <HAL_GetTick>
 80093d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093d4:	e008      	b.n	80093e8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80093d6:	f7fd fc29 	bl	8006c2c <HAL_GetTick>
 80093da:	4602      	mov	r2, r0
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	1ad3      	subs	r3, r2, r3
 80093e0:	2b02      	cmp	r3, #2
 80093e2:	d901      	bls.n	80093e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80093e4:	2303      	movs	r3, #3
 80093e6:	e1a8      	b.n	800973a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093e8:	4b2b      	ldr	r3, [pc, #172]	@ (8009498 <HAL_RCC_OscConfig+0x240>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 0302 	and.w	r3, r3, #2
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d0f0      	beq.n	80093d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093f4:	4b28      	ldr	r3, [pc, #160]	@ (8009498 <HAL_RCC_OscConfig+0x240>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	691b      	ldr	r3, [r3, #16]
 8009400:	00db      	lsls	r3, r3, #3
 8009402:	4925      	ldr	r1, [pc, #148]	@ (8009498 <HAL_RCC_OscConfig+0x240>)
 8009404:	4313      	orrs	r3, r2
 8009406:	600b      	str	r3, [r1, #0]
 8009408:	e015      	b.n	8009436 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800940a:	4b24      	ldr	r3, [pc, #144]	@ (800949c <HAL_RCC_OscConfig+0x244>)
 800940c:	2200      	movs	r2, #0
 800940e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009410:	f7fd fc0c 	bl	8006c2c <HAL_GetTick>
 8009414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009416:	e008      	b.n	800942a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009418:	f7fd fc08 	bl	8006c2c <HAL_GetTick>
 800941c:	4602      	mov	r2, r0
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	1ad3      	subs	r3, r2, r3
 8009422:	2b02      	cmp	r3, #2
 8009424:	d901      	bls.n	800942a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009426:	2303      	movs	r3, #3
 8009428:	e187      	b.n	800973a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800942a:	4b1b      	ldr	r3, [pc, #108]	@ (8009498 <HAL_RCC_OscConfig+0x240>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f003 0302 	and.w	r3, r3, #2
 8009432:	2b00      	cmp	r3, #0
 8009434:	d1f0      	bne.n	8009418 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f003 0308 	and.w	r3, r3, #8
 800943e:	2b00      	cmp	r3, #0
 8009440:	d036      	beq.n	80094b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	695b      	ldr	r3, [r3, #20]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d016      	beq.n	8009478 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800944a:	4b15      	ldr	r3, [pc, #84]	@ (80094a0 <HAL_RCC_OscConfig+0x248>)
 800944c:	2201      	movs	r2, #1
 800944e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009450:	f7fd fbec 	bl	8006c2c <HAL_GetTick>
 8009454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009456:	e008      	b.n	800946a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009458:	f7fd fbe8 	bl	8006c2c <HAL_GetTick>
 800945c:	4602      	mov	r2, r0
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	1ad3      	subs	r3, r2, r3
 8009462:	2b02      	cmp	r3, #2
 8009464:	d901      	bls.n	800946a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009466:	2303      	movs	r3, #3
 8009468:	e167      	b.n	800973a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800946a:	4b0b      	ldr	r3, [pc, #44]	@ (8009498 <HAL_RCC_OscConfig+0x240>)
 800946c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800946e:	f003 0302 	and.w	r3, r3, #2
 8009472:	2b00      	cmp	r3, #0
 8009474:	d0f0      	beq.n	8009458 <HAL_RCC_OscConfig+0x200>
 8009476:	e01b      	b.n	80094b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009478:	4b09      	ldr	r3, [pc, #36]	@ (80094a0 <HAL_RCC_OscConfig+0x248>)
 800947a:	2200      	movs	r2, #0
 800947c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800947e:	f7fd fbd5 	bl	8006c2c <HAL_GetTick>
 8009482:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009484:	e00e      	b.n	80094a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009486:	f7fd fbd1 	bl	8006c2c <HAL_GetTick>
 800948a:	4602      	mov	r2, r0
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	1ad3      	subs	r3, r2, r3
 8009490:	2b02      	cmp	r3, #2
 8009492:	d907      	bls.n	80094a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009494:	2303      	movs	r3, #3
 8009496:	e150      	b.n	800973a <HAL_RCC_OscConfig+0x4e2>
 8009498:	40023800 	.word	0x40023800
 800949c:	42470000 	.word	0x42470000
 80094a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80094a4:	4b88      	ldr	r3, [pc, #544]	@ (80096c8 <HAL_RCC_OscConfig+0x470>)
 80094a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094a8:	f003 0302 	and.w	r3, r3, #2
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d1ea      	bne.n	8009486 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f003 0304 	and.w	r3, r3, #4
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f000 8097 	beq.w	80095ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80094be:	2300      	movs	r3, #0
 80094c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80094c2:	4b81      	ldr	r3, [pc, #516]	@ (80096c8 <HAL_RCC_OscConfig+0x470>)
 80094c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d10f      	bne.n	80094ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80094ce:	2300      	movs	r3, #0
 80094d0:	60bb      	str	r3, [r7, #8]
 80094d2:	4b7d      	ldr	r3, [pc, #500]	@ (80096c8 <HAL_RCC_OscConfig+0x470>)
 80094d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094d6:	4a7c      	ldr	r2, [pc, #496]	@ (80096c8 <HAL_RCC_OscConfig+0x470>)
 80094d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80094dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80094de:	4b7a      	ldr	r3, [pc, #488]	@ (80096c8 <HAL_RCC_OscConfig+0x470>)
 80094e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094e6:	60bb      	str	r3, [r7, #8]
 80094e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80094ea:	2301      	movs	r3, #1
 80094ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094ee:	4b77      	ldr	r3, [pc, #476]	@ (80096cc <HAL_RCC_OscConfig+0x474>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d118      	bne.n	800952c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80094fa:	4b74      	ldr	r3, [pc, #464]	@ (80096cc <HAL_RCC_OscConfig+0x474>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a73      	ldr	r2, [pc, #460]	@ (80096cc <HAL_RCC_OscConfig+0x474>)
 8009500:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009506:	f7fd fb91 	bl	8006c2c <HAL_GetTick>
 800950a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800950c:	e008      	b.n	8009520 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800950e:	f7fd fb8d 	bl	8006c2c <HAL_GetTick>
 8009512:	4602      	mov	r2, r0
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	1ad3      	subs	r3, r2, r3
 8009518:	2b02      	cmp	r3, #2
 800951a:	d901      	bls.n	8009520 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800951c:	2303      	movs	r3, #3
 800951e:	e10c      	b.n	800973a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009520:	4b6a      	ldr	r3, [pc, #424]	@ (80096cc <HAL_RCC_OscConfig+0x474>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009528:	2b00      	cmp	r3, #0
 800952a:	d0f0      	beq.n	800950e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	2b01      	cmp	r3, #1
 8009532:	d106      	bne.n	8009542 <HAL_RCC_OscConfig+0x2ea>
 8009534:	4b64      	ldr	r3, [pc, #400]	@ (80096c8 <HAL_RCC_OscConfig+0x470>)
 8009536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009538:	4a63      	ldr	r2, [pc, #396]	@ (80096c8 <HAL_RCC_OscConfig+0x470>)
 800953a:	f043 0301 	orr.w	r3, r3, #1
 800953e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009540:	e01c      	b.n	800957c <HAL_RCC_OscConfig+0x324>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	689b      	ldr	r3, [r3, #8]
 8009546:	2b05      	cmp	r3, #5
 8009548:	d10c      	bne.n	8009564 <HAL_RCC_OscConfig+0x30c>
 800954a:	4b5f      	ldr	r3, [pc, #380]	@ (80096c8 <HAL_RCC_OscConfig+0x470>)
 800954c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800954e:	4a5e      	ldr	r2, [pc, #376]	@ (80096c8 <HAL_RCC_OscConfig+0x470>)
 8009550:	f043 0304 	orr.w	r3, r3, #4
 8009554:	6713      	str	r3, [r2, #112]	@ 0x70
 8009556:	4b5c      	ldr	r3, [pc, #368]	@ (80096c8 <HAL_RCC_OscConfig+0x470>)
 8009558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800955a:	4a5b      	ldr	r2, [pc, #364]	@ (80096c8 <HAL_RCC_OscConfig+0x470>)
 800955c:	f043 0301 	orr.w	r3, r3, #1
 8009560:	6713      	str	r3, [r2, #112]	@ 0x70
 8009562:	e00b      	b.n	800957c <HAL_RCC_OscConfig+0x324>
 8009564:	4b58      	ldr	r3, [pc, #352]	@ (80096c8 <HAL_RCC_OscConfig+0x470>)
 8009566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009568:	4a57      	ldr	r2, [pc, #348]	@ (80096c8 <HAL_RCC_OscConfig+0x470>)
 800956a:	f023 0301 	bic.w	r3, r3, #1
 800956e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009570:	4b55      	ldr	r3, [pc, #340]	@ (80096c8 <HAL_RCC_OscConfig+0x470>)
 8009572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009574:	4a54      	ldr	r2, [pc, #336]	@ (80096c8 <HAL_RCC_OscConfig+0x470>)
 8009576:	f023 0304 	bic.w	r3, r3, #4
 800957a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d015      	beq.n	80095b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009584:	f7fd fb52 	bl	8006c2c <HAL_GetTick>
 8009588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800958a:	e00a      	b.n	80095a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800958c:	f7fd fb4e 	bl	8006c2c <HAL_GetTick>
 8009590:	4602      	mov	r2, r0
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	1ad3      	subs	r3, r2, r3
 8009596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800959a:	4293      	cmp	r3, r2
 800959c:	d901      	bls.n	80095a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800959e:	2303      	movs	r3, #3
 80095a0:	e0cb      	b.n	800973a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095a2:	4b49      	ldr	r3, [pc, #292]	@ (80096c8 <HAL_RCC_OscConfig+0x470>)
 80095a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095a6:	f003 0302 	and.w	r3, r3, #2
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d0ee      	beq.n	800958c <HAL_RCC_OscConfig+0x334>
 80095ae:	e014      	b.n	80095da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80095b0:	f7fd fb3c 	bl	8006c2c <HAL_GetTick>
 80095b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80095b6:	e00a      	b.n	80095ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095b8:	f7fd fb38 	bl	8006c2c <HAL_GetTick>
 80095bc:	4602      	mov	r2, r0
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	1ad3      	subs	r3, r2, r3
 80095c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d901      	bls.n	80095ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80095ca:	2303      	movs	r3, #3
 80095cc:	e0b5      	b.n	800973a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80095ce:	4b3e      	ldr	r3, [pc, #248]	@ (80096c8 <HAL_RCC_OscConfig+0x470>)
 80095d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095d2:	f003 0302 	and.w	r3, r3, #2
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d1ee      	bne.n	80095b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80095da:	7dfb      	ldrb	r3, [r7, #23]
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d105      	bne.n	80095ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80095e0:	4b39      	ldr	r3, [pc, #228]	@ (80096c8 <HAL_RCC_OscConfig+0x470>)
 80095e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095e4:	4a38      	ldr	r2, [pc, #224]	@ (80096c8 <HAL_RCC_OscConfig+0x470>)
 80095e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80095ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	699b      	ldr	r3, [r3, #24]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	f000 80a1 	beq.w	8009738 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80095f6:	4b34      	ldr	r3, [pc, #208]	@ (80096c8 <HAL_RCC_OscConfig+0x470>)
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	f003 030c 	and.w	r3, r3, #12
 80095fe:	2b08      	cmp	r3, #8
 8009600:	d05c      	beq.n	80096bc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	699b      	ldr	r3, [r3, #24]
 8009606:	2b02      	cmp	r3, #2
 8009608:	d141      	bne.n	800968e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800960a:	4b31      	ldr	r3, [pc, #196]	@ (80096d0 <HAL_RCC_OscConfig+0x478>)
 800960c:	2200      	movs	r2, #0
 800960e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009610:	f7fd fb0c 	bl	8006c2c <HAL_GetTick>
 8009614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009616:	e008      	b.n	800962a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009618:	f7fd fb08 	bl	8006c2c <HAL_GetTick>
 800961c:	4602      	mov	r2, r0
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	1ad3      	subs	r3, r2, r3
 8009622:	2b02      	cmp	r3, #2
 8009624:	d901      	bls.n	800962a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009626:	2303      	movs	r3, #3
 8009628:	e087      	b.n	800973a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800962a:	4b27      	ldr	r3, [pc, #156]	@ (80096c8 <HAL_RCC_OscConfig+0x470>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009632:	2b00      	cmp	r3, #0
 8009634:	d1f0      	bne.n	8009618 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	69da      	ldr	r2, [r3, #28]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a1b      	ldr	r3, [r3, #32]
 800963e:	431a      	orrs	r2, r3
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009644:	019b      	lsls	r3, r3, #6
 8009646:	431a      	orrs	r2, r3
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800964c:	085b      	lsrs	r3, r3, #1
 800964e:	3b01      	subs	r3, #1
 8009650:	041b      	lsls	r3, r3, #16
 8009652:	431a      	orrs	r2, r3
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009658:	061b      	lsls	r3, r3, #24
 800965a:	491b      	ldr	r1, [pc, #108]	@ (80096c8 <HAL_RCC_OscConfig+0x470>)
 800965c:	4313      	orrs	r3, r2
 800965e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009660:	4b1b      	ldr	r3, [pc, #108]	@ (80096d0 <HAL_RCC_OscConfig+0x478>)
 8009662:	2201      	movs	r2, #1
 8009664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009666:	f7fd fae1 	bl	8006c2c <HAL_GetTick>
 800966a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800966c:	e008      	b.n	8009680 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800966e:	f7fd fadd 	bl	8006c2c <HAL_GetTick>
 8009672:	4602      	mov	r2, r0
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	1ad3      	subs	r3, r2, r3
 8009678:	2b02      	cmp	r3, #2
 800967a:	d901      	bls.n	8009680 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800967c:	2303      	movs	r3, #3
 800967e:	e05c      	b.n	800973a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009680:	4b11      	ldr	r3, [pc, #68]	@ (80096c8 <HAL_RCC_OscConfig+0x470>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009688:	2b00      	cmp	r3, #0
 800968a:	d0f0      	beq.n	800966e <HAL_RCC_OscConfig+0x416>
 800968c:	e054      	b.n	8009738 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800968e:	4b10      	ldr	r3, [pc, #64]	@ (80096d0 <HAL_RCC_OscConfig+0x478>)
 8009690:	2200      	movs	r2, #0
 8009692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009694:	f7fd faca 	bl	8006c2c <HAL_GetTick>
 8009698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800969a:	e008      	b.n	80096ae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800969c:	f7fd fac6 	bl	8006c2c <HAL_GetTick>
 80096a0:	4602      	mov	r2, r0
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	1ad3      	subs	r3, r2, r3
 80096a6:	2b02      	cmp	r3, #2
 80096a8:	d901      	bls.n	80096ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80096aa:	2303      	movs	r3, #3
 80096ac:	e045      	b.n	800973a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80096ae:	4b06      	ldr	r3, [pc, #24]	@ (80096c8 <HAL_RCC_OscConfig+0x470>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d1f0      	bne.n	800969c <HAL_RCC_OscConfig+0x444>
 80096ba:	e03d      	b.n	8009738 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	699b      	ldr	r3, [r3, #24]
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d107      	bne.n	80096d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80096c4:	2301      	movs	r3, #1
 80096c6:	e038      	b.n	800973a <HAL_RCC_OscConfig+0x4e2>
 80096c8:	40023800 	.word	0x40023800
 80096cc:	40007000 	.word	0x40007000
 80096d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80096d4:	4b1b      	ldr	r3, [pc, #108]	@ (8009744 <HAL_RCC_OscConfig+0x4ec>)
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	699b      	ldr	r3, [r3, #24]
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d028      	beq.n	8009734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d121      	bne.n	8009734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d11a      	bne.n	8009734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009704:	4013      	ands	r3, r2
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800970a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800970c:	4293      	cmp	r3, r2
 800970e:	d111      	bne.n	8009734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800971a:	085b      	lsrs	r3, r3, #1
 800971c:	3b01      	subs	r3, #1
 800971e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009720:	429a      	cmp	r2, r3
 8009722:	d107      	bne.n	8009734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800972e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009730:	429a      	cmp	r2, r3
 8009732:	d001      	beq.n	8009738 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8009734:	2301      	movs	r3, #1
 8009736:	e000      	b.n	800973a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3718      	adds	r7, #24
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	40023800 	.word	0x40023800

08009748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d101      	bne.n	800975c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009758:	2301      	movs	r3, #1
 800975a:	e0cc      	b.n	80098f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800975c:	4b68      	ldr	r3, [pc, #416]	@ (8009900 <HAL_RCC_ClockConfig+0x1b8>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f003 0307 	and.w	r3, r3, #7
 8009764:	683a      	ldr	r2, [r7, #0]
 8009766:	429a      	cmp	r2, r3
 8009768:	d90c      	bls.n	8009784 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800976a:	4b65      	ldr	r3, [pc, #404]	@ (8009900 <HAL_RCC_ClockConfig+0x1b8>)
 800976c:	683a      	ldr	r2, [r7, #0]
 800976e:	b2d2      	uxtb	r2, r2
 8009770:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009772:	4b63      	ldr	r3, [pc, #396]	@ (8009900 <HAL_RCC_ClockConfig+0x1b8>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f003 0307 	and.w	r3, r3, #7
 800977a:	683a      	ldr	r2, [r7, #0]
 800977c:	429a      	cmp	r2, r3
 800977e:	d001      	beq.n	8009784 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009780:	2301      	movs	r3, #1
 8009782:	e0b8      	b.n	80098f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 0302 	and.w	r3, r3, #2
 800978c:	2b00      	cmp	r3, #0
 800978e:	d020      	beq.n	80097d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f003 0304 	and.w	r3, r3, #4
 8009798:	2b00      	cmp	r3, #0
 800979a:	d005      	beq.n	80097a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800979c:	4b59      	ldr	r3, [pc, #356]	@ (8009904 <HAL_RCC_ClockConfig+0x1bc>)
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	4a58      	ldr	r2, [pc, #352]	@ (8009904 <HAL_RCC_ClockConfig+0x1bc>)
 80097a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80097a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f003 0308 	and.w	r3, r3, #8
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d005      	beq.n	80097c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80097b4:	4b53      	ldr	r3, [pc, #332]	@ (8009904 <HAL_RCC_ClockConfig+0x1bc>)
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	4a52      	ldr	r2, [pc, #328]	@ (8009904 <HAL_RCC_ClockConfig+0x1bc>)
 80097ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80097be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80097c0:	4b50      	ldr	r3, [pc, #320]	@ (8009904 <HAL_RCC_ClockConfig+0x1bc>)
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	494d      	ldr	r1, [pc, #308]	@ (8009904 <HAL_RCC_ClockConfig+0x1bc>)
 80097ce:	4313      	orrs	r3, r2
 80097d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f003 0301 	and.w	r3, r3, #1
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d044      	beq.n	8009868 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d107      	bne.n	80097f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097e6:	4b47      	ldr	r3, [pc, #284]	@ (8009904 <HAL_RCC_ClockConfig+0x1bc>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d119      	bne.n	8009826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	e07f      	b.n	80098f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	2b02      	cmp	r3, #2
 80097fc:	d003      	beq.n	8009806 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009802:	2b03      	cmp	r3, #3
 8009804:	d107      	bne.n	8009816 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009806:	4b3f      	ldr	r3, [pc, #252]	@ (8009904 <HAL_RCC_ClockConfig+0x1bc>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800980e:	2b00      	cmp	r3, #0
 8009810:	d109      	bne.n	8009826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	e06f      	b.n	80098f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009816:	4b3b      	ldr	r3, [pc, #236]	@ (8009904 <HAL_RCC_ClockConfig+0x1bc>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f003 0302 	and.w	r3, r3, #2
 800981e:	2b00      	cmp	r3, #0
 8009820:	d101      	bne.n	8009826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	e067      	b.n	80098f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009826:	4b37      	ldr	r3, [pc, #220]	@ (8009904 <HAL_RCC_ClockConfig+0x1bc>)
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	f023 0203 	bic.w	r2, r3, #3
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	4934      	ldr	r1, [pc, #208]	@ (8009904 <HAL_RCC_ClockConfig+0x1bc>)
 8009834:	4313      	orrs	r3, r2
 8009836:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009838:	f7fd f9f8 	bl	8006c2c <HAL_GetTick>
 800983c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800983e:	e00a      	b.n	8009856 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009840:	f7fd f9f4 	bl	8006c2c <HAL_GetTick>
 8009844:	4602      	mov	r2, r0
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	1ad3      	subs	r3, r2, r3
 800984a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800984e:	4293      	cmp	r3, r2
 8009850:	d901      	bls.n	8009856 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009852:	2303      	movs	r3, #3
 8009854:	e04f      	b.n	80098f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009856:	4b2b      	ldr	r3, [pc, #172]	@ (8009904 <HAL_RCC_ClockConfig+0x1bc>)
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	f003 020c 	and.w	r2, r3, #12
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	429a      	cmp	r2, r3
 8009866:	d1eb      	bne.n	8009840 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009868:	4b25      	ldr	r3, [pc, #148]	@ (8009900 <HAL_RCC_ClockConfig+0x1b8>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f003 0307 	and.w	r3, r3, #7
 8009870:	683a      	ldr	r2, [r7, #0]
 8009872:	429a      	cmp	r2, r3
 8009874:	d20c      	bcs.n	8009890 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009876:	4b22      	ldr	r3, [pc, #136]	@ (8009900 <HAL_RCC_ClockConfig+0x1b8>)
 8009878:	683a      	ldr	r2, [r7, #0]
 800987a:	b2d2      	uxtb	r2, r2
 800987c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800987e:	4b20      	ldr	r3, [pc, #128]	@ (8009900 <HAL_RCC_ClockConfig+0x1b8>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f003 0307 	and.w	r3, r3, #7
 8009886:	683a      	ldr	r2, [r7, #0]
 8009888:	429a      	cmp	r2, r3
 800988a:	d001      	beq.n	8009890 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800988c:	2301      	movs	r3, #1
 800988e:	e032      	b.n	80098f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f003 0304 	and.w	r3, r3, #4
 8009898:	2b00      	cmp	r3, #0
 800989a:	d008      	beq.n	80098ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800989c:	4b19      	ldr	r3, [pc, #100]	@ (8009904 <HAL_RCC_ClockConfig+0x1bc>)
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	4916      	ldr	r1, [pc, #88]	@ (8009904 <HAL_RCC_ClockConfig+0x1bc>)
 80098aa:	4313      	orrs	r3, r2
 80098ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f003 0308 	and.w	r3, r3, #8
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d009      	beq.n	80098ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80098ba:	4b12      	ldr	r3, [pc, #72]	@ (8009904 <HAL_RCC_ClockConfig+0x1bc>)
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	691b      	ldr	r3, [r3, #16]
 80098c6:	00db      	lsls	r3, r3, #3
 80098c8:	490e      	ldr	r1, [pc, #56]	@ (8009904 <HAL_RCC_ClockConfig+0x1bc>)
 80098ca:	4313      	orrs	r3, r2
 80098cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80098ce:	f000 f821 	bl	8009914 <HAL_RCC_GetSysClockFreq>
 80098d2:	4602      	mov	r2, r0
 80098d4:	4b0b      	ldr	r3, [pc, #44]	@ (8009904 <HAL_RCC_ClockConfig+0x1bc>)
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	091b      	lsrs	r3, r3, #4
 80098da:	f003 030f 	and.w	r3, r3, #15
 80098de:	490a      	ldr	r1, [pc, #40]	@ (8009908 <HAL_RCC_ClockConfig+0x1c0>)
 80098e0:	5ccb      	ldrb	r3, [r1, r3]
 80098e2:	fa22 f303 	lsr.w	r3, r2, r3
 80098e6:	4a09      	ldr	r2, [pc, #36]	@ (800990c <HAL_RCC_ClockConfig+0x1c4>)
 80098e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80098ea:	4b09      	ldr	r3, [pc, #36]	@ (8009910 <HAL_RCC_ClockConfig+0x1c8>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7fd f958 	bl	8006ba4 <HAL_InitTick>

  return HAL_OK;
 80098f4:	2300      	movs	r3, #0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3710      	adds	r7, #16
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	40023c00 	.word	0x40023c00
 8009904:	40023800 	.word	0x40023800
 8009908:	0800f9d4 	.word	0x0800f9d4
 800990c:	20000004 	.word	0x20000004
 8009910:	20000008 	.word	0x20000008

08009914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009918:	b094      	sub	sp, #80	@ 0x50
 800991a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800991c:	2300      	movs	r3, #0
 800991e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8009920:	2300      	movs	r3, #0
 8009922:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8009924:	2300      	movs	r3, #0
 8009926:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8009928:	2300      	movs	r3, #0
 800992a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800992c:	4b79      	ldr	r3, [pc, #484]	@ (8009b14 <HAL_RCC_GetSysClockFreq+0x200>)
 800992e:	689b      	ldr	r3, [r3, #8]
 8009930:	f003 030c 	and.w	r3, r3, #12
 8009934:	2b08      	cmp	r3, #8
 8009936:	d00d      	beq.n	8009954 <HAL_RCC_GetSysClockFreq+0x40>
 8009938:	2b08      	cmp	r3, #8
 800993a:	f200 80e1 	bhi.w	8009b00 <HAL_RCC_GetSysClockFreq+0x1ec>
 800993e:	2b00      	cmp	r3, #0
 8009940:	d002      	beq.n	8009948 <HAL_RCC_GetSysClockFreq+0x34>
 8009942:	2b04      	cmp	r3, #4
 8009944:	d003      	beq.n	800994e <HAL_RCC_GetSysClockFreq+0x3a>
 8009946:	e0db      	b.n	8009b00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009948:	4b73      	ldr	r3, [pc, #460]	@ (8009b18 <HAL_RCC_GetSysClockFreq+0x204>)
 800994a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800994c:	e0db      	b.n	8009b06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800994e:	4b73      	ldr	r3, [pc, #460]	@ (8009b1c <HAL_RCC_GetSysClockFreq+0x208>)
 8009950:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009952:	e0d8      	b.n	8009b06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009954:	4b6f      	ldr	r3, [pc, #444]	@ (8009b14 <HAL_RCC_GetSysClockFreq+0x200>)
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800995c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800995e:	4b6d      	ldr	r3, [pc, #436]	@ (8009b14 <HAL_RCC_GetSysClockFreq+0x200>)
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009966:	2b00      	cmp	r3, #0
 8009968:	d063      	beq.n	8009a32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800996a:	4b6a      	ldr	r3, [pc, #424]	@ (8009b14 <HAL_RCC_GetSysClockFreq+0x200>)
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	099b      	lsrs	r3, r3, #6
 8009970:	2200      	movs	r2, #0
 8009972:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009974:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8009976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800997c:	633b      	str	r3, [r7, #48]	@ 0x30
 800997e:	2300      	movs	r3, #0
 8009980:	637b      	str	r3, [r7, #52]	@ 0x34
 8009982:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009986:	4622      	mov	r2, r4
 8009988:	462b      	mov	r3, r5
 800998a:	f04f 0000 	mov.w	r0, #0
 800998e:	f04f 0100 	mov.w	r1, #0
 8009992:	0159      	lsls	r1, r3, #5
 8009994:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009998:	0150      	lsls	r0, r2, #5
 800999a:	4602      	mov	r2, r0
 800999c:	460b      	mov	r3, r1
 800999e:	4621      	mov	r1, r4
 80099a0:	1a51      	subs	r1, r2, r1
 80099a2:	6139      	str	r1, [r7, #16]
 80099a4:	4629      	mov	r1, r5
 80099a6:	eb63 0301 	sbc.w	r3, r3, r1
 80099aa:	617b      	str	r3, [r7, #20]
 80099ac:	f04f 0200 	mov.w	r2, #0
 80099b0:	f04f 0300 	mov.w	r3, #0
 80099b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80099b8:	4659      	mov	r1, fp
 80099ba:	018b      	lsls	r3, r1, #6
 80099bc:	4651      	mov	r1, sl
 80099be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80099c2:	4651      	mov	r1, sl
 80099c4:	018a      	lsls	r2, r1, #6
 80099c6:	4651      	mov	r1, sl
 80099c8:	ebb2 0801 	subs.w	r8, r2, r1
 80099cc:	4659      	mov	r1, fp
 80099ce:	eb63 0901 	sbc.w	r9, r3, r1
 80099d2:	f04f 0200 	mov.w	r2, #0
 80099d6:	f04f 0300 	mov.w	r3, #0
 80099da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80099de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80099e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80099e6:	4690      	mov	r8, r2
 80099e8:	4699      	mov	r9, r3
 80099ea:	4623      	mov	r3, r4
 80099ec:	eb18 0303 	adds.w	r3, r8, r3
 80099f0:	60bb      	str	r3, [r7, #8]
 80099f2:	462b      	mov	r3, r5
 80099f4:	eb49 0303 	adc.w	r3, r9, r3
 80099f8:	60fb      	str	r3, [r7, #12]
 80099fa:	f04f 0200 	mov.w	r2, #0
 80099fe:	f04f 0300 	mov.w	r3, #0
 8009a02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009a06:	4629      	mov	r1, r5
 8009a08:	024b      	lsls	r3, r1, #9
 8009a0a:	4621      	mov	r1, r4
 8009a0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009a10:	4621      	mov	r1, r4
 8009a12:	024a      	lsls	r2, r1, #9
 8009a14:	4610      	mov	r0, r2
 8009a16:	4619      	mov	r1, r3
 8009a18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009a20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009a24:	f7f7 f8c0 	bl	8000ba8 <__aeabi_uldivmod>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a30:	e058      	b.n	8009ae4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009a32:	4b38      	ldr	r3, [pc, #224]	@ (8009b14 <HAL_RCC_GetSysClockFreq+0x200>)
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	099b      	lsrs	r3, r3, #6
 8009a38:	2200      	movs	r2, #0
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	4611      	mov	r1, r2
 8009a3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009a42:	623b      	str	r3, [r7, #32]
 8009a44:	2300      	movs	r3, #0
 8009a46:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009a4c:	4642      	mov	r2, r8
 8009a4e:	464b      	mov	r3, r9
 8009a50:	f04f 0000 	mov.w	r0, #0
 8009a54:	f04f 0100 	mov.w	r1, #0
 8009a58:	0159      	lsls	r1, r3, #5
 8009a5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009a5e:	0150      	lsls	r0, r2, #5
 8009a60:	4602      	mov	r2, r0
 8009a62:	460b      	mov	r3, r1
 8009a64:	4641      	mov	r1, r8
 8009a66:	ebb2 0a01 	subs.w	sl, r2, r1
 8009a6a:	4649      	mov	r1, r9
 8009a6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8009a70:	f04f 0200 	mov.w	r2, #0
 8009a74:	f04f 0300 	mov.w	r3, #0
 8009a78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009a7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009a80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009a84:	ebb2 040a 	subs.w	r4, r2, sl
 8009a88:	eb63 050b 	sbc.w	r5, r3, fp
 8009a8c:	f04f 0200 	mov.w	r2, #0
 8009a90:	f04f 0300 	mov.w	r3, #0
 8009a94:	00eb      	lsls	r3, r5, #3
 8009a96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009a9a:	00e2      	lsls	r2, r4, #3
 8009a9c:	4614      	mov	r4, r2
 8009a9e:	461d      	mov	r5, r3
 8009aa0:	4643      	mov	r3, r8
 8009aa2:	18e3      	adds	r3, r4, r3
 8009aa4:	603b      	str	r3, [r7, #0]
 8009aa6:	464b      	mov	r3, r9
 8009aa8:	eb45 0303 	adc.w	r3, r5, r3
 8009aac:	607b      	str	r3, [r7, #4]
 8009aae:	f04f 0200 	mov.w	r2, #0
 8009ab2:	f04f 0300 	mov.w	r3, #0
 8009ab6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009aba:	4629      	mov	r1, r5
 8009abc:	028b      	lsls	r3, r1, #10
 8009abe:	4621      	mov	r1, r4
 8009ac0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009ac4:	4621      	mov	r1, r4
 8009ac6:	028a      	lsls	r2, r1, #10
 8009ac8:	4610      	mov	r0, r2
 8009aca:	4619      	mov	r1, r3
 8009acc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ace:	2200      	movs	r2, #0
 8009ad0:	61bb      	str	r3, [r7, #24]
 8009ad2:	61fa      	str	r2, [r7, #28]
 8009ad4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009ad8:	f7f7 f866 	bl	8000ba8 <__aeabi_uldivmod>
 8009adc:	4602      	mov	r2, r0
 8009ade:	460b      	mov	r3, r1
 8009ae0:	4613      	mov	r3, r2
 8009ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8009ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8009b14 <HAL_RCC_GetSysClockFreq+0x200>)
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	0c1b      	lsrs	r3, r3, #16
 8009aea:	f003 0303 	and.w	r3, r3, #3
 8009aee:	3301      	adds	r3, #1
 8009af0:	005b      	lsls	r3, r3, #1
 8009af2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8009af4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009af6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009afc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009afe:	e002      	b.n	8009b06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009b00:	4b05      	ldr	r3, [pc, #20]	@ (8009b18 <HAL_RCC_GetSysClockFreq+0x204>)
 8009b02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009b04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009b06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3750      	adds	r7, #80	@ 0x50
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b12:	bf00      	nop
 8009b14:	40023800 	.word	0x40023800
 8009b18:	00f42400 	.word	0x00f42400
 8009b1c:	007a1200 	.word	0x007a1200

08009b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009b20:	b480      	push	{r7}
 8009b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009b24:	4b03      	ldr	r3, [pc, #12]	@ (8009b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8009b26:	681b      	ldr	r3, [r3, #0]
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr
 8009b32:	bf00      	nop
 8009b34:	20000004 	.word	0x20000004

08009b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009b3c:	f7ff fff0 	bl	8009b20 <HAL_RCC_GetHCLKFreq>
 8009b40:	4602      	mov	r2, r0
 8009b42:	4b05      	ldr	r3, [pc, #20]	@ (8009b58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	0a9b      	lsrs	r3, r3, #10
 8009b48:	f003 0307 	and.w	r3, r3, #7
 8009b4c:	4903      	ldr	r1, [pc, #12]	@ (8009b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009b4e:	5ccb      	ldrb	r3, [r1, r3]
 8009b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	40023800 	.word	0x40023800
 8009b5c:	0800f9e4 	.word	0x0800f9e4

08009b60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009b64:	f7ff ffdc 	bl	8009b20 <HAL_RCC_GetHCLKFreq>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	4b05      	ldr	r3, [pc, #20]	@ (8009b80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	0b5b      	lsrs	r3, r3, #13
 8009b70:	f003 0307 	and.w	r3, r3, #7
 8009b74:	4903      	ldr	r1, [pc, #12]	@ (8009b84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009b76:	5ccb      	ldrb	r3, [r1, r3]
 8009b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	40023800 	.word	0x40023800
 8009b84:	0800f9e4 	.word	0x0800f9e4

08009b88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d101      	bne.n	8009b9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b96:	2301      	movs	r3, #1
 8009b98:	e042      	b.n	8009c20 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d106      	bne.n	8009bb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f7fc ff5c 	bl	8006a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2224      	movs	r2, #36	@ 0x24
 8009bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	68da      	ldr	r2, [r3, #12]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009bca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f000 fdf3 	bl	800a7b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	691a      	ldr	r2, [r3, #16]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009be0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	695a      	ldr	r2, [r3, #20]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009bf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	68da      	ldr	r2, [r3, #12]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009c00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2200      	movs	r2, #0
 8009c06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2220      	movs	r2, #32
 8009c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2220      	movs	r2, #32
 8009c14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009c1e:	2300      	movs	r3, #0
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3708      	adds	r7, #8
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b08a      	sub	sp, #40	@ 0x28
 8009c2c:	af02      	add	r7, sp, #8
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	603b      	str	r3, [r7, #0]
 8009c34:	4613      	mov	r3, r2
 8009c36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	2b20      	cmp	r3, #32
 8009c46:	d175      	bne.n	8009d34 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d002      	beq.n	8009c54 <HAL_UART_Transmit+0x2c>
 8009c4e:	88fb      	ldrh	r3, [r7, #6]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d101      	bne.n	8009c58 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009c54:	2301      	movs	r3, #1
 8009c56:	e06e      	b.n	8009d36 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2221      	movs	r2, #33	@ 0x21
 8009c62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c66:	f7fc ffe1 	bl	8006c2c <HAL_GetTick>
 8009c6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	88fa      	ldrh	r2, [r7, #6]
 8009c70:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	88fa      	ldrh	r2, [r7, #6]
 8009c76:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c80:	d108      	bne.n	8009c94 <HAL_UART_Transmit+0x6c>
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	691b      	ldr	r3, [r3, #16]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d104      	bne.n	8009c94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	61bb      	str	r3, [r7, #24]
 8009c92:	e003      	b.n	8009c9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009c9c:	e02e      	b.n	8009cfc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	9300      	str	r3, [sp, #0]
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	2180      	movs	r1, #128	@ 0x80
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f000 fb55 	bl	800a358 <UART_WaitOnFlagUntilTimeout>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d005      	beq.n	8009cc0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2220      	movs	r2, #32
 8009cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009cbc:	2303      	movs	r3, #3
 8009cbe:	e03a      	b.n	8009d36 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009cc0:	69fb      	ldr	r3, [r7, #28]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d10b      	bne.n	8009cde <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009cc6:	69bb      	ldr	r3, [r7, #24]
 8009cc8:	881b      	ldrh	r3, [r3, #0]
 8009cca:	461a      	mov	r2, r3
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009cd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	3302      	adds	r3, #2
 8009cda:	61bb      	str	r3, [r7, #24]
 8009cdc:	e007      	b.n	8009cee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	781a      	ldrb	r2, [r3, #0]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	3301      	adds	r3, #1
 8009cec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	3b01      	subs	r3, #1
 8009cf6:	b29a      	uxth	r2, r3
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d1cb      	bne.n	8009c9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	9300      	str	r3, [sp, #0]
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	2140      	movs	r1, #64	@ 0x40
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f000 fb21 	bl	800a358 <UART_WaitOnFlagUntilTimeout>
 8009d16:	4603      	mov	r3, r0
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d005      	beq.n	8009d28 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2220      	movs	r2, #32
 8009d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009d24:	2303      	movs	r3, #3
 8009d26:	e006      	b.n	8009d36 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2220      	movs	r2, #32
 8009d2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009d30:	2300      	movs	r3, #0
 8009d32:	e000      	b.n	8009d36 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009d34:	2302      	movs	r3, #2
  }
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3720      	adds	r7, #32
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009d3e:	b480      	push	{r7}
 8009d40:	b085      	sub	sp, #20
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	60f8      	str	r0, [r7, #12]
 8009d46:	60b9      	str	r1, [r7, #8]
 8009d48:	4613      	mov	r3, r2
 8009d4a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	2b20      	cmp	r3, #32
 8009d56:	d121      	bne.n	8009d9c <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d002      	beq.n	8009d64 <HAL_UART_Transmit_IT+0x26>
 8009d5e:	88fb      	ldrh	r3, [r7, #6]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d101      	bne.n	8009d68 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8009d64:	2301      	movs	r3, #1
 8009d66:	e01a      	b.n	8009d9e <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	68ba      	ldr	r2, [r7, #8]
 8009d6c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	88fa      	ldrh	r2, [r7, #6]
 8009d72:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	88fa      	ldrh	r2, [r7, #6]
 8009d78:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2221      	movs	r2, #33	@ 0x21
 8009d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	68da      	ldr	r2, [r3, #12]
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009d96:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	e000      	b.n	8009d9e <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8009d9c:	2302      	movs	r3, #2
  }
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3714      	adds	r7, #20
 8009da2:	46bd      	mov	sp, r7
 8009da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da8:	4770      	bx	lr

08009daa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009daa:	b580      	push	{r7, lr}
 8009dac:	b084      	sub	sp, #16
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	60f8      	str	r0, [r7, #12]
 8009db2:	60b9      	str	r1, [r7, #8]
 8009db4:	4613      	mov	r3, r2
 8009db6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	2b20      	cmp	r3, #32
 8009dc2:	d112      	bne.n	8009dea <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d002      	beq.n	8009dd0 <HAL_UART_Receive_IT+0x26>
 8009dca:	88fb      	ldrh	r3, [r7, #6]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d101      	bne.n	8009dd4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	e00b      	b.n	8009dec <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009dda:	88fb      	ldrh	r3, [r7, #6]
 8009ddc:	461a      	mov	r2, r3
 8009dde:	68b9      	ldr	r1, [r7, #8]
 8009de0:	68f8      	ldr	r0, [r7, #12]
 8009de2:	f000 fb12 	bl	800a40a <UART_Start_Receive_IT>
 8009de6:	4603      	mov	r3, r0
 8009de8:	e000      	b.n	8009dec <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009dea:	2302      	movs	r3, #2
  }
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3710      	adds	r7, #16
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b0ba      	sub	sp, #232	@ 0xe8
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	695b      	ldr	r3, [r3, #20]
 8009e16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009e20:	2300      	movs	r3, #0
 8009e22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e2a:	f003 030f 	and.w	r3, r3, #15
 8009e2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009e32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d10f      	bne.n	8009e5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e3e:	f003 0320 	and.w	r3, r3, #32
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d009      	beq.n	8009e5a <HAL_UART_IRQHandler+0x66>
 8009e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e4a:	f003 0320 	and.w	r3, r3, #32
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d003      	beq.n	8009e5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 fbf2 	bl	800a63c <UART_Receive_IT>
      return;
 8009e58:	e25b      	b.n	800a312 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009e5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	f000 80de 	beq.w	800a020 <HAL_UART_IRQHandler+0x22c>
 8009e64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e68:	f003 0301 	and.w	r3, r3, #1
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d106      	bne.n	8009e7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e74:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f000 80d1 	beq.w	800a020 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e82:	f003 0301 	and.w	r3, r3, #1
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d00b      	beq.n	8009ea2 <HAL_UART_IRQHandler+0xae>
 8009e8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d005      	beq.n	8009ea2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e9a:	f043 0201 	orr.w	r2, r3, #1
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ea6:	f003 0304 	and.w	r3, r3, #4
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00b      	beq.n	8009ec6 <HAL_UART_IRQHandler+0xd2>
 8009eae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009eb2:	f003 0301 	and.w	r3, r3, #1
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d005      	beq.n	8009ec6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ebe:	f043 0202 	orr.w	r2, r3, #2
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009eca:	f003 0302 	and.w	r3, r3, #2
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d00b      	beq.n	8009eea <HAL_UART_IRQHandler+0xf6>
 8009ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ed6:	f003 0301 	and.w	r3, r3, #1
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d005      	beq.n	8009eea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ee2:	f043 0204 	orr.w	r2, r3, #4
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009eee:	f003 0308 	and.w	r3, r3, #8
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d011      	beq.n	8009f1a <HAL_UART_IRQHandler+0x126>
 8009ef6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009efa:	f003 0320 	and.w	r3, r3, #32
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d105      	bne.n	8009f0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009f02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f06:	f003 0301 	and.w	r3, r3, #1
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d005      	beq.n	8009f1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f12:	f043 0208 	orr.w	r2, r3, #8
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	f000 81f2 	beq.w	800a308 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f28:	f003 0320 	and.w	r3, r3, #32
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d008      	beq.n	8009f42 <HAL_UART_IRQHandler+0x14e>
 8009f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f34:	f003 0320 	and.w	r3, r3, #32
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d002      	beq.n	8009f42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 fb7d 	bl	800a63c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	695b      	ldr	r3, [r3, #20]
 8009f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f4c:	2b40      	cmp	r3, #64	@ 0x40
 8009f4e:	bf0c      	ite	eq
 8009f50:	2301      	moveq	r3, #1
 8009f52:	2300      	movne	r3, #0
 8009f54:	b2db      	uxtb	r3, r3
 8009f56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f5e:	f003 0308 	and.w	r3, r3, #8
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d103      	bne.n	8009f6e <HAL_UART_IRQHandler+0x17a>
 8009f66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d04f      	beq.n	800a00e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 fa85 	bl	800a47e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	695b      	ldr	r3, [r3, #20]
 8009f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f7e:	2b40      	cmp	r3, #64	@ 0x40
 8009f80:	d141      	bne.n	800a006 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	3314      	adds	r3, #20
 8009f88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009f90:	e853 3f00 	ldrex	r3, [r3]
 8009f94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009f98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009f9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fa0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	3314      	adds	r3, #20
 8009faa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009fae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009fb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009fba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009fbe:	e841 2300 	strex	r3, r2, [r1]
 8009fc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009fc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d1d9      	bne.n	8009f82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d013      	beq.n	8009ffe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fda:	4a7e      	ldr	r2, [pc, #504]	@ (800a1d4 <HAL_UART_IRQHandler+0x3e0>)
 8009fdc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f7fd fcec 	bl	80079c0 <HAL_DMA_Abort_IT>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d016      	beq.n	800a01c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009ff8:	4610      	mov	r0, r2
 8009ffa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ffc:	e00e      	b.n	800a01c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 f994 	bl	800a32c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a004:	e00a      	b.n	800a01c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 f990 	bl	800a32c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a00c:	e006      	b.n	800a01c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 f98c 	bl	800a32c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2200      	movs	r2, #0
 800a018:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a01a:	e175      	b.n	800a308 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a01c:	bf00      	nop
    return;
 800a01e:	e173      	b.n	800a308 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a024:	2b01      	cmp	r3, #1
 800a026:	f040 814f 	bne.w	800a2c8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a02a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a02e:	f003 0310 	and.w	r3, r3, #16
 800a032:	2b00      	cmp	r3, #0
 800a034:	f000 8148 	beq.w	800a2c8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a03c:	f003 0310 	and.w	r3, r3, #16
 800a040:	2b00      	cmp	r3, #0
 800a042:	f000 8141 	beq.w	800a2c8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a046:	2300      	movs	r3, #0
 800a048:	60bb      	str	r3, [r7, #8]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	60bb      	str	r3, [r7, #8]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	60bb      	str	r3, [r7, #8]
 800a05a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	695b      	ldr	r3, [r3, #20]
 800a062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a066:	2b40      	cmp	r3, #64	@ 0x40
 800a068:	f040 80b6 	bne.w	800a1d8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a078:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	f000 8145 	beq.w	800a30c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a086:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a08a:	429a      	cmp	r2, r3
 800a08c:	f080 813e 	bcs.w	800a30c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a096:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a09c:	69db      	ldr	r3, [r3, #28]
 800a09e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0a2:	f000 8088 	beq.w	800a1b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	330c      	adds	r3, #12
 800a0ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a0b4:	e853 3f00 	ldrex	r3, [r3]
 800a0b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a0bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a0c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a0c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	330c      	adds	r3, #12
 800a0ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a0d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a0d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a0de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a0e2:	e841 2300 	strex	r3, r2, [r1]
 800a0e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a0ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d1d9      	bne.n	800a0a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	3314      	adds	r3, #20
 800a0f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a0fc:	e853 3f00 	ldrex	r3, [r3]
 800a100:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a102:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a104:	f023 0301 	bic.w	r3, r3, #1
 800a108:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	3314      	adds	r3, #20
 800a112:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a116:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a11a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a11c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a11e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a122:	e841 2300 	strex	r3, r2, [r1]
 800a126:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a128:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d1e1      	bne.n	800a0f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	3314      	adds	r3, #20
 800a134:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a136:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a138:	e853 3f00 	ldrex	r3, [r3]
 800a13c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a13e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a140:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a144:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	3314      	adds	r3, #20
 800a14e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a152:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a154:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a156:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a158:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a15a:	e841 2300 	strex	r3, r2, [r1]
 800a15e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a160:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a162:	2b00      	cmp	r3, #0
 800a164:	d1e3      	bne.n	800a12e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2220      	movs	r2, #32
 800a16a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2200      	movs	r2, #0
 800a172:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	330c      	adds	r3, #12
 800a17a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a17c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a17e:	e853 3f00 	ldrex	r3, [r3]
 800a182:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a184:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a186:	f023 0310 	bic.w	r3, r3, #16
 800a18a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	330c      	adds	r3, #12
 800a194:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a198:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a19a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a19c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a19e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a1a0:	e841 2300 	strex	r3, r2, [r1]
 800a1a4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a1a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d1e3      	bne.n	800a174 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f7fd fb95 	bl	80078e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2202      	movs	r2, #2
 800a1ba:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	1ad3      	subs	r3, r2, r3
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 f8b7 	bl	800a340 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a1d2:	e09b      	b.n	800a30c <HAL_UART_IRQHandler+0x518>
 800a1d4:	0800a545 	.word	0x0800a545
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	1ad3      	subs	r3, r2, r3
 800a1e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	f000 808e 	beq.w	800a310 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a1f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	f000 8089 	beq.w	800a310 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	330c      	adds	r3, #12
 800a204:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a208:	e853 3f00 	ldrex	r3, [r3]
 800a20c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a20e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a210:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a214:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	330c      	adds	r3, #12
 800a21e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a222:	647a      	str	r2, [r7, #68]	@ 0x44
 800a224:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a226:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a228:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a22a:	e841 2300 	strex	r3, r2, [r1]
 800a22e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a232:	2b00      	cmp	r3, #0
 800a234:	d1e3      	bne.n	800a1fe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	3314      	adds	r3, #20
 800a23c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a240:	e853 3f00 	ldrex	r3, [r3]
 800a244:	623b      	str	r3, [r7, #32]
   return(result);
 800a246:	6a3b      	ldr	r3, [r7, #32]
 800a248:	f023 0301 	bic.w	r3, r3, #1
 800a24c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	3314      	adds	r3, #20
 800a256:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a25a:	633a      	str	r2, [r7, #48]	@ 0x30
 800a25c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a25e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a260:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a262:	e841 2300 	strex	r3, r2, [r1]
 800a266:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d1e3      	bne.n	800a236 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2220      	movs	r2, #32
 800a272:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2200      	movs	r2, #0
 800a27a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	330c      	adds	r3, #12
 800a282:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	e853 3f00 	ldrex	r3, [r3]
 800a28a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f023 0310 	bic.w	r3, r3, #16
 800a292:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	330c      	adds	r3, #12
 800a29c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a2a0:	61fa      	str	r2, [r7, #28]
 800a2a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a4:	69b9      	ldr	r1, [r7, #24]
 800a2a6:	69fa      	ldr	r2, [r7, #28]
 800a2a8:	e841 2300 	strex	r3, r2, [r1]
 800a2ac:	617b      	str	r3, [r7, #20]
   return(result);
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d1e3      	bne.n	800a27c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2202      	movs	r2, #2
 800a2b8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a2ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a2be:	4619      	mov	r1, r3
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f000 f83d 	bl	800a340 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a2c6:	e023      	b.n	800a310 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a2c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d009      	beq.n	800a2e8 <HAL_UART_IRQHandler+0x4f4>
 800a2d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d003      	beq.n	800a2e8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 f943 	bl	800a56c <UART_Transmit_IT>
    return;
 800a2e6:	e014      	b.n	800a312 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a2e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d00e      	beq.n	800a312 <HAL_UART_IRQHandler+0x51e>
 800a2f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d008      	beq.n	800a312 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 f983 	bl	800a60c <UART_EndTransmit_IT>
    return;
 800a306:	e004      	b.n	800a312 <HAL_UART_IRQHandler+0x51e>
    return;
 800a308:	bf00      	nop
 800a30a:	e002      	b.n	800a312 <HAL_UART_IRQHandler+0x51e>
      return;
 800a30c:	bf00      	nop
 800a30e:	e000      	b.n	800a312 <HAL_UART_IRQHandler+0x51e>
      return;
 800a310:	bf00      	nop
  }
}
 800a312:	37e8      	adds	r7, #232	@ 0xe8
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a318:	b480      	push	{r7}
 800a31a:	b083      	sub	sp, #12
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a320:	bf00      	nop
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b083      	sub	sp, #12
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a334:	bf00      	nop
 800a336:	370c      	adds	r7, #12
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr

0800a340 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a340:	b480      	push	{r7}
 800a342:	b083      	sub	sp, #12
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	460b      	mov	r3, r1
 800a34a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a34c:	bf00      	nop
 800a34e:	370c      	adds	r7, #12
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr

0800a358 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b086      	sub	sp, #24
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	60f8      	str	r0, [r7, #12]
 800a360:	60b9      	str	r1, [r7, #8]
 800a362:	603b      	str	r3, [r7, #0]
 800a364:	4613      	mov	r3, r2
 800a366:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a368:	e03b      	b.n	800a3e2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a36a:	6a3b      	ldr	r3, [r7, #32]
 800a36c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a370:	d037      	beq.n	800a3e2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a372:	f7fc fc5b 	bl	8006c2c <HAL_GetTick>
 800a376:	4602      	mov	r2, r0
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	1ad3      	subs	r3, r2, r3
 800a37c:	6a3a      	ldr	r2, [r7, #32]
 800a37e:	429a      	cmp	r2, r3
 800a380:	d302      	bcc.n	800a388 <UART_WaitOnFlagUntilTimeout+0x30>
 800a382:	6a3b      	ldr	r3, [r7, #32]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d101      	bne.n	800a38c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a388:	2303      	movs	r3, #3
 800a38a:	e03a      	b.n	800a402 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	68db      	ldr	r3, [r3, #12]
 800a392:	f003 0304 	and.w	r3, r3, #4
 800a396:	2b00      	cmp	r3, #0
 800a398:	d023      	beq.n	800a3e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	2b80      	cmp	r3, #128	@ 0x80
 800a39e:	d020      	beq.n	800a3e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	2b40      	cmp	r3, #64	@ 0x40
 800a3a4:	d01d      	beq.n	800a3e2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f003 0308 	and.w	r3, r3, #8
 800a3b0:	2b08      	cmp	r3, #8
 800a3b2:	d116      	bne.n	800a3e2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	617b      	str	r3, [r7, #20]
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	617b      	str	r3, [r7, #20]
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	617b      	str	r3, [r7, #20]
 800a3c8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a3ca:	68f8      	ldr	r0, [r7, #12]
 800a3cc:	f000 f857 	bl	800a47e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2208      	movs	r2, #8
 800a3d4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	e00f      	b.n	800a402 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	4013      	ands	r3, r2
 800a3ec:	68ba      	ldr	r2, [r7, #8]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	bf0c      	ite	eq
 800a3f2:	2301      	moveq	r3, #1
 800a3f4:	2300      	movne	r3, #0
 800a3f6:	b2db      	uxtb	r3, r3
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	79fb      	ldrb	r3, [r7, #7]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d0b4      	beq.n	800a36a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a400:	2300      	movs	r3, #0
}
 800a402:	4618      	mov	r0, r3
 800a404:	3718      	adds	r7, #24
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}

0800a40a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a40a:	b480      	push	{r7}
 800a40c:	b085      	sub	sp, #20
 800a40e:	af00      	add	r7, sp, #0
 800a410:	60f8      	str	r0, [r7, #12]
 800a412:	60b9      	str	r1, [r7, #8]
 800a414:	4613      	mov	r3, r2
 800a416:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	68ba      	ldr	r2, [r7, #8]
 800a41c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	88fa      	ldrh	r2, [r7, #6]
 800a422:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	88fa      	ldrh	r2, [r7, #6]
 800a428:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2200      	movs	r2, #0
 800a42e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2222      	movs	r2, #34	@ 0x22
 800a434:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	691b      	ldr	r3, [r3, #16]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d007      	beq.n	800a450 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	68da      	ldr	r2, [r3, #12]
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a44e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	695a      	ldr	r2, [r3, #20]
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f042 0201 	orr.w	r2, r2, #1
 800a45e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	68da      	ldr	r2, [r3, #12]
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f042 0220 	orr.w	r2, r2, #32
 800a46e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a470:	2300      	movs	r3, #0
}
 800a472:	4618      	mov	r0, r3
 800a474:	3714      	adds	r7, #20
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr

0800a47e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a47e:	b480      	push	{r7}
 800a480:	b095      	sub	sp, #84	@ 0x54
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	330c      	adds	r3, #12
 800a48c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a48e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a490:	e853 3f00 	ldrex	r3, [r3]
 800a494:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a498:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a49c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	330c      	adds	r3, #12
 800a4a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a4a6:	643a      	str	r2, [r7, #64]	@ 0x40
 800a4a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a4ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a4ae:	e841 2300 	strex	r3, r2, [r1]
 800a4b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a4b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d1e5      	bne.n	800a486 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	3314      	adds	r3, #20
 800a4c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c2:	6a3b      	ldr	r3, [r7, #32]
 800a4c4:	e853 3f00 	ldrex	r3, [r3]
 800a4c8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a4ca:	69fb      	ldr	r3, [r7, #28]
 800a4cc:	f023 0301 	bic.w	r3, r3, #1
 800a4d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	3314      	adds	r3, #20
 800a4d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a4da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a4dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a4e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4e2:	e841 2300 	strex	r3, r2, [r1]
 800a4e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d1e5      	bne.n	800a4ba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d119      	bne.n	800a52a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	330c      	adds	r3, #12
 800a4fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	e853 3f00 	ldrex	r3, [r3]
 800a504:	60bb      	str	r3, [r7, #8]
   return(result);
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	f023 0310 	bic.w	r3, r3, #16
 800a50c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	330c      	adds	r3, #12
 800a514:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a516:	61ba      	str	r2, [r7, #24]
 800a518:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a51a:	6979      	ldr	r1, [r7, #20]
 800a51c:	69ba      	ldr	r2, [r7, #24]
 800a51e:	e841 2300 	strex	r3, r2, [r1]
 800a522:	613b      	str	r3, [r7, #16]
   return(result);
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d1e5      	bne.n	800a4f6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2220      	movs	r2, #32
 800a52e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2200      	movs	r2, #0
 800a536:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a538:	bf00      	nop
 800a53a:	3754      	adds	r7, #84	@ 0x54
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a550:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2200      	movs	r2, #0
 800a556:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2200      	movs	r2, #0
 800a55c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a55e:	68f8      	ldr	r0, [r7, #12]
 800a560:	f7ff fee4 	bl	800a32c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a564:	bf00      	nop
 800a566:	3710      	adds	r7, #16
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b085      	sub	sp, #20
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a57a:	b2db      	uxtb	r3, r3
 800a57c:	2b21      	cmp	r3, #33	@ 0x21
 800a57e:	d13e      	bne.n	800a5fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	689b      	ldr	r3, [r3, #8]
 800a584:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a588:	d114      	bne.n	800a5b4 <UART_Transmit_IT+0x48>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	691b      	ldr	r3, [r3, #16]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d110      	bne.n	800a5b4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6a1b      	ldr	r3, [r3, #32]
 800a596:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	881b      	ldrh	r3, [r3, #0]
 800a59c:	461a      	mov	r2, r3
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a5a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6a1b      	ldr	r3, [r3, #32]
 800a5ac:	1c9a      	adds	r2, r3, #2
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	621a      	str	r2, [r3, #32]
 800a5b2:	e008      	b.n	800a5c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6a1b      	ldr	r3, [r3, #32]
 800a5b8:	1c59      	adds	r1, r3, #1
 800a5ba:	687a      	ldr	r2, [r7, #4]
 800a5bc:	6211      	str	r1, [r2, #32]
 800a5be:	781a      	ldrb	r2, [r3, #0]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	3b01      	subs	r3, #1
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	687a      	ldr	r2, [r7, #4]
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d10f      	bne.n	800a5fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	68da      	ldr	r2, [r3, #12]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a5e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	68da      	ldr	r2, [r3, #12]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a5f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	e000      	b.n	800a600 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a5fe:	2302      	movs	r3, #2
  }
}
 800a600:	4618      	mov	r0, r3
 800a602:	3714      	adds	r7, #20
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr

0800a60c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b082      	sub	sp, #8
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	68da      	ldr	r2, [r3, #12]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a622:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2220      	movs	r2, #32
 800a628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f7ff fe73 	bl	800a318 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a632:	2300      	movs	r3, #0
}
 800a634:	4618      	mov	r0, r3
 800a636:	3708      	adds	r7, #8
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b08c      	sub	sp, #48	@ 0x30
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a64a:	b2db      	uxtb	r3, r3
 800a64c:	2b22      	cmp	r3, #34	@ 0x22
 800a64e:	f040 80ae 	bne.w	800a7ae <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	689b      	ldr	r3, [r3, #8]
 800a656:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a65a:	d117      	bne.n	800a68c <UART_Receive_IT+0x50>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	691b      	ldr	r3, [r3, #16]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d113      	bne.n	800a68c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a664:	2300      	movs	r3, #0
 800a666:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a66c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	b29b      	uxth	r3, r3
 800a676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a67a:	b29a      	uxth	r2, r3
 800a67c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a67e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a684:	1c9a      	adds	r2, r3, #2
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	629a      	str	r2, [r3, #40]	@ 0x28
 800a68a:	e026      	b.n	800a6da <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a690:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a692:	2300      	movs	r3, #0
 800a694:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	689b      	ldr	r3, [r3, #8]
 800a69a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a69e:	d007      	beq.n	800a6b0 <UART_Receive_IT+0x74>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	689b      	ldr	r3, [r3, #8]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d10a      	bne.n	800a6be <UART_Receive_IT+0x82>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	691b      	ldr	r3, [r3, #16]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d106      	bne.n	800a6be <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	b2da      	uxtb	r2, r3
 800a6b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6ba:	701a      	strb	r2, [r3, #0]
 800a6bc:	e008      	b.n	800a6d0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6ca:	b2da      	uxtb	r2, r3
 800a6cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6ce:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6d4:	1c5a      	adds	r2, r3, #1
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	3b01      	subs	r3, #1
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d15d      	bne.n	800a7aa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	68da      	ldr	r2, [r3, #12]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f022 0220 	bic.w	r2, r2, #32
 800a6fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	68da      	ldr	r2, [r3, #12]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a70c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	695a      	ldr	r2, [r3, #20]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f022 0201 	bic.w	r2, r2, #1
 800a71c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2220      	movs	r2, #32
 800a722:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2200      	movs	r2, #0
 800a72a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a730:	2b01      	cmp	r3, #1
 800a732:	d135      	bne.n	800a7a0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2200      	movs	r2, #0
 800a738:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	330c      	adds	r3, #12
 800a740:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	e853 3f00 	ldrex	r3, [r3]
 800a748:	613b      	str	r3, [r7, #16]
   return(result);
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	f023 0310 	bic.w	r3, r3, #16
 800a750:	627b      	str	r3, [r7, #36]	@ 0x24
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	330c      	adds	r3, #12
 800a758:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a75a:	623a      	str	r2, [r7, #32]
 800a75c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a75e:	69f9      	ldr	r1, [r7, #28]
 800a760:	6a3a      	ldr	r2, [r7, #32]
 800a762:	e841 2300 	strex	r3, r2, [r1]
 800a766:	61bb      	str	r3, [r7, #24]
   return(result);
 800a768:	69bb      	ldr	r3, [r7, #24]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d1e5      	bne.n	800a73a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f003 0310 	and.w	r3, r3, #16
 800a778:	2b10      	cmp	r3, #16
 800a77a:	d10a      	bne.n	800a792 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a77c:	2300      	movs	r3, #0
 800a77e:	60fb      	str	r3, [r7, #12]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	60fb      	str	r3, [r7, #12]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	60fb      	str	r3, [r7, #12]
 800a790:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a796:	4619      	mov	r1, r3
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f7ff fdd1 	bl	800a340 <HAL_UARTEx_RxEventCallback>
 800a79e:	e002      	b.n	800a7a6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f7fa fd0f 	bl	80051c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	e002      	b.n	800a7b0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	e000      	b.n	800a7b0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a7ae:	2302      	movs	r3, #2
  }
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3730      	adds	r7, #48	@ 0x30
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a7b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a7bc:	b0c0      	sub	sp, #256	@ 0x100
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a7c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	691b      	ldr	r3, [r3, #16]
 800a7cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a7d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7d4:	68d9      	ldr	r1, [r3, #12]
 800a7d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	ea40 0301 	orr.w	r3, r0, r1
 800a7e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a7e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7e6:	689a      	ldr	r2, [r3, #8]
 800a7e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7ec:	691b      	ldr	r3, [r3, #16]
 800a7ee:	431a      	orrs	r2, r3
 800a7f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7f4:	695b      	ldr	r3, [r3, #20]
 800a7f6:	431a      	orrs	r2, r3
 800a7f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7fc:	69db      	ldr	r3, [r3, #28]
 800a7fe:	4313      	orrs	r3, r2
 800a800:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a810:	f021 010c 	bic.w	r1, r1, #12
 800a814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a81e:	430b      	orrs	r3, r1
 800a820:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	695b      	ldr	r3, [r3, #20]
 800a82a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a82e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a832:	6999      	ldr	r1, [r3, #24]
 800a834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	ea40 0301 	orr.w	r3, r0, r1
 800a83e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a844:	681a      	ldr	r2, [r3, #0]
 800a846:	4b8f      	ldr	r3, [pc, #572]	@ (800aa84 <UART_SetConfig+0x2cc>)
 800a848:	429a      	cmp	r2, r3
 800a84a:	d005      	beq.n	800a858 <UART_SetConfig+0xa0>
 800a84c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	4b8d      	ldr	r3, [pc, #564]	@ (800aa88 <UART_SetConfig+0x2d0>)
 800a854:	429a      	cmp	r2, r3
 800a856:	d104      	bne.n	800a862 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a858:	f7ff f982 	bl	8009b60 <HAL_RCC_GetPCLK2Freq>
 800a85c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a860:	e003      	b.n	800a86a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a862:	f7ff f969 	bl	8009b38 <HAL_RCC_GetPCLK1Freq>
 800a866:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a86a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a86e:	69db      	ldr	r3, [r3, #28]
 800a870:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a874:	f040 810c 	bne.w	800aa90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a878:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a87c:	2200      	movs	r2, #0
 800a87e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a882:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a886:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a88a:	4622      	mov	r2, r4
 800a88c:	462b      	mov	r3, r5
 800a88e:	1891      	adds	r1, r2, r2
 800a890:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a892:	415b      	adcs	r3, r3
 800a894:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a896:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a89a:	4621      	mov	r1, r4
 800a89c:	eb12 0801 	adds.w	r8, r2, r1
 800a8a0:	4629      	mov	r1, r5
 800a8a2:	eb43 0901 	adc.w	r9, r3, r1
 800a8a6:	f04f 0200 	mov.w	r2, #0
 800a8aa:	f04f 0300 	mov.w	r3, #0
 800a8ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a8b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a8b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a8ba:	4690      	mov	r8, r2
 800a8bc:	4699      	mov	r9, r3
 800a8be:	4623      	mov	r3, r4
 800a8c0:	eb18 0303 	adds.w	r3, r8, r3
 800a8c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a8c8:	462b      	mov	r3, r5
 800a8ca:	eb49 0303 	adc.w	r3, r9, r3
 800a8ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a8d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a8de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a8e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	18db      	adds	r3, r3, r3
 800a8ea:	653b      	str	r3, [r7, #80]	@ 0x50
 800a8ec:	4613      	mov	r3, r2
 800a8ee:	eb42 0303 	adc.w	r3, r2, r3
 800a8f2:	657b      	str	r3, [r7, #84]	@ 0x54
 800a8f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a8f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a8fc:	f7f6 f954 	bl	8000ba8 <__aeabi_uldivmod>
 800a900:	4602      	mov	r2, r0
 800a902:	460b      	mov	r3, r1
 800a904:	4b61      	ldr	r3, [pc, #388]	@ (800aa8c <UART_SetConfig+0x2d4>)
 800a906:	fba3 2302 	umull	r2, r3, r3, r2
 800a90a:	095b      	lsrs	r3, r3, #5
 800a90c:	011c      	lsls	r4, r3, #4
 800a90e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a912:	2200      	movs	r2, #0
 800a914:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a918:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a91c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a920:	4642      	mov	r2, r8
 800a922:	464b      	mov	r3, r9
 800a924:	1891      	adds	r1, r2, r2
 800a926:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a928:	415b      	adcs	r3, r3
 800a92a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a92c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a930:	4641      	mov	r1, r8
 800a932:	eb12 0a01 	adds.w	sl, r2, r1
 800a936:	4649      	mov	r1, r9
 800a938:	eb43 0b01 	adc.w	fp, r3, r1
 800a93c:	f04f 0200 	mov.w	r2, #0
 800a940:	f04f 0300 	mov.w	r3, #0
 800a944:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a948:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a94c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a950:	4692      	mov	sl, r2
 800a952:	469b      	mov	fp, r3
 800a954:	4643      	mov	r3, r8
 800a956:	eb1a 0303 	adds.w	r3, sl, r3
 800a95a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a95e:	464b      	mov	r3, r9
 800a960:	eb4b 0303 	adc.w	r3, fp, r3
 800a964:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	2200      	movs	r2, #0
 800a970:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a974:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a978:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a97c:	460b      	mov	r3, r1
 800a97e:	18db      	adds	r3, r3, r3
 800a980:	643b      	str	r3, [r7, #64]	@ 0x40
 800a982:	4613      	mov	r3, r2
 800a984:	eb42 0303 	adc.w	r3, r2, r3
 800a988:	647b      	str	r3, [r7, #68]	@ 0x44
 800a98a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a98e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a992:	f7f6 f909 	bl	8000ba8 <__aeabi_uldivmod>
 800a996:	4602      	mov	r2, r0
 800a998:	460b      	mov	r3, r1
 800a99a:	4611      	mov	r1, r2
 800a99c:	4b3b      	ldr	r3, [pc, #236]	@ (800aa8c <UART_SetConfig+0x2d4>)
 800a99e:	fba3 2301 	umull	r2, r3, r3, r1
 800a9a2:	095b      	lsrs	r3, r3, #5
 800a9a4:	2264      	movs	r2, #100	@ 0x64
 800a9a6:	fb02 f303 	mul.w	r3, r2, r3
 800a9aa:	1acb      	subs	r3, r1, r3
 800a9ac:	00db      	lsls	r3, r3, #3
 800a9ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a9b2:	4b36      	ldr	r3, [pc, #216]	@ (800aa8c <UART_SetConfig+0x2d4>)
 800a9b4:	fba3 2302 	umull	r2, r3, r3, r2
 800a9b8:	095b      	lsrs	r3, r3, #5
 800a9ba:	005b      	lsls	r3, r3, #1
 800a9bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a9c0:	441c      	add	r4, r3
 800a9c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a9cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a9d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a9d4:	4642      	mov	r2, r8
 800a9d6:	464b      	mov	r3, r9
 800a9d8:	1891      	adds	r1, r2, r2
 800a9da:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a9dc:	415b      	adcs	r3, r3
 800a9de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a9e4:	4641      	mov	r1, r8
 800a9e6:	1851      	adds	r1, r2, r1
 800a9e8:	6339      	str	r1, [r7, #48]	@ 0x30
 800a9ea:	4649      	mov	r1, r9
 800a9ec:	414b      	adcs	r3, r1
 800a9ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9f0:	f04f 0200 	mov.w	r2, #0
 800a9f4:	f04f 0300 	mov.w	r3, #0
 800a9f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a9fc:	4659      	mov	r1, fp
 800a9fe:	00cb      	lsls	r3, r1, #3
 800aa00:	4651      	mov	r1, sl
 800aa02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aa06:	4651      	mov	r1, sl
 800aa08:	00ca      	lsls	r2, r1, #3
 800aa0a:	4610      	mov	r0, r2
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	4603      	mov	r3, r0
 800aa10:	4642      	mov	r2, r8
 800aa12:	189b      	adds	r3, r3, r2
 800aa14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aa18:	464b      	mov	r3, r9
 800aa1a:	460a      	mov	r2, r1
 800aa1c:	eb42 0303 	adc.w	r3, r2, r3
 800aa20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aa24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800aa30:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800aa34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800aa38:	460b      	mov	r3, r1
 800aa3a:	18db      	adds	r3, r3, r3
 800aa3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aa3e:	4613      	mov	r3, r2
 800aa40:	eb42 0303 	adc.w	r3, r2, r3
 800aa44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800aa4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800aa4e:	f7f6 f8ab 	bl	8000ba8 <__aeabi_uldivmod>
 800aa52:	4602      	mov	r2, r0
 800aa54:	460b      	mov	r3, r1
 800aa56:	4b0d      	ldr	r3, [pc, #52]	@ (800aa8c <UART_SetConfig+0x2d4>)
 800aa58:	fba3 1302 	umull	r1, r3, r3, r2
 800aa5c:	095b      	lsrs	r3, r3, #5
 800aa5e:	2164      	movs	r1, #100	@ 0x64
 800aa60:	fb01 f303 	mul.w	r3, r1, r3
 800aa64:	1ad3      	subs	r3, r2, r3
 800aa66:	00db      	lsls	r3, r3, #3
 800aa68:	3332      	adds	r3, #50	@ 0x32
 800aa6a:	4a08      	ldr	r2, [pc, #32]	@ (800aa8c <UART_SetConfig+0x2d4>)
 800aa6c:	fba2 2303 	umull	r2, r3, r2, r3
 800aa70:	095b      	lsrs	r3, r3, #5
 800aa72:	f003 0207 	and.w	r2, r3, #7
 800aa76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4422      	add	r2, r4
 800aa7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800aa80:	e106      	b.n	800ac90 <UART_SetConfig+0x4d8>
 800aa82:	bf00      	nop
 800aa84:	40011000 	.word	0x40011000
 800aa88:	40011400 	.word	0x40011400
 800aa8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aa90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aa94:	2200      	movs	r2, #0
 800aa96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800aa9a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800aa9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800aaa2:	4642      	mov	r2, r8
 800aaa4:	464b      	mov	r3, r9
 800aaa6:	1891      	adds	r1, r2, r2
 800aaa8:	6239      	str	r1, [r7, #32]
 800aaaa:	415b      	adcs	r3, r3
 800aaac:	627b      	str	r3, [r7, #36]	@ 0x24
 800aaae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800aab2:	4641      	mov	r1, r8
 800aab4:	1854      	adds	r4, r2, r1
 800aab6:	4649      	mov	r1, r9
 800aab8:	eb43 0501 	adc.w	r5, r3, r1
 800aabc:	f04f 0200 	mov.w	r2, #0
 800aac0:	f04f 0300 	mov.w	r3, #0
 800aac4:	00eb      	lsls	r3, r5, #3
 800aac6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800aaca:	00e2      	lsls	r2, r4, #3
 800aacc:	4614      	mov	r4, r2
 800aace:	461d      	mov	r5, r3
 800aad0:	4643      	mov	r3, r8
 800aad2:	18e3      	adds	r3, r4, r3
 800aad4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800aad8:	464b      	mov	r3, r9
 800aada:	eb45 0303 	adc.w	r3, r5, r3
 800aade:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800aae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800aaee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800aaf2:	f04f 0200 	mov.w	r2, #0
 800aaf6:	f04f 0300 	mov.w	r3, #0
 800aafa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800aafe:	4629      	mov	r1, r5
 800ab00:	008b      	lsls	r3, r1, #2
 800ab02:	4621      	mov	r1, r4
 800ab04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ab08:	4621      	mov	r1, r4
 800ab0a:	008a      	lsls	r2, r1, #2
 800ab0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800ab10:	f7f6 f84a 	bl	8000ba8 <__aeabi_uldivmod>
 800ab14:	4602      	mov	r2, r0
 800ab16:	460b      	mov	r3, r1
 800ab18:	4b60      	ldr	r3, [pc, #384]	@ (800ac9c <UART_SetConfig+0x4e4>)
 800ab1a:	fba3 2302 	umull	r2, r3, r3, r2
 800ab1e:	095b      	lsrs	r3, r3, #5
 800ab20:	011c      	lsls	r4, r3, #4
 800ab22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ab26:	2200      	movs	r2, #0
 800ab28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ab2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ab30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800ab34:	4642      	mov	r2, r8
 800ab36:	464b      	mov	r3, r9
 800ab38:	1891      	adds	r1, r2, r2
 800ab3a:	61b9      	str	r1, [r7, #24]
 800ab3c:	415b      	adcs	r3, r3
 800ab3e:	61fb      	str	r3, [r7, #28]
 800ab40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ab44:	4641      	mov	r1, r8
 800ab46:	1851      	adds	r1, r2, r1
 800ab48:	6139      	str	r1, [r7, #16]
 800ab4a:	4649      	mov	r1, r9
 800ab4c:	414b      	adcs	r3, r1
 800ab4e:	617b      	str	r3, [r7, #20]
 800ab50:	f04f 0200 	mov.w	r2, #0
 800ab54:	f04f 0300 	mov.w	r3, #0
 800ab58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ab5c:	4659      	mov	r1, fp
 800ab5e:	00cb      	lsls	r3, r1, #3
 800ab60:	4651      	mov	r1, sl
 800ab62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ab66:	4651      	mov	r1, sl
 800ab68:	00ca      	lsls	r2, r1, #3
 800ab6a:	4610      	mov	r0, r2
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	4603      	mov	r3, r0
 800ab70:	4642      	mov	r2, r8
 800ab72:	189b      	adds	r3, r3, r2
 800ab74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ab78:	464b      	mov	r3, r9
 800ab7a:	460a      	mov	r2, r1
 800ab7c:	eb42 0303 	adc.w	r3, r2, r3
 800ab80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ab84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ab8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800ab90:	f04f 0200 	mov.w	r2, #0
 800ab94:	f04f 0300 	mov.w	r3, #0
 800ab98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800ab9c:	4649      	mov	r1, r9
 800ab9e:	008b      	lsls	r3, r1, #2
 800aba0:	4641      	mov	r1, r8
 800aba2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aba6:	4641      	mov	r1, r8
 800aba8:	008a      	lsls	r2, r1, #2
 800abaa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800abae:	f7f5 fffb 	bl	8000ba8 <__aeabi_uldivmod>
 800abb2:	4602      	mov	r2, r0
 800abb4:	460b      	mov	r3, r1
 800abb6:	4611      	mov	r1, r2
 800abb8:	4b38      	ldr	r3, [pc, #224]	@ (800ac9c <UART_SetConfig+0x4e4>)
 800abba:	fba3 2301 	umull	r2, r3, r3, r1
 800abbe:	095b      	lsrs	r3, r3, #5
 800abc0:	2264      	movs	r2, #100	@ 0x64
 800abc2:	fb02 f303 	mul.w	r3, r2, r3
 800abc6:	1acb      	subs	r3, r1, r3
 800abc8:	011b      	lsls	r3, r3, #4
 800abca:	3332      	adds	r3, #50	@ 0x32
 800abcc:	4a33      	ldr	r2, [pc, #204]	@ (800ac9c <UART_SetConfig+0x4e4>)
 800abce:	fba2 2303 	umull	r2, r3, r2, r3
 800abd2:	095b      	lsrs	r3, r3, #5
 800abd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800abd8:	441c      	add	r4, r3
 800abda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800abde:	2200      	movs	r2, #0
 800abe0:	673b      	str	r3, [r7, #112]	@ 0x70
 800abe2:	677a      	str	r2, [r7, #116]	@ 0x74
 800abe4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800abe8:	4642      	mov	r2, r8
 800abea:	464b      	mov	r3, r9
 800abec:	1891      	adds	r1, r2, r2
 800abee:	60b9      	str	r1, [r7, #8]
 800abf0:	415b      	adcs	r3, r3
 800abf2:	60fb      	str	r3, [r7, #12]
 800abf4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800abf8:	4641      	mov	r1, r8
 800abfa:	1851      	adds	r1, r2, r1
 800abfc:	6039      	str	r1, [r7, #0]
 800abfe:	4649      	mov	r1, r9
 800ac00:	414b      	adcs	r3, r1
 800ac02:	607b      	str	r3, [r7, #4]
 800ac04:	f04f 0200 	mov.w	r2, #0
 800ac08:	f04f 0300 	mov.w	r3, #0
 800ac0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ac10:	4659      	mov	r1, fp
 800ac12:	00cb      	lsls	r3, r1, #3
 800ac14:	4651      	mov	r1, sl
 800ac16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac1a:	4651      	mov	r1, sl
 800ac1c:	00ca      	lsls	r2, r1, #3
 800ac1e:	4610      	mov	r0, r2
 800ac20:	4619      	mov	r1, r3
 800ac22:	4603      	mov	r3, r0
 800ac24:	4642      	mov	r2, r8
 800ac26:	189b      	adds	r3, r3, r2
 800ac28:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ac2a:	464b      	mov	r3, r9
 800ac2c:	460a      	mov	r2, r1
 800ac2e:	eb42 0303 	adc.w	r3, r2, r3
 800ac32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ac34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	663b      	str	r3, [r7, #96]	@ 0x60
 800ac3e:	667a      	str	r2, [r7, #100]	@ 0x64
 800ac40:	f04f 0200 	mov.w	r2, #0
 800ac44:	f04f 0300 	mov.w	r3, #0
 800ac48:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800ac4c:	4649      	mov	r1, r9
 800ac4e:	008b      	lsls	r3, r1, #2
 800ac50:	4641      	mov	r1, r8
 800ac52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ac56:	4641      	mov	r1, r8
 800ac58:	008a      	lsls	r2, r1, #2
 800ac5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ac5e:	f7f5 ffa3 	bl	8000ba8 <__aeabi_uldivmod>
 800ac62:	4602      	mov	r2, r0
 800ac64:	460b      	mov	r3, r1
 800ac66:	4b0d      	ldr	r3, [pc, #52]	@ (800ac9c <UART_SetConfig+0x4e4>)
 800ac68:	fba3 1302 	umull	r1, r3, r3, r2
 800ac6c:	095b      	lsrs	r3, r3, #5
 800ac6e:	2164      	movs	r1, #100	@ 0x64
 800ac70:	fb01 f303 	mul.w	r3, r1, r3
 800ac74:	1ad3      	subs	r3, r2, r3
 800ac76:	011b      	lsls	r3, r3, #4
 800ac78:	3332      	adds	r3, #50	@ 0x32
 800ac7a:	4a08      	ldr	r2, [pc, #32]	@ (800ac9c <UART_SetConfig+0x4e4>)
 800ac7c:	fba2 2303 	umull	r2, r3, r2, r3
 800ac80:	095b      	lsrs	r3, r3, #5
 800ac82:	f003 020f 	and.w	r2, r3, #15
 800ac86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4422      	add	r2, r4
 800ac8e:	609a      	str	r2, [r3, #8]
}
 800ac90:	bf00      	nop
 800ac92:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800ac96:	46bd      	mov	sp, r7
 800ac98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac9c:	51eb851f 	.word	0x51eb851f

0800aca0 <LL_GPIO_SetPinMode>:
{
 800aca0:	b480      	push	{r7}
 800aca2:	b08b      	sub	sp, #44	@ 0x2c
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	60b9      	str	r1, [r7, #8]
 800acaa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	fa93 f3a3 	rbit	r3, r3
 800acba:	613b      	str	r3, [r7, #16]
  return result;
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800acc0:	69bb      	ldr	r3, [r7, #24]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d101      	bne.n	800acca <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800acc6:	2320      	movs	r3, #32
 800acc8:	e003      	b.n	800acd2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800acca:	69bb      	ldr	r3, [r7, #24]
 800accc:	fab3 f383 	clz	r3, r3
 800acd0:	b2db      	uxtb	r3, r3
 800acd2:	005b      	lsls	r3, r3, #1
 800acd4:	2103      	movs	r1, #3
 800acd6:	fa01 f303 	lsl.w	r3, r1, r3
 800acda:	43db      	mvns	r3, r3
 800acdc:	401a      	ands	r2, r3
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ace2:	6a3b      	ldr	r3, [r7, #32]
 800ace4:	fa93 f3a3 	rbit	r3, r3
 800ace8:	61fb      	str	r3, [r7, #28]
  return result;
 800acea:	69fb      	ldr	r3, [r7, #28]
 800acec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800acee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d101      	bne.n	800acf8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800acf4:	2320      	movs	r3, #32
 800acf6:	e003      	b.n	800ad00 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800acf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acfa:	fab3 f383 	clz	r3, r3
 800acfe:	b2db      	uxtb	r3, r3
 800ad00:	005b      	lsls	r3, r3, #1
 800ad02:	6879      	ldr	r1, [r7, #4]
 800ad04:	fa01 f303 	lsl.w	r3, r1, r3
 800ad08:	431a      	orrs	r2, r3
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	601a      	str	r2, [r3, #0]
}
 800ad0e:	bf00      	nop
 800ad10:	372c      	adds	r7, #44	@ 0x2c
 800ad12:	46bd      	mov	sp, r7
 800ad14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad18:	4770      	bx	lr

0800ad1a <LL_GPIO_SetPinOutputType>:
{
 800ad1a:	b480      	push	{r7}
 800ad1c:	b085      	sub	sp, #20
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	60f8      	str	r0, [r7, #12]
 800ad22:	60b9      	str	r1, [r7, #8]
 800ad24:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	685a      	ldr	r2, [r3, #4]
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	43db      	mvns	r3, r3
 800ad2e:	401a      	ands	r2, r3
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	6879      	ldr	r1, [r7, #4]
 800ad34:	fb01 f303 	mul.w	r3, r1, r3
 800ad38:	431a      	orrs	r2, r3
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	605a      	str	r2, [r3, #4]
}
 800ad3e:	bf00      	nop
 800ad40:	3714      	adds	r7, #20
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr

0800ad4a <LL_GPIO_SetPinSpeed>:
{
 800ad4a:	b480      	push	{r7}
 800ad4c:	b08b      	sub	sp, #44	@ 0x2c
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	60f8      	str	r0, [r7, #12]
 800ad52:	60b9      	str	r1, [r7, #8]
 800ad54:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	689a      	ldr	r2, [r3, #8]
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	fa93 f3a3 	rbit	r3, r3
 800ad64:	613b      	str	r3, [r7, #16]
  return result;
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ad6a:	69bb      	ldr	r3, [r7, #24]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d101      	bne.n	800ad74 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800ad70:	2320      	movs	r3, #32
 800ad72:	e003      	b.n	800ad7c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800ad74:	69bb      	ldr	r3, [r7, #24]
 800ad76:	fab3 f383 	clz	r3, r3
 800ad7a:	b2db      	uxtb	r3, r3
 800ad7c:	005b      	lsls	r3, r3, #1
 800ad7e:	2103      	movs	r1, #3
 800ad80:	fa01 f303 	lsl.w	r3, r1, r3
 800ad84:	43db      	mvns	r3, r3
 800ad86:	401a      	ands	r2, r3
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad8c:	6a3b      	ldr	r3, [r7, #32]
 800ad8e:	fa93 f3a3 	rbit	r3, r3
 800ad92:	61fb      	str	r3, [r7, #28]
  return result;
 800ad94:	69fb      	ldr	r3, [r7, #28]
 800ad96:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800ad98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d101      	bne.n	800ada2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800ad9e:	2320      	movs	r3, #32
 800ada0:	e003      	b.n	800adaa <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800ada2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ada4:	fab3 f383 	clz	r3, r3
 800ada8:	b2db      	uxtb	r3, r3
 800adaa:	005b      	lsls	r3, r3, #1
 800adac:	6879      	ldr	r1, [r7, #4]
 800adae:	fa01 f303 	lsl.w	r3, r1, r3
 800adb2:	431a      	orrs	r2, r3
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	609a      	str	r2, [r3, #8]
}
 800adb8:	bf00      	nop
 800adba:	372c      	adds	r7, #44	@ 0x2c
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr

0800adc4 <LL_GPIO_SetPinPull>:
{
 800adc4:	b480      	push	{r7}
 800adc6:	b08b      	sub	sp, #44	@ 0x2c
 800adc8:	af00      	add	r7, sp, #0
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	60b9      	str	r1, [r7, #8]
 800adce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	68da      	ldr	r2, [r3, #12]
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	fa93 f3a3 	rbit	r3, r3
 800adde:	613b      	str	r3, [r7, #16]
  return result;
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ade4:	69bb      	ldr	r3, [r7, #24]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d101      	bne.n	800adee <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800adea:	2320      	movs	r3, #32
 800adec:	e003      	b.n	800adf6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800adee:	69bb      	ldr	r3, [r7, #24]
 800adf0:	fab3 f383 	clz	r3, r3
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	005b      	lsls	r3, r3, #1
 800adf8:	2103      	movs	r1, #3
 800adfa:	fa01 f303 	lsl.w	r3, r1, r3
 800adfe:	43db      	mvns	r3, r3
 800ae00:	401a      	ands	r2, r3
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae06:	6a3b      	ldr	r3, [r7, #32]
 800ae08:	fa93 f3a3 	rbit	r3, r3
 800ae0c:	61fb      	str	r3, [r7, #28]
  return result;
 800ae0e:	69fb      	ldr	r3, [r7, #28]
 800ae10:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800ae12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d101      	bne.n	800ae1c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800ae18:	2320      	movs	r3, #32
 800ae1a:	e003      	b.n	800ae24 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800ae1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae1e:	fab3 f383 	clz	r3, r3
 800ae22:	b2db      	uxtb	r3, r3
 800ae24:	005b      	lsls	r3, r3, #1
 800ae26:	6879      	ldr	r1, [r7, #4]
 800ae28:	fa01 f303 	lsl.w	r3, r1, r3
 800ae2c:	431a      	orrs	r2, r3
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	60da      	str	r2, [r3, #12]
}
 800ae32:	bf00      	nop
 800ae34:	372c      	adds	r7, #44	@ 0x2c
 800ae36:	46bd      	mov	sp, r7
 800ae38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3c:	4770      	bx	lr

0800ae3e <LL_GPIO_SetAFPin_0_7>:
{
 800ae3e:	b480      	push	{r7}
 800ae40:	b08b      	sub	sp, #44	@ 0x2c
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	60f8      	str	r0, [r7, #12]
 800ae46:	60b9      	str	r1, [r7, #8]
 800ae48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	6a1a      	ldr	r2, [r3, #32]
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	fa93 f3a3 	rbit	r3, r3
 800ae58:	613b      	str	r3, [r7, #16]
  return result;
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ae5e:	69bb      	ldr	r3, [r7, #24]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d101      	bne.n	800ae68 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800ae64:	2320      	movs	r3, #32
 800ae66:	e003      	b.n	800ae70 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800ae68:	69bb      	ldr	r3, [r7, #24]
 800ae6a:	fab3 f383 	clz	r3, r3
 800ae6e:	b2db      	uxtb	r3, r3
 800ae70:	009b      	lsls	r3, r3, #2
 800ae72:	210f      	movs	r1, #15
 800ae74:	fa01 f303 	lsl.w	r3, r1, r3
 800ae78:	43db      	mvns	r3, r3
 800ae7a:	401a      	ands	r2, r3
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae80:	6a3b      	ldr	r3, [r7, #32]
 800ae82:	fa93 f3a3 	rbit	r3, r3
 800ae86:	61fb      	str	r3, [r7, #28]
  return result;
 800ae88:	69fb      	ldr	r3, [r7, #28]
 800ae8a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800ae8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d101      	bne.n	800ae96 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800ae92:	2320      	movs	r3, #32
 800ae94:	e003      	b.n	800ae9e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800ae96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae98:	fab3 f383 	clz	r3, r3
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	009b      	lsls	r3, r3, #2
 800aea0:	6879      	ldr	r1, [r7, #4]
 800aea2:	fa01 f303 	lsl.w	r3, r1, r3
 800aea6:	431a      	orrs	r2, r3
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	621a      	str	r2, [r3, #32]
}
 800aeac:	bf00      	nop
 800aeae:	372c      	adds	r7, #44	@ 0x2c
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr

0800aeb8 <LL_GPIO_SetAFPin_8_15>:
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b08b      	sub	sp, #44	@ 0x2c
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	60f8      	str	r0, [r7, #12]
 800aec0:	60b9      	str	r1, [r7, #8]
 800aec2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	0a1b      	lsrs	r3, r3, #8
 800aecc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	fa93 f3a3 	rbit	r3, r3
 800aed4:	613b      	str	r3, [r7, #16]
  return result;
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800aeda:	69bb      	ldr	r3, [r7, #24]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d101      	bne.n	800aee4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800aee0:	2320      	movs	r3, #32
 800aee2:	e003      	b.n	800aeec <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800aee4:	69bb      	ldr	r3, [r7, #24]
 800aee6:	fab3 f383 	clz	r3, r3
 800aeea:	b2db      	uxtb	r3, r3
 800aeec:	009b      	lsls	r3, r3, #2
 800aeee:	210f      	movs	r1, #15
 800aef0:	fa01 f303 	lsl.w	r3, r1, r3
 800aef4:	43db      	mvns	r3, r3
 800aef6:	401a      	ands	r2, r3
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	0a1b      	lsrs	r3, r3, #8
 800aefc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aefe:	6a3b      	ldr	r3, [r7, #32]
 800af00:	fa93 f3a3 	rbit	r3, r3
 800af04:	61fb      	str	r3, [r7, #28]
  return result;
 800af06:	69fb      	ldr	r3, [r7, #28]
 800af08:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800af0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d101      	bne.n	800af14 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800af10:	2320      	movs	r3, #32
 800af12:	e003      	b.n	800af1c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800af14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af16:	fab3 f383 	clz	r3, r3
 800af1a:	b2db      	uxtb	r3, r3
 800af1c:	009b      	lsls	r3, r3, #2
 800af1e:	6879      	ldr	r1, [r7, #4]
 800af20:	fa01 f303 	lsl.w	r3, r1, r3
 800af24:	431a      	orrs	r2, r3
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800af2a:	bf00      	nop
 800af2c:	372c      	adds	r7, #44	@ 0x2c
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr

0800af36 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800af36:	b580      	push	{r7, lr}
 800af38:	b08a      	sub	sp, #40	@ 0x28
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	6078      	str	r0, [r7, #4]
 800af3e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800af40:	2300      	movs	r3, #0
 800af42:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 800af44:	2300      	movs	r3, #0
 800af46:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af4e:	69bb      	ldr	r3, [r7, #24]
 800af50:	fa93 f3a3 	rbit	r3, r3
 800af54:	617b      	str	r3, [r7, #20]
  return result;
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800af5a:	69fb      	ldr	r3, [r7, #28]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d101      	bne.n	800af64 <LL_GPIO_Init+0x2e>
    return 32U;
 800af60:	2320      	movs	r3, #32
 800af62:	e003      	b.n	800af6c <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 800af64:	69fb      	ldr	r3, [r7, #28]
 800af66:	fab3 f383 	clz	r3, r3
 800af6a:	b2db      	uxtb	r3, r3
 800af6c:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800af6e:	e057      	b.n	800b020 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	681a      	ldr	r2, [r3, #0]
 800af74:	2101      	movs	r1, #1
 800af76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af78:	fa01 f303 	lsl.w	r3, r1, r3
 800af7c:	4013      	ands	r3, r2
 800af7e:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 800af80:	6a3b      	ldr	r3, [r7, #32]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d049      	beq.n	800b01a <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	2b01      	cmp	r3, #1
 800af8c:	d003      	beq.n	800af96 <LL_GPIO_Init+0x60>
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	2b02      	cmp	r3, #2
 800af94:	d10d      	bne.n	800afb2 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	689b      	ldr	r3, [r3, #8]
 800af9a:	461a      	mov	r2, r3
 800af9c:	6a39      	ldr	r1, [r7, #32]
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f7ff fed3 	bl	800ad4a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	68db      	ldr	r3, [r3, #12]
 800afa8:	461a      	mov	r2, r3
 800afaa:	6a39      	ldr	r1, [r7, #32]
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f7ff feb4 	bl	800ad1a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	691b      	ldr	r3, [r3, #16]
 800afb6:	461a      	mov	r2, r3
 800afb8:	6a39      	ldr	r1, [r7, #32]
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f7ff ff02 	bl	800adc4 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	685b      	ldr	r3, [r3, #4]
 800afc4:	2b02      	cmp	r3, #2
 800afc6:	d121      	bne.n	800b00c <LL_GPIO_Init+0xd6>
 800afc8:	6a3b      	ldr	r3, [r7, #32]
 800afca:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	fa93 f3a3 	rbit	r3, r3
 800afd2:	60bb      	str	r3, [r7, #8]
  return result;
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d101      	bne.n	800afe2 <LL_GPIO_Init+0xac>
    return 32U;
 800afde:	2320      	movs	r3, #32
 800afe0:	e003      	b.n	800afea <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	fab3 f383 	clz	r3, r3
 800afe8:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800afea:	2b07      	cmp	r3, #7
 800afec:	d807      	bhi.n	800affe <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	695b      	ldr	r3, [r3, #20]
 800aff2:	461a      	mov	r2, r3
 800aff4:	6a39      	ldr	r1, [r7, #32]
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f7ff ff21 	bl	800ae3e <LL_GPIO_SetAFPin_0_7>
 800affc:	e006      	b.n	800b00c <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	695b      	ldr	r3, [r3, #20]
 800b002:	461a      	mov	r2, r3
 800b004:	6a39      	ldr	r1, [r7, #32]
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f7ff ff56 	bl	800aeb8 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	461a      	mov	r2, r3
 800b012:	6a39      	ldr	r1, [r7, #32]
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f7ff fe43 	bl	800aca0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800b01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b01c:	3301      	adds	r3, #1
 800b01e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	681a      	ldr	r2, [r3, #0]
 800b024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b026:	fa22 f303 	lsr.w	r3, r2, r3
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d1a0      	bne.n	800af70 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 800b02e:	2300      	movs	r3, #0
}
 800b030:	4618      	mov	r0, r3
 800b032:	3728      	adds	r7, #40	@ 0x28
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800b038:	b480      	push	{r7}
 800b03a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800b03c:	4b04      	ldr	r3, [pc, #16]	@ (800b050 <LL_RCC_GetSysClkSource+0x18>)
 800b03e:	689b      	ldr	r3, [r3, #8]
 800b040:	f003 030c 	and.w	r3, r3, #12
}
 800b044:	4618      	mov	r0, r3
 800b046:	46bd      	mov	sp, r7
 800b048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04c:	4770      	bx	lr
 800b04e:	bf00      	nop
 800b050:	40023800 	.word	0x40023800

0800b054 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800b054:	b480      	push	{r7}
 800b056:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800b058:	4b04      	ldr	r3, [pc, #16]	@ (800b06c <LL_RCC_GetAHBPrescaler+0x18>)
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800b060:	4618      	mov	r0, r3
 800b062:	46bd      	mov	sp, r7
 800b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b068:	4770      	bx	lr
 800b06a:	bf00      	nop
 800b06c:	40023800 	.word	0x40023800

0800b070 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800b070:	b480      	push	{r7}
 800b072:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800b074:	4b04      	ldr	r3, [pc, #16]	@ (800b088 <LL_RCC_GetAPB1Prescaler+0x18>)
 800b076:	689b      	ldr	r3, [r3, #8]
 800b078:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	46bd      	mov	sp, r7
 800b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b084:	4770      	bx	lr
 800b086:	bf00      	nop
 800b088:	40023800 	.word	0x40023800

0800b08c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800b08c:	b480      	push	{r7}
 800b08e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800b090:	4b04      	ldr	r3, [pc, #16]	@ (800b0a4 <LL_RCC_GetAPB2Prescaler+0x18>)
 800b092:	689b      	ldr	r3, [r3, #8]
 800b094:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800b098:	4618      	mov	r0, r3
 800b09a:	46bd      	mov	sp, r7
 800b09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a0:	4770      	bx	lr
 800b0a2:	bf00      	nop
 800b0a4:	40023800 	.word	0x40023800

0800b0a8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800b0ac:	4b04      	ldr	r3, [pc, #16]	@ (800b0c0 <LL_RCC_PLL_GetMainSource+0x18>)
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0bc:	4770      	bx	lr
 800b0be:	bf00      	nop
 800b0c0:	40023800 	.word	0x40023800

0800b0c4 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800b0c8:	4b04      	ldr	r3, [pc, #16]	@ (800b0dc <LL_RCC_PLL_GetN+0x18>)
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	099b      	lsrs	r3, r3, #6
 800b0ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr
 800b0dc:	40023800 	.word	0x40023800

0800b0e0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800b0e4:	4b04      	ldr	r3, [pc, #16]	@ (800b0f8 <LL_RCC_PLL_GetP+0x18>)
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f4:	4770      	bx	lr
 800b0f6:	bf00      	nop
 800b0f8:	40023800 	.word	0x40023800

0800b0fc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800b100:	4b04      	ldr	r3, [pc, #16]	@ (800b114 <LL_RCC_PLL_GetDivider+0x18>)
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800b108:	4618      	mov	r0, r3
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr
 800b112:	bf00      	nop
 800b114:	40023800 	.word	0x40023800

0800b118 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b082      	sub	sp, #8
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800b120:	f000 f820 	bl	800b164 <RCC_GetSystemClockFreq>
 800b124:	4602      	mov	r2, r0
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	4618      	mov	r0, r3
 800b130:	f000 f840 	bl	800b1b4 <RCC_GetHCLKClockFreq>
 800b134:	4602      	mov	r2, r0
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	4618      	mov	r0, r3
 800b140:	f000 f84e 	bl	800b1e0 <RCC_GetPCLK1ClockFreq>
 800b144:	4602      	mov	r2, r0
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	4618      	mov	r0, r3
 800b150:	f000 f85a 	bl	800b208 <RCC_GetPCLK2ClockFreq>
 800b154:	4602      	mov	r2, r0
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	60da      	str	r2, [r3, #12]
}
 800b15a:	bf00      	nop
 800b15c:	3708      	adds	r7, #8
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
	...

0800b164 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b082      	sub	sp, #8
 800b168:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800b16a:	2300      	movs	r3, #0
 800b16c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800b16e:	f7ff ff63 	bl	800b038 <LL_RCC_GetSysClkSource>
 800b172:	4603      	mov	r3, r0
 800b174:	2b08      	cmp	r3, #8
 800b176:	d00c      	beq.n	800b192 <RCC_GetSystemClockFreq+0x2e>
 800b178:	2b08      	cmp	r3, #8
 800b17a:	d80f      	bhi.n	800b19c <RCC_GetSystemClockFreq+0x38>
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d002      	beq.n	800b186 <RCC_GetSystemClockFreq+0x22>
 800b180:	2b04      	cmp	r3, #4
 800b182:	d003      	beq.n	800b18c <RCC_GetSystemClockFreq+0x28>
 800b184:	e00a      	b.n	800b19c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800b186:	4b09      	ldr	r3, [pc, #36]	@ (800b1ac <RCC_GetSystemClockFreq+0x48>)
 800b188:	607b      	str	r3, [r7, #4]
      break;
 800b18a:	e00a      	b.n	800b1a2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800b18c:	4b08      	ldr	r3, [pc, #32]	@ (800b1b0 <RCC_GetSystemClockFreq+0x4c>)
 800b18e:	607b      	str	r3, [r7, #4]
      break;
 800b190:	e007      	b.n	800b1a2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800b192:	2008      	movs	r0, #8
 800b194:	f000 f84c 	bl	800b230 <RCC_PLL_GetFreqDomain_SYS>
 800b198:	6078      	str	r0, [r7, #4]
      break;
 800b19a:	e002      	b.n	800b1a2 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800b19c:	4b03      	ldr	r3, [pc, #12]	@ (800b1ac <RCC_GetSystemClockFreq+0x48>)
 800b19e:	607b      	str	r3, [r7, #4]
      break;
 800b1a0:	bf00      	nop
  }

  return frequency;
 800b1a2:	687b      	ldr	r3, [r7, #4]
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3708      	adds	r7, #8
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}
 800b1ac:	00f42400 	.word	0x00f42400
 800b1b0:	007a1200 	.word	0x007a1200

0800b1b4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b082      	sub	sp, #8
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800b1bc:	f7ff ff4a 	bl	800b054 <LL_RCC_GetAHBPrescaler>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	091b      	lsrs	r3, r3, #4
 800b1c4:	f003 030f 	and.w	r3, r3, #15
 800b1c8:	4a04      	ldr	r2, [pc, #16]	@ (800b1dc <RCC_GetHCLKClockFreq+0x28>)
 800b1ca:	5cd3      	ldrb	r3, [r2, r3]
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	40d3      	lsrs	r3, r2
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3708      	adds	r7, #8
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}
 800b1da:	bf00      	nop
 800b1dc:	0800f9d4 	.word	0x0800f9d4

0800b1e0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b082      	sub	sp, #8
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800b1e8:	f7ff ff42 	bl	800b070 <LL_RCC_GetAPB1Prescaler>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	0a9b      	lsrs	r3, r3, #10
 800b1f0:	4a04      	ldr	r2, [pc, #16]	@ (800b204 <RCC_GetPCLK1ClockFreq+0x24>)
 800b1f2:	5cd3      	ldrb	r3, [r2, r3]
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	40d3      	lsrs	r3, r2
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3708      	adds	r7, #8
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	0800f9e4 	.word	0x0800f9e4

0800b208 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800b210:	f7ff ff3c 	bl	800b08c <LL_RCC_GetAPB2Prescaler>
 800b214:	4603      	mov	r3, r0
 800b216:	0b5b      	lsrs	r3, r3, #13
 800b218:	4a04      	ldr	r2, [pc, #16]	@ (800b22c <RCC_GetPCLK2ClockFreq+0x24>)
 800b21a:	5cd3      	ldrb	r3, [r2, r3]
 800b21c:	461a      	mov	r2, r3
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	40d3      	lsrs	r3, r2
}
 800b222:	4618      	mov	r0, r3
 800b224:	3708      	adds	r7, #8
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	0800f9e4 	.word	0x0800f9e4

0800b230 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800b230:	b590      	push	{r4, r7, lr}
 800b232:	b087      	sub	sp, #28
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 800b238:	2300      	movs	r3, #0
 800b23a:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 800b23c:	2300      	movs	r3, #0
 800b23e:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 800b240:	2300      	movs	r3, #0
 800b242:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800b244:	f7ff ff30 	bl	800b0a8 <LL_RCC_PLL_GetMainSource>
 800b248:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d004      	beq.n	800b25a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b256:	d003      	beq.n	800b260 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800b258:	e005      	b.n	800b266 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800b25a:	4b12      	ldr	r3, [pc, #72]	@ (800b2a4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800b25c:	617b      	str	r3, [r7, #20]
      break;
 800b25e:	e005      	b.n	800b26c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800b260:	4b11      	ldr	r3, [pc, #68]	@ (800b2a8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800b262:	617b      	str	r3, [r7, #20]
      break;
 800b264:	e002      	b.n	800b26c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800b266:	4b0f      	ldr	r3, [pc, #60]	@ (800b2a4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800b268:	617b      	str	r3, [r7, #20]
      break;
 800b26a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2b08      	cmp	r3, #8
 800b270:	d113      	bne.n	800b29a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800b272:	f7ff ff43 	bl	800b0fc <LL_RCC_PLL_GetDivider>
 800b276:	4602      	mov	r2, r0
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	fbb3 f4f2 	udiv	r4, r3, r2
 800b27e:	f7ff ff21 	bl	800b0c4 <LL_RCC_PLL_GetN>
 800b282:	4603      	mov	r3, r0
 800b284:	fb03 f404 	mul.w	r4, r3, r4
 800b288:	f7ff ff2a 	bl	800b0e0 <LL_RCC_PLL_GetP>
 800b28c:	4603      	mov	r3, r0
 800b28e:	0c1b      	lsrs	r3, r3, #16
 800b290:	3301      	adds	r3, #1
 800b292:	005b      	lsls	r3, r3, #1
 800b294:	fbb4 f3f3 	udiv	r3, r4, r3
 800b298:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800b29a:	693b      	ldr	r3, [r7, #16]
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	371c      	adds	r7, #28
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd90      	pop	{r4, r7, pc}
 800b2a4:	00f42400 	.word	0x00f42400
 800b2a8:	007a1200 	.word	0x007a1200

0800b2ac <LL_SPI_IsEnabled>:
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b083      	sub	sp, #12
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2bc:	2b40      	cmp	r3, #64	@ 0x40
 800b2be:	d101      	bne.n	800b2c4 <LL_SPI_IsEnabled+0x18>
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	e000      	b.n	800b2c6 <LL_SPI_IsEnabled+0x1a>
 800b2c4:	2300      	movs	r3, #0
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	370c      	adds	r7, #12
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d0:	4770      	bx	lr

0800b2d2 <LL_SPI_SetCRCPolynomial>:
{
 800b2d2:	b480      	push	{r7}
 800b2d4:	b083      	sub	sp, #12
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	6078      	str	r0, [r7, #4]
 800b2da:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	461a      	mov	r2, r3
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	611a      	str	r2, [r3, #16]
}
 800b2e6:	bf00      	nop
 800b2e8:	370c      	adds	r7, #12
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr

0800b2f2 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800b2f2:	b580      	push	{r7, lr}
 800b2f4:	b084      	sub	sp, #16
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	6078      	str	r0, [r7, #4]
 800b2fa:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f7ff ffd3 	bl	800b2ac <LL_SPI_IsEnabled>
 800b306:	4603      	mov	r3, r0
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d139      	bne.n	800b380 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b314:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 800b318:	683a      	ldr	r2, [r7, #0]
 800b31a:	6811      	ldr	r1, [r2, #0]
 800b31c:	683a      	ldr	r2, [r7, #0]
 800b31e:	6852      	ldr	r2, [r2, #4]
 800b320:	4311      	orrs	r1, r2
 800b322:	683a      	ldr	r2, [r7, #0]
 800b324:	6892      	ldr	r2, [r2, #8]
 800b326:	4311      	orrs	r1, r2
 800b328:	683a      	ldr	r2, [r7, #0]
 800b32a:	68d2      	ldr	r2, [r2, #12]
 800b32c:	4311      	orrs	r1, r2
 800b32e:	683a      	ldr	r2, [r7, #0]
 800b330:	6912      	ldr	r2, [r2, #16]
 800b332:	4311      	orrs	r1, r2
 800b334:	683a      	ldr	r2, [r7, #0]
 800b336:	6952      	ldr	r2, [r2, #20]
 800b338:	4311      	orrs	r1, r2
 800b33a:	683a      	ldr	r2, [r7, #0]
 800b33c:	6992      	ldr	r2, [r2, #24]
 800b33e:	4311      	orrs	r1, r2
 800b340:	683a      	ldr	r2, [r7, #0]
 800b342:	69d2      	ldr	r2, [r2, #28]
 800b344:	4311      	orrs	r1, r2
 800b346:	683a      	ldr	r2, [r7, #0]
 800b348:	6a12      	ldr	r2, [r2, #32]
 800b34a:	430a      	orrs	r2, r1
 800b34c:	431a      	orrs	r2, r3
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	f023 0204 	bic.w	r2, r3, #4
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	695b      	ldr	r3, [r3, #20]
 800b35e:	0c1b      	lsrs	r3, r3, #16
 800b360:	431a      	orrs	r2, r3
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	6a1b      	ldr	r3, [r3, #32]
 800b36a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b36e:	d105      	bne.n	800b37c <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b374:	4619      	mov	r1, r3
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f7ff ffab 	bl	800b2d2 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800b37c:	2300      	movs	r3, #0
 800b37e:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	69db      	ldr	r3, [r3, #28]
 800b384:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	61da      	str	r2, [r3, #28]
  return status;
 800b38c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3710      	adds	r7, #16
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}

0800b396 <LL_TIM_SetPrescaler>:
{
 800b396:	b480      	push	{r7}
 800b398:	b083      	sub	sp, #12
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	6078      	str	r0, [r7, #4]
 800b39e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	683a      	ldr	r2, [r7, #0]
 800b3a4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800b3a6:	bf00      	nop
 800b3a8:	370c      	adds	r7, #12
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b0:	4770      	bx	lr

0800b3b2 <LL_TIM_SetAutoReload>:
{
 800b3b2:	b480      	push	{r7}
 800b3b4:	b083      	sub	sp, #12
 800b3b6:	af00      	add	r7, sp, #0
 800b3b8:	6078      	str	r0, [r7, #4]
 800b3ba:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	683a      	ldr	r2, [r7, #0]
 800b3c0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800b3c2:	bf00      	nop
 800b3c4:	370c      	adds	r7, #12
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3cc:	4770      	bx	lr

0800b3ce <LL_TIM_SetRepetitionCounter>:
{
 800b3ce:	b480      	push	{r7}
 800b3d0:	b083      	sub	sp, #12
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
 800b3d6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	683a      	ldr	r2, [r7, #0]
 800b3dc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b3de:	bf00      	nop
 800b3e0:	370c      	adds	r7, #12
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr

0800b3ea <LL_TIM_OC_SetCompareCH1>:
{
 800b3ea:	b480      	push	{r7}
 800b3ec:	b083      	sub	sp, #12
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
 800b3f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	683a      	ldr	r2, [r7, #0]
 800b3f8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800b3fa:	bf00      	nop
 800b3fc:	370c      	adds	r7, #12
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr

0800b406 <LL_TIM_OC_SetCompareCH2>:
{
 800b406:	b480      	push	{r7}
 800b408:	b083      	sub	sp, #12
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	6078      	str	r0, [r7, #4]
 800b40e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	683a      	ldr	r2, [r7, #0]
 800b414:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800b416:	bf00      	nop
 800b418:	370c      	adds	r7, #12
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr

0800b422 <LL_TIM_OC_SetCompareCH3>:
{
 800b422:	b480      	push	{r7}
 800b424:	b083      	sub	sp, #12
 800b426:	af00      	add	r7, sp, #0
 800b428:	6078      	str	r0, [r7, #4]
 800b42a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	683a      	ldr	r2, [r7, #0]
 800b430:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800b432:	bf00      	nop
 800b434:	370c      	adds	r7, #12
 800b436:	46bd      	mov	sp, r7
 800b438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43c:	4770      	bx	lr

0800b43e <LL_TIM_OC_SetCompareCH4>:
{
 800b43e:	b480      	push	{r7}
 800b440:	b083      	sub	sp, #12
 800b442:	af00      	add	r7, sp, #0
 800b444:	6078      	str	r0, [r7, #4]
 800b446:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	683a      	ldr	r2, [r7, #0]
 800b44c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800b44e:	bf00      	nop
 800b450:	370c      	adds	r7, #12
 800b452:	46bd      	mov	sp, r7
 800b454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b458:	4770      	bx	lr

0800b45a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800b45a:	b480      	push	{r7}
 800b45c:	b083      	sub	sp, #12
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	695b      	ldr	r3, [r3, #20]
 800b466:	f043 0201 	orr.w	r2, r3, #1
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	615a      	str	r2, [r3, #20]
}
 800b46e:	bf00      	nop
 800b470:	370c      	adds	r7, #12
 800b472:	46bd      	mov	sp, r7
 800b474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b478:	4770      	bx	lr
	...

0800b47c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	4a3d      	ldr	r2, [pc, #244]	@ (800b584 <LL_TIM_Init+0x108>)
 800b490:	4293      	cmp	r3, r2
 800b492:	d013      	beq.n	800b4bc <LL_TIM_Init+0x40>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b49a:	d00f      	beq.n	800b4bc <LL_TIM_Init+0x40>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	4a3a      	ldr	r2, [pc, #232]	@ (800b588 <LL_TIM_Init+0x10c>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d00b      	beq.n	800b4bc <LL_TIM_Init+0x40>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	4a39      	ldr	r2, [pc, #228]	@ (800b58c <LL_TIM_Init+0x110>)
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d007      	beq.n	800b4bc <LL_TIM_Init+0x40>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	4a38      	ldr	r2, [pc, #224]	@ (800b590 <LL_TIM_Init+0x114>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d003      	beq.n	800b4bc <LL_TIM_Init+0x40>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	4a37      	ldr	r2, [pc, #220]	@ (800b594 <LL_TIM_Init+0x118>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d106      	bne.n	800b4ca <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	4a2d      	ldr	r2, [pc, #180]	@ (800b584 <LL_TIM_Init+0x108>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d02b      	beq.n	800b52a <LL_TIM_Init+0xae>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4d8:	d027      	beq.n	800b52a <LL_TIM_Init+0xae>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	4a2a      	ldr	r2, [pc, #168]	@ (800b588 <LL_TIM_Init+0x10c>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d023      	beq.n	800b52a <LL_TIM_Init+0xae>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	4a29      	ldr	r2, [pc, #164]	@ (800b58c <LL_TIM_Init+0x110>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d01f      	beq.n	800b52a <LL_TIM_Init+0xae>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	4a28      	ldr	r2, [pc, #160]	@ (800b590 <LL_TIM_Init+0x114>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d01b      	beq.n	800b52a <LL_TIM_Init+0xae>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	4a27      	ldr	r2, [pc, #156]	@ (800b594 <LL_TIM_Init+0x118>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d017      	beq.n	800b52a <LL_TIM_Init+0xae>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	4a26      	ldr	r2, [pc, #152]	@ (800b598 <LL_TIM_Init+0x11c>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d013      	beq.n	800b52a <LL_TIM_Init+0xae>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	4a25      	ldr	r2, [pc, #148]	@ (800b59c <LL_TIM_Init+0x120>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d00f      	beq.n	800b52a <LL_TIM_Init+0xae>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	4a24      	ldr	r2, [pc, #144]	@ (800b5a0 <LL_TIM_Init+0x124>)
 800b50e:	4293      	cmp	r3, r2
 800b510:	d00b      	beq.n	800b52a <LL_TIM_Init+0xae>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	4a23      	ldr	r2, [pc, #140]	@ (800b5a4 <LL_TIM_Init+0x128>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d007      	beq.n	800b52a <LL_TIM_Init+0xae>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	4a22      	ldr	r2, [pc, #136]	@ (800b5a8 <LL_TIM_Init+0x12c>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d003      	beq.n	800b52a <LL_TIM_Init+0xae>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	4a21      	ldr	r2, [pc, #132]	@ (800b5ac <LL_TIM_Init+0x130>)
 800b526:	4293      	cmp	r3, r2
 800b528:	d106      	bne.n	800b538 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	68db      	ldr	r3, [r3, #12]
 800b534:	4313      	orrs	r3, r2
 800b536:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	68fa      	ldr	r2, [r7, #12]
 800b53c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	689b      	ldr	r3, [r3, #8]
 800b542:	4619      	mov	r1, r3
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f7ff ff34 	bl	800b3b2 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	881b      	ldrh	r3, [r3, #0]
 800b54e:	4619      	mov	r1, r3
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f7ff ff20 	bl	800b396 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	4a0a      	ldr	r2, [pc, #40]	@ (800b584 <LL_TIM_Init+0x108>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d003      	beq.n	800b566 <LL_TIM_Init+0xea>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	4a0c      	ldr	r2, [pc, #48]	@ (800b594 <LL_TIM_Init+0x118>)
 800b562:	4293      	cmp	r3, r2
 800b564:	d105      	bne.n	800b572 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	691b      	ldr	r3, [r3, #16]
 800b56a:	4619      	mov	r1, r3
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f7ff ff2e 	bl	800b3ce <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f7ff ff71 	bl	800b45a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800b578:	2300      	movs	r3, #0
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3710      	adds	r7, #16
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop
 800b584:	40010000 	.word	0x40010000
 800b588:	40000400 	.word	0x40000400
 800b58c:	40000800 	.word	0x40000800
 800b590:	40000c00 	.word	0x40000c00
 800b594:	40010400 	.word	0x40010400
 800b598:	40014000 	.word	0x40014000
 800b59c:	40014400 	.word	0x40014400
 800b5a0:	40014800 	.word	0x40014800
 800b5a4:	40001800 	.word	0x40001800
 800b5a8:	40001c00 	.word	0x40001c00
 800b5ac:	40002000 	.word	0x40002000

0800b5b0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b086      	sub	sp, #24
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	60f8      	str	r0, [r7, #12]
 800b5b8:	60b9      	str	r1, [r7, #8]
 800b5ba:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800b5bc:	2301      	movs	r3, #1
 800b5be:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b5c6:	d027      	beq.n	800b618 <LL_TIM_OC_Init+0x68>
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b5ce:	d82a      	bhi.n	800b626 <LL_TIM_OC_Init+0x76>
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b5d6:	d018      	beq.n	800b60a <LL_TIM_OC_Init+0x5a>
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b5de:	d822      	bhi.n	800b626 <LL_TIM_OC_Init+0x76>
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	2b01      	cmp	r3, #1
 800b5e4:	d003      	beq.n	800b5ee <LL_TIM_OC_Init+0x3e>
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	2b10      	cmp	r3, #16
 800b5ea:	d007      	beq.n	800b5fc <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800b5ec:	e01b      	b.n	800b626 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800b5ee:	6879      	ldr	r1, [r7, #4]
 800b5f0:	68f8      	ldr	r0, [r7, #12]
 800b5f2:	f000 f81f 	bl	800b634 <OC1Config>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	75fb      	strb	r3, [r7, #23]
      break;
 800b5fa:	e015      	b.n	800b628 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800b5fc:	6879      	ldr	r1, [r7, #4]
 800b5fe:	68f8      	ldr	r0, [r7, #12]
 800b600:	f000 f884 	bl	800b70c <OC2Config>
 800b604:	4603      	mov	r3, r0
 800b606:	75fb      	strb	r3, [r7, #23]
      break;
 800b608:	e00e      	b.n	800b628 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800b60a:	6879      	ldr	r1, [r7, #4]
 800b60c:	68f8      	ldr	r0, [r7, #12]
 800b60e:	f000 f8ed 	bl	800b7ec <OC3Config>
 800b612:	4603      	mov	r3, r0
 800b614:	75fb      	strb	r3, [r7, #23]
      break;
 800b616:	e007      	b.n	800b628 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800b618:	6879      	ldr	r1, [r7, #4]
 800b61a:	68f8      	ldr	r0, [r7, #12]
 800b61c:	f000 f956 	bl	800b8cc <OC4Config>
 800b620:	4603      	mov	r3, r0
 800b622:	75fb      	strb	r3, [r7, #23]
      break;
 800b624:	e000      	b.n	800b628 <LL_TIM_OC_Init+0x78>
      break;
 800b626:	bf00      	nop
  }

  return result;
 800b628:	7dfb      	ldrb	r3, [r7, #23]
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3718      	adds	r7, #24
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
	...

0800b634 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b086      	sub	sp, #24
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6a1b      	ldr	r3, [r3, #32]
 800b642:	f023 0201 	bic.w	r2, r3, #1
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6a1b      	ldr	r3, [r3, #32]
 800b64e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	699b      	ldr	r3, [r3, #24]
 800b65a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f023 0303 	bic.w	r3, r3, #3
 800b662:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4313      	orrs	r3, r2
 800b670:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	f023 0202 	bic.w	r2, r3, #2
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	691b      	ldr	r3, [r3, #16]
 800b67c:	4313      	orrs	r3, r2
 800b67e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800b680:	697b      	ldr	r3, [r7, #20]
 800b682:	f023 0201 	bic.w	r2, r3, #1
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	685b      	ldr	r3, [r3, #4]
 800b68a:	4313      	orrs	r3, r2
 800b68c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	4a1c      	ldr	r2, [pc, #112]	@ (800b704 <OC1Config+0xd0>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d003      	beq.n	800b69e <OC1Config+0x6a>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	4a1b      	ldr	r2, [pc, #108]	@ (800b708 <OC1Config+0xd4>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d11e      	bne.n	800b6dc <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	f023 0208 	bic.w	r2, r3, #8
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	695b      	ldr	r3, [r3, #20]
 800b6a8:	009b      	lsls	r3, r3, #2
 800b6aa:	4313      	orrs	r3, r2
 800b6ac:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	f023 0204 	bic.w	r2, r3, #4
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	689b      	ldr	r3, [r3, #8]
 800b6b8:	009b      	lsls	r3, r3, #2
 800b6ba:	4313      	orrs	r3, r2
 800b6bc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	699b      	ldr	r3, [r3, #24]
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	69db      	ldr	r3, [r3, #28]
 800b6d6:	005b      	lsls	r3, r3, #1
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	693a      	ldr	r2, [r7, #16]
 800b6e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	68fa      	ldr	r2, [r7, #12]
 800b6e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	68db      	ldr	r3, [r3, #12]
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f7ff fe7b 	bl	800b3ea <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	697a      	ldr	r2, [r7, #20]
 800b6f8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800b6fa:	2300      	movs	r3, #0
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3718      	adds	r7, #24
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}
 800b704:	40010000 	.word	0x40010000
 800b708:	40010400 	.word	0x40010400

0800b70c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b086      	sub	sp, #24
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6a1b      	ldr	r3, [r3, #32]
 800b71a:	f023 0210 	bic.w	r2, r3, #16
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6a1b      	ldr	r3, [r3, #32]
 800b726:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	699b      	ldr	r3, [r3, #24]
 800b732:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b73a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	021b      	lsls	r3, r3, #8
 800b748:	4313      	orrs	r3, r2
 800b74a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	f023 0220 	bic.w	r2, r3, #32
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	691b      	ldr	r3, [r3, #16]
 800b756:	011b      	lsls	r3, r3, #4
 800b758:	4313      	orrs	r3, r2
 800b75a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	f023 0210 	bic.w	r2, r3, #16
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	011b      	lsls	r3, r3, #4
 800b768:	4313      	orrs	r3, r2
 800b76a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	4a1d      	ldr	r2, [pc, #116]	@ (800b7e4 <OC2Config+0xd8>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d003      	beq.n	800b77c <OC2Config+0x70>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	4a1c      	ldr	r2, [pc, #112]	@ (800b7e8 <OC2Config+0xdc>)
 800b778:	4293      	cmp	r3, r2
 800b77a:	d11f      	bne.n	800b7bc <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	695b      	ldr	r3, [r3, #20]
 800b786:	019b      	lsls	r3, r3, #6
 800b788:	4313      	orrs	r3, r2
 800b78a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	689b      	ldr	r3, [r3, #8]
 800b796:	019b      	lsls	r3, r3, #6
 800b798:	4313      	orrs	r3, r2
 800b79a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	699b      	ldr	r3, [r3, #24]
 800b7a6:	009b      	lsls	r3, r3, #2
 800b7a8:	4313      	orrs	r3, r2
 800b7aa:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	69db      	ldr	r3, [r3, #28]
 800b7b6:	00db      	lsls	r3, r3, #3
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	693a      	ldr	r2, [r7, #16]
 800b7c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	68fa      	ldr	r2, [r7, #12]
 800b7c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	68db      	ldr	r3, [r3, #12]
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f7ff fe19 	bl	800b406 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	697a      	ldr	r2, [r7, #20]
 800b7d8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800b7da:	2300      	movs	r3, #0
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3718      	adds	r7, #24
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}
 800b7e4:	40010000 	.word	0x40010000
 800b7e8:	40010400 	.word	0x40010400

0800b7ec <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b086      	sub	sp, #24
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6a1b      	ldr	r3, [r3, #32]
 800b7fa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6a1b      	ldr	r3, [r3, #32]
 800b806:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	685b      	ldr	r3, [r3, #4]
 800b80c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	69db      	ldr	r3, [r3, #28]
 800b812:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f023 0303 	bic.w	r3, r3, #3
 800b81a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	4313      	orrs	r3, r2
 800b828:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	691b      	ldr	r3, [r3, #16]
 800b834:	021b      	lsls	r3, r3, #8
 800b836:	4313      	orrs	r3, r2
 800b838:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	021b      	lsls	r3, r3, #8
 800b846:	4313      	orrs	r3, r2
 800b848:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	4a1d      	ldr	r2, [pc, #116]	@ (800b8c4 <OC3Config+0xd8>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d003      	beq.n	800b85a <OC3Config+0x6e>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	4a1c      	ldr	r2, [pc, #112]	@ (800b8c8 <OC3Config+0xdc>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d11f      	bne.n	800b89a <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	695b      	ldr	r3, [r3, #20]
 800b864:	029b      	lsls	r3, r3, #10
 800b866:	4313      	orrs	r3, r2
 800b868:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	689b      	ldr	r3, [r3, #8]
 800b874:	029b      	lsls	r3, r3, #10
 800b876:	4313      	orrs	r3, r2
 800b878:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	699b      	ldr	r3, [r3, #24]
 800b884:	011b      	lsls	r3, r3, #4
 800b886:	4313      	orrs	r3, r2
 800b888:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	69db      	ldr	r3, [r3, #28]
 800b894:	015b      	lsls	r3, r3, #5
 800b896:	4313      	orrs	r3, r2
 800b898:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	693a      	ldr	r2, [r7, #16]
 800b89e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	68fa      	ldr	r2, [r7, #12]
 800b8a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	68db      	ldr	r3, [r3, #12]
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f7ff fdb8 	bl	800b422 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	697a      	ldr	r2, [r7, #20]
 800b8b6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800b8b8:	2300      	movs	r3, #0
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3718      	adds	r7, #24
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	40010000 	.word	0x40010000
 800b8c8:	40010400 	.word	0x40010400

0800b8cc <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b086      	sub	sp, #24
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6a1b      	ldr	r3, [r3, #32]
 800b8da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6a1b      	ldr	r3, [r3, #32]
 800b8e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	685b      	ldr	r3, [r3, #4]
 800b8ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	69db      	ldr	r3, [r3, #28]
 800b8f2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b8fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	021b      	lsls	r3, r3, #8
 800b908:	4313      	orrs	r3, r2
 800b90a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	691b      	ldr	r3, [r3, #16]
 800b916:	031b      	lsls	r3, r3, #12
 800b918:	4313      	orrs	r3, r2
 800b91a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	685b      	ldr	r3, [r3, #4]
 800b926:	031b      	lsls	r3, r3, #12
 800b928:	4313      	orrs	r3, r2
 800b92a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	4a11      	ldr	r2, [pc, #68]	@ (800b974 <OC4Config+0xa8>)
 800b930:	4293      	cmp	r3, r2
 800b932:	d003      	beq.n	800b93c <OC4Config+0x70>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	4a10      	ldr	r2, [pc, #64]	@ (800b978 <OC4Config+0xac>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d107      	bne.n	800b94c <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	699b      	ldr	r3, [r3, #24]
 800b946:	019b      	lsls	r3, r3, #6
 800b948:	4313      	orrs	r3, r2
 800b94a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	697a      	ldr	r2, [r7, #20]
 800b950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	68fa      	ldr	r2, [r7, #12]
 800b956:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	68db      	ldr	r3, [r3, #12]
 800b95c:	4619      	mov	r1, r3
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f7ff fd6d 	bl	800b43e <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	693a      	ldr	r2, [r7, #16]
 800b968:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800b96a:	2300      	movs	r3, #0
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3718      	adds	r7, #24
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}
 800b974:	40010000 	.word	0x40010000
 800b978:	40010400 	.word	0x40010400

0800b97c <LL_USART_IsEnabled>:
{
 800b97c:	b480      	push	{r7}
 800b97e:	b083      	sub	sp, #12
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	68db      	ldr	r3, [r3, #12]
 800b988:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b98c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b990:	bf0c      	ite	eq
 800b992:	2301      	moveq	r3, #1
 800b994:	2300      	movne	r3, #0
 800b996:	b2db      	uxtb	r3, r3
}
 800b998:	4618      	mov	r0, r3
 800b99a:	370c      	adds	r7, #12
 800b99c:	46bd      	mov	sp, r7
 800b99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a2:	4770      	bx	lr

0800b9a4 <LL_USART_SetStopBitsLength>:
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b083      	sub	sp, #12
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	691b      	ldr	r3, [r3, #16]
 800b9b2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	431a      	orrs	r2, r3
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	611a      	str	r2, [r3, #16]
}
 800b9be:	bf00      	nop
 800b9c0:	370c      	adds	r7, #12
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr

0800b9ca <LL_USART_SetHWFlowCtrl>:
{
 800b9ca:	b480      	push	{r7}
 800b9cc:	b083      	sub	sp, #12
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	6078      	str	r0, [r7, #4]
 800b9d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	695b      	ldr	r3, [r3, #20]
 800b9d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	431a      	orrs	r2, r3
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	615a      	str	r2, [r3, #20]
}
 800b9e4:	bf00      	nop
 800b9e6:	370c      	adds	r7, #12
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr

0800b9f0 <LL_USART_SetBaudRate>:
{
 800b9f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b9f4:	b0c0      	sub	sp, #256	@ 0x100
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b9fc:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 800ba00:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800ba04:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800ba08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ba0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ba10:	f040 810c 	bne.w	800bc2c <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800ba14:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ba18:	2200      	movs	r2, #0
 800ba1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ba1e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800ba22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800ba26:	4622      	mov	r2, r4
 800ba28:	462b      	mov	r3, r5
 800ba2a:	1891      	adds	r1, r2, r2
 800ba2c:	6639      	str	r1, [r7, #96]	@ 0x60
 800ba2e:	415b      	adcs	r3, r3
 800ba30:	667b      	str	r3, [r7, #100]	@ 0x64
 800ba32:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800ba36:	4621      	mov	r1, r4
 800ba38:	eb12 0801 	adds.w	r8, r2, r1
 800ba3c:	4629      	mov	r1, r5
 800ba3e:	eb43 0901 	adc.w	r9, r3, r1
 800ba42:	f04f 0200 	mov.w	r2, #0
 800ba46:	f04f 0300 	mov.w	r3, #0
 800ba4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ba4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ba52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ba56:	4690      	mov	r8, r2
 800ba58:	4699      	mov	r9, r3
 800ba5a:	4623      	mov	r3, r4
 800ba5c:	eb18 0303 	adds.w	r3, r8, r3
 800ba60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ba64:	462b      	mov	r3, r5
 800ba66:	eb49 0303 	adc.w	r3, r9, r3
 800ba6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ba6e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ba72:	2200      	movs	r2, #0
 800ba74:	469a      	mov	sl, r3
 800ba76:	4693      	mov	fp, r2
 800ba78:	eb1a 030a 	adds.w	r3, sl, sl
 800ba7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ba7e:	eb4b 030b 	adc.w	r3, fp, fp
 800ba82:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ba84:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800ba88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800ba8c:	f7f5 f88c 	bl	8000ba8 <__aeabi_uldivmod>
 800ba90:	4602      	mov	r2, r0
 800ba92:	460b      	mov	r3, r1
 800ba94:	4b64      	ldr	r3, [pc, #400]	@ (800bc28 <LL_USART_SetBaudRate+0x238>)
 800ba96:	fba3 2302 	umull	r2, r3, r3, r2
 800ba9a:	095b      	lsrs	r3, r3, #5
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	011b      	lsls	r3, r3, #4
 800baa0:	b29c      	uxth	r4, r3
 800baa2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800baa6:	2200      	movs	r2, #0
 800baa8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800baac:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800bab0:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 800bab4:	4642      	mov	r2, r8
 800bab6:	464b      	mov	r3, r9
 800bab8:	1891      	adds	r1, r2, r2
 800baba:	6539      	str	r1, [r7, #80]	@ 0x50
 800babc:	415b      	adcs	r3, r3
 800babe:	657b      	str	r3, [r7, #84]	@ 0x54
 800bac0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800bac4:	4641      	mov	r1, r8
 800bac6:	1851      	adds	r1, r2, r1
 800bac8:	64b9      	str	r1, [r7, #72]	@ 0x48
 800baca:	4649      	mov	r1, r9
 800bacc:	414b      	adcs	r3, r1
 800bace:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bad0:	f04f 0200 	mov.w	r2, #0
 800bad4:	f04f 0300 	mov.w	r3, #0
 800bad8:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 800badc:	4659      	mov	r1, fp
 800bade:	00cb      	lsls	r3, r1, #3
 800bae0:	4651      	mov	r1, sl
 800bae2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bae6:	4651      	mov	r1, sl
 800bae8:	00ca      	lsls	r2, r1, #3
 800baea:	4610      	mov	r0, r2
 800baec:	4619      	mov	r1, r3
 800baee:	4603      	mov	r3, r0
 800baf0:	4642      	mov	r2, r8
 800baf2:	189b      	adds	r3, r3, r2
 800baf4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800baf8:	464b      	mov	r3, r9
 800bafa:	460a      	mov	r2, r1
 800bafc:	eb42 0303 	adc.w	r3, r2, r3
 800bb00:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bb04:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800bb08:	2200      	movs	r2, #0
 800bb0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bb0e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800bb12:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800bb16:	460b      	mov	r3, r1
 800bb18:	18db      	adds	r3, r3, r3
 800bb1a:	643b      	str	r3, [r7, #64]	@ 0x40
 800bb1c:	4613      	mov	r3, r2
 800bb1e:	eb42 0303 	adc.w	r3, r2, r3
 800bb22:	647b      	str	r3, [r7, #68]	@ 0x44
 800bb24:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800bb28:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 800bb2c:	f7f5 f83c 	bl	8000ba8 <__aeabi_uldivmod>
 800bb30:	4602      	mov	r2, r0
 800bb32:	460b      	mov	r3, r1
 800bb34:	4611      	mov	r1, r2
 800bb36:	4b3c      	ldr	r3, [pc, #240]	@ (800bc28 <LL_USART_SetBaudRate+0x238>)
 800bb38:	fba3 2301 	umull	r2, r3, r3, r1
 800bb3c:	095b      	lsrs	r3, r3, #5
 800bb3e:	2264      	movs	r2, #100	@ 0x64
 800bb40:	fb02 f303 	mul.w	r3, r2, r3
 800bb44:	1acb      	subs	r3, r1, r3
 800bb46:	00db      	lsls	r3, r3, #3
 800bb48:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800bb4c:	4b36      	ldr	r3, [pc, #216]	@ (800bc28 <LL_USART_SetBaudRate+0x238>)
 800bb4e:	fba3 2302 	umull	r2, r3, r3, r2
 800bb52:	095b      	lsrs	r3, r3, #5
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	005b      	lsls	r3, r3, #1
 800bb58:	b29b      	uxth	r3, r3
 800bb5a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800bb5e:	b29b      	uxth	r3, r3
 800bb60:	4423      	add	r3, r4
 800bb62:	b29c      	uxth	r4, r3
 800bb64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bb68:	2200      	movs	r2, #0
 800bb6a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bb6e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800bb72:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 800bb76:	4642      	mov	r2, r8
 800bb78:	464b      	mov	r3, r9
 800bb7a:	1891      	adds	r1, r2, r2
 800bb7c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800bb7e:	415b      	adcs	r3, r3
 800bb80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb82:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800bb86:	4641      	mov	r1, r8
 800bb88:	1851      	adds	r1, r2, r1
 800bb8a:	6339      	str	r1, [r7, #48]	@ 0x30
 800bb8c:	4649      	mov	r1, r9
 800bb8e:	414b      	adcs	r3, r1
 800bb90:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb92:	f04f 0200 	mov.w	r2, #0
 800bb96:	f04f 0300 	mov.w	r3, #0
 800bb9a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800bb9e:	4659      	mov	r1, fp
 800bba0:	00cb      	lsls	r3, r1, #3
 800bba2:	4651      	mov	r1, sl
 800bba4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bba8:	4651      	mov	r1, sl
 800bbaa:	00ca      	lsls	r2, r1, #3
 800bbac:	4610      	mov	r0, r2
 800bbae:	4619      	mov	r1, r3
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	4642      	mov	r2, r8
 800bbb4:	189b      	adds	r3, r3, r2
 800bbb6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bbba:	464b      	mov	r3, r9
 800bbbc:	460a      	mov	r2, r1
 800bbbe:	eb42 0303 	adc.w	r3, r2, r3
 800bbc2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800bbc6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800bbca:	2200      	movs	r2, #0
 800bbcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bbd0:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800bbd4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800bbd8:	460b      	mov	r3, r1
 800bbda:	18db      	adds	r3, r3, r3
 800bbdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bbde:	4613      	mov	r3, r2
 800bbe0:	eb42 0303 	adc.w	r3, r2, r3
 800bbe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bbe6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800bbea:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800bbee:	f7f4 ffdb 	bl	8000ba8 <__aeabi_uldivmod>
 800bbf2:	4602      	mov	r2, r0
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	4b0c      	ldr	r3, [pc, #48]	@ (800bc28 <LL_USART_SetBaudRate+0x238>)
 800bbf8:	fba3 1302 	umull	r1, r3, r3, r2
 800bbfc:	095b      	lsrs	r3, r3, #5
 800bbfe:	2164      	movs	r1, #100	@ 0x64
 800bc00:	fb01 f303 	mul.w	r3, r1, r3
 800bc04:	1ad3      	subs	r3, r2, r3
 800bc06:	00db      	lsls	r3, r3, #3
 800bc08:	3332      	adds	r3, #50	@ 0x32
 800bc0a:	4a07      	ldr	r2, [pc, #28]	@ (800bc28 <LL_USART_SetBaudRate+0x238>)
 800bc0c:	fba2 2303 	umull	r2, r3, r2, r3
 800bc10:	095b      	lsrs	r3, r3, #5
 800bc12:	b29b      	uxth	r3, r3
 800bc14:	f003 0307 	and.w	r3, r3, #7
 800bc18:	b29b      	uxth	r3, r3
 800bc1a:	4423      	add	r3, r4
 800bc1c:	b29b      	uxth	r3, r3
 800bc1e:	461a      	mov	r2, r3
 800bc20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bc24:	609a      	str	r2, [r3, #8]
}
 800bc26:	e108      	b.n	800be3a <LL_USART_SetBaudRate+0x44a>
 800bc28:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800bc2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bc30:	2200      	movs	r2, #0
 800bc32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bc36:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800bc3a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800bc3e:	4642      	mov	r2, r8
 800bc40:	464b      	mov	r3, r9
 800bc42:	1891      	adds	r1, r2, r2
 800bc44:	6239      	str	r1, [r7, #32]
 800bc46:	415b      	adcs	r3, r3
 800bc48:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bc4e:	4641      	mov	r1, r8
 800bc50:	1854      	adds	r4, r2, r1
 800bc52:	4649      	mov	r1, r9
 800bc54:	eb43 0501 	adc.w	r5, r3, r1
 800bc58:	f04f 0200 	mov.w	r2, #0
 800bc5c:	f04f 0300 	mov.w	r3, #0
 800bc60:	00eb      	lsls	r3, r5, #3
 800bc62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bc66:	00e2      	lsls	r2, r4, #3
 800bc68:	4614      	mov	r4, r2
 800bc6a:	461d      	mov	r5, r3
 800bc6c:	4643      	mov	r3, r8
 800bc6e:	18e3      	adds	r3, r4, r3
 800bc70:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bc74:	464b      	mov	r3, r9
 800bc76:	eb45 0303 	adc.w	r3, r5, r3
 800bc7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bc7e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800bc82:	2200      	movs	r2, #0
 800bc84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bc88:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800bc8c:	f04f 0200 	mov.w	r2, #0
 800bc90:	f04f 0300 	mov.w	r3, #0
 800bc94:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800bc98:	4629      	mov	r1, r5
 800bc9a:	008b      	lsls	r3, r1, #2
 800bc9c:	4621      	mov	r1, r4
 800bc9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bca2:	4621      	mov	r1, r4
 800bca4:	008a      	lsls	r2, r1, #2
 800bca6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800bcaa:	f7f4 ff7d 	bl	8000ba8 <__aeabi_uldivmod>
 800bcae:	4602      	mov	r2, r0
 800bcb0:	460b      	mov	r3, r1
 800bcb2:	4b65      	ldr	r3, [pc, #404]	@ (800be48 <LL_USART_SetBaudRate+0x458>)
 800bcb4:	fba3 2302 	umull	r2, r3, r3, r2
 800bcb8:	095b      	lsrs	r3, r3, #5
 800bcba:	b29b      	uxth	r3, r3
 800bcbc:	011b      	lsls	r3, r3, #4
 800bcbe:	b29c      	uxth	r4, r3
 800bcc0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bcca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bcce:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800bcd2:	4642      	mov	r2, r8
 800bcd4:	464b      	mov	r3, r9
 800bcd6:	1891      	adds	r1, r2, r2
 800bcd8:	61b9      	str	r1, [r7, #24]
 800bcda:	415b      	adcs	r3, r3
 800bcdc:	61fb      	str	r3, [r7, #28]
 800bcde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bce2:	4641      	mov	r1, r8
 800bce4:	1851      	adds	r1, r2, r1
 800bce6:	6139      	str	r1, [r7, #16]
 800bce8:	4649      	mov	r1, r9
 800bcea:	414b      	adcs	r3, r1
 800bcec:	617b      	str	r3, [r7, #20]
 800bcee:	f04f 0200 	mov.w	r2, #0
 800bcf2:	f04f 0300 	mov.w	r3, #0
 800bcf6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bcfa:	4659      	mov	r1, fp
 800bcfc:	00cb      	lsls	r3, r1, #3
 800bcfe:	4651      	mov	r1, sl
 800bd00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bd04:	4651      	mov	r1, sl
 800bd06:	00ca      	lsls	r2, r1, #3
 800bd08:	4610      	mov	r0, r2
 800bd0a:	4619      	mov	r1, r3
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	4642      	mov	r2, r8
 800bd10:	189b      	adds	r3, r3, r2
 800bd12:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bd16:	464b      	mov	r3, r9
 800bd18:	460a      	mov	r2, r1
 800bd1a:	eb42 0303 	adc.w	r3, r2, r3
 800bd1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800bd22:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800bd26:	2200      	movs	r2, #0
 800bd28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bd2c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800bd30:	f04f 0200 	mov.w	r2, #0
 800bd34:	f04f 0300 	mov.w	r3, #0
 800bd38:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 800bd3c:	4649      	mov	r1, r9
 800bd3e:	008b      	lsls	r3, r1, #2
 800bd40:	4641      	mov	r1, r8
 800bd42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bd46:	4641      	mov	r1, r8
 800bd48:	008a      	lsls	r2, r1, #2
 800bd4a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800bd4e:	f7f4 ff2b 	bl	8000ba8 <__aeabi_uldivmod>
 800bd52:	4602      	mov	r2, r0
 800bd54:	460b      	mov	r3, r1
 800bd56:	4611      	mov	r1, r2
 800bd58:	4b3b      	ldr	r3, [pc, #236]	@ (800be48 <LL_USART_SetBaudRate+0x458>)
 800bd5a:	fba3 2301 	umull	r2, r3, r3, r1
 800bd5e:	095b      	lsrs	r3, r3, #5
 800bd60:	2264      	movs	r2, #100	@ 0x64
 800bd62:	fb02 f303 	mul.w	r3, r2, r3
 800bd66:	1acb      	subs	r3, r1, r3
 800bd68:	011b      	lsls	r3, r3, #4
 800bd6a:	3332      	adds	r3, #50	@ 0x32
 800bd6c:	4a36      	ldr	r2, [pc, #216]	@ (800be48 <LL_USART_SetBaudRate+0x458>)
 800bd6e:	fba2 2303 	umull	r2, r3, r2, r3
 800bd72:	095b      	lsrs	r3, r3, #5
 800bd74:	b29b      	uxth	r3, r3
 800bd76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bd7a:	b29b      	uxth	r3, r3
 800bd7c:	4423      	add	r3, r4
 800bd7e:	b29c      	uxth	r4, r3
 800bd80:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bd84:	2200      	movs	r2, #0
 800bd86:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bd88:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800bd8a:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800bd8e:	4642      	mov	r2, r8
 800bd90:	464b      	mov	r3, r9
 800bd92:	1891      	adds	r1, r2, r2
 800bd94:	60b9      	str	r1, [r7, #8]
 800bd96:	415b      	adcs	r3, r3
 800bd98:	60fb      	str	r3, [r7, #12]
 800bd9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bd9e:	4641      	mov	r1, r8
 800bda0:	1851      	adds	r1, r2, r1
 800bda2:	6039      	str	r1, [r7, #0]
 800bda4:	4649      	mov	r1, r9
 800bda6:	414b      	adcs	r3, r1
 800bda8:	607b      	str	r3, [r7, #4]
 800bdaa:	f04f 0200 	mov.w	r2, #0
 800bdae:	f04f 0300 	mov.w	r3, #0
 800bdb2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bdb6:	4659      	mov	r1, fp
 800bdb8:	00cb      	lsls	r3, r1, #3
 800bdba:	4651      	mov	r1, sl
 800bdbc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bdc0:	4651      	mov	r1, sl
 800bdc2:	00ca      	lsls	r2, r1, #3
 800bdc4:	4610      	mov	r0, r2
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	4603      	mov	r3, r0
 800bdca:	4642      	mov	r2, r8
 800bdcc:	189b      	adds	r3, r3, r2
 800bdce:	673b      	str	r3, [r7, #112]	@ 0x70
 800bdd0:	464b      	mov	r3, r9
 800bdd2:	460a      	mov	r2, r1
 800bdd4:	eb42 0303 	adc.w	r3, r2, r3
 800bdd8:	677b      	str	r3, [r7, #116]	@ 0x74
 800bdda:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800bdde:	2200      	movs	r2, #0
 800bde0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bde2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bde4:	f04f 0200 	mov.w	r2, #0
 800bde8:	f04f 0300 	mov.w	r3, #0
 800bdec:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 800bdf0:	4649      	mov	r1, r9
 800bdf2:	008b      	lsls	r3, r1, #2
 800bdf4:	4641      	mov	r1, r8
 800bdf6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bdfa:	4641      	mov	r1, r8
 800bdfc:	008a      	lsls	r2, r1, #2
 800bdfe:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800be02:	f7f4 fed1 	bl	8000ba8 <__aeabi_uldivmod>
 800be06:	4602      	mov	r2, r0
 800be08:	460b      	mov	r3, r1
 800be0a:	4b0f      	ldr	r3, [pc, #60]	@ (800be48 <LL_USART_SetBaudRate+0x458>)
 800be0c:	fba3 1302 	umull	r1, r3, r3, r2
 800be10:	095b      	lsrs	r3, r3, #5
 800be12:	2164      	movs	r1, #100	@ 0x64
 800be14:	fb01 f303 	mul.w	r3, r1, r3
 800be18:	1ad3      	subs	r3, r2, r3
 800be1a:	011b      	lsls	r3, r3, #4
 800be1c:	3332      	adds	r3, #50	@ 0x32
 800be1e:	4a0a      	ldr	r2, [pc, #40]	@ (800be48 <LL_USART_SetBaudRate+0x458>)
 800be20:	fba2 2303 	umull	r2, r3, r2, r3
 800be24:	095b      	lsrs	r3, r3, #5
 800be26:	b29b      	uxth	r3, r3
 800be28:	f003 030f 	and.w	r3, r3, #15
 800be2c:	b29b      	uxth	r3, r3
 800be2e:	4423      	add	r3, r4
 800be30:	b29b      	uxth	r3, r3
 800be32:	461a      	mov	r2, r3
 800be34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800be38:	609a      	str	r2, [r3, #8]
}
 800be3a:	bf00      	nop
 800be3c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800be40:	46bd      	mov	sp, r7
 800be42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be46:	bf00      	nop
 800be48:	51eb851f 	.word	0x51eb851f

0800be4c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b088      	sub	sp, #32
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800be56:	2301      	movs	r3, #1
 800be58:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800be5a:	2300      	movs	r3, #0
 800be5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f7ff fd8c 	bl	800b97c <LL_USART_IsEnabled>
 800be64:	4603      	mov	r3, r0
 800be66:	2b00      	cmp	r3, #0
 800be68:	d15e      	bne.n	800bf28 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	68db      	ldr	r3, [r3, #12]
 800be6e:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800be72:	f023 030c 	bic.w	r3, r3, #12
 800be76:	683a      	ldr	r2, [r7, #0]
 800be78:	6851      	ldr	r1, [r2, #4]
 800be7a:	683a      	ldr	r2, [r7, #0]
 800be7c:	68d2      	ldr	r2, [r2, #12]
 800be7e:	4311      	orrs	r1, r2
 800be80:	683a      	ldr	r2, [r7, #0]
 800be82:	6912      	ldr	r2, [r2, #16]
 800be84:	4311      	orrs	r1, r2
 800be86:	683a      	ldr	r2, [r7, #0]
 800be88:	6992      	ldr	r2, [r2, #24]
 800be8a:	430a      	orrs	r2, r1
 800be8c:	431a      	orrs	r2, r3
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	689b      	ldr	r3, [r3, #8]
 800be96:	4619      	mov	r1, r3
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f7ff fd83 	bl	800b9a4 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	695b      	ldr	r3, [r3, #20]
 800bea2:	4619      	mov	r1, r3
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f7ff fd90 	bl	800b9ca <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800beaa:	f107 0308 	add.w	r3, r7, #8
 800beae:	4618      	mov	r0, r3
 800beb0:	f7ff f932 	bl	800b118 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	4a1f      	ldr	r2, [pc, #124]	@ (800bf34 <LL_USART_Init+0xe8>)
 800beb8:	4293      	cmp	r3, r2
 800beba:	d102      	bne.n	800bec2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	61bb      	str	r3, [r7, #24]
 800bec0:	e021      	b.n	800bf06 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	4a1c      	ldr	r2, [pc, #112]	@ (800bf38 <LL_USART_Init+0xec>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d102      	bne.n	800bed0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800beca:	693b      	ldr	r3, [r7, #16]
 800becc:	61bb      	str	r3, [r7, #24]
 800bece:	e01a      	b.n	800bf06 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	4a1a      	ldr	r2, [pc, #104]	@ (800bf3c <LL_USART_Init+0xf0>)
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d102      	bne.n	800bede <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	61bb      	str	r3, [r7, #24]
 800bedc:	e013      	b.n	800bf06 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	4a17      	ldr	r2, [pc, #92]	@ (800bf40 <LL_USART_Init+0xf4>)
 800bee2:	4293      	cmp	r3, r2
 800bee4:	d102      	bne.n	800beec <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	61bb      	str	r3, [r7, #24]
 800beea:	e00c      	b.n	800bf06 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	4a15      	ldr	r2, [pc, #84]	@ (800bf44 <LL_USART_Init+0xf8>)
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d102      	bne.n	800befa <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	61bb      	str	r3, [r7, #24]
 800bef8:	e005      	b.n	800bf06 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	4a12      	ldr	r2, [pc, #72]	@ (800bf48 <LL_USART_Init+0xfc>)
 800befe:	4293      	cmp	r3, r2
 800bf00:	d101      	bne.n	800bf06 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800bf02:	693b      	ldr	r3, [r7, #16]
 800bf04:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800bf06:	69bb      	ldr	r3, [r7, #24]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d00d      	beq.n	800bf28 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d009      	beq.n	800bf28 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 800bf14:	2300      	movs	r3, #0
 800bf16:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800bf20:	69b9      	ldr	r1, [r7, #24]
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f7ff fd64 	bl	800b9f0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800bf28:	7ffb      	ldrb	r3, [r7, #31]
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3720      	adds	r7, #32
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}
 800bf32:	bf00      	nop
 800bf34:	40011000 	.word	0x40011000
 800bf38:	40004400 	.word	0x40004400
 800bf3c:	40004800 	.word	0x40004800
 800bf40:	40011400 	.word	0x40011400
 800bf44:	40004c00 	.word	0x40004c00
 800bf48:	40005000 	.word	0x40005000

0800bf4c <__cvt>:
 800bf4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf50:	ec57 6b10 	vmov	r6, r7, d0
 800bf54:	2f00      	cmp	r7, #0
 800bf56:	460c      	mov	r4, r1
 800bf58:	4619      	mov	r1, r3
 800bf5a:	463b      	mov	r3, r7
 800bf5c:	bfbb      	ittet	lt
 800bf5e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800bf62:	461f      	movlt	r7, r3
 800bf64:	2300      	movge	r3, #0
 800bf66:	232d      	movlt	r3, #45	@ 0x2d
 800bf68:	700b      	strb	r3, [r1, #0]
 800bf6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bf6c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800bf70:	4691      	mov	r9, r2
 800bf72:	f023 0820 	bic.w	r8, r3, #32
 800bf76:	bfbc      	itt	lt
 800bf78:	4632      	movlt	r2, r6
 800bf7a:	4616      	movlt	r6, r2
 800bf7c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bf80:	d005      	beq.n	800bf8e <__cvt+0x42>
 800bf82:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800bf86:	d100      	bne.n	800bf8a <__cvt+0x3e>
 800bf88:	3401      	adds	r4, #1
 800bf8a:	2102      	movs	r1, #2
 800bf8c:	e000      	b.n	800bf90 <__cvt+0x44>
 800bf8e:	2103      	movs	r1, #3
 800bf90:	ab03      	add	r3, sp, #12
 800bf92:	9301      	str	r3, [sp, #4]
 800bf94:	ab02      	add	r3, sp, #8
 800bf96:	9300      	str	r3, [sp, #0]
 800bf98:	ec47 6b10 	vmov	d0, r6, r7
 800bf9c:	4653      	mov	r3, sl
 800bf9e:	4622      	mov	r2, r4
 800bfa0:	f000 ff3e 	bl	800ce20 <_dtoa_r>
 800bfa4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800bfa8:	4605      	mov	r5, r0
 800bfaa:	d119      	bne.n	800bfe0 <__cvt+0x94>
 800bfac:	f019 0f01 	tst.w	r9, #1
 800bfb0:	d00e      	beq.n	800bfd0 <__cvt+0x84>
 800bfb2:	eb00 0904 	add.w	r9, r0, r4
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	2300      	movs	r3, #0
 800bfba:	4630      	mov	r0, r6
 800bfbc:	4639      	mov	r1, r7
 800bfbe:	f7f4 fd83 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfc2:	b108      	cbz	r0, 800bfc8 <__cvt+0x7c>
 800bfc4:	f8cd 900c 	str.w	r9, [sp, #12]
 800bfc8:	2230      	movs	r2, #48	@ 0x30
 800bfca:	9b03      	ldr	r3, [sp, #12]
 800bfcc:	454b      	cmp	r3, r9
 800bfce:	d31e      	bcc.n	800c00e <__cvt+0xc2>
 800bfd0:	9b03      	ldr	r3, [sp, #12]
 800bfd2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bfd4:	1b5b      	subs	r3, r3, r5
 800bfd6:	4628      	mov	r0, r5
 800bfd8:	6013      	str	r3, [r2, #0]
 800bfda:	b004      	add	sp, #16
 800bfdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfe0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bfe4:	eb00 0904 	add.w	r9, r0, r4
 800bfe8:	d1e5      	bne.n	800bfb6 <__cvt+0x6a>
 800bfea:	7803      	ldrb	r3, [r0, #0]
 800bfec:	2b30      	cmp	r3, #48	@ 0x30
 800bfee:	d10a      	bne.n	800c006 <__cvt+0xba>
 800bff0:	2200      	movs	r2, #0
 800bff2:	2300      	movs	r3, #0
 800bff4:	4630      	mov	r0, r6
 800bff6:	4639      	mov	r1, r7
 800bff8:	f7f4 fd66 	bl	8000ac8 <__aeabi_dcmpeq>
 800bffc:	b918      	cbnz	r0, 800c006 <__cvt+0xba>
 800bffe:	f1c4 0401 	rsb	r4, r4, #1
 800c002:	f8ca 4000 	str.w	r4, [sl]
 800c006:	f8da 3000 	ldr.w	r3, [sl]
 800c00a:	4499      	add	r9, r3
 800c00c:	e7d3      	b.n	800bfb6 <__cvt+0x6a>
 800c00e:	1c59      	adds	r1, r3, #1
 800c010:	9103      	str	r1, [sp, #12]
 800c012:	701a      	strb	r2, [r3, #0]
 800c014:	e7d9      	b.n	800bfca <__cvt+0x7e>

0800c016 <__exponent>:
 800c016:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c018:	2900      	cmp	r1, #0
 800c01a:	bfba      	itte	lt
 800c01c:	4249      	neglt	r1, r1
 800c01e:	232d      	movlt	r3, #45	@ 0x2d
 800c020:	232b      	movge	r3, #43	@ 0x2b
 800c022:	2909      	cmp	r1, #9
 800c024:	7002      	strb	r2, [r0, #0]
 800c026:	7043      	strb	r3, [r0, #1]
 800c028:	dd29      	ble.n	800c07e <__exponent+0x68>
 800c02a:	f10d 0307 	add.w	r3, sp, #7
 800c02e:	461d      	mov	r5, r3
 800c030:	270a      	movs	r7, #10
 800c032:	461a      	mov	r2, r3
 800c034:	fbb1 f6f7 	udiv	r6, r1, r7
 800c038:	fb07 1416 	mls	r4, r7, r6, r1
 800c03c:	3430      	adds	r4, #48	@ 0x30
 800c03e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c042:	460c      	mov	r4, r1
 800c044:	2c63      	cmp	r4, #99	@ 0x63
 800c046:	f103 33ff 	add.w	r3, r3, #4294967295
 800c04a:	4631      	mov	r1, r6
 800c04c:	dcf1      	bgt.n	800c032 <__exponent+0x1c>
 800c04e:	3130      	adds	r1, #48	@ 0x30
 800c050:	1e94      	subs	r4, r2, #2
 800c052:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c056:	1c41      	adds	r1, r0, #1
 800c058:	4623      	mov	r3, r4
 800c05a:	42ab      	cmp	r3, r5
 800c05c:	d30a      	bcc.n	800c074 <__exponent+0x5e>
 800c05e:	f10d 0309 	add.w	r3, sp, #9
 800c062:	1a9b      	subs	r3, r3, r2
 800c064:	42ac      	cmp	r4, r5
 800c066:	bf88      	it	hi
 800c068:	2300      	movhi	r3, #0
 800c06a:	3302      	adds	r3, #2
 800c06c:	4403      	add	r3, r0
 800c06e:	1a18      	subs	r0, r3, r0
 800c070:	b003      	add	sp, #12
 800c072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c074:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c078:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c07c:	e7ed      	b.n	800c05a <__exponent+0x44>
 800c07e:	2330      	movs	r3, #48	@ 0x30
 800c080:	3130      	adds	r1, #48	@ 0x30
 800c082:	7083      	strb	r3, [r0, #2]
 800c084:	70c1      	strb	r1, [r0, #3]
 800c086:	1d03      	adds	r3, r0, #4
 800c088:	e7f1      	b.n	800c06e <__exponent+0x58>
	...

0800c08c <_printf_float>:
 800c08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c090:	b08d      	sub	sp, #52	@ 0x34
 800c092:	460c      	mov	r4, r1
 800c094:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c098:	4616      	mov	r6, r2
 800c09a:	461f      	mov	r7, r3
 800c09c:	4605      	mov	r5, r0
 800c09e:	f000 fdbf 	bl	800cc20 <_localeconv_r>
 800c0a2:	6803      	ldr	r3, [r0, #0]
 800c0a4:	9304      	str	r3, [sp, #16]
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f7f4 f8e2 	bl	8000270 <strlen>
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800c0b0:	f8d8 3000 	ldr.w	r3, [r8]
 800c0b4:	9005      	str	r0, [sp, #20]
 800c0b6:	3307      	adds	r3, #7
 800c0b8:	f023 0307 	bic.w	r3, r3, #7
 800c0bc:	f103 0208 	add.w	r2, r3, #8
 800c0c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c0c4:	f8d4 b000 	ldr.w	fp, [r4]
 800c0c8:	f8c8 2000 	str.w	r2, [r8]
 800c0cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c0d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c0d4:	9307      	str	r3, [sp, #28]
 800c0d6:	f8cd 8018 	str.w	r8, [sp, #24]
 800c0da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c0de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c0e2:	4b9c      	ldr	r3, [pc, #624]	@ (800c354 <_printf_float+0x2c8>)
 800c0e4:	f04f 32ff 	mov.w	r2, #4294967295
 800c0e8:	f7f4 fd20 	bl	8000b2c <__aeabi_dcmpun>
 800c0ec:	bb70      	cbnz	r0, 800c14c <_printf_float+0xc0>
 800c0ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c0f2:	4b98      	ldr	r3, [pc, #608]	@ (800c354 <_printf_float+0x2c8>)
 800c0f4:	f04f 32ff 	mov.w	r2, #4294967295
 800c0f8:	f7f4 fcfa 	bl	8000af0 <__aeabi_dcmple>
 800c0fc:	bb30      	cbnz	r0, 800c14c <_printf_float+0xc0>
 800c0fe:	2200      	movs	r2, #0
 800c100:	2300      	movs	r3, #0
 800c102:	4640      	mov	r0, r8
 800c104:	4649      	mov	r1, r9
 800c106:	f7f4 fce9 	bl	8000adc <__aeabi_dcmplt>
 800c10a:	b110      	cbz	r0, 800c112 <_printf_float+0x86>
 800c10c:	232d      	movs	r3, #45	@ 0x2d
 800c10e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c112:	4a91      	ldr	r2, [pc, #580]	@ (800c358 <_printf_float+0x2cc>)
 800c114:	4b91      	ldr	r3, [pc, #580]	@ (800c35c <_printf_float+0x2d0>)
 800c116:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c11a:	bf94      	ite	ls
 800c11c:	4690      	movls	r8, r2
 800c11e:	4698      	movhi	r8, r3
 800c120:	2303      	movs	r3, #3
 800c122:	6123      	str	r3, [r4, #16]
 800c124:	f02b 0304 	bic.w	r3, fp, #4
 800c128:	6023      	str	r3, [r4, #0]
 800c12a:	f04f 0900 	mov.w	r9, #0
 800c12e:	9700      	str	r7, [sp, #0]
 800c130:	4633      	mov	r3, r6
 800c132:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c134:	4621      	mov	r1, r4
 800c136:	4628      	mov	r0, r5
 800c138:	f000 f9d2 	bl	800c4e0 <_printf_common>
 800c13c:	3001      	adds	r0, #1
 800c13e:	f040 808d 	bne.w	800c25c <_printf_float+0x1d0>
 800c142:	f04f 30ff 	mov.w	r0, #4294967295
 800c146:	b00d      	add	sp, #52	@ 0x34
 800c148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c14c:	4642      	mov	r2, r8
 800c14e:	464b      	mov	r3, r9
 800c150:	4640      	mov	r0, r8
 800c152:	4649      	mov	r1, r9
 800c154:	f7f4 fcea 	bl	8000b2c <__aeabi_dcmpun>
 800c158:	b140      	cbz	r0, 800c16c <_printf_float+0xe0>
 800c15a:	464b      	mov	r3, r9
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	bfbc      	itt	lt
 800c160:	232d      	movlt	r3, #45	@ 0x2d
 800c162:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c166:	4a7e      	ldr	r2, [pc, #504]	@ (800c360 <_printf_float+0x2d4>)
 800c168:	4b7e      	ldr	r3, [pc, #504]	@ (800c364 <_printf_float+0x2d8>)
 800c16a:	e7d4      	b.n	800c116 <_printf_float+0x8a>
 800c16c:	6863      	ldr	r3, [r4, #4]
 800c16e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c172:	9206      	str	r2, [sp, #24]
 800c174:	1c5a      	adds	r2, r3, #1
 800c176:	d13b      	bne.n	800c1f0 <_printf_float+0x164>
 800c178:	2306      	movs	r3, #6
 800c17a:	6063      	str	r3, [r4, #4]
 800c17c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c180:	2300      	movs	r3, #0
 800c182:	6022      	str	r2, [r4, #0]
 800c184:	9303      	str	r3, [sp, #12]
 800c186:	ab0a      	add	r3, sp, #40	@ 0x28
 800c188:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c18c:	ab09      	add	r3, sp, #36	@ 0x24
 800c18e:	9300      	str	r3, [sp, #0]
 800c190:	6861      	ldr	r1, [r4, #4]
 800c192:	ec49 8b10 	vmov	d0, r8, r9
 800c196:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c19a:	4628      	mov	r0, r5
 800c19c:	f7ff fed6 	bl	800bf4c <__cvt>
 800c1a0:	9b06      	ldr	r3, [sp, #24]
 800c1a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c1a4:	2b47      	cmp	r3, #71	@ 0x47
 800c1a6:	4680      	mov	r8, r0
 800c1a8:	d129      	bne.n	800c1fe <_printf_float+0x172>
 800c1aa:	1cc8      	adds	r0, r1, #3
 800c1ac:	db02      	blt.n	800c1b4 <_printf_float+0x128>
 800c1ae:	6863      	ldr	r3, [r4, #4]
 800c1b0:	4299      	cmp	r1, r3
 800c1b2:	dd41      	ble.n	800c238 <_printf_float+0x1ac>
 800c1b4:	f1aa 0a02 	sub.w	sl, sl, #2
 800c1b8:	fa5f fa8a 	uxtb.w	sl, sl
 800c1bc:	3901      	subs	r1, #1
 800c1be:	4652      	mov	r2, sl
 800c1c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c1c4:	9109      	str	r1, [sp, #36]	@ 0x24
 800c1c6:	f7ff ff26 	bl	800c016 <__exponent>
 800c1ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c1cc:	1813      	adds	r3, r2, r0
 800c1ce:	2a01      	cmp	r2, #1
 800c1d0:	4681      	mov	r9, r0
 800c1d2:	6123      	str	r3, [r4, #16]
 800c1d4:	dc02      	bgt.n	800c1dc <_printf_float+0x150>
 800c1d6:	6822      	ldr	r2, [r4, #0]
 800c1d8:	07d2      	lsls	r2, r2, #31
 800c1da:	d501      	bpl.n	800c1e0 <_printf_float+0x154>
 800c1dc:	3301      	adds	r3, #1
 800c1de:	6123      	str	r3, [r4, #16]
 800c1e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d0a2      	beq.n	800c12e <_printf_float+0xa2>
 800c1e8:	232d      	movs	r3, #45	@ 0x2d
 800c1ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c1ee:	e79e      	b.n	800c12e <_printf_float+0xa2>
 800c1f0:	9a06      	ldr	r2, [sp, #24]
 800c1f2:	2a47      	cmp	r2, #71	@ 0x47
 800c1f4:	d1c2      	bne.n	800c17c <_printf_float+0xf0>
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d1c0      	bne.n	800c17c <_printf_float+0xf0>
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	e7bd      	b.n	800c17a <_printf_float+0xee>
 800c1fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c202:	d9db      	bls.n	800c1bc <_printf_float+0x130>
 800c204:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c208:	d118      	bne.n	800c23c <_printf_float+0x1b0>
 800c20a:	2900      	cmp	r1, #0
 800c20c:	6863      	ldr	r3, [r4, #4]
 800c20e:	dd0b      	ble.n	800c228 <_printf_float+0x19c>
 800c210:	6121      	str	r1, [r4, #16]
 800c212:	b913      	cbnz	r3, 800c21a <_printf_float+0x18e>
 800c214:	6822      	ldr	r2, [r4, #0]
 800c216:	07d0      	lsls	r0, r2, #31
 800c218:	d502      	bpl.n	800c220 <_printf_float+0x194>
 800c21a:	3301      	adds	r3, #1
 800c21c:	440b      	add	r3, r1
 800c21e:	6123      	str	r3, [r4, #16]
 800c220:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c222:	f04f 0900 	mov.w	r9, #0
 800c226:	e7db      	b.n	800c1e0 <_printf_float+0x154>
 800c228:	b913      	cbnz	r3, 800c230 <_printf_float+0x1a4>
 800c22a:	6822      	ldr	r2, [r4, #0]
 800c22c:	07d2      	lsls	r2, r2, #31
 800c22e:	d501      	bpl.n	800c234 <_printf_float+0x1a8>
 800c230:	3302      	adds	r3, #2
 800c232:	e7f4      	b.n	800c21e <_printf_float+0x192>
 800c234:	2301      	movs	r3, #1
 800c236:	e7f2      	b.n	800c21e <_printf_float+0x192>
 800c238:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c23c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c23e:	4299      	cmp	r1, r3
 800c240:	db05      	blt.n	800c24e <_printf_float+0x1c2>
 800c242:	6823      	ldr	r3, [r4, #0]
 800c244:	6121      	str	r1, [r4, #16]
 800c246:	07d8      	lsls	r0, r3, #31
 800c248:	d5ea      	bpl.n	800c220 <_printf_float+0x194>
 800c24a:	1c4b      	adds	r3, r1, #1
 800c24c:	e7e7      	b.n	800c21e <_printf_float+0x192>
 800c24e:	2900      	cmp	r1, #0
 800c250:	bfd4      	ite	le
 800c252:	f1c1 0202 	rsble	r2, r1, #2
 800c256:	2201      	movgt	r2, #1
 800c258:	4413      	add	r3, r2
 800c25a:	e7e0      	b.n	800c21e <_printf_float+0x192>
 800c25c:	6823      	ldr	r3, [r4, #0]
 800c25e:	055a      	lsls	r2, r3, #21
 800c260:	d407      	bmi.n	800c272 <_printf_float+0x1e6>
 800c262:	6923      	ldr	r3, [r4, #16]
 800c264:	4642      	mov	r2, r8
 800c266:	4631      	mov	r1, r6
 800c268:	4628      	mov	r0, r5
 800c26a:	47b8      	blx	r7
 800c26c:	3001      	adds	r0, #1
 800c26e:	d12b      	bne.n	800c2c8 <_printf_float+0x23c>
 800c270:	e767      	b.n	800c142 <_printf_float+0xb6>
 800c272:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c276:	f240 80dd 	bls.w	800c434 <_printf_float+0x3a8>
 800c27a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c27e:	2200      	movs	r2, #0
 800c280:	2300      	movs	r3, #0
 800c282:	f7f4 fc21 	bl	8000ac8 <__aeabi_dcmpeq>
 800c286:	2800      	cmp	r0, #0
 800c288:	d033      	beq.n	800c2f2 <_printf_float+0x266>
 800c28a:	4a37      	ldr	r2, [pc, #220]	@ (800c368 <_printf_float+0x2dc>)
 800c28c:	2301      	movs	r3, #1
 800c28e:	4631      	mov	r1, r6
 800c290:	4628      	mov	r0, r5
 800c292:	47b8      	blx	r7
 800c294:	3001      	adds	r0, #1
 800c296:	f43f af54 	beq.w	800c142 <_printf_float+0xb6>
 800c29a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c29e:	4543      	cmp	r3, r8
 800c2a0:	db02      	blt.n	800c2a8 <_printf_float+0x21c>
 800c2a2:	6823      	ldr	r3, [r4, #0]
 800c2a4:	07d8      	lsls	r0, r3, #31
 800c2a6:	d50f      	bpl.n	800c2c8 <_printf_float+0x23c>
 800c2a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c2ac:	4631      	mov	r1, r6
 800c2ae:	4628      	mov	r0, r5
 800c2b0:	47b8      	blx	r7
 800c2b2:	3001      	adds	r0, #1
 800c2b4:	f43f af45 	beq.w	800c142 <_printf_float+0xb6>
 800c2b8:	f04f 0900 	mov.w	r9, #0
 800c2bc:	f108 38ff 	add.w	r8, r8, #4294967295
 800c2c0:	f104 0a1a 	add.w	sl, r4, #26
 800c2c4:	45c8      	cmp	r8, r9
 800c2c6:	dc09      	bgt.n	800c2dc <_printf_float+0x250>
 800c2c8:	6823      	ldr	r3, [r4, #0]
 800c2ca:	079b      	lsls	r3, r3, #30
 800c2cc:	f100 8103 	bmi.w	800c4d6 <_printf_float+0x44a>
 800c2d0:	68e0      	ldr	r0, [r4, #12]
 800c2d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c2d4:	4298      	cmp	r0, r3
 800c2d6:	bfb8      	it	lt
 800c2d8:	4618      	movlt	r0, r3
 800c2da:	e734      	b.n	800c146 <_printf_float+0xba>
 800c2dc:	2301      	movs	r3, #1
 800c2de:	4652      	mov	r2, sl
 800c2e0:	4631      	mov	r1, r6
 800c2e2:	4628      	mov	r0, r5
 800c2e4:	47b8      	blx	r7
 800c2e6:	3001      	adds	r0, #1
 800c2e8:	f43f af2b 	beq.w	800c142 <_printf_float+0xb6>
 800c2ec:	f109 0901 	add.w	r9, r9, #1
 800c2f0:	e7e8      	b.n	800c2c4 <_printf_float+0x238>
 800c2f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	dc39      	bgt.n	800c36c <_printf_float+0x2e0>
 800c2f8:	4a1b      	ldr	r2, [pc, #108]	@ (800c368 <_printf_float+0x2dc>)
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	4631      	mov	r1, r6
 800c2fe:	4628      	mov	r0, r5
 800c300:	47b8      	blx	r7
 800c302:	3001      	adds	r0, #1
 800c304:	f43f af1d 	beq.w	800c142 <_printf_float+0xb6>
 800c308:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c30c:	ea59 0303 	orrs.w	r3, r9, r3
 800c310:	d102      	bne.n	800c318 <_printf_float+0x28c>
 800c312:	6823      	ldr	r3, [r4, #0]
 800c314:	07d9      	lsls	r1, r3, #31
 800c316:	d5d7      	bpl.n	800c2c8 <_printf_float+0x23c>
 800c318:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c31c:	4631      	mov	r1, r6
 800c31e:	4628      	mov	r0, r5
 800c320:	47b8      	blx	r7
 800c322:	3001      	adds	r0, #1
 800c324:	f43f af0d 	beq.w	800c142 <_printf_float+0xb6>
 800c328:	f04f 0a00 	mov.w	sl, #0
 800c32c:	f104 0b1a 	add.w	fp, r4, #26
 800c330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c332:	425b      	negs	r3, r3
 800c334:	4553      	cmp	r3, sl
 800c336:	dc01      	bgt.n	800c33c <_printf_float+0x2b0>
 800c338:	464b      	mov	r3, r9
 800c33a:	e793      	b.n	800c264 <_printf_float+0x1d8>
 800c33c:	2301      	movs	r3, #1
 800c33e:	465a      	mov	r2, fp
 800c340:	4631      	mov	r1, r6
 800c342:	4628      	mov	r0, r5
 800c344:	47b8      	blx	r7
 800c346:	3001      	adds	r0, #1
 800c348:	f43f aefb 	beq.w	800c142 <_printf_float+0xb6>
 800c34c:	f10a 0a01 	add.w	sl, sl, #1
 800c350:	e7ee      	b.n	800c330 <_printf_float+0x2a4>
 800c352:	bf00      	nop
 800c354:	7fefffff 	.word	0x7fefffff
 800c358:	0800fa04 	.word	0x0800fa04
 800c35c:	0800fa08 	.word	0x0800fa08
 800c360:	0800fa0c 	.word	0x0800fa0c
 800c364:	0800fa10 	.word	0x0800fa10
 800c368:	0800fa14 	.word	0x0800fa14
 800c36c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c36e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c372:	4553      	cmp	r3, sl
 800c374:	bfa8      	it	ge
 800c376:	4653      	movge	r3, sl
 800c378:	2b00      	cmp	r3, #0
 800c37a:	4699      	mov	r9, r3
 800c37c:	dc36      	bgt.n	800c3ec <_printf_float+0x360>
 800c37e:	f04f 0b00 	mov.w	fp, #0
 800c382:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c386:	f104 021a 	add.w	r2, r4, #26
 800c38a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c38c:	9306      	str	r3, [sp, #24]
 800c38e:	eba3 0309 	sub.w	r3, r3, r9
 800c392:	455b      	cmp	r3, fp
 800c394:	dc31      	bgt.n	800c3fa <_printf_float+0x36e>
 800c396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c398:	459a      	cmp	sl, r3
 800c39a:	dc3a      	bgt.n	800c412 <_printf_float+0x386>
 800c39c:	6823      	ldr	r3, [r4, #0]
 800c39e:	07da      	lsls	r2, r3, #31
 800c3a0:	d437      	bmi.n	800c412 <_printf_float+0x386>
 800c3a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3a4:	ebaa 0903 	sub.w	r9, sl, r3
 800c3a8:	9b06      	ldr	r3, [sp, #24]
 800c3aa:	ebaa 0303 	sub.w	r3, sl, r3
 800c3ae:	4599      	cmp	r9, r3
 800c3b0:	bfa8      	it	ge
 800c3b2:	4699      	movge	r9, r3
 800c3b4:	f1b9 0f00 	cmp.w	r9, #0
 800c3b8:	dc33      	bgt.n	800c422 <_printf_float+0x396>
 800c3ba:	f04f 0800 	mov.w	r8, #0
 800c3be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c3c2:	f104 0b1a 	add.w	fp, r4, #26
 800c3c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3c8:	ebaa 0303 	sub.w	r3, sl, r3
 800c3cc:	eba3 0309 	sub.w	r3, r3, r9
 800c3d0:	4543      	cmp	r3, r8
 800c3d2:	f77f af79 	ble.w	800c2c8 <_printf_float+0x23c>
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	465a      	mov	r2, fp
 800c3da:	4631      	mov	r1, r6
 800c3dc:	4628      	mov	r0, r5
 800c3de:	47b8      	blx	r7
 800c3e0:	3001      	adds	r0, #1
 800c3e2:	f43f aeae 	beq.w	800c142 <_printf_float+0xb6>
 800c3e6:	f108 0801 	add.w	r8, r8, #1
 800c3ea:	e7ec      	b.n	800c3c6 <_printf_float+0x33a>
 800c3ec:	4642      	mov	r2, r8
 800c3ee:	4631      	mov	r1, r6
 800c3f0:	4628      	mov	r0, r5
 800c3f2:	47b8      	blx	r7
 800c3f4:	3001      	adds	r0, #1
 800c3f6:	d1c2      	bne.n	800c37e <_printf_float+0x2f2>
 800c3f8:	e6a3      	b.n	800c142 <_printf_float+0xb6>
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	4631      	mov	r1, r6
 800c3fe:	4628      	mov	r0, r5
 800c400:	9206      	str	r2, [sp, #24]
 800c402:	47b8      	blx	r7
 800c404:	3001      	adds	r0, #1
 800c406:	f43f ae9c 	beq.w	800c142 <_printf_float+0xb6>
 800c40a:	9a06      	ldr	r2, [sp, #24]
 800c40c:	f10b 0b01 	add.w	fp, fp, #1
 800c410:	e7bb      	b.n	800c38a <_printf_float+0x2fe>
 800c412:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c416:	4631      	mov	r1, r6
 800c418:	4628      	mov	r0, r5
 800c41a:	47b8      	blx	r7
 800c41c:	3001      	adds	r0, #1
 800c41e:	d1c0      	bne.n	800c3a2 <_printf_float+0x316>
 800c420:	e68f      	b.n	800c142 <_printf_float+0xb6>
 800c422:	9a06      	ldr	r2, [sp, #24]
 800c424:	464b      	mov	r3, r9
 800c426:	4442      	add	r2, r8
 800c428:	4631      	mov	r1, r6
 800c42a:	4628      	mov	r0, r5
 800c42c:	47b8      	blx	r7
 800c42e:	3001      	adds	r0, #1
 800c430:	d1c3      	bne.n	800c3ba <_printf_float+0x32e>
 800c432:	e686      	b.n	800c142 <_printf_float+0xb6>
 800c434:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c438:	f1ba 0f01 	cmp.w	sl, #1
 800c43c:	dc01      	bgt.n	800c442 <_printf_float+0x3b6>
 800c43e:	07db      	lsls	r3, r3, #31
 800c440:	d536      	bpl.n	800c4b0 <_printf_float+0x424>
 800c442:	2301      	movs	r3, #1
 800c444:	4642      	mov	r2, r8
 800c446:	4631      	mov	r1, r6
 800c448:	4628      	mov	r0, r5
 800c44a:	47b8      	blx	r7
 800c44c:	3001      	adds	r0, #1
 800c44e:	f43f ae78 	beq.w	800c142 <_printf_float+0xb6>
 800c452:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c456:	4631      	mov	r1, r6
 800c458:	4628      	mov	r0, r5
 800c45a:	47b8      	blx	r7
 800c45c:	3001      	adds	r0, #1
 800c45e:	f43f ae70 	beq.w	800c142 <_printf_float+0xb6>
 800c462:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c466:	2200      	movs	r2, #0
 800c468:	2300      	movs	r3, #0
 800c46a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c46e:	f7f4 fb2b 	bl	8000ac8 <__aeabi_dcmpeq>
 800c472:	b9c0      	cbnz	r0, 800c4a6 <_printf_float+0x41a>
 800c474:	4653      	mov	r3, sl
 800c476:	f108 0201 	add.w	r2, r8, #1
 800c47a:	4631      	mov	r1, r6
 800c47c:	4628      	mov	r0, r5
 800c47e:	47b8      	blx	r7
 800c480:	3001      	adds	r0, #1
 800c482:	d10c      	bne.n	800c49e <_printf_float+0x412>
 800c484:	e65d      	b.n	800c142 <_printf_float+0xb6>
 800c486:	2301      	movs	r3, #1
 800c488:	465a      	mov	r2, fp
 800c48a:	4631      	mov	r1, r6
 800c48c:	4628      	mov	r0, r5
 800c48e:	47b8      	blx	r7
 800c490:	3001      	adds	r0, #1
 800c492:	f43f ae56 	beq.w	800c142 <_printf_float+0xb6>
 800c496:	f108 0801 	add.w	r8, r8, #1
 800c49a:	45d0      	cmp	r8, sl
 800c49c:	dbf3      	blt.n	800c486 <_printf_float+0x3fa>
 800c49e:	464b      	mov	r3, r9
 800c4a0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c4a4:	e6df      	b.n	800c266 <_printf_float+0x1da>
 800c4a6:	f04f 0800 	mov.w	r8, #0
 800c4aa:	f104 0b1a 	add.w	fp, r4, #26
 800c4ae:	e7f4      	b.n	800c49a <_printf_float+0x40e>
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	4642      	mov	r2, r8
 800c4b4:	e7e1      	b.n	800c47a <_printf_float+0x3ee>
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	464a      	mov	r2, r9
 800c4ba:	4631      	mov	r1, r6
 800c4bc:	4628      	mov	r0, r5
 800c4be:	47b8      	blx	r7
 800c4c0:	3001      	adds	r0, #1
 800c4c2:	f43f ae3e 	beq.w	800c142 <_printf_float+0xb6>
 800c4c6:	f108 0801 	add.w	r8, r8, #1
 800c4ca:	68e3      	ldr	r3, [r4, #12]
 800c4cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c4ce:	1a5b      	subs	r3, r3, r1
 800c4d0:	4543      	cmp	r3, r8
 800c4d2:	dcf0      	bgt.n	800c4b6 <_printf_float+0x42a>
 800c4d4:	e6fc      	b.n	800c2d0 <_printf_float+0x244>
 800c4d6:	f04f 0800 	mov.w	r8, #0
 800c4da:	f104 0919 	add.w	r9, r4, #25
 800c4de:	e7f4      	b.n	800c4ca <_printf_float+0x43e>

0800c4e0 <_printf_common>:
 800c4e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4e4:	4616      	mov	r6, r2
 800c4e6:	4698      	mov	r8, r3
 800c4e8:	688a      	ldr	r2, [r1, #8]
 800c4ea:	690b      	ldr	r3, [r1, #16]
 800c4ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	bfb8      	it	lt
 800c4f4:	4613      	movlt	r3, r2
 800c4f6:	6033      	str	r3, [r6, #0]
 800c4f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c4fc:	4607      	mov	r7, r0
 800c4fe:	460c      	mov	r4, r1
 800c500:	b10a      	cbz	r2, 800c506 <_printf_common+0x26>
 800c502:	3301      	adds	r3, #1
 800c504:	6033      	str	r3, [r6, #0]
 800c506:	6823      	ldr	r3, [r4, #0]
 800c508:	0699      	lsls	r1, r3, #26
 800c50a:	bf42      	ittt	mi
 800c50c:	6833      	ldrmi	r3, [r6, #0]
 800c50e:	3302      	addmi	r3, #2
 800c510:	6033      	strmi	r3, [r6, #0]
 800c512:	6825      	ldr	r5, [r4, #0]
 800c514:	f015 0506 	ands.w	r5, r5, #6
 800c518:	d106      	bne.n	800c528 <_printf_common+0x48>
 800c51a:	f104 0a19 	add.w	sl, r4, #25
 800c51e:	68e3      	ldr	r3, [r4, #12]
 800c520:	6832      	ldr	r2, [r6, #0]
 800c522:	1a9b      	subs	r3, r3, r2
 800c524:	42ab      	cmp	r3, r5
 800c526:	dc26      	bgt.n	800c576 <_printf_common+0x96>
 800c528:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c52c:	6822      	ldr	r2, [r4, #0]
 800c52e:	3b00      	subs	r3, #0
 800c530:	bf18      	it	ne
 800c532:	2301      	movne	r3, #1
 800c534:	0692      	lsls	r2, r2, #26
 800c536:	d42b      	bmi.n	800c590 <_printf_common+0xb0>
 800c538:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c53c:	4641      	mov	r1, r8
 800c53e:	4638      	mov	r0, r7
 800c540:	47c8      	blx	r9
 800c542:	3001      	adds	r0, #1
 800c544:	d01e      	beq.n	800c584 <_printf_common+0xa4>
 800c546:	6823      	ldr	r3, [r4, #0]
 800c548:	6922      	ldr	r2, [r4, #16]
 800c54a:	f003 0306 	and.w	r3, r3, #6
 800c54e:	2b04      	cmp	r3, #4
 800c550:	bf02      	ittt	eq
 800c552:	68e5      	ldreq	r5, [r4, #12]
 800c554:	6833      	ldreq	r3, [r6, #0]
 800c556:	1aed      	subeq	r5, r5, r3
 800c558:	68a3      	ldr	r3, [r4, #8]
 800c55a:	bf0c      	ite	eq
 800c55c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c560:	2500      	movne	r5, #0
 800c562:	4293      	cmp	r3, r2
 800c564:	bfc4      	itt	gt
 800c566:	1a9b      	subgt	r3, r3, r2
 800c568:	18ed      	addgt	r5, r5, r3
 800c56a:	2600      	movs	r6, #0
 800c56c:	341a      	adds	r4, #26
 800c56e:	42b5      	cmp	r5, r6
 800c570:	d11a      	bne.n	800c5a8 <_printf_common+0xc8>
 800c572:	2000      	movs	r0, #0
 800c574:	e008      	b.n	800c588 <_printf_common+0xa8>
 800c576:	2301      	movs	r3, #1
 800c578:	4652      	mov	r2, sl
 800c57a:	4641      	mov	r1, r8
 800c57c:	4638      	mov	r0, r7
 800c57e:	47c8      	blx	r9
 800c580:	3001      	adds	r0, #1
 800c582:	d103      	bne.n	800c58c <_printf_common+0xac>
 800c584:	f04f 30ff 	mov.w	r0, #4294967295
 800c588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c58c:	3501      	adds	r5, #1
 800c58e:	e7c6      	b.n	800c51e <_printf_common+0x3e>
 800c590:	18e1      	adds	r1, r4, r3
 800c592:	1c5a      	adds	r2, r3, #1
 800c594:	2030      	movs	r0, #48	@ 0x30
 800c596:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c59a:	4422      	add	r2, r4
 800c59c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c5a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c5a4:	3302      	adds	r3, #2
 800c5a6:	e7c7      	b.n	800c538 <_printf_common+0x58>
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	4622      	mov	r2, r4
 800c5ac:	4641      	mov	r1, r8
 800c5ae:	4638      	mov	r0, r7
 800c5b0:	47c8      	blx	r9
 800c5b2:	3001      	adds	r0, #1
 800c5b4:	d0e6      	beq.n	800c584 <_printf_common+0xa4>
 800c5b6:	3601      	adds	r6, #1
 800c5b8:	e7d9      	b.n	800c56e <_printf_common+0x8e>
	...

0800c5bc <_printf_i>:
 800c5bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5c0:	7e0f      	ldrb	r7, [r1, #24]
 800c5c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c5c4:	2f78      	cmp	r7, #120	@ 0x78
 800c5c6:	4691      	mov	r9, r2
 800c5c8:	4680      	mov	r8, r0
 800c5ca:	460c      	mov	r4, r1
 800c5cc:	469a      	mov	sl, r3
 800c5ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c5d2:	d807      	bhi.n	800c5e4 <_printf_i+0x28>
 800c5d4:	2f62      	cmp	r7, #98	@ 0x62
 800c5d6:	d80a      	bhi.n	800c5ee <_printf_i+0x32>
 800c5d8:	2f00      	cmp	r7, #0
 800c5da:	f000 80d2 	beq.w	800c782 <_printf_i+0x1c6>
 800c5de:	2f58      	cmp	r7, #88	@ 0x58
 800c5e0:	f000 80b9 	beq.w	800c756 <_printf_i+0x19a>
 800c5e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c5e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c5ec:	e03a      	b.n	800c664 <_printf_i+0xa8>
 800c5ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c5f2:	2b15      	cmp	r3, #21
 800c5f4:	d8f6      	bhi.n	800c5e4 <_printf_i+0x28>
 800c5f6:	a101      	add	r1, pc, #4	@ (adr r1, 800c5fc <_printf_i+0x40>)
 800c5f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c5fc:	0800c655 	.word	0x0800c655
 800c600:	0800c669 	.word	0x0800c669
 800c604:	0800c5e5 	.word	0x0800c5e5
 800c608:	0800c5e5 	.word	0x0800c5e5
 800c60c:	0800c5e5 	.word	0x0800c5e5
 800c610:	0800c5e5 	.word	0x0800c5e5
 800c614:	0800c669 	.word	0x0800c669
 800c618:	0800c5e5 	.word	0x0800c5e5
 800c61c:	0800c5e5 	.word	0x0800c5e5
 800c620:	0800c5e5 	.word	0x0800c5e5
 800c624:	0800c5e5 	.word	0x0800c5e5
 800c628:	0800c769 	.word	0x0800c769
 800c62c:	0800c693 	.word	0x0800c693
 800c630:	0800c723 	.word	0x0800c723
 800c634:	0800c5e5 	.word	0x0800c5e5
 800c638:	0800c5e5 	.word	0x0800c5e5
 800c63c:	0800c78b 	.word	0x0800c78b
 800c640:	0800c5e5 	.word	0x0800c5e5
 800c644:	0800c693 	.word	0x0800c693
 800c648:	0800c5e5 	.word	0x0800c5e5
 800c64c:	0800c5e5 	.word	0x0800c5e5
 800c650:	0800c72b 	.word	0x0800c72b
 800c654:	6833      	ldr	r3, [r6, #0]
 800c656:	1d1a      	adds	r2, r3, #4
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	6032      	str	r2, [r6, #0]
 800c65c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c660:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c664:	2301      	movs	r3, #1
 800c666:	e09d      	b.n	800c7a4 <_printf_i+0x1e8>
 800c668:	6833      	ldr	r3, [r6, #0]
 800c66a:	6820      	ldr	r0, [r4, #0]
 800c66c:	1d19      	adds	r1, r3, #4
 800c66e:	6031      	str	r1, [r6, #0]
 800c670:	0606      	lsls	r6, r0, #24
 800c672:	d501      	bpl.n	800c678 <_printf_i+0xbc>
 800c674:	681d      	ldr	r5, [r3, #0]
 800c676:	e003      	b.n	800c680 <_printf_i+0xc4>
 800c678:	0645      	lsls	r5, r0, #25
 800c67a:	d5fb      	bpl.n	800c674 <_printf_i+0xb8>
 800c67c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c680:	2d00      	cmp	r5, #0
 800c682:	da03      	bge.n	800c68c <_printf_i+0xd0>
 800c684:	232d      	movs	r3, #45	@ 0x2d
 800c686:	426d      	negs	r5, r5
 800c688:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c68c:	4859      	ldr	r0, [pc, #356]	@ (800c7f4 <_printf_i+0x238>)
 800c68e:	230a      	movs	r3, #10
 800c690:	e011      	b.n	800c6b6 <_printf_i+0xfa>
 800c692:	6821      	ldr	r1, [r4, #0]
 800c694:	6833      	ldr	r3, [r6, #0]
 800c696:	0608      	lsls	r0, r1, #24
 800c698:	f853 5b04 	ldr.w	r5, [r3], #4
 800c69c:	d402      	bmi.n	800c6a4 <_printf_i+0xe8>
 800c69e:	0649      	lsls	r1, r1, #25
 800c6a0:	bf48      	it	mi
 800c6a2:	b2ad      	uxthmi	r5, r5
 800c6a4:	2f6f      	cmp	r7, #111	@ 0x6f
 800c6a6:	4853      	ldr	r0, [pc, #332]	@ (800c7f4 <_printf_i+0x238>)
 800c6a8:	6033      	str	r3, [r6, #0]
 800c6aa:	bf14      	ite	ne
 800c6ac:	230a      	movne	r3, #10
 800c6ae:	2308      	moveq	r3, #8
 800c6b0:	2100      	movs	r1, #0
 800c6b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c6b6:	6866      	ldr	r6, [r4, #4]
 800c6b8:	60a6      	str	r6, [r4, #8]
 800c6ba:	2e00      	cmp	r6, #0
 800c6bc:	bfa2      	ittt	ge
 800c6be:	6821      	ldrge	r1, [r4, #0]
 800c6c0:	f021 0104 	bicge.w	r1, r1, #4
 800c6c4:	6021      	strge	r1, [r4, #0]
 800c6c6:	b90d      	cbnz	r5, 800c6cc <_printf_i+0x110>
 800c6c8:	2e00      	cmp	r6, #0
 800c6ca:	d04b      	beq.n	800c764 <_printf_i+0x1a8>
 800c6cc:	4616      	mov	r6, r2
 800c6ce:	fbb5 f1f3 	udiv	r1, r5, r3
 800c6d2:	fb03 5711 	mls	r7, r3, r1, r5
 800c6d6:	5dc7      	ldrb	r7, [r0, r7]
 800c6d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c6dc:	462f      	mov	r7, r5
 800c6de:	42bb      	cmp	r3, r7
 800c6e0:	460d      	mov	r5, r1
 800c6e2:	d9f4      	bls.n	800c6ce <_printf_i+0x112>
 800c6e4:	2b08      	cmp	r3, #8
 800c6e6:	d10b      	bne.n	800c700 <_printf_i+0x144>
 800c6e8:	6823      	ldr	r3, [r4, #0]
 800c6ea:	07df      	lsls	r7, r3, #31
 800c6ec:	d508      	bpl.n	800c700 <_printf_i+0x144>
 800c6ee:	6923      	ldr	r3, [r4, #16]
 800c6f0:	6861      	ldr	r1, [r4, #4]
 800c6f2:	4299      	cmp	r1, r3
 800c6f4:	bfde      	ittt	le
 800c6f6:	2330      	movle	r3, #48	@ 0x30
 800c6f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c6fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c700:	1b92      	subs	r2, r2, r6
 800c702:	6122      	str	r2, [r4, #16]
 800c704:	f8cd a000 	str.w	sl, [sp]
 800c708:	464b      	mov	r3, r9
 800c70a:	aa03      	add	r2, sp, #12
 800c70c:	4621      	mov	r1, r4
 800c70e:	4640      	mov	r0, r8
 800c710:	f7ff fee6 	bl	800c4e0 <_printf_common>
 800c714:	3001      	adds	r0, #1
 800c716:	d14a      	bne.n	800c7ae <_printf_i+0x1f2>
 800c718:	f04f 30ff 	mov.w	r0, #4294967295
 800c71c:	b004      	add	sp, #16
 800c71e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c722:	6823      	ldr	r3, [r4, #0]
 800c724:	f043 0320 	orr.w	r3, r3, #32
 800c728:	6023      	str	r3, [r4, #0]
 800c72a:	4833      	ldr	r0, [pc, #204]	@ (800c7f8 <_printf_i+0x23c>)
 800c72c:	2778      	movs	r7, #120	@ 0x78
 800c72e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c732:	6823      	ldr	r3, [r4, #0]
 800c734:	6831      	ldr	r1, [r6, #0]
 800c736:	061f      	lsls	r7, r3, #24
 800c738:	f851 5b04 	ldr.w	r5, [r1], #4
 800c73c:	d402      	bmi.n	800c744 <_printf_i+0x188>
 800c73e:	065f      	lsls	r7, r3, #25
 800c740:	bf48      	it	mi
 800c742:	b2ad      	uxthmi	r5, r5
 800c744:	6031      	str	r1, [r6, #0]
 800c746:	07d9      	lsls	r1, r3, #31
 800c748:	bf44      	itt	mi
 800c74a:	f043 0320 	orrmi.w	r3, r3, #32
 800c74e:	6023      	strmi	r3, [r4, #0]
 800c750:	b11d      	cbz	r5, 800c75a <_printf_i+0x19e>
 800c752:	2310      	movs	r3, #16
 800c754:	e7ac      	b.n	800c6b0 <_printf_i+0xf4>
 800c756:	4827      	ldr	r0, [pc, #156]	@ (800c7f4 <_printf_i+0x238>)
 800c758:	e7e9      	b.n	800c72e <_printf_i+0x172>
 800c75a:	6823      	ldr	r3, [r4, #0]
 800c75c:	f023 0320 	bic.w	r3, r3, #32
 800c760:	6023      	str	r3, [r4, #0]
 800c762:	e7f6      	b.n	800c752 <_printf_i+0x196>
 800c764:	4616      	mov	r6, r2
 800c766:	e7bd      	b.n	800c6e4 <_printf_i+0x128>
 800c768:	6833      	ldr	r3, [r6, #0]
 800c76a:	6825      	ldr	r5, [r4, #0]
 800c76c:	6961      	ldr	r1, [r4, #20]
 800c76e:	1d18      	adds	r0, r3, #4
 800c770:	6030      	str	r0, [r6, #0]
 800c772:	062e      	lsls	r6, r5, #24
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	d501      	bpl.n	800c77c <_printf_i+0x1c0>
 800c778:	6019      	str	r1, [r3, #0]
 800c77a:	e002      	b.n	800c782 <_printf_i+0x1c6>
 800c77c:	0668      	lsls	r0, r5, #25
 800c77e:	d5fb      	bpl.n	800c778 <_printf_i+0x1bc>
 800c780:	8019      	strh	r1, [r3, #0]
 800c782:	2300      	movs	r3, #0
 800c784:	6123      	str	r3, [r4, #16]
 800c786:	4616      	mov	r6, r2
 800c788:	e7bc      	b.n	800c704 <_printf_i+0x148>
 800c78a:	6833      	ldr	r3, [r6, #0]
 800c78c:	1d1a      	adds	r2, r3, #4
 800c78e:	6032      	str	r2, [r6, #0]
 800c790:	681e      	ldr	r6, [r3, #0]
 800c792:	6862      	ldr	r2, [r4, #4]
 800c794:	2100      	movs	r1, #0
 800c796:	4630      	mov	r0, r6
 800c798:	f7f3 fd1a 	bl	80001d0 <memchr>
 800c79c:	b108      	cbz	r0, 800c7a2 <_printf_i+0x1e6>
 800c79e:	1b80      	subs	r0, r0, r6
 800c7a0:	6060      	str	r0, [r4, #4]
 800c7a2:	6863      	ldr	r3, [r4, #4]
 800c7a4:	6123      	str	r3, [r4, #16]
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c7ac:	e7aa      	b.n	800c704 <_printf_i+0x148>
 800c7ae:	6923      	ldr	r3, [r4, #16]
 800c7b0:	4632      	mov	r2, r6
 800c7b2:	4649      	mov	r1, r9
 800c7b4:	4640      	mov	r0, r8
 800c7b6:	47d0      	blx	sl
 800c7b8:	3001      	adds	r0, #1
 800c7ba:	d0ad      	beq.n	800c718 <_printf_i+0x15c>
 800c7bc:	6823      	ldr	r3, [r4, #0]
 800c7be:	079b      	lsls	r3, r3, #30
 800c7c0:	d413      	bmi.n	800c7ea <_printf_i+0x22e>
 800c7c2:	68e0      	ldr	r0, [r4, #12]
 800c7c4:	9b03      	ldr	r3, [sp, #12]
 800c7c6:	4298      	cmp	r0, r3
 800c7c8:	bfb8      	it	lt
 800c7ca:	4618      	movlt	r0, r3
 800c7cc:	e7a6      	b.n	800c71c <_printf_i+0x160>
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	4632      	mov	r2, r6
 800c7d2:	4649      	mov	r1, r9
 800c7d4:	4640      	mov	r0, r8
 800c7d6:	47d0      	blx	sl
 800c7d8:	3001      	adds	r0, #1
 800c7da:	d09d      	beq.n	800c718 <_printf_i+0x15c>
 800c7dc:	3501      	adds	r5, #1
 800c7de:	68e3      	ldr	r3, [r4, #12]
 800c7e0:	9903      	ldr	r1, [sp, #12]
 800c7e2:	1a5b      	subs	r3, r3, r1
 800c7e4:	42ab      	cmp	r3, r5
 800c7e6:	dcf2      	bgt.n	800c7ce <_printf_i+0x212>
 800c7e8:	e7eb      	b.n	800c7c2 <_printf_i+0x206>
 800c7ea:	2500      	movs	r5, #0
 800c7ec:	f104 0619 	add.w	r6, r4, #25
 800c7f0:	e7f5      	b.n	800c7de <_printf_i+0x222>
 800c7f2:	bf00      	nop
 800c7f4:	0800fa16 	.word	0x0800fa16
 800c7f8:	0800fa27 	.word	0x0800fa27

0800c7fc <std>:
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	b510      	push	{r4, lr}
 800c800:	4604      	mov	r4, r0
 800c802:	e9c0 3300 	strd	r3, r3, [r0]
 800c806:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c80a:	6083      	str	r3, [r0, #8]
 800c80c:	8181      	strh	r1, [r0, #12]
 800c80e:	6643      	str	r3, [r0, #100]	@ 0x64
 800c810:	81c2      	strh	r2, [r0, #14]
 800c812:	6183      	str	r3, [r0, #24]
 800c814:	4619      	mov	r1, r3
 800c816:	2208      	movs	r2, #8
 800c818:	305c      	adds	r0, #92	@ 0x5c
 800c81a:	f000 f9f9 	bl	800cc10 <memset>
 800c81e:	4b0d      	ldr	r3, [pc, #52]	@ (800c854 <std+0x58>)
 800c820:	6263      	str	r3, [r4, #36]	@ 0x24
 800c822:	4b0d      	ldr	r3, [pc, #52]	@ (800c858 <std+0x5c>)
 800c824:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c826:	4b0d      	ldr	r3, [pc, #52]	@ (800c85c <std+0x60>)
 800c828:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c82a:	4b0d      	ldr	r3, [pc, #52]	@ (800c860 <std+0x64>)
 800c82c:	6323      	str	r3, [r4, #48]	@ 0x30
 800c82e:	4b0d      	ldr	r3, [pc, #52]	@ (800c864 <std+0x68>)
 800c830:	6224      	str	r4, [r4, #32]
 800c832:	429c      	cmp	r4, r3
 800c834:	d006      	beq.n	800c844 <std+0x48>
 800c836:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c83a:	4294      	cmp	r4, r2
 800c83c:	d002      	beq.n	800c844 <std+0x48>
 800c83e:	33d0      	adds	r3, #208	@ 0xd0
 800c840:	429c      	cmp	r4, r3
 800c842:	d105      	bne.n	800c850 <std+0x54>
 800c844:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c84c:	f000 ba5c 	b.w	800cd08 <__retarget_lock_init_recursive>
 800c850:	bd10      	pop	{r4, pc}
 800c852:	bf00      	nop
 800c854:	0800ca61 	.word	0x0800ca61
 800c858:	0800ca83 	.word	0x0800ca83
 800c85c:	0800cabb 	.word	0x0800cabb
 800c860:	0800cadf 	.word	0x0800cadf
 800c864:	20000584 	.word	0x20000584

0800c868 <stdio_exit_handler>:
 800c868:	4a02      	ldr	r2, [pc, #8]	@ (800c874 <stdio_exit_handler+0xc>)
 800c86a:	4903      	ldr	r1, [pc, #12]	@ (800c878 <stdio_exit_handler+0x10>)
 800c86c:	4803      	ldr	r0, [pc, #12]	@ (800c87c <stdio_exit_handler+0x14>)
 800c86e:	f000 b869 	b.w	800c944 <_fwalk_sglue>
 800c872:	bf00      	nop
 800c874:	20000010 	.word	0x20000010
 800c878:	0800e639 	.word	0x0800e639
 800c87c:	20000020 	.word	0x20000020

0800c880 <cleanup_stdio>:
 800c880:	6841      	ldr	r1, [r0, #4]
 800c882:	4b0c      	ldr	r3, [pc, #48]	@ (800c8b4 <cleanup_stdio+0x34>)
 800c884:	4299      	cmp	r1, r3
 800c886:	b510      	push	{r4, lr}
 800c888:	4604      	mov	r4, r0
 800c88a:	d001      	beq.n	800c890 <cleanup_stdio+0x10>
 800c88c:	f001 fed4 	bl	800e638 <_fflush_r>
 800c890:	68a1      	ldr	r1, [r4, #8]
 800c892:	4b09      	ldr	r3, [pc, #36]	@ (800c8b8 <cleanup_stdio+0x38>)
 800c894:	4299      	cmp	r1, r3
 800c896:	d002      	beq.n	800c89e <cleanup_stdio+0x1e>
 800c898:	4620      	mov	r0, r4
 800c89a:	f001 fecd 	bl	800e638 <_fflush_r>
 800c89e:	68e1      	ldr	r1, [r4, #12]
 800c8a0:	4b06      	ldr	r3, [pc, #24]	@ (800c8bc <cleanup_stdio+0x3c>)
 800c8a2:	4299      	cmp	r1, r3
 800c8a4:	d004      	beq.n	800c8b0 <cleanup_stdio+0x30>
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8ac:	f001 bec4 	b.w	800e638 <_fflush_r>
 800c8b0:	bd10      	pop	{r4, pc}
 800c8b2:	bf00      	nop
 800c8b4:	20000584 	.word	0x20000584
 800c8b8:	200005ec 	.word	0x200005ec
 800c8bc:	20000654 	.word	0x20000654

0800c8c0 <global_stdio_init.part.0>:
 800c8c0:	b510      	push	{r4, lr}
 800c8c2:	4b0b      	ldr	r3, [pc, #44]	@ (800c8f0 <global_stdio_init.part.0+0x30>)
 800c8c4:	4c0b      	ldr	r4, [pc, #44]	@ (800c8f4 <global_stdio_init.part.0+0x34>)
 800c8c6:	4a0c      	ldr	r2, [pc, #48]	@ (800c8f8 <global_stdio_init.part.0+0x38>)
 800c8c8:	601a      	str	r2, [r3, #0]
 800c8ca:	4620      	mov	r0, r4
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	2104      	movs	r1, #4
 800c8d0:	f7ff ff94 	bl	800c7fc <std>
 800c8d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c8d8:	2201      	movs	r2, #1
 800c8da:	2109      	movs	r1, #9
 800c8dc:	f7ff ff8e 	bl	800c7fc <std>
 800c8e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c8e4:	2202      	movs	r2, #2
 800c8e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8ea:	2112      	movs	r1, #18
 800c8ec:	f7ff bf86 	b.w	800c7fc <std>
 800c8f0:	200006bc 	.word	0x200006bc
 800c8f4:	20000584 	.word	0x20000584
 800c8f8:	0800c869 	.word	0x0800c869

0800c8fc <__sfp_lock_acquire>:
 800c8fc:	4801      	ldr	r0, [pc, #4]	@ (800c904 <__sfp_lock_acquire+0x8>)
 800c8fe:	f000 ba04 	b.w	800cd0a <__retarget_lock_acquire_recursive>
 800c902:	bf00      	nop
 800c904:	200006c5 	.word	0x200006c5

0800c908 <__sfp_lock_release>:
 800c908:	4801      	ldr	r0, [pc, #4]	@ (800c910 <__sfp_lock_release+0x8>)
 800c90a:	f000 b9ff 	b.w	800cd0c <__retarget_lock_release_recursive>
 800c90e:	bf00      	nop
 800c910:	200006c5 	.word	0x200006c5

0800c914 <__sinit>:
 800c914:	b510      	push	{r4, lr}
 800c916:	4604      	mov	r4, r0
 800c918:	f7ff fff0 	bl	800c8fc <__sfp_lock_acquire>
 800c91c:	6a23      	ldr	r3, [r4, #32]
 800c91e:	b11b      	cbz	r3, 800c928 <__sinit+0x14>
 800c920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c924:	f7ff bff0 	b.w	800c908 <__sfp_lock_release>
 800c928:	4b04      	ldr	r3, [pc, #16]	@ (800c93c <__sinit+0x28>)
 800c92a:	6223      	str	r3, [r4, #32]
 800c92c:	4b04      	ldr	r3, [pc, #16]	@ (800c940 <__sinit+0x2c>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d1f5      	bne.n	800c920 <__sinit+0xc>
 800c934:	f7ff ffc4 	bl	800c8c0 <global_stdio_init.part.0>
 800c938:	e7f2      	b.n	800c920 <__sinit+0xc>
 800c93a:	bf00      	nop
 800c93c:	0800c881 	.word	0x0800c881
 800c940:	200006bc 	.word	0x200006bc

0800c944 <_fwalk_sglue>:
 800c944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c948:	4607      	mov	r7, r0
 800c94a:	4688      	mov	r8, r1
 800c94c:	4614      	mov	r4, r2
 800c94e:	2600      	movs	r6, #0
 800c950:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c954:	f1b9 0901 	subs.w	r9, r9, #1
 800c958:	d505      	bpl.n	800c966 <_fwalk_sglue+0x22>
 800c95a:	6824      	ldr	r4, [r4, #0]
 800c95c:	2c00      	cmp	r4, #0
 800c95e:	d1f7      	bne.n	800c950 <_fwalk_sglue+0xc>
 800c960:	4630      	mov	r0, r6
 800c962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c966:	89ab      	ldrh	r3, [r5, #12]
 800c968:	2b01      	cmp	r3, #1
 800c96a:	d907      	bls.n	800c97c <_fwalk_sglue+0x38>
 800c96c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c970:	3301      	adds	r3, #1
 800c972:	d003      	beq.n	800c97c <_fwalk_sglue+0x38>
 800c974:	4629      	mov	r1, r5
 800c976:	4638      	mov	r0, r7
 800c978:	47c0      	blx	r8
 800c97a:	4306      	orrs	r6, r0
 800c97c:	3568      	adds	r5, #104	@ 0x68
 800c97e:	e7e9      	b.n	800c954 <_fwalk_sglue+0x10>

0800c980 <iprintf>:
 800c980:	b40f      	push	{r0, r1, r2, r3}
 800c982:	b507      	push	{r0, r1, r2, lr}
 800c984:	4906      	ldr	r1, [pc, #24]	@ (800c9a0 <iprintf+0x20>)
 800c986:	ab04      	add	r3, sp, #16
 800c988:	6808      	ldr	r0, [r1, #0]
 800c98a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c98e:	6881      	ldr	r1, [r0, #8]
 800c990:	9301      	str	r3, [sp, #4]
 800c992:	f001 fcb5 	bl	800e300 <_vfiprintf_r>
 800c996:	b003      	add	sp, #12
 800c998:	f85d eb04 	ldr.w	lr, [sp], #4
 800c99c:	b004      	add	sp, #16
 800c99e:	4770      	bx	lr
 800c9a0:	2000001c 	.word	0x2000001c

0800c9a4 <_puts_r>:
 800c9a4:	6a03      	ldr	r3, [r0, #32]
 800c9a6:	b570      	push	{r4, r5, r6, lr}
 800c9a8:	6884      	ldr	r4, [r0, #8]
 800c9aa:	4605      	mov	r5, r0
 800c9ac:	460e      	mov	r6, r1
 800c9ae:	b90b      	cbnz	r3, 800c9b4 <_puts_r+0x10>
 800c9b0:	f7ff ffb0 	bl	800c914 <__sinit>
 800c9b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c9b6:	07db      	lsls	r3, r3, #31
 800c9b8:	d405      	bmi.n	800c9c6 <_puts_r+0x22>
 800c9ba:	89a3      	ldrh	r3, [r4, #12]
 800c9bc:	0598      	lsls	r0, r3, #22
 800c9be:	d402      	bmi.n	800c9c6 <_puts_r+0x22>
 800c9c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c9c2:	f000 f9a2 	bl	800cd0a <__retarget_lock_acquire_recursive>
 800c9c6:	89a3      	ldrh	r3, [r4, #12]
 800c9c8:	0719      	lsls	r1, r3, #28
 800c9ca:	d502      	bpl.n	800c9d2 <_puts_r+0x2e>
 800c9cc:	6923      	ldr	r3, [r4, #16]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d135      	bne.n	800ca3e <_puts_r+0x9a>
 800c9d2:	4621      	mov	r1, r4
 800c9d4:	4628      	mov	r0, r5
 800c9d6:	f000 f8c5 	bl	800cb64 <__swsetup_r>
 800c9da:	b380      	cbz	r0, 800ca3e <_puts_r+0x9a>
 800c9dc:	f04f 35ff 	mov.w	r5, #4294967295
 800c9e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c9e2:	07da      	lsls	r2, r3, #31
 800c9e4:	d405      	bmi.n	800c9f2 <_puts_r+0x4e>
 800c9e6:	89a3      	ldrh	r3, [r4, #12]
 800c9e8:	059b      	lsls	r3, r3, #22
 800c9ea:	d402      	bmi.n	800c9f2 <_puts_r+0x4e>
 800c9ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c9ee:	f000 f98d 	bl	800cd0c <__retarget_lock_release_recursive>
 800c9f2:	4628      	mov	r0, r5
 800c9f4:	bd70      	pop	{r4, r5, r6, pc}
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	da04      	bge.n	800ca04 <_puts_r+0x60>
 800c9fa:	69a2      	ldr	r2, [r4, #24]
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	dc17      	bgt.n	800ca30 <_puts_r+0x8c>
 800ca00:	290a      	cmp	r1, #10
 800ca02:	d015      	beq.n	800ca30 <_puts_r+0x8c>
 800ca04:	6823      	ldr	r3, [r4, #0]
 800ca06:	1c5a      	adds	r2, r3, #1
 800ca08:	6022      	str	r2, [r4, #0]
 800ca0a:	7019      	strb	r1, [r3, #0]
 800ca0c:	68a3      	ldr	r3, [r4, #8]
 800ca0e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ca12:	3b01      	subs	r3, #1
 800ca14:	60a3      	str	r3, [r4, #8]
 800ca16:	2900      	cmp	r1, #0
 800ca18:	d1ed      	bne.n	800c9f6 <_puts_r+0x52>
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	da11      	bge.n	800ca42 <_puts_r+0x9e>
 800ca1e:	4622      	mov	r2, r4
 800ca20:	210a      	movs	r1, #10
 800ca22:	4628      	mov	r0, r5
 800ca24:	f000 f85f 	bl	800cae6 <__swbuf_r>
 800ca28:	3001      	adds	r0, #1
 800ca2a:	d0d7      	beq.n	800c9dc <_puts_r+0x38>
 800ca2c:	250a      	movs	r5, #10
 800ca2e:	e7d7      	b.n	800c9e0 <_puts_r+0x3c>
 800ca30:	4622      	mov	r2, r4
 800ca32:	4628      	mov	r0, r5
 800ca34:	f000 f857 	bl	800cae6 <__swbuf_r>
 800ca38:	3001      	adds	r0, #1
 800ca3a:	d1e7      	bne.n	800ca0c <_puts_r+0x68>
 800ca3c:	e7ce      	b.n	800c9dc <_puts_r+0x38>
 800ca3e:	3e01      	subs	r6, #1
 800ca40:	e7e4      	b.n	800ca0c <_puts_r+0x68>
 800ca42:	6823      	ldr	r3, [r4, #0]
 800ca44:	1c5a      	adds	r2, r3, #1
 800ca46:	6022      	str	r2, [r4, #0]
 800ca48:	220a      	movs	r2, #10
 800ca4a:	701a      	strb	r2, [r3, #0]
 800ca4c:	e7ee      	b.n	800ca2c <_puts_r+0x88>
	...

0800ca50 <puts>:
 800ca50:	4b02      	ldr	r3, [pc, #8]	@ (800ca5c <puts+0xc>)
 800ca52:	4601      	mov	r1, r0
 800ca54:	6818      	ldr	r0, [r3, #0]
 800ca56:	f7ff bfa5 	b.w	800c9a4 <_puts_r>
 800ca5a:	bf00      	nop
 800ca5c:	2000001c 	.word	0x2000001c

0800ca60 <__sread>:
 800ca60:	b510      	push	{r4, lr}
 800ca62:	460c      	mov	r4, r1
 800ca64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca68:	f000 f900 	bl	800cc6c <_read_r>
 800ca6c:	2800      	cmp	r0, #0
 800ca6e:	bfab      	itete	ge
 800ca70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ca72:	89a3      	ldrhlt	r3, [r4, #12]
 800ca74:	181b      	addge	r3, r3, r0
 800ca76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ca7a:	bfac      	ite	ge
 800ca7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ca7e:	81a3      	strhlt	r3, [r4, #12]
 800ca80:	bd10      	pop	{r4, pc}

0800ca82 <__swrite>:
 800ca82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca86:	461f      	mov	r7, r3
 800ca88:	898b      	ldrh	r3, [r1, #12]
 800ca8a:	05db      	lsls	r3, r3, #23
 800ca8c:	4605      	mov	r5, r0
 800ca8e:	460c      	mov	r4, r1
 800ca90:	4616      	mov	r6, r2
 800ca92:	d505      	bpl.n	800caa0 <__swrite+0x1e>
 800ca94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca98:	2302      	movs	r3, #2
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	f000 f8d4 	bl	800cc48 <_lseek_r>
 800caa0:	89a3      	ldrh	r3, [r4, #12]
 800caa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800caa6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800caaa:	81a3      	strh	r3, [r4, #12]
 800caac:	4632      	mov	r2, r6
 800caae:	463b      	mov	r3, r7
 800cab0:	4628      	mov	r0, r5
 800cab2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cab6:	f000 b8eb 	b.w	800cc90 <_write_r>

0800caba <__sseek>:
 800caba:	b510      	push	{r4, lr}
 800cabc:	460c      	mov	r4, r1
 800cabe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cac2:	f000 f8c1 	bl	800cc48 <_lseek_r>
 800cac6:	1c43      	adds	r3, r0, #1
 800cac8:	89a3      	ldrh	r3, [r4, #12]
 800caca:	bf15      	itete	ne
 800cacc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cace:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cad2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cad6:	81a3      	strheq	r3, [r4, #12]
 800cad8:	bf18      	it	ne
 800cada:	81a3      	strhne	r3, [r4, #12]
 800cadc:	bd10      	pop	{r4, pc}

0800cade <__sclose>:
 800cade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cae2:	f000 b8a1 	b.w	800cc28 <_close_r>

0800cae6 <__swbuf_r>:
 800cae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cae8:	460e      	mov	r6, r1
 800caea:	4614      	mov	r4, r2
 800caec:	4605      	mov	r5, r0
 800caee:	b118      	cbz	r0, 800caf8 <__swbuf_r+0x12>
 800caf0:	6a03      	ldr	r3, [r0, #32]
 800caf2:	b90b      	cbnz	r3, 800caf8 <__swbuf_r+0x12>
 800caf4:	f7ff ff0e 	bl	800c914 <__sinit>
 800caf8:	69a3      	ldr	r3, [r4, #24]
 800cafa:	60a3      	str	r3, [r4, #8]
 800cafc:	89a3      	ldrh	r3, [r4, #12]
 800cafe:	071a      	lsls	r2, r3, #28
 800cb00:	d501      	bpl.n	800cb06 <__swbuf_r+0x20>
 800cb02:	6923      	ldr	r3, [r4, #16]
 800cb04:	b943      	cbnz	r3, 800cb18 <__swbuf_r+0x32>
 800cb06:	4621      	mov	r1, r4
 800cb08:	4628      	mov	r0, r5
 800cb0a:	f000 f82b 	bl	800cb64 <__swsetup_r>
 800cb0e:	b118      	cbz	r0, 800cb18 <__swbuf_r+0x32>
 800cb10:	f04f 37ff 	mov.w	r7, #4294967295
 800cb14:	4638      	mov	r0, r7
 800cb16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb18:	6823      	ldr	r3, [r4, #0]
 800cb1a:	6922      	ldr	r2, [r4, #16]
 800cb1c:	1a98      	subs	r0, r3, r2
 800cb1e:	6963      	ldr	r3, [r4, #20]
 800cb20:	b2f6      	uxtb	r6, r6
 800cb22:	4283      	cmp	r3, r0
 800cb24:	4637      	mov	r7, r6
 800cb26:	dc05      	bgt.n	800cb34 <__swbuf_r+0x4e>
 800cb28:	4621      	mov	r1, r4
 800cb2a:	4628      	mov	r0, r5
 800cb2c:	f001 fd84 	bl	800e638 <_fflush_r>
 800cb30:	2800      	cmp	r0, #0
 800cb32:	d1ed      	bne.n	800cb10 <__swbuf_r+0x2a>
 800cb34:	68a3      	ldr	r3, [r4, #8]
 800cb36:	3b01      	subs	r3, #1
 800cb38:	60a3      	str	r3, [r4, #8]
 800cb3a:	6823      	ldr	r3, [r4, #0]
 800cb3c:	1c5a      	adds	r2, r3, #1
 800cb3e:	6022      	str	r2, [r4, #0]
 800cb40:	701e      	strb	r6, [r3, #0]
 800cb42:	6962      	ldr	r2, [r4, #20]
 800cb44:	1c43      	adds	r3, r0, #1
 800cb46:	429a      	cmp	r2, r3
 800cb48:	d004      	beq.n	800cb54 <__swbuf_r+0x6e>
 800cb4a:	89a3      	ldrh	r3, [r4, #12]
 800cb4c:	07db      	lsls	r3, r3, #31
 800cb4e:	d5e1      	bpl.n	800cb14 <__swbuf_r+0x2e>
 800cb50:	2e0a      	cmp	r6, #10
 800cb52:	d1df      	bne.n	800cb14 <__swbuf_r+0x2e>
 800cb54:	4621      	mov	r1, r4
 800cb56:	4628      	mov	r0, r5
 800cb58:	f001 fd6e 	bl	800e638 <_fflush_r>
 800cb5c:	2800      	cmp	r0, #0
 800cb5e:	d0d9      	beq.n	800cb14 <__swbuf_r+0x2e>
 800cb60:	e7d6      	b.n	800cb10 <__swbuf_r+0x2a>
	...

0800cb64 <__swsetup_r>:
 800cb64:	b538      	push	{r3, r4, r5, lr}
 800cb66:	4b29      	ldr	r3, [pc, #164]	@ (800cc0c <__swsetup_r+0xa8>)
 800cb68:	4605      	mov	r5, r0
 800cb6a:	6818      	ldr	r0, [r3, #0]
 800cb6c:	460c      	mov	r4, r1
 800cb6e:	b118      	cbz	r0, 800cb78 <__swsetup_r+0x14>
 800cb70:	6a03      	ldr	r3, [r0, #32]
 800cb72:	b90b      	cbnz	r3, 800cb78 <__swsetup_r+0x14>
 800cb74:	f7ff fece 	bl	800c914 <__sinit>
 800cb78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb7c:	0719      	lsls	r1, r3, #28
 800cb7e:	d422      	bmi.n	800cbc6 <__swsetup_r+0x62>
 800cb80:	06da      	lsls	r2, r3, #27
 800cb82:	d407      	bmi.n	800cb94 <__swsetup_r+0x30>
 800cb84:	2209      	movs	r2, #9
 800cb86:	602a      	str	r2, [r5, #0]
 800cb88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb8c:	81a3      	strh	r3, [r4, #12]
 800cb8e:	f04f 30ff 	mov.w	r0, #4294967295
 800cb92:	e033      	b.n	800cbfc <__swsetup_r+0x98>
 800cb94:	0758      	lsls	r0, r3, #29
 800cb96:	d512      	bpl.n	800cbbe <__swsetup_r+0x5a>
 800cb98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cb9a:	b141      	cbz	r1, 800cbae <__swsetup_r+0x4a>
 800cb9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cba0:	4299      	cmp	r1, r3
 800cba2:	d002      	beq.n	800cbaa <__swsetup_r+0x46>
 800cba4:	4628      	mov	r0, r5
 800cba6:	f000 feff 	bl	800d9a8 <_free_r>
 800cbaa:	2300      	movs	r3, #0
 800cbac:	6363      	str	r3, [r4, #52]	@ 0x34
 800cbae:	89a3      	ldrh	r3, [r4, #12]
 800cbb0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cbb4:	81a3      	strh	r3, [r4, #12]
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	6063      	str	r3, [r4, #4]
 800cbba:	6923      	ldr	r3, [r4, #16]
 800cbbc:	6023      	str	r3, [r4, #0]
 800cbbe:	89a3      	ldrh	r3, [r4, #12]
 800cbc0:	f043 0308 	orr.w	r3, r3, #8
 800cbc4:	81a3      	strh	r3, [r4, #12]
 800cbc6:	6923      	ldr	r3, [r4, #16]
 800cbc8:	b94b      	cbnz	r3, 800cbde <__swsetup_r+0x7a>
 800cbca:	89a3      	ldrh	r3, [r4, #12]
 800cbcc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cbd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cbd4:	d003      	beq.n	800cbde <__swsetup_r+0x7a>
 800cbd6:	4621      	mov	r1, r4
 800cbd8:	4628      	mov	r0, r5
 800cbda:	f001 fd7b 	bl	800e6d4 <__smakebuf_r>
 800cbde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbe2:	f013 0201 	ands.w	r2, r3, #1
 800cbe6:	d00a      	beq.n	800cbfe <__swsetup_r+0x9a>
 800cbe8:	2200      	movs	r2, #0
 800cbea:	60a2      	str	r2, [r4, #8]
 800cbec:	6962      	ldr	r2, [r4, #20]
 800cbee:	4252      	negs	r2, r2
 800cbf0:	61a2      	str	r2, [r4, #24]
 800cbf2:	6922      	ldr	r2, [r4, #16]
 800cbf4:	b942      	cbnz	r2, 800cc08 <__swsetup_r+0xa4>
 800cbf6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cbfa:	d1c5      	bne.n	800cb88 <__swsetup_r+0x24>
 800cbfc:	bd38      	pop	{r3, r4, r5, pc}
 800cbfe:	0799      	lsls	r1, r3, #30
 800cc00:	bf58      	it	pl
 800cc02:	6962      	ldrpl	r2, [r4, #20]
 800cc04:	60a2      	str	r2, [r4, #8]
 800cc06:	e7f4      	b.n	800cbf2 <__swsetup_r+0x8e>
 800cc08:	2000      	movs	r0, #0
 800cc0a:	e7f7      	b.n	800cbfc <__swsetup_r+0x98>
 800cc0c:	2000001c 	.word	0x2000001c

0800cc10 <memset>:
 800cc10:	4402      	add	r2, r0
 800cc12:	4603      	mov	r3, r0
 800cc14:	4293      	cmp	r3, r2
 800cc16:	d100      	bne.n	800cc1a <memset+0xa>
 800cc18:	4770      	bx	lr
 800cc1a:	f803 1b01 	strb.w	r1, [r3], #1
 800cc1e:	e7f9      	b.n	800cc14 <memset+0x4>

0800cc20 <_localeconv_r>:
 800cc20:	4800      	ldr	r0, [pc, #0]	@ (800cc24 <_localeconv_r+0x4>)
 800cc22:	4770      	bx	lr
 800cc24:	2000015c 	.word	0x2000015c

0800cc28 <_close_r>:
 800cc28:	b538      	push	{r3, r4, r5, lr}
 800cc2a:	4d06      	ldr	r5, [pc, #24]	@ (800cc44 <_close_r+0x1c>)
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	4604      	mov	r4, r0
 800cc30:	4608      	mov	r0, r1
 800cc32:	602b      	str	r3, [r5, #0]
 800cc34:	f7f9 f968 	bl	8005f08 <_close>
 800cc38:	1c43      	adds	r3, r0, #1
 800cc3a:	d102      	bne.n	800cc42 <_close_r+0x1a>
 800cc3c:	682b      	ldr	r3, [r5, #0]
 800cc3e:	b103      	cbz	r3, 800cc42 <_close_r+0x1a>
 800cc40:	6023      	str	r3, [r4, #0]
 800cc42:	bd38      	pop	{r3, r4, r5, pc}
 800cc44:	200006c0 	.word	0x200006c0

0800cc48 <_lseek_r>:
 800cc48:	b538      	push	{r3, r4, r5, lr}
 800cc4a:	4d07      	ldr	r5, [pc, #28]	@ (800cc68 <_lseek_r+0x20>)
 800cc4c:	4604      	mov	r4, r0
 800cc4e:	4608      	mov	r0, r1
 800cc50:	4611      	mov	r1, r2
 800cc52:	2200      	movs	r2, #0
 800cc54:	602a      	str	r2, [r5, #0]
 800cc56:	461a      	mov	r2, r3
 800cc58:	f7f9 f97d 	bl	8005f56 <_lseek>
 800cc5c:	1c43      	adds	r3, r0, #1
 800cc5e:	d102      	bne.n	800cc66 <_lseek_r+0x1e>
 800cc60:	682b      	ldr	r3, [r5, #0]
 800cc62:	b103      	cbz	r3, 800cc66 <_lseek_r+0x1e>
 800cc64:	6023      	str	r3, [r4, #0]
 800cc66:	bd38      	pop	{r3, r4, r5, pc}
 800cc68:	200006c0 	.word	0x200006c0

0800cc6c <_read_r>:
 800cc6c:	b538      	push	{r3, r4, r5, lr}
 800cc6e:	4d07      	ldr	r5, [pc, #28]	@ (800cc8c <_read_r+0x20>)
 800cc70:	4604      	mov	r4, r0
 800cc72:	4608      	mov	r0, r1
 800cc74:	4611      	mov	r1, r2
 800cc76:	2200      	movs	r2, #0
 800cc78:	602a      	str	r2, [r5, #0]
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	f7f9 f927 	bl	8005ece <_read>
 800cc80:	1c43      	adds	r3, r0, #1
 800cc82:	d102      	bne.n	800cc8a <_read_r+0x1e>
 800cc84:	682b      	ldr	r3, [r5, #0]
 800cc86:	b103      	cbz	r3, 800cc8a <_read_r+0x1e>
 800cc88:	6023      	str	r3, [r4, #0]
 800cc8a:	bd38      	pop	{r3, r4, r5, pc}
 800cc8c:	200006c0 	.word	0x200006c0

0800cc90 <_write_r>:
 800cc90:	b538      	push	{r3, r4, r5, lr}
 800cc92:	4d07      	ldr	r5, [pc, #28]	@ (800ccb0 <_write_r+0x20>)
 800cc94:	4604      	mov	r4, r0
 800cc96:	4608      	mov	r0, r1
 800cc98:	4611      	mov	r1, r2
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	602a      	str	r2, [r5, #0]
 800cc9e:	461a      	mov	r2, r3
 800cca0:	f7f6 fe8a 	bl	80039b8 <_write>
 800cca4:	1c43      	adds	r3, r0, #1
 800cca6:	d102      	bne.n	800ccae <_write_r+0x1e>
 800cca8:	682b      	ldr	r3, [r5, #0]
 800ccaa:	b103      	cbz	r3, 800ccae <_write_r+0x1e>
 800ccac:	6023      	str	r3, [r4, #0]
 800ccae:	bd38      	pop	{r3, r4, r5, pc}
 800ccb0:	200006c0 	.word	0x200006c0

0800ccb4 <__errno>:
 800ccb4:	4b01      	ldr	r3, [pc, #4]	@ (800ccbc <__errno+0x8>)
 800ccb6:	6818      	ldr	r0, [r3, #0]
 800ccb8:	4770      	bx	lr
 800ccba:	bf00      	nop
 800ccbc:	2000001c 	.word	0x2000001c

0800ccc0 <__libc_init_array>:
 800ccc0:	b570      	push	{r4, r5, r6, lr}
 800ccc2:	4d0d      	ldr	r5, [pc, #52]	@ (800ccf8 <__libc_init_array+0x38>)
 800ccc4:	4c0d      	ldr	r4, [pc, #52]	@ (800ccfc <__libc_init_array+0x3c>)
 800ccc6:	1b64      	subs	r4, r4, r5
 800ccc8:	10a4      	asrs	r4, r4, #2
 800ccca:	2600      	movs	r6, #0
 800cccc:	42a6      	cmp	r6, r4
 800ccce:	d109      	bne.n	800cce4 <__libc_init_array+0x24>
 800ccd0:	4d0b      	ldr	r5, [pc, #44]	@ (800cd00 <__libc_init_array+0x40>)
 800ccd2:	4c0c      	ldr	r4, [pc, #48]	@ (800cd04 <__libc_init_array+0x44>)
 800ccd4:	f002 fc80 	bl	800f5d8 <_init>
 800ccd8:	1b64      	subs	r4, r4, r5
 800ccda:	10a4      	asrs	r4, r4, #2
 800ccdc:	2600      	movs	r6, #0
 800ccde:	42a6      	cmp	r6, r4
 800cce0:	d105      	bne.n	800ccee <__libc_init_array+0x2e>
 800cce2:	bd70      	pop	{r4, r5, r6, pc}
 800cce4:	f855 3b04 	ldr.w	r3, [r5], #4
 800cce8:	4798      	blx	r3
 800ccea:	3601      	adds	r6, #1
 800ccec:	e7ee      	b.n	800cccc <__libc_init_array+0xc>
 800ccee:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccf2:	4798      	blx	r3
 800ccf4:	3601      	adds	r6, #1
 800ccf6:	e7f2      	b.n	800ccde <__libc_init_array+0x1e>
 800ccf8:	0800fdd0 	.word	0x0800fdd0
 800ccfc:	0800fdd0 	.word	0x0800fdd0
 800cd00:	0800fdd0 	.word	0x0800fdd0
 800cd04:	0800fdd4 	.word	0x0800fdd4

0800cd08 <__retarget_lock_init_recursive>:
 800cd08:	4770      	bx	lr

0800cd0a <__retarget_lock_acquire_recursive>:
 800cd0a:	4770      	bx	lr

0800cd0c <__retarget_lock_release_recursive>:
 800cd0c:	4770      	bx	lr

0800cd0e <quorem>:
 800cd0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd12:	6903      	ldr	r3, [r0, #16]
 800cd14:	690c      	ldr	r4, [r1, #16]
 800cd16:	42a3      	cmp	r3, r4
 800cd18:	4607      	mov	r7, r0
 800cd1a:	db7e      	blt.n	800ce1a <quorem+0x10c>
 800cd1c:	3c01      	subs	r4, #1
 800cd1e:	f101 0814 	add.w	r8, r1, #20
 800cd22:	00a3      	lsls	r3, r4, #2
 800cd24:	f100 0514 	add.w	r5, r0, #20
 800cd28:	9300      	str	r3, [sp, #0]
 800cd2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cd2e:	9301      	str	r3, [sp, #4]
 800cd30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cd34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cd38:	3301      	adds	r3, #1
 800cd3a:	429a      	cmp	r2, r3
 800cd3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cd40:	fbb2 f6f3 	udiv	r6, r2, r3
 800cd44:	d32e      	bcc.n	800cda4 <quorem+0x96>
 800cd46:	f04f 0a00 	mov.w	sl, #0
 800cd4a:	46c4      	mov	ip, r8
 800cd4c:	46ae      	mov	lr, r5
 800cd4e:	46d3      	mov	fp, sl
 800cd50:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cd54:	b298      	uxth	r0, r3
 800cd56:	fb06 a000 	mla	r0, r6, r0, sl
 800cd5a:	0c02      	lsrs	r2, r0, #16
 800cd5c:	0c1b      	lsrs	r3, r3, #16
 800cd5e:	fb06 2303 	mla	r3, r6, r3, r2
 800cd62:	f8de 2000 	ldr.w	r2, [lr]
 800cd66:	b280      	uxth	r0, r0
 800cd68:	b292      	uxth	r2, r2
 800cd6a:	1a12      	subs	r2, r2, r0
 800cd6c:	445a      	add	r2, fp
 800cd6e:	f8de 0000 	ldr.w	r0, [lr]
 800cd72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cd76:	b29b      	uxth	r3, r3
 800cd78:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cd7c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cd80:	b292      	uxth	r2, r2
 800cd82:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cd86:	45e1      	cmp	r9, ip
 800cd88:	f84e 2b04 	str.w	r2, [lr], #4
 800cd8c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cd90:	d2de      	bcs.n	800cd50 <quorem+0x42>
 800cd92:	9b00      	ldr	r3, [sp, #0]
 800cd94:	58eb      	ldr	r3, [r5, r3]
 800cd96:	b92b      	cbnz	r3, 800cda4 <quorem+0x96>
 800cd98:	9b01      	ldr	r3, [sp, #4]
 800cd9a:	3b04      	subs	r3, #4
 800cd9c:	429d      	cmp	r5, r3
 800cd9e:	461a      	mov	r2, r3
 800cda0:	d32f      	bcc.n	800ce02 <quorem+0xf4>
 800cda2:	613c      	str	r4, [r7, #16]
 800cda4:	4638      	mov	r0, r7
 800cda6:	f001 f979 	bl	800e09c <__mcmp>
 800cdaa:	2800      	cmp	r0, #0
 800cdac:	db25      	blt.n	800cdfa <quorem+0xec>
 800cdae:	4629      	mov	r1, r5
 800cdb0:	2000      	movs	r0, #0
 800cdb2:	f858 2b04 	ldr.w	r2, [r8], #4
 800cdb6:	f8d1 c000 	ldr.w	ip, [r1]
 800cdba:	fa1f fe82 	uxth.w	lr, r2
 800cdbe:	fa1f f38c 	uxth.w	r3, ip
 800cdc2:	eba3 030e 	sub.w	r3, r3, lr
 800cdc6:	4403      	add	r3, r0
 800cdc8:	0c12      	lsrs	r2, r2, #16
 800cdca:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cdce:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cdd2:	b29b      	uxth	r3, r3
 800cdd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cdd8:	45c1      	cmp	r9, r8
 800cdda:	f841 3b04 	str.w	r3, [r1], #4
 800cdde:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cde2:	d2e6      	bcs.n	800cdb2 <quorem+0xa4>
 800cde4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cde8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cdec:	b922      	cbnz	r2, 800cdf8 <quorem+0xea>
 800cdee:	3b04      	subs	r3, #4
 800cdf0:	429d      	cmp	r5, r3
 800cdf2:	461a      	mov	r2, r3
 800cdf4:	d30b      	bcc.n	800ce0e <quorem+0x100>
 800cdf6:	613c      	str	r4, [r7, #16]
 800cdf8:	3601      	adds	r6, #1
 800cdfa:	4630      	mov	r0, r6
 800cdfc:	b003      	add	sp, #12
 800cdfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce02:	6812      	ldr	r2, [r2, #0]
 800ce04:	3b04      	subs	r3, #4
 800ce06:	2a00      	cmp	r2, #0
 800ce08:	d1cb      	bne.n	800cda2 <quorem+0x94>
 800ce0a:	3c01      	subs	r4, #1
 800ce0c:	e7c6      	b.n	800cd9c <quorem+0x8e>
 800ce0e:	6812      	ldr	r2, [r2, #0]
 800ce10:	3b04      	subs	r3, #4
 800ce12:	2a00      	cmp	r2, #0
 800ce14:	d1ef      	bne.n	800cdf6 <quorem+0xe8>
 800ce16:	3c01      	subs	r4, #1
 800ce18:	e7ea      	b.n	800cdf0 <quorem+0xe2>
 800ce1a:	2000      	movs	r0, #0
 800ce1c:	e7ee      	b.n	800cdfc <quorem+0xee>
	...

0800ce20 <_dtoa_r>:
 800ce20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce24:	69c7      	ldr	r7, [r0, #28]
 800ce26:	b099      	sub	sp, #100	@ 0x64
 800ce28:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ce2c:	ec55 4b10 	vmov	r4, r5, d0
 800ce30:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ce32:	9109      	str	r1, [sp, #36]	@ 0x24
 800ce34:	4683      	mov	fp, r0
 800ce36:	920e      	str	r2, [sp, #56]	@ 0x38
 800ce38:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ce3a:	b97f      	cbnz	r7, 800ce5c <_dtoa_r+0x3c>
 800ce3c:	2010      	movs	r0, #16
 800ce3e:	f000 fdfd 	bl	800da3c <malloc>
 800ce42:	4602      	mov	r2, r0
 800ce44:	f8cb 001c 	str.w	r0, [fp, #28]
 800ce48:	b920      	cbnz	r0, 800ce54 <_dtoa_r+0x34>
 800ce4a:	4ba7      	ldr	r3, [pc, #668]	@ (800d0e8 <_dtoa_r+0x2c8>)
 800ce4c:	21ef      	movs	r1, #239	@ 0xef
 800ce4e:	48a7      	ldr	r0, [pc, #668]	@ (800d0ec <_dtoa_r+0x2cc>)
 800ce50:	f001 fcbc 	bl	800e7cc <__assert_func>
 800ce54:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ce58:	6007      	str	r7, [r0, #0]
 800ce5a:	60c7      	str	r7, [r0, #12]
 800ce5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ce60:	6819      	ldr	r1, [r3, #0]
 800ce62:	b159      	cbz	r1, 800ce7c <_dtoa_r+0x5c>
 800ce64:	685a      	ldr	r2, [r3, #4]
 800ce66:	604a      	str	r2, [r1, #4]
 800ce68:	2301      	movs	r3, #1
 800ce6a:	4093      	lsls	r3, r2
 800ce6c:	608b      	str	r3, [r1, #8]
 800ce6e:	4658      	mov	r0, fp
 800ce70:	f000 feda 	bl	800dc28 <_Bfree>
 800ce74:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	601a      	str	r2, [r3, #0]
 800ce7c:	1e2b      	subs	r3, r5, #0
 800ce7e:	bfb9      	ittee	lt
 800ce80:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ce84:	9303      	strlt	r3, [sp, #12]
 800ce86:	2300      	movge	r3, #0
 800ce88:	6033      	strge	r3, [r6, #0]
 800ce8a:	9f03      	ldr	r7, [sp, #12]
 800ce8c:	4b98      	ldr	r3, [pc, #608]	@ (800d0f0 <_dtoa_r+0x2d0>)
 800ce8e:	bfbc      	itt	lt
 800ce90:	2201      	movlt	r2, #1
 800ce92:	6032      	strlt	r2, [r6, #0]
 800ce94:	43bb      	bics	r3, r7
 800ce96:	d112      	bne.n	800cebe <_dtoa_r+0x9e>
 800ce98:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ce9a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ce9e:	6013      	str	r3, [r2, #0]
 800cea0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cea4:	4323      	orrs	r3, r4
 800cea6:	f000 854d 	beq.w	800d944 <_dtoa_r+0xb24>
 800ceaa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ceac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d104 <_dtoa_r+0x2e4>
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	f000 854f 	beq.w	800d954 <_dtoa_r+0xb34>
 800ceb6:	f10a 0303 	add.w	r3, sl, #3
 800ceba:	f000 bd49 	b.w	800d950 <_dtoa_r+0xb30>
 800cebe:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cec2:	2200      	movs	r2, #0
 800cec4:	ec51 0b17 	vmov	r0, r1, d7
 800cec8:	2300      	movs	r3, #0
 800ceca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800cece:	f7f3 fdfb 	bl	8000ac8 <__aeabi_dcmpeq>
 800ced2:	4680      	mov	r8, r0
 800ced4:	b158      	cbz	r0, 800ceee <_dtoa_r+0xce>
 800ced6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ced8:	2301      	movs	r3, #1
 800ceda:	6013      	str	r3, [r2, #0]
 800cedc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cede:	b113      	cbz	r3, 800cee6 <_dtoa_r+0xc6>
 800cee0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cee2:	4b84      	ldr	r3, [pc, #528]	@ (800d0f4 <_dtoa_r+0x2d4>)
 800cee4:	6013      	str	r3, [r2, #0]
 800cee6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d108 <_dtoa_r+0x2e8>
 800ceea:	f000 bd33 	b.w	800d954 <_dtoa_r+0xb34>
 800ceee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cef2:	aa16      	add	r2, sp, #88	@ 0x58
 800cef4:	a917      	add	r1, sp, #92	@ 0x5c
 800cef6:	4658      	mov	r0, fp
 800cef8:	f001 f980 	bl	800e1fc <__d2b>
 800cefc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cf00:	4681      	mov	r9, r0
 800cf02:	2e00      	cmp	r6, #0
 800cf04:	d077      	beq.n	800cff6 <_dtoa_r+0x1d6>
 800cf06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cf08:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800cf0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cf14:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cf18:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cf1c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cf20:	4619      	mov	r1, r3
 800cf22:	2200      	movs	r2, #0
 800cf24:	4b74      	ldr	r3, [pc, #464]	@ (800d0f8 <_dtoa_r+0x2d8>)
 800cf26:	f7f3 f9af 	bl	8000288 <__aeabi_dsub>
 800cf2a:	a369      	add	r3, pc, #420	@ (adr r3, 800d0d0 <_dtoa_r+0x2b0>)
 800cf2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf30:	f7f3 fb62 	bl	80005f8 <__aeabi_dmul>
 800cf34:	a368      	add	r3, pc, #416	@ (adr r3, 800d0d8 <_dtoa_r+0x2b8>)
 800cf36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf3a:	f7f3 f9a7 	bl	800028c <__adddf3>
 800cf3e:	4604      	mov	r4, r0
 800cf40:	4630      	mov	r0, r6
 800cf42:	460d      	mov	r5, r1
 800cf44:	f7f3 faee 	bl	8000524 <__aeabi_i2d>
 800cf48:	a365      	add	r3, pc, #404	@ (adr r3, 800d0e0 <_dtoa_r+0x2c0>)
 800cf4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf4e:	f7f3 fb53 	bl	80005f8 <__aeabi_dmul>
 800cf52:	4602      	mov	r2, r0
 800cf54:	460b      	mov	r3, r1
 800cf56:	4620      	mov	r0, r4
 800cf58:	4629      	mov	r1, r5
 800cf5a:	f7f3 f997 	bl	800028c <__adddf3>
 800cf5e:	4604      	mov	r4, r0
 800cf60:	460d      	mov	r5, r1
 800cf62:	f7f3 fdf9 	bl	8000b58 <__aeabi_d2iz>
 800cf66:	2200      	movs	r2, #0
 800cf68:	4607      	mov	r7, r0
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	4620      	mov	r0, r4
 800cf6e:	4629      	mov	r1, r5
 800cf70:	f7f3 fdb4 	bl	8000adc <__aeabi_dcmplt>
 800cf74:	b140      	cbz	r0, 800cf88 <_dtoa_r+0x168>
 800cf76:	4638      	mov	r0, r7
 800cf78:	f7f3 fad4 	bl	8000524 <__aeabi_i2d>
 800cf7c:	4622      	mov	r2, r4
 800cf7e:	462b      	mov	r3, r5
 800cf80:	f7f3 fda2 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf84:	b900      	cbnz	r0, 800cf88 <_dtoa_r+0x168>
 800cf86:	3f01      	subs	r7, #1
 800cf88:	2f16      	cmp	r7, #22
 800cf8a:	d851      	bhi.n	800d030 <_dtoa_r+0x210>
 800cf8c:	4b5b      	ldr	r3, [pc, #364]	@ (800d0fc <_dtoa_r+0x2dc>)
 800cf8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cf92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cf9a:	f7f3 fd9f 	bl	8000adc <__aeabi_dcmplt>
 800cf9e:	2800      	cmp	r0, #0
 800cfa0:	d048      	beq.n	800d034 <_dtoa_r+0x214>
 800cfa2:	3f01      	subs	r7, #1
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	9312      	str	r3, [sp, #72]	@ 0x48
 800cfa8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cfaa:	1b9b      	subs	r3, r3, r6
 800cfac:	1e5a      	subs	r2, r3, #1
 800cfae:	bf44      	itt	mi
 800cfb0:	f1c3 0801 	rsbmi	r8, r3, #1
 800cfb4:	2300      	movmi	r3, #0
 800cfb6:	9208      	str	r2, [sp, #32]
 800cfb8:	bf54      	ite	pl
 800cfba:	f04f 0800 	movpl.w	r8, #0
 800cfbe:	9308      	strmi	r3, [sp, #32]
 800cfc0:	2f00      	cmp	r7, #0
 800cfc2:	db39      	blt.n	800d038 <_dtoa_r+0x218>
 800cfc4:	9b08      	ldr	r3, [sp, #32]
 800cfc6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800cfc8:	443b      	add	r3, r7
 800cfca:	9308      	str	r3, [sp, #32]
 800cfcc:	2300      	movs	r3, #0
 800cfce:	930a      	str	r3, [sp, #40]	@ 0x28
 800cfd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfd2:	2b09      	cmp	r3, #9
 800cfd4:	d864      	bhi.n	800d0a0 <_dtoa_r+0x280>
 800cfd6:	2b05      	cmp	r3, #5
 800cfd8:	bfc4      	itt	gt
 800cfda:	3b04      	subgt	r3, #4
 800cfdc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800cfde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfe0:	f1a3 0302 	sub.w	r3, r3, #2
 800cfe4:	bfcc      	ite	gt
 800cfe6:	2400      	movgt	r4, #0
 800cfe8:	2401      	movle	r4, #1
 800cfea:	2b03      	cmp	r3, #3
 800cfec:	d863      	bhi.n	800d0b6 <_dtoa_r+0x296>
 800cfee:	e8df f003 	tbb	[pc, r3]
 800cff2:	372a      	.short	0x372a
 800cff4:	5535      	.short	0x5535
 800cff6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800cffa:	441e      	add	r6, r3
 800cffc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d000:	2b20      	cmp	r3, #32
 800d002:	bfc1      	itttt	gt
 800d004:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d008:	409f      	lslgt	r7, r3
 800d00a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d00e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d012:	bfd6      	itet	le
 800d014:	f1c3 0320 	rsble	r3, r3, #32
 800d018:	ea47 0003 	orrgt.w	r0, r7, r3
 800d01c:	fa04 f003 	lslle.w	r0, r4, r3
 800d020:	f7f3 fa70 	bl	8000504 <__aeabi_ui2d>
 800d024:	2201      	movs	r2, #1
 800d026:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d02a:	3e01      	subs	r6, #1
 800d02c:	9214      	str	r2, [sp, #80]	@ 0x50
 800d02e:	e777      	b.n	800cf20 <_dtoa_r+0x100>
 800d030:	2301      	movs	r3, #1
 800d032:	e7b8      	b.n	800cfa6 <_dtoa_r+0x186>
 800d034:	9012      	str	r0, [sp, #72]	@ 0x48
 800d036:	e7b7      	b.n	800cfa8 <_dtoa_r+0x188>
 800d038:	427b      	negs	r3, r7
 800d03a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d03c:	2300      	movs	r3, #0
 800d03e:	eba8 0807 	sub.w	r8, r8, r7
 800d042:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d044:	e7c4      	b.n	800cfd0 <_dtoa_r+0x1b0>
 800d046:	2300      	movs	r3, #0
 800d048:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d04a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	dc35      	bgt.n	800d0bc <_dtoa_r+0x29c>
 800d050:	2301      	movs	r3, #1
 800d052:	9300      	str	r3, [sp, #0]
 800d054:	9307      	str	r3, [sp, #28]
 800d056:	461a      	mov	r2, r3
 800d058:	920e      	str	r2, [sp, #56]	@ 0x38
 800d05a:	e00b      	b.n	800d074 <_dtoa_r+0x254>
 800d05c:	2301      	movs	r3, #1
 800d05e:	e7f3      	b.n	800d048 <_dtoa_r+0x228>
 800d060:	2300      	movs	r3, #0
 800d062:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d064:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d066:	18fb      	adds	r3, r7, r3
 800d068:	9300      	str	r3, [sp, #0]
 800d06a:	3301      	adds	r3, #1
 800d06c:	2b01      	cmp	r3, #1
 800d06e:	9307      	str	r3, [sp, #28]
 800d070:	bfb8      	it	lt
 800d072:	2301      	movlt	r3, #1
 800d074:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d078:	2100      	movs	r1, #0
 800d07a:	2204      	movs	r2, #4
 800d07c:	f102 0514 	add.w	r5, r2, #20
 800d080:	429d      	cmp	r5, r3
 800d082:	d91f      	bls.n	800d0c4 <_dtoa_r+0x2a4>
 800d084:	6041      	str	r1, [r0, #4]
 800d086:	4658      	mov	r0, fp
 800d088:	f000 fd8e 	bl	800dba8 <_Balloc>
 800d08c:	4682      	mov	sl, r0
 800d08e:	2800      	cmp	r0, #0
 800d090:	d13c      	bne.n	800d10c <_dtoa_r+0x2ec>
 800d092:	4b1b      	ldr	r3, [pc, #108]	@ (800d100 <_dtoa_r+0x2e0>)
 800d094:	4602      	mov	r2, r0
 800d096:	f240 11af 	movw	r1, #431	@ 0x1af
 800d09a:	e6d8      	b.n	800ce4e <_dtoa_r+0x2e>
 800d09c:	2301      	movs	r3, #1
 800d09e:	e7e0      	b.n	800d062 <_dtoa_r+0x242>
 800d0a0:	2401      	movs	r4, #1
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d0a8:	f04f 33ff 	mov.w	r3, #4294967295
 800d0ac:	9300      	str	r3, [sp, #0]
 800d0ae:	9307      	str	r3, [sp, #28]
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	2312      	movs	r3, #18
 800d0b4:	e7d0      	b.n	800d058 <_dtoa_r+0x238>
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d0ba:	e7f5      	b.n	800d0a8 <_dtoa_r+0x288>
 800d0bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d0be:	9300      	str	r3, [sp, #0]
 800d0c0:	9307      	str	r3, [sp, #28]
 800d0c2:	e7d7      	b.n	800d074 <_dtoa_r+0x254>
 800d0c4:	3101      	adds	r1, #1
 800d0c6:	0052      	lsls	r2, r2, #1
 800d0c8:	e7d8      	b.n	800d07c <_dtoa_r+0x25c>
 800d0ca:	bf00      	nop
 800d0cc:	f3af 8000 	nop.w
 800d0d0:	636f4361 	.word	0x636f4361
 800d0d4:	3fd287a7 	.word	0x3fd287a7
 800d0d8:	8b60c8b3 	.word	0x8b60c8b3
 800d0dc:	3fc68a28 	.word	0x3fc68a28
 800d0e0:	509f79fb 	.word	0x509f79fb
 800d0e4:	3fd34413 	.word	0x3fd34413
 800d0e8:	0800fa45 	.word	0x0800fa45
 800d0ec:	0800fa5c 	.word	0x0800fa5c
 800d0f0:	7ff00000 	.word	0x7ff00000
 800d0f4:	0800fa15 	.word	0x0800fa15
 800d0f8:	3ff80000 	.word	0x3ff80000
 800d0fc:	0800fb58 	.word	0x0800fb58
 800d100:	0800fab4 	.word	0x0800fab4
 800d104:	0800fa41 	.word	0x0800fa41
 800d108:	0800fa14 	.word	0x0800fa14
 800d10c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d110:	6018      	str	r0, [r3, #0]
 800d112:	9b07      	ldr	r3, [sp, #28]
 800d114:	2b0e      	cmp	r3, #14
 800d116:	f200 80a4 	bhi.w	800d262 <_dtoa_r+0x442>
 800d11a:	2c00      	cmp	r4, #0
 800d11c:	f000 80a1 	beq.w	800d262 <_dtoa_r+0x442>
 800d120:	2f00      	cmp	r7, #0
 800d122:	dd33      	ble.n	800d18c <_dtoa_r+0x36c>
 800d124:	4bad      	ldr	r3, [pc, #692]	@ (800d3dc <_dtoa_r+0x5bc>)
 800d126:	f007 020f 	and.w	r2, r7, #15
 800d12a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d12e:	ed93 7b00 	vldr	d7, [r3]
 800d132:	05f8      	lsls	r0, r7, #23
 800d134:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d138:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d13c:	d516      	bpl.n	800d16c <_dtoa_r+0x34c>
 800d13e:	4ba8      	ldr	r3, [pc, #672]	@ (800d3e0 <_dtoa_r+0x5c0>)
 800d140:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d144:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d148:	f7f3 fb80 	bl	800084c <__aeabi_ddiv>
 800d14c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d150:	f004 040f 	and.w	r4, r4, #15
 800d154:	2603      	movs	r6, #3
 800d156:	4da2      	ldr	r5, [pc, #648]	@ (800d3e0 <_dtoa_r+0x5c0>)
 800d158:	b954      	cbnz	r4, 800d170 <_dtoa_r+0x350>
 800d15a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d15e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d162:	f7f3 fb73 	bl	800084c <__aeabi_ddiv>
 800d166:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d16a:	e028      	b.n	800d1be <_dtoa_r+0x39e>
 800d16c:	2602      	movs	r6, #2
 800d16e:	e7f2      	b.n	800d156 <_dtoa_r+0x336>
 800d170:	07e1      	lsls	r1, r4, #31
 800d172:	d508      	bpl.n	800d186 <_dtoa_r+0x366>
 800d174:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d178:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d17c:	f7f3 fa3c 	bl	80005f8 <__aeabi_dmul>
 800d180:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d184:	3601      	adds	r6, #1
 800d186:	1064      	asrs	r4, r4, #1
 800d188:	3508      	adds	r5, #8
 800d18a:	e7e5      	b.n	800d158 <_dtoa_r+0x338>
 800d18c:	f000 80d2 	beq.w	800d334 <_dtoa_r+0x514>
 800d190:	427c      	negs	r4, r7
 800d192:	4b92      	ldr	r3, [pc, #584]	@ (800d3dc <_dtoa_r+0x5bc>)
 800d194:	4d92      	ldr	r5, [pc, #584]	@ (800d3e0 <_dtoa_r+0x5c0>)
 800d196:	f004 020f 	and.w	r2, r4, #15
 800d19a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d1a6:	f7f3 fa27 	bl	80005f8 <__aeabi_dmul>
 800d1aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d1ae:	1124      	asrs	r4, r4, #4
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	2602      	movs	r6, #2
 800d1b4:	2c00      	cmp	r4, #0
 800d1b6:	f040 80b2 	bne.w	800d31e <_dtoa_r+0x4fe>
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d1d3      	bne.n	800d166 <_dtoa_r+0x346>
 800d1be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d1c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	f000 80b7 	beq.w	800d338 <_dtoa_r+0x518>
 800d1ca:	4b86      	ldr	r3, [pc, #536]	@ (800d3e4 <_dtoa_r+0x5c4>)
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	4620      	mov	r0, r4
 800d1d0:	4629      	mov	r1, r5
 800d1d2:	f7f3 fc83 	bl	8000adc <__aeabi_dcmplt>
 800d1d6:	2800      	cmp	r0, #0
 800d1d8:	f000 80ae 	beq.w	800d338 <_dtoa_r+0x518>
 800d1dc:	9b07      	ldr	r3, [sp, #28]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	f000 80aa 	beq.w	800d338 <_dtoa_r+0x518>
 800d1e4:	9b00      	ldr	r3, [sp, #0]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	dd37      	ble.n	800d25a <_dtoa_r+0x43a>
 800d1ea:	1e7b      	subs	r3, r7, #1
 800d1ec:	9304      	str	r3, [sp, #16]
 800d1ee:	4620      	mov	r0, r4
 800d1f0:	4b7d      	ldr	r3, [pc, #500]	@ (800d3e8 <_dtoa_r+0x5c8>)
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	4629      	mov	r1, r5
 800d1f6:	f7f3 f9ff 	bl	80005f8 <__aeabi_dmul>
 800d1fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d1fe:	9c00      	ldr	r4, [sp, #0]
 800d200:	3601      	adds	r6, #1
 800d202:	4630      	mov	r0, r6
 800d204:	f7f3 f98e 	bl	8000524 <__aeabi_i2d>
 800d208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d20c:	f7f3 f9f4 	bl	80005f8 <__aeabi_dmul>
 800d210:	4b76      	ldr	r3, [pc, #472]	@ (800d3ec <_dtoa_r+0x5cc>)
 800d212:	2200      	movs	r2, #0
 800d214:	f7f3 f83a 	bl	800028c <__adddf3>
 800d218:	4605      	mov	r5, r0
 800d21a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d21e:	2c00      	cmp	r4, #0
 800d220:	f040 808d 	bne.w	800d33e <_dtoa_r+0x51e>
 800d224:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d228:	4b71      	ldr	r3, [pc, #452]	@ (800d3f0 <_dtoa_r+0x5d0>)
 800d22a:	2200      	movs	r2, #0
 800d22c:	f7f3 f82c 	bl	8000288 <__aeabi_dsub>
 800d230:	4602      	mov	r2, r0
 800d232:	460b      	mov	r3, r1
 800d234:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d238:	462a      	mov	r2, r5
 800d23a:	4633      	mov	r3, r6
 800d23c:	f7f3 fc6c 	bl	8000b18 <__aeabi_dcmpgt>
 800d240:	2800      	cmp	r0, #0
 800d242:	f040 828b 	bne.w	800d75c <_dtoa_r+0x93c>
 800d246:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d24a:	462a      	mov	r2, r5
 800d24c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d250:	f7f3 fc44 	bl	8000adc <__aeabi_dcmplt>
 800d254:	2800      	cmp	r0, #0
 800d256:	f040 8128 	bne.w	800d4aa <_dtoa_r+0x68a>
 800d25a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d25e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d262:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d264:	2b00      	cmp	r3, #0
 800d266:	f2c0 815a 	blt.w	800d51e <_dtoa_r+0x6fe>
 800d26a:	2f0e      	cmp	r7, #14
 800d26c:	f300 8157 	bgt.w	800d51e <_dtoa_r+0x6fe>
 800d270:	4b5a      	ldr	r3, [pc, #360]	@ (800d3dc <_dtoa_r+0x5bc>)
 800d272:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d276:	ed93 7b00 	vldr	d7, [r3]
 800d27a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	ed8d 7b00 	vstr	d7, [sp]
 800d282:	da03      	bge.n	800d28c <_dtoa_r+0x46c>
 800d284:	9b07      	ldr	r3, [sp, #28]
 800d286:	2b00      	cmp	r3, #0
 800d288:	f340 8101 	ble.w	800d48e <_dtoa_r+0x66e>
 800d28c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d290:	4656      	mov	r6, sl
 800d292:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d296:	4620      	mov	r0, r4
 800d298:	4629      	mov	r1, r5
 800d29a:	f7f3 fad7 	bl	800084c <__aeabi_ddiv>
 800d29e:	f7f3 fc5b 	bl	8000b58 <__aeabi_d2iz>
 800d2a2:	4680      	mov	r8, r0
 800d2a4:	f7f3 f93e 	bl	8000524 <__aeabi_i2d>
 800d2a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d2ac:	f7f3 f9a4 	bl	80005f8 <__aeabi_dmul>
 800d2b0:	4602      	mov	r2, r0
 800d2b2:	460b      	mov	r3, r1
 800d2b4:	4620      	mov	r0, r4
 800d2b6:	4629      	mov	r1, r5
 800d2b8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d2bc:	f7f2 ffe4 	bl	8000288 <__aeabi_dsub>
 800d2c0:	f806 4b01 	strb.w	r4, [r6], #1
 800d2c4:	9d07      	ldr	r5, [sp, #28]
 800d2c6:	eba6 040a 	sub.w	r4, r6, sl
 800d2ca:	42a5      	cmp	r5, r4
 800d2cc:	4602      	mov	r2, r0
 800d2ce:	460b      	mov	r3, r1
 800d2d0:	f040 8117 	bne.w	800d502 <_dtoa_r+0x6e2>
 800d2d4:	f7f2 ffda 	bl	800028c <__adddf3>
 800d2d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d2dc:	4604      	mov	r4, r0
 800d2de:	460d      	mov	r5, r1
 800d2e0:	f7f3 fc1a 	bl	8000b18 <__aeabi_dcmpgt>
 800d2e4:	2800      	cmp	r0, #0
 800d2e6:	f040 80f9 	bne.w	800d4dc <_dtoa_r+0x6bc>
 800d2ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d2ee:	4620      	mov	r0, r4
 800d2f0:	4629      	mov	r1, r5
 800d2f2:	f7f3 fbe9 	bl	8000ac8 <__aeabi_dcmpeq>
 800d2f6:	b118      	cbz	r0, 800d300 <_dtoa_r+0x4e0>
 800d2f8:	f018 0f01 	tst.w	r8, #1
 800d2fc:	f040 80ee 	bne.w	800d4dc <_dtoa_r+0x6bc>
 800d300:	4649      	mov	r1, r9
 800d302:	4658      	mov	r0, fp
 800d304:	f000 fc90 	bl	800dc28 <_Bfree>
 800d308:	2300      	movs	r3, #0
 800d30a:	7033      	strb	r3, [r6, #0]
 800d30c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d30e:	3701      	adds	r7, #1
 800d310:	601f      	str	r7, [r3, #0]
 800d312:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d314:	2b00      	cmp	r3, #0
 800d316:	f000 831d 	beq.w	800d954 <_dtoa_r+0xb34>
 800d31a:	601e      	str	r6, [r3, #0]
 800d31c:	e31a      	b.n	800d954 <_dtoa_r+0xb34>
 800d31e:	07e2      	lsls	r2, r4, #31
 800d320:	d505      	bpl.n	800d32e <_dtoa_r+0x50e>
 800d322:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d326:	f7f3 f967 	bl	80005f8 <__aeabi_dmul>
 800d32a:	3601      	adds	r6, #1
 800d32c:	2301      	movs	r3, #1
 800d32e:	1064      	asrs	r4, r4, #1
 800d330:	3508      	adds	r5, #8
 800d332:	e73f      	b.n	800d1b4 <_dtoa_r+0x394>
 800d334:	2602      	movs	r6, #2
 800d336:	e742      	b.n	800d1be <_dtoa_r+0x39e>
 800d338:	9c07      	ldr	r4, [sp, #28]
 800d33a:	9704      	str	r7, [sp, #16]
 800d33c:	e761      	b.n	800d202 <_dtoa_r+0x3e2>
 800d33e:	4b27      	ldr	r3, [pc, #156]	@ (800d3dc <_dtoa_r+0x5bc>)
 800d340:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d342:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d346:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d34a:	4454      	add	r4, sl
 800d34c:	2900      	cmp	r1, #0
 800d34e:	d053      	beq.n	800d3f8 <_dtoa_r+0x5d8>
 800d350:	4928      	ldr	r1, [pc, #160]	@ (800d3f4 <_dtoa_r+0x5d4>)
 800d352:	2000      	movs	r0, #0
 800d354:	f7f3 fa7a 	bl	800084c <__aeabi_ddiv>
 800d358:	4633      	mov	r3, r6
 800d35a:	462a      	mov	r2, r5
 800d35c:	f7f2 ff94 	bl	8000288 <__aeabi_dsub>
 800d360:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d364:	4656      	mov	r6, sl
 800d366:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d36a:	f7f3 fbf5 	bl	8000b58 <__aeabi_d2iz>
 800d36e:	4605      	mov	r5, r0
 800d370:	f7f3 f8d8 	bl	8000524 <__aeabi_i2d>
 800d374:	4602      	mov	r2, r0
 800d376:	460b      	mov	r3, r1
 800d378:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d37c:	f7f2 ff84 	bl	8000288 <__aeabi_dsub>
 800d380:	3530      	adds	r5, #48	@ 0x30
 800d382:	4602      	mov	r2, r0
 800d384:	460b      	mov	r3, r1
 800d386:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d38a:	f806 5b01 	strb.w	r5, [r6], #1
 800d38e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d392:	f7f3 fba3 	bl	8000adc <__aeabi_dcmplt>
 800d396:	2800      	cmp	r0, #0
 800d398:	d171      	bne.n	800d47e <_dtoa_r+0x65e>
 800d39a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d39e:	4911      	ldr	r1, [pc, #68]	@ (800d3e4 <_dtoa_r+0x5c4>)
 800d3a0:	2000      	movs	r0, #0
 800d3a2:	f7f2 ff71 	bl	8000288 <__aeabi_dsub>
 800d3a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d3aa:	f7f3 fb97 	bl	8000adc <__aeabi_dcmplt>
 800d3ae:	2800      	cmp	r0, #0
 800d3b0:	f040 8095 	bne.w	800d4de <_dtoa_r+0x6be>
 800d3b4:	42a6      	cmp	r6, r4
 800d3b6:	f43f af50 	beq.w	800d25a <_dtoa_r+0x43a>
 800d3ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d3be:	4b0a      	ldr	r3, [pc, #40]	@ (800d3e8 <_dtoa_r+0x5c8>)
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	f7f3 f919 	bl	80005f8 <__aeabi_dmul>
 800d3c6:	4b08      	ldr	r3, [pc, #32]	@ (800d3e8 <_dtoa_r+0x5c8>)
 800d3c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3d2:	f7f3 f911 	bl	80005f8 <__aeabi_dmul>
 800d3d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d3da:	e7c4      	b.n	800d366 <_dtoa_r+0x546>
 800d3dc:	0800fb58 	.word	0x0800fb58
 800d3e0:	0800fb30 	.word	0x0800fb30
 800d3e4:	3ff00000 	.word	0x3ff00000
 800d3e8:	40240000 	.word	0x40240000
 800d3ec:	401c0000 	.word	0x401c0000
 800d3f0:	40140000 	.word	0x40140000
 800d3f4:	3fe00000 	.word	0x3fe00000
 800d3f8:	4631      	mov	r1, r6
 800d3fa:	4628      	mov	r0, r5
 800d3fc:	f7f3 f8fc 	bl	80005f8 <__aeabi_dmul>
 800d400:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d404:	9415      	str	r4, [sp, #84]	@ 0x54
 800d406:	4656      	mov	r6, sl
 800d408:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d40c:	f7f3 fba4 	bl	8000b58 <__aeabi_d2iz>
 800d410:	4605      	mov	r5, r0
 800d412:	f7f3 f887 	bl	8000524 <__aeabi_i2d>
 800d416:	4602      	mov	r2, r0
 800d418:	460b      	mov	r3, r1
 800d41a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d41e:	f7f2 ff33 	bl	8000288 <__aeabi_dsub>
 800d422:	3530      	adds	r5, #48	@ 0x30
 800d424:	f806 5b01 	strb.w	r5, [r6], #1
 800d428:	4602      	mov	r2, r0
 800d42a:	460b      	mov	r3, r1
 800d42c:	42a6      	cmp	r6, r4
 800d42e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d432:	f04f 0200 	mov.w	r2, #0
 800d436:	d124      	bne.n	800d482 <_dtoa_r+0x662>
 800d438:	4bac      	ldr	r3, [pc, #688]	@ (800d6ec <_dtoa_r+0x8cc>)
 800d43a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d43e:	f7f2 ff25 	bl	800028c <__adddf3>
 800d442:	4602      	mov	r2, r0
 800d444:	460b      	mov	r3, r1
 800d446:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d44a:	f7f3 fb65 	bl	8000b18 <__aeabi_dcmpgt>
 800d44e:	2800      	cmp	r0, #0
 800d450:	d145      	bne.n	800d4de <_dtoa_r+0x6be>
 800d452:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d456:	49a5      	ldr	r1, [pc, #660]	@ (800d6ec <_dtoa_r+0x8cc>)
 800d458:	2000      	movs	r0, #0
 800d45a:	f7f2 ff15 	bl	8000288 <__aeabi_dsub>
 800d45e:	4602      	mov	r2, r0
 800d460:	460b      	mov	r3, r1
 800d462:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d466:	f7f3 fb39 	bl	8000adc <__aeabi_dcmplt>
 800d46a:	2800      	cmp	r0, #0
 800d46c:	f43f aef5 	beq.w	800d25a <_dtoa_r+0x43a>
 800d470:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d472:	1e73      	subs	r3, r6, #1
 800d474:	9315      	str	r3, [sp, #84]	@ 0x54
 800d476:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d47a:	2b30      	cmp	r3, #48	@ 0x30
 800d47c:	d0f8      	beq.n	800d470 <_dtoa_r+0x650>
 800d47e:	9f04      	ldr	r7, [sp, #16]
 800d480:	e73e      	b.n	800d300 <_dtoa_r+0x4e0>
 800d482:	4b9b      	ldr	r3, [pc, #620]	@ (800d6f0 <_dtoa_r+0x8d0>)
 800d484:	f7f3 f8b8 	bl	80005f8 <__aeabi_dmul>
 800d488:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d48c:	e7bc      	b.n	800d408 <_dtoa_r+0x5e8>
 800d48e:	d10c      	bne.n	800d4aa <_dtoa_r+0x68a>
 800d490:	4b98      	ldr	r3, [pc, #608]	@ (800d6f4 <_dtoa_r+0x8d4>)
 800d492:	2200      	movs	r2, #0
 800d494:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d498:	f7f3 f8ae 	bl	80005f8 <__aeabi_dmul>
 800d49c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d4a0:	f7f3 fb30 	bl	8000b04 <__aeabi_dcmpge>
 800d4a4:	2800      	cmp	r0, #0
 800d4a6:	f000 8157 	beq.w	800d758 <_dtoa_r+0x938>
 800d4aa:	2400      	movs	r4, #0
 800d4ac:	4625      	mov	r5, r4
 800d4ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4b0:	43db      	mvns	r3, r3
 800d4b2:	9304      	str	r3, [sp, #16]
 800d4b4:	4656      	mov	r6, sl
 800d4b6:	2700      	movs	r7, #0
 800d4b8:	4621      	mov	r1, r4
 800d4ba:	4658      	mov	r0, fp
 800d4bc:	f000 fbb4 	bl	800dc28 <_Bfree>
 800d4c0:	2d00      	cmp	r5, #0
 800d4c2:	d0dc      	beq.n	800d47e <_dtoa_r+0x65e>
 800d4c4:	b12f      	cbz	r7, 800d4d2 <_dtoa_r+0x6b2>
 800d4c6:	42af      	cmp	r7, r5
 800d4c8:	d003      	beq.n	800d4d2 <_dtoa_r+0x6b2>
 800d4ca:	4639      	mov	r1, r7
 800d4cc:	4658      	mov	r0, fp
 800d4ce:	f000 fbab 	bl	800dc28 <_Bfree>
 800d4d2:	4629      	mov	r1, r5
 800d4d4:	4658      	mov	r0, fp
 800d4d6:	f000 fba7 	bl	800dc28 <_Bfree>
 800d4da:	e7d0      	b.n	800d47e <_dtoa_r+0x65e>
 800d4dc:	9704      	str	r7, [sp, #16]
 800d4de:	4633      	mov	r3, r6
 800d4e0:	461e      	mov	r6, r3
 800d4e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d4e6:	2a39      	cmp	r2, #57	@ 0x39
 800d4e8:	d107      	bne.n	800d4fa <_dtoa_r+0x6da>
 800d4ea:	459a      	cmp	sl, r3
 800d4ec:	d1f8      	bne.n	800d4e0 <_dtoa_r+0x6c0>
 800d4ee:	9a04      	ldr	r2, [sp, #16]
 800d4f0:	3201      	adds	r2, #1
 800d4f2:	9204      	str	r2, [sp, #16]
 800d4f4:	2230      	movs	r2, #48	@ 0x30
 800d4f6:	f88a 2000 	strb.w	r2, [sl]
 800d4fa:	781a      	ldrb	r2, [r3, #0]
 800d4fc:	3201      	adds	r2, #1
 800d4fe:	701a      	strb	r2, [r3, #0]
 800d500:	e7bd      	b.n	800d47e <_dtoa_r+0x65e>
 800d502:	4b7b      	ldr	r3, [pc, #492]	@ (800d6f0 <_dtoa_r+0x8d0>)
 800d504:	2200      	movs	r2, #0
 800d506:	f7f3 f877 	bl	80005f8 <__aeabi_dmul>
 800d50a:	2200      	movs	r2, #0
 800d50c:	2300      	movs	r3, #0
 800d50e:	4604      	mov	r4, r0
 800d510:	460d      	mov	r5, r1
 800d512:	f7f3 fad9 	bl	8000ac8 <__aeabi_dcmpeq>
 800d516:	2800      	cmp	r0, #0
 800d518:	f43f aebb 	beq.w	800d292 <_dtoa_r+0x472>
 800d51c:	e6f0      	b.n	800d300 <_dtoa_r+0x4e0>
 800d51e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d520:	2a00      	cmp	r2, #0
 800d522:	f000 80db 	beq.w	800d6dc <_dtoa_r+0x8bc>
 800d526:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d528:	2a01      	cmp	r2, #1
 800d52a:	f300 80bf 	bgt.w	800d6ac <_dtoa_r+0x88c>
 800d52e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d530:	2a00      	cmp	r2, #0
 800d532:	f000 80b7 	beq.w	800d6a4 <_dtoa_r+0x884>
 800d536:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d53a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d53c:	4646      	mov	r6, r8
 800d53e:	9a08      	ldr	r2, [sp, #32]
 800d540:	2101      	movs	r1, #1
 800d542:	441a      	add	r2, r3
 800d544:	4658      	mov	r0, fp
 800d546:	4498      	add	r8, r3
 800d548:	9208      	str	r2, [sp, #32]
 800d54a:	f000 fc21 	bl	800dd90 <__i2b>
 800d54e:	4605      	mov	r5, r0
 800d550:	b15e      	cbz	r6, 800d56a <_dtoa_r+0x74a>
 800d552:	9b08      	ldr	r3, [sp, #32]
 800d554:	2b00      	cmp	r3, #0
 800d556:	dd08      	ble.n	800d56a <_dtoa_r+0x74a>
 800d558:	42b3      	cmp	r3, r6
 800d55a:	9a08      	ldr	r2, [sp, #32]
 800d55c:	bfa8      	it	ge
 800d55e:	4633      	movge	r3, r6
 800d560:	eba8 0803 	sub.w	r8, r8, r3
 800d564:	1af6      	subs	r6, r6, r3
 800d566:	1ad3      	subs	r3, r2, r3
 800d568:	9308      	str	r3, [sp, #32]
 800d56a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d56c:	b1f3      	cbz	r3, 800d5ac <_dtoa_r+0x78c>
 800d56e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d570:	2b00      	cmp	r3, #0
 800d572:	f000 80b7 	beq.w	800d6e4 <_dtoa_r+0x8c4>
 800d576:	b18c      	cbz	r4, 800d59c <_dtoa_r+0x77c>
 800d578:	4629      	mov	r1, r5
 800d57a:	4622      	mov	r2, r4
 800d57c:	4658      	mov	r0, fp
 800d57e:	f000 fcc7 	bl	800df10 <__pow5mult>
 800d582:	464a      	mov	r2, r9
 800d584:	4601      	mov	r1, r0
 800d586:	4605      	mov	r5, r0
 800d588:	4658      	mov	r0, fp
 800d58a:	f000 fc17 	bl	800ddbc <__multiply>
 800d58e:	4649      	mov	r1, r9
 800d590:	9004      	str	r0, [sp, #16]
 800d592:	4658      	mov	r0, fp
 800d594:	f000 fb48 	bl	800dc28 <_Bfree>
 800d598:	9b04      	ldr	r3, [sp, #16]
 800d59a:	4699      	mov	r9, r3
 800d59c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d59e:	1b1a      	subs	r2, r3, r4
 800d5a0:	d004      	beq.n	800d5ac <_dtoa_r+0x78c>
 800d5a2:	4649      	mov	r1, r9
 800d5a4:	4658      	mov	r0, fp
 800d5a6:	f000 fcb3 	bl	800df10 <__pow5mult>
 800d5aa:	4681      	mov	r9, r0
 800d5ac:	2101      	movs	r1, #1
 800d5ae:	4658      	mov	r0, fp
 800d5b0:	f000 fbee 	bl	800dd90 <__i2b>
 800d5b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d5b6:	4604      	mov	r4, r0
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	f000 81cf 	beq.w	800d95c <_dtoa_r+0xb3c>
 800d5be:	461a      	mov	r2, r3
 800d5c0:	4601      	mov	r1, r0
 800d5c2:	4658      	mov	r0, fp
 800d5c4:	f000 fca4 	bl	800df10 <__pow5mult>
 800d5c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5ca:	2b01      	cmp	r3, #1
 800d5cc:	4604      	mov	r4, r0
 800d5ce:	f300 8095 	bgt.w	800d6fc <_dtoa_r+0x8dc>
 800d5d2:	9b02      	ldr	r3, [sp, #8]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	f040 8087 	bne.w	800d6e8 <_dtoa_r+0x8c8>
 800d5da:	9b03      	ldr	r3, [sp, #12]
 800d5dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	f040 8089 	bne.w	800d6f8 <_dtoa_r+0x8d8>
 800d5e6:	9b03      	ldr	r3, [sp, #12]
 800d5e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d5ec:	0d1b      	lsrs	r3, r3, #20
 800d5ee:	051b      	lsls	r3, r3, #20
 800d5f0:	b12b      	cbz	r3, 800d5fe <_dtoa_r+0x7de>
 800d5f2:	9b08      	ldr	r3, [sp, #32]
 800d5f4:	3301      	adds	r3, #1
 800d5f6:	9308      	str	r3, [sp, #32]
 800d5f8:	f108 0801 	add.w	r8, r8, #1
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800d600:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d602:	2b00      	cmp	r3, #0
 800d604:	f000 81b0 	beq.w	800d968 <_dtoa_r+0xb48>
 800d608:	6923      	ldr	r3, [r4, #16]
 800d60a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d60e:	6918      	ldr	r0, [r3, #16]
 800d610:	f000 fb72 	bl	800dcf8 <__hi0bits>
 800d614:	f1c0 0020 	rsb	r0, r0, #32
 800d618:	9b08      	ldr	r3, [sp, #32]
 800d61a:	4418      	add	r0, r3
 800d61c:	f010 001f 	ands.w	r0, r0, #31
 800d620:	d077      	beq.n	800d712 <_dtoa_r+0x8f2>
 800d622:	f1c0 0320 	rsb	r3, r0, #32
 800d626:	2b04      	cmp	r3, #4
 800d628:	dd6b      	ble.n	800d702 <_dtoa_r+0x8e2>
 800d62a:	9b08      	ldr	r3, [sp, #32]
 800d62c:	f1c0 001c 	rsb	r0, r0, #28
 800d630:	4403      	add	r3, r0
 800d632:	4480      	add	r8, r0
 800d634:	4406      	add	r6, r0
 800d636:	9308      	str	r3, [sp, #32]
 800d638:	f1b8 0f00 	cmp.w	r8, #0
 800d63c:	dd05      	ble.n	800d64a <_dtoa_r+0x82a>
 800d63e:	4649      	mov	r1, r9
 800d640:	4642      	mov	r2, r8
 800d642:	4658      	mov	r0, fp
 800d644:	f000 fcbe 	bl	800dfc4 <__lshift>
 800d648:	4681      	mov	r9, r0
 800d64a:	9b08      	ldr	r3, [sp, #32]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	dd05      	ble.n	800d65c <_dtoa_r+0x83c>
 800d650:	4621      	mov	r1, r4
 800d652:	461a      	mov	r2, r3
 800d654:	4658      	mov	r0, fp
 800d656:	f000 fcb5 	bl	800dfc4 <__lshift>
 800d65a:	4604      	mov	r4, r0
 800d65c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d059      	beq.n	800d716 <_dtoa_r+0x8f6>
 800d662:	4621      	mov	r1, r4
 800d664:	4648      	mov	r0, r9
 800d666:	f000 fd19 	bl	800e09c <__mcmp>
 800d66a:	2800      	cmp	r0, #0
 800d66c:	da53      	bge.n	800d716 <_dtoa_r+0x8f6>
 800d66e:	1e7b      	subs	r3, r7, #1
 800d670:	9304      	str	r3, [sp, #16]
 800d672:	4649      	mov	r1, r9
 800d674:	2300      	movs	r3, #0
 800d676:	220a      	movs	r2, #10
 800d678:	4658      	mov	r0, fp
 800d67a:	f000 faf7 	bl	800dc6c <__multadd>
 800d67e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d680:	4681      	mov	r9, r0
 800d682:	2b00      	cmp	r3, #0
 800d684:	f000 8172 	beq.w	800d96c <_dtoa_r+0xb4c>
 800d688:	2300      	movs	r3, #0
 800d68a:	4629      	mov	r1, r5
 800d68c:	220a      	movs	r2, #10
 800d68e:	4658      	mov	r0, fp
 800d690:	f000 faec 	bl	800dc6c <__multadd>
 800d694:	9b00      	ldr	r3, [sp, #0]
 800d696:	2b00      	cmp	r3, #0
 800d698:	4605      	mov	r5, r0
 800d69a:	dc67      	bgt.n	800d76c <_dtoa_r+0x94c>
 800d69c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d69e:	2b02      	cmp	r3, #2
 800d6a0:	dc41      	bgt.n	800d726 <_dtoa_r+0x906>
 800d6a2:	e063      	b.n	800d76c <_dtoa_r+0x94c>
 800d6a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d6a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d6aa:	e746      	b.n	800d53a <_dtoa_r+0x71a>
 800d6ac:	9b07      	ldr	r3, [sp, #28]
 800d6ae:	1e5c      	subs	r4, r3, #1
 800d6b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d6b2:	42a3      	cmp	r3, r4
 800d6b4:	bfbf      	itttt	lt
 800d6b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d6b8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d6ba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d6bc:	1ae3      	sublt	r3, r4, r3
 800d6be:	bfb4      	ite	lt
 800d6c0:	18d2      	addlt	r2, r2, r3
 800d6c2:	1b1c      	subge	r4, r3, r4
 800d6c4:	9b07      	ldr	r3, [sp, #28]
 800d6c6:	bfbc      	itt	lt
 800d6c8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d6ca:	2400      	movlt	r4, #0
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	bfb5      	itete	lt
 800d6d0:	eba8 0603 	sublt.w	r6, r8, r3
 800d6d4:	9b07      	ldrge	r3, [sp, #28]
 800d6d6:	2300      	movlt	r3, #0
 800d6d8:	4646      	movge	r6, r8
 800d6da:	e730      	b.n	800d53e <_dtoa_r+0x71e>
 800d6dc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d6de:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d6e0:	4646      	mov	r6, r8
 800d6e2:	e735      	b.n	800d550 <_dtoa_r+0x730>
 800d6e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d6e6:	e75c      	b.n	800d5a2 <_dtoa_r+0x782>
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	e788      	b.n	800d5fe <_dtoa_r+0x7de>
 800d6ec:	3fe00000 	.word	0x3fe00000
 800d6f0:	40240000 	.word	0x40240000
 800d6f4:	40140000 	.word	0x40140000
 800d6f8:	9b02      	ldr	r3, [sp, #8]
 800d6fa:	e780      	b.n	800d5fe <_dtoa_r+0x7de>
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800d700:	e782      	b.n	800d608 <_dtoa_r+0x7e8>
 800d702:	d099      	beq.n	800d638 <_dtoa_r+0x818>
 800d704:	9a08      	ldr	r2, [sp, #32]
 800d706:	331c      	adds	r3, #28
 800d708:	441a      	add	r2, r3
 800d70a:	4498      	add	r8, r3
 800d70c:	441e      	add	r6, r3
 800d70e:	9208      	str	r2, [sp, #32]
 800d710:	e792      	b.n	800d638 <_dtoa_r+0x818>
 800d712:	4603      	mov	r3, r0
 800d714:	e7f6      	b.n	800d704 <_dtoa_r+0x8e4>
 800d716:	9b07      	ldr	r3, [sp, #28]
 800d718:	9704      	str	r7, [sp, #16]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	dc20      	bgt.n	800d760 <_dtoa_r+0x940>
 800d71e:	9300      	str	r3, [sp, #0]
 800d720:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d722:	2b02      	cmp	r3, #2
 800d724:	dd1e      	ble.n	800d764 <_dtoa_r+0x944>
 800d726:	9b00      	ldr	r3, [sp, #0]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	f47f aec0 	bne.w	800d4ae <_dtoa_r+0x68e>
 800d72e:	4621      	mov	r1, r4
 800d730:	2205      	movs	r2, #5
 800d732:	4658      	mov	r0, fp
 800d734:	f000 fa9a 	bl	800dc6c <__multadd>
 800d738:	4601      	mov	r1, r0
 800d73a:	4604      	mov	r4, r0
 800d73c:	4648      	mov	r0, r9
 800d73e:	f000 fcad 	bl	800e09c <__mcmp>
 800d742:	2800      	cmp	r0, #0
 800d744:	f77f aeb3 	ble.w	800d4ae <_dtoa_r+0x68e>
 800d748:	4656      	mov	r6, sl
 800d74a:	2331      	movs	r3, #49	@ 0x31
 800d74c:	f806 3b01 	strb.w	r3, [r6], #1
 800d750:	9b04      	ldr	r3, [sp, #16]
 800d752:	3301      	adds	r3, #1
 800d754:	9304      	str	r3, [sp, #16]
 800d756:	e6ae      	b.n	800d4b6 <_dtoa_r+0x696>
 800d758:	9c07      	ldr	r4, [sp, #28]
 800d75a:	9704      	str	r7, [sp, #16]
 800d75c:	4625      	mov	r5, r4
 800d75e:	e7f3      	b.n	800d748 <_dtoa_r+0x928>
 800d760:	9b07      	ldr	r3, [sp, #28]
 800d762:	9300      	str	r3, [sp, #0]
 800d764:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d766:	2b00      	cmp	r3, #0
 800d768:	f000 8104 	beq.w	800d974 <_dtoa_r+0xb54>
 800d76c:	2e00      	cmp	r6, #0
 800d76e:	dd05      	ble.n	800d77c <_dtoa_r+0x95c>
 800d770:	4629      	mov	r1, r5
 800d772:	4632      	mov	r2, r6
 800d774:	4658      	mov	r0, fp
 800d776:	f000 fc25 	bl	800dfc4 <__lshift>
 800d77a:	4605      	mov	r5, r0
 800d77c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d05a      	beq.n	800d838 <_dtoa_r+0xa18>
 800d782:	6869      	ldr	r1, [r5, #4]
 800d784:	4658      	mov	r0, fp
 800d786:	f000 fa0f 	bl	800dba8 <_Balloc>
 800d78a:	4606      	mov	r6, r0
 800d78c:	b928      	cbnz	r0, 800d79a <_dtoa_r+0x97a>
 800d78e:	4b84      	ldr	r3, [pc, #528]	@ (800d9a0 <_dtoa_r+0xb80>)
 800d790:	4602      	mov	r2, r0
 800d792:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d796:	f7ff bb5a 	b.w	800ce4e <_dtoa_r+0x2e>
 800d79a:	692a      	ldr	r2, [r5, #16]
 800d79c:	3202      	adds	r2, #2
 800d79e:	0092      	lsls	r2, r2, #2
 800d7a0:	f105 010c 	add.w	r1, r5, #12
 800d7a4:	300c      	adds	r0, #12
 800d7a6:	f001 f803 	bl	800e7b0 <memcpy>
 800d7aa:	2201      	movs	r2, #1
 800d7ac:	4631      	mov	r1, r6
 800d7ae:	4658      	mov	r0, fp
 800d7b0:	f000 fc08 	bl	800dfc4 <__lshift>
 800d7b4:	f10a 0301 	add.w	r3, sl, #1
 800d7b8:	9307      	str	r3, [sp, #28]
 800d7ba:	9b00      	ldr	r3, [sp, #0]
 800d7bc:	4453      	add	r3, sl
 800d7be:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d7c0:	9b02      	ldr	r3, [sp, #8]
 800d7c2:	f003 0301 	and.w	r3, r3, #1
 800d7c6:	462f      	mov	r7, r5
 800d7c8:	930a      	str	r3, [sp, #40]	@ 0x28
 800d7ca:	4605      	mov	r5, r0
 800d7cc:	9b07      	ldr	r3, [sp, #28]
 800d7ce:	4621      	mov	r1, r4
 800d7d0:	3b01      	subs	r3, #1
 800d7d2:	4648      	mov	r0, r9
 800d7d4:	9300      	str	r3, [sp, #0]
 800d7d6:	f7ff fa9a 	bl	800cd0e <quorem>
 800d7da:	4639      	mov	r1, r7
 800d7dc:	9002      	str	r0, [sp, #8]
 800d7de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d7e2:	4648      	mov	r0, r9
 800d7e4:	f000 fc5a 	bl	800e09c <__mcmp>
 800d7e8:	462a      	mov	r2, r5
 800d7ea:	9008      	str	r0, [sp, #32]
 800d7ec:	4621      	mov	r1, r4
 800d7ee:	4658      	mov	r0, fp
 800d7f0:	f000 fc70 	bl	800e0d4 <__mdiff>
 800d7f4:	68c2      	ldr	r2, [r0, #12]
 800d7f6:	4606      	mov	r6, r0
 800d7f8:	bb02      	cbnz	r2, 800d83c <_dtoa_r+0xa1c>
 800d7fa:	4601      	mov	r1, r0
 800d7fc:	4648      	mov	r0, r9
 800d7fe:	f000 fc4d 	bl	800e09c <__mcmp>
 800d802:	4602      	mov	r2, r0
 800d804:	4631      	mov	r1, r6
 800d806:	4658      	mov	r0, fp
 800d808:	920e      	str	r2, [sp, #56]	@ 0x38
 800d80a:	f000 fa0d 	bl	800dc28 <_Bfree>
 800d80e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d810:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d812:	9e07      	ldr	r6, [sp, #28]
 800d814:	ea43 0102 	orr.w	r1, r3, r2
 800d818:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d81a:	4319      	orrs	r1, r3
 800d81c:	d110      	bne.n	800d840 <_dtoa_r+0xa20>
 800d81e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d822:	d029      	beq.n	800d878 <_dtoa_r+0xa58>
 800d824:	9b08      	ldr	r3, [sp, #32]
 800d826:	2b00      	cmp	r3, #0
 800d828:	dd02      	ble.n	800d830 <_dtoa_r+0xa10>
 800d82a:	9b02      	ldr	r3, [sp, #8]
 800d82c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d830:	9b00      	ldr	r3, [sp, #0]
 800d832:	f883 8000 	strb.w	r8, [r3]
 800d836:	e63f      	b.n	800d4b8 <_dtoa_r+0x698>
 800d838:	4628      	mov	r0, r5
 800d83a:	e7bb      	b.n	800d7b4 <_dtoa_r+0x994>
 800d83c:	2201      	movs	r2, #1
 800d83e:	e7e1      	b.n	800d804 <_dtoa_r+0x9e4>
 800d840:	9b08      	ldr	r3, [sp, #32]
 800d842:	2b00      	cmp	r3, #0
 800d844:	db04      	blt.n	800d850 <_dtoa_r+0xa30>
 800d846:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d848:	430b      	orrs	r3, r1
 800d84a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d84c:	430b      	orrs	r3, r1
 800d84e:	d120      	bne.n	800d892 <_dtoa_r+0xa72>
 800d850:	2a00      	cmp	r2, #0
 800d852:	dded      	ble.n	800d830 <_dtoa_r+0xa10>
 800d854:	4649      	mov	r1, r9
 800d856:	2201      	movs	r2, #1
 800d858:	4658      	mov	r0, fp
 800d85a:	f000 fbb3 	bl	800dfc4 <__lshift>
 800d85e:	4621      	mov	r1, r4
 800d860:	4681      	mov	r9, r0
 800d862:	f000 fc1b 	bl	800e09c <__mcmp>
 800d866:	2800      	cmp	r0, #0
 800d868:	dc03      	bgt.n	800d872 <_dtoa_r+0xa52>
 800d86a:	d1e1      	bne.n	800d830 <_dtoa_r+0xa10>
 800d86c:	f018 0f01 	tst.w	r8, #1
 800d870:	d0de      	beq.n	800d830 <_dtoa_r+0xa10>
 800d872:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d876:	d1d8      	bne.n	800d82a <_dtoa_r+0xa0a>
 800d878:	9a00      	ldr	r2, [sp, #0]
 800d87a:	2339      	movs	r3, #57	@ 0x39
 800d87c:	7013      	strb	r3, [r2, #0]
 800d87e:	4633      	mov	r3, r6
 800d880:	461e      	mov	r6, r3
 800d882:	3b01      	subs	r3, #1
 800d884:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d888:	2a39      	cmp	r2, #57	@ 0x39
 800d88a:	d052      	beq.n	800d932 <_dtoa_r+0xb12>
 800d88c:	3201      	adds	r2, #1
 800d88e:	701a      	strb	r2, [r3, #0]
 800d890:	e612      	b.n	800d4b8 <_dtoa_r+0x698>
 800d892:	2a00      	cmp	r2, #0
 800d894:	dd07      	ble.n	800d8a6 <_dtoa_r+0xa86>
 800d896:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d89a:	d0ed      	beq.n	800d878 <_dtoa_r+0xa58>
 800d89c:	9a00      	ldr	r2, [sp, #0]
 800d89e:	f108 0301 	add.w	r3, r8, #1
 800d8a2:	7013      	strb	r3, [r2, #0]
 800d8a4:	e608      	b.n	800d4b8 <_dtoa_r+0x698>
 800d8a6:	9b07      	ldr	r3, [sp, #28]
 800d8a8:	9a07      	ldr	r2, [sp, #28]
 800d8aa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d8ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d8b0:	4293      	cmp	r3, r2
 800d8b2:	d028      	beq.n	800d906 <_dtoa_r+0xae6>
 800d8b4:	4649      	mov	r1, r9
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	220a      	movs	r2, #10
 800d8ba:	4658      	mov	r0, fp
 800d8bc:	f000 f9d6 	bl	800dc6c <__multadd>
 800d8c0:	42af      	cmp	r7, r5
 800d8c2:	4681      	mov	r9, r0
 800d8c4:	f04f 0300 	mov.w	r3, #0
 800d8c8:	f04f 020a 	mov.w	r2, #10
 800d8cc:	4639      	mov	r1, r7
 800d8ce:	4658      	mov	r0, fp
 800d8d0:	d107      	bne.n	800d8e2 <_dtoa_r+0xac2>
 800d8d2:	f000 f9cb 	bl	800dc6c <__multadd>
 800d8d6:	4607      	mov	r7, r0
 800d8d8:	4605      	mov	r5, r0
 800d8da:	9b07      	ldr	r3, [sp, #28]
 800d8dc:	3301      	adds	r3, #1
 800d8de:	9307      	str	r3, [sp, #28]
 800d8e0:	e774      	b.n	800d7cc <_dtoa_r+0x9ac>
 800d8e2:	f000 f9c3 	bl	800dc6c <__multadd>
 800d8e6:	4629      	mov	r1, r5
 800d8e8:	4607      	mov	r7, r0
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	220a      	movs	r2, #10
 800d8ee:	4658      	mov	r0, fp
 800d8f0:	f000 f9bc 	bl	800dc6c <__multadd>
 800d8f4:	4605      	mov	r5, r0
 800d8f6:	e7f0      	b.n	800d8da <_dtoa_r+0xaba>
 800d8f8:	9b00      	ldr	r3, [sp, #0]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	bfcc      	ite	gt
 800d8fe:	461e      	movgt	r6, r3
 800d900:	2601      	movle	r6, #1
 800d902:	4456      	add	r6, sl
 800d904:	2700      	movs	r7, #0
 800d906:	4649      	mov	r1, r9
 800d908:	2201      	movs	r2, #1
 800d90a:	4658      	mov	r0, fp
 800d90c:	f000 fb5a 	bl	800dfc4 <__lshift>
 800d910:	4621      	mov	r1, r4
 800d912:	4681      	mov	r9, r0
 800d914:	f000 fbc2 	bl	800e09c <__mcmp>
 800d918:	2800      	cmp	r0, #0
 800d91a:	dcb0      	bgt.n	800d87e <_dtoa_r+0xa5e>
 800d91c:	d102      	bne.n	800d924 <_dtoa_r+0xb04>
 800d91e:	f018 0f01 	tst.w	r8, #1
 800d922:	d1ac      	bne.n	800d87e <_dtoa_r+0xa5e>
 800d924:	4633      	mov	r3, r6
 800d926:	461e      	mov	r6, r3
 800d928:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d92c:	2a30      	cmp	r2, #48	@ 0x30
 800d92e:	d0fa      	beq.n	800d926 <_dtoa_r+0xb06>
 800d930:	e5c2      	b.n	800d4b8 <_dtoa_r+0x698>
 800d932:	459a      	cmp	sl, r3
 800d934:	d1a4      	bne.n	800d880 <_dtoa_r+0xa60>
 800d936:	9b04      	ldr	r3, [sp, #16]
 800d938:	3301      	adds	r3, #1
 800d93a:	9304      	str	r3, [sp, #16]
 800d93c:	2331      	movs	r3, #49	@ 0x31
 800d93e:	f88a 3000 	strb.w	r3, [sl]
 800d942:	e5b9      	b.n	800d4b8 <_dtoa_r+0x698>
 800d944:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d946:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d9a4 <_dtoa_r+0xb84>
 800d94a:	b11b      	cbz	r3, 800d954 <_dtoa_r+0xb34>
 800d94c:	f10a 0308 	add.w	r3, sl, #8
 800d950:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d952:	6013      	str	r3, [r2, #0]
 800d954:	4650      	mov	r0, sl
 800d956:	b019      	add	sp, #100	@ 0x64
 800d958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d95c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d95e:	2b01      	cmp	r3, #1
 800d960:	f77f ae37 	ble.w	800d5d2 <_dtoa_r+0x7b2>
 800d964:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d966:	930a      	str	r3, [sp, #40]	@ 0x28
 800d968:	2001      	movs	r0, #1
 800d96a:	e655      	b.n	800d618 <_dtoa_r+0x7f8>
 800d96c:	9b00      	ldr	r3, [sp, #0]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	f77f aed6 	ble.w	800d720 <_dtoa_r+0x900>
 800d974:	4656      	mov	r6, sl
 800d976:	4621      	mov	r1, r4
 800d978:	4648      	mov	r0, r9
 800d97a:	f7ff f9c8 	bl	800cd0e <quorem>
 800d97e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d982:	f806 8b01 	strb.w	r8, [r6], #1
 800d986:	9b00      	ldr	r3, [sp, #0]
 800d988:	eba6 020a 	sub.w	r2, r6, sl
 800d98c:	4293      	cmp	r3, r2
 800d98e:	ddb3      	ble.n	800d8f8 <_dtoa_r+0xad8>
 800d990:	4649      	mov	r1, r9
 800d992:	2300      	movs	r3, #0
 800d994:	220a      	movs	r2, #10
 800d996:	4658      	mov	r0, fp
 800d998:	f000 f968 	bl	800dc6c <__multadd>
 800d99c:	4681      	mov	r9, r0
 800d99e:	e7ea      	b.n	800d976 <_dtoa_r+0xb56>
 800d9a0:	0800fab4 	.word	0x0800fab4
 800d9a4:	0800fa38 	.word	0x0800fa38

0800d9a8 <_free_r>:
 800d9a8:	b538      	push	{r3, r4, r5, lr}
 800d9aa:	4605      	mov	r5, r0
 800d9ac:	2900      	cmp	r1, #0
 800d9ae:	d041      	beq.n	800da34 <_free_r+0x8c>
 800d9b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9b4:	1f0c      	subs	r4, r1, #4
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	bfb8      	it	lt
 800d9ba:	18e4      	addlt	r4, r4, r3
 800d9bc:	f000 f8e8 	bl	800db90 <__malloc_lock>
 800d9c0:	4a1d      	ldr	r2, [pc, #116]	@ (800da38 <_free_r+0x90>)
 800d9c2:	6813      	ldr	r3, [r2, #0]
 800d9c4:	b933      	cbnz	r3, 800d9d4 <_free_r+0x2c>
 800d9c6:	6063      	str	r3, [r4, #4]
 800d9c8:	6014      	str	r4, [r2, #0]
 800d9ca:	4628      	mov	r0, r5
 800d9cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9d0:	f000 b8e4 	b.w	800db9c <__malloc_unlock>
 800d9d4:	42a3      	cmp	r3, r4
 800d9d6:	d908      	bls.n	800d9ea <_free_r+0x42>
 800d9d8:	6820      	ldr	r0, [r4, #0]
 800d9da:	1821      	adds	r1, r4, r0
 800d9dc:	428b      	cmp	r3, r1
 800d9de:	bf01      	itttt	eq
 800d9e0:	6819      	ldreq	r1, [r3, #0]
 800d9e2:	685b      	ldreq	r3, [r3, #4]
 800d9e4:	1809      	addeq	r1, r1, r0
 800d9e6:	6021      	streq	r1, [r4, #0]
 800d9e8:	e7ed      	b.n	800d9c6 <_free_r+0x1e>
 800d9ea:	461a      	mov	r2, r3
 800d9ec:	685b      	ldr	r3, [r3, #4]
 800d9ee:	b10b      	cbz	r3, 800d9f4 <_free_r+0x4c>
 800d9f0:	42a3      	cmp	r3, r4
 800d9f2:	d9fa      	bls.n	800d9ea <_free_r+0x42>
 800d9f4:	6811      	ldr	r1, [r2, #0]
 800d9f6:	1850      	adds	r0, r2, r1
 800d9f8:	42a0      	cmp	r0, r4
 800d9fa:	d10b      	bne.n	800da14 <_free_r+0x6c>
 800d9fc:	6820      	ldr	r0, [r4, #0]
 800d9fe:	4401      	add	r1, r0
 800da00:	1850      	adds	r0, r2, r1
 800da02:	4283      	cmp	r3, r0
 800da04:	6011      	str	r1, [r2, #0]
 800da06:	d1e0      	bne.n	800d9ca <_free_r+0x22>
 800da08:	6818      	ldr	r0, [r3, #0]
 800da0a:	685b      	ldr	r3, [r3, #4]
 800da0c:	6053      	str	r3, [r2, #4]
 800da0e:	4408      	add	r0, r1
 800da10:	6010      	str	r0, [r2, #0]
 800da12:	e7da      	b.n	800d9ca <_free_r+0x22>
 800da14:	d902      	bls.n	800da1c <_free_r+0x74>
 800da16:	230c      	movs	r3, #12
 800da18:	602b      	str	r3, [r5, #0]
 800da1a:	e7d6      	b.n	800d9ca <_free_r+0x22>
 800da1c:	6820      	ldr	r0, [r4, #0]
 800da1e:	1821      	adds	r1, r4, r0
 800da20:	428b      	cmp	r3, r1
 800da22:	bf04      	itt	eq
 800da24:	6819      	ldreq	r1, [r3, #0]
 800da26:	685b      	ldreq	r3, [r3, #4]
 800da28:	6063      	str	r3, [r4, #4]
 800da2a:	bf04      	itt	eq
 800da2c:	1809      	addeq	r1, r1, r0
 800da2e:	6021      	streq	r1, [r4, #0]
 800da30:	6054      	str	r4, [r2, #4]
 800da32:	e7ca      	b.n	800d9ca <_free_r+0x22>
 800da34:	bd38      	pop	{r3, r4, r5, pc}
 800da36:	bf00      	nop
 800da38:	200006cc 	.word	0x200006cc

0800da3c <malloc>:
 800da3c:	4b02      	ldr	r3, [pc, #8]	@ (800da48 <malloc+0xc>)
 800da3e:	4601      	mov	r1, r0
 800da40:	6818      	ldr	r0, [r3, #0]
 800da42:	f000 b825 	b.w	800da90 <_malloc_r>
 800da46:	bf00      	nop
 800da48:	2000001c 	.word	0x2000001c

0800da4c <sbrk_aligned>:
 800da4c:	b570      	push	{r4, r5, r6, lr}
 800da4e:	4e0f      	ldr	r6, [pc, #60]	@ (800da8c <sbrk_aligned+0x40>)
 800da50:	460c      	mov	r4, r1
 800da52:	6831      	ldr	r1, [r6, #0]
 800da54:	4605      	mov	r5, r0
 800da56:	b911      	cbnz	r1, 800da5e <sbrk_aligned+0x12>
 800da58:	f000 fe9a 	bl	800e790 <_sbrk_r>
 800da5c:	6030      	str	r0, [r6, #0]
 800da5e:	4621      	mov	r1, r4
 800da60:	4628      	mov	r0, r5
 800da62:	f000 fe95 	bl	800e790 <_sbrk_r>
 800da66:	1c43      	adds	r3, r0, #1
 800da68:	d103      	bne.n	800da72 <sbrk_aligned+0x26>
 800da6a:	f04f 34ff 	mov.w	r4, #4294967295
 800da6e:	4620      	mov	r0, r4
 800da70:	bd70      	pop	{r4, r5, r6, pc}
 800da72:	1cc4      	adds	r4, r0, #3
 800da74:	f024 0403 	bic.w	r4, r4, #3
 800da78:	42a0      	cmp	r0, r4
 800da7a:	d0f8      	beq.n	800da6e <sbrk_aligned+0x22>
 800da7c:	1a21      	subs	r1, r4, r0
 800da7e:	4628      	mov	r0, r5
 800da80:	f000 fe86 	bl	800e790 <_sbrk_r>
 800da84:	3001      	adds	r0, #1
 800da86:	d1f2      	bne.n	800da6e <sbrk_aligned+0x22>
 800da88:	e7ef      	b.n	800da6a <sbrk_aligned+0x1e>
 800da8a:	bf00      	nop
 800da8c:	200006c8 	.word	0x200006c8

0800da90 <_malloc_r>:
 800da90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da94:	1ccd      	adds	r5, r1, #3
 800da96:	f025 0503 	bic.w	r5, r5, #3
 800da9a:	3508      	adds	r5, #8
 800da9c:	2d0c      	cmp	r5, #12
 800da9e:	bf38      	it	cc
 800daa0:	250c      	movcc	r5, #12
 800daa2:	2d00      	cmp	r5, #0
 800daa4:	4606      	mov	r6, r0
 800daa6:	db01      	blt.n	800daac <_malloc_r+0x1c>
 800daa8:	42a9      	cmp	r1, r5
 800daaa:	d904      	bls.n	800dab6 <_malloc_r+0x26>
 800daac:	230c      	movs	r3, #12
 800daae:	6033      	str	r3, [r6, #0]
 800dab0:	2000      	movs	r0, #0
 800dab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dab6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800db8c <_malloc_r+0xfc>
 800daba:	f000 f869 	bl	800db90 <__malloc_lock>
 800dabe:	f8d8 3000 	ldr.w	r3, [r8]
 800dac2:	461c      	mov	r4, r3
 800dac4:	bb44      	cbnz	r4, 800db18 <_malloc_r+0x88>
 800dac6:	4629      	mov	r1, r5
 800dac8:	4630      	mov	r0, r6
 800daca:	f7ff ffbf 	bl	800da4c <sbrk_aligned>
 800dace:	1c43      	adds	r3, r0, #1
 800dad0:	4604      	mov	r4, r0
 800dad2:	d158      	bne.n	800db86 <_malloc_r+0xf6>
 800dad4:	f8d8 4000 	ldr.w	r4, [r8]
 800dad8:	4627      	mov	r7, r4
 800dada:	2f00      	cmp	r7, #0
 800dadc:	d143      	bne.n	800db66 <_malloc_r+0xd6>
 800dade:	2c00      	cmp	r4, #0
 800dae0:	d04b      	beq.n	800db7a <_malloc_r+0xea>
 800dae2:	6823      	ldr	r3, [r4, #0]
 800dae4:	4639      	mov	r1, r7
 800dae6:	4630      	mov	r0, r6
 800dae8:	eb04 0903 	add.w	r9, r4, r3
 800daec:	f000 fe50 	bl	800e790 <_sbrk_r>
 800daf0:	4581      	cmp	r9, r0
 800daf2:	d142      	bne.n	800db7a <_malloc_r+0xea>
 800daf4:	6821      	ldr	r1, [r4, #0]
 800daf6:	1a6d      	subs	r5, r5, r1
 800daf8:	4629      	mov	r1, r5
 800dafa:	4630      	mov	r0, r6
 800dafc:	f7ff ffa6 	bl	800da4c <sbrk_aligned>
 800db00:	3001      	adds	r0, #1
 800db02:	d03a      	beq.n	800db7a <_malloc_r+0xea>
 800db04:	6823      	ldr	r3, [r4, #0]
 800db06:	442b      	add	r3, r5
 800db08:	6023      	str	r3, [r4, #0]
 800db0a:	f8d8 3000 	ldr.w	r3, [r8]
 800db0e:	685a      	ldr	r2, [r3, #4]
 800db10:	bb62      	cbnz	r2, 800db6c <_malloc_r+0xdc>
 800db12:	f8c8 7000 	str.w	r7, [r8]
 800db16:	e00f      	b.n	800db38 <_malloc_r+0xa8>
 800db18:	6822      	ldr	r2, [r4, #0]
 800db1a:	1b52      	subs	r2, r2, r5
 800db1c:	d420      	bmi.n	800db60 <_malloc_r+0xd0>
 800db1e:	2a0b      	cmp	r2, #11
 800db20:	d917      	bls.n	800db52 <_malloc_r+0xc2>
 800db22:	1961      	adds	r1, r4, r5
 800db24:	42a3      	cmp	r3, r4
 800db26:	6025      	str	r5, [r4, #0]
 800db28:	bf18      	it	ne
 800db2a:	6059      	strne	r1, [r3, #4]
 800db2c:	6863      	ldr	r3, [r4, #4]
 800db2e:	bf08      	it	eq
 800db30:	f8c8 1000 	streq.w	r1, [r8]
 800db34:	5162      	str	r2, [r4, r5]
 800db36:	604b      	str	r3, [r1, #4]
 800db38:	4630      	mov	r0, r6
 800db3a:	f000 f82f 	bl	800db9c <__malloc_unlock>
 800db3e:	f104 000b 	add.w	r0, r4, #11
 800db42:	1d23      	adds	r3, r4, #4
 800db44:	f020 0007 	bic.w	r0, r0, #7
 800db48:	1ac2      	subs	r2, r0, r3
 800db4a:	bf1c      	itt	ne
 800db4c:	1a1b      	subne	r3, r3, r0
 800db4e:	50a3      	strne	r3, [r4, r2]
 800db50:	e7af      	b.n	800dab2 <_malloc_r+0x22>
 800db52:	6862      	ldr	r2, [r4, #4]
 800db54:	42a3      	cmp	r3, r4
 800db56:	bf0c      	ite	eq
 800db58:	f8c8 2000 	streq.w	r2, [r8]
 800db5c:	605a      	strne	r2, [r3, #4]
 800db5e:	e7eb      	b.n	800db38 <_malloc_r+0xa8>
 800db60:	4623      	mov	r3, r4
 800db62:	6864      	ldr	r4, [r4, #4]
 800db64:	e7ae      	b.n	800dac4 <_malloc_r+0x34>
 800db66:	463c      	mov	r4, r7
 800db68:	687f      	ldr	r7, [r7, #4]
 800db6a:	e7b6      	b.n	800dada <_malloc_r+0x4a>
 800db6c:	461a      	mov	r2, r3
 800db6e:	685b      	ldr	r3, [r3, #4]
 800db70:	42a3      	cmp	r3, r4
 800db72:	d1fb      	bne.n	800db6c <_malloc_r+0xdc>
 800db74:	2300      	movs	r3, #0
 800db76:	6053      	str	r3, [r2, #4]
 800db78:	e7de      	b.n	800db38 <_malloc_r+0xa8>
 800db7a:	230c      	movs	r3, #12
 800db7c:	6033      	str	r3, [r6, #0]
 800db7e:	4630      	mov	r0, r6
 800db80:	f000 f80c 	bl	800db9c <__malloc_unlock>
 800db84:	e794      	b.n	800dab0 <_malloc_r+0x20>
 800db86:	6005      	str	r5, [r0, #0]
 800db88:	e7d6      	b.n	800db38 <_malloc_r+0xa8>
 800db8a:	bf00      	nop
 800db8c:	200006cc 	.word	0x200006cc

0800db90 <__malloc_lock>:
 800db90:	4801      	ldr	r0, [pc, #4]	@ (800db98 <__malloc_lock+0x8>)
 800db92:	f7ff b8ba 	b.w	800cd0a <__retarget_lock_acquire_recursive>
 800db96:	bf00      	nop
 800db98:	200006c4 	.word	0x200006c4

0800db9c <__malloc_unlock>:
 800db9c:	4801      	ldr	r0, [pc, #4]	@ (800dba4 <__malloc_unlock+0x8>)
 800db9e:	f7ff b8b5 	b.w	800cd0c <__retarget_lock_release_recursive>
 800dba2:	bf00      	nop
 800dba4:	200006c4 	.word	0x200006c4

0800dba8 <_Balloc>:
 800dba8:	b570      	push	{r4, r5, r6, lr}
 800dbaa:	69c6      	ldr	r6, [r0, #28]
 800dbac:	4604      	mov	r4, r0
 800dbae:	460d      	mov	r5, r1
 800dbb0:	b976      	cbnz	r6, 800dbd0 <_Balloc+0x28>
 800dbb2:	2010      	movs	r0, #16
 800dbb4:	f7ff ff42 	bl	800da3c <malloc>
 800dbb8:	4602      	mov	r2, r0
 800dbba:	61e0      	str	r0, [r4, #28]
 800dbbc:	b920      	cbnz	r0, 800dbc8 <_Balloc+0x20>
 800dbbe:	4b18      	ldr	r3, [pc, #96]	@ (800dc20 <_Balloc+0x78>)
 800dbc0:	4818      	ldr	r0, [pc, #96]	@ (800dc24 <_Balloc+0x7c>)
 800dbc2:	216b      	movs	r1, #107	@ 0x6b
 800dbc4:	f000 fe02 	bl	800e7cc <__assert_func>
 800dbc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dbcc:	6006      	str	r6, [r0, #0]
 800dbce:	60c6      	str	r6, [r0, #12]
 800dbd0:	69e6      	ldr	r6, [r4, #28]
 800dbd2:	68f3      	ldr	r3, [r6, #12]
 800dbd4:	b183      	cbz	r3, 800dbf8 <_Balloc+0x50>
 800dbd6:	69e3      	ldr	r3, [r4, #28]
 800dbd8:	68db      	ldr	r3, [r3, #12]
 800dbda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dbde:	b9b8      	cbnz	r0, 800dc10 <_Balloc+0x68>
 800dbe0:	2101      	movs	r1, #1
 800dbe2:	fa01 f605 	lsl.w	r6, r1, r5
 800dbe6:	1d72      	adds	r2, r6, #5
 800dbe8:	0092      	lsls	r2, r2, #2
 800dbea:	4620      	mov	r0, r4
 800dbec:	f000 fe0c 	bl	800e808 <_calloc_r>
 800dbf0:	b160      	cbz	r0, 800dc0c <_Balloc+0x64>
 800dbf2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dbf6:	e00e      	b.n	800dc16 <_Balloc+0x6e>
 800dbf8:	2221      	movs	r2, #33	@ 0x21
 800dbfa:	2104      	movs	r1, #4
 800dbfc:	4620      	mov	r0, r4
 800dbfe:	f000 fe03 	bl	800e808 <_calloc_r>
 800dc02:	69e3      	ldr	r3, [r4, #28]
 800dc04:	60f0      	str	r0, [r6, #12]
 800dc06:	68db      	ldr	r3, [r3, #12]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d1e4      	bne.n	800dbd6 <_Balloc+0x2e>
 800dc0c:	2000      	movs	r0, #0
 800dc0e:	bd70      	pop	{r4, r5, r6, pc}
 800dc10:	6802      	ldr	r2, [r0, #0]
 800dc12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dc16:	2300      	movs	r3, #0
 800dc18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dc1c:	e7f7      	b.n	800dc0e <_Balloc+0x66>
 800dc1e:	bf00      	nop
 800dc20:	0800fa45 	.word	0x0800fa45
 800dc24:	0800fac5 	.word	0x0800fac5

0800dc28 <_Bfree>:
 800dc28:	b570      	push	{r4, r5, r6, lr}
 800dc2a:	69c6      	ldr	r6, [r0, #28]
 800dc2c:	4605      	mov	r5, r0
 800dc2e:	460c      	mov	r4, r1
 800dc30:	b976      	cbnz	r6, 800dc50 <_Bfree+0x28>
 800dc32:	2010      	movs	r0, #16
 800dc34:	f7ff ff02 	bl	800da3c <malloc>
 800dc38:	4602      	mov	r2, r0
 800dc3a:	61e8      	str	r0, [r5, #28]
 800dc3c:	b920      	cbnz	r0, 800dc48 <_Bfree+0x20>
 800dc3e:	4b09      	ldr	r3, [pc, #36]	@ (800dc64 <_Bfree+0x3c>)
 800dc40:	4809      	ldr	r0, [pc, #36]	@ (800dc68 <_Bfree+0x40>)
 800dc42:	218f      	movs	r1, #143	@ 0x8f
 800dc44:	f000 fdc2 	bl	800e7cc <__assert_func>
 800dc48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dc4c:	6006      	str	r6, [r0, #0]
 800dc4e:	60c6      	str	r6, [r0, #12]
 800dc50:	b13c      	cbz	r4, 800dc62 <_Bfree+0x3a>
 800dc52:	69eb      	ldr	r3, [r5, #28]
 800dc54:	6862      	ldr	r2, [r4, #4]
 800dc56:	68db      	ldr	r3, [r3, #12]
 800dc58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dc5c:	6021      	str	r1, [r4, #0]
 800dc5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dc62:	bd70      	pop	{r4, r5, r6, pc}
 800dc64:	0800fa45 	.word	0x0800fa45
 800dc68:	0800fac5 	.word	0x0800fac5

0800dc6c <__multadd>:
 800dc6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc70:	690d      	ldr	r5, [r1, #16]
 800dc72:	4607      	mov	r7, r0
 800dc74:	460c      	mov	r4, r1
 800dc76:	461e      	mov	r6, r3
 800dc78:	f101 0c14 	add.w	ip, r1, #20
 800dc7c:	2000      	movs	r0, #0
 800dc7e:	f8dc 3000 	ldr.w	r3, [ip]
 800dc82:	b299      	uxth	r1, r3
 800dc84:	fb02 6101 	mla	r1, r2, r1, r6
 800dc88:	0c1e      	lsrs	r6, r3, #16
 800dc8a:	0c0b      	lsrs	r3, r1, #16
 800dc8c:	fb02 3306 	mla	r3, r2, r6, r3
 800dc90:	b289      	uxth	r1, r1
 800dc92:	3001      	adds	r0, #1
 800dc94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dc98:	4285      	cmp	r5, r0
 800dc9a:	f84c 1b04 	str.w	r1, [ip], #4
 800dc9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dca2:	dcec      	bgt.n	800dc7e <__multadd+0x12>
 800dca4:	b30e      	cbz	r6, 800dcea <__multadd+0x7e>
 800dca6:	68a3      	ldr	r3, [r4, #8]
 800dca8:	42ab      	cmp	r3, r5
 800dcaa:	dc19      	bgt.n	800dce0 <__multadd+0x74>
 800dcac:	6861      	ldr	r1, [r4, #4]
 800dcae:	4638      	mov	r0, r7
 800dcb0:	3101      	adds	r1, #1
 800dcb2:	f7ff ff79 	bl	800dba8 <_Balloc>
 800dcb6:	4680      	mov	r8, r0
 800dcb8:	b928      	cbnz	r0, 800dcc6 <__multadd+0x5a>
 800dcba:	4602      	mov	r2, r0
 800dcbc:	4b0c      	ldr	r3, [pc, #48]	@ (800dcf0 <__multadd+0x84>)
 800dcbe:	480d      	ldr	r0, [pc, #52]	@ (800dcf4 <__multadd+0x88>)
 800dcc0:	21ba      	movs	r1, #186	@ 0xba
 800dcc2:	f000 fd83 	bl	800e7cc <__assert_func>
 800dcc6:	6922      	ldr	r2, [r4, #16]
 800dcc8:	3202      	adds	r2, #2
 800dcca:	f104 010c 	add.w	r1, r4, #12
 800dcce:	0092      	lsls	r2, r2, #2
 800dcd0:	300c      	adds	r0, #12
 800dcd2:	f000 fd6d 	bl	800e7b0 <memcpy>
 800dcd6:	4621      	mov	r1, r4
 800dcd8:	4638      	mov	r0, r7
 800dcda:	f7ff ffa5 	bl	800dc28 <_Bfree>
 800dcde:	4644      	mov	r4, r8
 800dce0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dce4:	3501      	adds	r5, #1
 800dce6:	615e      	str	r6, [r3, #20]
 800dce8:	6125      	str	r5, [r4, #16]
 800dcea:	4620      	mov	r0, r4
 800dcec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcf0:	0800fab4 	.word	0x0800fab4
 800dcf4:	0800fac5 	.word	0x0800fac5

0800dcf8 <__hi0bits>:
 800dcf8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	bf36      	itet	cc
 800dd00:	0403      	lslcc	r3, r0, #16
 800dd02:	2000      	movcs	r0, #0
 800dd04:	2010      	movcc	r0, #16
 800dd06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dd0a:	bf3c      	itt	cc
 800dd0c:	021b      	lslcc	r3, r3, #8
 800dd0e:	3008      	addcc	r0, #8
 800dd10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dd14:	bf3c      	itt	cc
 800dd16:	011b      	lslcc	r3, r3, #4
 800dd18:	3004      	addcc	r0, #4
 800dd1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd1e:	bf3c      	itt	cc
 800dd20:	009b      	lslcc	r3, r3, #2
 800dd22:	3002      	addcc	r0, #2
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	db05      	blt.n	800dd34 <__hi0bits+0x3c>
 800dd28:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dd2c:	f100 0001 	add.w	r0, r0, #1
 800dd30:	bf08      	it	eq
 800dd32:	2020      	moveq	r0, #32
 800dd34:	4770      	bx	lr

0800dd36 <__lo0bits>:
 800dd36:	6803      	ldr	r3, [r0, #0]
 800dd38:	4602      	mov	r2, r0
 800dd3a:	f013 0007 	ands.w	r0, r3, #7
 800dd3e:	d00b      	beq.n	800dd58 <__lo0bits+0x22>
 800dd40:	07d9      	lsls	r1, r3, #31
 800dd42:	d421      	bmi.n	800dd88 <__lo0bits+0x52>
 800dd44:	0798      	lsls	r0, r3, #30
 800dd46:	bf49      	itett	mi
 800dd48:	085b      	lsrmi	r3, r3, #1
 800dd4a:	089b      	lsrpl	r3, r3, #2
 800dd4c:	2001      	movmi	r0, #1
 800dd4e:	6013      	strmi	r3, [r2, #0]
 800dd50:	bf5c      	itt	pl
 800dd52:	6013      	strpl	r3, [r2, #0]
 800dd54:	2002      	movpl	r0, #2
 800dd56:	4770      	bx	lr
 800dd58:	b299      	uxth	r1, r3
 800dd5a:	b909      	cbnz	r1, 800dd60 <__lo0bits+0x2a>
 800dd5c:	0c1b      	lsrs	r3, r3, #16
 800dd5e:	2010      	movs	r0, #16
 800dd60:	b2d9      	uxtb	r1, r3
 800dd62:	b909      	cbnz	r1, 800dd68 <__lo0bits+0x32>
 800dd64:	3008      	adds	r0, #8
 800dd66:	0a1b      	lsrs	r3, r3, #8
 800dd68:	0719      	lsls	r1, r3, #28
 800dd6a:	bf04      	itt	eq
 800dd6c:	091b      	lsreq	r3, r3, #4
 800dd6e:	3004      	addeq	r0, #4
 800dd70:	0799      	lsls	r1, r3, #30
 800dd72:	bf04      	itt	eq
 800dd74:	089b      	lsreq	r3, r3, #2
 800dd76:	3002      	addeq	r0, #2
 800dd78:	07d9      	lsls	r1, r3, #31
 800dd7a:	d403      	bmi.n	800dd84 <__lo0bits+0x4e>
 800dd7c:	085b      	lsrs	r3, r3, #1
 800dd7e:	f100 0001 	add.w	r0, r0, #1
 800dd82:	d003      	beq.n	800dd8c <__lo0bits+0x56>
 800dd84:	6013      	str	r3, [r2, #0]
 800dd86:	4770      	bx	lr
 800dd88:	2000      	movs	r0, #0
 800dd8a:	4770      	bx	lr
 800dd8c:	2020      	movs	r0, #32
 800dd8e:	4770      	bx	lr

0800dd90 <__i2b>:
 800dd90:	b510      	push	{r4, lr}
 800dd92:	460c      	mov	r4, r1
 800dd94:	2101      	movs	r1, #1
 800dd96:	f7ff ff07 	bl	800dba8 <_Balloc>
 800dd9a:	4602      	mov	r2, r0
 800dd9c:	b928      	cbnz	r0, 800ddaa <__i2b+0x1a>
 800dd9e:	4b05      	ldr	r3, [pc, #20]	@ (800ddb4 <__i2b+0x24>)
 800dda0:	4805      	ldr	r0, [pc, #20]	@ (800ddb8 <__i2b+0x28>)
 800dda2:	f240 1145 	movw	r1, #325	@ 0x145
 800dda6:	f000 fd11 	bl	800e7cc <__assert_func>
 800ddaa:	2301      	movs	r3, #1
 800ddac:	6144      	str	r4, [r0, #20]
 800ddae:	6103      	str	r3, [r0, #16]
 800ddb0:	bd10      	pop	{r4, pc}
 800ddb2:	bf00      	nop
 800ddb4:	0800fab4 	.word	0x0800fab4
 800ddb8:	0800fac5 	.word	0x0800fac5

0800ddbc <__multiply>:
 800ddbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddc0:	4614      	mov	r4, r2
 800ddc2:	690a      	ldr	r2, [r1, #16]
 800ddc4:	6923      	ldr	r3, [r4, #16]
 800ddc6:	429a      	cmp	r2, r3
 800ddc8:	bfa8      	it	ge
 800ddca:	4623      	movge	r3, r4
 800ddcc:	460f      	mov	r7, r1
 800ddce:	bfa4      	itt	ge
 800ddd0:	460c      	movge	r4, r1
 800ddd2:	461f      	movge	r7, r3
 800ddd4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ddd8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800dddc:	68a3      	ldr	r3, [r4, #8]
 800ddde:	6861      	ldr	r1, [r4, #4]
 800dde0:	eb0a 0609 	add.w	r6, sl, r9
 800dde4:	42b3      	cmp	r3, r6
 800dde6:	b085      	sub	sp, #20
 800dde8:	bfb8      	it	lt
 800ddea:	3101      	addlt	r1, #1
 800ddec:	f7ff fedc 	bl	800dba8 <_Balloc>
 800ddf0:	b930      	cbnz	r0, 800de00 <__multiply+0x44>
 800ddf2:	4602      	mov	r2, r0
 800ddf4:	4b44      	ldr	r3, [pc, #272]	@ (800df08 <__multiply+0x14c>)
 800ddf6:	4845      	ldr	r0, [pc, #276]	@ (800df0c <__multiply+0x150>)
 800ddf8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ddfc:	f000 fce6 	bl	800e7cc <__assert_func>
 800de00:	f100 0514 	add.w	r5, r0, #20
 800de04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800de08:	462b      	mov	r3, r5
 800de0a:	2200      	movs	r2, #0
 800de0c:	4543      	cmp	r3, r8
 800de0e:	d321      	bcc.n	800de54 <__multiply+0x98>
 800de10:	f107 0114 	add.w	r1, r7, #20
 800de14:	f104 0214 	add.w	r2, r4, #20
 800de18:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800de1c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800de20:	9302      	str	r3, [sp, #8]
 800de22:	1b13      	subs	r3, r2, r4
 800de24:	3b15      	subs	r3, #21
 800de26:	f023 0303 	bic.w	r3, r3, #3
 800de2a:	3304      	adds	r3, #4
 800de2c:	f104 0715 	add.w	r7, r4, #21
 800de30:	42ba      	cmp	r2, r7
 800de32:	bf38      	it	cc
 800de34:	2304      	movcc	r3, #4
 800de36:	9301      	str	r3, [sp, #4]
 800de38:	9b02      	ldr	r3, [sp, #8]
 800de3a:	9103      	str	r1, [sp, #12]
 800de3c:	428b      	cmp	r3, r1
 800de3e:	d80c      	bhi.n	800de5a <__multiply+0x9e>
 800de40:	2e00      	cmp	r6, #0
 800de42:	dd03      	ble.n	800de4c <__multiply+0x90>
 800de44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d05b      	beq.n	800df04 <__multiply+0x148>
 800de4c:	6106      	str	r6, [r0, #16]
 800de4e:	b005      	add	sp, #20
 800de50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de54:	f843 2b04 	str.w	r2, [r3], #4
 800de58:	e7d8      	b.n	800de0c <__multiply+0x50>
 800de5a:	f8b1 a000 	ldrh.w	sl, [r1]
 800de5e:	f1ba 0f00 	cmp.w	sl, #0
 800de62:	d024      	beq.n	800deae <__multiply+0xf2>
 800de64:	f104 0e14 	add.w	lr, r4, #20
 800de68:	46a9      	mov	r9, r5
 800de6a:	f04f 0c00 	mov.w	ip, #0
 800de6e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800de72:	f8d9 3000 	ldr.w	r3, [r9]
 800de76:	fa1f fb87 	uxth.w	fp, r7
 800de7a:	b29b      	uxth	r3, r3
 800de7c:	fb0a 330b 	mla	r3, sl, fp, r3
 800de80:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800de84:	f8d9 7000 	ldr.w	r7, [r9]
 800de88:	4463      	add	r3, ip
 800de8a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800de8e:	fb0a c70b 	mla	r7, sl, fp, ip
 800de92:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800de96:	b29b      	uxth	r3, r3
 800de98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800de9c:	4572      	cmp	r2, lr
 800de9e:	f849 3b04 	str.w	r3, [r9], #4
 800dea2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800dea6:	d8e2      	bhi.n	800de6e <__multiply+0xb2>
 800dea8:	9b01      	ldr	r3, [sp, #4]
 800deaa:	f845 c003 	str.w	ip, [r5, r3]
 800deae:	9b03      	ldr	r3, [sp, #12]
 800deb0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800deb4:	3104      	adds	r1, #4
 800deb6:	f1b9 0f00 	cmp.w	r9, #0
 800deba:	d021      	beq.n	800df00 <__multiply+0x144>
 800debc:	682b      	ldr	r3, [r5, #0]
 800debe:	f104 0c14 	add.w	ip, r4, #20
 800dec2:	46ae      	mov	lr, r5
 800dec4:	f04f 0a00 	mov.w	sl, #0
 800dec8:	f8bc b000 	ldrh.w	fp, [ip]
 800decc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ded0:	fb09 770b 	mla	r7, r9, fp, r7
 800ded4:	4457      	add	r7, sl
 800ded6:	b29b      	uxth	r3, r3
 800ded8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dedc:	f84e 3b04 	str.w	r3, [lr], #4
 800dee0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dee4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dee8:	f8be 3000 	ldrh.w	r3, [lr]
 800deec:	fb09 330a 	mla	r3, r9, sl, r3
 800def0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800def4:	4562      	cmp	r2, ip
 800def6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800defa:	d8e5      	bhi.n	800dec8 <__multiply+0x10c>
 800defc:	9f01      	ldr	r7, [sp, #4]
 800defe:	51eb      	str	r3, [r5, r7]
 800df00:	3504      	adds	r5, #4
 800df02:	e799      	b.n	800de38 <__multiply+0x7c>
 800df04:	3e01      	subs	r6, #1
 800df06:	e79b      	b.n	800de40 <__multiply+0x84>
 800df08:	0800fab4 	.word	0x0800fab4
 800df0c:	0800fac5 	.word	0x0800fac5

0800df10 <__pow5mult>:
 800df10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df14:	4615      	mov	r5, r2
 800df16:	f012 0203 	ands.w	r2, r2, #3
 800df1a:	4607      	mov	r7, r0
 800df1c:	460e      	mov	r6, r1
 800df1e:	d007      	beq.n	800df30 <__pow5mult+0x20>
 800df20:	4c25      	ldr	r4, [pc, #148]	@ (800dfb8 <__pow5mult+0xa8>)
 800df22:	3a01      	subs	r2, #1
 800df24:	2300      	movs	r3, #0
 800df26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800df2a:	f7ff fe9f 	bl	800dc6c <__multadd>
 800df2e:	4606      	mov	r6, r0
 800df30:	10ad      	asrs	r5, r5, #2
 800df32:	d03d      	beq.n	800dfb0 <__pow5mult+0xa0>
 800df34:	69fc      	ldr	r4, [r7, #28]
 800df36:	b97c      	cbnz	r4, 800df58 <__pow5mult+0x48>
 800df38:	2010      	movs	r0, #16
 800df3a:	f7ff fd7f 	bl	800da3c <malloc>
 800df3e:	4602      	mov	r2, r0
 800df40:	61f8      	str	r0, [r7, #28]
 800df42:	b928      	cbnz	r0, 800df50 <__pow5mult+0x40>
 800df44:	4b1d      	ldr	r3, [pc, #116]	@ (800dfbc <__pow5mult+0xac>)
 800df46:	481e      	ldr	r0, [pc, #120]	@ (800dfc0 <__pow5mult+0xb0>)
 800df48:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800df4c:	f000 fc3e 	bl	800e7cc <__assert_func>
 800df50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800df54:	6004      	str	r4, [r0, #0]
 800df56:	60c4      	str	r4, [r0, #12]
 800df58:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800df5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800df60:	b94c      	cbnz	r4, 800df76 <__pow5mult+0x66>
 800df62:	f240 2171 	movw	r1, #625	@ 0x271
 800df66:	4638      	mov	r0, r7
 800df68:	f7ff ff12 	bl	800dd90 <__i2b>
 800df6c:	2300      	movs	r3, #0
 800df6e:	f8c8 0008 	str.w	r0, [r8, #8]
 800df72:	4604      	mov	r4, r0
 800df74:	6003      	str	r3, [r0, #0]
 800df76:	f04f 0900 	mov.w	r9, #0
 800df7a:	07eb      	lsls	r3, r5, #31
 800df7c:	d50a      	bpl.n	800df94 <__pow5mult+0x84>
 800df7e:	4631      	mov	r1, r6
 800df80:	4622      	mov	r2, r4
 800df82:	4638      	mov	r0, r7
 800df84:	f7ff ff1a 	bl	800ddbc <__multiply>
 800df88:	4631      	mov	r1, r6
 800df8a:	4680      	mov	r8, r0
 800df8c:	4638      	mov	r0, r7
 800df8e:	f7ff fe4b 	bl	800dc28 <_Bfree>
 800df92:	4646      	mov	r6, r8
 800df94:	106d      	asrs	r5, r5, #1
 800df96:	d00b      	beq.n	800dfb0 <__pow5mult+0xa0>
 800df98:	6820      	ldr	r0, [r4, #0]
 800df9a:	b938      	cbnz	r0, 800dfac <__pow5mult+0x9c>
 800df9c:	4622      	mov	r2, r4
 800df9e:	4621      	mov	r1, r4
 800dfa0:	4638      	mov	r0, r7
 800dfa2:	f7ff ff0b 	bl	800ddbc <__multiply>
 800dfa6:	6020      	str	r0, [r4, #0]
 800dfa8:	f8c0 9000 	str.w	r9, [r0]
 800dfac:	4604      	mov	r4, r0
 800dfae:	e7e4      	b.n	800df7a <__pow5mult+0x6a>
 800dfb0:	4630      	mov	r0, r6
 800dfb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfb6:	bf00      	nop
 800dfb8:	0800fb20 	.word	0x0800fb20
 800dfbc:	0800fa45 	.word	0x0800fa45
 800dfc0:	0800fac5 	.word	0x0800fac5

0800dfc4 <__lshift>:
 800dfc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfc8:	460c      	mov	r4, r1
 800dfca:	6849      	ldr	r1, [r1, #4]
 800dfcc:	6923      	ldr	r3, [r4, #16]
 800dfce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dfd2:	68a3      	ldr	r3, [r4, #8]
 800dfd4:	4607      	mov	r7, r0
 800dfd6:	4691      	mov	r9, r2
 800dfd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dfdc:	f108 0601 	add.w	r6, r8, #1
 800dfe0:	42b3      	cmp	r3, r6
 800dfe2:	db0b      	blt.n	800dffc <__lshift+0x38>
 800dfe4:	4638      	mov	r0, r7
 800dfe6:	f7ff fddf 	bl	800dba8 <_Balloc>
 800dfea:	4605      	mov	r5, r0
 800dfec:	b948      	cbnz	r0, 800e002 <__lshift+0x3e>
 800dfee:	4602      	mov	r2, r0
 800dff0:	4b28      	ldr	r3, [pc, #160]	@ (800e094 <__lshift+0xd0>)
 800dff2:	4829      	ldr	r0, [pc, #164]	@ (800e098 <__lshift+0xd4>)
 800dff4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800dff8:	f000 fbe8 	bl	800e7cc <__assert_func>
 800dffc:	3101      	adds	r1, #1
 800dffe:	005b      	lsls	r3, r3, #1
 800e000:	e7ee      	b.n	800dfe0 <__lshift+0x1c>
 800e002:	2300      	movs	r3, #0
 800e004:	f100 0114 	add.w	r1, r0, #20
 800e008:	f100 0210 	add.w	r2, r0, #16
 800e00c:	4618      	mov	r0, r3
 800e00e:	4553      	cmp	r3, sl
 800e010:	db33      	blt.n	800e07a <__lshift+0xb6>
 800e012:	6920      	ldr	r0, [r4, #16]
 800e014:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e018:	f104 0314 	add.w	r3, r4, #20
 800e01c:	f019 091f 	ands.w	r9, r9, #31
 800e020:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e024:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e028:	d02b      	beq.n	800e082 <__lshift+0xbe>
 800e02a:	f1c9 0e20 	rsb	lr, r9, #32
 800e02e:	468a      	mov	sl, r1
 800e030:	2200      	movs	r2, #0
 800e032:	6818      	ldr	r0, [r3, #0]
 800e034:	fa00 f009 	lsl.w	r0, r0, r9
 800e038:	4310      	orrs	r0, r2
 800e03a:	f84a 0b04 	str.w	r0, [sl], #4
 800e03e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e042:	459c      	cmp	ip, r3
 800e044:	fa22 f20e 	lsr.w	r2, r2, lr
 800e048:	d8f3      	bhi.n	800e032 <__lshift+0x6e>
 800e04a:	ebac 0304 	sub.w	r3, ip, r4
 800e04e:	3b15      	subs	r3, #21
 800e050:	f023 0303 	bic.w	r3, r3, #3
 800e054:	3304      	adds	r3, #4
 800e056:	f104 0015 	add.w	r0, r4, #21
 800e05a:	4584      	cmp	ip, r0
 800e05c:	bf38      	it	cc
 800e05e:	2304      	movcc	r3, #4
 800e060:	50ca      	str	r2, [r1, r3]
 800e062:	b10a      	cbz	r2, 800e068 <__lshift+0xa4>
 800e064:	f108 0602 	add.w	r6, r8, #2
 800e068:	3e01      	subs	r6, #1
 800e06a:	4638      	mov	r0, r7
 800e06c:	612e      	str	r6, [r5, #16]
 800e06e:	4621      	mov	r1, r4
 800e070:	f7ff fdda 	bl	800dc28 <_Bfree>
 800e074:	4628      	mov	r0, r5
 800e076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e07a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e07e:	3301      	adds	r3, #1
 800e080:	e7c5      	b.n	800e00e <__lshift+0x4a>
 800e082:	3904      	subs	r1, #4
 800e084:	f853 2b04 	ldr.w	r2, [r3], #4
 800e088:	f841 2f04 	str.w	r2, [r1, #4]!
 800e08c:	459c      	cmp	ip, r3
 800e08e:	d8f9      	bhi.n	800e084 <__lshift+0xc0>
 800e090:	e7ea      	b.n	800e068 <__lshift+0xa4>
 800e092:	bf00      	nop
 800e094:	0800fab4 	.word	0x0800fab4
 800e098:	0800fac5 	.word	0x0800fac5

0800e09c <__mcmp>:
 800e09c:	690a      	ldr	r2, [r1, #16]
 800e09e:	4603      	mov	r3, r0
 800e0a0:	6900      	ldr	r0, [r0, #16]
 800e0a2:	1a80      	subs	r0, r0, r2
 800e0a4:	b530      	push	{r4, r5, lr}
 800e0a6:	d10e      	bne.n	800e0c6 <__mcmp+0x2a>
 800e0a8:	3314      	adds	r3, #20
 800e0aa:	3114      	adds	r1, #20
 800e0ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e0b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e0b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e0b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e0bc:	4295      	cmp	r5, r2
 800e0be:	d003      	beq.n	800e0c8 <__mcmp+0x2c>
 800e0c0:	d205      	bcs.n	800e0ce <__mcmp+0x32>
 800e0c2:	f04f 30ff 	mov.w	r0, #4294967295
 800e0c6:	bd30      	pop	{r4, r5, pc}
 800e0c8:	42a3      	cmp	r3, r4
 800e0ca:	d3f3      	bcc.n	800e0b4 <__mcmp+0x18>
 800e0cc:	e7fb      	b.n	800e0c6 <__mcmp+0x2a>
 800e0ce:	2001      	movs	r0, #1
 800e0d0:	e7f9      	b.n	800e0c6 <__mcmp+0x2a>
	...

0800e0d4 <__mdiff>:
 800e0d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0d8:	4689      	mov	r9, r1
 800e0da:	4606      	mov	r6, r0
 800e0dc:	4611      	mov	r1, r2
 800e0de:	4648      	mov	r0, r9
 800e0e0:	4614      	mov	r4, r2
 800e0e2:	f7ff ffdb 	bl	800e09c <__mcmp>
 800e0e6:	1e05      	subs	r5, r0, #0
 800e0e8:	d112      	bne.n	800e110 <__mdiff+0x3c>
 800e0ea:	4629      	mov	r1, r5
 800e0ec:	4630      	mov	r0, r6
 800e0ee:	f7ff fd5b 	bl	800dba8 <_Balloc>
 800e0f2:	4602      	mov	r2, r0
 800e0f4:	b928      	cbnz	r0, 800e102 <__mdiff+0x2e>
 800e0f6:	4b3f      	ldr	r3, [pc, #252]	@ (800e1f4 <__mdiff+0x120>)
 800e0f8:	f240 2137 	movw	r1, #567	@ 0x237
 800e0fc:	483e      	ldr	r0, [pc, #248]	@ (800e1f8 <__mdiff+0x124>)
 800e0fe:	f000 fb65 	bl	800e7cc <__assert_func>
 800e102:	2301      	movs	r3, #1
 800e104:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e108:	4610      	mov	r0, r2
 800e10a:	b003      	add	sp, #12
 800e10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e110:	bfbc      	itt	lt
 800e112:	464b      	movlt	r3, r9
 800e114:	46a1      	movlt	r9, r4
 800e116:	4630      	mov	r0, r6
 800e118:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e11c:	bfba      	itte	lt
 800e11e:	461c      	movlt	r4, r3
 800e120:	2501      	movlt	r5, #1
 800e122:	2500      	movge	r5, #0
 800e124:	f7ff fd40 	bl	800dba8 <_Balloc>
 800e128:	4602      	mov	r2, r0
 800e12a:	b918      	cbnz	r0, 800e134 <__mdiff+0x60>
 800e12c:	4b31      	ldr	r3, [pc, #196]	@ (800e1f4 <__mdiff+0x120>)
 800e12e:	f240 2145 	movw	r1, #581	@ 0x245
 800e132:	e7e3      	b.n	800e0fc <__mdiff+0x28>
 800e134:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e138:	6926      	ldr	r6, [r4, #16]
 800e13a:	60c5      	str	r5, [r0, #12]
 800e13c:	f109 0310 	add.w	r3, r9, #16
 800e140:	f109 0514 	add.w	r5, r9, #20
 800e144:	f104 0e14 	add.w	lr, r4, #20
 800e148:	f100 0b14 	add.w	fp, r0, #20
 800e14c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e150:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e154:	9301      	str	r3, [sp, #4]
 800e156:	46d9      	mov	r9, fp
 800e158:	f04f 0c00 	mov.w	ip, #0
 800e15c:	9b01      	ldr	r3, [sp, #4]
 800e15e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e162:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e166:	9301      	str	r3, [sp, #4]
 800e168:	fa1f f38a 	uxth.w	r3, sl
 800e16c:	4619      	mov	r1, r3
 800e16e:	b283      	uxth	r3, r0
 800e170:	1acb      	subs	r3, r1, r3
 800e172:	0c00      	lsrs	r0, r0, #16
 800e174:	4463      	add	r3, ip
 800e176:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e17a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e17e:	b29b      	uxth	r3, r3
 800e180:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e184:	4576      	cmp	r6, lr
 800e186:	f849 3b04 	str.w	r3, [r9], #4
 800e18a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e18e:	d8e5      	bhi.n	800e15c <__mdiff+0x88>
 800e190:	1b33      	subs	r3, r6, r4
 800e192:	3b15      	subs	r3, #21
 800e194:	f023 0303 	bic.w	r3, r3, #3
 800e198:	3415      	adds	r4, #21
 800e19a:	3304      	adds	r3, #4
 800e19c:	42a6      	cmp	r6, r4
 800e19e:	bf38      	it	cc
 800e1a0:	2304      	movcc	r3, #4
 800e1a2:	441d      	add	r5, r3
 800e1a4:	445b      	add	r3, fp
 800e1a6:	461e      	mov	r6, r3
 800e1a8:	462c      	mov	r4, r5
 800e1aa:	4544      	cmp	r4, r8
 800e1ac:	d30e      	bcc.n	800e1cc <__mdiff+0xf8>
 800e1ae:	f108 0103 	add.w	r1, r8, #3
 800e1b2:	1b49      	subs	r1, r1, r5
 800e1b4:	f021 0103 	bic.w	r1, r1, #3
 800e1b8:	3d03      	subs	r5, #3
 800e1ba:	45a8      	cmp	r8, r5
 800e1bc:	bf38      	it	cc
 800e1be:	2100      	movcc	r1, #0
 800e1c0:	440b      	add	r3, r1
 800e1c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e1c6:	b191      	cbz	r1, 800e1ee <__mdiff+0x11a>
 800e1c8:	6117      	str	r7, [r2, #16]
 800e1ca:	e79d      	b.n	800e108 <__mdiff+0x34>
 800e1cc:	f854 1b04 	ldr.w	r1, [r4], #4
 800e1d0:	46e6      	mov	lr, ip
 800e1d2:	0c08      	lsrs	r0, r1, #16
 800e1d4:	fa1c fc81 	uxtah	ip, ip, r1
 800e1d8:	4471      	add	r1, lr
 800e1da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e1de:	b289      	uxth	r1, r1
 800e1e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e1e4:	f846 1b04 	str.w	r1, [r6], #4
 800e1e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e1ec:	e7dd      	b.n	800e1aa <__mdiff+0xd6>
 800e1ee:	3f01      	subs	r7, #1
 800e1f0:	e7e7      	b.n	800e1c2 <__mdiff+0xee>
 800e1f2:	bf00      	nop
 800e1f4:	0800fab4 	.word	0x0800fab4
 800e1f8:	0800fac5 	.word	0x0800fac5

0800e1fc <__d2b>:
 800e1fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e200:	460f      	mov	r7, r1
 800e202:	2101      	movs	r1, #1
 800e204:	ec59 8b10 	vmov	r8, r9, d0
 800e208:	4616      	mov	r6, r2
 800e20a:	f7ff fccd 	bl	800dba8 <_Balloc>
 800e20e:	4604      	mov	r4, r0
 800e210:	b930      	cbnz	r0, 800e220 <__d2b+0x24>
 800e212:	4602      	mov	r2, r0
 800e214:	4b23      	ldr	r3, [pc, #140]	@ (800e2a4 <__d2b+0xa8>)
 800e216:	4824      	ldr	r0, [pc, #144]	@ (800e2a8 <__d2b+0xac>)
 800e218:	f240 310f 	movw	r1, #783	@ 0x30f
 800e21c:	f000 fad6 	bl	800e7cc <__assert_func>
 800e220:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e224:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e228:	b10d      	cbz	r5, 800e22e <__d2b+0x32>
 800e22a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e22e:	9301      	str	r3, [sp, #4]
 800e230:	f1b8 0300 	subs.w	r3, r8, #0
 800e234:	d023      	beq.n	800e27e <__d2b+0x82>
 800e236:	4668      	mov	r0, sp
 800e238:	9300      	str	r3, [sp, #0]
 800e23a:	f7ff fd7c 	bl	800dd36 <__lo0bits>
 800e23e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e242:	b1d0      	cbz	r0, 800e27a <__d2b+0x7e>
 800e244:	f1c0 0320 	rsb	r3, r0, #32
 800e248:	fa02 f303 	lsl.w	r3, r2, r3
 800e24c:	430b      	orrs	r3, r1
 800e24e:	40c2      	lsrs	r2, r0
 800e250:	6163      	str	r3, [r4, #20]
 800e252:	9201      	str	r2, [sp, #4]
 800e254:	9b01      	ldr	r3, [sp, #4]
 800e256:	61a3      	str	r3, [r4, #24]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	bf0c      	ite	eq
 800e25c:	2201      	moveq	r2, #1
 800e25e:	2202      	movne	r2, #2
 800e260:	6122      	str	r2, [r4, #16]
 800e262:	b1a5      	cbz	r5, 800e28e <__d2b+0x92>
 800e264:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e268:	4405      	add	r5, r0
 800e26a:	603d      	str	r5, [r7, #0]
 800e26c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e270:	6030      	str	r0, [r6, #0]
 800e272:	4620      	mov	r0, r4
 800e274:	b003      	add	sp, #12
 800e276:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e27a:	6161      	str	r1, [r4, #20]
 800e27c:	e7ea      	b.n	800e254 <__d2b+0x58>
 800e27e:	a801      	add	r0, sp, #4
 800e280:	f7ff fd59 	bl	800dd36 <__lo0bits>
 800e284:	9b01      	ldr	r3, [sp, #4]
 800e286:	6163      	str	r3, [r4, #20]
 800e288:	3020      	adds	r0, #32
 800e28a:	2201      	movs	r2, #1
 800e28c:	e7e8      	b.n	800e260 <__d2b+0x64>
 800e28e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e292:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e296:	6038      	str	r0, [r7, #0]
 800e298:	6918      	ldr	r0, [r3, #16]
 800e29a:	f7ff fd2d 	bl	800dcf8 <__hi0bits>
 800e29e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e2a2:	e7e5      	b.n	800e270 <__d2b+0x74>
 800e2a4:	0800fab4 	.word	0x0800fab4
 800e2a8:	0800fac5 	.word	0x0800fac5

0800e2ac <__sfputc_r>:
 800e2ac:	6893      	ldr	r3, [r2, #8]
 800e2ae:	3b01      	subs	r3, #1
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	b410      	push	{r4}
 800e2b4:	6093      	str	r3, [r2, #8]
 800e2b6:	da08      	bge.n	800e2ca <__sfputc_r+0x1e>
 800e2b8:	6994      	ldr	r4, [r2, #24]
 800e2ba:	42a3      	cmp	r3, r4
 800e2bc:	db01      	blt.n	800e2c2 <__sfputc_r+0x16>
 800e2be:	290a      	cmp	r1, #10
 800e2c0:	d103      	bne.n	800e2ca <__sfputc_r+0x1e>
 800e2c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2c6:	f7fe bc0e 	b.w	800cae6 <__swbuf_r>
 800e2ca:	6813      	ldr	r3, [r2, #0]
 800e2cc:	1c58      	adds	r0, r3, #1
 800e2ce:	6010      	str	r0, [r2, #0]
 800e2d0:	7019      	strb	r1, [r3, #0]
 800e2d2:	4608      	mov	r0, r1
 800e2d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2d8:	4770      	bx	lr

0800e2da <__sfputs_r>:
 800e2da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2dc:	4606      	mov	r6, r0
 800e2de:	460f      	mov	r7, r1
 800e2e0:	4614      	mov	r4, r2
 800e2e2:	18d5      	adds	r5, r2, r3
 800e2e4:	42ac      	cmp	r4, r5
 800e2e6:	d101      	bne.n	800e2ec <__sfputs_r+0x12>
 800e2e8:	2000      	movs	r0, #0
 800e2ea:	e007      	b.n	800e2fc <__sfputs_r+0x22>
 800e2ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2f0:	463a      	mov	r2, r7
 800e2f2:	4630      	mov	r0, r6
 800e2f4:	f7ff ffda 	bl	800e2ac <__sfputc_r>
 800e2f8:	1c43      	adds	r3, r0, #1
 800e2fa:	d1f3      	bne.n	800e2e4 <__sfputs_r+0xa>
 800e2fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e300 <_vfiprintf_r>:
 800e300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e304:	460d      	mov	r5, r1
 800e306:	b09d      	sub	sp, #116	@ 0x74
 800e308:	4614      	mov	r4, r2
 800e30a:	4698      	mov	r8, r3
 800e30c:	4606      	mov	r6, r0
 800e30e:	b118      	cbz	r0, 800e318 <_vfiprintf_r+0x18>
 800e310:	6a03      	ldr	r3, [r0, #32]
 800e312:	b90b      	cbnz	r3, 800e318 <_vfiprintf_r+0x18>
 800e314:	f7fe fafe 	bl	800c914 <__sinit>
 800e318:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e31a:	07d9      	lsls	r1, r3, #31
 800e31c:	d405      	bmi.n	800e32a <_vfiprintf_r+0x2a>
 800e31e:	89ab      	ldrh	r3, [r5, #12]
 800e320:	059a      	lsls	r2, r3, #22
 800e322:	d402      	bmi.n	800e32a <_vfiprintf_r+0x2a>
 800e324:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e326:	f7fe fcf0 	bl	800cd0a <__retarget_lock_acquire_recursive>
 800e32a:	89ab      	ldrh	r3, [r5, #12]
 800e32c:	071b      	lsls	r3, r3, #28
 800e32e:	d501      	bpl.n	800e334 <_vfiprintf_r+0x34>
 800e330:	692b      	ldr	r3, [r5, #16]
 800e332:	b99b      	cbnz	r3, 800e35c <_vfiprintf_r+0x5c>
 800e334:	4629      	mov	r1, r5
 800e336:	4630      	mov	r0, r6
 800e338:	f7fe fc14 	bl	800cb64 <__swsetup_r>
 800e33c:	b170      	cbz	r0, 800e35c <_vfiprintf_r+0x5c>
 800e33e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e340:	07dc      	lsls	r4, r3, #31
 800e342:	d504      	bpl.n	800e34e <_vfiprintf_r+0x4e>
 800e344:	f04f 30ff 	mov.w	r0, #4294967295
 800e348:	b01d      	add	sp, #116	@ 0x74
 800e34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e34e:	89ab      	ldrh	r3, [r5, #12]
 800e350:	0598      	lsls	r0, r3, #22
 800e352:	d4f7      	bmi.n	800e344 <_vfiprintf_r+0x44>
 800e354:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e356:	f7fe fcd9 	bl	800cd0c <__retarget_lock_release_recursive>
 800e35a:	e7f3      	b.n	800e344 <_vfiprintf_r+0x44>
 800e35c:	2300      	movs	r3, #0
 800e35e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e360:	2320      	movs	r3, #32
 800e362:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e366:	f8cd 800c 	str.w	r8, [sp, #12]
 800e36a:	2330      	movs	r3, #48	@ 0x30
 800e36c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e51c <_vfiprintf_r+0x21c>
 800e370:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e374:	f04f 0901 	mov.w	r9, #1
 800e378:	4623      	mov	r3, r4
 800e37a:	469a      	mov	sl, r3
 800e37c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e380:	b10a      	cbz	r2, 800e386 <_vfiprintf_r+0x86>
 800e382:	2a25      	cmp	r2, #37	@ 0x25
 800e384:	d1f9      	bne.n	800e37a <_vfiprintf_r+0x7a>
 800e386:	ebba 0b04 	subs.w	fp, sl, r4
 800e38a:	d00b      	beq.n	800e3a4 <_vfiprintf_r+0xa4>
 800e38c:	465b      	mov	r3, fp
 800e38e:	4622      	mov	r2, r4
 800e390:	4629      	mov	r1, r5
 800e392:	4630      	mov	r0, r6
 800e394:	f7ff ffa1 	bl	800e2da <__sfputs_r>
 800e398:	3001      	adds	r0, #1
 800e39a:	f000 80a7 	beq.w	800e4ec <_vfiprintf_r+0x1ec>
 800e39e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e3a0:	445a      	add	r2, fp
 800e3a2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e3a4:	f89a 3000 	ldrb.w	r3, [sl]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	f000 809f 	beq.w	800e4ec <_vfiprintf_r+0x1ec>
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	f04f 32ff 	mov.w	r2, #4294967295
 800e3b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e3b8:	f10a 0a01 	add.w	sl, sl, #1
 800e3bc:	9304      	str	r3, [sp, #16]
 800e3be:	9307      	str	r3, [sp, #28]
 800e3c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e3c4:	931a      	str	r3, [sp, #104]	@ 0x68
 800e3c6:	4654      	mov	r4, sl
 800e3c8:	2205      	movs	r2, #5
 800e3ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3ce:	4853      	ldr	r0, [pc, #332]	@ (800e51c <_vfiprintf_r+0x21c>)
 800e3d0:	f7f1 fefe 	bl	80001d0 <memchr>
 800e3d4:	9a04      	ldr	r2, [sp, #16]
 800e3d6:	b9d8      	cbnz	r0, 800e410 <_vfiprintf_r+0x110>
 800e3d8:	06d1      	lsls	r1, r2, #27
 800e3da:	bf44      	itt	mi
 800e3dc:	2320      	movmi	r3, #32
 800e3de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e3e2:	0713      	lsls	r3, r2, #28
 800e3e4:	bf44      	itt	mi
 800e3e6:	232b      	movmi	r3, #43	@ 0x2b
 800e3e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e3ec:	f89a 3000 	ldrb.w	r3, [sl]
 800e3f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e3f2:	d015      	beq.n	800e420 <_vfiprintf_r+0x120>
 800e3f4:	9a07      	ldr	r2, [sp, #28]
 800e3f6:	4654      	mov	r4, sl
 800e3f8:	2000      	movs	r0, #0
 800e3fa:	f04f 0c0a 	mov.w	ip, #10
 800e3fe:	4621      	mov	r1, r4
 800e400:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e404:	3b30      	subs	r3, #48	@ 0x30
 800e406:	2b09      	cmp	r3, #9
 800e408:	d94b      	bls.n	800e4a2 <_vfiprintf_r+0x1a2>
 800e40a:	b1b0      	cbz	r0, 800e43a <_vfiprintf_r+0x13a>
 800e40c:	9207      	str	r2, [sp, #28]
 800e40e:	e014      	b.n	800e43a <_vfiprintf_r+0x13a>
 800e410:	eba0 0308 	sub.w	r3, r0, r8
 800e414:	fa09 f303 	lsl.w	r3, r9, r3
 800e418:	4313      	orrs	r3, r2
 800e41a:	9304      	str	r3, [sp, #16]
 800e41c:	46a2      	mov	sl, r4
 800e41e:	e7d2      	b.n	800e3c6 <_vfiprintf_r+0xc6>
 800e420:	9b03      	ldr	r3, [sp, #12]
 800e422:	1d19      	adds	r1, r3, #4
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	9103      	str	r1, [sp, #12]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	bfbb      	ittet	lt
 800e42c:	425b      	neglt	r3, r3
 800e42e:	f042 0202 	orrlt.w	r2, r2, #2
 800e432:	9307      	strge	r3, [sp, #28]
 800e434:	9307      	strlt	r3, [sp, #28]
 800e436:	bfb8      	it	lt
 800e438:	9204      	strlt	r2, [sp, #16]
 800e43a:	7823      	ldrb	r3, [r4, #0]
 800e43c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e43e:	d10a      	bne.n	800e456 <_vfiprintf_r+0x156>
 800e440:	7863      	ldrb	r3, [r4, #1]
 800e442:	2b2a      	cmp	r3, #42	@ 0x2a
 800e444:	d132      	bne.n	800e4ac <_vfiprintf_r+0x1ac>
 800e446:	9b03      	ldr	r3, [sp, #12]
 800e448:	1d1a      	adds	r2, r3, #4
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	9203      	str	r2, [sp, #12]
 800e44e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e452:	3402      	adds	r4, #2
 800e454:	9305      	str	r3, [sp, #20]
 800e456:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e52c <_vfiprintf_r+0x22c>
 800e45a:	7821      	ldrb	r1, [r4, #0]
 800e45c:	2203      	movs	r2, #3
 800e45e:	4650      	mov	r0, sl
 800e460:	f7f1 feb6 	bl	80001d0 <memchr>
 800e464:	b138      	cbz	r0, 800e476 <_vfiprintf_r+0x176>
 800e466:	9b04      	ldr	r3, [sp, #16]
 800e468:	eba0 000a 	sub.w	r0, r0, sl
 800e46c:	2240      	movs	r2, #64	@ 0x40
 800e46e:	4082      	lsls	r2, r0
 800e470:	4313      	orrs	r3, r2
 800e472:	3401      	adds	r4, #1
 800e474:	9304      	str	r3, [sp, #16]
 800e476:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e47a:	4829      	ldr	r0, [pc, #164]	@ (800e520 <_vfiprintf_r+0x220>)
 800e47c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e480:	2206      	movs	r2, #6
 800e482:	f7f1 fea5 	bl	80001d0 <memchr>
 800e486:	2800      	cmp	r0, #0
 800e488:	d03f      	beq.n	800e50a <_vfiprintf_r+0x20a>
 800e48a:	4b26      	ldr	r3, [pc, #152]	@ (800e524 <_vfiprintf_r+0x224>)
 800e48c:	bb1b      	cbnz	r3, 800e4d6 <_vfiprintf_r+0x1d6>
 800e48e:	9b03      	ldr	r3, [sp, #12]
 800e490:	3307      	adds	r3, #7
 800e492:	f023 0307 	bic.w	r3, r3, #7
 800e496:	3308      	adds	r3, #8
 800e498:	9303      	str	r3, [sp, #12]
 800e49a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e49c:	443b      	add	r3, r7
 800e49e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4a0:	e76a      	b.n	800e378 <_vfiprintf_r+0x78>
 800e4a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e4a6:	460c      	mov	r4, r1
 800e4a8:	2001      	movs	r0, #1
 800e4aa:	e7a8      	b.n	800e3fe <_vfiprintf_r+0xfe>
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	3401      	adds	r4, #1
 800e4b0:	9305      	str	r3, [sp, #20]
 800e4b2:	4619      	mov	r1, r3
 800e4b4:	f04f 0c0a 	mov.w	ip, #10
 800e4b8:	4620      	mov	r0, r4
 800e4ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e4be:	3a30      	subs	r2, #48	@ 0x30
 800e4c0:	2a09      	cmp	r2, #9
 800e4c2:	d903      	bls.n	800e4cc <_vfiprintf_r+0x1cc>
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d0c6      	beq.n	800e456 <_vfiprintf_r+0x156>
 800e4c8:	9105      	str	r1, [sp, #20]
 800e4ca:	e7c4      	b.n	800e456 <_vfiprintf_r+0x156>
 800e4cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800e4d0:	4604      	mov	r4, r0
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	e7f0      	b.n	800e4b8 <_vfiprintf_r+0x1b8>
 800e4d6:	ab03      	add	r3, sp, #12
 800e4d8:	9300      	str	r3, [sp, #0]
 800e4da:	462a      	mov	r2, r5
 800e4dc:	4b12      	ldr	r3, [pc, #72]	@ (800e528 <_vfiprintf_r+0x228>)
 800e4de:	a904      	add	r1, sp, #16
 800e4e0:	4630      	mov	r0, r6
 800e4e2:	f7fd fdd3 	bl	800c08c <_printf_float>
 800e4e6:	4607      	mov	r7, r0
 800e4e8:	1c78      	adds	r0, r7, #1
 800e4ea:	d1d6      	bne.n	800e49a <_vfiprintf_r+0x19a>
 800e4ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e4ee:	07d9      	lsls	r1, r3, #31
 800e4f0:	d405      	bmi.n	800e4fe <_vfiprintf_r+0x1fe>
 800e4f2:	89ab      	ldrh	r3, [r5, #12]
 800e4f4:	059a      	lsls	r2, r3, #22
 800e4f6:	d402      	bmi.n	800e4fe <_vfiprintf_r+0x1fe>
 800e4f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e4fa:	f7fe fc07 	bl	800cd0c <__retarget_lock_release_recursive>
 800e4fe:	89ab      	ldrh	r3, [r5, #12]
 800e500:	065b      	lsls	r3, r3, #25
 800e502:	f53f af1f 	bmi.w	800e344 <_vfiprintf_r+0x44>
 800e506:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e508:	e71e      	b.n	800e348 <_vfiprintf_r+0x48>
 800e50a:	ab03      	add	r3, sp, #12
 800e50c:	9300      	str	r3, [sp, #0]
 800e50e:	462a      	mov	r2, r5
 800e510:	4b05      	ldr	r3, [pc, #20]	@ (800e528 <_vfiprintf_r+0x228>)
 800e512:	a904      	add	r1, sp, #16
 800e514:	4630      	mov	r0, r6
 800e516:	f7fe f851 	bl	800c5bc <_printf_i>
 800e51a:	e7e4      	b.n	800e4e6 <_vfiprintf_r+0x1e6>
 800e51c:	0800fc20 	.word	0x0800fc20
 800e520:	0800fc2a 	.word	0x0800fc2a
 800e524:	0800c08d 	.word	0x0800c08d
 800e528:	0800e2db 	.word	0x0800e2db
 800e52c:	0800fc26 	.word	0x0800fc26

0800e530 <__sflush_r>:
 800e530:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e538:	0716      	lsls	r6, r2, #28
 800e53a:	4605      	mov	r5, r0
 800e53c:	460c      	mov	r4, r1
 800e53e:	d454      	bmi.n	800e5ea <__sflush_r+0xba>
 800e540:	684b      	ldr	r3, [r1, #4]
 800e542:	2b00      	cmp	r3, #0
 800e544:	dc02      	bgt.n	800e54c <__sflush_r+0x1c>
 800e546:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e548:	2b00      	cmp	r3, #0
 800e54a:	dd48      	ble.n	800e5de <__sflush_r+0xae>
 800e54c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e54e:	2e00      	cmp	r6, #0
 800e550:	d045      	beq.n	800e5de <__sflush_r+0xae>
 800e552:	2300      	movs	r3, #0
 800e554:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e558:	682f      	ldr	r7, [r5, #0]
 800e55a:	6a21      	ldr	r1, [r4, #32]
 800e55c:	602b      	str	r3, [r5, #0]
 800e55e:	d030      	beq.n	800e5c2 <__sflush_r+0x92>
 800e560:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e562:	89a3      	ldrh	r3, [r4, #12]
 800e564:	0759      	lsls	r1, r3, #29
 800e566:	d505      	bpl.n	800e574 <__sflush_r+0x44>
 800e568:	6863      	ldr	r3, [r4, #4]
 800e56a:	1ad2      	subs	r2, r2, r3
 800e56c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e56e:	b10b      	cbz	r3, 800e574 <__sflush_r+0x44>
 800e570:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e572:	1ad2      	subs	r2, r2, r3
 800e574:	2300      	movs	r3, #0
 800e576:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e578:	6a21      	ldr	r1, [r4, #32]
 800e57a:	4628      	mov	r0, r5
 800e57c:	47b0      	blx	r6
 800e57e:	1c43      	adds	r3, r0, #1
 800e580:	89a3      	ldrh	r3, [r4, #12]
 800e582:	d106      	bne.n	800e592 <__sflush_r+0x62>
 800e584:	6829      	ldr	r1, [r5, #0]
 800e586:	291d      	cmp	r1, #29
 800e588:	d82b      	bhi.n	800e5e2 <__sflush_r+0xb2>
 800e58a:	4a2a      	ldr	r2, [pc, #168]	@ (800e634 <__sflush_r+0x104>)
 800e58c:	410a      	asrs	r2, r1
 800e58e:	07d6      	lsls	r6, r2, #31
 800e590:	d427      	bmi.n	800e5e2 <__sflush_r+0xb2>
 800e592:	2200      	movs	r2, #0
 800e594:	6062      	str	r2, [r4, #4]
 800e596:	04d9      	lsls	r1, r3, #19
 800e598:	6922      	ldr	r2, [r4, #16]
 800e59a:	6022      	str	r2, [r4, #0]
 800e59c:	d504      	bpl.n	800e5a8 <__sflush_r+0x78>
 800e59e:	1c42      	adds	r2, r0, #1
 800e5a0:	d101      	bne.n	800e5a6 <__sflush_r+0x76>
 800e5a2:	682b      	ldr	r3, [r5, #0]
 800e5a4:	b903      	cbnz	r3, 800e5a8 <__sflush_r+0x78>
 800e5a6:	6560      	str	r0, [r4, #84]	@ 0x54
 800e5a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e5aa:	602f      	str	r7, [r5, #0]
 800e5ac:	b1b9      	cbz	r1, 800e5de <__sflush_r+0xae>
 800e5ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e5b2:	4299      	cmp	r1, r3
 800e5b4:	d002      	beq.n	800e5bc <__sflush_r+0x8c>
 800e5b6:	4628      	mov	r0, r5
 800e5b8:	f7ff f9f6 	bl	800d9a8 <_free_r>
 800e5bc:	2300      	movs	r3, #0
 800e5be:	6363      	str	r3, [r4, #52]	@ 0x34
 800e5c0:	e00d      	b.n	800e5de <__sflush_r+0xae>
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	4628      	mov	r0, r5
 800e5c6:	47b0      	blx	r6
 800e5c8:	4602      	mov	r2, r0
 800e5ca:	1c50      	adds	r0, r2, #1
 800e5cc:	d1c9      	bne.n	800e562 <__sflush_r+0x32>
 800e5ce:	682b      	ldr	r3, [r5, #0]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d0c6      	beq.n	800e562 <__sflush_r+0x32>
 800e5d4:	2b1d      	cmp	r3, #29
 800e5d6:	d001      	beq.n	800e5dc <__sflush_r+0xac>
 800e5d8:	2b16      	cmp	r3, #22
 800e5da:	d11e      	bne.n	800e61a <__sflush_r+0xea>
 800e5dc:	602f      	str	r7, [r5, #0]
 800e5de:	2000      	movs	r0, #0
 800e5e0:	e022      	b.n	800e628 <__sflush_r+0xf8>
 800e5e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e5e6:	b21b      	sxth	r3, r3
 800e5e8:	e01b      	b.n	800e622 <__sflush_r+0xf2>
 800e5ea:	690f      	ldr	r7, [r1, #16]
 800e5ec:	2f00      	cmp	r7, #0
 800e5ee:	d0f6      	beq.n	800e5de <__sflush_r+0xae>
 800e5f0:	0793      	lsls	r3, r2, #30
 800e5f2:	680e      	ldr	r6, [r1, #0]
 800e5f4:	bf08      	it	eq
 800e5f6:	694b      	ldreq	r3, [r1, #20]
 800e5f8:	600f      	str	r7, [r1, #0]
 800e5fa:	bf18      	it	ne
 800e5fc:	2300      	movne	r3, #0
 800e5fe:	eba6 0807 	sub.w	r8, r6, r7
 800e602:	608b      	str	r3, [r1, #8]
 800e604:	f1b8 0f00 	cmp.w	r8, #0
 800e608:	dde9      	ble.n	800e5de <__sflush_r+0xae>
 800e60a:	6a21      	ldr	r1, [r4, #32]
 800e60c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e60e:	4643      	mov	r3, r8
 800e610:	463a      	mov	r2, r7
 800e612:	4628      	mov	r0, r5
 800e614:	47b0      	blx	r6
 800e616:	2800      	cmp	r0, #0
 800e618:	dc08      	bgt.n	800e62c <__sflush_r+0xfc>
 800e61a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e61e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e622:	81a3      	strh	r3, [r4, #12]
 800e624:	f04f 30ff 	mov.w	r0, #4294967295
 800e628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e62c:	4407      	add	r7, r0
 800e62e:	eba8 0800 	sub.w	r8, r8, r0
 800e632:	e7e7      	b.n	800e604 <__sflush_r+0xd4>
 800e634:	dfbffffe 	.word	0xdfbffffe

0800e638 <_fflush_r>:
 800e638:	b538      	push	{r3, r4, r5, lr}
 800e63a:	690b      	ldr	r3, [r1, #16]
 800e63c:	4605      	mov	r5, r0
 800e63e:	460c      	mov	r4, r1
 800e640:	b913      	cbnz	r3, 800e648 <_fflush_r+0x10>
 800e642:	2500      	movs	r5, #0
 800e644:	4628      	mov	r0, r5
 800e646:	bd38      	pop	{r3, r4, r5, pc}
 800e648:	b118      	cbz	r0, 800e652 <_fflush_r+0x1a>
 800e64a:	6a03      	ldr	r3, [r0, #32]
 800e64c:	b90b      	cbnz	r3, 800e652 <_fflush_r+0x1a>
 800e64e:	f7fe f961 	bl	800c914 <__sinit>
 800e652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d0f3      	beq.n	800e642 <_fflush_r+0xa>
 800e65a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e65c:	07d0      	lsls	r0, r2, #31
 800e65e:	d404      	bmi.n	800e66a <_fflush_r+0x32>
 800e660:	0599      	lsls	r1, r3, #22
 800e662:	d402      	bmi.n	800e66a <_fflush_r+0x32>
 800e664:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e666:	f7fe fb50 	bl	800cd0a <__retarget_lock_acquire_recursive>
 800e66a:	4628      	mov	r0, r5
 800e66c:	4621      	mov	r1, r4
 800e66e:	f7ff ff5f 	bl	800e530 <__sflush_r>
 800e672:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e674:	07da      	lsls	r2, r3, #31
 800e676:	4605      	mov	r5, r0
 800e678:	d4e4      	bmi.n	800e644 <_fflush_r+0xc>
 800e67a:	89a3      	ldrh	r3, [r4, #12]
 800e67c:	059b      	lsls	r3, r3, #22
 800e67e:	d4e1      	bmi.n	800e644 <_fflush_r+0xc>
 800e680:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e682:	f7fe fb43 	bl	800cd0c <__retarget_lock_release_recursive>
 800e686:	e7dd      	b.n	800e644 <_fflush_r+0xc>

0800e688 <__swhatbuf_r>:
 800e688:	b570      	push	{r4, r5, r6, lr}
 800e68a:	460c      	mov	r4, r1
 800e68c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e690:	2900      	cmp	r1, #0
 800e692:	b096      	sub	sp, #88	@ 0x58
 800e694:	4615      	mov	r5, r2
 800e696:	461e      	mov	r6, r3
 800e698:	da0d      	bge.n	800e6b6 <__swhatbuf_r+0x2e>
 800e69a:	89a3      	ldrh	r3, [r4, #12]
 800e69c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e6a0:	f04f 0100 	mov.w	r1, #0
 800e6a4:	bf14      	ite	ne
 800e6a6:	2340      	movne	r3, #64	@ 0x40
 800e6a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e6ac:	2000      	movs	r0, #0
 800e6ae:	6031      	str	r1, [r6, #0]
 800e6b0:	602b      	str	r3, [r5, #0]
 800e6b2:	b016      	add	sp, #88	@ 0x58
 800e6b4:	bd70      	pop	{r4, r5, r6, pc}
 800e6b6:	466a      	mov	r2, sp
 800e6b8:	f000 f848 	bl	800e74c <_fstat_r>
 800e6bc:	2800      	cmp	r0, #0
 800e6be:	dbec      	blt.n	800e69a <__swhatbuf_r+0x12>
 800e6c0:	9901      	ldr	r1, [sp, #4]
 800e6c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e6c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e6ca:	4259      	negs	r1, r3
 800e6cc:	4159      	adcs	r1, r3
 800e6ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e6d2:	e7eb      	b.n	800e6ac <__swhatbuf_r+0x24>

0800e6d4 <__smakebuf_r>:
 800e6d4:	898b      	ldrh	r3, [r1, #12]
 800e6d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e6d8:	079d      	lsls	r5, r3, #30
 800e6da:	4606      	mov	r6, r0
 800e6dc:	460c      	mov	r4, r1
 800e6de:	d507      	bpl.n	800e6f0 <__smakebuf_r+0x1c>
 800e6e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e6e4:	6023      	str	r3, [r4, #0]
 800e6e6:	6123      	str	r3, [r4, #16]
 800e6e8:	2301      	movs	r3, #1
 800e6ea:	6163      	str	r3, [r4, #20]
 800e6ec:	b003      	add	sp, #12
 800e6ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6f0:	ab01      	add	r3, sp, #4
 800e6f2:	466a      	mov	r2, sp
 800e6f4:	f7ff ffc8 	bl	800e688 <__swhatbuf_r>
 800e6f8:	9f00      	ldr	r7, [sp, #0]
 800e6fa:	4605      	mov	r5, r0
 800e6fc:	4639      	mov	r1, r7
 800e6fe:	4630      	mov	r0, r6
 800e700:	f7ff f9c6 	bl	800da90 <_malloc_r>
 800e704:	b948      	cbnz	r0, 800e71a <__smakebuf_r+0x46>
 800e706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e70a:	059a      	lsls	r2, r3, #22
 800e70c:	d4ee      	bmi.n	800e6ec <__smakebuf_r+0x18>
 800e70e:	f023 0303 	bic.w	r3, r3, #3
 800e712:	f043 0302 	orr.w	r3, r3, #2
 800e716:	81a3      	strh	r3, [r4, #12]
 800e718:	e7e2      	b.n	800e6e0 <__smakebuf_r+0xc>
 800e71a:	89a3      	ldrh	r3, [r4, #12]
 800e71c:	6020      	str	r0, [r4, #0]
 800e71e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e722:	81a3      	strh	r3, [r4, #12]
 800e724:	9b01      	ldr	r3, [sp, #4]
 800e726:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e72a:	b15b      	cbz	r3, 800e744 <__smakebuf_r+0x70>
 800e72c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e730:	4630      	mov	r0, r6
 800e732:	f000 f81d 	bl	800e770 <_isatty_r>
 800e736:	b128      	cbz	r0, 800e744 <__smakebuf_r+0x70>
 800e738:	89a3      	ldrh	r3, [r4, #12]
 800e73a:	f023 0303 	bic.w	r3, r3, #3
 800e73e:	f043 0301 	orr.w	r3, r3, #1
 800e742:	81a3      	strh	r3, [r4, #12]
 800e744:	89a3      	ldrh	r3, [r4, #12]
 800e746:	431d      	orrs	r5, r3
 800e748:	81a5      	strh	r5, [r4, #12]
 800e74a:	e7cf      	b.n	800e6ec <__smakebuf_r+0x18>

0800e74c <_fstat_r>:
 800e74c:	b538      	push	{r3, r4, r5, lr}
 800e74e:	4d07      	ldr	r5, [pc, #28]	@ (800e76c <_fstat_r+0x20>)
 800e750:	2300      	movs	r3, #0
 800e752:	4604      	mov	r4, r0
 800e754:	4608      	mov	r0, r1
 800e756:	4611      	mov	r1, r2
 800e758:	602b      	str	r3, [r5, #0]
 800e75a:	f7f7 fbe1 	bl	8005f20 <_fstat>
 800e75e:	1c43      	adds	r3, r0, #1
 800e760:	d102      	bne.n	800e768 <_fstat_r+0x1c>
 800e762:	682b      	ldr	r3, [r5, #0]
 800e764:	b103      	cbz	r3, 800e768 <_fstat_r+0x1c>
 800e766:	6023      	str	r3, [r4, #0]
 800e768:	bd38      	pop	{r3, r4, r5, pc}
 800e76a:	bf00      	nop
 800e76c:	200006c0 	.word	0x200006c0

0800e770 <_isatty_r>:
 800e770:	b538      	push	{r3, r4, r5, lr}
 800e772:	4d06      	ldr	r5, [pc, #24]	@ (800e78c <_isatty_r+0x1c>)
 800e774:	2300      	movs	r3, #0
 800e776:	4604      	mov	r4, r0
 800e778:	4608      	mov	r0, r1
 800e77a:	602b      	str	r3, [r5, #0]
 800e77c:	f7f7 fbe0 	bl	8005f40 <_isatty>
 800e780:	1c43      	adds	r3, r0, #1
 800e782:	d102      	bne.n	800e78a <_isatty_r+0x1a>
 800e784:	682b      	ldr	r3, [r5, #0]
 800e786:	b103      	cbz	r3, 800e78a <_isatty_r+0x1a>
 800e788:	6023      	str	r3, [r4, #0]
 800e78a:	bd38      	pop	{r3, r4, r5, pc}
 800e78c:	200006c0 	.word	0x200006c0

0800e790 <_sbrk_r>:
 800e790:	b538      	push	{r3, r4, r5, lr}
 800e792:	4d06      	ldr	r5, [pc, #24]	@ (800e7ac <_sbrk_r+0x1c>)
 800e794:	2300      	movs	r3, #0
 800e796:	4604      	mov	r4, r0
 800e798:	4608      	mov	r0, r1
 800e79a:	602b      	str	r3, [r5, #0]
 800e79c:	f7f7 fbe8 	bl	8005f70 <_sbrk>
 800e7a0:	1c43      	adds	r3, r0, #1
 800e7a2:	d102      	bne.n	800e7aa <_sbrk_r+0x1a>
 800e7a4:	682b      	ldr	r3, [r5, #0]
 800e7a6:	b103      	cbz	r3, 800e7aa <_sbrk_r+0x1a>
 800e7a8:	6023      	str	r3, [r4, #0]
 800e7aa:	bd38      	pop	{r3, r4, r5, pc}
 800e7ac:	200006c0 	.word	0x200006c0

0800e7b0 <memcpy>:
 800e7b0:	440a      	add	r2, r1
 800e7b2:	4291      	cmp	r1, r2
 800e7b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800e7b8:	d100      	bne.n	800e7bc <memcpy+0xc>
 800e7ba:	4770      	bx	lr
 800e7bc:	b510      	push	{r4, lr}
 800e7be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e7c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e7c6:	4291      	cmp	r1, r2
 800e7c8:	d1f9      	bne.n	800e7be <memcpy+0xe>
 800e7ca:	bd10      	pop	{r4, pc}

0800e7cc <__assert_func>:
 800e7cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e7ce:	4614      	mov	r4, r2
 800e7d0:	461a      	mov	r2, r3
 800e7d2:	4b09      	ldr	r3, [pc, #36]	@ (800e7f8 <__assert_func+0x2c>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	4605      	mov	r5, r0
 800e7d8:	68d8      	ldr	r0, [r3, #12]
 800e7da:	b954      	cbnz	r4, 800e7f2 <__assert_func+0x26>
 800e7dc:	4b07      	ldr	r3, [pc, #28]	@ (800e7fc <__assert_func+0x30>)
 800e7de:	461c      	mov	r4, r3
 800e7e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e7e4:	9100      	str	r1, [sp, #0]
 800e7e6:	462b      	mov	r3, r5
 800e7e8:	4905      	ldr	r1, [pc, #20]	@ (800e800 <__assert_func+0x34>)
 800e7ea:	f000 f841 	bl	800e870 <fiprintf>
 800e7ee:	f000 f851 	bl	800e894 <abort>
 800e7f2:	4b04      	ldr	r3, [pc, #16]	@ (800e804 <__assert_func+0x38>)
 800e7f4:	e7f4      	b.n	800e7e0 <__assert_func+0x14>
 800e7f6:	bf00      	nop
 800e7f8:	2000001c 	.word	0x2000001c
 800e7fc:	0800fc76 	.word	0x0800fc76
 800e800:	0800fc48 	.word	0x0800fc48
 800e804:	0800fc3b 	.word	0x0800fc3b

0800e808 <_calloc_r>:
 800e808:	b570      	push	{r4, r5, r6, lr}
 800e80a:	fba1 5402 	umull	r5, r4, r1, r2
 800e80e:	b93c      	cbnz	r4, 800e820 <_calloc_r+0x18>
 800e810:	4629      	mov	r1, r5
 800e812:	f7ff f93d 	bl	800da90 <_malloc_r>
 800e816:	4606      	mov	r6, r0
 800e818:	b928      	cbnz	r0, 800e826 <_calloc_r+0x1e>
 800e81a:	2600      	movs	r6, #0
 800e81c:	4630      	mov	r0, r6
 800e81e:	bd70      	pop	{r4, r5, r6, pc}
 800e820:	220c      	movs	r2, #12
 800e822:	6002      	str	r2, [r0, #0]
 800e824:	e7f9      	b.n	800e81a <_calloc_r+0x12>
 800e826:	462a      	mov	r2, r5
 800e828:	4621      	mov	r1, r4
 800e82a:	f7fe f9f1 	bl	800cc10 <memset>
 800e82e:	e7f5      	b.n	800e81c <_calloc_r+0x14>

0800e830 <__ascii_mbtowc>:
 800e830:	b082      	sub	sp, #8
 800e832:	b901      	cbnz	r1, 800e836 <__ascii_mbtowc+0x6>
 800e834:	a901      	add	r1, sp, #4
 800e836:	b142      	cbz	r2, 800e84a <__ascii_mbtowc+0x1a>
 800e838:	b14b      	cbz	r3, 800e84e <__ascii_mbtowc+0x1e>
 800e83a:	7813      	ldrb	r3, [r2, #0]
 800e83c:	600b      	str	r3, [r1, #0]
 800e83e:	7812      	ldrb	r2, [r2, #0]
 800e840:	1e10      	subs	r0, r2, #0
 800e842:	bf18      	it	ne
 800e844:	2001      	movne	r0, #1
 800e846:	b002      	add	sp, #8
 800e848:	4770      	bx	lr
 800e84a:	4610      	mov	r0, r2
 800e84c:	e7fb      	b.n	800e846 <__ascii_mbtowc+0x16>
 800e84e:	f06f 0001 	mvn.w	r0, #1
 800e852:	e7f8      	b.n	800e846 <__ascii_mbtowc+0x16>

0800e854 <__ascii_wctomb>:
 800e854:	4603      	mov	r3, r0
 800e856:	4608      	mov	r0, r1
 800e858:	b141      	cbz	r1, 800e86c <__ascii_wctomb+0x18>
 800e85a:	2aff      	cmp	r2, #255	@ 0xff
 800e85c:	d904      	bls.n	800e868 <__ascii_wctomb+0x14>
 800e85e:	228a      	movs	r2, #138	@ 0x8a
 800e860:	601a      	str	r2, [r3, #0]
 800e862:	f04f 30ff 	mov.w	r0, #4294967295
 800e866:	4770      	bx	lr
 800e868:	700a      	strb	r2, [r1, #0]
 800e86a:	2001      	movs	r0, #1
 800e86c:	4770      	bx	lr
	...

0800e870 <fiprintf>:
 800e870:	b40e      	push	{r1, r2, r3}
 800e872:	b503      	push	{r0, r1, lr}
 800e874:	4601      	mov	r1, r0
 800e876:	ab03      	add	r3, sp, #12
 800e878:	4805      	ldr	r0, [pc, #20]	@ (800e890 <fiprintf+0x20>)
 800e87a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e87e:	6800      	ldr	r0, [r0, #0]
 800e880:	9301      	str	r3, [sp, #4]
 800e882:	f7ff fd3d 	bl	800e300 <_vfiprintf_r>
 800e886:	b002      	add	sp, #8
 800e888:	f85d eb04 	ldr.w	lr, [sp], #4
 800e88c:	b003      	add	sp, #12
 800e88e:	4770      	bx	lr
 800e890:	2000001c 	.word	0x2000001c

0800e894 <abort>:
 800e894:	b508      	push	{r3, lr}
 800e896:	2006      	movs	r0, #6
 800e898:	f000 f82c 	bl	800e8f4 <raise>
 800e89c:	2001      	movs	r0, #1
 800e89e:	f7f7 fb0b 	bl	8005eb8 <_exit>

0800e8a2 <_raise_r>:
 800e8a2:	291f      	cmp	r1, #31
 800e8a4:	b538      	push	{r3, r4, r5, lr}
 800e8a6:	4605      	mov	r5, r0
 800e8a8:	460c      	mov	r4, r1
 800e8aa:	d904      	bls.n	800e8b6 <_raise_r+0x14>
 800e8ac:	2316      	movs	r3, #22
 800e8ae:	6003      	str	r3, [r0, #0]
 800e8b0:	f04f 30ff 	mov.w	r0, #4294967295
 800e8b4:	bd38      	pop	{r3, r4, r5, pc}
 800e8b6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e8b8:	b112      	cbz	r2, 800e8c0 <_raise_r+0x1e>
 800e8ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e8be:	b94b      	cbnz	r3, 800e8d4 <_raise_r+0x32>
 800e8c0:	4628      	mov	r0, r5
 800e8c2:	f000 f831 	bl	800e928 <_getpid_r>
 800e8c6:	4622      	mov	r2, r4
 800e8c8:	4601      	mov	r1, r0
 800e8ca:	4628      	mov	r0, r5
 800e8cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8d0:	f000 b818 	b.w	800e904 <_kill_r>
 800e8d4:	2b01      	cmp	r3, #1
 800e8d6:	d00a      	beq.n	800e8ee <_raise_r+0x4c>
 800e8d8:	1c59      	adds	r1, r3, #1
 800e8da:	d103      	bne.n	800e8e4 <_raise_r+0x42>
 800e8dc:	2316      	movs	r3, #22
 800e8de:	6003      	str	r3, [r0, #0]
 800e8e0:	2001      	movs	r0, #1
 800e8e2:	e7e7      	b.n	800e8b4 <_raise_r+0x12>
 800e8e4:	2100      	movs	r1, #0
 800e8e6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e8ea:	4620      	mov	r0, r4
 800e8ec:	4798      	blx	r3
 800e8ee:	2000      	movs	r0, #0
 800e8f0:	e7e0      	b.n	800e8b4 <_raise_r+0x12>
	...

0800e8f4 <raise>:
 800e8f4:	4b02      	ldr	r3, [pc, #8]	@ (800e900 <raise+0xc>)
 800e8f6:	4601      	mov	r1, r0
 800e8f8:	6818      	ldr	r0, [r3, #0]
 800e8fa:	f7ff bfd2 	b.w	800e8a2 <_raise_r>
 800e8fe:	bf00      	nop
 800e900:	2000001c 	.word	0x2000001c

0800e904 <_kill_r>:
 800e904:	b538      	push	{r3, r4, r5, lr}
 800e906:	4d07      	ldr	r5, [pc, #28]	@ (800e924 <_kill_r+0x20>)
 800e908:	2300      	movs	r3, #0
 800e90a:	4604      	mov	r4, r0
 800e90c:	4608      	mov	r0, r1
 800e90e:	4611      	mov	r1, r2
 800e910:	602b      	str	r3, [r5, #0]
 800e912:	f7f7 fac1 	bl	8005e98 <_kill>
 800e916:	1c43      	adds	r3, r0, #1
 800e918:	d102      	bne.n	800e920 <_kill_r+0x1c>
 800e91a:	682b      	ldr	r3, [r5, #0]
 800e91c:	b103      	cbz	r3, 800e920 <_kill_r+0x1c>
 800e91e:	6023      	str	r3, [r4, #0]
 800e920:	bd38      	pop	{r3, r4, r5, pc}
 800e922:	bf00      	nop
 800e924:	200006c0 	.word	0x200006c0

0800e928 <_getpid_r>:
 800e928:	f7f7 baae 	b.w	8005e88 <_getpid>

0800e92c <asinf>:
 800e92c:	b508      	push	{r3, lr}
 800e92e:	ed2d 8b02 	vpush	{d8}
 800e932:	eeb0 8a40 	vmov.f32	s16, s0
 800e936:	f000 f895 	bl	800ea64 <__ieee754_asinf>
 800e93a:	eeb4 8a48 	vcmp.f32	s16, s16
 800e93e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e942:	eef0 8a40 	vmov.f32	s17, s0
 800e946:	d615      	bvs.n	800e974 <asinf+0x48>
 800e948:	eeb0 0a48 	vmov.f32	s0, s16
 800e94c:	f000 f873 	bl	800ea36 <fabsf>
 800e950:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e954:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e95c:	dd0a      	ble.n	800e974 <asinf+0x48>
 800e95e:	f7fe f9a9 	bl	800ccb4 <__errno>
 800e962:	ecbd 8b02 	vpop	{d8}
 800e966:	2321      	movs	r3, #33	@ 0x21
 800e968:	6003      	str	r3, [r0, #0]
 800e96a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e96e:	4804      	ldr	r0, [pc, #16]	@ (800e980 <asinf+0x54>)
 800e970:	f000 b872 	b.w	800ea58 <nanf>
 800e974:	eeb0 0a68 	vmov.f32	s0, s17
 800e978:	ecbd 8b02 	vpop	{d8}
 800e97c:	bd08      	pop	{r3, pc}
 800e97e:	bf00      	nop
 800e980:	0800fc76 	.word	0x0800fc76

0800e984 <atan2f>:
 800e984:	f000 b954 	b.w	800ec30 <__ieee754_atan2f>

0800e988 <powf>:
 800e988:	b508      	push	{r3, lr}
 800e98a:	ed2d 8b04 	vpush	{d8-d9}
 800e98e:	eeb0 8a60 	vmov.f32	s16, s1
 800e992:	eeb0 9a40 	vmov.f32	s18, s0
 800e996:	f000 f9eb 	bl	800ed70 <__ieee754_powf>
 800e99a:	eeb4 8a48 	vcmp.f32	s16, s16
 800e99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9a2:	eef0 8a40 	vmov.f32	s17, s0
 800e9a6:	d63e      	bvs.n	800ea26 <powf+0x9e>
 800e9a8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800e9ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9b0:	d112      	bne.n	800e9d8 <powf+0x50>
 800e9b2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9ba:	d039      	beq.n	800ea30 <powf+0xa8>
 800e9bc:	eeb0 0a48 	vmov.f32	s0, s16
 800e9c0:	f000 f840 	bl	800ea44 <finitef>
 800e9c4:	b378      	cbz	r0, 800ea26 <powf+0x9e>
 800e9c6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e9ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9ce:	d52a      	bpl.n	800ea26 <powf+0x9e>
 800e9d0:	f7fe f970 	bl	800ccb4 <__errno>
 800e9d4:	2322      	movs	r3, #34	@ 0x22
 800e9d6:	e014      	b.n	800ea02 <powf+0x7a>
 800e9d8:	f000 f834 	bl	800ea44 <finitef>
 800e9dc:	b998      	cbnz	r0, 800ea06 <powf+0x7e>
 800e9de:	eeb0 0a49 	vmov.f32	s0, s18
 800e9e2:	f000 f82f 	bl	800ea44 <finitef>
 800e9e6:	b170      	cbz	r0, 800ea06 <powf+0x7e>
 800e9e8:	eeb0 0a48 	vmov.f32	s0, s16
 800e9ec:	f000 f82a 	bl	800ea44 <finitef>
 800e9f0:	b148      	cbz	r0, 800ea06 <powf+0x7e>
 800e9f2:	eef4 8a68 	vcmp.f32	s17, s17
 800e9f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9fa:	d7e9      	bvc.n	800e9d0 <powf+0x48>
 800e9fc:	f7fe f95a 	bl	800ccb4 <__errno>
 800ea00:	2321      	movs	r3, #33	@ 0x21
 800ea02:	6003      	str	r3, [r0, #0]
 800ea04:	e00f      	b.n	800ea26 <powf+0x9e>
 800ea06:	eef5 8a40 	vcmp.f32	s17, #0.0
 800ea0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea0e:	d10a      	bne.n	800ea26 <powf+0x9e>
 800ea10:	eeb0 0a49 	vmov.f32	s0, s18
 800ea14:	f000 f816 	bl	800ea44 <finitef>
 800ea18:	b128      	cbz	r0, 800ea26 <powf+0x9e>
 800ea1a:	eeb0 0a48 	vmov.f32	s0, s16
 800ea1e:	f000 f811 	bl	800ea44 <finitef>
 800ea22:	2800      	cmp	r0, #0
 800ea24:	d1d4      	bne.n	800e9d0 <powf+0x48>
 800ea26:	eeb0 0a68 	vmov.f32	s0, s17
 800ea2a:	ecbd 8b04 	vpop	{d8-d9}
 800ea2e:	bd08      	pop	{r3, pc}
 800ea30:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800ea34:	e7f7      	b.n	800ea26 <powf+0x9e>

0800ea36 <fabsf>:
 800ea36:	ee10 3a10 	vmov	r3, s0
 800ea3a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ea3e:	ee00 3a10 	vmov	s0, r3
 800ea42:	4770      	bx	lr

0800ea44 <finitef>:
 800ea44:	ee10 3a10 	vmov	r3, s0
 800ea48:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800ea4c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800ea50:	bfac      	ite	ge
 800ea52:	2000      	movge	r0, #0
 800ea54:	2001      	movlt	r0, #1
 800ea56:	4770      	bx	lr

0800ea58 <nanf>:
 800ea58:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ea60 <nanf+0x8>
 800ea5c:	4770      	bx	lr
 800ea5e:	bf00      	nop
 800ea60:	7fc00000 	.word	0x7fc00000

0800ea64 <__ieee754_asinf>:
 800ea64:	b538      	push	{r3, r4, r5, lr}
 800ea66:	ee10 5a10 	vmov	r5, s0
 800ea6a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800ea6e:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 800ea72:	ed2d 8b04 	vpush	{d8-d9}
 800ea76:	d10c      	bne.n	800ea92 <__ieee754_asinf+0x2e>
 800ea78:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 800ebf0 <__ieee754_asinf+0x18c>
 800ea7c:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 800ebf4 <__ieee754_asinf+0x190>
 800ea80:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ea84:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ea88:	eeb0 0a67 	vmov.f32	s0, s15
 800ea8c:	ecbd 8b04 	vpop	{d8-d9}
 800ea90:	bd38      	pop	{r3, r4, r5, pc}
 800ea92:	d904      	bls.n	800ea9e <__ieee754_asinf+0x3a>
 800ea94:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ea98:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800ea9c:	e7f6      	b.n	800ea8c <__ieee754_asinf+0x28>
 800ea9e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800eaa2:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800eaa6:	d20b      	bcs.n	800eac0 <__ieee754_asinf+0x5c>
 800eaa8:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 800eaac:	d252      	bcs.n	800eb54 <__ieee754_asinf+0xf0>
 800eaae:	eddf 7a52 	vldr	s15, [pc, #328]	@ 800ebf8 <__ieee754_asinf+0x194>
 800eab2:	ee70 7a27 	vadd.f32	s15, s0, s15
 800eab6:	eef4 7ae8 	vcmpe.f32	s15, s17
 800eaba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eabe:	dce5      	bgt.n	800ea8c <__ieee754_asinf+0x28>
 800eac0:	f7ff ffb9 	bl	800ea36 <fabsf>
 800eac4:	ee38 8ac0 	vsub.f32	s16, s17, s0
 800eac8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800eacc:	ee28 8a27 	vmul.f32	s16, s16, s15
 800ead0:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800ebfc <__ieee754_asinf+0x198>
 800ead4:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 800ec00 <__ieee754_asinf+0x19c>
 800ead8:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 800ec04 <__ieee754_asinf+0x1a0>
 800eadc:	eea8 7a27 	vfma.f32	s14, s16, s15
 800eae0:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800ec08 <__ieee754_asinf+0x1a4>
 800eae4:	eee7 7a08 	vfma.f32	s15, s14, s16
 800eae8:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800ec0c <__ieee754_asinf+0x1a8>
 800eaec:	eea7 7a88 	vfma.f32	s14, s15, s16
 800eaf0:	eddf 7a47 	vldr	s15, [pc, #284]	@ 800ec10 <__ieee754_asinf+0x1ac>
 800eaf4:	eee7 7a08 	vfma.f32	s15, s14, s16
 800eaf8:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800ec14 <__ieee754_asinf+0x1b0>
 800eafc:	eea7 9a88 	vfma.f32	s18, s15, s16
 800eb00:	eddf 7a45 	vldr	s15, [pc, #276]	@ 800ec18 <__ieee754_asinf+0x1b4>
 800eb04:	eee8 7a07 	vfma.f32	s15, s16, s14
 800eb08:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800ec1c <__ieee754_asinf+0x1b8>
 800eb0c:	eea7 7a88 	vfma.f32	s14, s15, s16
 800eb10:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800ec20 <__ieee754_asinf+0x1bc>
 800eb14:	eee7 7a08 	vfma.f32	s15, s14, s16
 800eb18:	eeb0 0a48 	vmov.f32	s0, s16
 800eb1c:	eee7 8a88 	vfma.f32	s17, s15, s16
 800eb20:	f000 fd56 	bl	800f5d0 <__ieee754_sqrtf>
 800eb24:	4b3f      	ldr	r3, [pc, #252]	@ (800ec24 <__ieee754_asinf+0x1c0>)
 800eb26:	ee29 9a08 	vmul.f32	s18, s18, s16
 800eb2a:	429c      	cmp	r4, r3
 800eb2c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800eb30:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800eb34:	d93d      	bls.n	800ebb2 <__ieee754_asinf+0x14e>
 800eb36:	eea0 0a06 	vfma.f32	s0, s0, s12
 800eb3a:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 800ec28 <__ieee754_asinf+0x1c4>
 800eb3e:	eee0 7a26 	vfma.f32	s15, s0, s13
 800eb42:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 800ebf4 <__ieee754_asinf+0x190>
 800eb46:	ee30 0a67 	vsub.f32	s0, s0, s15
 800eb4a:	2d00      	cmp	r5, #0
 800eb4c:	bfd8      	it	le
 800eb4e:	eeb1 0a40 	vnegle.f32	s0, s0
 800eb52:	e79b      	b.n	800ea8c <__ieee754_asinf+0x28>
 800eb54:	ee60 7a00 	vmul.f32	s15, s0, s0
 800eb58:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800ec00 <__ieee754_asinf+0x19c>
 800eb5c:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800ebfc <__ieee754_asinf+0x198>
 800eb60:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 800ec14 <__ieee754_asinf+0x1b0>
 800eb64:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800eb68:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800ec08 <__ieee754_asinf+0x1a4>
 800eb6c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800eb70:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800ec0c <__ieee754_asinf+0x1a8>
 800eb74:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800eb78:	eddf 6a25 	vldr	s13, [pc, #148]	@ 800ec10 <__ieee754_asinf+0x1ac>
 800eb7c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800eb80:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800ec04 <__ieee754_asinf+0x1a0>
 800eb84:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800eb88:	eddf 6a23 	vldr	s13, [pc, #140]	@ 800ec18 <__ieee754_asinf+0x1b4>
 800eb8c:	eee7 6a86 	vfma.f32	s13, s15, s12
 800eb90:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800ec1c <__ieee754_asinf+0x1b8>
 800eb94:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800eb98:	eddf 6a21 	vldr	s13, [pc, #132]	@ 800ec20 <__ieee754_asinf+0x1bc>
 800eb9c:	eee6 6a27 	vfma.f32	s13, s12, s15
 800eba0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eba4:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800eba8:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800ebac:	eea0 0a27 	vfma.f32	s0, s0, s15
 800ebb0:	e76c      	b.n	800ea8c <__ieee754_asinf+0x28>
 800ebb2:	ee10 3a10 	vmov	r3, s0
 800ebb6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800ebba:	f023 030f 	bic.w	r3, r3, #15
 800ebbe:	ee07 3a10 	vmov	s14, r3
 800ebc2:	eea7 8a47 	vfms.f32	s16, s14, s14
 800ebc6:	ee70 5a00 	vadd.f32	s11, s0, s0
 800ebca:	ee30 0a07 	vadd.f32	s0, s0, s14
 800ebce:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800ebf0 <__ieee754_asinf+0x18c>
 800ebd2:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800ebd6:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800ec2c <__ieee754_asinf+0x1c8>
 800ebda:	eee5 7a66 	vfms.f32	s15, s10, s13
 800ebde:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800ebe2:	eeb0 6a40 	vmov.f32	s12, s0
 800ebe6:	eea7 6a66 	vfms.f32	s12, s14, s13
 800ebea:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ebee:	e7aa      	b.n	800eb46 <__ieee754_asinf+0xe2>
 800ebf0:	b33bbd2e 	.word	0xb33bbd2e
 800ebf4:	3fc90fdb 	.word	0x3fc90fdb
 800ebf8:	7149f2ca 	.word	0x7149f2ca
 800ebfc:	3a4f7f04 	.word	0x3a4f7f04
 800ec00:	3811ef08 	.word	0x3811ef08
 800ec04:	3e2aaaab 	.word	0x3e2aaaab
 800ec08:	bd241146 	.word	0xbd241146
 800ec0c:	3e4e0aa8 	.word	0x3e4e0aa8
 800ec10:	bea6b090 	.word	0xbea6b090
 800ec14:	3d9dc62e 	.word	0x3d9dc62e
 800ec18:	bf303361 	.word	0xbf303361
 800ec1c:	4001572d 	.word	0x4001572d
 800ec20:	c019d139 	.word	0xc019d139
 800ec24:	3f799999 	.word	0x3f799999
 800ec28:	333bbd2e 	.word	0x333bbd2e
 800ec2c:	3f490fdb 	.word	0x3f490fdb

0800ec30 <__ieee754_atan2f>:
 800ec30:	ee10 2a90 	vmov	r2, s1
 800ec34:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800ec38:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800ec3c:	b510      	push	{r4, lr}
 800ec3e:	eef0 7a40 	vmov.f32	s15, s0
 800ec42:	d806      	bhi.n	800ec52 <__ieee754_atan2f+0x22>
 800ec44:	ee10 0a10 	vmov	r0, s0
 800ec48:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800ec4c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ec50:	d904      	bls.n	800ec5c <__ieee754_atan2f+0x2c>
 800ec52:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800ec56:	eeb0 0a67 	vmov.f32	s0, s15
 800ec5a:	bd10      	pop	{r4, pc}
 800ec5c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800ec60:	d103      	bne.n	800ec6a <__ieee754_atan2f+0x3a>
 800ec62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec66:	f000 bb53 	b.w	800f310 <atanf>
 800ec6a:	1794      	asrs	r4, r2, #30
 800ec6c:	f004 0402 	and.w	r4, r4, #2
 800ec70:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800ec74:	b943      	cbnz	r3, 800ec88 <__ieee754_atan2f+0x58>
 800ec76:	2c02      	cmp	r4, #2
 800ec78:	d05e      	beq.n	800ed38 <__ieee754_atan2f+0x108>
 800ec7a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800ed4c <__ieee754_atan2f+0x11c>
 800ec7e:	2c03      	cmp	r4, #3
 800ec80:	bf08      	it	eq
 800ec82:	eef0 7a47 	vmoveq.f32	s15, s14
 800ec86:	e7e6      	b.n	800ec56 <__ieee754_atan2f+0x26>
 800ec88:	b941      	cbnz	r1, 800ec9c <__ieee754_atan2f+0x6c>
 800ec8a:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800ed50 <__ieee754_atan2f+0x120>
 800ec8e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800ed54 <__ieee754_atan2f+0x124>
 800ec92:	2800      	cmp	r0, #0
 800ec94:	bfb8      	it	lt
 800ec96:	eef0 7a47 	vmovlt.f32	s15, s14
 800ec9a:	e7dc      	b.n	800ec56 <__ieee754_atan2f+0x26>
 800ec9c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800eca0:	d110      	bne.n	800ecc4 <__ieee754_atan2f+0x94>
 800eca2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800eca6:	f104 34ff 	add.w	r4, r4, #4294967295
 800ecaa:	d107      	bne.n	800ecbc <__ieee754_atan2f+0x8c>
 800ecac:	2c02      	cmp	r4, #2
 800ecae:	d846      	bhi.n	800ed3e <__ieee754_atan2f+0x10e>
 800ecb0:	4b29      	ldr	r3, [pc, #164]	@ (800ed58 <__ieee754_atan2f+0x128>)
 800ecb2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ecb6:	edd3 7a00 	vldr	s15, [r3]
 800ecba:	e7cc      	b.n	800ec56 <__ieee754_atan2f+0x26>
 800ecbc:	2c02      	cmp	r4, #2
 800ecbe:	d841      	bhi.n	800ed44 <__ieee754_atan2f+0x114>
 800ecc0:	4b26      	ldr	r3, [pc, #152]	@ (800ed5c <__ieee754_atan2f+0x12c>)
 800ecc2:	e7f6      	b.n	800ecb2 <__ieee754_atan2f+0x82>
 800ecc4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ecc8:	d0df      	beq.n	800ec8a <__ieee754_atan2f+0x5a>
 800ecca:	1a5b      	subs	r3, r3, r1
 800eccc:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800ecd0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800ecd4:	da1a      	bge.n	800ed0c <__ieee754_atan2f+0xdc>
 800ecd6:	2a00      	cmp	r2, #0
 800ecd8:	da01      	bge.n	800ecde <__ieee754_atan2f+0xae>
 800ecda:	313c      	adds	r1, #60	@ 0x3c
 800ecdc:	db19      	blt.n	800ed12 <__ieee754_atan2f+0xe2>
 800ecde:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800ece2:	f7ff fea8 	bl	800ea36 <fabsf>
 800ece6:	f000 fb13 	bl	800f310 <atanf>
 800ecea:	eef0 7a40 	vmov.f32	s15, s0
 800ecee:	2c01      	cmp	r4, #1
 800ecf0:	d012      	beq.n	800ed18 <__ieee754_atan2f+0xe8>
 800ecf2:	2c02      	cmp	r4, #2
 800ecf4:	d017      	beq.n	800ed26 <__ieee754_atan2f+0xf6>
 800ecf6:	2c00      	cmp	r4, #0
 800ecf8:	d0ad      	beq.n	800ec56 <__ieee754_atan2f+0x26>
 800ecfa:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800ed60 <__ieee754_atan2f+0x130>
 800ecfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ed02:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800ed64 <__ieee754_atan2f+0x134>
 800ed06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ed0a:	e7a4      	b.n	800ec56 <__ieee754_atan2f+0x26>
 800ed0c:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800ed50 <__ieee754_atan2f+0x120>
 800ed10:	e7ed      	b.n	800ecee <__ieee754_atan2f+0xbe>
 800ed12:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800ed68 <__ieee754_atan2f+0x138>
 800ed16:	e7ea      	b.n	800ecee <__ieee754_atan2f+0xbe>
 800ed18:	ee17 3a90 	vmov	r3, s15
 800ed1c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ed20:	ee07 3a90 	vmov	s15, r3
 800ed24:	e797      	b.n	800ec56 <__ieee754_atan2f+0x26>
 800ed26:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800ed60 <__ieee754_atan2f+0x130>
 800ed2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ed2e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800ed64 <__ieee754_atan2f+0x134>
 800ed32:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ed36:	e78e      	b.n	800ec56 <__ieee754_atan2f+0x26>
 800ed38:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800ed64 <__ieee754_atan2f+0x134>
 800ed3c:	e78b      	b.n	800ec56 <__ieee754_atan2f+0x26>
 800ed3e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800ed6c <__ieee754_atan2f+0x13c>
 800ed42:	e788      	b.n	800ec56 <__ieee754_atan2f+0x26>
 800ed44:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800ed68 <__ieee754_atan2f+0x138>
 800ed48:	e785      	b.n	800ec56 <__ieee754_atan2f+0x26>
 800ed4a:	bf00      	nop
 800ed4c:	c0490fdb 	.word	0xc0490fdb
 800ed50:	3fc90fdb 	.word	0x3fc90fdb
 800ed54:	bfc90fdb 	.word	0xbfc90fdb
 800ed58:	0800fd84 	.word	0x0800fd84
 800ed5c:	0800fd78 	.word	0x0800fd78
 800ed60:	33bbbd2e 	.word	0x33bbbd2e
 800ed64:	40490fdb 	.word	0x40490fdb
 800ed68:	00000000 	.word	0x00000000
 800ed6c:	3f490fdb 	.word	0x3f490fdb

0800ed70 <__ieee754_powf>:
 800ed70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed74:	ee10 4a90 	vmov	r4, s1
 800ed78:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800ed7c:	ed2d 8b02 	vpush	{d8}
 800ed80:	ee10 6a10 	vmov	r6, s0
 800ed84:	eeb0 8a40 	vmov.f32	s16, s0
 800ed88:	eef0 8a60 	vmov.f32	s17, s1
 800ed8c:	d10c      	bne.n	800eda8 <__ieee754_powf+0x38>
 800ed8e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800ed92:	0076      	lsls	r6, r6, #1
 800ed94:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800ed98:	f240 829c 	bls.w	800f2d4 <__ieee754_powf+0x564>
 800ed9c:	ee38 0a28 	vadd.f32	s0, s16, s17
 800eda0:	ecbd 8b02 	vpop	{d8}
 800eda4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eda8:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800edac:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800edb0:	d802      	bhi.n	800edb8 <__ieee754_powf+0x48>
 800edb2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800edb6:	d908      	bls.n	800edca <__ieee754_powf+0x5a>
 800edb8:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800edbc:	d1ee      	bne.n	800ed9c <__ieee754_powf+0x2c>
 800edbe:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800edc2:	0064      	lsls	r4, r4, #1
 800edc4:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800edc8:	e7e6      	b.n	800ed98 <__ieee754_powf+0x28>
 800edca:	2e00      	cmp	r6, #0
 800edcc:	da1e      	bge.n	800ee0c <__ieee754_powf+0x9c>
 800edce:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800edd2:	d22b      	bcs.n	800ee2c <__ieee754_powf+0xbc>
 800edd4:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800edd8:	d332      	bcc.n	800ee40 <__ieee754_powf+0xd0>
 800edda:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800edde:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800ede2:	fa49 f503 	asr.w	r5, r9, r3
 800ede6:	fa05 f303 	lsl.w	r3, r5, r3
 800edea:	454b      	cmp	r3, r9
 800edec:	d126      	bne.n	800ee3c <__ieee754_powf+0xcc>
 800edee:	f005 0501 	and.w	r5, r5, #1
 800edf2:	f1c5 0502 	rsb	r5, r5, #2
 800edf6:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800edfa:	d122      	bne.n	800ee42 <__ieee754_powf+0xd2>
 800edfc:	2c00      	cmp	r4, #0
 800edfe:	f280 826f 	bge.w	800f2e0 <__ieee754_powf+0x570>
 800ee02:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ee06:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800ee0a:	e7c9      	b.n	800eda0 <__ieee754_powf+0x30>
 800ee0c:	2500      	movs	r5, #0
 800ee0e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800ee12:	d1f0      	bne.n	800edf6 <__ieee754_powf+0x86>
 800ee14:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800ee18:	f000 825c 	beq.w	800f2d4 <__ieee754_powf+0x564>
 800ee1c:	d908      	bls.n	800ee30 <__ieee754_powf+0xc0>
 800ee1e:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800f180 <__ieee754_powf+0x410>
 800ee22:	2c00      	cmp	r4, #0
 800ee24:	bfa8      	it	ge
 800ee26:	eeb0 0a68 	vmovge.f32	s0, s17
 800ee2a:	e7b9      	b.n	800eda0 <__ieee754_powf+0x30>
 800ee2c:	2502      	movs	r5, #2
 800ee2e:	e7ee      	b.n	800ee0e <__ieee754_powf+0x9e>
 800ee30:	2c00      	cmp	r4, #0
 800ee32:	f280 8252 	bge.w	800f2da <__ieee754_powf+0x56a>
 800ee36:	eeb1 0a68 	vneg.f32	s0, s17
 800ee3a:	e7b1      	b.n	800eda0 <__ieee754_powf+0x30>
 800ee3c:	2500      	movs	r5, #0
 800ee3e:	e7da      	b.n	800edf6 <__ieee754_powf+0x86>
 800ee40:	2500      	movs	r5, #0
 800ee42:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800ee46:	d102      	bne.n	800ee4e <__ieee754_powf+0xde>
 800ee48:	ee28 0a08 	vmul.f32	s0, s16, s16
 800ee4c:	e7a8      	b.n	800eda0 <__ieee754_powf+0x30>
 800ee4e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800ee52:	d109      	bne.n	800ee68 <__ieee754_powf+0xf8>
 800ee54:	2e00      	cmp	r6, #0
 800ee56:	db07      	blt.n	800ee68 <__ieee754_powf+0xf8>
 800ee58:	eeb0 0a48 	vmov.f32	s0, s16
 800ee5c:	ecbd 8b02 	vpop	{d8}
 800ee60:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee64:	f000 bbb4 	b.w	800f5d0 <__ieee754_sqrtf>
 800ee68:	eeb0 0a48 	vmov.f32	s0, s16
 800ee6c:	f7ff fde3 	bl	800ea36 <fabsf>
 800ee70:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800ee74:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800ee78:	4647      	mov	r7, r8
 800ee7a:	d002      	beq.n	800ee82 <__ieee754_powf+0x112>
 800ee7c:	f1b8 0f00 	cmp.w	r8, #0
 800ee80:	d117      	bne.n	800eeb2 <__ieee754_powf+0x142>
 800ee82:	2c00      	cmp	r4, #0
 800ee84:	bfbc      	itt	lt
 800ee86:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800ee8a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800ee8e:	2e00      	cmp	r6, #0
 800ee90:	da86      	bge.n	800eda0 <__ieee754_powf+0x30>
 800ee92:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800ee96:	ea58 0805 	orrs.w	r8, r8, r5
 800ee9a:	d104      	bne.n	800eea6 <__ieee754_powf+0x136>
 800ee9c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800eea0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800eea4:	e77c      	b.n	800eda0 <__ieee754_powf+0x30>
 800eea6:	2d01      	cmp	r5, #1
 800eea8:	f47f af7a 	bne.w	800eda0 <__ieee754_powf+0x30>
 800eeac:	eeb1 0a40 	vneg.f32	s0, s0
 800eeb0:	e776      	b.n	800eda0 <__ieee754_powf+0x30>
 800eeb2:	0ff0      	lsrs	r0, r6, #31
 800eeb4:	3801      	subs	r0, #1
 800eeb6:	ea55 0300 	orrs.w	r3, r5, r0
 800eeba:	d104      	bne.n	800eec6 <__ieee754_powf+0x156>
 800eebc:	ee38 8a48 	vsub.f32	s16, s16, s16
 800eec0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800eec4:	e76c      	b.n	800eda0 <__ieee754_powf+0x30>
 800eec6:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800eeca:	d973      	bls.n	800efb4 <__ieee754_powf+0x244>
 800eecc:	4bad      	ldr	r3, [pc, #692]	@ (800f184 <__ieee754_powf+0x414>)
 800eece:	4598      	cmp	r8, r3
 800eed0:	d808      	bhi.n	800eee4 <__ieee754_powf+0x174>
 800eed2:	2c00      	cmp	r4, #0
 800eed4:	da0b      	bge.n	800eeee <__ieee754_powf+0x17e>
 800eed6:	2000      	movs	r0, #0
 800eed8:	ecbd 8b02 	vpop	{d8}
 800eedc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eee0:	f000 bb70 	b.w	800f5c4 <__math_oflowf>
 800eee4:	4ba8      	ldr	r3, [pc, #672]	@ (800f188 <__ieee754_powf+0x418>)
 800eee6:	4598      	cmp	r8, r3
 800eee8:	d908      	bls.n	800eefc <__ieee754_powf+0x18c>
 800eeea:	2c00      	cmp	r4, #0
 800eeec:	dcf3      	bgt.n	800eed6 <__ieee754_powf+0x166>
 800eeee:	2000      	movs	r0, #0
 800eef0:	ecbd 8b02 	vpop	{d8}
 800eef4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eef8:	f000 bb5e 	b.w	800f5b8 <__math_uflowf>
 800eefc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ef00:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ef04:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800f18c <__ieee754_powf+0x41c>
 800ef08:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800ef0c:	eee0 6a67 	vfms.f32	s13, s0, s15
 800ef10:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ef14:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800ef18:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ef1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ef20:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800f190 <__ieee754_powf+0x420>
 800ef24:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800ef28:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800f194 <__ieee754_powf+0x424>
 800ef2c:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ef30:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800f198 <__ieee754_powf+0x428>
 800ef34:	eef0 6a67 	vmov.f32	s13, s15
 800ef38:	eee0 6a07 	vfma.f32	s13, s0, s14
 800ef3c:	ee16 3a90 	vmov	r3, s13
 800ef40:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800ef44:	f023 030f 	bic.w	r3, r3, #15
 800ef48:	ee06 3a90 	vmov	s13, r3
 800ef4c:	eee0 6a47 	vfms.f32	s13, s0, s14
 800ef50:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ef54:	3d01      	subs	r5, #1
 800ef56:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800ef5a:	4305      	orrs	r5, r0
 800ef5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ef60:	f024 040f 	bic.w	r4, r4, #15
 800ef64:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800ef68:	bf18      	it	ne
 800ef6a:	eeb0 8a47 	vmovne.f32	s16, s14
 800ef6e:	ee07 4a10 	vmov	s14, r4
 800ef72:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800ef76:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800ef7a:	ee07 3a90 	vmov	s15, r3
 800ef7e:	eee7 0a27 	vfma.f32	s1, s14, s15
 800ef82:	ee07 4a10 	vmov	s14, r4
 800ef86:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ef8a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800ef8e:	ee17 1a10 	vmov	r1, s14
 800ef92:	2900      	cmp	r1, #0
 800ef94:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ef98:	f340 80dd 	ble.w	800f156 <__ieee754_powf+0x3e6>
 800ef9c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800efa0:	f240 80ca 	bls.w	800f138 <__ieee754_powf+0x3c8>
 800efa4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800efa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efac:	bf4c      	ite	mi
 800efae:	2001      	movmi	r0, #1
 800efb0:	2000      	movpl	r0, #0
 800efb2:	e791      	b.n	800eed8 <__ieee754_powf+0x168>
 800efb4:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800efb8:	bf01      	itttt	eq
 800efba:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800f19c <__ieee754_powf+0x42c>
 800efbe:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800efc2:	f06f 0317 	mvneq.w	r3, #23
 800efc6:	ee17 7a90 	vmoveq	r7, s15
 800efca:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800efce:	bf18      	it	ne
 800efd0:	2300      	movne	r3, #0
 800efd2:	3a7f      	subs	r2, #127	@ 0x7f
 800efd4:	441a      	add	r2, r3
 800efd6:	4b72      	ldr	r3, [pc, #456]	@ (800f1a0 <__ieee754_powf+0x430>)
 800efd8:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800efdc:	429f      	cmp	r7, r3
 800efde:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800efe2:	dd06      	ble.n	800eff2 <__ieee754_powf+0x282>
 800efe4:	4b6f      	ldr	r3, [pc, #444]	@ (800f1a4 <__ieee754_powf+0x434>)
 800efe6:	429f      	cmp	r7, r3
 800efe8:	f340 80a4 	ble.w	800f134 <__ieee754_powf+0x3c4>
 800efec:	3201      	adds	r2, #1
 800efee:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800eff2:	2600      	movs	r6, #0
 800eff4:	4b6c      	ldr	r3, [pc, #432]	@ (800f1a8 <__ieee754_powf+0x438>)
 800eff6:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800effa:	ee07 1a10 	vmov	s14, r1
 800effe:	edd3 5a00 	vldr	s11, [r3]
 800f002:	4b6a      	ldr	r3, [pc, #424]	@ (800f1ac <__ieee754_powf+0x43c>)
 800f004:	ee75 7a87 	vadd.f32	s15, s11, s14
 800f008:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f00c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800f010:	1049      	asrs	r1, r1, #1
 800f012:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800f016:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800f01a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800f01e:	ee37 6a65 	vsub.f32	s12, s14, s11
 800f022:	ee07 1a90 	vmov	s15, r1
 800f026:	ee26 5a24 	vmul.f32	s10, s12, s9
 800f02a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800f02e:	ee15 7a10 	vmov	r7, s10
 800f032:	401f      	ands	r7, r3
 800f034:	ee06 7a90 	vmov	s13, r7
 800f038:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800f03c:	ee37 7a65 	vsub.f32	s14, s14, s11
 800f040:	ee65 7a05 	vmul.f32	s15, s10, s10
 800f044:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800f048:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800f1b0 <__ieee754_powf+0x440>
 800f04c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800f1b4 <__ieee754_powf+0x444>
 800f050:	eee7 5a87 	vfma.f32	s11, s15, s14
 800f054:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800f1b8 <__ieee754_powf+0x448>
 800f058:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f05c:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800f18c <__ieee754_powf+0x41c>
 800f060:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f064:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800f1bc <__ieee754_powf+0x44c>
 800f068:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f06c:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800f1c0 <__ieee754_powf+0x450>
 800f070:	ee26 6a24 	vmul.f32	s12, s12, s9
 800f074:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f078:	ee35 7a26 	vadd.f32	s14, s10, s13
 800f07c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800f080:	ee27 7a06 	vmul.f32	s14, s14, s12
 800f084:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800f088:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800f08c:	eef0 5a67 	vmov.f32	s11, s15
 800f090:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800f094:	ee75 5a87 	vadd.f32	s11, s11, s14
 800f098:	ee15 1a90 	vmov	r1, s11
 800f09c:	4019      	ands	r1, r3
 800f09e:	ee05 1a90 	vmov	s11, r1
 800f0a2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800f0a6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800f0aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f0ae:	ee67 7a85 	vmul.f32	s15, s15, s10
 800f0b2:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f0b6:	eeb0 6a67 	vmov.f32	s12, s15
 800f0ba:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800f0be:	ee16 1a10 	vmov	r1, s12
 800f0c2:	4019      	ands	r1, r3
 800f0c4:	ee06 1a10 	vmov	s12, r1
 800f0c8:	eeb0 7a46 	vmov.f32	s14, s12
 800f0cc:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800f0d0:	493c      	ldr	r1, [pc, #240]	@ (800f1c4 <__ieee754_powf+0x454>)
 800f0d2:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800f0d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f0da:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800f1c8 <__ieee754_powf+0x458>
 800f0de:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800f1cc <__ieee754_powf+0x45c>
 800f0e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f0e6:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800f1d0 <__ieee754_powf+0x460>
 800f0ea:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f0ee:	ed91 7a00 	vldr	s14, [r1]
 800f0f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f0f6:	ee07 2a10 	vmov	s14, r2
 800f0fa:	eef0 6a67 	vmov.f32	s13, s15
 800f0fe:	4a35      	ldr	r2, [pc, #212]	@ (800f1d4 <__ieee754_powf+0x464>)
 800f100:	eee6 6a25 	vfma.f32	s13, s12, s11
 800f104:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800f108:	ed92 5a00 	vldr	s10, [r2]
 800f10c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f110:	ee76 6a85 	vadd.f32	s13, s13, s10
 800f114:	ee76 6a87 	vadd.f32	s13, s13, s14
 800f118:	ee16 2a90 	vmov	r2, s13
 800f11c:	4013      	ands	r3, r2
 800f11e:	ee06 3a90 	vmov	s13, r3
 800f122:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f126:	ee37 7a45 	vsub.f32	s14, s14, s10
 800f12a:	eea6 7a65 	vfms.f32	s14, s12, s11
 800f12e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f132:	e70f      	b.n	800ef54 <__ieee754_powf+0x1e4>
 800f134:	2601      	movs	r6, #1
 800f136:	e75d      	b.n	800eff4 <__ieee754_powf+0x284>
 800f138:	d152      	bne.n	800f1e0 <__ieee754_powf+0x470>
 800f13a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800f1d8 <__ieee754_powf+0x468>
 800f13e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f142:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800f146:	eef4 6ac7 	vcmpe.f32	s13, s14
 800f14a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f14e:	f73f af29 	bgt.w	800efa4 <__ieee754_powf+0x234>
 800f152:	2386      	movs	r3, #134	@ 0x86
 800f154:	e048      	b.n	800f1e8 <__ieee754_powf+0x478>
 800f156:	4a21      	ldr	r2, [pc, #132]	@ (800f1dc <__ieee754_powf+0x46c>)
 800f158:	4293      	cmp	r3, r2
 800f15a:	d907      	bls.n	800f16c <__ieee754_powf+0x3fc>
 800f15c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f164:	bf4c      	ite	mi
 800f166:	2001      	movmi	r0, #1
 800f168:	2000      	movpl	r0, #0
 800f16a:	e6c1      	b.n	800eef0 <__ieee754_powf+0x180>
 800f16c:	d138      	bne.n	800f1e0 <__ieee754_powf+0x470>
 800f16e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f172:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800f176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f17a:	dbea      	blt.n	800f152 <__ieee754_powf+0x3e2>
 800f17c:	e7ee      	b.n	800f15c <__ieee754_powf+0x3ec>
 800f17e:	bf00      	nop
 800f180:	00000000 	.word	0x00000000
 800f184:	3f7ffff3 	.word	0x3f7ffff3
 800f188:	3f800007 	.word	0x3f800007
 800f18c:	3eaaaaab 	.word	0x3eaaaaab
 800f190:	3fb8aa3b 	.word	0x3fb8aa3b
 800f194:	36eca570 	.word	0x36eca570
 800f198:	3fb8aa00 	.word	0x3fb8aa00
 800f19c:	4b800000 	.word	0x4b800000
 800f1a0:	001cc471 	.word	0x001cc471
 800f1a4:	005db3d6 	.word	0x005db3d6
 800f1a8:	0800fda0 	.word	0x0800fda0
 800f1ac:	fffff000 	.word	0xfffff000
 800f1b0:	3e6c3255 	.word	0x3e6c3255
 800f1b4:	3e53f142 	.word	0x3e53f142
 800f1b8:	3e8ba305 	.word	0x3e8ba305
 800f1bc:	3edb6db7 	.word	0x3edb6db7
 800f1c0:	3f19999a 	.word	0x3f19999a
 800f1c4:	0800fd90 	.word	0x0800fd90
 800f1c8:	3f76384f 	.word	0x3f76384f
 800f1cc:	3f763800 	.word	0x3f763800
 800f1d0:	369dc3a0 	.word	0x369dc3a0
 800f1d4:	0800fd98 	.word	0x0800fd98
 800f1d8:	3338aa3c 	.word	0x3338aa3c
 800f1dc:	43160000 	.word	0x43160000
 800f1e0:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800f1e4:	d971      	bls.n	800f2ca <__ieee754_powf+0x55a>
 800f1e6:	15db      	asrs	r3, r3, #23
 800f1e8:	3b7e      	subs	r3, #126	@ 0x7e
 800f1ea:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800f1ee:	4118      	asrs	r0, r3
 800f1f0:	4408      	add	r0, r1
 800f1f2:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800f1f6:	4a3c      	ldr	r2, [pc, #240]	@ (800f2e8 <__ieee754_powf+0x578>)
 800f1f8:	3b7f      	subs	r3, #127	@ 0x7f
 800f1fa:	411a      	asrs	r2, r3
 800f1fc:	4002      	ands	r2, r0
 800f1fe:	ee07 2a10 	vmov	s14, r2
 800f202:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800f206:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800f20a:	f1c3 0317 	rsb	r3, r3, #23
 800f20e:	4118      	asrs	r0, r3
 800f210:	2900      	cmp	r1, #0
 800f212:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f216:	bfb8      	it	lt
 800f218:	4240      	neglt	r0, r0
 800f21a:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800f21e:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800f2ec <__ieee754_powf+0x57c>
 800f222:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800f2f0 <__ieee754_powf+0x580>
 800f226:	ee17 3a10 	vmov	r3, s14
 800f22a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800f22e:	f023 030f 	bic.w	r3, r3, #15
 800f232:	ee07 3a10 	vmov	s14, r3
 800f236:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f23a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f23e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800f242:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800f2f4 <__ieee754_powf+0x584>
 800f246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f24a:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800f24e:	eef0 6a67 	vmov.f32	s13, s15
 800f252:	eee7 6a06 	vfma.f32	s13, s14, s12
 800f256:	eef0 5a66 	vmov.f32	s11, s13
 800f25a:	eee7 5a46 	vfms.f32	s11, s14, s12
 800f25e:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800f262:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800f266:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800f2f8 <__ieee754_powf+0x588>
 800f26a:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800f2fc <__ieee754_powf+0x58c>
 800f26e:	eea7 6a25 	vfma.f32	s12, s14, s11
 800f272:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800f300 <__ieee754_powf+0x590>
 800f276:	eee6 5a07 	vfma.f32	s11, s12, s14
 800f27a:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800f304 <__ieee754_powf+0x594>
 800f27e:	eea5 6a87 	vfma.f32	s12, s11, s14
 800f282:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800f308 <__ieee754_powf+0x598>
 800f286:	eee6 5a07 	vfma.f32	s11, s12, s14
 800f28a:	eeb0 6a66 	vmov.f32	s12, s13
 800f28e:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800f292:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800f296:	ee66 5a86 	vmul.f32	s11, s13, s12
 800f29a:	ee36 6a47 	vsub.f32	s12, s12, s14
 800f29e:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800f2a2:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800f2a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f2aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f2ae:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f2b2:	ee10 3a10 	vmov	r3, s0
 800f2b6:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800f2ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f2be:	da06      	bge.n	800f2ce <__ieee754_powf+0x55e>
 800f2c0:	f000 f8fa 	bl	800f4b8 <scalbnf>
 800f2c4:	ee20 0a08 	vmul.f32	s0, s0, s16
 800f2c8:	e56a      	b.n	800eda0 <__ieee754_powf+0x30>
 800f2ca:	2000      	movs	r0, #0
 800f2cc:	e7a5      	b.n	800f21a <__ieee754_powf+0x4aa>
 800f2ce:	ee00 3a10 	vmov	s0, r3
 800f2d2:	e7f7      	b.n	800f2c4 <__ieee754_powf+0x554>
 800f2d4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f2d8:	e562      	b.n	800eda0 <__ieee754_powf+0x30>
 800f2da:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800f30c <__ieee754_powf+0x59c>
 800f2de:	e55f      	b.n	800eda0 <__ieee754_powf+0x30>
 800f2e0:	eeb0 0a48 	vmov.f32	s0, s16
 800f2e4:	e55c      	b.n	800eda0 <__ieee754_powf+0x30>
 800f2e6:	bf00      	nop
 800f2e8:	ff800000 	.word	0xff800000
 800f2ec:	3f317218 	.word	0x3f317218
 800f2f0:	3f317200 	.word	0x3f317200
 800f2f4:	35bfbe8c 	.word	0x35bfbe8c
 800f2f8:	b5ddea0e 	.word	0xb5ddea0e
 800f2fc:	3331bb4c 	.word	0x3331bb4c
 800f300:	388ab355 	.word	0x388ab355
 800f304:	bb360b61 	.word	0xbb360b61
 800f308:	3e2aaaab 	.word	0x3e2aaaab
 800f30c:	00000000 	.word	0x00000000

0800f310 <atanf>:
 800f310:	b538      	push	{r3, r4, r5, lr}
 800f312:	ee10 5a10 	vmov	r5, s0
 800f316:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800f31a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800f31e:	eef0 7a40 	vmov.f32	s15, s0
 800f322:	d310      	bcc.n	800f346 <atanf+0x36>
 800f324:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800f328:	d904      	bls.n	800f334 <atanf+0x24>
 800f32a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800f32e:	eeb0 0a67 	vmov.f32	s0, s15
 800f332:	bd38      	pop	{r3, r4, r5, pc}
 800f334:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800f46c <atanf+0x15c>
 800f338:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800f470 <atanf+0x160>
 800f33c:	2d00      	cmp	r5, #0
 800f33e:	bfc8      	it	gt
 800f340:	eef0 7a47 	vmovgt.f32	s15, s14
 800f344:	e7f3      	b.n	800f32e <atanf+0x1e>
 800f346:	4b4b      	ldr	r3, [pc, #300]	@ (800f474 <atanf+0x164>)
 800f348:	429c      	cmp	r4, r3
 800f34a:	d810      	bhi.n	800f36e <atanf+0x5e>
 800f34c:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800f350:	d20a      	bcs.n	800f368 <atanf+0x58>
 800f352:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800f478 <atanf+0x168>
 800f356:	ee30 7a07 	vadd.f32	s14, s0, s14
 800f35a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f35e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800f362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f366:	dce2      	bgt.n	800f32e <atanf+0x1e>
 800f368:	f04f 33ff 	mov.w	r3, #4294967295
 800f36c:	e013      	b.n	800f396 <atanf+0x86>
 800f36e:	f7ff fb62 	bl	800ea36 <fabsf>
 800f372:	4b42      	ldr	r3, [pc, #264]	@ (800f47c <atanf+0x16c>)
 800f374:	429c      	cmp	r4, r3
 800f376:	d84f      	bhi.n	800f418 <atanf+0x108>
 800f378:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800f37c:	429c      	cmp	r4, r3
 800f37e:	d841      	bhi.n	800f404 <atanf+0xf4>
 800f380:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800f384:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800f388:	eea0 7a27 	vfma.f32	s14, s0, s15
 800f38c:	2300      	movs	r3, #0
 800f38e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f392:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f396:	1c5a      	adds	r2, r3, #1
 800f398:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800f39c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800f480 <atanf+0x170>
 800f3a0:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800f484 <atanf+0x174>
 800f3a4:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800f488 <atanf+0x178>
 800f3a8:	ee66 6a06 	vmul.f32	s13, s12, s12
 800f3ac:	eee6 5a87 	vfma.f32	s11, s13, s14
 800f3b0:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800f48c <atanf+0x17c>
 800f3b4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800f3b8:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800f490 <atanf+0x180>
 800f3bc:	eee7 5a26 	vfma.f32	s11, s14, s13
 800f3c0:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800f494 <atanf+0x184>
 800f3c4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800f3c8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800f498 <atanf+0x188>
 800f3cc:	eee7 5a26 	vfma.f32	s11, s14, s13
 800f3d0:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800f49c <atanf+0x18c>
 800f3d4:	eea6 5a87 	vfma.f32	s10, s13, s14
 800f3d8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800f4a0 <atanf+0x190>
 800f3dc:	eea5 7a26 	vfma.f32	s14, s10, s13
 800f3e0:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800f4a4 <atanf+0x194>
 800f3e4:	eea7 5a26 	vfma.f32	s10, s14, s13
 800f3e8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800f4a8 <atanf+0x198>
 800f3ec:	eea5 7a26 	vfma.f32	s14, s10, s13
 800f3f0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f3f4:	eea5 7a86 	vfma.f32	s14, s11, s12
 800f3f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f3fc:	d121      	bne.n	800f442 <atanf+0x132>
 800f3fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f402:	e794      	b.n	800f32e <atanf+0x1e>
 800f404:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f408:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f40c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f410:	2301      	movs	r3, #1
 800f412:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f416:	e7be      	b.n	800f396 <atanf+0x86>
 800f418:	4b24      	ldr	r3, [pc, #144]	@ (800f4ac <atanf+0x19c>)
 800f41a:	429c      	cmp	r4, r3
 800f41c:	d80b      	bhi.n	800f436 <atanf+0x126>
 800f41e:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800f422:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f426:	eea0 7a27 	vfma.f32	s14, s0, s15
 800f42a:	2302      	movs	r3, #2
 800f42c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f430:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f434:	e7af      	b.n	800f396 <atanf+0x86>
 800f436:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800f43a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f43e:	2303      	movs	r3, #3
 800f440:	e7a9      	b.n	800f396 <atanf+0x86>
 800f442:	4a1b      	ldr	r2, [pc, #108]	@ (800f4b0 <atanf+0x1a0>)
 800f444:	491b      	ldr	r1, [pc, #108]	@ (800f4b4 <atanf+0x1a4>)
 800f446:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f44a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f44e:	edd3 6a00 	vldr	s13, [r3]
 800f452:	ee37 7a66 	vsub.f32	s14, s14, s13
 800f456:	2d00      	cmp	r5, #0
 800f458:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f45c:	edd2 7a00 	vldr	s15, [r2]
 800f460:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f464:	bfb8      	it	lt
 800f466:	eef1 7a67 	vneglt.f32	s15, s15
 800f46a:	e760      	b.n	800f32e <atanf+0x1e>
 800f46c:	bfc90fdb 	.word	0xbfc90fdb
 800f470:	3fc90fdb 	.word	0x3fc90fdb
 800f474:	3edfffff 	.word	0x3edfffff
 800f478:	7149f2ca 	.word	0x7149f2ca
 800f47c:	3f97ffff 	.word	0x3f97ffff
 800f480:	3c8569d7 	.word	0x3c8569d7
 800f484:	3d4bda59 	.word	0x3d4bda59
 800f488:	bd6ef16b 	.word	0xbd6ef16b
 800f48c:	3d886b35 	.word	0x3d886b35
 800f490:	3dba2e6e 	.word	0x3dba2e6e
 800f494:	3e124925 	.word	0x3e124925
 800f498:	3eaaaaab 	.word	0x3eaaaaab
 800f49c:	bd15a221 	.word	0xbd15a221
 800f4a0:	bd9d8795 	.word	0xbd9d8795
 800f4a4:	bde38e38 	.word	0xbde38e38
 800f4a8:	be4ccccd 	.word	0xbe4ccccd
 800f4ac:	401bffff 	.word	0x401bffff
 800f4b0:	0800fdb8 	.word	0x0800fdb8
 800f4b4:	0800fda8 	.word	0x0800fda8

0800f4b8 <scalbnf>:
 800f4b8:	ee10 3a10 	vmov	r3, s0
 800f4bc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800f4c0:	d02b      	beq.n	800f51a <scalbnf+0x62>
 800f4c2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800f4c6:	d302      	bcc.n	800f4ce <scalbnf+0x16>
 800f4c8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f4cc:	4770      	bx	lr
 800f4ce:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800f4d2:	d123      	bne.n	800f51c <scalbnf+0x64>
 800f4d4:	4b24      	ldr	r3, [pc, #144]	@ (800f568 <scalbnf+0xb0>)
 800f4d6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800f56c <scalbnf+0xb4>
 800f4da:	4298      	cmp	r0, r3
 800f4dc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f4e0:	db17      	blt.n	800f512 <scalbnf+0x5a>
 800f4e2:	ee10 3a10 	vmov	r3, s0
 800f4e6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f4ea:	3a19      	subs	r2, #25
 800f4ec:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800f4f0:	4288      	cmp	r0, r1
 800f4f2:	dd15      	ble.n	800f520 <scalbnf+0x68>
 800f4f4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800f570 <scalbnf+0xb8>
 800f4f8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800f574 <scalbnf+0xbc>
 800f4fc:	ee10 3a10 	vmov	r3, s0
 800f500:	eeb0 7a67 	vmov.f32	s14, s15
 800f504:	2b00      	cmp	r3, #0
 800f506:	bfb8      	it	lt
 800f508:	eef0 7a66 	vmovlt.f32	s15, s13
 800f50c:	ee27 0a87 	vmul.f32	s0, s15, s14
 800f510:	4770      	bx	lr
 800f512:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800f578 <scalbnf+0xc0>
 800f516:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f51a:	4770      	bx	lr
 800f51c:	0dd2      	lsrs	r2, r2, #23
 800f51e:	e7e5      	b.n	800f4ec <scalbnf+0x34>
 800f520:	4410      	add	r0, r2
 800f522:	28fe      	cmp	r0, #254	@ 0xfe
 800f524:	dce6      	bgt.n	800f4f4 <scalbnf+0x3c>
 800f526:	2800      	cmp	r0, #0
 800f528:	dd06      	ble.n	800f538 <scalbnf+0x80>
 800f52a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f52e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f532:	ee00 3a10 	vmov	s0, r3
 800f536:	4770      	bx	lr
 800f538:	f110 0f16 	cmn.w	r0, #22
 800f53c:	da09      	bge.n	800f552 <scalbnf+0x9a>
 800f53e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800f578 <scalbnf+0xc0>
 800f542:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800f57c <scalbnf+0xc4>
 800f546:	ee10 3a10 	vmov	r3, s0
 800f54a:	eeb0 7a67 	vmov.f32	s14, s15
 800f54e:	2b00      	cmp	r3, #0
 800f550:	e7d9      	b.n	800f506 <scalbnf+0x4e>
 800f552:	3019      	adds	r0, #25
 800f554:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f558:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f55c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800f580 <scalbnf+0xc8>
 800f560:	ee07 3a90 	vmov	s15, r3
 800f564:	e7d7      	b.n	800f516 <scalbnf+0x5e>
 800f566:	bf00      	nop
 800f568:	ffff3cb0 	.word	0xffff3cb0
 800f56c:	4c000000 	.word	0x4c000000
 800f570:	7149f2ca 	.word	0x7149f2ca
 800f574:	f149f2ca 	.word	0xf149f2ca
 800f578:	0da24260 	.word	0x0da24260
 800f57c:	8da24260 	.word	0x8da24260
 800f580:	33000000 	.word	0x33000000

0800f584 <with_errnof>:
 800f584:	b510      	push	{r4, lr}
 800f586:	ed2d 8b02 	vpush	{d8}
 800f58a:	eeb0 8a40 	vmov.f32	s16, s0
 800f58e:	4604      	mov	r4, r0
 800f590:	f7fd fb90 	bl	800ccb4 <__errno>
 800f594:	eeb0 0a48 	vmov.f32	s0, s16
 800f598:	ecbd 8b02 	vpop	{d8}
 800f59c:	6004      	str	r4, [r0, #0]
 800f59e:	bd10      	pop	{r4, pc}

0800f5a0 <xflowf>:
 800f5a0:	b130      	cbz	r0, 800f5b0 <xflowf+0x10>
 800f5a2:	eef1 7a40 	vneg.f32	s15, s0
 800f5a6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f5aa:	2022      	movs	r0, #34	@ 0x22
 800f5ac:	f7ff bfea 	b.w	800f584 <with_errnof>
 800f5b0:	eef0 7a40 	vmov.f32	s15, s0
 800f5b4:	e7f7      	b.n	800f5a6 <xflowf+0x6>
	...

0800f5b8 <__math_uflowf>:
 800f5b8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f5c0 <__math_uflowf+0x8>
 800f5bc:	f7ff bff0 	b.w	800f5a0 <xflowf>
 800f5c0:	10000000 	.word	0x10000000

0800f5c4 <__math_oflowf>:
 800f5c4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f5cc <__math_oflowf+0x8>
 800f5c8:	f7ff bfea 	b.w	800f5a0 <xflowf>
 800f5cc:	70000000 	.word	0x70000000

0800f5d0 <__ieee754_sqrtf>:
 800f5d0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f5d4:	4770      	bx	lr
	...

0800f5d8 <_init>:
 800f5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5da:	bf00      	nop
 800f5dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5de:	bc08      	pop	{r3}
 800f5e0:	469e      	mov	lr, r3
 800f5e2:	4770      	bx	lr

0800f5e4 <_fini>:
 800f5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5e6:	bf00      	nop
 800f5e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5ea:	bc08      	pop	{r3}
 800f5ec:	469e      	mov	lr, r3
 800f5ee:	4770      	bx	lr
