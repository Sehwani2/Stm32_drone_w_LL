
Project_drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b84  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  08007d18  08007d18  00008d18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082a0  080082a0  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  080082a0  080082a0  000092a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082a8  080082a8  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082a8  080082a8  000092a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080082ac  080082ac  000092ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080082b0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1d4  2**0
                  CONTENTS
 10 .bss          00000258  200001d8  200001d8  0000a1d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000430  20000430  0000a1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000caa6  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e2b  00000000  00000000  00016caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea0  00000000  00000000  00019ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ac8  00000000  00000000  0001a978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002422d  00000000  00000000  0001b440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f08d  00000000  00000000  0003f66d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cad0c  00000000  00000000  0004e6fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00119406  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a94  00000000  00000000  0011944c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  0011dee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007cfc 	.word	0x08007cfc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08007cfc 	.word	0x08007cfc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	601a      	str	r2, [r3, #0]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f023 0210 	bic.w	r2, r3, #16
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	605a      	str	r2, [r3, #4]
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(const SPI_TypeDef *SPIx)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d101      	bne.n	8000ef6 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e000      	b.n	8000ef8 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d101      	bne.n	8000f1c <LL_SPI_IsActiveFlag_TXE+0x18>
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e000      	b.n	8000f1e <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	330c      	adds	r3, #12
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b2db      	uxtb	r3, r3
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b085      	sub	sp, #20
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	330c      	adds	r3, #12
 8000f56:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	78fa      	ldrb	r2, [r7, #3]
 8000f5c:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000f5e:	bf00      	nop
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	691a      	ldr	r2, [r3, #16]
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	683a      	ldr	r2, [r7, #0]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	bf0c      	ite	eq
 8000f82:	2301      	moveq	r3, #1
 8000f84:	2300      	movne	r3, #0
 8000f86:	b2db      	uxtb	r3, r3
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	619a      	str	r2, [r3, #24]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	041a      	lsls	r2, r3, #16
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	619a      	str	r2, [r3, #24]
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000fd8:	4b08      	ldr	r3, [pc, #32]	@ (8000ffc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000fdc:	4907      	ldr	r1, [pc, #28]	@ (8000ffc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000fe4:	4b05      	ldr	r3, [pc, #20]	@ (8000ffc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fe6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4013      	ands	r3, r2
 8000fec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fee:	68fb      	ldr	r3, [r7, #12]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	40023800 	.word	0x40023800

08001000 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001008:	4b08      	ldr	r3, [pc, #32]	@ (800102c <LL_APB1_GRP1_EnableClock+0x2c>)
 800100a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800100c:	4907      	ldr	r1, [pc, #28]	@ (800102c <LL_APB1_GRP1_EnableClock+0x2c>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4313      	orrs	r3, r2
 8001012:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001014:	4b05      	ldr	r3, [pc, #20]	@ (800102c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001016:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4013      	ands	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800101e:	68fb      	ldr	r3, [r7, #12]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	40023800 	.word	0x40023800

08001030 <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b090      	sub	sp, #64	@ 0x40
 8001034:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001036:	f107 0318 	add.w	r3, r7, #24
 800103a:	2228      	movs	r2, #40	@ 0x28
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f004 ffcc 	bl	8005fdc <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	463b      	mov	r3, r7
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
 8001050:	611a      	str	r2, [r3, #16]
 8001052:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001054:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001058:	f7ff ffd2 	bl	8001000 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800105c:	2002      	movs	r0, #2
 800105e:	f7ff ffb7 	bl	8000fd0 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001062:	2004      	movs	r0, #4
 8001064:	f7ff ffb4 	bl	8000fd0 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001068:	2001      	movs	r0, #1
 800106a:	f7ff ffb1 	bl	8000fd0 <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800106e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001072:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001074:	2302      	movs	r3, #2
 8001076:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001078:	2303      	movs	r3, #3
 800107a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001084:	2305      	movs	r3, #5
 8001086:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001088:	463b      	mov	r3, r7
 800108a:	4619      	mov	r1, r3
 800108c:	4841      	ldr	r0, [pc, #260]	@ (8001194 <BNO080_GPIO_SPI_Initialization+0x164>)
 800108e:	f003 f938 	bl	8004302 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001096:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800109a:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800109c:	2300      	movs	r3, #0
 800109e:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80010a0:	2302      	movs	r3, #2
 80010a2:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80010a4:	2301      	movs	r3, #1
 80010a6:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80010a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80010ae:	2318      	movs	r3, #24
 80010b0:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80010b2:	2300      	movs	r3, #0
 80010b4:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 80010ba:	230a      	movs	r3, #10
 80010bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 80010be:	f107 0318 	add.w	r3, r7, #24
 80010c2:	4619      	mov	r1, r3
 80010c4:	4834      	ldr	r0, [pc, #208]	@ (8001198 <BNO080_GPIO_SPI_Initialization+0x168>)
 80010c6:	f003 fafa 	bl	80046be <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80010ca:	2100      	movs	r1, #0
 80010cc:	4832      	ldr	r0, [pc, #200]	@ (8001198 <BNO080_GPIO_SPI_Initialization+0x168>)
 80010ce:	f7ff fef3 	bl	8000eb8 <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 80010d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010d6:	4831      	ldr	r0, [pc, #196]	@ (800119c <BNO080_GPIO_SPI_Initialization+0x16c>)
 80010d8:	f7ff ff6a 	bl	8000fb0 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 80010dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010e0:	482c      	ldr	r0, [pc, #176]	@ (8001194 <BNO080_GPIO_SPI_Initialization+0x164>)
 80010e2:	f7ff ff65 	bl	8000fb0 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 80010e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010ea:	482d      	ldr	r0, [pc, #180]	@ (80011a0 <BNO080_GPIO_SPI_Initialization+0x170>)
 80010ec:	f7ff ff60 	bl	8000fb0 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 80010f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010f4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010f6:	2301      	movs	r3, #1
 80010f8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80010fa:	2303      	movs	r3, #3
 80010fc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 8001106:	463b      	mov	r3, r7
 8001108:	4619      	mov	r1, r3
 800110a:	4822      	ldr	r0, [pc, #136]	@ (8001194 <BNO080_GPIO_SPI_Initialization+0x164>)
 800110c:	f003 f8f9 	bl	8004302 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 8001110:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001114:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001116:	2301      	movs	r3, #1
 8001118:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 8001126:	463b      	mov	r3, r7
 8001128:	4619      	mov	r1, r3
 800112a:	481c      	ldr	r0, [pc, #112]	@ (800119c <BNO080_GPIO_SPI_Initialization+0x16c>)
 800112c:	f003 f8e9 	bl	8004302 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 8001130:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001134:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001136:	2301      	movs	r3, #1
 8001138:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800113a:	2303      	movs	r3, #3
 800113c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 8001146:	463b      	mov	r3, r7
 8001148:	4619      	mov	r1, r3
 800114a:	4815      	ldr	r0, [pc, #84]	@ (80011a0 <BNO080_GPIO_SPI_Initialization+0x170>)
 800114c:	f003 f8d9 	bl	8004302 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 8001150:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001154:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800115a:	2301      	movs	r3, #1
 800115c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	480e      	ldr	r0, [pc, #56]	@ (800119c <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001164:	f003 f8cd 	bl	8004302 <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 8001168:	480b      	ldr	r0, [pc, #44]	@ (8001198 <BNO080_GPIO_SPI_Initialization+0x168>)
 800116a:	f7ff fe95 	bl	8000e98 <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 800116e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001172:	4808      	ldr	r0, [pc, #32]	@ (8001194 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001174:	f7ff ff0e 	bl	8000f94 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 8001178:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800117c:	4808      	ldr	r0, [pc, #32]	@ (80011a0 <BNO080_GPIO_SPI_Initialization+0x170>)
 800117e:	f7ff ff09 	bl	8000f94 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 8001182:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001186:	4805      	ldr	r0, [pc, #20]	@ (800119c <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001188:	f7ff ff04 	bl	8000f94 <LL_GPIO_SetOutputPin>
}
 800118c:	bf00      	nop
 800118e:	3740      	adds	r7, #64	@ 0x40
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40020400 	.word	0x40020400
 8001198:	40003800 	.word	0x40003800
 800119c:	40020800 	.word	0x40020800
 80011a0:	40020000 	.word	0x40020000

080011a4 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 80011aa:	f7ff ff41 	bl	8001030 <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 80011ae:	482e      	ldr	r0, [pc, #184]	@ (8001268 <BNO080_Initialization+0xc4>)
 80011b0:	f004 fdcc 	bl	8005d4c <iprintf>
	
	CHIP_DESELECT(BNO080);
 80011b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011b8:	482c      	ldr	r0, [pc, #176]	@ (800126c <BNO080_Initialization+0xc8>)
 80011ba:	f7ff feeb 	bl	8000f94 <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 80011be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011c2:	482b      	ldr	r0, [pc, #172]	@ (8001270 <BNO080_Initialization+0xcc>)
 80011c4:	f7ff fee6 	bl	8000f94 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 80011c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011cc:	4829      	ldr	r0, [pc, #164]	@ (8001274 <BNO080_Initialization+0xd0>)
 80011ce:	f7ff feef 	bl	8000fb0 <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 80011d2:	20c8      	movs	r0, #200	@ 0xc8
 80011d4:	f002 f9dc 	bl	8003590 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 80011d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011dc:	4825      	ldr	r0, [pc, #148]	@ (8001274 <BNO080_Initialization+0xd0>)
 80011de:	f7ff fed9 	bl	8000f94 <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 80011e2:	f000 f8d7 	bl	8001394 <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 80011e6:	f000 f8d5 	bl	8001394 <BNO080_waitForSPI>
	BNO080_receivePacket();
 80011ea:	f000 f8f7 	bl	80013dc <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 80011ee:	f000 f8d1 	bl	8001394 <BNO080_waitForSPI>
	BNO080_receivePacket();
 80011f2:	f000 f8f3 	bl	80013dc <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 80011f6:	4b20      	ldr	r3, [pc, #128]	@ (8001278 <BNO080_Initialization+0xd4>)
 80011f8:	22f9      	movs	r2, #249	@ 0xf9
 80011fa:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 80011fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001278 <BNO080_Initialization+0xd4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 8001202:	2102      	movs	r1, #2
 8001204:	2002      	movs	r0, #2
 8001206:	f000 f959 	bl	80014bc <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 800120a:	f000 f8c3 	bl	8001394 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 800120e:	f000 f8e5 	bl	80013dc <BNO080_receivePacket>
 8001212:	4603      	mov	r3, r0
 8001214:	2b01      	cmp	r3, #1
 8001216:	d11b      	bne.n	8001250 <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 8001218:	4b18      	ldr	r3, [pc, #96]	@ (800127c <BNO080_Initialization+0xd8>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	4b17      	ldr	r3, [pc, #92]	@ (800127c <BNO080_Initialization+0xd8>)
 8001220:	785b      	ldrb	r3, [r3, #1]
 8001222:	461a      	mov	r2, r3
 8001224:	4b15      	ldr	r3, [pc, #84]	@ (800127c <BNO080_Initialization+0xd8>)
 8001226:	789b      	ldrb	r3, [r3, #2]
 8001228:	4618      	mov	r0, r3
 800122a:	4b14      	ldr	r3, [pc, #80]	@ (800127c <BNO080_Initialization+0xd8>)
 800122c:	78db      	ldrb	r3, [r3, #3]
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	4603      	mov	r3, r0
 8001232:	4813      	ldr	r0, [pc, #76]	@ (8001280 <BNO080_Initialization+0xdc>)
 8001234:	f004 fd8a 	bl	8005d4c <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8001238:	4b0f      	ldr	r3, [pc, #60]	@ (8001278 <BNO080_Initialization+0xd4>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2bf8      	cmp	r3, #248	@ 0xf8
 800123e:	d107      	bne.n	8001250 <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 8001240:	4b0d      	ldr	r3, [pc, #52]	@ (8001278 <BNO080_Initialization+0xd4>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4619      	mov	r1, r3
 8001246:	480f      	ldr	r0, [pc, #60]	@ (8001284 <BNO080_Initialization+0xe0>)
 8001248:	f004 fd80 	bl	8005d4c <iprintf>
			return (0);
 800124c:	2300      	movs	r3, #0
 800124e:	e007      	b.n	8001260 <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 8001250:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <BNO080_Initialization+0xd4>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	22f8      	movs	r2, #248	@ 0xf8
 8001256:	4619      	mov	r1, r3
 8001258:	480b      	ldr	r0, [pc, #44]	@ (8001288 <BNO080_Initialization+0xe4>)
 800125a:	f004 fd77 	bl	8005d4c <iprintf>
	return (1); //Something went wrong
 800125e:	2301      	movs	r3, #1
}
 8001260:	4618      	mov	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	08007d18 	.word	0x08007d18
 800126c:	40020400 	.word	0x40020400
 8001270:	40020000 	.word	0x40020000
 8001274:	40020800 	.word	0x40020800
 8001278:	200001f8 	.word	0x200001f8
 800127c:	200001f4 	.word	0x200001f4
 8001280:	08007d2c 	.word	0x08007d2c
 8001284:	08007d44 	.word	0x08007d44
 8001288:	08007d64 	.word	0x08007d64

0800128c <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 8001296:	bf00      	nop
 8001298:	480c      	ldr	r0, [pc, #48]	@ (80012cc <SPI2_SendByte+0x40>)
 800129a:	f7ff fe33 	bl	8000f04 <LL_SPI_IsActiveFlag_TXE>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d0f9      	beq.n	8001298 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	4619      	mov	r1, r3
 80012a8:	4808      	ldr	r0, [pc, #32]	@ (80012cc <SPI2_SendByte+0x40>)
 80012aa:	f7ff fe4c 	bl	8000f46 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 80012ae:	bf00      	nop
 80012b0:	4806      	ldr	r0, [pc, #24]	@ (80012cc <SPI2_SendByte+0x40>)
 80012b2:	f7ff fe14 	bl	8000ede <LL_SPI_IsActiveFlag_RXNE>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d0f9      	beq.n	80012b0 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 80012bc:	4803      	ldr	r0, [pc, #12]	@ (80012cc <SPI2_SendByte+0x40>)
 80012be:	f7ff fe34 	bl	8000f2a <LL_SPI_ReceiveData8>
 80012c2:	4603      	mov	r3, r0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40003800 	.word	0x40003800

080012d0 <BNO080_enableRotationVector>:
	return fixedPointValue * powf(2, qPoint * -1);
}

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 80012da:	88fb      	ldrh	r3, [r7, #6]
 80012dc:	2200      	movs	r2, #0
 80012de:	4619      	mov	r1, r3
 80012e0:	2005      	movs	r0, #5
 80012e2:	f000 f805 	bl	80012f0 <BNO080_setFeatureCommand>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
 80012fc:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 80012fe:	4b24      	ldr	r3, [pc, #144]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 8001300:	22fd      	movs	r2, #253	@ 0xfd
 8001302:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8001304:	4a22      	ldr	r2, [pc, #136]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 800130a:	4b21      	ldr	r3, [pc, #132]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 800130c:	2200      	movs	r2, #0
 800130e:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 8001310:	4b1f      	ldr	r3, [pc, #124]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 8001312:	2200      	movs	r2, #0
 8001314:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8001316:	4b1e      	ldr	r3, [pc, #120]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 8001318:	2200      	movs	r2, #0
 800131a:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	4b1b      	ldr	r3, [pc, #108]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 8001322:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	0a1b      	lsrs	r3, r3, #8
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4b19      	ldr	r3, [pc, #100]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 800132c:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	0c1b      	lsrs	r3, r3, #16
 8001332:	b2da      	uxtb	r2, r3
 8001334:	4b16      	ldr	r3, [pc, #88]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 8001336:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	0e1b      	lsrs	r3, r3, #24
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4b14      	ldr	r3, [pc, #80]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 8001340:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 8001342:	4b13      	ldr	r3, [pc, #76]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 8001344:	2200      	movs	r2, #0
 8001346:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8001348:	4b11      	ldr	r3, [pc, #68]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 800134a:	2200      	movs	r2, #0
 800134c:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 800134e:	4b10      	ldr	r3, [pc, #64]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 8001350:	2200      	movs	r2, #0
 8001352:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8001354:	4b0e      	ldr	r3, [pc, #56]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 8001356:	2200      	movs	r2, #0
 8001358:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 8001360:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	0a1b      	lsrs	r3, r3, #8
 8001366:	b2da      	uxtb	r2, r3
 8001368:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 800136a:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	0c1b      	lsrs	r3, r3, #16
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4b07      	ldr	r3, [pc, #28]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 8001374:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	0e1b      	lsrs	r3, r3, #24
 800137a:	b2da      	uxtb	r2, r3
 800137c:	4b04      	ldr	r3, [pc, #16]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 800137e:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8001380:	2111      	movs	r1, #17
 8001382:	2002      	movs	r0, #2
 8001384:	f000 f89a 	bl	80014bc <BNO080_sendPacket>
}
 8001388:	bf00      	nop
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	200001f8 	.word	0x200001f8

08001394 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 800139a:	2300      	movs	r3, #0
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	e00c      	b.n	80013ba <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 80013a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013a4:	480b      	ldr	r0, [pc, #44]	@ (80013d4 <BNO080_waitForSPI+0x40>)
 80013a6:	f7ff fde0 	bl	8000f6a <LL_GPIO_IsInputPinSet>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d101      	bne.n	80013b4 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 80013b0:	2301      	movs	r3, #1
 80013b2:	e00a      	b.n	80013ca <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3301      	adds	r3, #1
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c0:	d1ee      	bne.n	80013a0 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 80013c2:	4805      	ldr	r0, [pc, #20]	@ (80013d8 <BNO080_waitForSPI+0x44>)
 80013c4:	f004 fd2a 	bl	8005e1c <puts>
	return (0);
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40020800 	.word	0x40020800
 80013d8:	08007db0 	.word	0x08007db0

080013dc <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 80013e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013e6:	4831      	ldr	r0, [pc, #196]	@ (80014ac <BNO080_receivePacket+0xd0>)
 80013e8:	f7ff fdbf 	bl	8000f6a <LL_GPIO_IsInputPinSet>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d101      	bne.n	80013f6 <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 80013f2:	2300      	movs	r3, #0
 80013f4:	e056      	b.n	80014a4 <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 80013f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013fa:	482d      	ldr	r0, [pc, #180]	@ (80014b0 <BNO080_receivePacket+0xd4>)
 80013fc:	f7ff fdd8 	bl	8000fb0 <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8001400:	2000      	movs	r0, #0
 8001402:	f7ff ff43 	bl	800128c <SPI2_SendByte>
 8001406:	4603      	mov	r3, r0
 8001408:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 800140a:	2000      	movs	r0, #0
 800140c:	f7ff ff3e 	bl	800128c <SPI2_SendByte>
 8001410:	4603      	mov	r3, r0
 8001412:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8001414:	2000      	movs	r0, #0
 8001416:	f7ff ff39 	bl	800128c <SPI2_SendByte>
 800141a:	4603      	mov	r3, r0
 800141c:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 800141e:	2000      	movs	r0, #0
 8001420:	f7ff ff34 	bl	800128c <SPI2_SendByte>
 8001424:	4603      	mov	r3, r0
 8001426:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8001428:	4a22      	ldr	r2, [pc, #136]	@ (80014b4 <BNO080_receivePacket+0xd8>)
 800142a:	7b7b      	ldrb	r3, [r7, #13]
 800142c:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 800142e:	4a21      	ldr	r2, [pc, #132]	@ (80014b4 <BNO080_receivePacket+0xd8>)
 8001430:	7b3b      	ldrb	r3, [r7, #12]
 8001432:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8001434:	4a1f      	ldr	r2, [pc, #124]	@ (80014b4 <BNO080_receivePacket+0xd8>)
 8001436:	7afb      	ldrb	r3, [r7, #11]
 8001438:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 800143a:	4a1e      	ldr	r2, [pc, #120]	@ (80014b4 <BNO080_receivePacket+0xd8>)
 800143c:	7abb      	ldrb	r3, [r7, #10]
 800143e:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8001440:	7b3b      	ldrb	r3, [r7, #12]
 8001442:	021b      	lsls	r3, r3, #8
 8001444:	b21a      	sxth	r2, r3
 8001446:	7b7b      	ldrb	r3, [r7, #13]
 8001448:	b21b      	sxth	r3, r3
 800144a:	4313      	orrs	r3, r2
 800144c:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 800144e:	893b      	ldrh	r3, [r7, #8]
 8001450:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001454:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8001456:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 800145e:	2300      	movs	r3, #0
 8001460:	e020      	b.n	80014a4 <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8001462:	893b      	ldrh	r3, [r7, #8]
 8001464:	3b04      	subs	r3, #4
 8001466:	b29b      	uxth	r3, r3
 8001468:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 800146a:	2300      	movs	r3, #0
 800146c:	81fb      	strh	r3, [r7, #14]
 800146e:	e00e      	b.n	800148e <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 8001470:	20ff      	movs	r0, #255	@ 0xff
 8001472:	f7ff ff0b 	bl	800128c <SPI2_SendByte>
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 800147a:	89fb      	ldrh	r3, [r7, #14]
 800147c:	2b7f      	cmp	r3, #127	@ 0x7f
 800147e:	d803      	bhi.n	8001488 <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001480:	89fb      	ldrh	r3, [r7, #14]
 8001482:	490d      	ldr	r1, [pc, #52]	@ (80014b8 <BNO080_receivePacket+0xdc>)
 8001484:	79fa      	ldrb	r2, [r7, #7]
 8001486:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001488:	89fb      	ldrh	r3, [r7, #14]
 800148a:	3301      	adds	r3, #1
 800148c:	81fb      	strh	r3, [r7, #14]
 800148e:	89fa      	ldrh	r2, [r7, #14]
 8001490:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001494:	429a      	cmp	r2, r3
 8001496:	dbeb      	blt.n	8001470 <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8001498:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800149c:	4804      	ldr	r0, [pc, #16]	@ (80014b0 <BNO080_receivePacket+0xd4>)
 800149e:	f7ff fd79 	bl	8000f94 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 80014a2:	2301      	movs	r3, #1
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40020800 	.word	0x40020800
 80014b0:	40020400 	.word	0x40020400
 80014b4:	200001f4 	.word	0x200001f4
 80014b8:	200001f8 	.word	0x200001f8

080014bc <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	460a      	mov	r2, r1
 80014c6:	71fb      	strb	r3, [r7, #7]
 80014c8:	4613      	mov	r3, r2
 80014ca:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 80014cc:	79bb      	ldrb	r3, [r7, #6]
 80014ce:	3304      	adds	r3, #4
 80014d0:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 80014d2:	f7ff ff5f 	bl	8001394 <BNO080_waitForSPI>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 80014dc:	2300      	movs	r3, #0
 80014de:	e032      	b.n	8001546 <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 80014e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014e4:	481a      	ldr	r0, [pc, #104]	@ (8001550 <BNO080_sendPacket+0x94>)
 80014e6:	f7ff fd63 	bl	8000fb0 <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 80014ea:	7bbb      	ldrb	r3, [r7, #14]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fecd 	bl	800128c <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 80014f2:	7bbb      	ldrb	r3, [r7, #14]
 80014f4:	121b      	asrs	r3, r3, #8
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fec7 	bl	800128c <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fec3 	bl	800128c <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	4a12      	ldr	r2, [pc, #72]	@ (8001554 <BNO080_sendPacket+0x98>)
 800150a:	5cd2      	ldrb	r2, [r2, r3]
 800150c:	1c51      	adds	r1, r2, #1
 800150e:	b2c8      	uxtb	r0, r1
 8001510:	4910      	ldr	r1, [pc, #64]	@ (8001554 <BNO080_sendPacket+0x98>)
 8001512:	54c8      	strb	r0, [r1, r3]
 8001514:	4610      	mov	r0, r2
 8001516:	f7ff feb9 	bl	800128c <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 800151a:	2300      	movs	r3, #0
 800151c:	73fb      	strb	r3, [r7, #15]
 800151e:	e008      	b.n	8001532 <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	4a0d      	ldr	r2, [pc, #52]	@ (8001558 <BNO080_sendPacket+0x9c>)
 8001524:	5cd3      	ldrb	r3, [r2, r3]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff feb0 	bl	800128c <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	3301      	adds	r3, #1
 8001530:	73fb      	strb	r3, [r7, #15]
 8001532:	7bfa      	ldrb	r2, [r7, #15]
 8001534:	79bb      	ldrb	r3, [r7, #6]
 8001536:	429a      	cmp	r2, r3
 8001538:	d3f2      	bcc.n	8001520 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 800153a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800153e:	4804      	ldr	r0, [pc, #16]	@ (8001550 <BNO080_sendPacket+0x94>)
 8001540:	f7ff fd28 	bl	8000f94 <LL_GPIO_SetOutputPin>

	return (1);
 8001544:	2301      	movs	r3, #1
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40020400 	.word	0x40020400
 8001554:	20000278 	.word	0x20000278
 8001558:	200001f8 	.word	0x200001f8

0800155c <LL_SPI_Enable>:
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	601a      	str	r2, [r3, #0]
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <LL_SPI_SetStandard>:
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f023 0210 	bic.w	r2, r3, #16
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	431a      	orrs	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	605a      	str	r2, [r3, #4]
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <LL_SPI_IsActiveFlag_RXNE>:
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d101      	bne.n	80015ba <LL_SPI_IsActiveFlag_RXNE+0x18>
 80015b6:	2301      	movs	r3, #1
 80015b8:	e000      	b.n	80015bc <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <LL_SPI_IsActiveFlag_TXE>:
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d101      	bne.n	80015e0 <LL_SPI_IsActiveFlag_TXE+0x18>
 80015dc:	2301      	movs	r3, #1
 80015de:	e000      	b.n	80015e2 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <LL_SPI_ReceiveData8>:
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	330c      	adds	r3, #12
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	b2db      	uxtb	r3, r3
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <LL_SPI_TransmitData8>:
{
 800160a:	b480      	push	{r7}
 800160c:	b085      	sub	sp, #20
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	460b      	mov	r3, r1
 8001614:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	330c      	adds	r3, #12
 800161a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	78fa      	ldrb	r2, [r7, #3]
 8001620:	701a      	strb	r2, [r3, #0]
}
 8001622:	bf00      	nop
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <LL_GPIO_SetOutputPin>:
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	619a      	str	r2, [r3, #24]
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <LL_GPIO_ResetOutputPin>:
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
 8001652:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	041a      	lsls	r2, r3, #16
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	619a      	str	r2, [r3, #24]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <LL_AHB1_GRP1_EnableClock>:
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001670:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001672:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001674:	4907      	ldr	r1, [pc, #28]	@ (8001694 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4313      	orrs	r3, r2
 800167a:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800167c:	4b05      	ldr	r3, [pc, #20]	@ (8001694 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800167e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4013      	ands	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001686:	68fb      	ldr	r3, [r7, #12]
}
 8001688:	bf00      	nop
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	40023800 	.word	0x40023800

08001698 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80016a0:	4b08      	ldr	r3, [pc, #32]	@ (80016c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80016a4:	4907      	ldr	r1, [pc, #28]	@ (80016c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80016ac:	4b05      	ldr	r3, [pc, #20]	@ (80016c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4013      	ands	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016b6:	68fb      	ldr	r3, [r7, #12]
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	40023800 	.word	0x40023800

080016c8 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b090      	sub	sp, #64	@ 0x40
 80016cc:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80016ce:	f107 0318 	add.w	r3, r7, #24
 80016d2:	2228      	movs	r2, #40	@ 0x28
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f004 fc80 	bl	8005fdc <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	463b      	mov	r3, r7
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
 80016e8:	611a      	str	r2, [r3, #16]
 80016ea:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80016ec:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80016f0:	f7ff ffd2 	bl	8001698 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80016f4:	2001      	movs	r0, #1
 80016f6:	f7ff ffb7 	bl	8001668 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80016fa:	2004      	movs	r0, #4
 80016fc:	f7ff ffb4 	bl	8001668 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001700:	23e0      	movs	r3, #224	@ 0xe0
 8001702:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001704:	2302      	movs	r3, #2
 8001706:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001708:	2303      	movs	r3, #3
 800170a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001710:	2300      	movs	r3, #0
 8001712:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001714:	2305      	movs	r3, #5
 8001716:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001718:	463b      	mov	r3, r7
 800171a:	4619      	mov	r1, r3
 800171c:	4825      	ldr	r0, [pc, #148]	@ (80017b4 <ICM20602_GPIO_SPI_Initialization+0xec>)
 800171e:	f002 fdf0 	bl	8004302 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001722:	2300      	movs	r3, #0
 8001724:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001726:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800172a:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800172c:	2300      	movs	r3, #0
 800172e:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001730:	2302      	movs	r3, #2
 8001732:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001734:	2301      	movs	r3, #1
 8001736:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001738:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800173c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 800173e:	2310      	movs	r3, #16
 8001740:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001742:	2300      	movs	r3, #0
 8001744:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001746:	2300      	movs	r3, #0
 8001748:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 800174a:	230a      	movs	r3, #10
 800174c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 800174e:	f107 0318 	add.w	r3, r7, #24
 8001752:	4619      	mov	r1, r3
 8001754:	4818      	ldr	r0, [pc, #96]	@ (80017b8 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001756:	f002 ffb2 	bl	80046be <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800175a:	2100      	movs	r1, #0
 800175c:	4816      	ldr	r0, [pc, #88]	@ (80017b8 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800175e:	f7ff ff0d 	bl	800157c <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 8001762:	2110      	movs	r1, #16
 8001764:	4815      	ldr	r0, [pc, #84]	@ (80017bc <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001766:	f7ff ff70 	bl	800164a <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 800176a:	2310      	movs	r3, #16
 800176c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800176e:	2301      	movs	r3, #1
 8001770:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001772:	2303      	movs	r3, #3
 8001774:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 800177e:	463b      	mov	r3, r7
 8001780:	4619      	mov	r1, r3
 8001782:	480e      	ldr	r0, [pc, #56]	@ (80017bc <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001784:	f002 fdbd 	bl	8004302 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8001788:	2320      	movs	r3, #32
 800178a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800178c:	2300      	movs	r3, #0
 800178e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001790:	2301      	movs	r3, #1
 8001792:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8001794:	463b      	mov	r3, r7
 8001796:	4619      	mov	r1, r3
 8001798:	4808      	ldr	r0, [pc, #32]	@ (80017bc <ICM20602_GPIO_SPI_Initialization+0xf4>)
 800179a:	f002 fdb2 	bl	8004302 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 800179e:	4806      	ldr	r0, [pc, #24]	@ (80017b8 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80017a0:	f7ff fedc 	bl	800155c <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 80017a4:	2110      	movs	r1, #16
 80017a6:	4805      	ldr	r0, [pc, #20]	@ (80017bc <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80017a8:	f7ff ff41 	bl	800162e <LL_GPIO_SetOutputPin>
}
 80017ac:	bf00      	nop
 80017ae:	3740      	adds	r7, #64	@ 0x40
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40020000 	.word	0x40020000
 80017b8:	40013000 	.word	0x40013000
 80017bc:	40020800 	.word	0x40020800

080017c0 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 80017ca:	bf00      	nop
 80017cc:	480c      	ldr	r0, [pc, #48]	@ (8001800 <SPI1_SendByte+0x40>)
 80017ce:	f7ff fefb 	bl	80015c8 <LL_SPI_IsActiveFlag_TXE>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0f9      	beq.n	80017cc <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	4619      	mov	r1, r3
 80017dc:	4808      	ldr	r0, [pc, #32]	@ (8001800 <SPI1_SendByte+0x40>)
 80017de:	f7ff ff14 	bl	800160a <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 80017e2:	bf00      	nop
 80017e4:	4806      	ldr	r0, [pc, #24]	@ (8001800 <SPI1_SendByte+0x40>)
 80017e6:	f7ff fedc 	bl	80015a2 <LL_SPI_IsActiveFlag_RXNE>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0f9      	beq.n	80017e4 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 80017f0:	4803      	ldr	r0, [pc, #12]	@ (8001800 <SPI1_SendByte+0x40>)
 80017f2:	f7ff fefc 	bl	80015ee <LL_SPI_ReceiveData8>
 80017f6:	4603      	mov	r3, r0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40013000 	.word	0x40013000

08001804 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 800180e:	2110      	movs	r1, #16
 8001810:	480b      	ldr	r0, [pc, #44]	@ (8001840 <ICM20602_Readbyte+0x3c>)
 8001812:	f7ff ff1a 	bl	800164a <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800181c:	b2db      	uxtb	r3, r3
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ffce 	bl	80017c0 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001824:	2000      	movs	r0, #0
 8001826:	f7ff ffcb 	bl	80017c0 <SPI1_SendByte>
 800182a:	4603      	mov	r3, r0
 800182c:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 800182e:	2110      	movs	r1, #16
 8001830:	4803      	ldr	r0, [pc, #12]	@ (8001840 <ICM20602_Readbyte+0x3c>)
 8001832:	f7ff fefc 	bl	800162e <LL_GPIO_SetOutputPin>
	
	return val;
 8001836:	7bfb      	ldrb	r3, [r7, #15]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40020800 	.word	0x40020800

08001844 <ICM20602_Writebyte>:
	}
	CHIP_DESELECT(ICM20602);
}

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	460a      	mov	r2, r1
 800184e:	71fb      	strb	r3, [r7, #7]
 8001850:	4613      	mov	r3, r2
 8001852:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 8001854:	2110      	movs	r1, #16
 8001856:	480b      	ldr	r0, [pc, #44]	@ (8001884 <ICM20602_Writebyte+0x40>)
 8001858:	f7ff fef7 	bl	800164a <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001862:	b2db      	uxtb	r3, r3
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ffab 	bl	80017c0 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 800186a:	79bb      	ldrb	r3, [r7, #6]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ffa7 	bl	80017c0 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 8001872:	2110      	movs	r1, #16
 8001874:	4803      	ldr	r0, [pc, #12]	@ (8001884 <ICM20602_Writebyte+0x40>)
 8001876:	f7ff feda 	bl	800162e <LL_GPIO_SetOutputPin>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40020800 	.word	0x40020800

08001888 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8001892:	f107 0308 	add.w	r3, r7, #8
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 800189c:	463b      	mov	r3, r7
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 80018a4:	f7ff ff10 	bl	80016c8 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 80018a8:	4833      	ldr	r0, [pc, #204]	@ (8001978 <ICM20602_Initialization+0xf0>)
 80018aa:	f004 fa4f 	bl	8005d4c <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 80018ae:	2075      	movs	r0, #117	@ 0x75
 80018b0:	f7ff ffa8 	bl	8001804 <ICM20602_Readbyte>
 80018b4:	4603      	mov	r3, r0
 80018b6:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	2b12      	cmp	r3, #18
 80018bc:	d105      	bne.n	80018ca <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 80018be:	7bfb      	ldrb	r3, [r7, #15]
 80018c0:	4619      	mov	r1, r3
 80018c2:	482e      	ldr	r0, [pc, #184]	@ (800197c <ICM20602_Initialization+0xf4>)
 80018c4:	f004 fa42 	bl	8005d4c <iprintf>
 80018c8:	e012      	b.n	80018f0 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	2b12      	cmp	r3, #18
 80018ce:	d00f      	beq.n	80018f0 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 80018d0:	2075      	movs	r0, #117	@ 0x75
 80018d2:	f7ff ff97 	bl	8001804 <ICM20602_Readbyte>
 80018d6:	4603      	mov	r3, r0
 80018d8:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	2b12      	cmp	r3, #18
 80018de:	d007      	beq.n	80018f0 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	2212      	movs	r2, #18
 80018e4:	4619      	mov	r1, r3
 80018e6:	4826      	ldr	r0, [pc, #152]	@ (8001980 <ICM20602_Initialization+0xf8>)
 80018e8:	f004 fa30 	bl	8005d4c <iprintf>
			return 1; //ERROR
 80018ec:	2301      	movs	r3, #1
 80018ee:	e03f      	b.n	8001970 <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 80018f0:	2180      	movs	r1, #128	@ 0x80
 80018f2:	206b      	movs	r0, #107	@ 0x6b
 80018f4:	f7ff ffa6 	bl	8001844 <ICM20602_Writebyte>
	HAL_Delay(50);
 80018f8:	2032      	movs	r0, #50	@ 0x32
 80018fa:	f001 fe49 	bl	8003590 <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 80018fe:	2101      	movs	r1, #1
 8001900:	206b      	movs	r0, #107	@ 0x6b
 8001902:	f7ff ff9f 	bl	8001844 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 8001906:	2032      	movs	r0, #50	@ 0x32
 8001908:	f001 fe42 	bl	8003590 <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 800190c:	2138      	movs	r1, #56	@ 0x38
 800190e:	206c      	movs	r0, #108	@ 0x6c
 8001910:	f7ff ff98 	bl	8001844 <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 8001914:	2032      	movs	r0, #50	@ 0x32
 8001916:	f001 fe3b 	bl	8003590 <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 800191a:	2100      	movs	r1, #0
 800191c:	2019      	movs	r0, #25
 800191e:	f7ff ff91 	bl	8001844 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001922:	2032      	movs	r0, #50	@ 0x32
 8001924:	f001 fe34 	bl	8003590 <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8001928:	2105      	movs	r1, #5
 800192a:	201a      	movs	r0, #26
 800192c:	f7ff ff8a 	bl	8001844 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001930:	2032      	movs	r0, #50	@ 0x32
 8001932:	f001 fe2d 	bl	8003590 <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8001936:	2118      	movs	r1, #24
 8001938:	201b      	movs	r0, #27
 800193a:	f7ff ff83 	bl	8001844 <ICM20602_Writebyte>
	HAL_Delay(50);
 800193e:	2032      	movs	r0, #50	@ 0x32
 8001940:	f001 fe26 	bl	8003590 <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8001944:	2118      	movs	r1, #24
 8001946:	201c      	movs	r0, #28
 8001948:	f7ff ff7c 	bl	8001844 <ICM20602_Writebyte>
	HAL_Delay(50);
 800194c:	2032      	movs	r0, #50	@ 0x32
 800194e:	f001 fe1f 	bl	8003590 <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8001952:	2103      	movs	r1, #3
 8001954:	201d      	movs	r0, #29
 8001956:	f7ff ff75 	bl	8001844 <ICM20602_Writebyte>
	HAL_Delay(50);
 800195a:	2032      	movs	r0, #50	@ 0x32
 800195c:	f001 fe18 	bl	8003590 <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8001960:	2101      	movs	r1, #1
 8001962:	2038      	movs	r0, #56	@ 0x38
 8001964:	f7ff ff6e 	bl	8001844 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001968:	2032      	movs	r0, #50	@ 0x32
 800196a:	f001 fe11 	bl	8003590 <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	08007dc4 	.word	0x08007dc4
 800197c:	08007ddc 	.word	0x08007ddc
 8001980:	08007e00 	.word	0x08007e00

08001984 <LL_SPI_Enable>:
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	601a      	str	r2, [r3, #0]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_SPI_SetStandard>:
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f023 0210 	bic.w	r2, r3, #16
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	431a      	orrs	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	605a      	str	r2, [r3, #4]
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <LL_SPI_IsActiveFlag_RXNE>:
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d101      	bne.n	80019e2 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <LL_SPI_IsActiveFlag_TXE>:
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d101      	bne.n	8001a08 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <LL_SPI_ReceiveData8>:
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	330c      	adds	r3, #12
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	b2db      	uxtb	r3, r3
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <LL_SPI_TransmitData8>:
{
 8001a32:	b480      	push	{r7}
 8001a34:	b085      	sub	sp, #20
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	330c      	adds	r3, #12
 8001a42:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	78fa      	ldrb	r2, [r7, #3]
 8001a48:	701a      	strb	r2, [r3, #0]
}
 8001a4a:	bf00      	nop
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <LL_GPIO_SetOutputPin>:
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
 8001a5e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	619a      	str	r2, [r3, #24]
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <LL_GPIO_ResetOutputPin>:
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	041a      	lsls	r2, r3, #16
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	619a      	str	r2, [r3, #24]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <LL_AHB1_GRP1_EnableClock>:
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001a98:	4b08      	ldr	r3, [pc, #32]	@ (8001abc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a9c:	4907      	ldr	r1, [pc, #28]	@ (8001abc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001aa4:	4b05      	ldr	r3, [pc, #20]	@ (8001abc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001aa6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aae:	68fb      	ldr	r3, [r7, #12]
}
 8001ab0:	bf00      	nop
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	40023800 	.word	0x40023800

08001ac0 <LL_APB1_GRP1_EnableClock>:
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001ac8:	4b08      	ldr	r3, [pc, #32]	@ (8001aec <LL_APB1_GRP1_EnableClock+0x2c>)
 8001aca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001acc:	4907      	ldr	r1, [pc, #28]	@ (8001aec <LL_APB1_GRP1_EnableClock+0x2c>)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001ad4:	4b05      	ldr	r3, [pc, #20]	@ (8001aec <LL_APB1_GRP1_EnableClock+0x2c>)
 8001ad6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4013      	ands	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ade:	68fb      	ldr	r3, [r7, #12]
}
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	40023800 	.word	0x40023800

08001af0 <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b090      	sub	sp, #64	@ 0x40
 8001af4:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001af6:	f107 0318 	add.w	r3, r7, #24
 8001afa:	2228      	movs	r2, #40	@ 0x28
 8001afc:	2100      	movs	r1, #0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f004 fa6c 	bl	8005fdc <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	463b      	mov	r3, r7
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	60da      	str	r2, [r3, #12]
 8001b10:	611a      	str	r2, [r3, #16]
 8001b12:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8001b14:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001b18:	f7ff ffd2 	bl	8001ac0 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001b1c:	2002      	movs	r0, #2
 8001b1e:	f7ff ffb7 	bl	8001a90 <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8001b22:	2338      	movs	r3, #56	@ 0x38
 8001b24:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001b26:	2302      	movs	r3, #2
 8001b28:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001b36:	2306      	movs	r3, #6
 8001b38:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3a:	463b      	mov	r3, r7
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4826      	ldr	r0, [pc, #152]	@ (8001bd8 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001b40:	f002 fbdf 	bl	8004302 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001b48:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001b4c:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001b52:	2302      	movs	r3, #2
 8001b54:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001b56:	2301      	movs	r3, #1
 8001b58:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001b5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8001b60:	2308      	movs	r3, #8
 8001b62:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001b64:	2300      	movs	r3, #0
 8001b66:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001b6c:	230a      	movs	r3, #10
 8001b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 8001b70:	f107 0318 	add.w	r3, r7, #24
 8001b74:	4619      	mov	r1, r3
 8001b76:	4819      	ldr	r0, [pc, #100]	@ (8001bdc <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8001b78:	f002 fda1 	bl	80046be <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	4817      	ldr	r0, [pc, #92]	@ (8001bdc <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8001b80:	f7ff ff10 	bl	80019a4 <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 8001b84:	2140      	movs	r1, #64	@ 0x40
 8001b86:	4814      	ldr	r0, [pc, #80]	@ (8001bd8 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001b88:	f7ff ff73 	bl	8001a72 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 8001b8c:	2340      	movs	r3, #64	@ 0x40
 8001b8e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b90:	2301      	movs	r3, #1
 8001b92:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001b94:	2303      	movs	r3, #3
 8001b96:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 8001ba0:	463b      	mov	r3, r7
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	480c      	ldr	r0, [pc, #48]	@ (8001bd8 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001ba6:	f002 fbac 	bl	8004302 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 8001baa:	2380      	movs	r3, #128	@ 0x80
 8001bac:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 8001bb6:	463b      	mov	r3, r7
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4807      	ldr	r0, [pc, #28]	@ (8001bd8 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001bbc:	f002 fba1 	bl	8004302 <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 8001bc0:	4806      	ldr	r0, [pc, #24]	@ (8001bdc <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8001bc2:	f7ff fedf 	bl	8001984 <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 8001bc6:	2140      	movs	r1, #64	@ 0x40
 8001bc8:	4803      	ldr	r0, [pc, #12]	@ (8001bd8 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001bca:	f7ff ff44 	bl	8001a56 <LL_GPIO_SetOutputPin>
}
 8001bce:	bf00      	nop
 8001bd0:	3740      	adds	r7, #64	@ 0x40
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40020400 	.word	0x40020400
 8001bdc:	40003c00 	.word	0x40003c00

08001be0 <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 8001bea:	bf00      	nop
 8001bec:	480c      	ldr	r0, [pc, #48]	@ (8001c20 <SPI3_SendByte+0x40>)
 8001bee:	f7ff feff 	bl	80019f0 <LL_SPI_IsActiveFlag_TXE>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0f9      	beq.n	8001bec <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4808      	ldr	r0, [pc, #32]	@ (8001c20 <SPI3_SendByte+0x40>)
 8001bfe:	f7ff ff18 	bl	8001a32 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 8001c02:	bf00      	nop
 8001c04:	4806      	ldr	r0, [pc, #24]	@ (8001c20 <SPI3_SendByte+0x40>)
 8001c06:	f7ff fee0 	bl	80019ca <LL_SPI_IsActiveFlag_RXNE>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0f9      	beq.n	8001c04 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 8001c10:	4803      	ldr	r0, [pc, #12]	@ (8001c20 <SPI3_SendByte+0x40>)
 8001c12:	f7ff ff00 	bl	8001a16 <LL_SPI_ReceiveData8>
 8001c16:	4603      	mov	r3, r0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40003c00 	.word	0x40003c00

08001c24 <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 8001c2e:	2140      	movs	r1, #64	@ 0x40
 8001c30:	480b      	ldr	r0, [pc, #44]	@ (8001c60 <LPS22HH_Readbyte+0x3c>)
 8001c32:	f7ff ff1e 	bl	8001a72 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff ffce 	bl	8001be0 <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 8001c44:	2000      	movs	r0, #0
 8001c46:	f7ff ffcb 	bl	8001be0 <SPI3_SendByte>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 8001c4e:	2140      	movs	r1, #64	@ 0x40
 8001c50:	4803      	ldr	r0, [pc, #12]	@ (8001c60 <LPS22HH_Readbyte+0x3c>)
 8001c52:	f7ff ff00 	bl	8001a56 <LL_GPIO_SetOutputPin>
	
	return val;
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40020400 	.word	0x40020400

08001c64 <LPS22HH_Writebyte>:
	}
	CHIP_DESELECT(LPS22HH);
}

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	460a      	mov	r2, r1
 8001c6e:	71fb      	strb	r3, [r7, #7]
 8001c70:	4613      	mov	r3, r2
 8001c72:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 8001c74:	2140      	movs	r1, #64	@ 0x40
 8001c76:	480b      	ldr	r0, [pc, #44]	@ (8001ca4 <LPS22HH_Writebyte+0x40>)
 8001c78:	f7ff fefb 	bl	8001a72 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
 8001c7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ffab 	bl	8001be0 <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 8001c8a:	79bb      	ldrb	r3, [r7, #6]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff ffa7 	bl	8001be0 <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 8001c92:	2140      	movs	r1, #64	@ 0x40
 8001c94:	4803      	ldr	r0, [pc, #12]	@ (8001ca4 <LPS22HH_Writebyte+0x40>)
 8001c96:	f7ff fede 	bl	8001a56 <LL_GPIO_SetOutputPin>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40020400 	.word	0x40020400

08001ca8 <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 8001cb2:	f7ff ff1d 	bl	8001af0 <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 8001cb6:	4841      	ldr	r0, [pc, #260]	@ (8001dbc <LPS22HH_Initialization+0x114>)
 8001cb8:	f004 f848 	bl	8005d4c <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 8001cbc:	200f      	movs	r0, #15
 8001cbe:	f7ff ffb1 	bl	8001c24 <LPS22HH_Readbyte>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	2bb3      	cmp	r3, #179	@ 0xb3
 8001cca:	d105      	bne.n	8001cd8 <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	4619      	mov	r1, r3
 8001cd0:	483b      	ldr	r0, [pc, #236]	@ (8001dc0 <LPS22HH_Initialization+0x118>)
 8001cd2:	f004 f83b 	bl	8005d4c <iprintf>
 8001cd6:	e012      	b.n	8001cfe <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	2bb3      	cmp	r3, #179	@ 0xb3
 8001cdc:	d00f      	beq.n	8001cfe <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 8001cde:	200f      	movs	r0, #15
 8001ce0:	f7ff ffa0 	bl	8001c24 <LPS22HH_Readbyte>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	2bb3      	cmp	r3, #179	@ 0xb3
 8001cec:	d007      	beq.n	8001cfe <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	22b3      	movs	r2, #179	@ 0xb3
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4833      	ldr	r0, [pc, #204]	@ (8001dc4 <LPS22HH_Initialization+0x11c>)
 8001cf6:	f004 f829 	bl	8005d4c <iprintf>
			return 1; //ERROR
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e059      	b.n	8001db2 <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 8001cfe:	2104      	movs	r1, #4
 8001d00:	2011      	movs	r0, #17
 8001d02:	f7ff ffaf 	bl	8001c64 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 8001d06:	2011      	movs	r0, #17
 8001d08:	f7ff ff8c 	bl	8001c24 <LPS22HH_Readbyte>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f7      	bne.n	8001d06 <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001d16:	2010      	movs	r0, #16
 8001d18:	f7ff ff84 	bl	8001c24 <LPS22HH_Readbyte>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 8001d20:	79bb      	ldrb	r3, [r7, #6]
 8001d22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d26:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001d28:	79bb      	ldrb	r3, [r7, #6]
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	2010      	movs	r0, #16
 8001d2e:	f7ff ff99 	bl	8001c64 <LPS22HH_Writebyte>
	temp_reg = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001d36:	2010      	movs	r0, #16
 8001d38:	f7ff ff74 	bl	8001c24 <LPS22HH_Readbyte>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001d40:	2010      	movs	r0, #16
 8001d42:	f7ff ff6f 	bl	8001c24 <LPS22HH_Readbyte>
 8001d46:	4603      	mov	r3, r0
 8001d48:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 8001d4a:	79bb      	ldrb	r3, [r7, #6]
 8001d4c:	f043 030c 	orr.w	r3, r3, #12
 8001d50:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001d52:	79bb      	ldrb	r3, [r7, #6]
 8001d54:	4619      	mov	r1, r3
 8001d56:	2010      	movs	r0, #16
 8001d58:	f7ff ff84 	bl	8001c64 <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001d5c:	2010      	movs	r0, #16
 8001d5e:	f7ff ff61 	bl	8001c24 <LPS22HH_Readbyte>
 8001d62:	4603      	mov	r3, r0
 8001d64:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8001d66:	79bb      	ldrb	r3, [r7, #6]
 8001d68:	f043 0302 	orr.w	r3, r3, #2
 8001d6c:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001d6e:	79bb      	ldrb	r3, [r7, #6]
 8001d70:	4619      	mov	r1, r3
 8001d72:	2010      	movs	r0, #16
 8001d74:	f7ff ff76 	bl	8001c64 <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 8001d78:	2011      	movs	r0, #17
 8001d7a:	f7ff ff53 	bl	8001c24 <LPS22HH_Readbyte>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8001d82:	79bb      	ldrb	r3, [r7, #6]
 8001d84:	f043 0302 	orr.w	r3, r3, #2
 8001d88:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 8001d8a:	79bb      	ldrb	r3, [r7, #6]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	2011      	movs	r0, #17
 8001d90:	f7ff ff68 	bl	8001c64 <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 8001d94:	2012      	movs	r0, #18
 8001d96:	f7ff ff45 	bl	8001c24 <LPS22HH_Readbyte>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 8001d9e:	79bb      	ldrb	r3, [r7, #6]
 8001da0:	f043 0304 	orr.w	r3, r3, #4
 8001da4:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 8001da6:	79bb      	ldrb	r3, [r7, #6]
 8001da8:	4619      	mov	r1, r3
 8001daa:	2012      	movs	r0, #18
 8001dac:	f7ff ff5a 	bl	8001c64 <LPS22HH_Writebyte>
	
	return 0; //OK
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	08007e2c 	.word	0x08007e2c
 8001dc0:	08007e40 	.word	0x08007e40
 8001dc4:	08007e64 	.word	0x08007e64

08001dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dcc:	4b04      	ldr	r3, [pc, #16]	@ (8001de0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	0a1b      	lsrs	r3, r3, #8
 8001dd2:	f003 0307 	and.w	r3, r3, #7
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	db0b      	blt.n	8001e0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	f003 021f 	and.w	r2, r3, #31
 8001dfc:	4907      	ldr	r1, [pc, #28]	@ (8001e1c <__NVIC_EnableIRQ+0x38>)
 8001dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e02:	095b      	lsrs	r3, r3, #5
 8001e04:	2001      	movs	r0, #1
 8001e06:	fa00 f202 	lsl.w	r2, r0, r2
 8001e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	e000e100 	.word	0xe000e100

08001e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	6039      	str	r1, [r7, #0]
 8001e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	db0a      	blt.n	8001e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	490c      	ldr	r1, [pc, #48]	@ (8001e6c <__NVIC_SetPriority+0x4c>)
 8001e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3e:	0112      	lsls	r2, r2, #4
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	440b      	add	r3, r1
 8001e44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e48:	e00a      	b.n	8001e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	4908      	ldr	r1, [pc, #32]	@ (8001e70 <__NVIC_SetPriority+0x50>)
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	3b04      	subs	r3, #4
 8001e58:	0112      	lsls	r2, r2, #4
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	761a      	strb	r2, [r3, #24]
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000e100 	.word	0xe000e100
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b089      	sub	sp, #36	@ 0x24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f1c3 0307 	rsb	r3, r3, #7
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	bf28      	it	cs
 8001e92:	2304      	movcs	r3, #4
 8001e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	3304      	adds	r3, #4
 8001e9a:	2b06      	cmp	r3, #6
 8001e9c:	d902      	bls.n	8001ea4 <NVIC_EncodePriority+0x30>
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	3b03      	subs	r3, #3
 8001ea2:	e000      	b.n	8001ea6 <NVIC_EncodePriority+0x32>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43da      	mvns	r2, r3
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec6:	43d9      	mvns	r1, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ecc:	4313      	orrs	r3, r2
         );
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3724      	adds	r7, #36	@ 0x24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	60da      	str	r2, [r3, #12]
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	615a      	str	r2, [r3, #20]
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f36:	2b80      	cmp	r3, #128	@ 0x80
 8001f38:	bf0c      	ite	eq
 8001f3a:	2301      	moveq	r3, #1
 8001f3c:	2300      	movne	r3, #0
 8001f3e:	b2db      	uxtb	r3, r3
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001f58:	78fa      	ldrb	r2, [r7, #3]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	605a      	str	r2, [r3, #4]
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
	...

08001f6c <LL_AHB1_GRP1_EnableClock>:
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001f74:	4b08      	ldr	r3, [pc, #32]	@ (8001f98 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f78:	4907      	ldr	r1, [pc, #28]	@ (8001f98 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001f80:	4b05      	ldr	r3, [pc, #20]	@ (8001f98 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4013      	ands	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	40023800 	.word	0x40023800

08001f9c <LL_APB1_GRP1_EnableClock>:
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001fa4:	4b08      	ldr	r3, [pc, #32]	@ (8001fc8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fa6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001fa8:	4907      	ldr	r1, [pc, #28]	@ (8001fc8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001fb0:	4b05      	ldr	r3, [pc, #20]	@ (8001fc8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fba:	68fb      	ldr	r3, [r7, #12]
}
 8001fbc:	bf00      	nop
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	40023800 	.word	0x40023800

08001fcc <M8N_TransmitData>:
 0xBF
}; //Save current configuration, Devices: BBR, FLASH, I2C-EEPROM, SPI-FLASH


void M8N_TransmitData(unsigned char* data, unsigned char len)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	70fb      	strb	r3, [r7, #3]
	for(int i=0; i<len; i++)
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	e011      	b.n	8002002 <M8N_TransmitData+0x36>
	{
		while(!LL_USART_IsActiveFlag_TXE(UART4));
 8001fde:	bf00      	nop
 8001fe0:	480c      	ldr	r0, [pc, #48]	@ (8002014 <M8N_TransmitData+0x48>)
 8001fe2:	f7ff ffa0 	bl	8001f26 <LL_USART_IsActiveFlag_TXE>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0f9      	beq.n	8001fe0 <M8N_TransmitData+0x14>
		LL_USART_TransmitData8(UART4, *(data+i));
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4807      	ldr	r0, [pc, #28]	@ (8002014 <M8N_TransmitData+0x48>)
 8001ff8:	f7ff ffa8 	bl	8001f4c <LL_USART_TransmitData8>
	for(int i=0; i<len; i++)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	3301      	adds	r3, #1
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	78fb      	ldrb	r3, [r7, #3]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	429a      	cmp	r2, r3
 8002008:	dbe9      	blt.n	8001fde <M8N_TransmitData+0x12>
	}
}
 800200a:	bf00      	nop
 800200c:	bf00      	nop
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40004c00 	.word	0x40004c00

08002018 <M8N_Initialization>:

void M8N_Initialization(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
	N8M_UART4_Initialization();
 800201c:	f000 f824 	bl	8002068 <N8M_UART4_Initialization>

	M8N_TransmitData(&UBX_CFG_PRT[0], sizeof(UBX_CFG_PRT));
 8002020:	211c      	movs	r1, #28
 8002022:	480d      	ldr	r0, [pc, #52]	@ (8002058 <M8N_Initialization+0x40>)
 8002024:	f7ff ffd2 	bl	8001fcc <M8N_TransmitData>
	HAL_Delay(100);
 8002028:	2064      	movs	r0, #100	@ 0x64
 800202a:	f001 fab1 	bl	8003590 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_MSG[0], sizeof(UBX_CFG_MSG));
 800202e:	2110      	movs	r1, #16
 8002030:	480a      	ldr	r0, [pc, #40]	@ (800205c <M8N_Initialization+0x44>)
 8002032:	f7ff ffcb 	bl	8001fcc <M8N_TransmitData>
	HAL_Delay(100);
 8002036:	2064      	movs	r0, #100	@ 0x64
 8002038:	f001 faaa 	bl	8003590 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_RATE[0], sizeof(UBX_CFG_RATE));
 800203c:	210e      	movs	r1, #14
 800203e:	4808      	ldr	r0, [pc, #32]	@ (8002060 <M8N_Initialization+0x48>)
 8002040:	f7ff ffc4 	bl	8001fcc <M8N_TransmitData>
	HAL_Delay(100);
 8002044:	2064      	movs	r0, #100	@ 0x64
 8002046:	f001 faa3 	bl	8003590 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_CFG[0], sizeof(UBX_CFG_CFG));
 800204a:	2115      	movs	r1, #21
 800204c:	4805      	ldr	r0, [pc, #20]	@ (8002064 <M8N_Initialization+0x4c>)
 800204e:	f7ff ffbd 	bl	8001fcc <M8N_TransmitData>
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	08007eb4 	.word	0x08007eb4
 800205c:	08007ed0 	.word	0x08007ed0
 8002060:	08007ee0 	.word	0x08007ee0
 8002064:	08007ef0 	.word	0x08007ef0

08002068 <N8M_UART4_Initialization>:

void N8M_UART4_Initialization(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08e      	sub	sp, #56	@ 0x38
 800206c:	af00      	add	r7, sp, #0
	  LL_USART_InitTypeDef USART_InitStruct = {0};
 800206e:	f107 031c 	add.w	r3, r7, #28
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	605a      	str	r2, [r3, #4]
 8002078:	609a      	str	r2, [r3, #8]
 800207a:	60da      	str	r2, [r3, #12]
 800207c:	611a      	str	r2, [r3, #16]
 800207e:	615a      	str	r2, [r3, #20]
 8002080:	619a      	str	r2, [r3, #24]

	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
 8002090:	615a      	str	r2, [r3, #20]

	  /* Peripheral clock enable */
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8002092:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002096:	f7ff ff81 	bl	8001f9c <LL_APB1_GRP1_EnableClock>

	  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800209a:	2004      	movs	r0, #4
 800209c:	f7ff ff66 	bl	8001f6c <LL_AHB1_GRP1_EnableClock>
	  /**UART4 GPIO Configuration
	  PC10   ------> UART4_TX
	  PC11   ------> UART4_RX
	  */
	  GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 80020a0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80020a4:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80020a6:	2302      	movs	r3, #2
 80020a8:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80020aa:	2303      	movs	r3, #3
 80020ac:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80020b6:	2308      	movs	r3, #8
 80020b8:	61bb      	str	r3, [r7, #24]
	  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ba:	1d3b      	adds	r3, r7, #4
 80020bc:	4619      	mov	r1, r3
 80020be:	4819      	ldr	r0, [pc, #100]	@ (8002124 <N8M_UART4_Initialization+0xbc>)
 80020c0:	f002 f91f 	bl	8004302 <LL_GPIO_Init>

	  /* UART4 interrupt Init */
	  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80020c4:	f7ff fe80 	bl	8001dc8 <__NVIC_GetPriorityGrouping>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2200      	movs	r2, #0
 80020cc:	2100      	movs	r1, #0
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff fed0 	bl	8001e74 <NVIC_EncodePriority>
 80020d4:	4603      	mov	r3, r0
 80020d6:	4619      	mov	r1, r3
 80020d8:	2034      	movs	r0, #52	@ 0x34
 80020da:	f7ff fea1 	bl	8001e20 <__NVIC_SetPriority>
	  NVIC_EnableIRQ(UART4_IRQn);
 80020de:	2034      	movs	r0, #52	@ 0x34
 80020e0:	f7ff fe80 	bl	8001de4 <__NVIC_EnableIRQ>

	  /* USER CODE BEGIN UART4_Init 1 */

	  /* USER CODE END UART4_Init 1 */
	  USART_InitStruct.BaudRate = 9600;
 80020e4:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 80020e8:	61fb      	str	r3, [r7, #28]
	  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80020ea:	2300      	movs	r3, #0
 80020ec:	623b      	str	r3, [r7, #32]
	  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80020ee:	2300      	movs	r3, #0
 80020f0:	627b      	str	r3, [r7, #36]	@ 0x24
	  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	62bb      	str	r3, [r7, #40]	@ 0x28
	  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80020f6:	230c      	movs	r3, #12
 80020f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	633b      	str	r3, [r7, #48]	@ 0x30
	  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80020fe:	2300      	movs	r3, #0
 8002100:	637b      	str	r3, [r7, #52]	@ 0x34
	  LL_USART_Init(UART4, &USART_InitStruct);
 8002102:	f107 031c 	add.w	r3, r7, #28
 8002106:	4619      	mov	r1, r3
 8002108:	4807      	ldr	r0, [pc, #28]	@ (8002128 <N8M_UART4_Initialization+0xc0>)
 800210a:	f003 f885 	bl	8005218 <LL_USART_Init>
	  LL_USART_ConfigAsyncMode(UART4);
 800210e:	4806      	ldr	r0, [pc, #24]	@ (8002128 <N8M_UART4_Initialization+0xc0>)
 8002110:	f7ff fef3 	bl	8001efa <LL_USART_ConfigAsyncMode>
	  LL_USART_Enable(UART4);
 8002114:	4804      	ldr	r0, [pc, #16]	@ (8002128 <N8M_UART4_Initialization+0xc0>)
 8002116:	f7ff fee0 	bl	8001eda <LL_USART_Enable>
}
 800211a:	bf00      	nop
 800211c:	3738      	adds	r7, #56	@ 0x38
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40020800 	.word	0x40020800
 8002128:	40004c00 	.word	0x40004c00

0800212c <M8N_UBX_CHKSUM>:

unsigned char M8N_UBX_CHKSUM(unsigned char* data, unsigned char len)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	70fb      	strb	r3, [r7, #3]
	unsigned char CK_A = 0, CK_B =0;
 8002138:	2300      	movs	r3, #0
 800213a:	73fb      	strb	r3, [r7, #15]
 800213c:	2300      	movs	r3, #0
 800213e:	73bb      	strb	r3, [r7, #14]

	for(int i=2; i< len-2; i++)
 8002140:	2302      	movs	r3, #2
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	e00d      	b.n	8002162 <M8N_UBX_CHKSUM+0x36>
	{
		CK_A = CK_A + data[i];
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	4413      	add	r3, r2
 800214c:	781a      	ldrb	r2, [r3, #0]
 800214e:	7bfb      	ldrb	r3, [r7, #15]
 8002150:	4413      	add	r3, r2
 8002152:	73fb      	strb	r3, [r7, #15]
		CK_B = CK_B + CK_A;
 8002154:	7bba      	ldrb	r2, [r7, #14]
 8002156:	7bfb      	ldrb	r3, [r7, #15]
 8002158:	4413      	add	r3, r2
 800215a:	73bb      	strb	r3, [r7, #14]
	for(int i=2; i< len-2; i++)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	3301      	adds	r3, #1
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	78fb      	ldrb	r3, [r7, #3]
 8002164:	3b02      	subs	r3, #2
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	429a      	cmp	r2, r3
 800216a:	dbec      	blt.n	8002146 <M8N_UBX_CHKSUM+0x1a>
	}
	return (CK_A == data[len-2] && CK_B == data[len-1]);
 800216c:	78fb      	ldrb	r3, [r7, #3]
 800216e:	3b02      	subs	r3, #2
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	4413      	add	r3, r2
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	7bfa      	ldrb	r2, [r7, #15]
 8002178:	429a      	cmp	r2, r3
 800217a:	d109      	bne.n	8002190 <M8N_UBX_CHKSUM+0x64>
 800217c:	78fb      	ldrb	r3, [r7, #3]
 800217e:	3b01      	subs	r3, #1
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	4413      	add	r3, r2
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	7bba      	ldrb	r2, [r7, #14]
 8002188:	429a      	cmp	r2, r3
 800218a:	d101      	bne.n	8002190 <M8N_UBX_CHKSUM+0x64>
 800218c:	2301      	movs	r3, #1
 800218e:	e000      	b.n	8002192 <M8N_UBX_CHKSUM+0x66>
 8002190:	2300      	movs	r3, #0
 8002192:	b2db      	uxtb	r3, r3
}
 8002194:	4618      	mov	r0, r3
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <M8N_UBX_POSLLH_Parsing>:

void M8N_UBX_POSLLH_Parsing(unsigned char* data, M8N_UBX_NAV_POSLLH* posllh)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
	posllh->CLASS 	= 	data[2];
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	789a      	ldrb	r2, [r3, #2]
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	701a      	strb	r2, [r3, #0]
	posllh->ID 		= 	data[3];
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	78da      	ldrb	r2, [r3, #3]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	705a      	strb	r2, [r3, #1]
	posllh->LENGTH  =	data[4] | data[5] <<8;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	3304      	adds	r3, #4
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	b21a      	sxth	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3305      	adds	r3, #5
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	021b      	lsls	r3, r3, #8
 80021ca:	b21b      	sxth	r3, r3
 80021cc:	4313      	orrs	r3, r2
 80021ce:	b21b      	sxth	r3, r3
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	805a      	strh	r2, [r3, #2]

	posllh->iTOW	=	data[6]  | data[7]  << 8 | data[8]  << 16 | data[9]  << 24;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3306      	adds	r3, #6
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3307      	adds	r3, #7
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	021b      	lsls	r3, r3, #8
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3308      	adds	r3, #8
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	041b      	lsls	r3, r3, #16
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3309      	adds	r3, #9
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	061b      	lsls	r3, r3, #24
 80021fa:	4313      	orrs	r3, r2
 80021fc:	461a      	mov	r2, r3
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	605a      	str	r2, [r3, #4]
	posllh->lon		=	data[10] | data[11] << 8 | data[12] << 16 | data[13] << 24;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	330a      	adds	r3, #10
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	461a      	mov	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	330b      	adds	r3, #11
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	021b      	lsls	r3, r3, #8
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	330c      	adds	r3, #12
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	041b      	lsls	r3, r3, #16
 800221c:	431a      	orrs	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	330d      	adds	r3, #13
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	061b      	lsls	r3, r3, #24
 8002226:	431a      	orrs	r2, r3
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	609a      	str	r2, [r3, #8]
	posllh->lat		=	data[14] | data[15] << 8 | data[16] << 16 | data[17] << 24;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	330e      	adds	r3, #14
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	330f      	adds	r3, #15
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	021b      	lsls	r3, r3, #8
 800223c:	431a      	orrs	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3310      	adds	r3, #16
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	041b      	lsls	r3, r3, #16
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3311      	adds	r3, #17
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	061b      	lsls	r3, r3, #24
 8002250:	431a      	orrs	r2, r3
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	60da      	str	r2, [r3, #12]
	posllh->height	=	data[18] | data[19] << 8 | data[20] << 16 | data[21] << 24;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3312      	adds	r3, #18
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	461a      	mov	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3313      	adds	r3, #19
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	021b      	lsls	r3, r3, #8
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3314      	adds	r3, #20
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	041b      	lsls	r3, r3, #16
 8002270:	431a      	orrs	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3315      	adds	r3, #21
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	061b      	lsls	r3, r3, #24
 800227a:	431a      	orrs	r2, r3
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	611a      	str	r2, [r3, #16]
	posllh->hMSL	=	data[22] | data[23] << 8 | data[24] << 16 | data[25] << 24;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3316      	adds	r3, #22
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3317      	adds	r3, #23
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	021b      	lsls	r3, r3, #8
 8002290:	431a      	orrs	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3318      	adds	r3, #24
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	041b      	lsls	r3, r3, #16
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3319      	adds	r3, #25
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	061b      	lsls	r3, r3, #24
 80022a4:	431a      	orrs	r2, r3
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	615a      	str	r2, [r3, #20]
	posllh->hAcc	=	data[26] | data[27] << 8 | data[28] << 16 | data[29] << 24;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	331a      	adds	r3, #26
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	461a      	mov	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	331b      	adds	r3, #27
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	021b      	lsls	r3, r3, #8
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	331c      	adds	r3, #28
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	041b      	lsls	r3, r3, #16
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	331d      	adds	r3, #29
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	061b      	lsls	r3, r3, #24
 80022ce:	4313      	orrs	r3, r2
 80022d0:	461a      	mov	r2, r3
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	619a      	str	r2, [r3, #24]
	posllh->vAcc	=	data[30] | data[31] << 8 | data[32] << 16 | data[33] << 24;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	331e      	adds	r3, #30
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	461a      	mov	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	331f      	adds	r3, #31
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	021b      	lsls	r3, r3, #8
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3320      	adds	r3, #32
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	041b      	lsls	r3, r3, #16
 80022f0:	431a      	orrs	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	3321      	adds	r3, #33	@ 0x21
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	061b      	lsls	r3, r3, #24
 80022fa:	4313      	orrs	r3, r2
 80022fc:	461a      	mov	r2, r3
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	61da      	str	r2, [r3, #28]

//	posllh->lon_f64 =  posllh->lon / 10000000.;
//	posllh->lat_f64 =  posllh->lat / 10000000.;

}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <LL_GPIO_ResetOutputPin>:
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	041a      	lsls	r2, r3, #16
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	619a      	str	r2, [r3, #24]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <LL_AHB1_GRP1_EnableClock>:
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002334:	4b08      	ldr	r3, [pc, #32]	@ (8002358 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002336:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002338:	4907      	ldr	r1, [pc, #28]	@ (8002358 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4313      	orrs	r3, r2
 800233e:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002340:	4b05      	ldr	r3, [pc, #20]	@ (8002358 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002342:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4013      	ands	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800234a:	68fb      	ldr	r3, [r7, #12]
}
 800234c:	bf00      	nop
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	40023800 	.word	0x40023800

0800235c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002362:	463b      	mov	r3, r7
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	611a      	str	r2, [r3, #16]
 8002370:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8002372:	2080      	movs	r0, #128	@ 0x80
 8002374:	f7ff ffda 	bl	800232c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002378:	2004      	movs	r0, #4
 800237a:	f7ff ffd7 	bl	800232c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800237e:	2001      	movs	r0, #1
 8002380:	f7ff ffd4 	bl	800232c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002384:	2002      	movs	r0, #2
 8002386:	f7ff ffd1 	bl	800232c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4
 800238a:	f240 2117 	movw	r1, #535	@ 0x217
 800238e:	482c      	ldr	r0, [pc, #176]	@ (8002440 <MX_GPIO_Init+0xe4>)
 8002390:	f7ff ffbd 	bl	800230e <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_6);
 8002394:	f44f 5182 	mov.w	r1, #4160	@ 0x1040
 8002398:	482a      	ldr	r0, [pc, #168]	@ (8002444 <MX_GPIO_Init+0xe8>)
 800239a:	f7ff ffb8 	bl	800230e <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 800239e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023a2:	4829      	ldr	r0, [pc, #164]	@ (8002448 <MX_GPIO_Init+0xec>)
 80023a4:	f7ff ffb3 	bl	800230e <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4
 80023a8:	f240 2317 	movw	r3, #535	@ 0x217
 80023ac:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80023ae:	2301      	movs	r3, #1
 80023b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80023b2:	2300      	movs	r3, #0
 80023b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023be:	463b      	mov	r3, r7
 80023c0:	4619      	mov	r1, r3
 80023c2:	481f      	ldr	r0, [pc, #124]	@ (8002440 <MX_GPIO_Init+0xe4>)
 80023c4:	f001 ff9d 	bl	8004302 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_8;
 80023c8:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80023cc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80023ce:	2300      	movs	r3, #0
 80023d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023d6:	463b      	mov	r3, r7
 80023d8:	4619      	mov	r1, r3
 80023da:	4819      	ldr	r0, [pc, #100]	@ (8002440 <MX_GPIO_Init+0xe4>)
 80023dc:	f001 ff91 	bl	8004302 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_6;
 80023e0:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 80023e4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80023e6:	2301      	movs	r3, #1
 80023e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80023ea:	2300      	movs	r3, #0
 80023ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f6:	463b      	mov	r3, r7
 80023f8:	4619      	mov	r1, r3
 80023fa:	4812      	ldr	r0, [pc, #72]	@ (8002444 <MX_GPIO_Init+0xe8>)
 80023fc:	f001 ff81 	bl	8004302 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8002400:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002404:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002406:	2301      	movs	r3, #1
 8002408:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800240a:	2300      	movs	r3, #0
 800240c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002412:	2300      	movs	r3, #0
 8002414:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002416:	463b      	mov	r3, r7
 8002418:	4619      	mov	r1, r3
 800241a:	480b      	ldr	r0, [pc, #44]	@ (8002448 <MX_GPIO_Init+0xec>)
 800241c:	f001 ff71 	bl	8004302 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8002420:	2380      	movs	r3, #128	@ 0x80
 8002422:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002424:	2300      	movs	r3, #0
 8002426:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002428:	2300      	movs	r3, #0
 800242a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800242c:	463b      	mov	r3, r7
 800242e:	4619      	mov	r1, r3
 8002430:	4804      	ldr	r0, [pc, #16]	@ (8002444 <MX_GPIO_Init+0xe8>)
 8002432:	f001 ff66 	bl	8004302 <LL_GPIO_Init>

}
 8002436:	bf00      	nop
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40020800 	.word	0x40020800
 8002444:	40020400 	.word	0x40020400
 8002448:	40020000 	.word	0x40020000

0800244c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f043 0201 	orr.w	r2, r3, #1
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	601a      	str	r2, [r3, #0]
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a1a      	ldr	r2, [r3, #32]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	431a      	orrs	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	621a      	str	r2, [r3, #32]
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a1a      	ldr	r2, [r3, #32]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	43db      	mvns	r3, r3
 80024a0:	401a      	ands	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	621a      	str	r2, [r3, #32]
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <LL_USART_IsActiveFlag_TXE>:
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024c2:	2b80      	cmp	r3, #128	@ 0x80
 80024c4:	bf0c      	ite	eq
 80024c6:	2301      	moveq	r3, #1
 80024c8:	2300      	movne	r3, #0
 80024ca:	b2db      	uxtb	r3, r3
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <LL_USART_EnableIT_RXNE>:
{
 80024d8:	b480      	push	{r7}
 80024da:	b089      	sub	sp, #36	@ 0x24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	330c      	adds	r3, #12
 80024e4:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	e853 3f00 	ldrex	r3, [r3]
 80024ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	f043 0320 	orr.w	r3, r3, #32
 80024f4:	61fb      	str	r3, [r7, #28]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	330c      	adds	r3, #12
 80024fa:	69fa      	ldr	r2, [r7, #28]
 80024fc:	61ba      	str	r2, [r7, #24]
 80024fe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002500:	6979      	ldr	r1, [r7, #20]
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	e841 2300 	strex	r3, r2, [r1]
 8002508:	613b      	str	r3, [r7, #16]
   return(result);
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1e7      	bne.n	80024e0 <LL_USART_EnableIT_RXNE+0x8>
}
 8002510:	bf00      	nop
 8002512:	bf00      	nop
 8002514:	3724      	adds	r7, #36	@ 0x24
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <LL_USART_TransmitData8>:
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	460b      	mov	r3, r1
 8002528:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800252a:	78fa      	ldrb	r2, [r7, #3]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	605a      	str	r2, [r3, #4]
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	4013      	ands	r3, r2
 8002552:	041a      	lsls	r2, r3, #16
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	43d9      	mvns	r1, r3
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	400b      	ands	r3, r1
 800255c:	431a      	orrs	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	619a      	str	r2, [r3, #24]
}
 8002562:	bf00      	nop
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
	...

08002570 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char* p, int len)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++)
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]
 8002580:	e011      	b.n	80025a6 <_write+0x36>
	{
		while(!LL_USART_IsActiveFlag_TXE(USART6));
 8002582:	bf00      	nop
 8002584:	480c      	ldr	r0, [pc, #48]	@ (80025b8 <_write+0x48>)
 8002586:	f7ff ff94 	bl	80024b2 <LL_USART_IsActiveFlag_TXE>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0f9      	beq.n	8002584 <_write+0x14>
		LL_USART_TransmitData8(USART6, *(p+i));
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	4413      	add	r3, r2
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	4619      	mov	r1, r3
 800259a:	4807      	ldr	r0, [pc, #28]	@ (80025b8 <_write+0x48>)
 800259c:	f7ff ffbf 	bl	800251e <LL_USART_TransmitData8>
	for(int i=0; i<len; i++)
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	3301      	adds	r3, #1
 80025a4:	617b      	str	r3, [r7, #20]
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	dbe9      	blt.n	8002582 <_write+0x12>
	}
	return len;
 80025ae:	687b      	ldr	r3, [r7, #4]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40011400 	.word	0x40011400

080025bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int cnt =0;
 80025c2:	2300      	movs	r3, #0
 80025c4:	617b      	str	r3, [r7, #20]
	float f = 1.234;
 80025c6:	4b2d      	ldr	r3, [pc, #180]	@ (800267c <main+0xc0>)
 80025c8:	613b      	str	r3, [r7, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ca:	f000 ff6f 	bl	80034ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025ce:	f000 f867 	bl	80026a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025d2:	f7ff fec3 	bl	800235c <MX_GPIO_Init>
  MX_TIM3_Init();
 80025d6:	f000 fd11 	bl	8002ffc <MX_TIM3_Init>
  MX_USART6_UART_Init();
 80025da:	f000 fedd 	bl	8003398 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 80025de:	f000 f97d 	bl	80028dc <MX_SPI2_Init>
  MX_SPI1_Init();
 80025e2:	f000 f929 	bl	8002838 <MX_SPI1_Init>
  MX_SPI3_Init();
 80025e6:	f000 f9cd 	bl	8002984 <MX_SPI3_Init>
  MX_UART4_Init();
 80025ea:	f000 fe73 	bl	80032d4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM3);
 80025ee:	4824      	ldr	r0, [pc, #144]	@ (8002680 <main+0xc4>)
 80025f0:	f7ff ff2c 	bl	800244c <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4);
 80025f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80025f8:	4821      	ldr	r0, [pc, #132]	@ (8002680 <main+0xc4>)
 80025fa:	f7ff ff37 	bl	800246c <LL_TIM_CC_EnableChannel>
  TIM3->PSC = 2000; // buzzer pwm
 80025fe:	4b20      	ldr	r3, [pc, #128]	@ (8002680 <main+0xc4>)
 8002600:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002604:	629a      	str	r2, [r3, #40]	@ 0x28
  //TIM3->CCR4 = TIM3->ARR/2; // PWM Width
  HAL_Delay(500);
 8002606:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800260a:	f000 ffc1 	bl	8003590 <HAL_Delay>
  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800260e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002612:	481b      	ldr	r0, [pc, #108]	@ (8002680 <main+0xc4>)
 8002614:	f7ff ff3b 	bl	800248e <LL_TIM_CC_DisableChannel>

  LL_USART_EnableIT_RXNE(USART6);
 8002618:	481a      	ldr	r0, [pc, #104]	@ (8002684 <main+0xc8>)
 800261a:	f7ff ff5d 	bl	80024d8 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART4);
 800261e:	481a      	ldr	r0, [pc, #104]	@ (8002688 <main+0xcc>)
 8002620:	f7ff ff5a 	bl	80024d8 <LL_USART_EnableIT_RXNE>


  BNO080_Initialization();
 8002624:	f7fe fdbe 	bl	80011a4 <BNO080_Initialization>
  BNO080_enableRotationVector(2500); // 400Hz
 8002628:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 800262c:	f7fe fe50 	bl	80012d0 <BNO080_enableRotationVector>

  ICM20602_Initialization();
 8002630:	f7ff f92a 	bl	8001888 <ICM20602_Initialization>

  LPS22HH_Initialization();
 8002634:	f7ff fb38 	bl	8001ca8 <LPS22HH_Initialization>

  M8N_Initialization();
 8002638:	f7ff fcee 	bl	8002018 <M8N_Initialization>
//		  LPS22HH.baroAltFilt = LPS22HH.baroAltFilt * X  + LPS22HH.baroAlt * (1.0f - X );
//
//		  printf("%f ",LPS22HH.baroAlt * 100);
//		  printf("%f\n",LPS22HH.baroAltFilt * 100);
//	  }
	  if(m8n_rx_cplt_flag == 1)
 800263c:	4b13      	ldr	r3, [pc, #76]	@ (800268c <main+0xd0>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d1fb      	bne.n	800263c <main+0x80>
	  {
		  m8n_rx_cplt_flag = 0;
 8002644:	4b11      	ldr	r3, [pc, #68]	@ (800268c <main+0xd0>)
 8002646:	2200      	movs	r2, #0
 8002648:	701a      	strb	r2, [r3, #0]

		  if( M8N_UBX_CHKSUM(&m8n_rx_buf[0],36) == 1)
 800264a:	2124      	movs	r1, #36	@ 0x24
 800264c:	4810      	ldr	r0, [pc, #64]	@ (8002690 <main+0xd4>)
 800264e:	f7ff fd6d 	bl	800212c <M8N_UBX_CHKSUM>
 8002652:	4603      	mov	r3, r0
 8002654:	2b01      	cmp	r3, #1
 8002656:	d1f1      	bne.n	800263c <main+0x80>
		  {
			  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 8002658:	2104      	movs	r1, #4
 800265a:	480e      	ldr	r0, [pc, #56]	@ (8002694 <main+0xd8>)
 800265c:	f7ff ff6e 	bl	800253c <LL_GPIO_TogglePin>
			  M8N_UBX_POSLLH_Parsing(&m8n_rx_buf[0], &posllh);
 8002660:	490d      	ldr	r1, [pc, #52]	@ (8002698 <main+0xdc>)
 8002662:	480b      	ldr	r0, [pc, #44]	@ (8002690 <main+0xd4>)
 8002664:	f7ff fd9c 	bl	80021a0 <M8N_UBX_POSLLH_Parsing>

			  printf("LAT : %ld\t LON: %ld\t height : %ld",posllh.lat, posllh.lon, posllh.height);
 8002668:	4b0b      	ldr	r3, [pc, #44]	@ (8002698 <main+0xdc>)
 800266a:	68d9      	ldr	r1, [r3, #12]
 800266c:	4b0a      	ldr	r3, [pc, #40]	@ (8002698 <main+0xdc>)
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	4b09      	ldr	r3, [pc, #36]	@ (8002698 <main+0xdc>)
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	4809      	ldr	r0, [pc, #36]	@ (800269c <main+0xe0>)
 8002676:	f003 fb69 	bl	8005d4c <iprintf>
	  if(m8n_rx_cplt_flag == 1)
 800267a:	e7df      	b.n	800263c <main+0x80>
 800267c:	3f9df3b6 	.word	0x3f9df3b6
 8002680:	40000400 	.word	0x40000400
 8002684:	40011400 	.word	0x40011400
 8002688:	40004c00 	.word	0x40004c00
 800268c:	200002d8 	.word	0x200002d8
 8002690:	200002b4 	.word	0x200002b4
 8002694:	40020800 	.word	0x40020800
 8002698:	20000280 	.word	0x20000280
 800269c:	08007e90 	.word	0x08007e90

080026a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b094      	sub	sp, #80	@ 0x50
 80026a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026a6:	f107 0320 	add.w	r3, r7, #32
 80026aa:	2230      	movs	r2, #48	@ 0x30
 80026ac:	2100      	movs	r1, #0
 80026ae:	4618      	mov	r0, r3
 80026b0:	f003 fc94 	bl	8005fdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026b4:	f107 030c 	add.w	r3, r7, #12
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	60da      	str	r2, [r3, #12]
 80026c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026c4:	2300      	movs	r3, #0
 80026c6:	60bb      	str	r3, [r7, #8]
 80026c8:	4b28      	ldr	r3, [pc, #160]	@ (800276c <SystemClock_Config+0xcc>)
 80026ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026cc:	4a27      	ldr	r2, [pc, #156]	@ (800276c <SystemClock_Config+0xcc>)
 80026ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80026d4:	4b25      	ldr	r3, [pc, #148]	@ (800276c <SystemClock_Config+0xcc>)
 80026d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026e0:	2300      	movs	r3, #0
 80026e2:	607b      	str	r3, [r7, #4]
 80026e4:	4b22      	ldr	r3, [pc, #136]	@ (8002770 <SystemClock_Config+0xd0>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a21      	ldr	r2, [pc, #132]	@ (8002770 <SystemClock_Config+0xd0>)
 80026ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002770 <SystemClock_Config+0xd0>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026f8:	607b      	str	r3, [r7, #4]
 80026fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026fc:	2301      	movs	r3, #1
 80026fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002700:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002704:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002706:	2302      	movs	r3, #2
 8002708:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800270a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800270e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002710:	2304      	movs	r3, #4
 8002712:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002714:	23a8      	movs	r3, #168	@ 0xa8
 8002716:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002718:	2302      	movs	r3, #2
 800271a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800271c:	2304      	movs	r3, #4
 800271e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002720:	f107 0320 	add.w	r3, r7, #32
 8002724:	4618      	mov	r0, r3
 8002726:	f001 f83d 	bl	80037a4 <HAL_RCC_OscConfig>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002730:	f000 f820 	bl	8002774 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002734:	230f      	movs	r3, #15
 8002736:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002738:	2302      	movs	r3, #2
 800273a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002740:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002744:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002746:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800274a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800274c:	f107 030c 	add.w	r3, r7, #12
 8002750:	2105      	movs	r1, #5
 8002752:	4618      	mov	r0, r3
 8002754:	f001 fa9e 	bl	8003c94 <HAL_RCC_ClockConfig>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800275e:	f000 f809 	bl	8002774 <Error_Handler>
  }
}
 8002762:	bf00      	nop
 8002764:	3750      	adds	r7, #80	@ 0x50
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40023800 	.word	0x40023800
 8002770:	40007000 	.word	0x40007000

08002774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002778:	b672      	cpsid	i
}
 800277a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800277c:	bf00      	nop
 800277e:	e7fd      	b.n	800277c <Error_Handler+0x8>

08002780 <LL_SPI_SetStandard>:
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f023 0210 	bic.w	r2, r3, #16
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	431a      	orrs	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	605a      	str	r2, [r3, #4]
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
	...

080027a8 <LL_AHB1_GRP1_EnableClock>:
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80027b0:	4b08      	ldr	r3, [pc, #32]	@ (80027d4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80027b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027b4:	4907      	ldr	r1, [pc, #28]	@ (80027d4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80027bc:	4b05      	ldr	r3, [pc, #20]	@ (80027d4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80027be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4013      	ands	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027c6:	68fb      	ldr	r3, [r7, #12]
}
 80027c8:	bf00      	nop
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	40023800 	.word	0x40023800

080027d8 <LL_APB1_GRP1_EnableClock>:
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80027e0:	4b08      	ldr	r3, [pc, #32]	@ (8002804 <LL_APB1_GRP1_EnableClock+0x2c>)
 80027e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027e4:	4907      	ldr	r1, [pc, #28]	@ (8002804 <LL_APB1_GRP1_EnableClock+0x2c>)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80027ec:	4b05      	ldr	r3, [pc, #20]	@ (8002804 <LL_APB1_GRP1_EnableClock+0x2c>)
 80027ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4013      	ands	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027f6:	68fb      	ldr	r3, [r7, #12]
}
 80027f8:	bf00      	nop
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	40023800 	.word	0x40023800

08002808 <LL_APB2_GRP1_EnableClock>:
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002810:	4b08      	ldr	r3, [pc, #32]	@ (8002834 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002812:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002814:	4907      	ldr	r1, [pc, #28]	@ (8002834 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4313      	orrs	r3, r2
 800281a:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800281c:	4b05      	ldr	r3, [pc, #20]	@ (8002834 <LL_APB2_GRP1_EnableClock+0x2c>)
 800281e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4013      	ands	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002826:	68fb      	ldr	r3, [r7, #12]
}
 8002828:	bf00      	nop
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	40023800 	.word	0x40023800

08002838 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b090      	sub	sp, #64	@ 0x40
 800283c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800283e:	f107 0318 	add.w	r3, r7, #24
 8002842:	2228      	movs	r2, #40	@ 0x28
 8002844:	2100      	movs	r1, #0
 8002846:	4618      	mov	r0, r3
 8002848:	f003 fbc8 	bl	8005fdc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800284c:	463b      	mov	r3, r7
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	605a      	str	r2, [r3, #4]
 8002854:	609a      	str	r2, [r3, #8]
 8002856:	60da      	str	r2, [r3, #12]
 8002858:	611a      	str	r2, [r3, #16]
 800285a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 800285c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002860:	f7ff ffd2 	bl	8002808 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002864:	2001      	movs	r0, #1
 8002866:	f7ff ff9f 	bl	80027a8 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800286a:	23e0      	movs	r3, #224	@ 0xe0
 800286c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800286e:	2302      	movs	r3, #2
 8002870:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002872:	2303      	movs	r3, #3
 8002874:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800287a:	2300      	movs	r3, #0
 800287c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800287e:	2305      	movs	r3, #5
 8002880:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002882:	463b      	mov	r3, r7
 8002884:	4619      	mov	r1, r3
 8002886:	4813      	ldr	r0, [pc, #76]	@ (80028d4 <MX_SPI1_Init+0x9c>)
 8002888:	f001 fd3b 	bl	8004302 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800288c:	2300      	movs	r3, #0
 800288e:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002890:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002894:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002896:	2300      	movs	r3, #0
 8002898:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800289a:	2302      	movs	r3, #2
 800289c:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800289e:	2301      	movs	r3, #1
 80028a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80028a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 80028a8:	2310      	movs	r3, #16
 80028aa:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80028ac:	2300      	movs	r3, #0
 80028ae:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80028b0:	2300      	movs	r3, #0
 80028b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 80028b4:	230a      	movs	r3, #10
 80028b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80028b8:	f107 0318 	add.w	r3, r7, #24
 80028bc:	4619      	mov	r1, r3
 80028be:	4806      	ldr	r0, [pc, #24]	@ (80028d8 <MX_SPI1_Init+0xa0>)
 80028c0:	f001 fefd 	bl	80046be <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 80028c4:	2100      	movs	r1, #0
 80028c6:	4804      	ldr	r0, [pc, #16]	@ (80028d8 <MX_SPI1_Init+0xa0>)
 80028c8:	f7ff ff5a 	bl	8002780 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80028cc:	bf00      	nop
 80028ce:	3740      	adds	r7, #64	@ 0x40
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40020000 	.word	0x40020000
 80028d8:	40013000 	.word	0x40013000

080028dc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b090      	sub	sp, #64	@ 0x40
 80028e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80028e2:	f107 0318 	add.w	r3, r7, #24
 80028e6:	2228      	movs	r2, #40	@ 0x28
 80028e8:	2100      	movs	r1, #0
 80028ea:	4618      	mov	r0, r3
 80028ec:	f003 fb76 	bl	8005fdc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f0:	463b      	mov	r3, r7
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	605a      	str	r2, [r3, #4]
 80028f8:	609a      	str	r2, [r3, #8]
 80028fa:	60da      	str	r2, [r3, #12]
 80028fc:	611a      	str	r2, [r3, #16]
 80028fe:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8002900:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002904:	f7ff ff68 	bl	80027d8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002908:	2002      	movs	r0, #2
 800290a:	f7ff ff4d 	bl	80027a8 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800290e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002912:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002914:	2302      	movs	r3, #2
 8002916:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002918:	2303      	movs	r3, #3
 800291a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800291c:	2300      	movs	r3, #0
 800291e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002920:	2300      	movs	r3, #0
 8002922:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002924:	2305      	movs	r3, #5
 8002926:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002928:	463b      	mov	r3, r7
 800292a:	4619      	mov	r1, r3
 800292c:	4813      	ldr	r0, [pc, #76]	@ (800297c <MX_SPI2_Init+0xa0>)
 800292e:	f001 fce8 	bl	8004302 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002932:	2300      	movs	r3, #0
 8002934:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002936:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800293a:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800293c:	2300      	movs	r3, #0
 800293e:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002940:	2302      	movs	r3, #2
 8002942:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002944:	2301      	movs	r3, #1
 8002946:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002948:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800294c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800294e:	2318      	movs	r3, #24
 8002950:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002952:	2300      	movs	r3, #0
 8002954:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002956:	2300      	movs	r3, #0
 8002958:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 800295a:	230a      	movs	r3, #10
 800295c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 800295e:	f107 0318 	add.w	r3, r7, #24
 8002962:	4619      	mov	r1, r3
 8002964:	4806      	ldr	r0, [pc, #24]	@ (8002980 <MX_SPI2_Init+0xa4>)
 8002966:	f001 feaa 	bl	80046be <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 800296a:	2100      	movs	r1, #0
 800296c:	4804      	ldr	r0, [pc, #16]	@ (8002980 <MX_SPI2_Init+0xa4>)
 800296e:	f7ff ff07 	bl	8002780 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002972:	bf00      	nop
 8002974:	3740      	adds	r7, #64	@ 0x40
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40020400 	.word	0x40020400
 8002980:	40003800 	.word	0x40003800

08002984 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b090      	sub	sp, #64	@ 0x40
 8002988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800298a:	f107 0318 	add.w	r3, r7, #24
 800298e:	2228      	movs	r2, #40	@ 0x28
 8002990:	2100      	movs	r1, #0
 8002992:	4618      	mov	r0, r3
 8002994:	f003 fb22 	bl	8005fdc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002998:	463b      	mov	r3, r7
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	605a      	str	r2, [r3, #4]
 80029a0:	609a      	str	r2, [r3, #8]
 80029a2:	60da      	str	r2, [r3, #12]
 80029a4:	611a      	str	r2, [r3, #16]
 80029a6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80029a8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80029ac:	f7ff ff14 	bl	80027d8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80029b0:	2002      	movs	r0, #2
 80029b2:	f7ff fef9 	bl	80027a8 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 80029b6:	2338      	movs	r3, #56	@ 0x38
 80029b8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80029ba:	2302      	movs	r3, #2
 80029bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80029be:	2303      	movs	r3, #3
 80029c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80029c2:	2300      	movs	r3, #0
 80029c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80029c6:	2300      	movs	r3, #0
 80029c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80029ca:	2306      	movs	r3, #6
 80029cc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ce:	463b      	mov	r3, r7
 80029d0:	4619      	mov	r1, r3
 80029d2:	4813      	ldr	r0, [pc, #76]	@ (8002a20 <MX_SPI3_Init+0x9c>)
 80029d4:	f001 fc95 	bl	8004302 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80029d8:	2300      	movs	r3, #0
 80029da:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80029dc:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80029e0:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80029e2:	2300      	movs	r3, #0
 80029e4:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80029e6:	2302      	movs	r3, #2
 80029e8:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80029ea:	2301      	movs	r3, #1
 80029ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80029ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 80029f4:	2308      	movs	r3, #8
 80029f6:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80029f8:	2300      	movs	r3, #0
 80029fa:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80029fc:	2300      	movs	r3, #0
 80029fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8002a00:	230a      	movs	r3, #10
 8002a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8002a04:	f107 0318 	add.w	r3, r7, #24
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4806      	ldr	r0, [pc, #24]	@ (8002a24 <MX_SPI3_Init+0xa0>)
 8002a0c:	f001 fe57 	bl	80046be <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8002a10:	2100      	movs	r1, #0
 8002a12:	4804      	ldr	r0, [pc, #16]	@ (8002a24 <MX_SPI3_Init+0xa0>)
 8002a14:	f7ff feb4 	bl	8002780 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002a18:	bf00      	nop
 8002a1a:	3740      	adds	r7, #64	@ 0x40
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40020400 	.word	0x40020400
 8002a24:	40003c00 	.word	0x40003c00

08002a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	607b      	str	r3, [r7, #4]
 8002a32:	4b10      	ldr	r3, [pc, #64]	@ (8002a74 <HAL_MspInit+0x4c>)
 8002a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a36:	4a0f      	ldr	r2, [pc, #60]	@ (8002a74 <HAL_MspInit+0x4c>)
 8002a38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a74 <HAL_MspInit+0x4c>)
 8002a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a46:	607b      	str	r3, [r7, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	603b      	str	r3, [r7, #0]
 8002a4e:	4b09      	ldr	r3, [pc, #36]	@ (8002a74 <HAL_MspInit+0x4c>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a52:	4a08      	ldr	r2, [pc, #32]	@ (8002a74 <HAL_MspInit+0x4c>)
 8002a54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a5a:	4b06      	ldr	r3, [pc, #24]	@ (8002a74 <HAL_MspInit+0x4c>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a62:	603b      	str	r3, [r7, #0]
 8002a64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40023800 	.word	0x40023800

08002a78 <LL_USART_IsActiveFlag_RXNE>:
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0320 	and.w	r3, r3, #32
 8002a88:	2b20      	cmp	r3, #32
 8002a8a:	bf0c      	ite	eq
 8002a8c:	2301      	moveq	r3, #1
 8002a8e:	2300      	movne	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <LL_USART_ClearFlag_RXNE>:
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f06f 0220 	mvn.w	r2, #32
 8002aac:	601a      	str	r2, [r3, #0]
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <LL_USART_ReceiveData8>:
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	b2db      	uxtb	r3, r3
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <LL_USART_TransmitData8>:
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002ae0:	78fa      	ldrb	r2, [r7, #3]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	605a      	str	r2, [r3, #4]
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002af2:	b480      	push	{r7}
 8002af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002af6:	bf00      	nop
 8002af8:	e7fd      	b.n	8002af6 <NMI_Handler+0x4>

08002afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002afa:	b480      	push	{r7}
 8002afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002afe:	bf00      	nop
 8002b00:	e7fd      	b.n	8002afe <HardFault_Handler+0x4>

08002b02 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b02:	b480      	push	{r7}
 8002b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b06:	bf00      	nop
 8002b08:	e7fd      	b.n	8002b06 <MemManage_Handler+0x4>

08002b0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b0e:	bf00      	nop
 8002b10:	e7fd      	b.n	8002b0e <BusFault_Handler+0x4>

08002b12 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b12:	b480      	push	{r7}
 8002b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b16:	bf00      	nop
 8002b18:	e7fd      	b.n	8002b16 <UsageFault_Handler+0x4>

08002b1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b2c:	bf00      	nop
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b36:	b480      	push	{r7}
 8002b38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b48:	f000 fd02 	bl	8003550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b4c:	bf00      	nop
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	static unsigned char cnt =0;

	if(LL_USART_IsActiveFlag_RXNE(UART4))
 8002b54:	4832      	ldr	r0, [pc, #200]	@ (8002c20 <UART4_IRQHandler+0xd0>)
 8002b56:	f7ff ff8f 	bl	8002a78 <LL_USART_IsActiveFlag_RXNE>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d05c      	beq.n	8002c1a <UART4_IRQHandler+0xca>
	{
		LL_USART_ClearFlag_RXNE(UART4);
 8002b60:	482f      	ldr	r0, [pc, #188]	@ (8002c20 <UART4_IRQHandler+0xd0>)
 8002b62:	f7ff ff9c 	bl	8002a9e <LL_USART_ClearFlag_RXNE>
		uart4_rx_data = LL_USART_ReceiveData8(UART4);
 8002b66:	482e      	ldr	r0, [pc, #184]	@ (8002c20 <UART4_IRQHandler+0xd0>)
 8002b68:	f7ff ffa7 	bl	8002aba <LL_USART_ReceiveData8>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	461a      	mov	r2, r3
 8002b70:	4b2c      	ldr	r3, [pc, #176]	@ (8002c24 <UART4_IRQHandler+0xd4>)
 8002b72:	701a      	strb	r2, [r3, #0]
		uart4_rx_flag = 1;
 8002b74:	4b2c      	ldr	r3, [pc, #176]	@ (8002c28 <UART4_IRQHandler+0xd8>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	701a      	strb	r2, [r3, #0]

		//LL_USART_TransmitData8(USART6, uart4_rx_data);

		switch(cnt)
 8002b7a:	4b2c      	ldr	r3, [pc, #176]	@ (8002c2c <UART4_IRQHandler+0xdc>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b23      	cmp	r3, #35	@ 0x23
 8002b80:	d02e      	beq.n	8002be0 <UART4_IRQHandler+0x90>
 8002b82:	2b23      	cmp	r3, #35	@ 0x23
 8002b84:	dc3a      	bgt.n	8002bfc <UART4_IRQHandler+0xac>
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d002      	beq.n	8002b90 <UART4_IRQHandler+0x40>
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d012      	beq.n	8002bb4 <UART4_IRQHandler+0x64>
 8002b8e:	e035      	b.n	8002bfc <UART4_IRQHandler+0xac>
		{
		case 0:
			if(uart4_rx_data == 0xb5)
 8002b90:	4b24      	ldr	r3, [pc, #144]	@ (8002c24 <UART4_IRQHandler+0xd4>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2bb5      	cmp	r3, #181	@ 0xb5
 8002b96:	d13f      	bne.n	8002c18 <UART4_IRQHandler+0xc8>
			{
				m8n_rx_buf[cnt] = uart4_rx_data;
 8002b98:	4b24      	ldr	r3, [pc, #144]	@ (8002c2c <UART4_IRQHandler+0xdc>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4b21      	ldr	r3, [pc, #132]	@ (8002c24 <UART4_IRQHandler+0xd4>)
 8002ba0:	7819      	ldrb	r1, [r3, #0]
 8002ba2:	4b23      	ldr	r3, [pc, #140]	@ (8002c30 <UART4_IRQHandler+0xe0>)
 8002ba4:	5499      	strb	r1, [r3, r2]
				cnt++;
 8002ba6:	4b21      	ldr	r3, [pc, #132]	@ (8002c2c <UART4_IRQHandler+0xdc>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	3301      	adds	r3, #1
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	4b1f      	ldr	r3, [pc, #124]	@ (8002c2c <UART4_IRQHandler+0xdc>)
 8002bb0:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002bb2:	e031      	b.n	8002c18 <UART4_IRQHandler+0xc8>
		case 1:
			if(uart4_rx_data == 0x62)
 8002bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c24 <UART4_IRQHandler+0xd4>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b62      	cmp	r3, #98	@ 0x62
 8002bba:	d10d      	bne.n	8002bd8 <UART4_IRQHandler+0x88>
			{
				m8n_rx_buf[cnt] = uart4_rx_data;
 8002bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c2c <UART4_IRQHandler+0xdc>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4b18      	ldr	r3, [pc, #96]	@ (8002c24 <UART4_IRQHandler+0xd4>)
 8002bc4:	7819      	ldrb	r1, [r3, #0]
 8002bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c30 <UART4_IRQHandler+0xe0>)
 8002bc8:	5499      	strb	r1, [r3, r2]
				cnt++;
 8002bca:	4b18      	ldr	r3, [pc, #96]	@ (8002c2c <UART4_IRQHandler+0xdc>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	4b16      	ldr	r3, [pc, #88]	@ (8002c2c <UART4_IRQHandler+0xdc>)
 8002bd4:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				cnt = 0;
			}
			break;
 8002bd6:	e020      	b.n	8002c1a <UART4_IRQHandler+0xca>
				cnt = 0;
 8002bd8:	4b14      	ldr	r3, [pc, #80]	@ (8002c2c <UART4_IRQHandler+0xdc>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	701a      	strb	r2, [r3, #0]
			break;
 8002bde:	e01c      	b.n	8002c1a <UART4_IRQHandler+0xca>
		case 35:
			m8n_rx_buf[cnt] = uart4_rx_data;
 8002be0:	4b12      	ldr	r3, [pc, #72]	@ (8002c2c <UART4_IRQHandler+0xdc>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	461a      	mov	r2, r3
 8002be6:	4b0f      	ldr	r3, [pc, #60]	@ (8002c24 <UART4_IRQHandler+0xd4>)
 8002be8:	7819      	ldrb	r1, [r3, #0]
 8002bea:	4b11      	ldr	r3, [pc, #68]	@ (8002c30 <UART4_IRQHandler+0xe0>)
 8002bec:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8002bee:	4b0f      	ldr	r3, [pc, #60]	@ (8002c2c <UART4_IRQHandler+0xdc>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	701a      	strb	r2, [r3, #0]
			m8n_rx_cplt_flag = 1;
 8002bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8002c34 <UART4_IRQHandler+0xe4>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	701a      	strb	r2, [r3, #0]
			break;
 8002bfa:	e00e      	b.n	8002c1a <UART4_IRQHandler+0xca>
		default :
			m8n_rx_buf[cnt] = uart4_rx_data;
 8002bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8002c2c <UART4_IRQHandler+0xdc>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	4b08      	ldr	r3, [pc, #32]	@ (8002c24 <UART4_IRQHandler+0xd4>)
 8002c04:	7819      	ldrb	r1, [r3, #0]
 8002c06:	4b0a      	ldr	r3, [pc, #40]	@ (8002c30 <UART4_IRQHandler+0xe0>)
 8002c08:	5499      	strb	r1, [r3, r2]
			cnt++;
 8002c0a:	4b08      	ldr	r3, [pc, #32]	@ (8002c2c <UART4_IRQHandler+0xdc>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	4b06      	ldr	r3, [pc, #24]	@ (8002c2c <UART4_IRQHandler+0xdc>)
 8002c14:	701a      	strb	r2, [r3, #0]
			break;
 8002c16:	e000      	b.n	8002c1a <UART4_IRQHandler+0xca>
			break;
 8002c18:	bf00      	nop
	}
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40004c00 	.word	0x40004c00
 8002c24:	200002b3 	.word	0x200002b3
 8002c28:	200002b2 	.word	0x200002b2
 8002c2c:	200002d9 	.word	0x200002d9
 8002c30:	200002b4 	.word	0x200002b4
 8002c34:	200002d8 	.word	0x200002d8

08002c38 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6))
 8002c3c:	480d      	ldr	r0, [pc, #52]	@ (8002c74 <USART6_IRQHandler+0x3c>)
 8002c3e:	f7ff ff1b 	bl	8002a78 <LL_USART_IsActiveFlag_RXNE>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d012      	beq.n	8002c6e <USART6_IRQHandler+0x36>
	{
		LL_USART_ClearFlag_RXNE(USART6);
 8002c48:	480a      	ldr	r0, [pc, #40]	@ (8002c74 <USART6_IRQHandler+0x3c>)
 8002c4a:	f7ff ff28 	bl	8002a9e <LL_USART_ClearFlag_RXNE>
		uart6_rx_data = LL_USART_ReceiveData8(USART6);
 8002c4e:	4809      	ldr	r0, [pc, #36]	@ (8002c74 <USART6_IRQHandler+0x3c>)
 8002c50:	f7ff ff33 	bl	8002aba <LL_USART_ReceiveData8>
 8002c54:	4603      	mov	r3, r0
 8002c56:	461a      	mov	r2, r3
 8002c58:	4b07      	ldr	r3, [pc, #28]	@ (8002c78 <USART6_IRQHandler+0x40>)
 8002c5a:	701a      	strb	r2, [r3, #0]
		uart6_rx_flag = 1;
 8002c5c:	4b07      	ldr	r3, [pc, #28]	@ (8002c7c <USART6_IRQHandler+0x44>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	701a      	strb	r2, [r3, #0]

		LL_USART_TransmitData8(UART4, uart6_rx_data);
 8002c62:	4b05      	ldr	r3, [pc, #20]	@ (8002c78 <USART6_IRQHandler+0x40>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	4619      	mov	r1, r3
 8002c68:	4805      	ldr	r0, [pc, #20]	@ (8002c80 <USART6_IRQHandler+0x48>)
 8002c6a:	f7ff ff33 	bl	8002ad4 <LL_USART_TransmitData8>
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40011400 	.word	0x40011400
 8002c78:	200002b1 	.word	0x200002b1
 8002c7c:	200002b0 	.word	0x200002b0
 8002c80:	40004c00 	.word	0x40004c00

08002c84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  return 1;
 8002c88:	2301      	movs	r3, #1
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <_kill>:

int _kill(int pid, int sig)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c9e:	f003 f9ef 	bl	8006080 <__errno>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2216      	movs	r2, #22
 8002ca6:	601a      	str	r2, [r3, #0]
  return -1;
 8002ca8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <_exit>:

void _exit (int status)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7ff ffe7 	bl	8002c94 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cc6:	bf00      	nop
 8002cc8:	e7fd      	b.n	8002cc6 <_exit+0x12>

08002cca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b086      	sub	sp, #24
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	60b9      	str	r1, [r7, #8]
 8002cd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
 8002cda:	e00a      	b.n	8002cf2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002cdc:	f3af 8000 	nop.w
 8002ce0:	4601      	mov	r1, r0
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	1c5a      	adds	r2, r3, #1
 8002ce6:	60ba      	str	r2, [r7, #8]
 8002ce8:	b2ca      	uxtb	r2, r1
 8002cea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	dbf0      	blt.n	8002cdc <_read+0x12>
  }

  return len;
 8002cfa:	687b      	ldr	r3, [r7, #4]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d2c:	605a      	str	r2, [r3, #4]
  return 0;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <_isatty>:

int _isatty(int file)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d44:	2301      	movs	r3, #1
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b085      	sub	sp, #20
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	60f8      	str	r0, [r7, #12]
 8002d5a:	60b9      	str	r1, [r7, #8]
 8002d5c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d74:	4a14      	ldr	r2, [pc, #80]	@ (8002dc8 <_sbrk+0x5c>)
 8002d76:	4b15      	ldr	r3, [pc, #84]	@ (8002dcc <_sbrk+0x60>)
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d80:	4b13      	ldr	r3, [pc, #76]	@ (8002dd0 <_sbrk+0x64>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d102      	bne.n	8002d8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d88:	4b11      	ldr	r3, [pc, #68]	@ (8002dd0 <_sbrk+0x64>)
 8002d8a:	4a12      	ldr	r2, [pc, #72]	@ (8002dd4 <_sbrk+0x68>)
 8002d8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d8e:	4b10      	ldr	r3, [pc, #64]	@ (8002dd0 <_sbrk+0x64>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4413      	add	r3, r2
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d207      	bcs.n	8002dac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d9c:	f003 f970 	bl	8006080 <__errno>
 8002da0:	4603      	mov	r3, r0
 8002da2:	220c      	movs	r2, #12
 8002da4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002da6:	f04f 33ff 	mov.w	r3, #4294967295
 8002daa:	e009      	b.n	8002dc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dac:	4b08      	ldr	r3, [pc, #32]	@ (8002dd0 <_sbrk+0x64>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002db2:	4b07      	ldr	r3, [pc, #28]	@ (8002dd0 <_sbrk+0x64>)
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4413      	add	r3, r2
 8002dba:	4a05      	ldr	r2, [pc, #20]	@ (8002dd0 <_sbrk+0x64>)
 8002dbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	20020000 	.word	0x20020000
 8002dcc:	00000400 	.word	0x00000400
 8002dd0:	200002dc 	.word	0x200002dc
 8002dd4:	20000430 	.word	0x20000430

08002dd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ddc:	4b06      	ldr	r3, [pc, #24]	@ (8002df8 <SystemInit+0x20>)
 8002dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002de2:	4a05      	ldr	r2, [pc, #20]	@ (8002df8 <SystemInit+0x20>)
 8002de4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002de8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dec:	bf00      	nop
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	e000ed00 	.word	0xe000ed00

08002dfc <LL_TIM_EnableARRPreload>:
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	601a      	str	r2, [r3, #0]
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <LL_TIM_OC_EnableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d01c      	beq.n	8002e66 <LL_TIM_OC_EnableFast+0x4a>
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d017      	beq.n	8002e62 <LL_TIM_OC_EnableFast+0x46>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2b10      	cmp	r3, #16
 8002e36:	d012      	beq.n	8002e5e <LL_TIM_OC_EnableFast+0x42>
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	2b40      	cmp	r3, #64	@ 0x40
 8002e3c:	d00d      	beq.n	8002e5a <LL_TIM_OC_EnableFast+0x3e>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e44:	d007      	beq.n	8002e56 <LL_TIM_OC_EnableFast+0x3a>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e4c:	d101      	bne.n	8002e52 <LL_TIM_OC_EnableFast+0x36>
 8002e4e:	2305      	movs	r3, #5
 8002e50:	e00a      	b.n	8002e68 <LL_TIM_OC_EnableFast+0x4c>
 8002e52:	2306      	movs	r3, #6
 8002e54:	e008      	b.n	8002e68 <LL_TIM_OC_EnableFast+0x4c>
 8002e56:	2304      	movs	r3, #4
 8002e58:	e006      	b.n	8002e68 <LL_TIM_OC_EnableFast+0x4c>
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e004      	b.n	8002e68 <LL_TIM_OC_EnableFast+0x4c>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e002      	b.n	8002e68 <LL_TIM_OC_EnableFast+0x4c>
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <LL_TIM_OC_EnableFast+0x4c>
 8002e66:	2300      	movs	r3, #0
 8002e68:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3318      	adds	r3, #24
 8002e6e:	4619      	mov	r1, r3
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
 8002e72:	4a0a      	ldr	r2, [pc, #40]	@ (8002e9c <LL_TIM_OC_EnableFast+0x80>)
 8002e74:	5cd3      	ldrb	r3, [r2, r3]
 8002e76:	440b      	add	r3, r1
 8002e78:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
 8002e80:	4907      	ldr	r1, [pc, #28]	@ (8002ea0 <LL_TIM_OC_EnableFast+0x84>)
 8002e82:	5ccb      	ldrb	r3, [r1, r3]
 8002e84:	4619      	mov	r1, r3
 8002e86:	2304      	movs	r3, #4
 8002e88:	408b      	lsls	r3, r1
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	601a      	str	r2, [r3, #0]

}
 8002e90:	bf00      	nop
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	08007f20 	.word	0x08007f20
 8002ea0:	08007f28 	.word	0x08007f28

08002ea4 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d01c      	beq.n	8002eee <LL_TIM_OC_EnablePreload+0x4a>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	d017      	beq.n	8002eea <LL_TIM_OC_EnablePreload+0x46>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2b10      	cmp	r3, #16
 8002ebe:	d012      	beq.n	8002ee6 <LL_TIM_OC_EnablePreload+0x42>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	2b40      	cmp	r3, #64	@ 0x40
 8002ec4:	d00d      	beq.n	8002ee2 <LL_TIM_OC_EnablePreload+0x3e>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ecc:	d007      	beq.n	8002ede <LL_TIM_OC_EnablePreload+0x3a>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ed4:	d101      	bne.n	8002eda <LL_TIM_OC_EnablePreload+0x36>
 8002ed6:	2305      	movs	r3, #5
 8002ed8:	e00a      	b.n	8002ef0 <LL_TIM_OC_EnablePreload+0x4c>
 8002eda:	2306      	movs	r3, #6
 8002edc:	e008      	b.n	8002ef0 <LL_TIM_OC_EnablePreload+0x4c>
 8002ede:	2304      	movs	r3, #4
 8002ee0:	e006      	b.n	8002ef0 <LL_TIM_OC_EnablePreload+0x4c>
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e004      	b.n	8002ef0 <LL_TIM_OC_EnablePreload+0x4c>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e002      	b.n	8002ef0 <LL_TIM_OC_EnablePreload+0x4c>
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <LL_TIM_OC_EnablePreload+0x4c>
 8002eee:	2300      	movs	r3, #0
 8002ef0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3318      	adds	r3, #24
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	4a0a      	ldr	r2, [pc, #40]	@ (8002f24 <LL_TIM_OC_EnablePreload+0x80>)
 8002efc:	5cd3      	ldrb	r3, [r2, r3]
 8002efe:	440b      	add	r3, r1
 8002f00:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	7bfb      	ldrb	r3, [r7, #15]
 8002f08:	4907      	ldr	r1, [pc, #28]	@ (8002f28 <LL_TIM_OC_EnablePreload+0x84>)
 8002f0a:	5ccb      	ldrb	r3, [r1, r3]
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	2308      	movs	r3, #8
 8002f10:	408b      	lsls	r3, r1
 8002f12:	431a      	orrs	r2, r3
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	601a      	str	r2, [r3, #0]
}
 8002f18:	bf00      	nop
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	08007f20 	.word	0x08007f20
 8002f28:	08007f28 	.word	0x08007f28

08002f2c <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f3e:	f023 0307 	bic.w	r3, r3, #7
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	431a      	orrs	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	609a      	str	r2, [r3, #8]
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	605a      	str	r2, [r3, #4]
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	609a      	str	r2, [r3, #8]
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <LL_AHB1_GRP1_EnableClock>:
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002fa4:	4b08      	ldr	r3, [pc, #32]	@ (8002fc8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002fa6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fa8:	4907      	ldr	r1, [pc, #28]	@ (8002fc8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002fb0:	4b05      	ldr	r3, [pc, #20]	@ (8002fc8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002fb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fba:	68fb      	ldr	r3, [r7, #12]
}
 8002fbc:	bf00      	nop
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	40023800 	.word	0x40023800

08002fcc <LL_APB1_GRP1_EnableClock>:
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002fd4:	4b08      	ldr	r3, [pc, #32]	@ (8002ff8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002fd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fd8:	4907      	ldr	r1, [pc, #28]	@ (8002ff8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002fe0:	4b05      	ldr	r3, [pc, #20]	@ (8002ff8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002fe2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fea:	68fb      	ldr	r3, [r7, #12]
}
 8002fec:	bf00      	nop
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	40023800 	.word	0x40023800

08002ffc <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b094      	sub	sp, #80	@ 0x50
 8003000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003002:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	605a      	str	r2, [r3, #4]
 800300c:	609a      	str	r2, [r3, #8]
 800300e:	60da      	str	r2, [r3, #12]
 8003010:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003012:	f107 031c 	add.w	r3, r7, #28
 8003016:	2220      	movs	r2, #32
 8003018:	2100      	movs	r1, #0
 800301a:	4618      	mov	r0, r3
 800301c:	f002 ffde 	bl	8005fdc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003020:	1d3b      	adds	r3, r7, #4
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	605a      	str	r2, [r3, #4]
 8003028:	609a      	str	r2, [r3, #8]
 800302a:	60da      	str	r2, [r3, #12]
 800302c:	611a      	str	r2, [r3, #16]
 800302e:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8003030:	2002      	movs	r0, #2
 8003032:	f7ff ffcb 	bl	8002fcc <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 1000-LL_TIM_IC_FILTER_FDIV1_N2;
 8003036:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800303a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800303c:	2300      	movs	r3, #0
 800303e:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 21-LL_TIM_IC_FILTER_FDIV1_N2;
 8003040:	4b25      	ldr	r3, [pc, #148]	@ (80030d8 <MX_TIM3_Init+0xdc>)
 8003042:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003044:	2300      	movs	r3, #0
 8003046:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8003048:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800304c:	4619      	mov	r1, r3
 800304e:	4823      	ldr	r0, [pc, #140]	@ (80030dc <MX_TIM3_Init+0xe0>)
 8003050:	f001 fbfa 	bl	8004848 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8003054:	4821      	ldr	r0, [pc, #132]	@ (80030dc <MX_TIM3_Init+0xe0>)
 8003056:	f7ff fed1 	bl	8002dfc <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 800305a:	2100      	movs	r1, #0
 800305c:	481f      	ldr	r0, [pc, #124]	@ (80030dc <MX_TIM3_Init+0xe0>)
 800305e:	f7ff ff65 	bl	8002f2c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8003062:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003066:	481d      	ldr	r0, [pc, #116]	@ (80030dc <MX_TIM3_Init+0xe0>)
 8003068:	f7ff ff1c 	bl	8002ea4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800306c:	2360      	movs	r3, #96	@ 0x60
 800306e:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003070:	2300      	movs	r3, #0
 8003072:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003074:	2300      	movs	r3, #0
 8003076:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 8003078:	230a      	movs	r3, #10
 800307a:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800307c:	2300      	movs	r3, #0
 800307e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8003080:	f107 031c 	add.w	r3, r7, #28
 8003084:	461a      	mov	r2, r3
 8003086:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800308a:	4814      	ldr	r0, [pc, #80]	@ (80030dc <MX_TIM3_Init+0xe0>)
 800308c:	f001 fc76 	bl	800497c <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8003090:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003094:	4811      	ldr	r0, [pc, #68]	@ (80030dc <MX_TIM3_Init+0xe0>)
 8003096:	f7ff fec1 	bl	8002e1c <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 800309a:	2100      	movs	r1, #0
 800309c:	480f      	ldr	r0, [pc, #60]	@ (80030dc <MX_TIM3_Init+0xe0>)
 800309e:	f7ff ff5a 	bl	8002f56 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80030a2:	480e      	ldr	r0, [pc, #56]	@ (80030dc <MX_TIM3_Init+0xe0>)
 80030a4:	f7ff ff6a 	bl	8002f7c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80030a8:	2002      	movs	r0, #2
 80030aa:	f7ff ff77 	bl	8002f9c <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80030ae:	2302      	movs	r3, #2
 80030b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80030b2:	2302      	movs	r3, #2
 80030b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80030b6:	2300      	movs	r3, #0
 80030b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80030ba:	2300      	movs	r3, #0
 80030bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80030be:	2300      	movs	r3, #0
 80030c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80030c2:	2302      	movs	r3, #2
 80030c4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030c6:	1d3b      	adds	r3, r7, #4
 80030c8:	4619      	mov	r1, r3
 80030ca:	4805      	ldr	r0, [pc, #20]	@ (80030e0 <MX_TIM3_Init+0xe4>)
 80030cc:	f001 f919 	bl	8004302 <LL_GPIO_Init>

}
 80030d0:	bf00      	nop
 80030d2:	3750      	adds	r7, #80	@ 0x50
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	fff00015 	.word	0xfff00015
 80030dc:	40000400 	.word	0x40000400
 80030e0:	40020400 	.word	0x40020400

080030e4 <__NVIC_GetPriorityGrouping>:
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030e8:	4b04      	ldr	r3, [pc, #16]	@ (80030fc <__NVIC_GetPriorityGrouping+0x18>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	0a1b      	lsrs	r3, r3, #8
 80030ee:	f003 0307 	and.w	r3, r3, #7
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	e000ed00 	.word	0xe000ed00

08003100 <__NVIC_EnableIRQ>:
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	4603      	mov	r3, r0
 8003108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800310a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310e:	2b00      	cmp	r3, #0
 8003110:	db0b      	blt.n	800312a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003112:	79fb      	ldrb	r3, [r7, #7]
 8003114:	f003 021f 	and.w	r2, r3, #31
 8003118:	4907      	ldr	r1, [pc, #28]	@ (8003138 <__NVIC_EnableIRQ+0x38>)
 800311a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311e:	095b      	lsrs	r3, r3, #5
 8003120:	2001      	movs	r0, #1
 8003122:	fa00 f202 	lsl.w	r2, r0, r2
 8003126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	e000e100 	.word	0xe000e100

0800313c <__NVIC_SetPriority>:
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	6039      	str	r1, [r7, #0]
 8003146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314c:	2b00      	cmp	r3, #0
 800314e:	db0a      	blt.n	8003166 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	b2da      	uxtb	r2, r3
 8003154:	490c      	ldr	r1, [pc, #48]	@ (8003188 <__NVIC_SetPriority+0x4c>)
 8003156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315a:	0112      	lsls	r2, r2, #4
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	440b      	add	r3, r1
 8003160:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003164:	e00a      	b.n	800317c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	b2da      	uxtb	r2, r3
 800316a:	4908      	ldr	r1, [pc, #32]	@ (800318c <__NVIC_SetPriority+0x50>)
 800316c:	79fb      	ldrb	r3, [r7, #7]
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	3b04      	subs	r3, #4
 8003174:	0112      	lsls	r2, r2, #4
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	440b      	add	r3, r1
 800317a:	761a      	strb	r2, [r3, #24]
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	e000e100 	.word	0xe000e100
 800318c:	e000ed00 	.word	0xe000ed00

08003190 <NVIC_EncodePriority>:
{
 8003190:	b480      	push	{r7}
 8003192:	b089      	sub	sp, #36	@ 0x24
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	f1c3 0307 	rsb	r3, r3, #7
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	bf28      	it	cs
 80031ae:	2304      	movcs	r3, #4
 80031b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	3304      	adds	r3, #4
 80031b6:	2b06      	cmp	r3, #6
 80031b8:	d902      	bls.n	80031c0 <NVIC_EncodePriority+0x30>
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	3b03      	subs	r3, #3
 80031be:	e000      	b.n	80031c2 <NVIC_EncodePriority+0x32>
 80031c0:	2300      	movs	r3, #0
 80031c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c4:	f04f 32ff 	mov.w	r2, #4294967295
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	43da      	mvns	r2, r3
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	401a      	ands	r2, r3
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031d8:	f04f 31ff 	mov.w	r1, #4294967295
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	fa01 f303 	lsl.w	r3, r1, r3
 80031e2:	43d9      	mvns	r1, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e8:	4313      	orrs	r3, r2
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3724      	adds	r7, #36	@ 0x24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <LL_USART_Enable>:
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	60da      	str	r2, [r3, #12]
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <LL_USART_ConfigAsyncMode>:
{
 8003216:	b480      	push	{r7}
 8003218:	b083      	sub	sp, #12
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	615a      	str	r2, [r3, #20]
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
	...

08003244 <LL_AHB1_GRP1_EnableClock>:
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800324c:	4b08      	ldr	r3, [pc, #32]	@ (8003270 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800324e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003250:	4907      	ldr	r1, [pc, #28]	@ (8003270 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4313      	orrs	r3, r2
 8003256:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003258:	4b05      	ldr	r3, [pc, #20]	@ (8003270 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800325a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4013      	ands	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003262:	68fb      	ldr	r3, [r7, #12]
}
 8003264:	bf00      	nop
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	40023800 	.word	0x40023800

08003274 <LL_APB1_GRP1_EnableClock>:
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800327c:	4b08      	ldr	r3, [pc, #32]	@ (80032a0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800327e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003280:	4907      	ldr	r1, [pc, #28]	@ (80032a0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4313      	orrs	r3, r2
 8003286:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003288:	4b05      	ldr	r3, [pc, #20]	@ (80032a0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800328a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4013      	ands	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003292:	68fb      	ldr	r3, [r7, #12]
}
 8003294:	bf00      	nop
 8003296:	3714      	adds	r7, #20
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	40023800 	.word	0x40023800

080032a4 <LL_APB2_GRP1_EnableClock>:
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80032ac:	4b08      	ldr	r3, [pc, #32]	@ (80032d0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80032ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032b0:	4907      	ldr	r1, [pc, #28]	@ (80032d0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80032b8:	4b05      	ldr	r3, [pc, #20]	@ (80032d0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80032ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4013      	ands	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80032c2:	68fb      	ldr	r3, [r7, #12]
}
 80032c4:	bf00      	nop
 80032c6:	3714      	adds	r7, #20
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	40023800 	.word	0x40023800

080032d4 <MX_UART4_Init>:

/* USER CODE END 0 */

/* UART4 init function */
void MX_UART4_Init(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b08e      	sub	sp, #56	@ 0x38
 80032d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80032da:	f107 031c 	add.w	r3, r7, #28
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	605a      	str	r2, [r3, #4]
 80032e4:	609a      	str	r2, [r3, #8]
 80032e6:	60da      	str	r2, [r3, #12]
 80032e8:	611a      	str	r2, [r3, #16]
 80032ea:	615a      	str	r2, [r3, #20]
 80032ec:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ee:	1d3b      	adds	r3, r7, #4
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	605a      	str	r2, [r3, #4]
 80032f6:	609a      	str	r2, [r3, #8]
 80032f8:	60da      	str	r2, [r3, #12]
 80032fa:	611a      	str	r2, [r3, #16]
 80032fc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 80032fe:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003302:	f7ff ffb7 	bl	8003274 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003306:	2004      	movs	r0, #4
 8003308:	f7ff ff9c 	bl	8003244 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 800330c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003310:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003312:	2302      	movs	r3, #2
 8003314:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003316:	2303      	movs	r3, #3
 8003318:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800331a:	2300      	movs	r3, #0
 800331c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800331e:	2300      	movs	r3, #0
 8003320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8003322:	2308      	movs	r3, #8
 8003324:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003326:	1d3b      	adds	r3, r7, #4
 8003328:	4619      	mov	r1, r3
 800332a:	4819      	ldr	r0, [pc, #100]	@ (8003390 <MX_UART4_Init+0xbc>)
 800332c:	f000 ffe9 	bl	8004302 <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003330:	f7ff fed8 	bl	80030e4 <__NVIC_GetPriorityGrouping>
 8003334:	4603      	mov	r3, r0
 8003336:	2200      	movs	r2, #0
 8003338:	2100      	movs	r1, #0
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff ff28 	bl	8003190 <NVIC_EncodePriority>
 8003340:	4603      	mov	r3, r0
 8003342:	4619      	mov	r1, r3
 8003344:	2034      	movs	r0, #52	@ 0x34
 8003346:	f7ff fef9 	bl	800313c <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 800334a:	2034      	movs	r0, #52	@ 0x34
 800334c:	f7ff fed8 	bl	8003100 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 8003350:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8003354:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003356:	2300      	movs	r3, #0
 8003358:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800335a:	2300      	movs	r3, #0
 800335c:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800335e:	2300      	movs	r3, #0
 8003360:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003362:	230c      	movs	r3, #12
 8003364:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003366:	2300      	movs	r3, #0
 8003368:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800336a:	2300      	movs	r3, #0
 800336c:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 800336e:	f107 031c 	add.w	r3, r7, #28
 8003372:	4619      	mov	r1, r3
 8003374:	4807      	ldr	r0, [pc, #28]	@ (8003394 <MX_UART4_Init+0xc0>)
 8003376:	f001 ff4f 	bl	8005218 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 800337a:	4806      	ldr	r0, [pc, #24]	@ (8003394 <MX_UART4_Init+0xc0>)
 800337c:	f7ff ff4b 	bl	8003216 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 8003380:	4804      	ldr	r0, [pc, #16]	@ (8003394 <MX_UART4_Init+0xc0>)
 8003382:	f7ff ff38 	bl	80031f6 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003386:	bf00      	nop
 8003388:	3738      	adds	r7, #56	@ 0x38
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40020800 	.word	0x40020800
 8003394:	40004c00 	.word	0x40004c00

08003398 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b08e      	sub	sp, #56	@ 0x38
 800339c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800339e:	f107 031c 	add.w	r3, r7, #28
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	605a      	str	r2, [r3, #4]
 80033a8:	609a      	str	r2, [r3, #8]
 80033aa:	60da      	str	r2, [r3, #12]
 80033ac:	611a      	str	r2, [r3, #16]
 80033ae:	615a      	str	r2, [r3, #20]
 80033b0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b2:	1d3b      	adds	r3, r7, #4
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	605a      	str	r2, [r3, #4]
 80033ba:	609a      	str	r2, [r3, #8]
 80033bc:	60da      	str	r2, [r3, #12]
 80033be:	611a      	str	r2, [r3, #16]
 80033c0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 80033c2:	2020      	movs	r0, #32
 80033c4:	f7ff ff6e 	bl	80032a4 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80033c8:	2004      	movs	r0, #4
 80033ca:	f7ff ff3b 	bl	8003244 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80033ce:	23c0      	movs	r3, #192	@ 0xc0
 80033d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80033d2:	2302      	movs	r3, #2
 80033d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80033d6:	2303      	movs	r3, #3
 80033d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80033da:	2300      	movs	r3, #0
 80033dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80033de:	2300      	movs	r3, #0
 80033e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80033e2:	2308      	movs	r3, #8
 80033e4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033e6:	1d3b      	adds	r3, r7, #4
 80033e8:	4619      	mov	r1, r3
 80033ea:	4819      	ldr	r0, [pc, #100]	@ (8003450 <MX_USART6_UART_Init+0xb8>)
 80033ec:	f000 ff89 	bl	8004302 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80033f0:	f7ff fe78 	bl	80030e4 <__NVIC_GetPriorityGrouping>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2200      	movs	r2, #0
 80033f8:	2100      	movs	r1, #0
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff fec8 	bl	8003190 <NVIC_EncodePriority>
 8003400:	4603      	mov	r3, r0
 8003402:	4619      	mov	r1, r3
 8003404:	2047      	movs	r0, #71	@ 0x47
 8003406:	f7ff fe99 	bl	800313c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 800340a:	2047      	movs	r0, #71	@ 0x47
 800340c:	f7ff fe78 	bl	8003100 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 8003410:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8003414:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003416:	2300      	movs	r3, #0
 8003418:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800341a:	2300      	movs	r3, #0
 800341c:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800341e:	2300      	movs	r3, #0
 8003420:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003422:	230c      	movs	r3, #12
 8003424:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003426:	2300      	movs	r3, #0
 8003428:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800342a:	2300      	movs	r3, #0
 800342c:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 800342e:	f107 031c 	add.w	r3, r7, #28
 8003432:	4619      	mov	r1, r3
 8003434:	4807      	ldr	r0, [pc, #28]	@ (8003454 <MX_USART6_UART_Init+0xbc>)
 8003436:	f001 feef 	bl	8005218 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 800343a:	4806      	ldr	r0, [pc, #24]	@ (8003454 <MX_USART6_UART_Init+0xbc>)
 800343c:	f7ff feeb 	bl	8003216 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8003440:	4804      	ldr	r0, [pc, #16]	@ (8003454 <MX_USART6_UART_Init+0xbc>)
 8003442:	f7ff fed8 	bl	80031f6 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003446:	bf00      	nop
 8003448:	3738      	adds	r7, #56	@ 0x38
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40020800 	.word	0x40020800
 8003454:	40011400 	.word	0x40011400

08003458 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003458:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003490 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800345c:	f7ff fcbc 	bl	8002dd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003460:	480c      	ldr	r0, [pc, #48]	@ (8003494 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003462:	490d      	ldr	r1, [pc, #52]	@ (8003498 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003464:	4a0d      	ldr	r2, [pc, #52]	@ (800349c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003468:	e002      	b.n	8003470 <LoopCopyDataInit>

0800346a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800346a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800346c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800346e:	3304      	adds	r3, #4

08003470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003474:	d3f9      	bcc.n	800346a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003476:	4a0a      	ldr	r2, [pc, #40]	@ (80034a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003478:	4c0a      	ldr	r4, [pc, #40]	@ (80034a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800347a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800347c:	e001      	b.n	8003482 <LoopFillZerobss>

0800347e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800347e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003480:	3204      	adds	r2, #4

08003482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003484:	d3fb      	bcc.n	800347e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003486:	f002 fe01 	bl	800608c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800348a:	f7ff f897 	bl	80025bc <main>
  bx  lr    
 800348e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003490:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003498:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800349c:	080082b0 	.word	0x080082b0
  ldr r2, =_sbss
 80034a0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80034a4:	20000430 	.word	0x20000430

080034a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034a8:	e7fe      	b.n	80034a8 <ADC_IRQHandler>
	...

080034ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034b0:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <HAL_Init+0x40>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a0d      	ldr	r2, [pc, #52]	@ (80034ec <HAL_Init+0x40>)
 80034b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034bc:	4b0b      	ldr	r3, [pc, #44]	@ (80034ec <HAL_Init+0x40>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a0a      	ldr	r2, [pc, #40]	@ (80034ec <HAL_Init+0x40>)
 80034c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034c8:	4b08      	ldr	r3, [pc, #32]	@ (80034ec <HAL_Init+0x40>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a07      	ldr	r2, [pc, #28]	@ (80034ec <HAL_Init+0x40>)
 80034ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034d4:	2003      	movs	r0, #3
 80034d6:	f000 f931 	bl	800373c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034da:	200f      	movs	r0, #15
 80034dc:	f000 f808 	bl	80034f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034e0:	f7ff faa2 	bl	8002a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40023c00 	.word	0x40023c00

080034f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034f8:	4b12      	ldr	r3, [pc, #72]	@ (8003544 <HAL_InitTick+0x54>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	4b12      	ldr	r3, [pc, #72]	@ (8003548 <HAL_InitTick+0x58>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	4619      	mov	r1, r3
 8003502:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003506:	fbb3 f3f1 	udiv	r3, r3, r1
 800350a:	fbb2 f3f3 	udiv	r3, r2, r3
 800350e:	4618      	mov	r0, r3
 8003510:	f000 f93b 	bl	800378a <HAL_SYSTICK_Config>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e00e      	b.n	800353c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b0f      	cmp	r3, #15
 8003522:	d80a      	bhi.n	800353a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003524:	2200      	movs	r2, #0
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	f04f 30ff 	mov.w	r0, #4294967295
 800352c:	f000 f911 	bl	8003752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003530:	4a06      	ldr	r2, [pc, #24]	@ (800354c <HAL_InitTick+0x5c>)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003536:	2300      	movs	r3, #0
 8003538:	e000      	b.n	800353c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
}
 800353c:	4618      	mov	r0, r3
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	20000000 	.word	0x20000000
 8003548:	20000008 	.word	0x20000008
 800354c:	20000004 	.word	0x20000004

08003550 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003554:	4b06      	ldr	r3, [pc, #24]	@ (8003570 <HAL_IncTick+0x20>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	461a      	mov	r2, r3
 800355a:	4b06      	ldr	r3, [pc, #24]	@ (8003574 <HAL_IncTick+0x24>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4413      	add	r3, r2
 8003560:	4a04      	ldr	r2, [pc, #16]	@ (8003574 <HAL_IncTick+0x24>)
 8003562:	6013      	str	r3, [r2, #0]
}
 8003564:	bf00      	nop
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	20000008 	.word	0x20000008
 8003574:	200002e0 	.word	0x200002e0

08003578 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  return uwTick;
 800357c:	4b03      	ldr	r3, [pc, #12]	@ (800358c <HAL_GetTick+0x14>)
 800357e:	681b      	ldr	r3, [r3, #0]
}
 8003580:	4618      	mov	r0, r3
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	200002e0 	.word	0x200002e0

08003590 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003598:	f7ff ffee 	bl	8003578 <HAL_GetTick>
 800359c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a8:	d005      	beq.n	80035b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035aa:	4b0a      	ldr	r3, [pc, #40]	@ (80035d4 <HAL_Delay+0x44>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	461a      	mov	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4413      	add	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80035b6:	bf00      	nop
 80035b8:	f7ff ffde 	bl	8003578 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d8f7      	bhi.n	80035b8 <HAL_Delay+0x28>
  {
  }
}
 80035c8:	bf00      	nop
 80035ca:	bf00      	nop
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000008 	.word	0x20000008

080035d8 <__NVIC_SetPriorityGrouping>:
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035e8:	4b0c      	ldr	r3, [pc, #48]	@ (800361c <__NVIC_SetPriorityGrouping+0x44>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035f4:	4013      	ands	r3, r2
 80035f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003600:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003604:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800360a:	4a04      	ldr	r2, [pc, #16]	@ (800361c <__NVIC_SetPriorityGrouping+0x44>)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	60d3      	str	r3, [r2, #12]
}
 8003610:	bf00      	nop
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	e000ed00 	.word	0xe000ed00

08003620 <__NVIC_GetPriorityGrouping>:
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003624:	4b04      	ldr	r3, [pc, #16]	@ (8003638 <__NVIC_GetPriorityGrouping+0x18>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	0a1b      	lsrs	r3, r3, #8
 800362a:	f003 0307 	and.w	r3, r3, #7
}
 800362e:	4618      	mov	r0, r3
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	e000ed00 	.word	0xe000ed00

0800363c <__NVIC_SetPriority>:
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	6039      	str	r1, [r7, #0]
 8003646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364c:	2b00      	cmp	r3, #0
 800364e:	db0a      	blt.n	8003666 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	b2da      	uxtb	r2, r3
 8003654:	490c      	ldr	r1, [pc, #48]	@ (8003688 <__NVIC_SetPriority+0x4c>)
 8003656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365a:	0112      	lsls	r2, r2, #4
 800365c:	b2d2      	uxtb	r2, r2
 800365e:	440b      	add	r3, r1
 8003660:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003664:	e00a      	b.n	800367c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	b2da      	uxtb	r2, r3
 800366a:	4908      	ldr	r1, [pc, #32]	@ (800368c <__NVIC_SetPriority+0x50>)
 800366c:	79fb      	ldrb	r3, [r7, #7]
 800366e:	f003 030f 	and.w	r3, r3, #15
 8003672:	3b04      	subs	r3, #4
 8003674:	0112      	lsls	r2, r2, #4
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	440b      	add	r3, r1
 800367a:	761a      	strb	r2, [r3, #24]
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	e000e100 	.word	0xe000e100
 800368c:	e000ed00 	.word	0xe000ed00

08003690 <NVIC_EncodePriority>:
{
 8003690:	b480      	push	{r7}
 8003692:	b089      	sub	sp, #36	@ 0x24
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f1c3 0307 	rsb	r3, r3, #7
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	bf28      	it	cs
 80036ae:	2304      	movcs	r3, #4
 80036b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	3304      	adds	r3, #4
 80036b6:	2b06      	cmp	r3, #6
 80036b8:	d902      	bls.n	80036c0 <NVIC_EncodePriority+0x30>
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	3b03      	subs	r3, #3
 80036be:	e000      	b.n	80036c2 <NVIC_EncodePriority+0x32>
 80036c0:	2300      	movs	r3, #0
 80036c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c4:	f04f 32ff 	mov.w	r2, #4294967295
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	43da      	mvns	r2, r3
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	401a      	ands	r2, r3
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036d8:	f04f 31ff 	mov.w	r1, #4294967295
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	fa01 f303 	lsl.w	r3, r1, r3
 80036e2:	43d9      	mvns	r1, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036e8:	4313      	orrs	r3, r2
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3724      	adds	r7, #36	@ 0x24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
	...

080036f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3b01      	subs	r3, #1
 8003704:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003708:	d301      	bcc.n	800370e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800370a:	2301      	movs	r3, #1
 800370c:	e00f      	b.n	800372e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800370e:	4a0a      	ldr	r2, [pc, #40]	@ (8003738 <SysTick_Config+0x40>)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3b01      	subs	r3, #1
 8003714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003716:	210f      	movs	r1, #15
 8003718:	f04f 30ff 	mov.w	r0, #4294967295
 800371c:	f7ff ff8e 	bl	800363c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003720:	4b05      	ldr	r3, [pc, #20]	@ (8003738 <SysTick_Config+0x40>)
 8003722:	2200      	movs	r2, #0
 8003724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003726:	4b04      	ldr	r3, [pc, #16]	@ (8003738 <SysTick_Config+0x40>)
 8003728:	2207      	movs	r2, #7
 800372a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	e000e010 	.word	0xe000e010

0800373c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7ff ff47 	bl	80035d8 <__NVIC_SetPriorityGrouping>
}
 800374a:	bf00      	nop
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003752:	b580      	push	{r7, lr}
 8003754:	b086      	sub	sp, #24
 8003756:	af00      	add	r7, sp, #0
 8003758:	4603      	mov	r3, r0
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	607a      	str	r2, [r7, #4]
 800375e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003760:	2300      	movs	r3, #0
 8003762:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003764:	f7ff ff5c 	bl	8003620 <__NVIC_GetPriorityGrouping>
 8003768:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	68b9      	ldr	r1, [r7, #8]
 800376e:	6978      	ldr	r0, [r7, #20]
 8003770:	f7ff ff8e 	bl	8003690 <NVIC_EncodePriority>
 8003774:	4602      	mov	r2, r0
 8003776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800377a:	4611      	mov	r1, r2
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff ff5d 	bl	800363c <__NVIC_SetPriority>
}
 8003782:	bf00      	nop
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b082      	sub	sp, #8
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7ff ffb0 	bl	80036f8 <SysTick_Config>
 8003798:	4603      	mov	r3, r0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
	...

080037a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e267      	b.n	8003c86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d075      	beq.n	80038ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80037c2:	4b88      	ldr	r3, [pc, #544]	@ (80039e4 <HAL_RCC_OscConfig+0x240>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 030c 	and.w	r3, r3, #12
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d00c      	beq.n	80037e8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ce:	4b85      	ldr	r3, [pc, #532]	@ (80039e4 <HAL_RCC_OscConfig+0x240>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80037d6:	2b08      	cmp	r3, #8
 80037d8:	d112      	bne.n	8003800 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037da:	4b82      	ldr	r3, [pc, #520]	@ (80039e4 <HAL_RCC_OscConfig+0x240>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037e6:	d10b      	bne.n	8003800 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e8:	4b7e      	ldr	r3, [pc, #504]	@ (80039e4 <HAL_RCC_OscConfig+0x240>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d05b      	beq.n	80038ac <HAL_RCC_OscConfig+0x108>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d157      	bne.n	80038ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e242      	b.n	8003c86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003808:	d106      	bne.n	8003818 <HAL_RCC_OscConfig+0x74>
 800380a:	4b76      	ldr	r3, [pc, #472]	@ (80039e4 <HAL_RCC_OscConfig+0x240>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a75      	ldr	r2, [pc, #468]	@ (80039e4 <HAL_RCC_OscConfig+0x240>)
 8003810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	e01d      	b.n	8003854 <HAL_RCC_OscConfig+0xb0>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003820:	d10c      	bne.n	800383c <HAL_RCC_OscConfig+0x98>
 8003822:	4b70      	ldr	r3, [pc, #448]	@ (80039e4 <HAL_RCC_OscConfig+0x240>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a6f      	ldr	r2, [pc, #444]	@ (80039e4 <HAL_RCC_OscConfig+0x240>)
 8003828:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	4b6d      	ldr	r3, [pc, #436]	@ (80039e4 <HAL_RCC_OscConfig+0x240>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a6c      	ldr	r2, [pc, #432]	@ (80039e4 <HAL_RCC_OscConfig+0x240>)
 8003834:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	e00b      	b.n	8003854 <HAL_RCC_OscConfig+0xb0>
 800383c:	4b69      	ldr	r3, [pc, #420]	@ (80039e4 <HAL_RCC_OscConfig+0x240>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a68      	ldr	r2, [pc, #416]	@ (80039e4 <HAL_RCC_OscConfig+0x240>)
 8003842:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003846:	6013      	str	r3, [r2, #0]
 8003848:	4b66      	ldr	r3, [pc, #408]	@ (80039e4 <HAL_RCC_OscConfig+0x240>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a65      	ldr	r2, [pc, #404]	@ (80039e4 <HAL_RCC_OscConfig+0x240>)
 800384e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003852:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d013      	beq.n	8003884 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800385c:	f7ff fe8c 	bl	8003578 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003864:	f7ff fe88 	bl	8003578 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b64      	cmp	r3, #100	@ 0x64
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e207      	b.n	8003c86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003876:	4b5b      	ldr	r3, [pc, #364]	@ (80039e4 <HAL_RCC_OscConfig+0x240>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0f0      	beq.n	8003864 <HAL_RCC_OscConfig+0xc0>
 8003882:	e014      	b.n	80038ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003884:	f7ff fe78 	bl	8003578 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800388c:	f7ff fe74 	bl	8003578 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b64      	cmp	r3, #100	@ 0x64
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e1f3      	b.n	8003c86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800389e:	4b51      	ldr	r3, [pc, #324]	@ (80039e4 <HAL_RCC_OscConfig+0x240>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1f0      	bne.n	800388c <HAL_RCC_OscConfig+0xe8>
 80038aa:	e000      	b.n	80038ae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d063      	beq.n	8003982 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80038ba:	4b4a      	ldr	r3, [pc, #296]	@ (80039e4 <HAL_RCC_OscConfig+0x240>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 030c 	and.w	r3, r3, #12
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00b      	beq.n	80038de <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038c6:	4b47      	ldr	r3, [pc, #284]	@ (80039e4 <HAL_RCC_OscConfig+0x240>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80038ce:	2b08      	cmp	r3, #8
 80038d0:	d11c      	bne.n	800390c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038d2:	4b44      	ldr	r3, [pc, #272]	@ (80039e4 <HAL_RCC_OscConfig+0x240>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d116      	bne.n	800390c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038de:	4b41      	ldr	r3, [pc, #260]	@ (80039e4 <HAL_RCC_OscConfig+0x240>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d005      	beq.n	80038f6 <HAL_RCC_OscConfig+0x152>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d001      	beq.n	80038f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e1c7      	b.n	8003c86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f6:	4b3b      	ldr	r3, [pc, #236]	@ (80039e4 <HAL_RCC_OscConfig+0x240>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	4937      	ldr	r1, [pc, #220]	@ (80039e4 <HAL_RCC_OscConfig+0x240>)
 8003906:	4313      	orrs	r3, r2
 8003908:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800390a:	e03a      	b.n	8003982 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d020      	beq.n	8003956 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003914:	4b34      	ldr	r3, [pc, #208]	@ (80039e8 <HAL_RCC_OscConfig+0x244>)
 8003916:	2201      	movs	r2, #1
 8003918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391a:	f7ff fe2d 	bl	8003578 <HAL_GetTick>
 800391e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003922:	f7ff fe29 	bl	8003578 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e1a8      	b.n	8003c86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003934:	4b2b      	ldr	r3, [pc, #172]	@ (80039e4 <HAL_RCC_OscConfig+0x240>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0f0      	beq.n	8003922 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003940:	4b28      	ldr	r3, [pc, #160]	@ (80039e4 <HAL_RCC_OscConfig+0x240>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	4925      	ldr	r1, [pc, #148]	@ (80039e4 <HAL_RCC_OscConfig+0x240>)
 8003950:	4313      	orrs	r3, r2
 8003952:	600b      	str	r3, [r1, #0]
 8003954:	e015      	b.n	8003982 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003956:	4b24      	ldr	r3, [pc, #144]	@ (80039e8 <HAL_RCC_OscConfig+0x244>)
 8003958:	2200      	movs	r2, #0
 800395a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395c:	f7ff fe0c 	bl	8003578 <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003964:	f7ff fe08 	bl	8003578 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e187      	b.n	8003c86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003976:	4b1b      	ldr	r3, [pc, #108]	@ (80039e4 <HAL_RCC_OscConfig+0x240>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1f0      	bne.n	8003964 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b00      	cmp	r3, #0
 800398c:	d036      	beq.n	80039fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d016      	beq.n	80039c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003996:	4b15      	ldr	r3, [pc, #84]	@ (80039ec <HAL_RCC_OscConfig+0x248>)
 8003998:	2201      	movs	r2, #1
 800399a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800399c:	f7ff fdec 	bl	8003578 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039a4:	f7ff fde8 	bl	8003578 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e167      	b.n	8003c86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039b6:	4b0b      	ldr	r3, [pc, #44]	@ (80039e4 <HAL_RCC_OscConfig+0x240>)
 80039b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0f0      	beq.n	80039a4 <HAL_RCC_OscConfig+0x200>
 80039c2:	e01b      	b.n	80039fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039c4:	4b09      	ldr	r3, [pc, #36]	@ (80039ec <HAL_RCC_OscConfig+0x248>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ca:	f7ff fdd5 	bl	8003578 <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d0:	e00e      	b.n	80039f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039d2:	f7ff fdd1 	bl	8003578 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d907      	bls.n	80039f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e150      	b.n	8003c86 <HAL_RCC_OscConfig+0x4e2>
 80039e4:	40023800 	.word	0x40023800
 80039e8:	42470000 	.word	0x42470000
 80039ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f0:	4b88      	ldr	r3, [pc, #544]	@ (8003c14 <HAL_RCC_OscConfig+0x470>)
 80039f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1ea      	bne.n	80039d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 8097 	beq.w	8003b38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a0e:	4b81      	ldr	r3, [pc, #516]	@ (8003c14 <HAL_RCC_OscConfig+0x470>)
 8003a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10f      	bne.n	8003a3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60bb      	str	r3, [r7, #8]
 8003a1e:	4b7d      	ldr	r3, [pc, #500]	@ (8003c14 <HAL_RCC_OscConfig+0x470>)
 8003a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a22:	4a7c      	ldr	r2, [pc, #496]	@ (8003c14 <HAL_RCC_OscConfig+0x470>)
 8003a24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a28:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a2a:	4b7a      	ldr	r3, [pc, #488]	@ (8003c14 <HAL_RCC_OscConfig+0x470>)
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a32:	60bb      	str	r3, [r7, #8]
 8003a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a36:	2301      	movs	r3, #1
 8003a38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a3a:	4b77      	ldr	r3, [pc, #476]	@ (8003c18 <HAL_RCC_OscConfig+0x474>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d118      	bne.n	8003a78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a46:	4b74      	ldr	r3, [pc, #464]	@ (8003c18 <HAL_RCC_OscConfig+0x474>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a73      	ldr	r2, [pc, #460]	@ (8003c18 <HAL_RCC_OscConfig+0x474>)
 8003a4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a52:	f7ff fd91 	bl	8003578 <HAL_GetTick>
 8003a56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a58:	e008      	b.n	8003a6c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a5a:	f7ff fd8d 	bl	8003578 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e10c      	b.n	8003c86 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a6c:	4b6a      	ldr	r3, [pc, #424]	@ (8003c18 <HAL_RCC_OscConfig+0x474>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0f0      	beq.n	8003a5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d106      	bne.n	8003a8e <HAL_RCC_OscConfig+0x2ea>
 8003a80:	4b64      	ldr	r3, [pc, #400]	@ (8003c14 <HAL_RCC_OscConfig+0x470>)
 8003a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a84:	4a63      	ldr	r2, [pc, #396]	@ (8003c14 <HAL_RCC_OscConfig+0x470>)
 8003a86:	f043 0301 	orr.w	r3, r3, #1
 8003a8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a8c:	e01c      	b.n	8003ac8 <HAL_RCC_OscConfig+0x324>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2b05      	cmp	r3, #5
 8003a94:	d10c      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x30c>
 8003a96:	4b5f      	ldr	r3, [pc, #380]	@ (8003c14 <HAL_RCC_OscConfig+0x470>)
 8003a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a9a:	4a5e      	ldr	r2, [pc, #376]	@ (8003c14 <HAL_RCC_OscConfig+0x470>)
 8003a9c:	f043 0304 	orr.w	r3, r3, #4
 8003aa0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aa2:	4b5c      	ldr	r3, [pc, #368]	@ (8003c14 <HAL_RCC_OscConfig+0x470>)
 8003aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa6:	4a5b      	ldr	r2, [pc, #364]	@ (8003c14 <HAL_RCC_OscConfig+0x470>)
 8003aa8:	f043 0301 	orr.w	r3, r3, #1
 8003aac:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aae:	e00b      	b.n	8003ac8 <HAL_RCC_OscConfig+0x324>
 8003ab0:	4b58      	ldr	r3, [pc, #352]	@ (8003c14 <HAL_RCC_OscConfig+0x470>)
 8003ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ab4:	4a57      	ldr	r2, [pc, #348]	@ (8003c14 <HAL_RCC_OscConfig+0x470>)
 8003ab6:	f023 0301 	bic.w	r3, r3, #1
 8003aba:	6713      	str	r3, [r2, #112]	@ 0x70
 8003abc:	4b55      	ldr	r3, [pc, #340]	@ (8003c14 <HAL_RCC_OscConfig+0x470>)
 8003abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac0:	4a54      	ldr	r2, [pc, #336]	@ (8003c14 <HAL_RCC_OscConfig+0x470>)
 8003ac2:	f023 0304 	bic.w	r3, r3, #4
 8003ac6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d015      	beq.n	8003afc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad0:	f7ff fd52 	bl	8003578 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad6:	e00a      	b.n	8003aee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad8:	f7ff fd4e 	bl	8003578 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e0cb      	b.n	8003c86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aee:	4b49      	ldr	r3, [pc, #292]	@ (8003c14 <HAL_RCC_OscConfig+0x470>)
 8003af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0ee      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x334>
 8003afa:	e014      	b.n	8003b26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003afc:	f7ff fd3c 	bl	8003578 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b02:	e00a      	b.n	8003b1a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b04:	f7ff fd38 	bl	8003578 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e0b5      	b.n	8003c86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b1a:	4b3e      	ldr	r3, [pc, #248]	@ (8003c14 <HAL_RCC_OscConfig+0x470>)
 8003b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1ee      	bne.n	8003b04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b26:	7dfb      	ldrb	r3, [r7, #23]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d105      	bne.n	8003b38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b2c:	4b39      	ldr	r3, [pc, #228]	@ (8003c14 <HAL_RCC_OscConfig+0x470>)
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b30:	4a38      	ldr	r2, [pc, #224]	@ (8003c14 <HAL_RCC_OscConfig+0x470>)
 8003b32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 80a1 	beq.w	8003c84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b42:	4b34      	ldr	r3, [pc, #208]	@ (8003c14 <HAL_RCC_OscConfig+0x470>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 030c 	and.w	r3, r3, #12
 8003b4a:	2b08      	cmp	r3, #8
 8003b4c:	d05c      	beq.n	8003c08 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d141      	bne.n	8003bda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b56:	4b31      	ldr	r3, [pc, #196]	@ (8003c1c <HAL_RCC_OscConfig+0x478>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5c:	f7ff fd0c 	bl	8003578 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b64:	f7ff fd08 	bl	8003578 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e087      	b.n	8003c86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b76:	4b27      	ldr	r3, [pc, #156]	@ (8003c14 <HAL_RCC_OscConfig+0x470>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1f0      	bne.n	8003b64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69da      	ldr	r2, [r3, #28]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b90:	019b      	lsls	r3, r3, #6
 8003b92:	431a      	orrs	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b98:	085b      	lsrs	r3, r3, #1
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	041b      	lsls	r3, r3, #16
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba4:	061b      	lsls	r3, r3, #24
 8003ba6:	491b      	ldr	r1, [pc, #108]	@ (8003c14 <HAL_RCC_OscConfig+0x470>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bac:	4b1b      	ldr	r3, [pc, #108]	@ (8003c1c <HAL_RCC_OscConfig+0x478>)
 8003bae:	2201      	movs	r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb2:	f7ff fce1 	bl	8003578 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb8:	e008      	b.n	8003bcc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bba:	f7ff fcdd 	bl	8003578 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e05c      	b.n	8003c86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bcc:	4b11      	ldr	r3, [pc, #68]	@ (8003c14 <HAL_RCC_OscConfig+0x470>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0f0      	beq.n	8003bba <HAL_RCC_OscConfig+0x416>
 8003bd8:	e054      	b.n	8003c84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bda:	4b10      	ldr	r3, [pc, #64]	@ (8003c1c <HAL_RCC_OscConfig+0x478>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be0:	f7ff fcca 	bl	8003578 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be8:	f7ff fcc6 	bl	8003578 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e045      	b.n	8003c86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bfa:	4b06      	ldr	r3, [pc, #24]	@ (8003c14 <HAL_RCC_OscConfig+0x470>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1f0      	bne.n	8003be8 <HAL_RCC_OscConfig+0x444>
 8003c06:	e03d      	b.n	8003c84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d107      	bne.n	8003c20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e038      	b.n	8003c86 <HAL_RCC_OscConfig+0x4e2>
 8003c14:	40023800 	.word	0x40023800
 8003c18:	40007000 	.word	0x40007000
 8003c1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c20:	4b1b      	ldr	r3, [pc, #108]	@ (8003c90 <HAL_RCC_OscConfig+0x4ec>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d028      	beq.n	8003c80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d121      	bne.n	8003c80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d11a      	bne.n	8003c80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c50:	4013      	ands	r3, r2
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d111      	bne.n	8003c80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c66:	085b      	lsrs	r3, r3, #1
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d107      	bne.n	8003c80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d001      	beq.n	8003c84 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e000      	b.n	8003c86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3718      	adds	r7, #24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	40023800 	.word	0x40023800

08003c94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e0cc      	b.n	8003e42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ca8:	4b68      	ldr	r3, [pc, #416]	@ (8003e4c <HAL_RCC_ClockConfig+0x1b8>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d90c      	bls.n	8003cd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb6:	4b65      	ldr	r3, [pc, #404]	@ (8003e4c <HAL_RCC_ClockConfig+0x1b8>)
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	b2d2      	uxtb	r2, r2
 8003cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cbe:	4b63      	ldr	r3, [pc, #396]	@ (8003e4c <HAL_RCC_ClockConfig+0x1b8>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d001      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e0b8      	b.n	8003e42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d020      	beq.n	8003d1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ce8:	4b59      	ldr	r3, [pc, #356]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	4a58      	ldr	r2, [pc, #352]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003cf2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0308 	and.w	r3, r3, #8
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d005      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d00:	4b53      	ldr	r3, [pc, #332]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	4a52      	ldr	r2, [pc, #328]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d0c:	4b50      	ldr	r3, [pc, #320]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	494d      	ldr	r1, [pc, #308]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d044      	beq.n	8003db4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d107      	bne.n	8003d42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d32:	4b47      	ldr	r3, [pc, #284]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d119      	bne.n	8003d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e07f      	b.n	8003e42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d003      	beq.n	8003d52 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d4e:	2b03      	cmp	r3, #3
 8003d50:	d107      	bne.n	8003d62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d52:	4b3f      	ldr	r3, [pc, #252]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d109      	bne.n	8003d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e06f      	b.n	8003e42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d62:	4b3b      	ldr	r3, [pc, #236]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e067      	b.n	8003e42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d72:	4b37      	ldr	r3, [pc, #220]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f023 0203 	bic.w	r2, r3, #3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	4934      	ldr	r1, [pc, #208]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d84:	f7ff fbf8 	bl	8003578 <HAL_GetTick>
 8003d88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8a:	e00a      	b.n	8003da2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d8c:	f7ff fbf4 	bl	8003578 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e04f      	b.n	8003e42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da2:	4b2b      	ldr	r3, [pc, #172]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 020c 	and.w	r2, r3, #12
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d1eb      	bne.n	8003d8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003db4:	4b25      	ldr	r3, [pc, #148]	@ (8003e4c <HAL_RCC_ClockConfig+0x1b8>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d20c      	bcs.n	8003ddc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc2:	4b22      	ldr	r3, [pc, #136]	@ (8003e4c <HAL_RCC_ClockConfig+0x1b8>)
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	b2d2      	uxtb	r2, r2
 8003dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dca:	4b20      	ldr	r3, [pc, #128]	@ (8003e4c <HAL_RCC_ClockConfig+0x1b8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0307 	and.w	r3, r3, #7
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d001      	beq.n	8003ddc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e032      	b.n	8003e42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d008      	beq.n	8003dfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003de8:	4b19      	ldr	r3, [pc, #100]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	4916      	ldr	r1, [pc, #88]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d009      	beq.n	8003e1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e06:	4b12      	ldr	r3, [pc, #72]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	490e      	ldr	r1, [pc, #56]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e1a:	f000 f821 	bl	8003e60 <HAL_RCC_GetSysClockFreq>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	4b0b      	ldr	r3, [pc, #44]	@ (8003e50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	091b      	lsrs	r3, r3, #4
 8003e26:	f003 030f 	and.w	r3, r3, #15
 8003e2a:	490a      	ldr	r1, [pc, #40]	@ (8003e54 <HAL_RCC_ClockConfig+0x1c0>)
 8003e2c:	5ccb      	ldrb	r3, [r1, r3]
 8003e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e32:	4a09      	ldr	r2, [pc, #36]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c4>)
 8003e34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003e36:	4b09      	ldr	r3, [pc, #36]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c8>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7ff fb58 	bl	80034f0 <HAL_InitTick>

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40023c00 	.word	0x40023c00
 8003e50:	40023800 	.word	0x40023800
 8003e54:	08007f08 	.word	0x08007f08
 8003e58:	20000000 	.word	0x20000000
 8003e5c:	20000004 	.word	0x20000004

08003e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e64:	b094      	sub	sp, #80	@ 0x50
 8003e66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e78:	4b79      	ldr	r3, [pc, #484]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f003 030c 	and.w	r3, r3, #12
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d00d      	beq.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x40>
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	f200 80e1 	bhi.w	800404c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d002      	beq.n	8003e94 <HAL_RCC_GetSysClockFreq+0x34>
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d003      	beq.n	8003e9a <HAL_RCC_GetSysClockFreq+0x3a>
 8003e92:	e0db      	b.n	800404c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e94:	4b73      	ldr	r3, [pc, #460]	@ (8004064 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e98:	e0db      	b.n	8004052 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e9a:	4b73      	ldr	r3, [pc, #460]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e9e:	e0d8      	b.n	8004052 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ea0:	4b6f      	ldr	r3, [pc, #444]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ea8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eaa:	4b6d      	ldr	r3, [pc, #436]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d063      	beq.n	8003f7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eb6:	4b6a      	ldr	r3, [pc, #424]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	099b      	lsrs	r3, r3, #6
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ec0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ec8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003eca:	2300      	movs	r3, #0
 8003ecc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ece:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003ed2:	4622      	mov	r2, r4
 8003ed4:	462b      	mov	r3, r5
 8003ed6:	f04f 0000 	mov.w	r0, #0
 8003eda:	f04f 0100 	mov.w	r1, #0
 8003ede:	0159      	lsls	r1, r3, #5
 8003ee0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ee4:	0150      	lsls	r0, r2, #5
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4621      	mov	r1, r4
 8003eec:	1a51      	subs	r1, r2, r1
 8003eee:	6139      	str	r1, [r7, #16]
 8003ef0:	4629      	mov	r1, r5
 8003ef2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ef6:	617b      	str	r3, [r7, #20]
 8003ef8:	f04f 0200 	mov.w	r2, #0
 8003efc:	f04f 0300 	mov.w	r3, #0
 8003f00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f04:	4659      	mov	r1, fp
 8003f06:	018b      	lsls	r3, r1, #6
 8003f08:	4651      	mov	r1, sl
 8003f0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f0e:	4651      	mov	r1, sl
 8003f10:	018a      	lsls	r2, r1, #6
 8003f12:	4651      	mov	r1, sl
 8003f14:	ebb2 0801 	subs.w	r8, r2, r1
 8003f18:	4659      	mov	r1, fp
 8003f1a:	eb63 0901 	sbc.w	r9, r3, r1
 8003f1e:	f04f 0200 	mov.w	r2, #0
 8003f22:	f04f 0300 	mov.w	r3, #0
 8003f26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f32:	4690      	mov	r8, r2
 8003f34:	4699      	mov	r9, r3
 8003f36:	4623      	mov	r3, r4
 8003f38:	eb18 0303 	adds.w	r3, r8, r3
 8003f3c:	60bb      	str	r3, [r7, #8]
 8003f3e:	462b      	mov	r3, r5
 8003f40:	eb49 0303 	adc.w	r3, r9, r3
 8003f44:	60fb      	str	r3, [r7, #12]
 8003f46:	f04f 0200 	mov.w	r2, #0
 8003f4a:	f04f 0300 	mov.w	r3, #0
 8003f4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f52:	4629      	mov	r1, r5
 8003f54:	024b      	lsls	r3, r1, #9
 8003f56:	4621      	mov	r1, r4
 8003f58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f5c:	4621      	mov	r1, r4
 8003f5e:	024a      	lsls	r2, r1, #9
 8003f60:	4610      	mov	r0, r2
 8003f62:	4619      	mov	r1, r3
 8003f64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f66:	2200      	movs	r2, #0
 8003f68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f70:	f7fc fe1a 	bl	8000ba8 <__aeabi_uldivmod>
 8003f74:	4602      	mov	r2, r0
 8003f76:	460b      	mov	r3, r1
 8003f78:	4613      	mov	r3, r2
 8003f7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f7c:	e058      	b.n	8004030 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f7e:	4b38      	ldr	r3, [pc, #224]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	099b      	lsrs	r3, r3, #6
 8003f84:	2200      	movs	r2, #0
 8003f86:	4618      	mov	r0, r3
 8003f88:	4611      	mov	r1, r2
 8003f8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f8e:	623b      	str	r3, [r7, #32]
 8003f90:	2300      	movs	r3, #0
 8003f92:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f98:	4642      	mov	r2, r8
 8003f9a:	464b      	mov	r3, r9
 8003f9c:	f04f 0000 	mov.w	r0, #0
 8003fa0:	f04f 0100 	mov.w	r1, #0
 8003fa4:	0159      	lsls	r1, r3, #5
 8003fa6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003faa:	0150      	lsls	r0, r2, #5
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
 8003fb0:	4641      	mov	r1, r8
 8003fb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fb6:	4649      	mov	r1, r9
 8003fb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fcc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fd0:	ebb2 040a 	subs.w	r4, r2, sl
 8003fd4:	eb63 050b 	sbc.w	r5, r3, fp
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	f04f 0300 	mov.w	r3, #0
 8003fe0:	00eb      	lsls	r3, r5, #3
 8003fe2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fe6:	00e2      	lsls	r2, r4, #3
 8003fe8:	4614      	mov	r4, r2
 8003fea:	461d      	mov	r5, r3
 8003fec:	4643      	mov	r3, r8
 8003fee:	18e3      	adds	r3, r4, r3
 8003ff0:	603b      	str	r3, [r7, #0]
 8003ff2:	464b      	mov	r3, r9
 8003ff4:	eb45 0303 	adc.w	r3, r5, r3
 8003ff8:	607b      	str	r3, [r7, #4]
 8003ffa:	f04f 0200 	mov.w	r2, #0
 8003ffe:	f04f 0300 	mov.w	r3, #0
 8004002:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004006:	4629      	mov	r1, r5
 8004008:	028b      	lsls	r3, r1, #10
 800400a:	4621      	mov	r1, r4
 800400c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004010:	4621      	mov	r1, r4
 8004012:	028a      	lsls	r2, r1, #10
 8004014:	4610      	mov	r0, r2
 8004016:	4619      	mov	r1, r3
 8004018:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800401a:	2200      	movs	r2, #0
 800401c:	61bb      	str	r3, [r7, #24]
 800401e:	61fa      	str	r2, [r7, #28]
 8004020:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004024:	f7fc fdc0 	bl	8000ba8 <__aeabi_uldivmod>
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	4613      	mov	r3, r2
 800402e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004030:	4b0b      	ldr	r3, [pc, #44]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x200>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	0c1b      	lsrs	r3, r3, #16
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	3301      	adds	r3, #1
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004040:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004042:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004044:	fbb2 f3f3 	udiv	r3, r2, r3
 8004048:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800404a:	e002      	b.n	8004052 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800404c:	4b05      	ldr	r3, [pc, #20]	@ (8004064 <HAL_RCC_GetSysClockFreq+0x204>)
 800404e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004050:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004052:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004054:	4618      	mov	r0, r3
 8004056:	3750      	adds	r7, #80	@ 0x50
 8004058:	46bd      	mov	sp, r7
 800405a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800405e:	bf00      	nop
 8004060:	40023800 	.word	0x40023800
 8004064:	00f42400 	.word	0x00f42400
 8004068:	007a1200 	.word	0x007a1200

0800406c <LL_GPIO_SetPinMode>:
{
 800406c:	b480      	push	{r7}
 800406e:	b08b      	sub	sp, #44	@ 0x2c
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	fa93 f3a3 	rbit	r3, r3
 8004086:	613b      	str	r3, [r7, #16]
  return result;
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8004092:	2320      	movs	r3, #32
 8004094:	e003      	b.n	800409e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	fab3 f383 	clz	r3, r3
 800409c:	b2db      	uxtb	r3, r3
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	2103      	movs	r1, #3
 80040a2:	fa01 f303 	lsl.w	r3, r1, r3
 80040a6:	43db      	mvns	r3, r3
 80040a8:	401a      	ands	r2, r3
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	fa93 f3a3 	rbit	r3, r3
 80040b4:	61fb      	str	r3, [r7, #28]
  return result;
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80040ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80040c0:	2320      	movs	r3, #32
 80040c2:	e003      	b.n	80040cc <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80040c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c6:	fab3 f383 	clz	r3, r3
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	fa01 f303 	lsl.w	r3, r1, r3
 80040d4:	431a      	orrs	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	601a      	str	r2, [r3, #0]
}
 80040da:	bf00      	nop
 80040dc:	372c      	adds	r7, #44	@ 0x2c
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <LL_GPIO_SetPinOutputType>:
{
 80040e6:	b480      	push	{r7}
 80040e8:	b085      	sub	sp, #20
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	60f8      	str	r0, [r7, #12]
 80040ee:	60b9      	str	r1, [r7, #8]
 80040f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	43db      	mvns	r3, r3
 80040fa:	401a      	ands	r2, r3
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	fb01 f303 	mul.w	r3, r1, r3
 8004104:	431a      	orrs	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	605a      	str	r2, [r3, #4]
}
 800410a:	bf00      	nop
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <LL_GPIO_SetPinSpeed>:
{
 8004116:	b480      	push	{r7}
 8004118:	b08b      	sub	sp, #44	@ 0x2c
 800411a:	af00      	add	r7, sp, #0
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	689a      	ldr	r2, [r3, #8]
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	fa93 f3a3 	rbit	r3, r3
 8004130:	613b      	str	r3, [r7, #16]
  return result;
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800413c:	2320      	movs	r3, #32
 800413e:	e003      	b.n	8004148 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	fab3 f383 	clz	r3, r3
 8004146:	b2db      	uxtb	r3, r3
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	2103      	movs	r1, #3
 800414c:	fa01 f303 	lsl.w	r3, r1, r3
 8004150:	43db      	mvns	r3, r3
 8004152:	401a      	ands	r2, r3
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	fa93 f3a3 	rbit	r3, r3
 800415e:	61fb      	str	r3, [r7, #28]
  return result;
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800416a:	2320      	movs	r3, #32
 800416c:	e003      	b.n	8004176 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800416e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004170:	fab3 f383 	clz	r3, r3
 8004174:	b2db      	uxtb	r3, r3
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	6879      	ldr	r1, [r7, #4]
 800417a:	fa01 f303 	lsl.w	r3, r1, r3
 800417e:	431a      	orrs	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	609a      	str	r2, [r3, #8]
}
 8004184:	bf00      	nop
 8004186:	372c      	adds	r7, #44	@ 0x2c
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <LL_GPIO_SetPinPull>:
{
 8004190:	b480      	push	{r7}
 8004192:	b08b      	sub	sp, #44	@ 0x2c
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	68da      	ldr	r2, [r3, #12]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	fa93 f3a3 	rbit	r3, r3
 80041aa:	613b      	str	r3, [r7, #16]
  return result;
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80041b6:	2320      	movs	r3, #32
 80041b8:	e003      	b.n	80041c2 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	fab3 f383 	clz	r3, r3
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	2103      	movs	r1, #3
 80041c6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ca:	43db      	mvns	r3, r3
 80041cc:	401a      	ands	r2, r3
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	fa93 f3a3 	rbit	r3, r3
 80041d8:	61fb      	str	r3, [r7, #28]
  return result;
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80041de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80041e4:	2320      	movs	r3, #32
 80041e6:	e003      	b.n	80041f0 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80041e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ea:	fab3 f383 	clz	r3, r3
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	fa01 f303 	lsl.w	r3, r1, r3
 80041f8:	431a      	orrs	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	60da      	str	r2, [r3, #12]
}
 80041fe:	bf00      	nop
 8004200:	372c      	adds	r7, #44	@ 0x2c
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <LL_GPIO_SetAFPin_0_7>:
{
 800420a:	b480      	push	{r7}
 800420c:	b08b      	sub	sp, #44	@ 0x2c
 800420e:	af00      	add	r7, sp, #0
 8004210:	60f8      	str	r0, [r7, #12]
 8004212:	60b9      	str	r1, [r7, #8]
 8004214:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6a1a      	ldr	r2, [r3, #32]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	fa93 f3a3 	rbit	r3, r3
 8004224:	613b      	str	r3, [r7, #16]
  return result;
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8004230:	2320      	movs	r3, #32
 8004232:	e003      	b.n	800423c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	fab3 f383 	clz	r3, r3
 800423a:	b2db      	uxtb	r3, r3
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	210f      	movs	r1, #15
 8004240:	fa01 f303 	lsl.w	r3, r1, r3
 8004244:	43db      	mvns	r3, r3
 8004246:	401a      	ands	r2, r3
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	fa93 f3a3 	rbit	r3, r3
 8004252:	61fb      	str	r3, [r7, #28]
  return result;
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800425e:	2320      	movs	r3, #32
 8004260:	e003      	b.n	800426a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8004262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004264:	fab3 f383 	clz	r3, r3
 8004268:	b2db      	uxtb	r3, r3
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	fa01 f303 	lsl.w	r3, r1, r3
 8004272:	431a      	orrs	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	621a      	str	r2, [r3, #32]
}
 8004278:	bf00      	nop
 800427a:	372c      	adds	r7, #44	@ 0x2c
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <LL_GPIO_SetAFPin_8_15>:
{
 8004284:	b480      	push	{r7}
 8004286:	b08b      	sub	sp, #44	@ 0x2c
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	0a1b      	lsrs	r3, r3, #8
 8004298:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	fa93 f3a3 	rbit	r3, r3
 80042a0:	613b      	str	r3, [r7, #16]
  return result;
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80042ac:	2320      	movs	r3, #32
 80042ae:	e003      	b.n	80042b8 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	fab3 f383 	clz	r3, r3
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	210f      	movs	r1, #15
 80042bc:	fa01 f303 	lsl.w	r3, r1, r3
 80042c0:	43db      	mvns	r3, r3
 80042c2:	401a      	ands	r2, r3
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	0a1b      	lsrs	r3, r3, #8
 80042c8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	fa93 f3a3 	rbit	r3, r3
 80042d0:	61fb      	str	r3, [r7, #28]
  return result;
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80042d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80042dc:	2320      	movs	r3, #32
 80042de:	e003      	b.n	80042e8 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80042e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e2:	fab3 f383 	clz	r3, r3
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	6879      	ldr	r1, [r7, #4]
 80042ec:	fa01 f303 	lsl.w	r3, r1, r3
 80042f0:	431a      	orrs	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80042f6:	bf00      	nop
 80042f8:	372c      	adds	r7, #44	@ 0x2c
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b08a      	sub	sp, #40	@ 0x28
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800430c:	2300      	movs	r3, #0
 800430e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8004310:	2300      	movs	r3, #0
 8004312:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	fa93 f3a3 	rbit	r3, r3
 8004320:	617b      	str	r3, [r7, #20]
  return result;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d101      	bne.n	8004330 <LL_GPIO_Init+0x2e>
    return 32U;
 800432c:	2320      	movs	r3, #32
 800432e:	e003      	b.n	8004338 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	fab3 f383 	clz	r3, r3
 8004336:	b2db      	uxtb	r3, r3
 8004338:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800433a:	e057      	b.n	80043ec <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	2101      	movs	r1, #1
 8004342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004344:	fa01 f303 	lsl.w	r3, r1, r3
 8004348:	4013      	ands	r3, r2
 800434a:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 800434c:	6a3b      	ldr	r3, [r7, #32]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d049      	beq.n	80043e6 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d003      	beq.n	8004362 <LL_GPIO_Init+0x60>
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2b02      	cmp	r3, #2
 8004360:	d10d      	bne.n	800437e <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	461a      	mov	r2, r3
 8004368:	6a39      	ldr	r1, [r7, #32]
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7ff fed3 	bl	8004116 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	461a      	mov	r2, r3
 8004376:	6a39      	ldr	r1, [r7, #32]
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f7ff feb4 	bl	80040e6 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	461a      	mov	r2, r3
 8004384:	6a39      	ldr	r1, [r7, #32]
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7ff ff02 	bl	8004190 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b02      	cmp	r3, #2
 8004392:	d121      	bne.n	80043d8 <LL_GPIO_Init+0xd6>
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	fa93 f3a3 	rbit	r3, r3
 800439e:	60bb      	str	r3, [r7, #8]
  return result;
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <LL_GPIO_Init+0xac>
    return 32U;
 80043aa:	2320      	movs	r3, #32
 80043ac:	e003      	b.n	80043b6 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	fab3 f383 	clz	r3, r3
 80043b4:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80043b6:	2b07      	cmp	r3, #7
 80043b8:	d807      	bhi.n	80043ca <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	461a      	mov	r2, r3
 80043c0:	6a39      	ldr	r1, [r7, #32]
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7ff ff21 	bl	800420a <LL_GPIO_SetAFPin_0_7>
 80043c8:	e006      	b.n	80043d8 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	461a      	mov	r2, r3
 80043d0:	6a39      	ldr	r1, [r7, #32]
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7ff ff56 	bl	8004284 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	461a      	mov	r2, r3
 80043de:	6a39      	ldr	r1, [r7, #32]
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f7ff fe43 	bl	800406c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80043e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e8:	3301      	adds	r3, #1
 80043ea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f2:	fa22 f303 	lsr.w	r3, r2, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1a0      	bne.n	800433c <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3728      	adds	r7, #40	@ 0x28
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004408:	4b04      	ldr	r3, [pc, #16]	@ (800441c <LL_RCC_GetSysClkSource+0x18>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f003 030c 	and.w	r3, r3, #12
}
 8004410:	4618      	mov	r0, r3
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	40023800 	.word	0x40023800

08004420 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004424:	4b04      	ldr	r3, [pc, #16]	@ (8004438 <LL_RCC_GetAHBPrescaler+0x18>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800442c:	4618      	mov	r0, r3
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40023800 	.word	0x40023800

0800443c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004440:	4b04      	ldr	r3, [pc, #16]	@ (8004454 <LL_RCC_GetAPB1Prescaler+0x18>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8004448:	4618      	mov	r0, r3
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	40023800 	.word	0x40023800

08004458 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800445c:	4b04      	ldr	r3, [pc, #16]	@ (8004470 <LL_RCC_GetAPB2Prescaler+0x18>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8004464:	4618      	mov	r0, r3
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	40023800 	.word	0x40023800

08004474 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004478:	4b04      	ldr	r3, [pc, #16]	@ (800448c <LL_RCC_PLL_GetMainSource+0x18>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8004480:	4618      	mov	r0, r3
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	40023800 	.word	0x40023800

08004490 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004494:	4b04      	ldr	r3, [pc, #16]	@ (80044a8 <LL_RCC_PLL_GetN+0x18>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	099b      	lsrs	r3, r3, #6
 800449a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800449e:	4618      	mov	r0, r3
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	40023800 	.word	0x40023800

080044ac <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80044b0:	4b04      	ldr	r3, [pc, #16]	@ (80044c4 <LL_RCC_PLL_GetP+0x18>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	40023800 	.word	0x40023800

080044c8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80044cc:	4b04      	ldr	r3, [pc, #16]	@ (80044e0 <LL_RCC_PLL_GetDivider+0x18>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	40023800 	.word	0x40023800

080044e4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80044ec:	f000 f820 	bl	8004530 <RCC_GetSystemClockFreq>
 80044f0:	4602      	mov	r2, r0
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 f840 	bl	8004580 <RCC_GetHCLKClockFreq>
 8004500:	4602      	mov	r2, r0
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	4618      	mov	r0, r3
 800450c:	f000 f84e 	bl	80045ac <RCC_GetPCLK1ClockFreq>
 8004510:	4602      	mov	r2, r0
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	4618      	mov	r0, r3
 800451c:	f000 f85a 	bl	80045d4 <RCC_GetPCLK2ClockFreq>
 8004520:	4602      	mov	r2, r0
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	60da      	str	r2, [r3, #12]
}
 8004526:	bf00      	nop
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
	...

08004530 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8004536:	2300      	movs	r3, #0
 8004538:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800453a:	f7ff ff63 	bl	8004404 <LL_RCC_GetSysClkSource>
 800453e:	4603      	mov	r3, r0
 8004540:	2b08      	cmp	r3, #8
 8004542:	d00c      	beq.n	800455e <RCC_GetSystemClockFreq+0x2e>
 8004544:	2b08      	cmp	r3, #8
 8004546:	d80f      	bhi.n	8004568 <RCC_GetSystemClockFreq+0x38>
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <RCC_GetSystemClockFreq+0x22>
 800454c:	2b04      	cmp	r3, #4
 800454e:	d003      	beq.n	8004558 <RCC_GetSystemClockFreq+0x28>
 8004550:	e00a      	b.n	8004568 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004552:	4b09      	ldr	r3, [pc, #36]	@ (8004578 <RCC_GetSystemClockFreq+0x48>)
 8004554:	607b      	str	r3, [r7, #4]
      break;
 8004556:	e00a      	b.n	800456e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004558:	4b08      	ldr	r3, [pc, #32]	@ (800457c <RCC_GetSystemClockFreq+0x4c>)
 800455a:	607b      	str	r3, [r7, #4]
      break;
 800455c:	e007      	b.n	800456e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800455e:	2008      	movs	r0, #8
 8004560:	f000 f84c 	bl	80045fc <RCC_PLL_GetFreqDomain_SYS>
 8004564:	6078      	str	r0, [r7, #4]
      break;
 8004566:	e002      	b.n	800456e <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8004568:	4b03      	ldr	r3, [pc, #12]	@ (8004578 <RCC_GetSystemClockFreq+0x48>)
 800456a:	607b      	str	r3, [r7, #4]
      break;
 800456c:	bf00      	nop
  }

  return frequency;
 800456e:	687b      	ldr	r3, [r7, #4]
}
 8004570:	4618      	mov	r0, r3
 8004572:	3708      	adds	r7, #8
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	00f42400 	.word	0x00f42400
 800457c:	007a1200 	.word	0x007a1200

08004580 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004588:	f7ff ff4a 	bl	8004420 <LL_RCC_GetAHBPrescaler>
 800458c:	4603      	mov	r3, r0
 800458e:	091b      	lsrs	r3, r3, #4
 8004590:	f003 030f 	and.w	r3, r3, #15
 8004594:	4a04      	ldr	r2, [pc, #16]	@ (80045a8 <RCC_GetHCLKClockFreq+0x28>)
 8004596:	5cd3      	ldrb	r3, [r2, r3]
 8004598:	461a      	mov	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	40d3      	lsrs	r3, r2
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3708      	adds	r7, #8
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	08007f08 	.word	0x08007f08

080045ac <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80045b4:	f7ff ff42 	bl	800443c <LL_RCC_GetAPB1Prescaler>
 80045b8:	4603      	mov	r3, r0
 80045ba:	0a9b      	lsrs	r3, r3, #10
 80045bc:	4a04      	ldr	r2, [pc, #16]	@ (80045d0 <RCC_GetPCLK1ClockFreq+0x24>)
 80045be:	5cd3      	ldrb	r3, [r2, r3]
 80045c0:	461a      	mov	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	40d3      	lsrs	r3, r2
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	08007f18 	.word	0x08007f18

080045d4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80045dc:	f7ff ff3c 	bl	8004458 <LL_RCC_GetAPB2Prescaler>
 80045e0:	4603      	mov	r3, r0
 80045e2:	0b5b      	lsrs	r3, r3, #13
 80045e4:	4a04      	ldr	r2, [pc, #16]	@ (80045f8 <RCC_GetPCLK2ClockFreq+0x24>)
 80045e6:	5cd3      	ldrb	r3, [r2, r3]
 80045e8:	461a      	mov	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	40d3      	lsrs	r3, r2
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	08007f18 	.word	0x08007f18

080045fc <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80045fc:	b590      	push	{r4, r7, lr}
 80045fe:	b087      	sub	sp, #28
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8004604:	2300      	movs	r3, #0
 8004606:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8004608:	2300      	movs	r3, #0
 800460a:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 800460c:	2300      	movs	r3, #0
 800460e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004610:	f7ff ff30 	bl	8004474 <LL_RCC_PLL_GetMainSource>
 8004614:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d004      	beq.n	8004626 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004622:	d003      	beq.n	800462c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8004624:	e005      	b.n	8004632 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004626:	4b12      	ldr	r3, [pc, #72]	@ (8004670 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004628:	617b      	str	r3, [r7, #20]
      break;
 800462a:	e005      	b.n	8004638 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800462c:	4b11      	ldr	r3, [pc, #68]	@ (8004674 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800462e:	617b      	str	r3, [r7, #20]
      break;
 8004630:	e002      	b.n	8004638 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8004632:	4b0f      	ldr	r3, [pc, #60]	@ (8004670 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004634:	617b      	str	r3, [r7, #20]
      break;
 8004636:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b08      	cmp	r3, #8
 800463c:	d113      	bne.n	8004666 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800463e:	f7ff ff43 	bl	80044c8 <LL_RCC_PLL_GetDivider>
 8004642:	4602      	mov	r2, r0
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	fbb3 f4f2 	udiv	r4, r3, r2
 800464a:	f7ff ff21 	bl	8004490 <LL_RCC_PLL_GetN>
 800464e:	4603      	mov	r3, r0
 8004650:	fb03 f404 	mul.w	r4, r3, r4
 8004654:	f7ff ff2a 	bl	80044ac <LL_RCC_PLL_GetP>
 8004658:	4603      	mov	r3, r0
 800465a:	0c1b      	lsrs	r3, r3, #16
 800465c:	3301      	adds	r3, #1
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	fbb4 f3f3 	udiv	r3, r4, r3
 8004664:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8004666:	693b      	ldr	r3, [r7, #16]
}
 8004668:	4618      	mov	r0, r3
 800466a:	371c      	adds	r7, #28
 800466c:	46bd      	mov	sp, r7
 800466e:	bd90      	pop	{r4, r7, pc}
 8004670:	00f42400 	.word	0x00f42400
 8004674:	007a1200 	.word	0x007a1200

08004678 <LL_SPI_IsEnabled>:
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004688:	2b40      	cmp	r3, #64	@ 0x40
 800468a:	d101      	bne.n	8004690 <LL_SPI_IsEnabled+0x18>
 800468c:	2301      	movs	r3, #1
 800468e:	e000      	b.n	8004692 <LL_SPI_IsEnabled+0x1a>
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <LL_SPI_SetCRCPolynomial>:
{
 800469e:	b480      	push	{r7}
 80046a0:	b083      	sub	sp, #12
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
 80046a6:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	461a      	mov	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	611a      	str	r2, [r3, #16]
}
 80046b2:	bf00      	nop
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b084      	sub	sp, #16
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
 80046c6:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f7ff ffd3 	bl	8004678 <LL_SPI_IsEnabled>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d139      	bne.n	800474c <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046e0:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	6811      	ldr	r1, [r2, #0]
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	6852      	ldr	r2, [r2, #4]
 80046ec:	4311      	orrs	r1, r2
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	6892      	ldr	r2, [r2, #8]
 80046f2:	4311      	orrs	r1, r2
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	68d2      	ldr	r2, [r2, #12]
 80046f8:	4311      	orrs	r1, r2
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	6912      	ldr	r2, [r2, #16]
 80046fe:	4311      	orrs	r1, r2
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	6952      	ldr	r2, [r2, #20]
 8004704:	4311      	orrs	r1, r2
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	6992      	ldr	r2, [r2, #24]
 800470a:	4311      	orrs	r1, r2
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	69d2      	ldr	r2, [r2, #28]
 8004710:	4311      	orrs	r1, r2
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	6a12      	ldr	r2, [r2, #32]
 8004716:	430a      	orrs	r2, r1
 8004718:	431a      	orrs	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f023 0204 	bic.w	r2, r3, #4
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	0c1b      	lsrs	r3, r3, #16
 800472c:	431a      	orrs	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800473a:	d105      	bne.n	8004748 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004740:	4619      	mov	r1, r3
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7ff ffab 	bl	800469e <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8004748:	2300      	movs	r3, #0
 800474a:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	69db      	ldr	r3, [r3, #28]
 8004750:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	61da      	str	r2, [r3, #28]
  return status;
 8004758:	7bfb      	ldrb	r3, [r7, #15]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <LL_TIM_SetPrescaler>:
{
 8004762:	b480      	push	{r7}
 8004764:	b083      	sub	sp, #12
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
 800476a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004772:	bf00      	nop
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <LL_TIM_SetAutoReload>:
{
 800477e:	b480      	push	{r7}
 8004780:	b083      	sub	sp, #12
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800478e:	bf00      	nop
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <LL_TIM_SetRepetitionCounter>:
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80047aa:	bf00      	nop
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr

080047b6 <LL_TIM_OC_SetCompareCH1>:
{
 80047b6:	b480      	push	{r7}
 80047b8:	b083      	sub	sp, #12
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
 80047be:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80047c6:	bf00      	nop
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <LL_TIM_OC_SetCompareCH2>:
{
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
 80047da:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80047e2:	bf00      	nop
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <LL_TIM_OC_SetCompareCH3>:
{
 80047ee:	b480      	push	{r7}
 80047f0:	b083      	sub	sp, #12
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
 80047f6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80047fe:	bf00      	nop
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <LL_TIM_OC_SetCompareCH4>:
{
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
 8004812:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800481a:	bf00      	nop
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	f043 0201 	orr.w	r2, r3, #1
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	615a      	str	r2, [r3, #20]
}
 800483a:	bf00      	nop
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
	...

08004848 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a3d      	ldr	r2, [pc, #244]	@ (8004950 <LL_TIM_Init+0x108>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d013      	beq.n	8004888 <LL_TIM_Init+0x40>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004866:	d00f      	beq.n	8004888 <LL_TIM_Init+0x40>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a3a      	ldr	r2, [pc, #232]	@ (8004954 <LL_TIM_Init+0x10c>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d00b      	beq.n	8004888 <LL_TIM_Init+0x40>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a39      	ldr	r2, [pc, #228]	@ (8004958 <LL_TIM_Init+0x110>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d007      	beq.n	8004888 <LL_TIM_Init+0x40>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a38      	ldr	r2, [pc, #224]	@ (800495c <LL_TIM_Init+0x114>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d003      	beq.n	8004888 <LL_TIM_Init+0x40>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a37      	ldr	r2, [pc, #220]	@ (8004960 <LL_TIM_Init+0x118>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d106      	bne.n	8004896 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a2d      	ldr	r2, [pc, #180]	@ (8004950 <LL_TIM_Init+0x108>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d02b      	beq.n	80048f6 <LL_TIM_Init+0xae>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048a4:	d027      	beq.n	80048f6 <LL_TIM_Init+0xae>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a2a      	ldr	r2, [pc, #168]	@ (8004954 <LL_TIM_Init+0x10c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d023      	beq.n	80048f6 <LL_TIM_Init+0xae>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a29      	ldr	r2, [pc, #164]	@ (8004958 <LL_TIM_Init+0x110>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d01f      	beq.n	80048f6 <LL_TIM_Init+0xae>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a28      	ldr	r2, [pc, #160]	@ (800495c <LL_TIM_Init+0x114>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d01b      	beq.n	80048f6 <LL_TIM_Init+0xae>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a27      	ldr	r2, [pc, #156]	@ (8004960 <LL_TIM_Init+0x118>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d017      	beq.n	80048f6 <LL_TIM_Init+0xae>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a26      	ldr	r2, [pc, #152]	@ (8004964 <LL_TIM_Init+0x11c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d013      	beq.n	80048f6 <LL_TIM_Init+0xae>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a25      	ldr	r2, [pc, #148]	@ (8004968 <LL_TIM_Init+0x120>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d00f      	beq.n	80048f6 <LL_TIM_Init+0xae>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a24      	ldr	r2, [pc, #144]	@ (800496c <LL_TIM_Init+0x124>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d00b      	beq.n	80048f6 <LL_TIM_Init+0xae>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a23      	ldr	r2, [pc, #140]	@ (8004970 <LL_TIM_Init+0x128>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d007      	beq.n	80048f6 <LL_TIM_Init+0xae>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a22      	ldr	r2, [pc, #136]	@ (8004974 <LL_TIM_Init+0x12c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d003      	beq.n	80048f6 <LL_TIM_Init+0xae>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a21      	ldr	r2, [pc, #132]	@ (8004978 <LL_TIM_Init+0x130>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d106      	bne.n	8004904 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	4313      	orrs	r3, r2
 8004902:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	4619      	mov	r1, r3
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f7ff ff34 	bl	800477e <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	881b      	ldrh	r3, [r3, #0]
 800491a:	4619      	mov	r1, r3
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f7ff ff20 	bl	8004762 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a0a      	ldr	r2, [pc, #40]	@ (8004950 <LL_TIM_Init+0x108>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d003      	beq.n	8004932 <LL_TIM_Init+0xea>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a0c      	ldr	r2, [pc, #48]	@ (8004960 <LL_TIM_Init+0x118>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d105      	bne.n	800493e <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	4619      	mov	r1, r3
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7ff ff2e 	bl	800479a <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7ff ff71 	bl	8004826 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	40010000 	.word	0x40010000
 8004954:	40000400 	.word	0x40000400
 8004958:	40000800 	.word	0x40000800
 800495c:	40000c00 	.word	0x40000c00
 8004960:	40010400 	.word	0x40010400
 8004964:	40014000 	.word	0x40014000
 8004968:	40014400 	.word	0x40014400
 800496c:	40014800 	.word	0x40014800
 8004970:	40001800 	.word	0x40001800
 8004974:	40001c00 	.word	0x40001c00
 8004978:	40002000 	.word	0x40002000

0800497c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004992:	d027      	beq.n	80049e4 <LL_TIM_OC_Init+0x68>
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800499a:	d82a      	bhi.n	80049f2 <LL_TIM_OC_Init+0x76>
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049a2:	d018      	beq.n	80049d6 <LL_TIM_OC_Init+0x5a>
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049aa:	d822      	bhi.n	80049f2 <LL_TIM_OC_Init+0x76>
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d003      	beq.n	80049ba <LL_TIM_OC_Init+0x3e>
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	2b10      	cmp	r3, #16
 80049b6:	d007      	beq.n	80049c8 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80049b8:	e01b      	b.n	80049f2 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80049ba:	6879      	ldr	r1, [r7, #4]
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 f81f 	bl	8004a00 <OC1Config>
 80049c2:	4603      	mov	r3, r0
 80049c4:	75fb      	strb	r3, [r7, #23]
      break;
 80049c6:	e015      	b.n	80049f4 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80049c8:	6879      	ldr	r1, [r7, #4]
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f000 f884 	bl	8004ad8 <OC2Config>
 80049d0:	4603      	mov	r3, r0
 80049d2:	75fb      	strb	r3, [r7, #23]
      break;
 80049d4:	e00e      	b.n	80049f4 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80049d6:	6879      	ldr	r1, [r7, #4]
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 f8ed 	bl	8004bb8 <OC3Config>
 80049de:	4603      	mov	r3, r0
 80049e0:	75fb      	strb	r3, [r7, #23]
      break;
 80049e2:	e007      	b.n	80049f4 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80049e4:	6879      	ldr	r1, [r7, #4]
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f000 f956 	bl	8004c98 <OC4Config>
 80049ec:	4603      	mov	r3, r0
 80049ee:	75fb      	strb	r3, [r7, #23]
      break;
 80049f0:	e000      	b.n	80049f4 <LL_TIM_OC_Init+0x78>
      break;
 80049f2:	bf00      	nop
  }

  return result;
 80049f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
	...

08004a00 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	f023 0201 	bic.w	r2, r3, #1
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f023 0303 	bic.w	r3, r3, #3
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f023 0202 	bic.w	r2, r3, #2
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	f023 0201 	bic.w	r2, r3, #1
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ad0 <OC1Config+0xd0>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d003      	beq.n	8004a6a <OC1Config+0x6a>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a1b      	ldr	r2, [pc, #108]	@ (8004ad4 <OC1Config+0xd4>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d11e      	bne.n	8004aa8 <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f023 0208 	bic.w	r2, r3, #8
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	695b      	ldr	r3, [r3, #20]
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4313      	orrs	r3, r2
 8004a78:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f023 0204 	bic.w	r2, r3, #4
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4313      	orrs	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	4619      	mov	r1, r3
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7ff fe7b 	bl	80047b6 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	40010000 	.word	0x40010000
 8004ad4:	40010400 	.word	0x40010400

08004ad8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	f023 0210 	bic.w	r2, r3, #16
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	021b      	lsls	r3, r3, #8
 8004b14:	4313      	orrs	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f023 0220 	bic.w	r2, r3, #32
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	011b      	lsls	r3, r3, #4
 8004b24:	4313      	orrs	r3, r2
 8004b26:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f023 0210 	bic.w	r2, r3, #16
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	011b      	lsls	r3, r3, #4
 8004b34:	4313      	orrs	r3, r2
 8004b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a1d      	ldr	r2, [pc, #116]	@ (8004bb0 <OC2Config+0xd8>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d003      	beq.n	8004b48 <OC2Config+0x70>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a1c      	ldr	r2, [pc, #112]	@ (8004bb4 <OC2Config+0xdc>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d11f      	bne.n	8004b88 <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	019b      	lsls	r3, r3, #6
 8004b54:	4313      	orrs	r3, r2
 8004b56:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	019b      	lsls	r3, r3, #6
 8004b64:	4313      	orrs	r3, r2
 8004b66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4313      	orrs	r3, r2
 8004b76:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	4313      	orrs	r3, r2
 8004b86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	4619      	mov	r1, r3
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7ff fe19 	bl	80047d2 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3718      	adds	r7, #24
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	40010000 	.word	0x40010000
 8004bb4:	40010400 	.word	0x40010400

08004bb8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	69db      	ldr	r3, [r3, #28]
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f023 0303 	bic.w	r3, r3, #3
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	021b      	lsls	r3, r3, #8
 8004c02:	4313      	orrs	r3, r2
 8004c04:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	021b      	lsls	r3, r3, #8
 8004c12:	4313      	orrs	r3, r2
 8004c14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a1d      	ldr	r2, [pc, #116]	@ (8004c90 <OC3Config+0xd8>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d003      	beq.n	8004c26 <OC3Config+0x6e>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a1c      	ldr	r2, [pc, #112]	@ (8004c94 <OC3Config+0xdc>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d11f      	bne.n	8004c66 <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	029b      	lsls	r3, r3, #10
 8004c32:	4313      	orrs	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	029b      	lsls	r3, r3, #10
 8004c42:	4313      	orrs	r3, r2
 8004c44:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	011b      	lsls	r3, r3, #4
 8004c52:	4313      	orrs	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	015b      	lsls	r3, r3, #5
 8004c62:	4313      	orrs	r3, r2
 8004c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	4619      	mov	r1, r3
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7ff fdb8 	bl	80047ee <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3718      	adds	r7, #24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	40010000 	.word	0x40010000
 8004c94:	40010400 	.word	0x40010400

08004c98 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	021b      	lsls	r3, r3, #8
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	031b      	lsls	r3, r3, #12
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	031b      	lsls	r3, r3, #12
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a11      	ldr	r2, [pc, #68]	@ (8004d40 <OC4Config+0xa8>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d003      	beq.n	8004d08 <OC4Config+0x70>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a10      	ldr	r2, [pc, #64]	@ (8004d44 <OC4Config+0xac>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d107      	bne.n	8004d18 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	019b      	lsls	r3, r3, #6
 8004d14:	4313      	orrs	r3, r2
 8004d16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	4619      	mov	r1, r3
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7ff fd6d 	bl	800480a <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3718      	adds	r7, #24
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	40010000 	.word	0x40010000
 8004d44:	40010400 	.word	0x40010400

08004d48 <LL_USART_IsEnabled>:
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d5c:	bf0c      	ite	eq
 8004d5e:	2301      	moveq	r3, #1
 8004d60:	2300      	movne	r3, #0
 8004d62:	b2db      	uxtb	r3, r3
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <LL_USART_SetStopBitsLength>:
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	431a      	orrs	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	611a      	str	r2, [r3, #16]
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <LL_USART_SetHWFlowCtrl>:
{
 8004d96:	b480      	push	{r7}
 8004d98:	b083      	sub	sp, #12
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	431a      	orrs	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	615a      	str	r2, [r3, #20]
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <LL_USART_SetBaudRate>:
{
 8004dbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dc0:	b0c0      	sub	sp, #256	@ 0x100
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004dc8:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8004dcc:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8004dd0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ddc:	f040 810c 	bne.w	8004ff8 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004de0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004de4:	2200      	movs	r2, #0
 8004de6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004dea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004dee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004df2:	4622      	mov	r2, r4
 8004df4:	462b      	mov	r3, r5
 8004df6:	1891      	adds	r1, r2, r2
 8004df8:	6639      	str	r1, [r7, #96]	@ 0x60
 8004dfa:	415b      	adcs	r3, r3
 8004dfc:	667b      	str	r3, [r7, #100]	@ 0x64
 8004dfe:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8004e02:	4621      	mov	r1, r4
 8004e04:	eb12 0801 	adds.w	r8, r2, r1
 8004e08:	4629      	mov	r1, r5
 8004e0a:	eb43 0901 	adc.w	r9, r3, r1
 8004e0e:	f04f 0200 	mov.w	r2, #0
 8004e12:	f04f 0300 	mov.w	r3, #0
 8004e16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e22:	4690      	mov	r8, r2
 8004e24:	4699      	mov	r9, r3
 8004e26:	4623      	mov	r3, r4
 8004e28:	eb18 0303 	adds.w	r3, r8, r3
 8004e2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e30:	462b      	mov	r3, r5
 8004e32:	eb49 0303 	adc.w	r3, r9, r3
 8004e36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e3a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004e3e:	2200      	movs	r2, #0
 8004e40:	469a      	mov	sl, r3
 8004e42:	4693      	mov	fp, r2
 8004e44:	eb1a 030a 	adds.w	r3, sl, sl
 8004e48:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e4a:	eb4b 030b 	adc.w	r3, fp, fp
 8004e4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e50:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004e58:	f7fb fea6 	bl	8000ba8 <__aeabi_uldivmod>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	460b      	mov	r3, r1
 8004e60:	4b64      	ldr	r3, [pc, #400]	@ (8004ff4 <LL_USART_SetBaudRate+0x238>)
 8004e62:	fba3 2302 	umull	r2, r3, r3, r2
 8004e66:	095b      	lsrs	r3, r3, #5
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	011b      	lsls	r3, r3, #4
 8004e6c:	b29c      	uxth	r4, r3
 8004e6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e72:	2200      	movs	r2, #0
 8004e74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e78:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004e7c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8004e80:	4642      	mov	r2, r8
 8004e82:	464b      	mov	r3, r9
 8004e84:	1891      	adds	r1, r2, r2
 8004e86:	6539      	str	r1, [r7, #80]	@ 0x50
 8004e88:	415b      	adcs	r3, r3
 8004e8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004e90:	4641      	mov	r1, r8
 8004e92:	1851      	adds	r1, r2, r1
 8004e94:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004e96:	4649      	mov	r1, r9
 8004e98:	414b      	adcs	r3, r1
 8004e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e9c:	f04f 0200 	mov.w	r2, #0
 8004ea0:	f04f 0300 	mov.w	r3, #0
 8004ea4:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8004ea8:	4659      	mov	r1, fp
 8004eaa:	00cb      	lsls	r3, r1, #3
 8004eac:	4651      	mov	r1, sl
 8004eae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eb2:	4651      	mov	r1, sl
 8004eb4:	00ca      	lsls	r2, r1, #3
 8004eb6:	4610      	mov	r0, r2
 8004eb8:	4619      	mov	r1, r3
 8004eba:	4603      	mov	r3, r0
 8004ebc:	4642      	mov	r2, r8
 8004ebe:	189b      	adds	r3, r3, r2
 8004ec0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ec4:	464b      	mov	r3, r9
 8004ec6:	460a      	mov	r2, r1
 8004ec8:	eb42 0303 	adc.w	r3, r2, r3
 8004ecc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004ed0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004eda:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8004ede:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	18db      	adds	r3, r3, r3
 8004ee6:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ee8:	4613      	mov	r3, r2
 8004eea:	eb42 0303 	adc.w	r3, r2, r3
 8004eee:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ef0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004ef4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8004ef8:	f7fb fe56 	bl	8000ba8 <__aeabi_uldivmod>
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	4611      	mov	r1, r2
 8004f02:	4b3c      	ldr	r3, [pc, #240]	@ (8004ff4 <LL_USART_SetBaudRate+0x238>)
 8004f04:	fba3 2301 	umull	r2, r3, r3, r1
 8004f08:	095b      	lsrs	r3, r3, #5
 8004f0a:	2264      	movs	r2, #100	@ 0x64
 8004f0c:	fb02 f303 	mul.w	r3, r2, r3
 8004f10:	1acb      	subs	r3, r1, r3
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004f18:	4b36      	ldr	r3, [pc, #216]	@ (8004ff4 <LL_USART_SetBaudRate+0x238>)
 8004f1a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f1e:	095b      	lsrs	r3, r3, #5
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	005b      	lsls	r3, r3, #1
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	4423      	add	r3, r4
 8004f2e:	b29c      	uxth	r4, r3
 8004f30:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004f34:	2200      	movs	r2, #0
 8004f36:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f3a:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004f3e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8004f42:	4642      	mov	r2, r8
 8004f44:	464b      	mov	r3, r9
 8004f46:	1891      	adds	r1, r2, r2
 8004f48:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004f4a:	415b      	adcs	r3, r3
 8004f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f4e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004f52:	4641      	mov	r1, r8
 8004f54:	1851      	adds	r1, r2, r1
 8004f56:	6339      	str	r1, [r7, #48]	@ 0x30
 8004f58:	4649      	mov	r1, r9
 8004f5a:	414b      	adcs	r3, r1
 8004f5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f5e:	f04f 0200 	mov.w	r2, #0
 8004f62:	f04f 0300 	mov.w	r3, #0
 8004f66:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004f6a:	4659      	mov	r1, fp
 8004f6c:	00cb      	lsls	r3, r1, #3
 8004f6e:	4651      	mov	r1, sl
 8004f70:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f74:	4651      	mov	r1, sl
 8004f76:	00ca      	lsls	r2, r1, #3
 8004f78:	4610      	mov	r0, r2
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	4642      	mov	r2, r8
 8004f80:	189b      	adds	r3, r3, r2
 8004f82:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f86:	464b      	mov	r3, r9
 8004f88:	460a      	mov	r2, r1
 8004f8a:	eb42 0303 	adc.w	r3, r2, r3
 8004f8e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004f92:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004f96:	2200      	movs	r2, #0
 8004f98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f9c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8004fa0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	18db      	adds	r3, r3, r3
 8004fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004faa:	4613      	mov	r3, r2
 8004fac:	eb42 0303 	adc.w	r3, r2, r3
 8004fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004fb6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8004fba:	f7fb fdf5 	bl	8000ba8 <__aeabi_uldivmod>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ff4 <LL_USART_SetBaudRate+0x238>)
 8004fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8004fc8:	095b      	lsrs	r3, r3, #5
 8004fca:	2164      	movs	r1, #100	@ 0x64
 8004fcc:	fb01 f303 	mul.w	r3, r1, r3
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	3332      	adds	r3, #50	@ 0x32
 8004fd6:	4a07      	ldr	r2, [pc, #28]	@ (8004ff4 <LL_USART_SetBaudRate+0x238>)
 8004fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fdc:	095b      	lsrs	r3, r3, #5
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	4423      	add	r3, r4
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	461a      	mov	r2, r3
 8004fec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ff0:	609a      	str	r2, [r3, #8]
}
 8004ff2:	e108      	b.n	8005206 <LL_USART_SetBaudRate+0x44a>
 8004ff4:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004ff8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005002:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005006:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800500a:	4642      	mov	r2, r8
 800500c:	464b      	mov	r3, r9
 800500e:	1891      	adds	r1, r2, r2
 8005010:	6239      	str	r1, [r7, #32]
 8005012:	415b      	adcs	r3, r3
 8005014:	627b      	str	r3, [r7, #36]	@ 0x24
 8005016:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800501a:	4641      	mov	r1, r8
 800501c:	1854      	adds	r4, r2, r1
 800501e:	4649      	mov	r1, r9
 8005020:	eb43 0501 	adc.w	r5, r3, r1
 8005024:	f04f 0200 	mov.w	r2, #0
 8005028:	f04f 0300 	mov.w	r3, #0
 800502c:	00eb      	lsls	r3, r5, #3
 800502e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005032:	00e2      	lsls	r2, r4, #3
 8005034:	4614      	mov	r4, r2
 8005036:	461d      	mov	r5, r3
 8005038:	4643      	mov	r3, r8
 800503a:	18e3      	adds	r3, r4, r3
 800503c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005040:	464b      	mov	r3, r9
 8005042:	eb45 0303 	adc.w	r3, r5, r3
 8005046:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800504a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800504e:	2200      	movs	r2, #0
 8005050:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005054:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005058:	f04f 0200 	mov.w	r2, #0
 800505c:	f04f 0300 	mov.w	r3, #0
 8005060:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8005064:	4629      	mov	r1, r5
 8005066:	008b      	lsls	r3, r1, #2
 8005068:	4621      	mov	r1, r4
 800506a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800506e:	4621      	mov	r1, r4
 8005070:	008a      	lsls	r2, r1, #2
 8005072:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8005076:	f7fb fd97 	bl	8000ba8 <__aeabi_uldivmod>
 800507a:	4602      	mov	r2, r0
 800507c:	460b      	mov	r3, r1
 800507e:	4b65      	ldr	r3, [pc, #404]	@ (8005214 <LL_USART_SetBaudRate+0x458>)
 8005080:	fba3 2302 	umull	r2, r3, r3, r2
 8005084:	095b      	lsrs	r3, r3, #5
 8005086:	b29b      	uxth	r3, r3
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	b29c      	uxth	r4, r3
 800508c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005090:	2200      	movs	r2, #0
 8005092:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005096:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800509a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800509e:	4642      	mov	r2, r8
 80050a0:	464b      	mov	r3, r9
 80050a2:	1891      	adds	r1, r2, r2
 80050a4:	61b9      	str	r1, [r7, #24]
 80050a6:	415b      	adcs	r3, r3
 80050a8:	61fb      	str	r3, [r7, #28]
 80050aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050ae:	4641      	mov	r1, r8
 80050b0:	1851      	adds	r1, r2, r1
 80050b2:	6139      	str	r1, [r7, #16]
 80050b4:	4649      	mov	r1, r9
 80050b6:	414b      	adcs	r3, r1
 80050b8:	617b      	str	r3, [r7, #20]
 80050ba:	f04f 0200 	mov.w	r2, #0
 80050be:	f04f 0300 	mov.w	r3, #0
 80050c2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050c6:	4659      	mov	r1, fp
 80050c8:	00cb      	lsls	r3, r1, #3
 80050ca:	4651      	mov	r1, sl
 80050cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050d0:	4651      	mov	r1, sl
 80050d2:	00ca      	lsls	r2, r1, #3
 80050d4:	4610      	mov	r0, r2
 80050d6:	4619      	mov	r1, r3
 80050d8:	4603      	mov	r3, r0
 80050da:	4642      	mov	r2, r8
 80050dc:	189b      	adds	r3, r3, r2
 80050de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80050e2:	464b      	mov	r3, r9
 80050e4:	460a      	mov	r2, r1
 80050e6:	eb42 0303 	adc.w	r3, r2, r3
 80050ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80050ee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80050f2:	2200      	movs	r2, #0
 80050f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80050f8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80050fc:	f04f 0200 	mov.w	r2, #0
 8005100:	f04f 0300 	mov.w	r3, #0
 8005104:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8005108:	4649      	mov	r1, r9
 800510a:	008b      	lsls	r3, r1, #2
 800510c:	4641      	mov	r1, r8
 800510e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005112:	4641      	mov	r1, r8
 8005114:	008a      	lsls	r2, r1, #2
 8005116:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800511a:	f7fb fd45 	bl	8000ba8 <__aeabi_uldivmod>
 800511e:	4602      	mov	r2, r0
 8005120:	460b      	mov	r3, r1
 8005122:	4611      	mov	r1, r2
 8005124:	4b3b      	ldr	r3, [pc, #236]	@ (8005214 <LL_USART_SetBaudRate+0x458>)
 8005126:	fba3 2301 	umull	r2, r3, r3, r1
 800512a:	095b      	lsrs	r3, r3, #5
 800512c:	2264      	movs	r2, #100	@ 0x64
 800512e:	fb02 f303 	mul.w	r3, r2, r3
 8005132:	1acb      	subs	r3, r1, r3
 8005134:	011b      	lsls	r3, r3, #4
 8005136:	3332      	adds	r3, #50	@ 0x32
 8005138:	4a36      	ldr	r2, [pc, #216]	@ (8005214 <LL_USART_SetBaudRate+0x458>)
 800513a:	fba2 2303 	umull	r2, r3, r2, r3
 800513e:	095b      	lsrs	r3, r3, #5
 8005140:	b29b      	uxth	r3, r3
 8005142:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005146:	b29b      	uxth	r3, r3
 8005148:	4423      	add	r3, r4
 800514a:	b29c      	uxth	r4, r3
 800514c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005150:	2200      	movs	r2, #0
 8005152:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005154:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005156:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800515a:	4642      	mov	r2, r8
 800515c:	464b      	mov	r3, r9
 800515e:	1891      	adds	r1, r2, r2
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	415b      	adcs	r3, r3
 8005164:	60fb      	str	r3, [r7, #12]
 8005166:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800516a:	4641      	mov	r1, r8
 800516c:	1851      	adds	r1, r2, r1
 800516e:	6039      	str	r1, [r7, #0]
 8005170:	4649      	mov	r1, r9
 8005172:	414b      	adcs	r3, r1
 8005174:	607b      	str	r3, [r7, #4]
 8005176:	f04f 0200 	mov.w	r2, #0
 800517a:	f04f 0300 	mov.w	r3, #0
 800517e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005182:	4659      	mov	r1, fp
 8005184:	00cb      	lsls	r3, r1, #3
 8005186:	4651      	mov	r1, sl
 8005188:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800518c:	4651      	mov	r1, sl
 800518e:	00ca      	lsls	r2, r1, #3
 8005190:	4610      	mov	r0, r2
 8005192:	4619      	mov	r1, r3
 8005194:	4603      	mov	r3, r0
 8005196:	4642      	mov	r2, r8
 8005198:	189b      	adds	r3, r3, r2
 800519a:	673b      	str	r3, [r7, #112]	@ 0x70
 800519c:	464b      	mov	r3, r9
 800519e:	460a      	mov	r2, r1
 80051a0:	eb42 0303 	adc.w	r3, r2, r3
 80051a4:	677b      	str	r3, [r7, #116]	@ 0x74
 80051a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80051aa:	2200      	movs	r2, #0
 80051ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80051b0:	f04f 0200 	mov.w	r2, #0
 80051b4:	f04f 0300 	mov.w	r3, #0
 80051b8:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 80051bc:	4649      	mov	r1, r9
 80051be:	008b      	lsls	r3, r1, #2
 80051c0:	4641      	mov	r1, r8
 80051c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051c6:	4641      	mov	r1, r8
 80051c8:	008a      	lsls	r2, r1, #2
 80051ca:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80051ce:	f7fb fceb 	bl	8000ba8 <__aeabi_uldivmod>
 80051d2:	4602      	mov	r2, r0
 80051d4:	460b      	mov	r3, r1
 80051d6:	4b0f      	ldr	r3, [pc, #60]	@ (8005214 <LL_USART_SetBaudRate+0x458>)
 80051d8:	fba3 1302 	umull	r1, r3, r3, r2
 80051dc:	095b      	lsrs	r3, r3, #5
 80051de:	2164      	movs	r1, #100	@ 0x64
 80051e0:	fb01 f303 	mul.w	r3, r1, r3
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	011b      	lsls	r3, r3, #4
 80051e8:	3332      	adds	r3, #50	@ 0x32
 80051ea:	4a0a      	ldr	r2, [pc, #40]	@ (8005214 <LL_USART_SetBaudRate+0x458>)
 80051ec:	fba2 2303 	umull	r2, r3, r2, r3
 80051f0:	095b      	lsrs	r3, r3, #5
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	f003 030f 	and.w	r3, r3, #15
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	4423      	add	r3, r4
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	461a      	mov	r2, r3
 8005200:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005204:	609a      	str	r2, [r3, #8]
}
 8005206:	bf00      	nop
 8005208:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800520c:	46bd      	mov	sp, r7
 800520e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005212:	bf00      	nop
 8005214:	51eb851f 	.word	0x51eb851f

08005218 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b088      	sub	sp, #32
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8005226:	2300      	movs	r3, #0
 8005228:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f7ff fd8c 	bl	8004d48 <LL_USART_IsEnabled>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d15e      	bne.n	80052f4 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800523e:	f023 030c 	bic.w	r3, r3, #12
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	6851      	ldr	r1, [r2, #4]
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	68d2      	ldr	r2, [r2, #12]
 800524a:	4311      	orrs	r1, r2
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	6912      	ldr	r2, [r2, #16]
 8005250:	4311      	orrs	r1, r2
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	6992      	ldr	r2, [r2, #24]
 8005256:	430a      	orrs	r2, r1
 8005258:	431a      	orrs	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	4619      	mov	r1, r3
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f7ff fd83 	bl	8004d70 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	4619      	mov	r1, r3
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7ff fd90 	bl	8004d96 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005276:	f107 0308 	add.w	r3, r7, #8
 800527a:	4618      	mov	r0, r3
 800527c:	f7ff f932 	bl	80044e4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a1f      	ldr	r2, [pc, #124]	@ (8005300 <LL_USART_Init+0xe8>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d102      	bne.n	800528e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	61bb      	str	r3, [r7, #24]
 800528c:	e021      	b.n	80052d2 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a1c      	ldr	r2, [pc, #112]	@ (8005304 <LL_USART_Init+0xec>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d102      	bne.n	800529c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	e01a      	b.n	80052d2 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a1a      	ldr	r2, [pc, #104]	@ (8005308 <LL_USART_Init+0xf0>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d102      	bne.n	80052aa <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	61bb      	str	r3, [r7, #24]
 80052a8:	e013      	b.n	80052d2 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a17      	ldr	r2, [pc, #92]	@ (800530c <LL_USART_Init+0xf4>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d102      	bne.n	80052b8 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	61bb      	str	r3, [r7, #24]
 80052b6:	e00c      	b.n	80052d2 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a15      	ldr	r2, [pc, #84]	@ (8005310 <LL_USART_Init+0xf8>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d102      	bne.n	80052c6 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	61bb      	str	r3, [r7, #24]
 80052c4:	e005      	b.n	80052d2 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a12      	ldr	r2, [pc, #72]	@ (8005314 <LL_USART_Init+0xfc>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d101      	bne.n	80052d2 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00d      	beq.n	80052f4 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d009      	beq.n	80052f4 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80052e0:	2300      	movs	r3, #0
 80052e2:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80052ec:	69b9      	ldr	r1, [r7, #24]
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7ff fd64 	bl	8004dbc <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80052f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3720      	adds	r7, #32
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	40011000 	.word	0x40011000
 8005304:	40004400 	.word	0x40004400
 8005308:	40004800 	.word	0x40004800
 800530c:	40011400 	.word	0x40011400
 8005310:	40004c00 	.word	0x40004c00
 8005314:	40005000 	.word	0x40005000

08005318 <__cvt>:
 8005318:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800531c:	ec57 6b10 	vmov	r6, r7, d0
 8005320:	2f00      	cmp	r7, #0
 8005322:	460c      	mov	r4, r1
 8005324:	4619      	mov	r1, r3
 8005326:	463b      	mov	r3, r7
 8005328:	bfbb      	ittet	lt
 800532a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800532e:	461f      	movlt	r7, r3
 8005330:	2300      	movge	r3, #0
 8005332:	232d      	movlt	r3, #45	@ 0x2d
 8005334:	700b      	strb	r3, [r1, #0]
 8005336:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005338:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800533c:	4691      	mov	r9, r2
 800533e:	f023 0820 	bic.w	r8, r3, #32
 8005342:	bfbc      	itt	lt
 8005344:	4632      	movlt	r2, r6
 8005346:	4616      	movlt	r6, r2
 8005348:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800534c:	d005      	beq.n	800535a <__cvt+0x42>
 800534e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005352:	d100      	bne.n	8005356 <__cvt+0x3e>
 8005354:	3401      	adds	r4, #1
 8005356:	2102      	movs	r1, #2
 8005358:	e000      	b.n	800535c <__cvt+0x44>
 800535a:	2103      	movs	r1, #3
 800535c:	ab03      	add	r3, sp, #12
 800535e:	9301      	str	r3, [sp, #4]
 8005360:	ab02      	add	r3, sp, #8
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	ec47 6b10 	vmov	d0, r6, r7
 8005368:	4653      	mov	r3, sl
 800536a:	4622      	mov	r2, r4
 800536c:	f000 ff40 	bl	80061f0 <_dtoa_r>
 8005370:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005374:	4605      	mov	r5, r0
 8005376:	d119      	bne.n	80053ac <__cvt+0x94>
 8005378:	f019 0f01 	tst.w	r9, #1
 800537c:	d00e      	beq.n	800539c <__cvt+0x84>
 800537e:	eb00 0904 	add.w	r9, r0, r4
 8005382:	2200      	movs	r2, #0
 8005384:	2300      	movs	r3, #0
 8005386:	4630      	mov	r0, r6
 8005388:	4639      	mov	r1, r7
 800538a:	f7fb fb9d 	bl	8000ac8 <__aeabi_dcmpeq>
 800538e:	b108      	cbz	r0, 8005394 <__cvt+0x7c>
 8005390:	f8cd 900c 	str.w	r9, [sp, #12]
 8005394:	2230      	movs	r2, #48	@ 0x30
 8005396:	9b03      	ldr	r3, [sp, #12]
 8005398:	454b      	cmp	r3, r9
 800539a:	d31e      	bcc.n	80053da <__cvt+0xc2>
 800539c:	9b03      	ldr	r3, [sp, #12]
 800539e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80053a0:	1b5b      	subs	r3, r3, r5
 80053a2:	4628      	mov	r0, r5
 80053a4:	6013      	str	r3, [r2, #0]
 80053a6:	b004      	add	sp, #16
 80053a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80053b0:	eb00 0904 	add.w	r9, r0, r4
 80053b4:	d1e5      	bne.n	8005382 <__cvt+0x6a>
 80053b6:	7803      	ldrb	r3, [r0, #0]
 80053b8:	2b30      	cmp	r3, #48	@ 0x30
 80053ba:	d10a      	bne.n	80053d2 <__cvt+0xba>
 80053bc:	2200      	movs	r2, #0
 80053be:	2300      	movs	r3, #0
 80053c0:	4630      	mov	r0, r6
 80053c2:	4639      	mov	r1, r7
 80053c4:	f7fb fb80 	bl	8000ac8 <__aeabi_dcmpeq>
 80053c8:	b918      	cbnz	r0, 80053d2 <__cvt+0xba>
 80053ca:	f1c4 0401 	rsb	r4, r4, #1
 80053ce:	f8ca 4000 	str.w	r4, [sl]
 80053d2:	f8da 3000 	ldr.w	r3, [sl]
 80053d6:	4499      	add	r9, r3
 80053d8:	e7d3      	b.n	8005382 <__cvt+0x6a>
 80053da:	1c59      	adds	r1, r3, #1
 80053dc:	9103      	str	r1, [sp, #12]
 80053de:	701a      	strb	r2, [r3, #0]
 80053e0:	e7d9      	b.n	8005396 <__cvt+0x7e>

080053e2 <__exponent>:
 80053e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053e4:	2900      	cmp	r1, #0
 80053e6:	bfba      	itte	lt
 80053e8:	4249      	neglt	r1, r1
 80053ea:	232d      	movlt	r3, #45	@ 0x2d
 80053ec:	232b      	movge	r3, #43	@ 0x2b
 80053ee:	2909      	cmp	r1, #9
 80053f0:	7002      	strb	r2, [r0, #0]
 80053f2:	7043      	strb	r3, [r0, #1]
 80053f4:	dd29      	ble.n	800544a <__exponent+0x68>
 80053f6:	f10d 0307 	add.w	r3, sp, #7
 80053fa:	461d      	mov	r5, r3
 80053fc:	270a      	movs	r7, #10
 80053fe:	461a      	mov	r2, r3
 8005400:	fbb1 f6f7 	udiv	r6, r1, r7
 8005404:	fb07 1416 	mls	r4, r7, r6, r1
 8005408:	3430      	adds	r4, #48	@ 0x30
 800540a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800540e:	460c      	mov	r4, r1
 8005410:	2c63      	cmp	r4, #99	@ 0x63
 8005412:	f103 33ff 	add.w	r3, r3, #4294967295
 8005416:	4631      	mov	r1, r6
 8005418:	dcf1      	bgt.n	80053fe <__exponent+0x1c>
 800541a:	3130      	adds	r1, #48	@ 0x30
 800541c:	1e94      	subs	r4, r2, #2
 800541e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005422:	1c41      	adds	r1, r0, #1
 8005424:	4623      	mov	r3, r4
 8005426:	42ab      	cmp	r3, r5
 8005428:	d30a      	bcc.n	8005440 <__exponent+0x5e>
 800542a:	f10d 0309 	add.w	r3, sp, #9
 800542e:	1a9b      	subs	r3, r3, r2
 8005430:	42ac      	cmp	r4, r5
 8005432:	bf88      	it	hi
 8005434:	2300      	movhi	r3, #0
 8005436:	3302      	adds	r3, #2
 8005438:	4403      	add	r3, r0
 800543a:	1a18      	subs	r0, r3, r0
 800543c:	b003      	add	sp, #12
 800543e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005440:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005444:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005448:	e7ed      	b.n	8005426 <__exponent+0x44>
 800544a:	2330      	movs	r3, #48	@ 0x30
 800544c:	3130      	adds	r1, #48	@ 0x30
 800544e:	7083      	strb	r3, [r0, #2]
 8005450:	70c1      	strb	r1, [r0, #3]
 8005452:	1d03      	adds	r3, r0, #4
 8005454:	e7f1      	b.n	800543a <__exponent+0x58>
	...

08005458 <_printf_float>:
 8005458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800545c:	b08d      	sub	sp, #52	@ 0x34
 800545e:	460c      	mov	r4, r1
 8005460:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005464:	4616      	mov	r6, r2
 8005466:	461f      	mov	r7, r3
 8005468:	4605      	mov	r5, r0
 800546a:	f000 fdbf 	bl	8005fec <_localeconv_r>
 800546e:	6803      	ldr	r3, [r0, #0]
 8005470:	9304      	str	r3, [sp, #16]
 8005472:	4618      	mov	r0, r3
 8005474:	f7fa fefc 	bl	8000270 <strlen>
 8005478:	2300      	movs	r3, #0
 800547a:	930a      	str	r3, [sp, #40]	@ 0x28
 800547c:	f8d8 3000 	ldr.w	r3, [r8]
 8005480:	9005      	str	r0, [sp, #20]
 8005482:	3307      	adds	r3, #7
 8005484:	f023 0307 	bic.w	r3, r3, #7
 8005488:	f103 0208 	add.w	r2, r3, #8
 800548c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005490:	f8d4 b000 	ldr.w	fp, [r4]
 8005494:	f8c8 2000 	str.w	r2, [r8]
 8005498:	e9d3 8900 	ldrd	r8, r9, [r3]
 800549c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80054a0:	9307      	str	r3, [sp, #28]
 80054a2:	f8cd 8018 	str.w	r8, [sp, #24]
 80054a6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80054aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054ae:	4b9c      	ldr	r3, [pc, #624]	@ (8005720 <_printf_float+0x2c8>)
 80054b0:	f04f 32ff 	mov.w	r2, #4294967295
 80054b4:	f7fb fb3a 	bl	8000b2c <__aeabi_dcmpun>
 80054b8:	bb70      	cbnz	r0, 8005518 <_printf_float+0xc0>
 80054ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054be:	4b98      	ldr	r3, [pc, #608]	@ (8005720 <_printf_float+0x2c8>)
 80054c0:	f04f 32ff 	mov.w	r2, #4294967295
 80054c4:	f7fb fb14 	bl	8000af0 <__aeabi_dcmple>
 80054c8:	bb30      	cbnz	r0, 8005518 <_printf_float+0xc0>
 80054ca:	2200      	movs	r2, #0
 80054cc:	2300      	movs	r3, #0
 80054ce:	4640      	mov	r0, r8
 80054d0:	4649      	mov	r1, r9
 80054d2:	f7fb fb03 	bl	8000adc <__aeabi_dcmplt>
 80054d6:	b110      	cbz	r0, 80054de <_printf_float+0x86>
 80054d8:	232d      	movs	r3, #45	@ 0x2d
 80054da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054de:	4a91      	ldr	r2, [pc, #580]	@ (8005724 <_printf_float+0x2cc>)
 80054e0:	4b91      	ldr	r3, [pc, #580]	@ (8005728 <_printf_float+0x2d0>)
 80054e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80054e6:	bf94      	ite	ls
 80054e8:	4690      	movls	r8, r2
 80054ea:	4698      	movhi	r8, r3
 80054ec:	2303      	movs	r3, #3
 80054ee:	6123      	str	r3, [r4, #16]
 80054f0:	f02b 0304 	bic.w	r3, fp, #4
 80054f4:	6023      	str	r3, [r4, #0]
 80054f6:	f04f 0900 	mov.w	r9, #0
 80054fa:	9700      	str	r7, [sp, #0]
 80054fc:	4633      	mov	r3, r6
 80054fe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005500:	4621      	mov	r1, r4
 8005502:	4628      	mov	r0, r5
 8005504:	f000 f9d2 	bl	80058ac <_printf_common>
 8005508:	3001      	adds	r0, #1
 800550a:	f040 808d 	bne.w	8005628 <_printf_float+0x1d0>
 800550e:	f04f 30ff 	mov.w	r0, #4294967295
 8005512:	b00d      	add	sp, #52	@ 0x34
 8005514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005518:	4642      	mov	r2, r8
 800551a:	464b      	mov	r3, r9
 800551c:	4640      	mov	r0, r8
 800551e:	4649      	mov	r1, r9
 8005520:	f7fb fb04 	bl	8000b2c <__aeabi_dcmpun>
 8005524:	b140      	cbz	r0, 8005538 <_printf_float+0xe0>
 8005526:	464b      	mov	r3, r9
 8005528:	2b00      	cmp	r3, #0
 800552a:	bfbc      	itt	lt
 800552c:	232d      	movlt	r3, #45	@ 0x2d
 800552e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005532:	4a7e      	ldr	r2, [pc, #504]	@ (800572c <_printf_float+0x2d4>)
 8005534:	4b7e      	ldr	r3, [pc, #504]	@ (8005730 <_printf_float+0x2d8>)
 8005536:	e7d4      	b.n	80054e2 <_printf_float+0x8a>
 8005538:	6863      	ldr	r3, [r4, #4]
 800553a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800553e:	9206      	str	r2, [sp, #24]
 8005540:	1c5a      	adds	r2, r3, #1
 8005542:	d13b      	bne.n	80055bc <_printf_float+0x164>
 8005544:	2306      	movs	r3, #6
 8005546:	6063      	str	r3, [r4, #4]
 8005548:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800554c:	2300      	movs	r3, #0
 800554e:	6022      	str	r2, [r4, #0]
 8005550:	9303      	str	r3, [sp, #12]
 8005552:	ab0a      	add	r3, sp, #40	@ 0x28
 8005554:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005558:	ab09      	add	r3, sp, #36	@ 0x24
 800555a:	9300      	str	r3, [sp, #0]
 800555c:	6861      	ldr	r1, [r4, #4]
 800555e:	ec49 8b10 	vmov	d0, r8, r9
 8005562:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005566:	4628      	mov	r0, r5
 8005568:	f7ff fed6 	bl	8005318 <__cvt>
 800556c:	9b06      	ldr	r3, [sp, #24]
 800556e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005570:	2b47      	cmp	r3, #71	@ 0x47
 8005572:	4680      	mov	r8, r0
 8005574:	d129      	bne.n	80055ca <_printf_float+0x172>
 8005576:	1cc8      	adds	r0, r1, #3
 8005578:	db02      	blt.n	8005580 <_printf_float+0x128>
 800557a:	6863      	ldr	r3, [r4, #4]
 800557c:	4299      	cmp	r1, r3
 800557e:	dd41      	ble.n	8005604 <_printf_float+0x1ac>
 8005580:	f1aa 0a02 	sub.w	sl, sl, #2
 8005584:	fa5f fa8a 	uxtb.w	sl, sl
 8005588:	3901      	subs	r1, #1
 800558a:	4652      	mov	r2, sl
 800558c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005590:	9109      	str	r1, [sp, #36]	@ 0x24
 8005592:	f7ff ff26 	bl	80053e2 <__exponent>
 8005596:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005598:	1813      	adds	r3, r2, r0
 800559a:	2a01      	cmp	r2, #1
 800559c:	4681      	mov	r9, r0
 800559e:	6123      	str	r3, [r4, #16]
 80055a0:	dc02      	bgt.n	80055a8 <_printf_float+0x150>
 80055a2:	6822      	ldr	r2, [r4, #0]
 80055a4:	07d2      	lsls	r2, r2, #31
 80055a6:	d501      	bpl.n	80055ac <_printf_float+0x154>
 80055a8:	3301      	adds	r3, #1
 80055aa:	6123      	str	r3, [r4, #16]
 80055ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d0a2      	beq.n	80054fa <_printf_float+0xa2>
 80055b4:	232d      	movs	r3, #45	@ 0x2d
 80055b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055ba:	e79e      	b.n	80054fa <_printf_float+0xa2>
 80055bc:	9a06      	ldr	r2, [sp, #24]
 80055be:	2a47      	cmp	r2, #71	@ 0x47
 80055c0:	d1c2      	bne.n	8005548 <_printf_float+0xf0>
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1c0      	bne.n	8005548 <_printf_float+0xf0>
 80055c6:	2301      	movs	r3, #1
 80055c8:	e7bd      	b.n	8005546 <_printf_float+0xee>
 80055ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80055ce:	d9db      	bls.n	8005588 <_printf_float+0x130>
 80055d0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80055d4:	d118      	bne.n	8005608 <_printf_float+0x1b0>
 80055d6:	2900      	cmp	r1, #0
 80055d8:	6863      	ldr	r3, [r4, #4]
 80055da:	dd0b      	ble.n	80055f4 <_printf_float+0x19c>
 80055dc:	6121      	str	r1, [r4, #16]
 80055de:	b913      	cbnz	r3, 80055e6 <_printf_float+0x18e>
 80055e0:	6822      	ldr	r2, [r4, #0]
 80055e2:	07d0      	lsls	r0, r2, #31
 80055e4:	d502      	bpl.n	80055ec <_printf_float+0x194>
 80055e6:	3301      	adds	r3, #1
 80055e8:	440b      	add	r3, r1
 80055ea:	6123      	str	r3, [r4, #16]
 80055ec:	65a1      	str	r1, [r4, #88]	@ 0x58
 80055ee:	f04f 0900 	mov.w	r9, #0
 80055f2:	e7db      	b.n	80055ac <_printf_float+0x154>
 80055f4:	b913      	cbnz	r3, 80055fc <_printf_float+0x1a4>
 80055f6:	6822      	ldr	r2, [r4, #0]
 80055f8:	07d2      	lsls	r2, r2, #31
 80055fa:	d501      	bpl.n	8005600 <_printf_float+0x1a8>
 80055fc:	3302      	adds	r3, #2
 80055fe:	e7f4      	b.n	80055ea <_printf_float+0x192>
 8005600:	2301      	movs	r3, #1
 8005602:	e7f2      	b.n	80055ea <_printf_float+0x192>
 8005604:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005608:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800560a:	4299      	cmp	r1, r3
 800560c:	db05      	blt.n	800561a <_printf_float+0x1c2>
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	6121      	str	r1, [r4, #16]
 8005612:	07d8      	lsls	r0, r3, #31
 8005614:	d5ea      	bpl.n	80055ec <_printf_float+0x194>
 8005616:	1c4b      	adds	r3, r1, #1
 8005618:	e7e7      	b.n	80055ea <_printf_float+0x192>
 800561a:	2900      	cmp	r1, #0
 800561c:	bfd4      	ite	le
 800561e:	f1c1 0202 	rsble	r2, r1, #2
 8005622:	2201      	movgt	r2, #1
 8005624:	4413      	add	r3, r2
 8005626:	e7e0      	b.n	80055ea <_printf_float+0x192>
 8005628:	6823      	ldr	r3, [r4, #0]
 800562a:	055a      	lsls	r2, r3, #21
 800562c:	d407      	bmi.n	800563e <_printf_float+0x1e6>
 800562e:	6923      	ldr	r3, [r4, #16]
 8005630:	4642      	mov	r2, r8
 8005632:	4631      	mov	r1, r6
 8005634:	4628      	mov	r0, r5
 8005636:	47b8      	blx	r7
 8005638:	3001      	adds	r0, #1
 800563a:	d12b      	bne.n	8005694 <_printf_float+0x23c>
 800563c:	e767      	b.n	800550e <_printf_float+0xb6>
 800563e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005642:	f240 80dd 	bls.w	8005800 <_printf_float+0x3a8>
 8005646:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800564a:	2200      	movs	r2, #0
 800564c:	2300      	movs	r3, #0
 800564e:	f7fb fa3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005652:	2800      	cmp	r0, #0
 8005654:	d033      	beq.n	80056be <_printf_float+0x266>
 8005656:	4a37      	ldr	r2, [pc, #220]	@ (8005734 <_printf_float+0x2dc>)
 8005658:	2301      	movs	r3, #1
 800565a:	4631      	mov	r1, r6
 800565c:	4628      	mov	r0, r5
 800565e:	47b8      	blx	r7
 8005660:	3001      	adds	r0, #1
 8005662:	f43f af54 	beq.w	800550e <_printf_float+0xb6>
 8005666:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800566a:	4543      	cmp	r3, r8
 800566c:	db02      	blt.n	8005674 <_printf_float+0x21c>
 800566e:	6823      	ldr	r3, [r4, #0]
 8005670:	07d8      	lsls	r0, r3, #31
 8005672:	d50f      	bpl.n	8005694 <_printf_float+0x23c>
 8005674:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005678:	4631      	mov	r1, r6
 800567a:	4628      	mov	r0, r5
 800567c:	47b8      	blx	r7
 800567e:	3001      	adds	r0, #1
 8005680:	f43f af45 	beq.w	800550e <_printf_float+0xb6>
 8005684:	f04f 0900 	mov.w	r9, #0
 8005688:	f108 38ff 	add.w	r8, r8, #4294967295
 800568c:	f104 0a1a 	add.w	sl, r4, #26
 8005690:	45c8      	cmp	r8, r9
 8005692:	dc09      	bgt.n	80056a8 <_printf_float+0x250>
 8005694:	6823      	ldr	r3, [r4, #0]
 8005696:	079b      	lsls	r3, r3, #30
 8005698:	f100 8103 	bmi.w	80058a2 <_printf_float+0x44a>
 800569c:	68e0      	ldr	r0, [r4, #12]
 800569e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056a0:	4298      	cmp	r0, r3
 80056a2:	bfb8      	it	lt
 80056a4:	4618      	movlt	r0, r3
 80056a6:	e734      	b.n	8005512 <_printf_float+0xba>
 80056a8:	2301      	movs	r3, #1
 80056aa:	4652      	mov	r2, sl
 80056ac:	4631      	mov	r1, r6
 80056ae:	4628      	mov	r0, r5
 80056b0:	47b8      	blx	r7
 80056b2:	3001      	adds	r0, #1
 80056b4:	f43f af2b 	beq.w	800550e <_printf_float+0xb6>
 80056b8:	f109 0901 	add.w	r9, r9, #1
 80056bc:	e7e8      	b.n	8005690 <_printf_float+0x238>
 80056be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	dc39      	bgt.n	8005738 <_printf_float+0x2e0>
 80056c4:	4a1b      	ldr	r2, [pc, #108]	@ (8005734 <_printf_float+0x2dc>)
 80056c6:	2301      	movs	r3, #1
 80056c8:	4631      	mov	r1, r6
 80056ca:	4628      	mov	r0, r5
 80056cc:	47b8      	blx	r7
 80056ce:	3001      	adds	r0, #1
 80056d0:	f43f af1d 	beq.w	800550e <_printf_float+0xb6>
 80056d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80056d8:	ea59 0303 	orrs.w	r3, r9, r3
 80056dc:	d102      	bne.n	80056e4 <_printf_float+0x28c>
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	07d9      	lsls	r1, r3, #31
 80056e2:	d5d7      	bpl.n	8005694 <_printf_float+0x23c>
 80056e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056e8:	4631      	mov	r1, r6
 80056ea:	4628      	mov	r0, r5
 80056ec:	47b8      	blx	r7
 80056ee:	3001      	adds	r0, #1
 80056f0:	f43f af0d 	beq.w	800550e <_printf_float+0xb6>
 80056f4:	f04f 0a00 	mov.w	sl, #0
 80056f8:	f104 0b1a 	add.w	fp, r4, #26
 80056fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056fe:	425b      	negs	r3, r3
 8005700:	4553      	cmp	r3, sl
 8005702:	dc01      	bgt.n	8005708 <_printf_float+0x2b0>
 8005704:	464b      	mov	r3, r9
 8005706:	e793      	b.n	8005630 <_printf_float+0x1d8>
 8005708:	2301      	movs	r3, #1
 800570a:	465a      	mov	r2, fp
 800570c:	4631      	mov	r1, r6
 800570e:	4628      	mov	r0, r5
 8005710:	47b8      	blx	r7
 8005712:	3001      	adds	r0, #1
 8005714:	f43f aefb 	beq.w	800550e <_printf_float+0xb6>
 8005718:	f10a 0a01 	add.w	sl, sl, #1
 800571c:	e7ee      	b.n	80056fc <_printf_float+0x2a4>
 800571e:	bf00      	nop
 8005720:	7fefffff 	.word	0x7fefffff
 8005724:	08007f2f 	.word	0x08007f2f
 8005728:	08007f33 	.word	0x08007f33
 800572c:	08007f37 	.word	0x08007f37
 8005730:	08007f3b 	.word	0x08007f3b
 8005734:	08007f3f 	.word	0x08007f3f
 8005738:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800573a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800573e:	4553      	cmp	r3, sl
 8005740:	bfa8      	it	ge
 8005742:	4653      	movge	r3, sl
 8005744:	2b00      	cmp	r3, #0
 8005746:	4699      	mov	r9, r3
 8005748:	dc36      	bgt.n	80057b8 <_printf_float+0x360>
 800574a:	f04f 0b00 	mov.w	fp, #0
 800574e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005752:	f104 021a 	add.w	r2, r4, #26
 8005756:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005758:	9306      	str	r3, [sp, #24]
 800575a:	eba3 0309 	sub.w	r3, r3, r9
 800575e:	455b      	cmp	r3, fp
 8005760:	dc31      	bgt.n	80057c6 <_printf_float+0x36e>
 8005762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005764:	459a      	cmp	sl, r3
 8005766:	dc3a      	bgt.n	80057de <_printf_float+0x386>
 8005768:	6823      	ldr	r3, [r4, #0]
 800576a:	07da      	lsls	r2, r3, #31
 800576c:	d437      	bmi.n	80057de <_printf_float+0x386>
 800576e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005770:	ebaa 0903 	sub.w	r9, sl, r3
 8005774:	9b06      	ldr	r3, [sp, #24]
 8005776:	ebaa 0303 	sub.w	r3, sl, r3
 800577a:	4599      	cmp	r9, r3
 800577c:	bfa8      	it	ge
 800577e:	4699      	movge	r9, r3
 8005780:	f1b9 0f00 	cmp.w	r9, #0
 8005784:	dc33      	bgt.n	80057ee <_printf_float+0x396>
 8005786:	f04f 0800 	mov.w	r8, #0
 800578a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800578e:	f104 0b1a 	add.w	fp, r4, #26
 8005792:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005794:	ebaa 0303 	sub.w	r3, sl, r3
 8005798:	eba3 0309 	sub.w	r3, r3, r9
 800579c:	4543      	cmp	r3, r8
 800579e:	f77f af79 	ble.w	8005694 <_printf_float+0x23c>
 80057a2:	2301      	movs	r3, #1
 80057a4:	465a      	mov	r2, fp
 80057a6:	4631      	mov	r1, r6
 80057a8:	4628      	mov	r0, r5
 80057aa:	47b8      	blx	r7
 80057ac:	3001      	adds	r0, #1
 80057ae:	f43f aeae 	beq.w	800550e <_printf_float+0xb6>
 80057b2:	f108 0801 	add.w	r8, r8, #1
 80057b6:	e7ec      	b.n	8005792 <_printf_float+0x33a>
 80057b8:	4642      	mov	r2, r8
 80057ba:	4631      	mov	r1, r6
 80057bc:	4628      	mov	r0, r5
 80057be:	47b8      	blx	r7
 80057c0:	3001      	adds	r0, #1
 80057c2:	d1c2      	bne.n	800574a <_printf_float+0x2f2>
 80057c4:	e6a3      	b.n	800550e <_printf_float+0xb6>
 80057c6:	2301      	movs	r3, #1
 80057c8:	4631      	mov	r1, r6
 80057ca:	4628      	mov	r0, r5
 80057cc:	9206      	str	r2, [sp, #24]
 80057ce:	47b8      	blx	r7
 80057d0:	3001      	adds	r0, #1
 80057d2:	f43f ae9c 	beq.w	800550e <_printf_float+0xb6>
 80057d6:	9a06      	ldr	r2, [sp, #24]
 80057d8:	f10b 0b01 	add.w	fp, fp, #1
 80057dc:	e7bb      	b.n	8005756 <_printf_float+0x2fe>
 80057de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057e2:	4631      	mov	r1, r6
 80057e4:	4628      	mov	r0, r5
 80057e6:	47b8      	blx	r7
 80057e8:	3001      	adds	r0, #1
 80057ea:	d1c0      	bne.n	800576e <_printf_float+0x316>
 80057ec:	e68f      	b.n	800550e <_printf_float+0xb6>
 80057ee:	9a06      	ldr	r2, [sp, #24]
 80057f0:	464b      	mov	r3, r9
 80057f2:	4442      	add	r2, r8
 80057f4:	4631      	mov	r1, r6
 80057f6:	4628      	mov	r0, r5
 80057f8:	47b8      	blx	r7
 80057fa:	3001      	adds	r0, #1
 80057fc:	d1c3      	bne.n	8005786 <_printf_float+0x32e>
 80057fe:	e686      	b.n	800550e <_printf_float+0xb6>
 8005800:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005804:	f1ba 0f01 	cmp.w	sl, #1
 8005808:	dc01      	bgt.n	800580e <_printf_float+0x3b6>
 800580a:	07db      	lsls	r3, r3, #31
 800580c:	d536      	bpl.n	800587c <_printf_float+0x424>
 800580e:	2301      	movs	r3, #1
 8005810:	4642      	mov	r2, r8
 8005812:	4631      	mov	r1, r6
 8005814:	4628      	mov	r0, r5
 8005816:	47b8      	blx	r7
 8005818:	3001      	adds	r0, #1
 800581a:	f43f ae78 	beq.w	800550e <_printf_float+0xb6>
 800581e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005822:	4631      	mov	r1, r6
 8005824:	4628      	mov	r0, r5
 8005826:	47b8      	blx	r7
 8005828:	3001      	adds	r0, #1
 800582a:	f43f ae70 	beq.w	800550e <_printf_float+0xb6>
 800582e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005832:	2200      	movs	r2, #0
 8005834:	2300      	movs	r3, #0
 8005836:	f10a 3aff 	add.w	sl, sl, #4294967295
 800583a:	f7fb f945 	bl	8000ac8 <__aeabi_dcmpeq>
 800583e:	b9c0      	cbnz	r0, 8005872 <_printf_float+0x41a>
 8005840:	4653      	mov	r3, sl
 8005842:	f108 0201 	add.w	r2, r8, #1
 8005846:	4631      	mov	r1, r6
 8005848:	4628      	mov	r0, r5
 800584a:	47b8      	blx	r7
 800584c:	3001      	adds	r0, #1
 800584e:	d10c      	bne.n	800586a <_printf_float+0x412>
 8005850:	e65d      	b.n	800550e <_printf_float+0xb6>
 8005852:	2301      	movs	r3, #1
 8005854:	465a      	mov	r2, fp
 8005856:	4631      	mov	r1, r6
 8005858:	4628      	mov	r0, r5
 800585a:	47b8      	blx	r7
 800585c:	3001      	adds	r0, #1
 800585e:	f43f ae56 	beq.w	800550e <_printf_float+0xb6>
 8005862:	f108 0801 	add.w	r8, r8, #1
 8005866:	45d0      	cmp	r8, sl
 8005868:	dbf3      	blt.n	8005852 <_printf_float+0x3fa>
 800586a:	464b      	mov	r3, r9
 800586c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005870:	e6df      	b.n	8005632 <_printf_float+0x1da>
 8005872:	f04f 0800 	mov.w	r8, #0
 8005876:	f104 0b1a 	add.w	fp, r4, #26
 800587a:	e7f4      	b.n	8005866 <_printf_float+0x40e>
 800587c:	2301      	movs	r3, #1
 800587e:	4642      	mov	r2, r8
 8005880:	e7e1      	b.n	8005846 <_printf_float+0x3ee>
 8005882:	2301      	movs	r3, #1
 8005884:	464a      	mov	r2, r9
 8005886:	4631      	mov	r1, r6
 8005888:	4628      	mov	r0, r5
 800588a:	47b8      	blx	r7
 800588c:	3001      	adds	r0, #1
 800588e:	f43f ae3e 	beq.w	800550e <_printf_float+0xb6>
 8005892:	f108 0801 	add.w	r8, r8, #1
 8005896:	68e3      	ldr	r3, [r4, #12]
 8005898:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800589a:	1a5b      	subs	r3, r3, r1
 800589c:	4543      	cmp	r3, r8
 800589e:	dcf0      	bgt.n	8005882 <_printf_float+0x42a>
 80058a0:	e6fc      	b.n	800569c <_printf_float+0x244>
 80058a2:	f04f 0800 	mov.w	r8, #0
 80058a6:	f104 0919 	add.w	r9, r4, #25
 80058aa:	e7f4      	b.n	8005896 <_printf_float+0x43e>

080058ac <_printf_common>:
 80058ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058b0:	4616      	mov	r6, r2
 80058b2:	4698      	mov	r8, r3
 80058b4:	688a      	ldr	r2, [r1, #8]
 80058b6:	690b      	ldr	r3, [r1, #16]
 80058b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80058bc:	4293      	cmp	r3, r2
 80058be:	bfb8      	it	lt
 80058c0:	4613      	movlt	r3, r2
 80058c2:	6033      	str	r3, [r6, #0]
 80058c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80058c8:	4607      	mov	r7, r0
 80058ca:	460c      	mov	r4, r1
 80058cc:	b10a      	cbz	r2, 80058d2 <_printf_common+0x26>
 80058ce:	3301      	adds	r3, #1
 80058d0:	6033      	str	r3, [r6, #0]
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	0699      	lsls	r1, r3, #26
 80058d6:	bf42      	ittt	mi
 80058d8:	6833      	ldrmi	r3, [r6, #0]
 80058da:	3302      	addmi	r3, #2
 80058dc:	6033      	strmi	r3, [r6, #0]
 80058de:	6825      	ldr	r5, [r4, #0]
 80058e0:	f015 0506 	ands.w	r5, r5, #6
 80058e4:	d106      	bne.n	80058f4 <_printf_common+0x48>
 80058e6:	f104 0a19 	add.w	sl, r4, #25
 80058ea:	68e3      	ldr	r3, [r4, #12]
 80058ec:	6832      	ldr	r2, [r6, #0]
 80058ee:	1a9b      	subs	r3, r3, r2
 80058f0:	42ab      	cmp	r3, r5
 80058f2:	dc26      	bgt.n	8005942 <_printf_common+0x96>
 80058f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80058f8:	6822      	ldr	r2, [r4, #0]
 80058fa:	3b00      	subs	r3, #0
 80058fc:	bf18      	it	ne
 80058fe:	2301      	movne	r3, #1
 8005900:	0692      	lsls	r2, r2, #26
 8005902:	d42b      	bmi.n	800595c <_printf_common+0xb0>
 8005904:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005908:	4641      	mov	r1, r8
 800590a:	4638      	mov	r0, r7
 800590c:	47c8      	blx	r9
 800590e:	3001      	adds	r0, #1
 8005910:	d01e      	beq.n	8005950 <_printf_common+0xa4>
 8005912:	6823      	ldr	r3, [r4, #0]
 8005914:	6922      	ldr	r2, [r4, #16]
 8005916:	f003 0306 	and.w	r3, r3, #6
 800591a:	2b04      	cmp	r3, #4
 800591c:	bf02      	ittt	eq
 800591e:	68e5      	ldreq	r5, [r4, #12]
 8005920:	6833      	ldreq	r3, [r6, #0]
 8005922:	1aed      	subeq	r5, r5, r3
 8005924:	68a3      	ldr	r3, [r4, #8]
 8005926:	bf0c      	ite	eq
 8005928:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800592c:	2500      	movne	r5, #0
 800592e:	4293      	cmp	r3, r2
 8005930:	bfc4      	itt	gt
 8005932:	1a9b      	subgt	r3, r3, r2
 8005934:	18ed      	addgt	r5, r5, r3
 8005936:	2600      	movs	r6, #0
 8005938:	341a      	adds	r4, #26
 800593a:	42b5      	cmp	r5, r6
 800593c:	d11a      	bne.n	8005974 <_printf_common+0xc8>
 800593e:	2000      	movs	r0, #0
 8005940:	e008      	b.n	8005954 <_printf_common+0xa8>
 8005942:	2301      	movs	r3, #1
 8005944:	4652      	mov	r2, sl
 8005946:	4641      	mov	r1, r8
 8005948:	4638      	mov	r0, r7
 800594a:	47c8      	blx	r9
 800594c:	3001      	adds	r0, #1
 800594e:	d103      	bne.n	8005958 <_printf_common+0xac>
 8005950:	f04f 30ff 	mov.w	r0, #4294967295
 8005954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005958:	3501      	adds	r5, #1
 800595a:	e7c6      	b.n	80058ea <_printf_common+0x3e>
 800595c:	18e1      	adds	r1, r4, r3
 800595e:	1c5a      	adds	r2, r3, #1
 8005960:	2030      	movs	r0, #48	@ 0x30
 8005962:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005966:	4422      	add	r2, r4
 8005968:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800596c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005970:	3302      	adds	r3, #2
 8005972:	e7c7      	b.n	8005904 <_printf_common+0x58>
 8005974:	2301      	movs	r3, #1
 8005976:	4622      	mov	r2, r4
 8005978:	4641      	mov	r1, r8
 800597a:	4638      	mov	r0, r7
 800597c:	47c8      	blx	r9
 800597e:	3001      	adds	r0, #1
 8005980:	d0e6      	beq.n	8005950 <_printf_common+0xa4>
 8005982:	3601      	adds	r6, #1
 8005984:	e7d9      	b.n	800593a <_printf_common+0x8e>
	...

08005988 <_printf_i>:
 8005988:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800598c:	7e0f      	ldrb	r7, [r1, #24]
 800598e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005990:	2f78      	cmp	r7, #120	@ 0x78
 8005992:	4691      	mov	r9, r2
 8005994:	4680      	mov	r8, r0
 8005996:	460c      	mov	r4, r1
 8005998:	469a      	mov	sl, r3
 800599a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800599e:	d807      	bhi.n	80059b0 <_printf_i+0x28>
 80059a0:	2f62      	cmp	r7, #98	@ 0x62
 80059a2:	d80a      	bhi.n	80059ba <_printf_i+0x32>
 80059a4:	2f00      	cmp	r7, #0
 80059a6:	f000 80d2 	beq.w	8005b4e <_printf_i+0x1c6>
 80059aa:	2f58      	cmp	r7, #88	@ 0x58
 80059ac:	f000 80b9 	beq.w	8005b22 <_printf_i+0x19a>
 80059b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80059b8:	e03a      	b.n	8005a30 <_printf_i+0xa8>
 80059ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80059be:	2b15      	cmp	r3, #21
 80059c0:	d8f6      	bhi.n	80059b0 <_printf_i+0x28>
 80059c2:	a101      	add	r1, pc, #4	@ (adr r1, 80059c8 <_printf_i+0x40>)
 80059c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059c8:	08005a21 	.word	0x08005a21
 80059cc:	08005a35 	.word	0x08005a35
 80059d0:	080059b1 	.word	0x080059b1
 80059d4:	080059b1 	.word	0x080059b1
 80059d8:	080059b1 	.word	0x080059b1
 80059dc:	080059b1 	.word	0x080059b1
 80059e0:	08005a35 	.word	0x08005a35
 80059e4:	080059b1 	.word	0x080059b1
 80059e8:	080059b1 	.word	0x080059b1
 80059ec:	080059b1 	.word	0x080059b1
 80059f0:	080059b1 	.word	0x080059b1
 80059f4:	08005b35 	.word	0x08005b35
 80059f8:	08005a5f 	.word	0x08005a5f
 80059fc:	08005aef 	.word	0x08005aef
 8005a00:	080059b1 	.word	0x080059b1
 8005a04:	080059b1 	.word	0x080059b1
 8005a08:	08005b57 	.word	0x08005b57
 8005a0c:	080059b1 	.word	0x080059b1
 8005a10:	08005a5f 	.word	0x08005a5f
 8005a14:	080059b1 	.word	0x080059b1
 8005a18:	080059b1 	.word	0x080059b1
 8005a1c:	08005af7 	.word	0x08005af7
 8005a20:	6833      	ldr	r3, [r6, #0]
 8005a22:	1d1a      	adds	r2, r3, #4
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6032      	str	r2, [r6, #0]
 8005a28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a30:	2301      	movs	r3, #1
 8005a32:	e09d      	b.n	8005b70 <_printf_i+0x1e8>
 8005a34:	6833      	ldr	r3, [r6, #0]
 8005a36:	6820      	ldr	r0, [r4, #0]
 8005a38:	1d19      	adds	r1, r3, #4
 8005a3a:	6031      	str	r1, [r6, #0]
 8005a3c:	0606      	lsls	r6, r0, #24
 8005a3e:	d501      	bpl.n	8005a44 <_printf_i+0xbc>
 8005a40:	681d      	ldr	r5, [r3, #0]
 8005a42:	e003      	b.n	8005a4c <_printf_i+0xc4>
 8005a44:	0645      	lsls	r5, r0, #25
 8005a46:	d5fb      	bpl.n	8005a40 <_printf_i+0xb8>
 8005a48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a4c:	2d00      	cmp	r5, #0
 8005a4e:	da03      	bge.n	8005a58 <_printf_i+0xd0>
 8005a50:	232d      	movs	r3, #45	@ 0x2d
 8005a52:	426d      	negs	r5, r5
 8005a54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a58:	4859      	ldr	r0, [pc, #356]	@ (8005bc0 <_printf_i+0x238>)
 8005a5a:	230a      	movs	r3, #10
 8005a5c:	e011      	b.n	8005a82 <_printf_i+0xfa>
 8005a5e:	6821      	ldr	r1, [r4, #0]
 8005a60:	6833      	ldr	r3, [r6, #0]
 8005a62:	0608      	lsls	r0, r1, #24
 8005a64:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a68:	d402      	bmi.n	8005a70 <_printf_i+0xe8>
 8005a6a:	0649      	lsls	r1, r1, #25
 8005a6c:	bf48      	it	mi
 8005a6e:	b2ad      	uxthmi	r5, r5
 8005a70:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a72:	4853      	ldr	r0, [pc, #332]	@ (8005bc0 <_printf_i+0x238>)
 8005a74:	6033      	str	r3, [r6, #0]
 8005a76:	bf14      	ite	ne
 8005a78:	230a      	movne	r3, #10
 8005a7a:	2308      	moveq	r3, #8
 8005a7c:	2100      	movs	r1, #0
 8005a7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a82:	6866      	ldr	r6, [r4, #4]
 8005a84:	60a6      	str	r6, [r4, #8]
 8005a86:	2e00      	cmp	r6, #0
 8005a88:	bfa2      	ittt	ge
 8005a8a:	6821      	ldrge	r1, [r4, #0]
 8005a8c:	f021 0104 	bicge.w	r1, r1, #4
 8005a90:	6021      	strge	r1, [r4, #0]
 8005a92:	b90d      	cbnz	r5, 8005a98 <_printf_i+0x110>
 8005a94:	2e00      	cmp	r6, #0
 8005a96:	d04b      	beq.n	8005b30 <_printf_i+0x1a8>
 8005a98:	4616      	mov	r6, r2
 8005a9a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a9e:	fb03 5711 	mls	r7, r3, r1, r5
 8005aa2:	5dc7      	ldrb	r7, [r0, r7]
 8005aa4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005aa8:	462f      	mov	r7, r5
 8005aaa:	42bb      	cmp	r3, r7
 8005aac:	460d      	mov	r5, r1
 8005aae:	d9f4      	bls.n	8005a9a <_printf_i+0x112>
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d10b      	bne.n	8005acc <_printf_i+0x144>
 8005ab4:	6823      	ldr	r3, [r4, #0]
 8005ab6:	07df      	lsls	r7, r3, #31
 8005ab8:	d508      	bpl.n	8005acc <_printf_i+0x144>
 8005aba:	6923      	ldr	r3, [r4, #16]
 8005abc:	6861      	ldr	r1, [r4, #4]
 8005abe:	4299      	cmp	r1, r3
 8005ac0:	bfde      	ittt	le
 8005ac2:	2330      	movle	r3, #48	@ 0x30
 8005ac4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ac8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005acc:	1b92      	subs	r2, r2, r6
 8005ace:	6122      	str	r2, [r4, #16]
 8005ad0:	f8cd a000 	str.w	sl, [sp]
 8005ad4:	464b      	mov	r3, r9
 8005ad6:	aa03      	add	r2, sp, #12
 8005ad8:	4621      	mov	r1, r4
 8005ada:	4640      	mov	r0, r8
 8005adc:	f7ff fee6 	bl	80058ac <_printf_common>
 8005ae0:	3001      	adds	r0, #1
 8005ae2:	d14a      	bne.n	8005b7a <_printf_i+0x1f2>
 8005ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae8:	b004      	add	sp, #16
 8005aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aee:	6823      	ldr	r3, [r4, #0]
 8005af0:	f043 0320 	orr.w	r3, r3, #32
 8005af4:	6023      	str	r3, [r4, #0]
 8005af6:	4833      	ldr	r0, [pc, #204]	@ (8005bc4 <_printf_i+0x23c>)
 8005af8:	2778      	movs	r7, #120	@ 0x78
 8005afa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005afe:	6823      	ldr	r3, [r4, #0]
 8005b00:	6831      	ldr	r1, [r6, #0]
 8005b02:	061f      	lsls	r7, r3, #24
 8005b04:	f851 5b04 	ldr.w	r5, [r1], #4
 8005b08:	d402      	bmi.n	8005b10 <_printf_i+0x188>
 8005b0a:	065f      	lsls	r7, r3, #25
 8005b0c:	bf48      	it	mi
 8005b0e:	b2ad      	uxthmi	r5, r5
 8005b10:	6031      	str	r1, [r6, #0]
 8005b12:	07d9      	lsls	r1, r3, #31
 8005b14:	bf44      	itt	mi
 8005b16:	f043 0320 	orrmi.w	r3, r3, #32
 8005b1a:	6023      	strmi	r3, [r4, #0]
 8005b1c:	b11d      	cbz	r5, 8005b26 <_printf_i+0x19e>
 8005b1e:	2310      	movs	r3, #16
 8005b20:	e7ac      	b.n	8005a7c <_printf_i+0xf4>
 8005b22:	4827      	ldr	r0, [pc, #156]	@ (8005bc0 <_printf_i+0x238>)
 8005b24:	e7e9      	b.n	8005afa <_printf_i+0x172>
 8005b26:	6823      	ldr	r3, [r4, #0]
 8005b28:	f023 0320 	bic.w	r3, r3, #32
 8005b2c:	6023      	str	r3, [r4, #0]
 8005b2e:	e7f6      	b.n	8005b1e <_printf_i+0x196>
 8005b30:	4616      	mov	r6, r2
 8005b32:	e7bd      	b.n	8005ab0 <_printf_i+0x128>
 8005b34:	6833      	ldr	r3, [r6, #0]
 8005b36:	6825      	ldr	r5, [r4, #0]
 8005b38:	6961      	ldr	r1, [r4, #20]
 8005b3a:	1d18      	adds	r0, r3, #4
 8005b3c:	6030      	str	r0, [r6, #0]
 8005b3e:	062e      	lsls	r6, r5, #24
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	d501      	bpl.n	8005b48 <_printf_i+0x1c0>
 8005b44:	6019      	str	r1, [r3, #0]
 8005b46:	e002      	b.n	8005b4e <_printf_i+0x1c6>
 8005b48:	0668      	lsls	r0, r5, #25
 8005b4a:	d5fb      	bpl.n	8005b44 <_printf_i+0x1bc>
 8005b4c:	8019      	strh	r1, [r3, #0]
 8005b4e:	2300      	movs	r3, #0
 8005b50:	6123      	str	r3, [r4, #16]
 8005b52:	4616      	mov	r6, r2
 8005b54:	e7bc      	b.n	8005ad0 <_printf_i+0x148>
 8005b56:	6833      	ldr	r3, [r6, #0]
 8005b58:	1d1a      	adds	r2, r3, #4
 8005b5a:	6032      	str	r2, [r6, #0]
 8005b5c:	681e      	ldr	r6, [r3, #0]
 8005b5e:	6862      	ldr	r2, [r4, #4]
 8005b60:	2100      	movs	r1, #0
 8005b62:	4630      	mov	r0, r6
 8005b64:	f7fa fb34 	bl	80001d0 <memchr>
 8005b68:	b108      	cbz	r0, 8005b6e <_printf_i+0x1e6>
 8005b6a:	1b80      	subs	r0, r0, r6
 8005b6c:	6060      	str	r0, [r4, #4]
 8005b6e:	6863      	ldr	r3, [r4, #4]
 8005b70:	6123      	str	r3, [r4, #16]
 8005b72:	2300      	movs	r3, #0
 8005b74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b78:	e7aa      	b.n	8005ad0 <_printf_i+0x148>
 8005b7a:	6923      	ldr	r3, [r4, #16]
 8005b7c:	4632      	mov	r2, r6
 8005b7e:	4649      	mov	r1, r9
 8005b80:	4640      	mov	r0, r8
 8005b82:	47d0      	blx	sl
 8005b84:	3001      	adds	r0, #1
 8005b86:	d0ad      	beq.n	8005ae4 <_printf_i+0x15c>
 8005b88:	6823      	ldr	r3, [r4, #0]
 8005b8a:	079b      	lsls	r3, r3, #30
 8005b8c:	d413      	bmi.n	8005bb6 <_printf_i+0x22e>
 8005b8e:	68e0      	ldr	r0, [r4, #12]
 8005b90:	9b03      	ldr	r3, [sp, #12]
 8005b92:	4298      	cmp	r0, r3
 8005b94:	bfb8      	it	lt
 8005b96:	4618      	movlt	r0, r3
 8005b98:	e7a6      	b.n	8005ae8 <_printf_i+0x160>
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	4632      	mov	r2, r6
 8005b9e:	4649      	mov	r1, r9
 8005ba0:	4640      	mov	r0, r8
 8005ba2:	47d0      	blx	sl
 8005ba4:	3001      	adds	r0, #1
 8005ba6:	d09d      	beq.n	8005ae4 <_printf_i+0x15c>
 8005ba8:	3501      	adds	r5, #1
 8005baa:	68e3      	ldr	r3, [r4, #12]
 8005bac:	9903      	ldr	r1, [sp, #12]
 8005bae:	1a5b      	subs	r3, r3, r1
 8005bb0:	42ab      	cmp	r3, r5
 8005bb2:	dcf2      	bgt.n	8005b9a <_printf_i+0x212>
 8005bb4:	e7eb      	b.n	8005b8e <_printf_i+0x206>
 8005bb6:	2500      	movs	r5, #0
 8005bb8:	f104 0619 	add.w	r6, r4, #25
 8005bbc:	e7f5      	b.n	8005baa <_printf_i+0x222>
 8005bbe:	bf00      	nop
 8005bc0:	08007f41 	.word	0x08007f41
 8005bc4:	08007f52 	.word	0x08007f52

08005bc8 <std>:
 8005bc8:	2300      	movs	r3, #0
 8005bca:	b510      	push	{r4, lr}
 8005bcc:	4604      	mov	r4, r0
 8005bce:	e9c0 3300 	strd	r3, r3, [r0]
 8005bd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005bd6:	6083      	str	r3, [r0, #8]
 8005bd8:	8181      	strh	r1, [r0, #12]
 8005bda:	6643      	str	r3, [r0, #100]	@ 0x64
 8005bdc:	81c2      	strh	r2, [r0, #14]
 8005bde:	6183      	str	r3, [r0, #24]
 8005be0:	4619      	mov	r1, r3
 8005be2:	2208      	movs	r2, #8
 8005be4:	305c      	adds	r0, #92	@ 0x5c
 8005be6:	f000 f9f9 	bl	8005fdc <memset>
 8005bea:	4b0d      	ldr	r3, [pc, #52]	@ (8005c20 <std+0x58>)
 8005bec:	6263      	str	r3, [r4, #36]	@ 0x24
 8005bee:	4b0d      	ldr	r3, [pc, #52]	@ (8005c24 <std+0x5c>)
 8005bf0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8005c28 <std+0x60>)
 8005bf4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8005c2c <std+0x64>)
 8005bf8:	6323      	str	r3, [r4, #48]	@ 0x30
 8005bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8005c30 <std+0x68>)
 8005bfc:	6224      	str	r4, [r4, #32]
 8005bfe:	429c      	cmp	r4, r3
 8005c00:	d006      	beq.n	8005c10 <std+0x48>
 8005c02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005c06:	4294      	cmp	r4, r2
 8005c08:	d002      	beq.n	8005c10 <std+0x48>
 8005c0a:	33d0      	adds	r3, #208	@ 0xd0
 8005c0c:	429c      	cmp	r4, r3
 8005c0e:	d105      	bne.n	8005c1c <std+0x54>
 8005c10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c18:	f000 ba5c 	b.w	80060d4 <__retarget_lock_init_recursive>
 8005c1c:	bd10      	pop	{r4, pc}
 8005c1e:	bf00      	nop
 8005c20:	08005e2d 	.word	0x08005e2d
 8005c24:	08005e4f 	.word	0x08005e4f
 8005c28:	08005e87 	.word	0x08005e87
 8005c2c:	08005eab 	.word	0x08005eab
 8005c30:	200002e4 	.word	0x200002e4

08005c34 <stdio_exit_handler>:
 8005c34:	4a02      	ldr	r2, [pc, #8]	@ (8005c40 <stdio_exit_handler+0xc>)
 8005c36:	4903      	ldr	r1, [pc, #12]	@ (8005c44 <stdio_exit_handler+0x10>)
 8005c38:	4803      	ldr	r0, [pc, #12]	@ (8005c48 <stdio_exit_handler+0x14>)
 8005c3a:	f000 b869 	b.w	8005d10 <_fwalk_sglue>
 8005c3e:	bf00      	nop
 8005c40:	2000000c 	.word	0x2000000c
 8005c44:	08007a09 	.word	0x08007a09
 8005c48:	2000001c 	.word	0x2000001c

08005c4c <cleanup_stdio>:
 8005c4c:	6841      	ldr	r1, [r0, #4]
 8005c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8005c80 <cleanup_stdio+0x34>)
 8005c50:	4299      	cmp	r1, r3
 8005c52:	b510      	push	{r4, lr}
 8005c54:	4604      	mov	r4, r0
 8005c56:	d001      	beq.n	8005c5c <cleanup_stdio+0x10>
 8005c58:	f001 fed6 	bl	8007a08 <_fflush_r>
 8005c5c:	68a1      	ldr	r1, [r4, #8]
 8005c5e:	4b09      	ldr	r3, [pc, #36]	@ (8005c84 <cleanup_stdio+0x38>)
 8005c60:	4299      	cmp	r1, r3
 8005c62:	d002      	beq.n	8005c6a <cleanup_stdio+0x1e>
 8005c64:	4620      	mov	r0, r4
 8005c66:	f001 fecf 	bl	8007a08 <_fflush_r>
 8005c6a:	68e1      	ldr	r1, [r4, #12]
 8005c6c:	4b06      	ldr	r3, [pc, #24]	@ (8005c88 <cleanup_stdio+0x3c>)
 8005c6e:	4299      	cmp	r1, r3
 8005c70:	d004      	beq.n	8005c7c <cleanup_stdio+0x30>
 8005c72:	4620      	mov	r0, r4
 8005c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c78:	f001 bec6 	b.w	8007a08 <_fflush_r>
 8005c7c:	bd10      	pop	{r4, pc}
 8005c7e:	bf00      	nop
 8005c80:	200002e4 	.word	0x200002e4
 8005c84:	2000034c 	.word	0x2000034c
 8005c88:	200003b4 	.word	0x200003b4

08005c8c <global_stdio_init.part.0>:
 8005c8c:	b510      	push	{r4, lr}
 8005c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8005cbc <global_stdio_init.part.0+0x30>)
 8005c90:	4c0b      	ldr	r4, [pc, #44]	@ (8005cc0 <global_stdio_init.part.0+0x34>)
 8005c92:	4a0c      	ldr	r2, [pc, #48]	@ (8005cc4 <global_stdio_init.part.0+0x38>)
 8005c94:	601a      	str	r2, [r3, #0]
 8005c96:	4620      	mov	r0, r4
 8005c98:	2200      	movs	r2, #0
 8005c9a:	2104      	movs	r1, #4
 8005c9c:	f7ff ff94 	bl	8005bc8 <std>
 8005ca0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	2109      	movs	r1, #9
 8005ca8:	f7ff ff8e 	bl	8005bc8 <std>
 8005cac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005cb0:	2202      	movs	r2, #2
 8005cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cb6:	2112      	movs	r1, #18
 8005cb8:	f7ff bf86 	b.w	8005bc8 <std>
 8005cbc:	2000041c 	.word	0x2000041c
 8005cc0:	200002e4 	.word	0x200002e4
 8005cc4:	08005c35 	.word	0x08005c35

08005cc8 <__sfp_lock_acquire>:
 8005cc8:	4801      	ldr	r0, [pc, #4]	@ (8005cd0 <__sfp_lock_acquire+0x8>)
 8005cca:	f000 ba04 	b.w	80060d6 <__retarget_lock_acquire_recursive>
 8005cce:	bf00      	nop
 8005cd0:	20000425 	.word	0x20000425

08005cd4 <__sfp_lock_release>:
 8005cd4:	4801      	ldr	r0, [pc, #4]	@ (8005cdc <__sfp_lock_release+0x8>)
 8005cd6:	f000 b9ff 	b.w	80060d8 <__retarget_lock_release_recursive>
 8005cda:	bf00      	nop
 8005cdc:	20000425 	.word	0x20000425

08005ce0 <__sinit>:
 8005ce0:	b510      	push	{r4, lr}
 8005ce2:	4604      	mov	r4, r0
 8005ce4:	f7ff fff0 	bl	8005cc8 <__sfp_lock_acquire>
 8005ce8:	6a23      	ldr	r3, [r4, #32]
 8005cea:	b11b      	cbz	r3, 8005cf4 <__sinit+0x14>
 8005cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cf0:	f7ff bff0 	b.w	8005cd4 <__sfp_lock_release>
 8005cf4:	4b04      	ldr	r3, [pc, #16]	@ (8005d08 <__sinit+0x28>)
 8005cf6:	6223      	str	r3, [r4, #32]
 8005cf8:	4b04      	ldr	r3, [pc, #16]	@ (8005d0c <__sinit+0x2c>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1f5      	bne.n	8005cec <__sinit+0xc>
 8005d00:	f7ff ffc4 	bl	8005c8c <global_stdio_init.part.0>
 8005d04:	e7f2      	b.n	8005cec <__sinit+0xc>
 8005d06:	bf00      	nop
 8005d08:	08005c4d 	.word	0x08005c4d
 8005d0c:	2000041c 	.word	0x2000041c

08005d10 <_fwalk_sglue>:
 8005d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d14:	4607      	mov	r7, r0
 8005d16:	4688      	mov	r8, r1
 8005d18:	4614      	mov	r4, r2
 8005d1a:	2600      	movs	r6, #0
 8005d1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d20:	f1b9 0901 	subs.w	r9, r9, #1
 8005d24:	d505      	bpl.n	8005d32 <_fwalk_sglue+0x22>
 8005d26:	6824      	ldr	r4, [r4, #0]
 8005d28:	2c00      	cmp	r4, #0
 8005d2a:	d1f7      	bne.n	8005d1c <_fwalk_sglue+0xc>
 8005d2c:	4630      	mov	r0, r6
 8005d2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d32:	89ab      	ldrh	r3, [r5, #12]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d907      	bls.n	8005d48 <_fwalk_sglue+0x38>
 8005d38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	d003      	beq.n	8005d48 <_fwalk_sglue+0x38>
 8005d40:	4629      	mov	r1, r5
 8005d42:	4638      	mov	r0, r7
 8005d44:	47c0      	blx	r8
 8005d46:	4306      	orrs	r6, r0
 8005d48:	3568      	adds	r5, #104	@ 0x68
 8005d4a:	e7e9      	b.n	8005d20 <_fwalk_sglue+0x10>

08005d4c <iprintf>:
 8005d4c:	b40f      	push	{r0, r1, r2, r3}
 8005d4e:	b507      	push	{r0, r1, r2, lr}
 8005d50:	4906      	ldr	r1, [pc, #24]	@ (8005d6c <iprintf+0x20>)
 8005d52:	ab04      	add	r3, sp, #16
 8005d54:	6808      	ldr	r0, [r1, #0]
 8005d56:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d5a:	6881      	ldr	r1, [r0, #8]
 8005d5c:	9301      	str	r3, [sp, #4]
 8005d5e:	f001 fcb7 	bl	80076d0 <_vfiprintf_r>
 8005d62:	b003      	add	sp, #12
 8005d64:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d68:	b004      	add	sp, #16
 8005d6a:	4770      	bx	lr
 8005d6c:	20000018 	.word	0x20000018

08005d70 <_puts_r>:
 8005d70:	6a03      	ldr	r3, [r0, #32]
 8005d72:	b570      	push	{r4, r5, r6, lr}
 8005d74:	6884      	ldr	r4, [r0, #8]
 8005d76:	4605      	mov	r5, r0
 8005d78:	460e      	mov	r6, r1
 8005d7a:	b90b      	cbnz	r3, 8005d80 <_puts_r+0x10>
 8005d7c:	f7ff ffb0 	bl	8005ce0 <__sinit>
 8005d80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d82:	07db      	lsls	r3, r3, #31
 8005d84:	d405      	bmi.n	8005d92 <_puts_r+0x22>
 8005d86:	89a3      	ldrh	r3, [r4, #12]
 8005d88:	0598      	lsls	r0, r3, #22
 8005d8a:	d402      	bmi.n	8005d92 <_puts_r+0x22>
 8005d8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d8e:	f000 f9a2 	bl	80060d6 <__retarget_lock_acquire_recursive>
 8005d92:	89a3      	ldrh	r3, [r4, #12]
 8005d94:	0719      	lsls	r1, r3, #28
 8005d96:	d502      	bpl.n	8005d9e <_puts_r+0x2e>
 8005d98:	6923      	ldr	r3, [r4, #16]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d135      	bne.n	8005e0a <_puts_r+0x9a>
 8005d9e:	4621      	mov	r1, r4
 8005da0:	4628      	mov	r0, r5
 8005da2:	f000 f8c5 	bl	8005f30 <__swsetup_r>
 8005da6:	b380      	cbz	r0, 8005e0a <_puts_r+0x9a>
 8005da8:	f04f 35ff 	mov.w	r5, #4294967295
 8005dac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005dae:	07da      	lsls	r2, r3, #31
 8005db0:	d405      	bmi.n	8005dbe <_puts_r+0x4e>
 8005db2:	89a3      	ldrh	r3, [r4, #12]
 8005db4:	059b      	lsls	r3, r3, #22
 8005db6:	d402      	bmi.n	8005dbe <_puts_r+0x4e>
 8005db8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005dba:	f000 f98d 	bl	80060d8 <__retarget_lock_release_recursive>
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	bd70      	pop	{r4, r5, r6, pc}
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	da04      	bge.n	8005dd0 <_puts_r+0x60>
 8005dc6:	69a2      	ldr	r2, [r4, #24]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	dc17      	bgt.n	8005dfc <_puts_r+0x8c>
 8005dcc:	290a      	cmp	r1, #10
 8005dce:	d015      	beq.n	8005dfc <_puts_r+0x8c>
 8005dd0:	6823      	ldr	r3, [r4, #0]
 8005dd2:	1c5a      	adds	r2, r3, #1
 8005dd4:	6022      	str	r2, [r4, #0]
 8005dd6:	7019      	strb	r1, [r3, #0]
 8005dd8:	68a3      	ldr	r3, [r4, #8]
 8005dda:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005dde:	3b01      	subs	r3, #1
 8005de0:	60a3      	str	r3, [r4, #8]
 8005de2:	2900      	cmp	r1, #0
 8005de4:	d1ed      	bne.n	8005dc2 <_puts_r+0x52>
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	da11      	bge.n	8005e0e <_puts_r+0x9e>
 8005dea:	4622      	mov	r2, r4
 8005dec:	210a      	movs	r1, #10
 8005dee:	4628      	mov	r0, r5
 8005df0:	f000 f85f 	bl	8005eb2 <__swbuf_r>
 8005df4:	3001      	adds	r0, #1
 8005df6:	d0d7      	beq.n	8005da8 <_puts_r+0x38>
 8005df8:	250a      	movs	r5, #10
 8005dfa:	e7d7      	b.n	8005dac <_puts_r+0x3c>
 8005dfc:	4622      	mov	r2, r4
 8005dfe:	4628      	mov	r0, r5
 8005e00:	f000 f857 	bl	8005eb2 <__swbuf_r>
 8005e04:	3001      	adds	r0, #1
 8005e06:	d1e7      	bne.n	8005dd8 <_puts_r+0x68>
 8005e08:	e7ce      	b.n	8005da8 <_puts_r+0x38>
 8005e0a:	3e01      	subs	r6, #1
 8005e0c:	e7e4      	b.n	8005dd8 <_puts_r+0x68>
 8005e0e:	6823      	ldr	r3, [r4, #0]
 8005e10:	1c5a      	adds	r2, r3, #1
 8005e12:	6022      	str	r2, [r4, #0]
 8005e14:	220a      	movs	r2, #10
 8005e16:	701a      	strb	r2, [r3, #0]
 8005e18:	e7ee      	b.n	8005df8 <_puts_r+0x88>
	...

08005e1c <puts>:
 8005e1c:	4b02      	ldr	r3, [pc, #8]	@ (8005e28 <puts+0xc>)
 8005e1e:	4601      	mov	r1, r0
 8005e20:	6818      	ldr	r0, [r3, #0]
 8005e22:	f7ff bfa5 	b.w	8005d70 <_puts_r>
 8005e26:	bf00      	nop
 8005e28:	20000018 	.word	0x20000018

08005e2c <__sread>:
 8005e2c:	b510      	push	{r4, lr}
 8005e2e:	460c      	mov	r4, r1
 8005e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e34:	f000 f900 	bl	8006038 <_read_r>
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	bfab      	itete	ge
 8005e3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005e3e:	89a3      	ldrhlt	r3, [r4, #12]
 8005e40:	181b      	addge	r3, r3, r0
 8005e42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005e46:	bfac      	ite	ge
 8005e48:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005e4a:	81a3      	strhlt	r3, [r4, #12]
 8005e4c:	bd10      	pop	{r4, pc}

08005e4e <__swrite>:
 8005e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e52:	461f      	mov	r7, r3
 8005e54:	898b      	ldrh	r3, [r1, #12]
 8005e56:	05db      	lsls	r3, r3, #23
 8005e58:	4605      	mov	r5, r0
 8005e5a:	460c      	mov	r4, r1
 8005e5c:	4616      	mov	r6, r2
 8005e5e:	d505      	bpl.n	8005e6c <__swrite+0x1e>
 8005e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e64:	2302      	movs	r3, #2
 8005e66:	2200      	movs	r2, #0
 8005e68:	f000 f8d4 	bl	8006014 <_lseek_r>
 8005e6c:	89a3      	ldrh	r3, [r4, #12]
 8005e6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e76:	81a3      	strh	r3, [r4, #12]
 8005e78:	4632      	mov	r2, r6
 8005e7a:	463b      	mov	r3, r7
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e82:	f000 b8eb 	b.w	800605c <_write_r>

08005e86 <__sseek>:
 8005e86:	b510      	push	{r4, lr}
 8005e88:	460c      	mov	r4, r1
 8005e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e8e:	f000 f8c1 	bl	8006014 <_lseek_r>
 8005e92:	1c43      	adds	r3, r0, #1
 8005e94:	89a3      	ldrh	r3, [r4, #12]
 8005e96:	bf15      	itete	ne
 8005e98:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005e9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005e9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005ea2:	81a3      	strheq	r3, [r4, #12]
 8005ea4:	bf18      	it	ne
 8005ea6:	81a3      	strhne	r3, [r4, #12]
 8005ea8:	bd10      	pop	{r4, pc}

08005eaa <__sclose>:
 8005eaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eae:	f000 b8a1 	b.w	8005ff4 <_close_r>

08005eb2 <__swbuf_r>:
 8005eb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb4:	460e      	mov	r6, r1
 8005eb6:	4614      	mov	r4, r2
 8005eb8:	4605      	mov	r5, r0
 8005eba:	b118      	cbz	r0, 8005ec4 <__swbuf_r+0x12>
 8005ebc:	6a03      	ldr	r3, [r0, #32]
 8005ebe:	b90b      	cbnz	r3, 8005ec4 <__swbuf_r+0x12>
 8005ec0:	f7ff ff0e 	bl	8005ce0 <__sinit>
 8005ec4:	69a3      	ldr	r3, [r4, #24]
 8005ec6:	60a3      	str	r3, [r4, #8]
 8005ec8:	89a3      	ldrh	r3, [r4, #12]
 8005eca:	071a      	lsls	r2, r3, #28
 8005ecc:	d501      	bpl.n	8005ed2 <__swbuf_r+0x20>
 8005ece:	6923      	ldr	r3, [r4, #16]
 8005ed0:	b943      	cbnz	r3, 8005ee4 <__swbuf_r+0x32>
 8005ed2:	4621      	mov	r1, r4
 8005ed4:	4628      	mov	r0, r5
 8005ed6:	f000 f82b 	bl	8005f30 <__swsetup_r>
 8005eda:	b118      	cbz	r0, 8005ee4 <__swbuf_r+0x32>
 8005edc:	f04f 37ff 	mov.w	r7, #4294967295
 8005ee0:	4638      	mov	r0, r7
 8005ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ee4:	6823      	ldr	r3, [r4, #0]
 8005ee6:	6922      	ldr	r2, [r4, #16]
 8005ee8:	1a98      	subs	r0, r3, r2
 8005eea:	6963      	ldr	r3, [r4, #20]
 8005eec:	b2f6      	uxtb	r6, r6
 8005eee:	4283      	cmp	r3, r0
 8005ef0:	4637      	mov	r7, r6
 8005ef2:	dc05      	bgt.n	8005f00 <__swbuf_r+0x4e>
 8005ef4:	4621      	mov	r1, r4
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	f001 fd86 	bl	8007a08 <_fflush_r>
 8005efc:	2800      	cmp	r0, #0
 8005efe:	d1ed      	bne.n	8005edc <__swbuf_r+0x2a>
 8005f00:	68a3      	ldr	r3, [r4, #8]
 8005f02:	3b01      	subs	r3, #1
 8005f04:	60a3      	str	r3, [r4, #8]
 8005f06:	6823      	ldr	r3, [r4, #0]
 8005f08:	1c5a      	adds	r2, r3, #1
 8005f0a:	6022      	str	r2, [r4, #0]
 8005f0c:	701e      	strb	r6, [r3, #0]
 8005f0e:	6962      	ldr	r2, [r4, #20]
 8005f10:	1c43      	adds	r3, r0, #1
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d004      	beq.n	8005f20 <__swbuf_r+0x6e>
 8005f16:	89a3      	ldrh	r3, [r4, #12]
 8005f18:	07db      	lsls	r3, r3, #31
 8005f1a:	d5e1      	bpl.n	8005ee0 <__swbuf_r+0x2e>
 8005f1c:	2e0a      	cmp	r6, #10
 8005f1e:	d1df      	bne.n	8005ee0 <__swbuf_r+0x2e>
 8005f20:	4621      	mov	r1, r4
 8005f22:	4628      	mov	r0, r5
 8005f24:	f001 fd70 	bl	8007a08 <_fflush_r>
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	d0d9      	beq.n	8005ee0 <__swbuf_r+0x2e>
 8005f2c:	e7d6      	b.n	8005edc <__swbuf_r+0x2a>
	...

08005f30 <__swsetup_r>:
 8005f30:	b538      	push	{r3, r4, r5, lr}
 8005f32:	4b29      	ldr	r3, [pc, #164]	@ (8005fd8 <__swsetup_r+0xa8>)
 8005f34:	4605      	mov	r5, r0
 8005f36:	6818      	ldr	r0, [r3, #0]
 8005f38:	460c      	mov	r4, r1
 8005f3a:	b118      	cbz	r0, 8005f44 <__swsetup_r+0x14>
 8005f3c:	6a03      	ldr	r3, [r0, #32]
 8005f3e:	b90b      	cbnz	r3, 8005f44 <__swsetup_r+0x14>
 8005f40:	f7ff fece 	bl	8005ce0 <__sinit>
 8005f44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f48:	0719      	lsls	r1, r3, #28
 8005f4a:	d422      	bmi.n	8005f92 <__swsetup_r+0x62>
 8005f4c:	06da      	lsls	r2, r3, #27
 8005f4e:	d407      	bmi.n	8005f60 <__swsetup_r+0x30>
 8005f50:	2209      	movs	r2, #9
 8005f52:	602a      	str	r2, [r5, #0]
 8005f54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f58:	81a3      	strh	r3, [r4, #12]
 8005f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f5e:	e033      	b.n	8005fc8 <__swsetup_r+0x98>
 8005f60:	0758      	lsls	r0, r3, #29
 8005f62:	d512      	bpl.n	8005f8a <__swsetup_r+0x5a>
 8005f64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f66:	b141      	cbz	r1, 8005f7a <__swsetup_r+0x4a>
 8005f68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f6c:	4299      	cmp	r1, r3
 8005f6e:	d002      	beq.n	8005f76 <__swsetup_r+0x46>
 8005f70:	4628      	mov	r0, r5
 8005f72:	f000 ff01 	bl	8006d78 <_free_r>
 8005f76:	2300      	movs	r3, #0
 8005f78:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f7a:	89a3      	ldrh	r3, [r4, #12]
 8005f7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005f80:	81a3      	strh	r3, [r4, #12]
 8005f82:	2300      	movs	r3, #0
 8005f84:	6063      	str	r3, [r4, #4]
 8005f86:	6923      	ldr	r3, [r4, #16]
 8005f88:	6023      	str	r3, [r4, #0]
 8005f8a:	89a3      	ldrh	r3, [r4, #12]
 8005f8c:	f043 0308 	orr.w	r3, r3, #8
 8005f90:	81a3      	strh	r3, [r4, #12]
 8005f92:	6923      	ldr	r3, [r4, #16]
 8005f94:	b94b      	cbnz	r3, 8005faa <__swsetup_r+0x7a>
 8005f96:	89a3      	ldrh	r3, [r4, #12]
 8005f98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005f9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fa0:	d003      	beq.n	8005faa <__swsetup_r+0x7a>
 8005fa2:	4621      	mov	r1, r4
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	f001 fd7d 	bl	8007aa4 <__smakebuf_r>
 8005faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fae:	f013 0201 	ands.w	r2, r3, #1
 8005fb2:	d00a      	beq.n	8005fca <__swsetup_r+0x9a>
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	60a2      	str	r2, [r4, #8]
 8005fb8:	6962      	ldr	r2, [r4, #20]
 8005fba:	4252      	negs	r2, r2
 8005fbc:	61a2      	str	r2, [r4, #24]
 8005fbe:	6922      	ldr	r2, [r4, #16]
 8005fc0:	b942      	cbnz	r2, 8005fd4 <__swsetup_r+0xa4>
 8005fc2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005fc6:	d1c5      	bne.n	8005f54 <__swsetup_r+0x24>
 8005fc8:	bd38      	pop	{r3, r4, r5, pc}
 8005fca:	0799      	lsls	r1, r3, #30
 8005fcc:	bf58      	it	pl
 8005fce:	6962      	ldrpl	r2, [r4, #20]
 8005fd0:	60a2      	str	r2, [r4, #8]
 8005fd2:	e7f4      	b.n	8005fbe <__swsetup_r+0x8e>
 8005fd4:	2000      	movs	r0, #0
 8005fd6:	e7f7      	b.n	8005fc8 <__swsetup_r+0x98>
 8005fd8:	20000018 	.word	0x20000018

08005fdc <memset>:
 8005fdc:	4402      	add	r2, r0
 8005fde:	4603      	mov	r3, r0
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d100      	bne.n	8005fe6 <memset+0xa>
 8005fe4:	4770      	bx	lr
 8005fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8005fea:	e7f9      	b.n	8005fe0 <memset+0x4>

08005fec <_localeconv_r>:
 8005fec:	4800      	ldr	r0, [pc, #0]	@ (8005ff0 <_localeconv_r+0x4>)
 8005fee:	4770      	bx	lr
 8005ff0:	20000158 	.word	0x20000158

08005ff4 <_close_r>:
 8005ff4:	b538      	push	{r3, r4, r5, lr}
 8005ff6:	4d06      	ldr	r5, [pc, #24]	@ (8006010 <_close_r+0x1c>)
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	4604      	mov	r4, r0
 8005ffc:	4608      	mov	r0, r1
 8005ffe:	602b      	str	r3, [r5, #0]
 8006000:	f7fc fe80 	bl	8002d04 <_close>
 8006004:	1c43      	adds	r3, r0, #1
 8006006:	d102      	bne.n	800600e <_close_r+0x1a>
 8006008:	682b      	ldr	r3, [r5, #0]
 800600a:	b103      	cbz	r3, 800600e <_close_r+0x1a>
 800600c:	6023      	str	r3, [r4, #0]
 800600e:	bd38      	pop	{r3, r4, r5, pc}
 8006010:	20000420 	.word	0x20000420

08006014 <_lseek_r>:
 8006014:	b538      	push	{r3, r4, r5, lr}
 8006016:	4d07      	ldr	r5, [pc, #28]	@ (8006034 <_lseek_r+0x20>)
 8006018:	4604      	mov	r4, r0
 800601a:	4608      	mov	r0, r1
 800601c:	4611      	mov	r1, r2
 800601e:	2200      	movs	r2, #0
 8006020:	602a      	str	r2, [r5, #0]
 8006022:	461a      	mov	r2, r3
 8006024:	f7fc fe95 	bl	8002d52 <_lseek>
 8006028:	1c43      	adds	r3, r0, #1
 800602a:	d102      	bne.n	8006032 <_lseek_r+0x1e>
 800602c:	682b      	ldr	r3, [r5, #0]
 800602e:	b103      	cbz	r3, 8006032 <_lseek_r+0x1e>
 8006030:	6023      	str	r3, [r4, #0]
 8006032:	bd38      	pop	{r3, r4, r5, pc}
 8006034:	20000420 	.word	0x20000420

08006038 <_read_r>:
 8006038:	b538      	push	{r3, r4, r5, lr}
 800603a:	4d07      	ldr	r5, [pc, #28]	@ (8006058 <_read_r+0x20>)
 800603c:	4604      	mov	r4, r0
 800603e:	4608      	mov	r0, r1
 8006040:	4611      	mov	r1, r2
 8006042:	2200      	movs	r2, #0
 8006044:	602a      	str	r2, [r5, #0]
 8006046:	461a      	mov	r2, r3
 8006048:	f7fc fe3f 	bl	8002cca <_read>
 800604c:	1c43      	adds	r3, r0, #1
 800604e:	d102      	bne.n	8006056 <_read_r+0x1e>
 8006050:	682b      	ldr	r3, [r5, #0]
 8006052:	b103      	cbz	r3, 8006056 <_read_r+0x1e>
 8006054:	6023      	str	r3, [r4, #0]
 8006056:	bd38      	pop	{r3, r4, r5, pc}
 8006058:	20000420 	.word	0x20000420

0800605c <_write_r>:
 800605c:	b538      	push	{r3, r4, r5, lr}
 800605e:	4d07      	ldr	r5, [pc, #28]	@ (800607c <_write_r+0x20>)
 8006060:	4604      	mov	r4, r0
 8006062:	4608      	mov	r0, r1
 8006064:	4611      	mov	r1, r2
 8006066:	2200      	movs	r2, #0
 8006068:	602a      	str	r2, [r5, #0]
 800606a:	461a      	mov	r2, r3
 800606c:	f7fc fa80 	bl	8002570 <_write>
 8006070:	1c43      	adds	r3, r0, #1
 8006072:	d102      	bne.n	800607a <_write_r+0x1e>
 8006074:	682b      	ldr	r3, [r5, #0]
 8006076:	b103      	cbz	r3, 800607a <_write_r+0x1e>
 8006078:	6023      	str	r3, [r4, #0]
 800607a:	bd38      	pop	{r3, r4, r5, pc}
 800607c:	20000420 	.word	0x20000420

08006080 <__errno>:
 8006080:	4b01      	ldr	r3, [pc, #4]	@ (8006088 <__errno+0x8>)
 8006082:	6818      	ldr	r0, [r3, #0]
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	20000018 	.word	0x20000018

0800608c <__libc_init_array>:
 800608c:	b570      	push	{r4, r5, r6, lr}
 800608e:	4d0d      	ldr	r5, [pc, #52]	@ (80060c4 <__libc_init_array+0x38>)
 8006090:	4c0d      	ldr	r4, [pc, #52]	@ (80060c8 <__libc_init_array+0x3c>)
 8006092:	1b64      	subs	r4, r4, r5
 8006094:	10a4      	asrs	r4, r4, #2
 8006096:	2600      	movs	r6, #0
 8006098:	42a6      	cmp	r6, r4
 800609a:	d109      	bne.n	80060b0 <__libc_init_array+0x24>
 800609c:	4d0b      	ldr	r5, [pc, #44]	@ (80060cc <__libc_init_array+0x40>)
 800609e:	4c0c      	ldr	r4, [pc, #48]	@ (80060d0 <__libc_init_array+0x44>)
 80060a0:	f001 fe2c 	bl	8007cfc <_init>
 80060a4:	1b64      	subs	r4, r4, r5
 80060a6:	10a4      	asrs	r4, r4, #2
 80060a8:	2600      	movs	r6, #0
 80060aa:	42a6      	cmp	r6, r4
 80060ac:	d105      	bne.n	80060ba <__libc_init_array+0x2e>
 80060ae:	bd70      	pop	{r4, r5, r6, pc}
 80060b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80060b4:	4798      	blx	r3
 80060b6:	3601      	adds	r6, #1
 80060b8:	e7ee      	b.n	8006098 <__libc_init_array+0xc>
 80060ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80060be:	4798      	blx	r3
 80060c0:	3601      	adds	r6, #1
 80060c2:	e7f2      	b.n	80060aa <__libc_init_array+0x1e>
 80060c4:	080082a8 	.word	0x080082a8
 80060c8:	080082a8 	.word	0x080082a8
 80060cc:	080082a8 	.word	0x080082a8
 80060d0:	080082ac 	.word	0x080082ac

080060d4 <__retarget_lock_init_recursive>:
 80060d4:	4770      	bx	lr

080060d6 <__retarget_lock_acquire_recursive>:
 80060d6:	4770      	bx	lr

080060d8 <__retarget_lock_release_recursive>:
 80060d8:	4770      	bx	lr

080060da <quorem>:
 80060da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060de:	6903      	ldr	r3, [r0, #16]
 80060e0:	690c      	ldr	r4, [r1, #16]
 80060e2:	42a3      	cmp	r3, r4
 80060e4:	4607      	mov	r7, r0
 80060e6:	db7e      	blt.n	80061e6 <quorem+0x10c>
 80060e8:	3c01      	subs	r4, #1
 80060ea:	f101 0814 	add.w	r8, r1, #20
 80060ee:	00a3      	lsls	r3, r4, #2
 80060f0:	f100 0514 	add.w	r5, r0, #20
 80060f4:	9300      	str	r3, [sp, #0]
 80060f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060fa:	9301      	str	r3, [sp, #4]
 80060fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006100:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006104:	3301      	adds	r3, #1
 8006106:	429a      	cmp	r2, r3
 8006108:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800610c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006110:	d32e      	bcc.n	8006170 <quorem+0x96>
 8006112:	f04f 0a00 	mov.w	sl, #0
 8006116:	46c4      	mov	ip, r8
 8006118:	46ae      	mov	lr, r5
 800611a:	46d3      	mov	fp, sl
 800611c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006120:	b298      	uxth	r0, r3
 8006122:	fb06 a000 	mla	r0, r6, r0, sl
 8006126:	0c02      	lsrs	r2, r0, #16
 8006128:	0c1b      	lsrs	r3, r3, #16
 800612a:	fb06 2303 	mla	r3, r6, r3, r2
 800612e:	f8de 2000 	ldr.w	r2, [lr]
 8006132:	b280      	uxth	r0, r0
 8006134:	b292      	uxth	r2, r2
 8006136:	1a12      	subs	r2, r2, r0
 8006138:	445a      	add	r2, fp
 800613a:	f8de 0000 	ldr.w	r0, [lr]
 800613e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006142:	b29b      	uxth	r3, r3
 8006144:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006148:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800614c:	b292      	uxth	r2, r2
 800614e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006152:	45e1      	cmp	r9, ip
 8006154:	f84e 2b04 	str.w	r2, [lr], #4
 8006158:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800615c:	d2de      	bcs.n	800611c <quorem+0x42>
 800615e:	9b00      	ldr	r3, [sp, #0]
 8006160:	58eb      	ldr	r3, [r5, r3]
 8006162:	b92b      	cbnz	r3, 8006170 <quorem+0x96>
 8006164:	9b01      	ldr	r3, [sp, #4]
 8006166:	3b04      	subs	r3, #4
 8006168:	429d      	cmp	r5, r3
 800616a:	461a      	mov	r2, r3
 800616c:	d32f      	bcc.n	80061ce <quorem+0xf4>
 800616e:	613c      	str	r4, [r7, #16]
 8006170:	4638      	mov	r0, r7
 8006172:	f001 f97b 	bl	800746c <__mcmp>
 8006176:	2800      	cmp	r0, #0
 8006178:	db25      	blt.n	80061c6 <quorem+0xec>
 800617a:	4629      	mov	r1, r5
 800617c:	2000      	movs	r0, #0
 800617e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006182:	f8d1 c000 	ldr.w	ip, [r1]
 8006186:	fa1f fe82 	uxth.w	lr, r2
 800618a:	fa1f f38c 	uxth.w	r3, ip
 800618e:	eba3 030e 	sub.w	r3, r3, lr
 8006192:	4403      	add	r3, r0
 8006194:	0c12      	lsrs	r2, r2, #16
 8006196:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800619a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800619e:	b29b      	uxth	r3, r3
 80061a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061a4:	45c1      	cmp	r9, r8
 80061a6:	f841 3b04 	str.w	r3, [r1], #4
 80061aa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80061ae:	d2e6      	bcs.n	800617e <quorem+0xa4>
 80061b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061b8:	b922      	cbnz	r2, 80061c4 <quorem+0xea>
 80061ba:	3b04      	subs	r3, #4
 80061bc:	429d      	cmp	r5, r3
 80061be:	461a      	mov	r2, r3
 80061c0:	d30b      	bcc.n	80061da <quorem+0x100>
 80061c2:	613c      	str	r4, [r7, #16]
 80061c4:	3601      	adds	r6, #1
 80061c6:	4630      	mov	r0, r6
 80061c8:	b003      	add	sp, #12
 80061ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ce:	6812      	ldr	r2, [r2, #0]
 80061d0:	3b04      	subs	r3, #4
 80061d2:	2a00      	cmp	r2, #0
 80061d4:	d1cb      	bne.n	800616e <quorem+0x94>
 80061d6:	3c01      	subs	r4, #1
 80061d8:	e7c6      	b.n	8006168 <quorem+0x8e>
 80061da:	6812      	ldr	r2, [r2, #0]
 80061dc:	3b04      	subs	r3, #4
 80061de:	2a00      	cmp	r2, #0
 80061e0:	d1ef      	bne.n	80061c2 <quorem+0xe8>
 80061e2:	3c01      	subs	r4, #1
 80061e4:	e7ea      	b.n	80061bc <quorem+0xe2>
 80061e6:	2000      	movs	r0, #0
 80061e8:	e7ee      	b.n	80061c8 <quorem+0xee>
 80061ea:	0000      	movs	r0, r0
 80061ec:	0000      	movs	r0, r0
	...

080061f0 <_dtoa_r>:
 80061f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f4:	69c7      	ldr	r7, [r0, #28]
 80061f6:	b099      	sub	sp, #100	@ 0x64
 80061f8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80061fc:	ec55 4b10 	vmov	r4, r5, d0
 8006200:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006202:	9109      	str	r1, [sp, #36]	@ 0x24
 8006204:	4683      	mov	fp, r0
 8006206:	920e      	str	r2, [sp, #56]	@ 0x38
 8006208:	9313      	str	r3, [sp, #76]	@ 0x4c
 800620a:	b97f      	cbnz	r7, 800622c <_dtoa_r+0x3c>
 800620c:	2010      	movs	r0, #16
 800620e:	f000 fdfd 	bl	8006e0c <malloc>
 8006212:	4602      	mov	r2, r0
 8006214:	f8cb 001c 	str.w	r0, [fp, #28]
 8006218:	b920      	cbnz	r0, 8006224 <_dtoa_r+0x34>
 800621a:	4ba7      	ldr	r3, [pc, #668]	@ (80064b8 <_dtoa_r+0x2c8>)
 800621c:	21ef      	movs	r1, #239	@ 0xef
 800621e:	48a7      	ldr	r0, [pc, #668]	@ (80064bc <_dtoa_r+0x2cc>)
 8006220:	f001 fcbc 	bl	8007b9c <__assert_func>
 8006224:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006228:	6007      	str	r7, [r0, #0]
 800622a:	60c7      	str	r7, [r0, #12]
 800622c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006230:	6819      	ldr	r1, [r3, #0]
 8006232:	b159      	cbz	r1, 800624c <_dtoa_r+0x5c>
 8006234:	685a      	ldr	r2, [r3, #4]
 8006236:	604a      	str	r2, [r1, #4]
 8006238:	2301      	movs	r3, #1
 800623a:	4093      	lsls	r3, r2
 800623c:	608b      	str	r3, [r1, #8]
 800623e:	4658      	mov	r0, fp
 8006240:	f000 feda 	bl	8006ff8 <_Bfree>
 8006244:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006248:	2200      	movs	r2, #0
 800624a:	601a      	str	r2, [r3, #0]
 800624c:	1e2b      	subs	r3, r5, #0
 800624e:	bfb9      	ittee	lt
 8006250:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006254:	9303      	strlt	r3, [sp, #12]
 8006256:	2300      	movge	r3, #0
 8006258:	6033      	strge	r3, [r6, #0]
 800625a:	9f03      	ldr	r7, [sp, #12]
 800625c:	4b98      	ldr	r3, [pc, #608]	@ (80064c0 <_dtoa_r+0x2d0>)
 800625e:	bfbc      	itt	lt
 8006260:	2201      	movlt	r2, #1
 8006262:	6032      	strlt	r2, [r6, #0]
 8006264:	43bb      	bics	r3, r7
 8006266:	d112      	bne.n	800628e <_dtoa_r+0x9e>
 8006268:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800626a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800626e:	6013      	str	r3, [r2, #0]
 8006270:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006274:	4323      	orrs	r3, r4
 8006276:	f000 854d 	beq.w	8006d14 <_dtoa_r+0xb24>
 800627a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800627c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80064d4 <_dtoa_r+0x2e4>
 8006280:	2b00      	cmp	r3, #0
 8006282:	f000 854f 	beq.w	8006d24 <_dtoa_r+0xb34>
 8006286:	f10a 0303 	add.w	r3, sl, #3
 800628a:	f000 bd49 	b.w	8006d20 <_dtoa_r+0xb30>
 800628e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006292:	2200      	movs	r2, #0
 8006294:	ec51 0b17 	vmov	r0, r1, d7
 8006298:	2300      	movs	r3, #0
 800629a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800629e:	f7fa fc13 	bl	8000ac8 <__aeabi_dcmpeq>
 80062a2:	4680      	mov	r8, r0
 80062a4:	b158      	cbz	r0, 80062be <_dtoa_r+0xce>
 80062a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80062a8:	2301      	movs	r3, #1
 80062aa:	6013      	str	r3, [r2, #0]
 80062ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80062ae:	b113      	cbz	r3, 80062b6 <_dtoa_r+0xc6>
 80062b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80062b2:	4b84      	ldr	r3, [pc, #528]	@ (80064c4 <_dtoa_r+0x2d4>)
 80062b4:	6013      	str	r3, [r2, #0]
 80062b6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80064d8 <_dtoa_r+0x2e8>
 80062ba:	f000 bd33 	b.w	8006d24 <_dtoa_r+0xb34>
 80062be:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80062c2:	aa16      	add	r2, sp, #88	@ 0x58
 80062c4:	a917      	add	r1, sp, #92	@ 0x5c
 80062c6:	4658      	mov	r0, fp
 80062c8:	f001 f980 	bl	80075cc <__d2b>
 80062cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80062d0:	4681      	mov	r9, r0
 80062d2:	2e00      	cmp	r6, #0
 80062d4:	d077      	beq.n	80063c6 <_dtoa_r+0x1d6>
 80062d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80062d8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80062dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80062e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80062ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80062f0:	4619      	mov	r1, r3
 80062f2:	2200      	movs	r2, #0
 80062f4:	4b74      	ldr	r3, [pc, #464]	@ (80064c8 <_dtoa_r+0x2d8>)
 80062f6:	f7f9 ffc7 	bl	8000288 <__aeabi_dsub>
 80062fa:	a369      	add	r3, pc, #420	@ (adr r3, 80064a0 <_dtoa_r+0x2b0>)
 80062fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006300:	f7fa f97a 	bl	80005f8 <__aeabi_dmul>
 8006304:	a368      	add	r3, pc, #416	@ (adr r3, 80064a8 <_dtoa_r+0x2b8>)
 8006306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630a:	f7f9 ffbf 	bl	800028c <__adddf3>
 800630e:	4604      	mov	r4, r0
 8006310:	4630      	mov	r0, r6
 8006312:	460d      	mov	r5, r1
 8006314:	f7fa f906 	bl	8000524 <__aeabi_i2d>
 8006318:	a365      	add	r3, pc, #404	@ (adr r3, 80064b0 <_dtoa_r+0x2c0>)
 800631a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631e:	f7fa f96b 	bl	80005f8 <__aeabi_dmul>
 8006322:	4602      	mov	r2, r0
 8006324:	460b      	mov	r3, r1
 8006326:	4620      	mov	r0, r4
 8006328:	4629      	mov	r1, r5
 800632a:	f7f9 ffaf 	bl	800028c <__adddf3>
 800632e:	4604      	mov	r4, r0
 8006330:	460d      	mov	r5, r1
 8006332:	f7fa fc11 	bl	8000b58 <__aeabi_d2iz>
 8006336:	2200      	movs	r2, #0
 8006338:	4607      	mov	r7, r0
 800633a:	2300      	movs	r3, #0
 800633c:	4620      	mov	r0, r4
 800633e:	4629      	mov	r1, r5
 8006340:	f7fa fbcc 	bl	8000adc <__aeabi_dcmplt>
 8006344:	b140      	cbz	r0, 8006358 <_dtoa_r+0x168>
 8006346:	4638      	mov	r0, r7
 8006348:	f7fa f8ec 	bl	8000524 <__aeabi_i2d>
 800634c:	4622      	mov	r2, r4
 800634e:	462b      	mov	r3, r5
 8006350:	f7fa fbba 	bl	8000ac8 <__aeabi_dcmpeq>
 8006354:	b900      	cbnz	r0, 8006358 <_dtoa_r+0x168>
 8006356:	3f01      	subs	r7, #1
 8006358:	2f16      	cmp	r7, #22
 800635a:	d851      	bhi.n	8006400 <_dtoa_r+0x210>
 800635c:	4b5b      	ldr	r3, [pc, #364]	@ (80064cc <_dtoa_r+0x2dc>)
 800635e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006366:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800636a:	f7fa fbb7 	bl	8000adc <__aeabi_dcmplt>
 800636e:	2800      	cmp	r0, #0
 8006370:	d048      	beq.n	8006404 <_dtoa_r+0x214>
 8006372:	3f01      	subs	r7, #1
 8006374:	2300      	movs	r3, #0
 8006376:	9312      	str	r3, [sp, #72]	@ 0x48
 8006378:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800637a:	1b9b      	subs	r3, r3, r6
 800637c:	1e5a      	subs	r2, r3, #1
 800637e:	bf44      	itt	mi
 8006380:	f1c3 0801 	rsbmi	r8, r3, #1
 8006384:	2300      	movmi	r3, #0
 8006386:	9208      	str	r2, [sp, #32]
 8006388:	bf54      	ite	pl
 800638a:	f04f 0800 	movpl.w	r8, #0
 800638e:	9308      	strmi	r3, [sp, #32]
 8006390:	2f00      	cmp	r7, #0
 8006392:	db39      	blt.n	8006408 <_dtoa_r+0x218>
 8006394:	9b08      	ldr	r3, [sp, #32]
 8006396:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006398:	443b      	add	r3, r7
 800639a:	9308      	str	r3, [sp, #32]
 800639c:	2300      	movs	r3, #0
 800639e:	930a      	str	r3, [sp, #40]	@ 0x28
 80063a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063a2:	2b09      	cmp	r3, #9
 80063a4:	d864      	bhi.n	8006470 <_dtoa_r+0x280>
 80063a6:	2b05      	cmp	r3, #5
 80063a8:	bfc4      	itt	gt
 80063aa:	3b04      	subgt	r3, #4
 80063ac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80063ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063b0:	f1a3 0302 	sub.w	r3, r3, #2
 80063b4:	bfcc      	ite	gt
 80063b6:	2400      	movgt	r4, #0
 80063b8:	2401      	movle	r4, #1
 80063ba:	2b03      	cmp	r3, #3
 80063bc:	d863      	bhi.n	8006486 <_dtoa_r+0x296>
 80063be:	e8df f003 	tbb	[pc, r3]
 80063c2:	372a      	.short	0x372a
 80063c4:	5535      	.short	0x5535
 80063c6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80063ca:	441e      	add	r6, r3
 80063cc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80063d0:	2b20      	cmp	r3, #32
 80063d2:	bfc1      	itttt	gt
 80063d4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80063d8:	409f      	lslgt	r7, r3
 80063da:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80063de:	fa24 f303 	lsrgt.w	r3, r4, r3
 80063e2:	bfd6      	itet	le
 80063e4:	f1c3 0320 	rsble	r3, r3, #32
 80063e8:	ea47 0003 	orrgt.w	r0, r7, r3
 80063ec:	fa04 f003 	lslle.w	r0, r4, r3
 80063f0:	f7fa f888 	bl	8000504 <__aeabi_ui2d>
 80063f4:	2201      	movs	r2, #1
 80063f6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80063fa:	3e01      	subs	r6, #1
 80063fc:	9214      	str	r2, [sp, #80]	@ 0x50
 80063fe:	e777      	b.n	80062f0 <_dtoa_r+0x100>
 8006400:	2301      	movs	r3, #1
 8006402:	e7b8      	b.n	8006376 <_dtoa_r+0x186>
 8006404:	9012      	str	r0, [sp, #72]	@ 0x48
 8006406:	e7b7      	b.n	8006378 <_dtoa_r+0x188>
 8006408:	427b      	negs	r3, r7
 800640a:	930a      	str	r3, [sp, #40]	@ 0x28
 800640c:	2300      	movs	r3, #0
 800640e:	eba8 0807 	sub.w	r8, r8, r7
 8006412:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006414:	e7c4      	b.n	80063a0 <_dtoa_r+0x1b0>
 8006416:	2300      	movs	r3, #0
 8006418:	930b      	str	r3, [sp, #44]	@ 0x2c
 800641a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800641c:	2b00      	cmp	r3, #0
 800641e:	dc35      	bgt.n	800648c <_dtoa_r+0x29c>
 8006420:	2301      	movs	r3, #1
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	9307      	str	r3, [sp, #28]
 8006426:	461a      	mov	r2, r3
 8006428:	920e      	str	r2, [sp, #56]	@ 0x38
 800642a:	e00b      	b.n	8006444 <_dtoa_r+0x254>
 800642c:	2301      	movs	r3, #1
 800642e:	e7f3      	b.n	8006418 <_dtoa_r+0x228>
 8006430:	2300      	movs	r3, #0
 8006432:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006434:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006436:	18fb      	adds	r3, r7, r3
 8006438:	9300      	str	r3, [sp, #0]
 800643a:	3301      	adds	r3, #1
 800643c:	2b01      	cmp	r3, #1
 800643e:	9307      	str	r3, [sp, #28]
 8006440:	bfb8      	it	lt
 8006442:	2301      	movlt	r3, #1
 8006444:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006448:	2100      	movs	r1, #0
 800644a:	2204      	movs	r2, #4
 800644c:	f102 0514 	add.w	r5, r2, #20
 8006450:	429d      	cmp	r5, r3
 8006452:	d91f      	bls.n	8006494 <_dtoa_r+0x2a4>
 8006454:	6041      	str	r1, [r0, #4]
 8006456:	4658      	mov	r0, fp
 8006458:	f000 fd8e 	bl	8006f78 <_Balloc>
 800645c:	4682      	mov	sl, r0
 800645e:	2800      	cmp	r0, #0
 8006460:	d13c      	bne.n	80064dc <_dtoa_r+0x2ec>
 8006462:	4b1b      	ldr	r3, [pc, #108]	@ (80064d0 <_dtoa_r+0x2e0>)
 8006464:	4602      	mov	r2, r0
 8006466:	f240 11af 	movw	r1, #431	@ 0x1af
 800646a:	e6d8      	b.n	800621e <_dtoa_r+0x2e>
 800646c:	2301      	movs	r3, #1
 800646e:	e7e0      	b.n	8006432 <_dtoa_r+0x242>
 8006470:	2401      	movs	r4, #1
 8006472:	2300      	movs	r3, #0
 8006474:	9309      	str	r3, [sp, #36]	@ 0x24
 8006476:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006478:	f04f 33ff 	mov.w	r3, #4294967295
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	9307      	str	r3, [sp, #28]
 8006480:	2200      	movs	r2, #0
 8006482:	2312      	movs	r3, #18
 8006484:	e7d0      	b.n	8006428 <_dtoa_r+0x238>
 8006486:	2301      	movs	r3, #1
 8006488:	930b      	str	r3, [sp, #44]	@ 0x2c
 800648a:	e7f5      	b.n	8006478 <_dtoa_r+0x288>
 800648c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	9307      	str	r3, [sp, #28]
 8006492:	e7d7      	b.n	8006444 <_dtoa_r+0x254>
 8006494:	3101      	adds	r1, #1
 8006496:	0052      	lsls	r2, r2, #1
 8006498:	e7d8      	b.n	800644c <_dtoa_r+0x25c>
 800649a:	bf00      	nop
 800649c:	f3af 8000 	nop.w
 80064a0:	636f4361 	.word	0x636f4361
 80064a4:	3fd287a7 	.word	0x3fd287a7
 80064a8:	8b60c8b3 	.word	0x8b60c8b3
 80064ac:	3fc68a28 	.word	0x3fc68a28
 80064b0:	509f79fb 	.word	0x509f79fb
 80064b4:	3fd34413 	.word	0x3fd34413
 80064b8:	08007f70 	.word	0x08007f70
 80064bc:	08007f87 	.word	0x08007f87
 80064c0:	7ff00000 	.word	0x7ff00000
 80064c4:	08007f40 	.word	0x08007f40
 80064c8:	3ff80000 	.word	0x3ff80000
 80064cc:	08008080 	.word	0x08008080
 80064d0:	08007fdf 	.word	0x08007fdf
 80064d4:	08007f6c 	.word	0x08007f6c
 80064d8:	08007f3f 	.word	0x08007f3f
 80064dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80064e0:	6018      	str	r0, [r3, #0]
 80064e2:	9b07      	ldr	r3, [sp, #28]
 80064e4:	2b0e      	cmp	r3, #14
 80064e6:	f200 80a4 	bhi.w	8006632 <_dtoa_r+0x442>
 80064ea:	2c00      	cmp	r4, #0
 80064ec:	f000 80a1 	beq.w	8006632 <_dtoa_r+0x442>
 80064f0:	2f00      	cmp	r7, #0
 80064f2:	dd33      	ble.n	800655c <_dtoa_r+0x36c>
 80064f4:	4bad      	ldr	r3, [pc, #692]	@ (80067ac <_dtoa_r+0x5bc>)
 80064f6:	f007 020f 	and.w	r2, r7, #15
 80064fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064fe:	ed93 7b00 	vldr	d7, [r3]
 8006502:	05f8      	lsls	r0, r7, #23
 8006504:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006508:	ea4f 1427 	mov.w	r4, r7, asr #4
 800650c:	d516      	bpl.n	800653c <_dtoa_r+0x34c>
 800650e:	4ba8      	ldr	r3, [pc, #672]	@ (80067b0 <_dtoa_r+0x5c0>)
 8006510:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006514:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006518:	f7fa f998 	bl	800084c <__aeabi_ddiv>
 800651c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006520:	f004 040f 	and.w	r4, r4, #15
 8006524:	2603      	movs	r6, #3
 8006526:	4da2      	ldr	r5, [pc, #648]	@ (80067b0 <_dtoa_r+0x5c0>)
 8006528:	b954      	cbnz	r4, 8006540 <_dtoa_r+0x350>
 800652a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800652e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006532:	f7fa f98b 	bl	800084c <__aeabi_ddiv>
 8006536:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800653a:	e028      	b.n	800658e <_dtoa_r+0x39e>
 800653c:	2602      	movs	r6, #2
 800653e:	e7f2      	b.n	8006526 <_dtoa_r+0x336>
 8006540:	07e1      	lsls	r1, r4, #31
 8006542:	d508      	bpl.n	8006556 <_dtoa_r+0x366>
 8006544:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006548:	e9d5 2300 	ldrd	r2, r3, [r5]
 800654c:	f7fa f854 	bl	80005f8 <__aeabi_dmul>
 8006550:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006554:	3601      	adds	r6, #1
 8006556:	1064      	asrs	r4, r4, #1
 8006558:	3508      	adds	r5, #8
 800655a:	e7e5      	b.n	8006528 <_dtoa_r+0x338>
 800655c:	f000 80d2 	beq.w	8006704 <_dtoa_r+0x514>
 8006560:	427c      	negs	r4, r7
 8006562:	4b92      	ldr	r3, [pc, #584]	@ (80067ac <_dtoa_r+0x5bc>)
 8006564:	4d92      	ldr	r5, [pc, #584]	@ (80067b0 <_dtoa_r+0x5c0>)
 8006566:	f004 020f 	and.w	r2, r4, #15
 800656a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800656e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006572:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006576:	f7fa f83f 	bl	80005f8 <__aeabi_dmul>
 800657a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800657e:	1124      	asrs	r4, r4, #4
 8006580:	2300      	movs	r3, #0
 8006582:	2602      	movs	r6, #2
 8006584:	2c00      	cmp	r4, #0
 8006586:	f040 80b2 	bne.w	80066ee <_dtoa_r+0x4fe>
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1d3      	bne.n	8006536 <_dtoa_r+0x346>
 800658e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006590:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006594:	2b00      	cmp	r3, #0
 8006596:	f000 80b7 	beq.w	8006708 <_dtoa_r+0x518>
 800659a:	4b86      	ldr	r3, [pc, #536]	@ (80067b4 <_dtoa_r+0x5c4>)
 800659c:	2200      	movs	r2, #0
 800659e:	4620      	mov	r0, r4
 80065a0:	4629      	mov	r1, r5
 80065a2:	f7fa fa9b 	bl	8000adc <__aeabi_dcmplt>
 80065a6:	2800      	cmp	r0, #0
 80065a8:	f000 80ae 	beq.w	8006708 <_dtoa_r+0x518>
 80065ac:	9b07      	ldr	r3, [sp, #28]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f000 80aa 	beq.w	8006708 <_dtoa_r+0x518>
 80065b4:	9b00      	ldr	r3, [sp, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	dd37      	ble.n	800662a <_dtoa_r+0x43a>
 80065ba:	1e7b      	subs	r3, r7, #1
 80065bc:	9304      	str	r3, [sp, #16]
 80065be:	4620      	mov	r0, r4
 80065c0:	4b7d      	ldr	r3, [pc, #500]	@ (80067b8 <_dtoa_r+0x5c8>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	4629      	mov	r1, r5
 80065c6:	f7fa f817 	bl	80005f8 <__aeabi_dmul>
 80065ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065ce:	9c00      	ldr	r4, [sp, #0]
 80065d0:	3601      	adds	r6, #1
 80065d2:	4630      	mov	r0, r6
 80065d4:	f7f9 ffa6 	bl	8000524 <__aeabi_i2d>
 80065d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065dc:	f7fa f80c 	bl	80005f8 <__aeabi_dmul>
 80065e0:	4b76      	ldr	r3, [pc, #472]	@ (80067bc <_dtoa_r+0x5cc>)
 80065e2:	2200      	movs	r2, #0
 80065e4:	f7f9 fe52 	bl	800028c <__adddf3>
 80065e8:	4605      	mov	r5, r0
 80065ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80065ee:	2c00      	cmp	r4, #0
 80065f0:	f040 808d 	bne.w	800670e <_dtoa_r+0x51e>
 80065f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065f8:	4b71      	ldr	r3, [pc, #452]	@ (80067c0 <_dtoa_r+0x5d0>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	f7f9 fe44 	bl	8000288 <__aeabi_dsub>
 8006600:	4602      	mov	r2, r0
 8006602:	460b      	mov	r3, r1
 8006604:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006608:	462a      	mov	r2, r5
 800660a:	4633      	mov	r3, r6
 800660c:	f7fa fa84 	bl	8000b18 <__aeabi_dcmpgt>
 8006610:	2800      	cmp	r0, #0
 8006612:	f040 828b 	bne.w	8006b2c <_dtoa_r+0x93c>
 8006616:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800661a:	462a      	mov	r2, r5
 800661c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006620:	f7fa fa5c 	bl	8000adc <__aeabi_dcmplt>
 8006624:	2800      	cmp	r0, #0
 8006626:	f040 8128 	bne.w	800687a <_dtoa_r+0x68a>
 800662a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800662e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006632:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006634:	2b00      	cmp	r3, #0
 8006636:	f2c0 815a 	blt.w	80068ee <_dtoa_r+0x6fe>
 800663a:	2f0e      	cmp	r7, #14
 800663c:	f300 8157 	bgt.w	80068ee <_dtoa_r+0x6fe>
 8006640:	4b5a      	ldr	r3, [pc, #360]	@ (80067ac <_dtoa_r+0x5bc>)
 8006642:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006646:	ed93 7b00 	vldr	d7, [r3]
 800664a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800664c:	2b00      	cmp	r3, #0
 800664e:	ed8d 7b00 	vstr	d7, [sp]
 8006652:	da03      	bge.n	800665c <_dtoa_r+0x46c>
 8006654:	9b07      	ldr	r3, [sp, #28]
 8006656:	2b00      	cmp	r3, #0
 8006658:	f340 8101 	ble.w	800685e <_dtoa_r+0x66e>
 800665c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006660:	4656      	mov	r6, sl
 8006662:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006666:	4620      	mov	r0, r4
 8006668:	4629      	mov	r1, r5
 800666a:	f7fa f8ef 	bl	800084c <__aeabi_ddiv>
 800666e:	f7fa fa73 	bl	8000b58 <__aeabi_d2iz>
 8006672:	4680      	mov	r8, r0
 8006674:	f7f9 ff56 	bl	8000524 <__aeabi_i2d>
 8006678:	e9dd 2300 	ldrd	r2, r3, [sp]
 800667c:	f7f9 ffbc 	bl	80005f8 <__aeabi_dmul>
 8006680:	4602      	mov	r2, r0
 8006682:	460b      	mov	r3, r1
 8006684:	4620      	mov	r0, r4
 8006686:	4629      	mov	r1, r5
 8006688:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800668c:	f7f9 fdfc 	bl	8000288 <__aeabi_dsub>
 8006690:	f806 4b01 	strb.w	r4, [r6], #1
 8006694:	9d07      	ldr	r5, [sp, #28]
 8006696:	eba6 040a 	sub.w	r4, r6, sl
 800669a:	42a5      	cmp	r5, r4
 800669c:	4602      	mov	r2, r0
 800669e:	460b      	mov	r3, r1
 80066a0:	f040 8117 	bne.w	80068d2 <_dtoa_r+0x6e2>
 80066a4:	f7f9 fdf2 	bl	800028c <__adddf3>
 80066a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80066ac:	4604      	mov	r4, r0
 80066ae:	460d      	mov	r5, r1
 80066b0:	f7fa fa32 	bl	8000b18 <__aeabi_dcmpgt>
 80066b4:	2800      	cmp	r0, #0
 80066b6:	f040 80f9 	bne.w	80068ac <_dtoa_r+0x6bc>
 80066ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80066be:	4620      	mov	r0, r4
 80066c0:	4629      	mov	r1, r5
 80066c2:	f7fa fa01 	bl	8000ac8 <__aeabi_dcmpeq>
 80066c6:	b118      	cbz	r0, 80066d0 <_dtoa_r+0x4e0>
 80066c8:	f018 0f01 	tst.w	r8, #1
 80066cc:	f040 80ee 	bne.w	80068ac <_dtoa_r+0x6bc>
 80066d0:	4649      	mov	r1, r9
 80066d2:	4658      	mov	r0, fp
 80066d4:	f000 fc90 	bl	8006ff8 <_Bfree>
 80066d8:	2300      	movs	r3, #0
 80066da:	7033      	strb	r3, [r6, #0]
 80066dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80066de:	3701      	adds	r7, #1
 80066e0:	601f      	str	r7, [r3, #0]
 80066e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f000 831d 	beq.w	8006d24 <_dtoa_r+0xb34>
 80066ea:	601e      	str	r6, [r3, #0]
 80066ec:	e31a      	b.n	8006d24 <_dtoa_r+0xb34>
 80066ee:	07e2      	lsls	r2, r4, #31
 80066f0:	d505      	bpl.n	80066fe <_dtoa_r+0x50e>
 80066f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80066f6:	f7f9 ff7f 	bl	80005f8 <__aeabi_dmul>
 80066fa:	3601      	adds	r6, #1
 80066fc:	2301      	movs	r3, #1
 80066fe:	1064      	asrs	r4, r4, #1
 8006700:	3508      	adds	r5, #8
 8006702:	e73f      	b.n	8006584 <_dtoa_r+0x394>
 8006704:	2602      	movs	r6, #2
 8006706:	e742      	b.n	800658e <_dtoa_r+0x39e>
 8006708:	9c07      	ldr	r4, [sp, #28]
 800670a:	9704      	str	r7, [sp, #16]
 800670c:	e761      	b.n	80065d2 <_dtoa_r+0x3e2>
 800670e:	4b27      	ldr	r3, [pc, #156]	@ (80067ac <_dtoa_r+0x5bc>)
 8006710:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006712:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006716:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800671a:	4454      	add	r4, sl
 800671c:	2900      	cmp	r1, #0
 800671e:	d053      	beq.n	80067c8 <_dtoa_r+0x5d8>
 8006720:	4928      	ldr	r1, [pc, #160]	@ (80067c4 <_dtoa_r+0x5d4>)
 8006722:	2000      	movs	r0, #0
 8006724:	f7fa f892 	bl	800084c <__aeabi_ddiv>
 8006728:	4633      	mov	r3, r6
 800672a:	462a      	mov	r2, r5
 800672c:	f7f9 fdac 	bl	8000288 <__aeabi_dsub>
 8006730:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006734:	4656      	mov	r6, sl
 8006736:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800673a:	f7fa fa0d 	bl	8000b58 <__aeabi_d2iz>
 800673e:	4605      	mov	r5, r0
 8006740:	f7f9 fef0 	bl	8000524 <__aeabi_i2d>
 8006744:	4602      	mov	r2, r0
 8006746:	460b      	mov	r3, r1
 8006748:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800674c:	f7f9 fd9c 	bl	8000288 <__aeabi_dsub>
 8006750:	3530      	adds	r5, #48	@ 0x30
 8006752:	4602      	mov	r2, r0
 8006754:	460b      	mov	r3, r1
 8006756:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800675a:	f806 5b01 	strb.w	r5, [r6], #1
 800675e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006762:	f7fa f9bb 	bl	8000adc <__aeabi_dcmplt>
 8006766:	2800      	cmp	r0, #0
 8006768:	d171      	bne.n	800684e <_dtoa_r+0x65e>
 800676a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800676e:	4911      	ldr	r1, [pc, #68]	@ (80067b4 <_dtoa_r+0x5c4>)
 8006770:	2000      	movs	r0, #0
 8006772:	f7f9 fd89 	bl	8000288 <__aeabi_dsub>
 8006776:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800677a:	f7fa f9af 	bl	8000adc <__aeabi_dcmplt>
 800677e:	2800      	cmp	r0, #0
 8006780:	f040 8095 	bne.w	80068ae <_dtoa_r+0x6be>
 8006784:	42a6      	cmp	r6, r4
 8006786:	f43f af50 	beq.w	800662a <_dtoa_r+0x43a>
 800678a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800678e:	4b0a      	ldr	r3, [pc, #40]	@ (80067b8 <_dtoa_r+0x5c8>)
 8006790:	2200      	movs	r2, #0
 8006792:	f7f9 ff31 	bl	80005f8 <__aeabi_dmul>
 8006796:	4b08      	ldr	r3, [pc, #32]	@ (80067b8 <_dtoa_r+0x5c8>)
 8006798:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800679c:	2200      	movs	r2, #0
 800679e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067a2:	f7f9 ff29 	bl	80005f8 <__aeabi_dmul>
 80067a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067aa:	e7c4      	b.n	8006736 <_dtoa_r+0x546>
 80067ac:	08008080 	.word	0x08008080
 80067b0:	08008058 	.word	0x08008058
 80067b4:	3ff00000 	.word	0x3ff00000
 80067b8:	40240000 	.word	0x40240000
 80067bc:	401c0000 	.word	0x401c0000
 80067c0:	40140000 	.word	0x40140000
 80067c4:	3fe00000 	.word	0x3fe00000
 80067c8:	4631      	mov	r1, r6
 80067ca:	4628      	mov	r0, r5
 80067cc:	f7f9 ff14 	bl	80005f8 <__aeabi_dmul>
 80067d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80067d4:	9415      	str	r4, [sp, #84]	@ 0x54
 80067d6:	4656      	mov	r6, sl
 80067d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067dc:	f7fa f9bc 	bl	8000b58 <__aeabi_d2iz>
 80067e0:	4605      	mov	r5, r0
 80067e2:	f7f9 fe9f 	bl	8000524 <__aeabi_i2d>
 80067e6:	4602      	mov	r2, r0
 80067e8:	460b      	mov	r3, r1
 80067ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067ee:	f7f9 fd4b 	bl	8000288 <__aeabi_dsub>
 80067f2:	3530      	adds	r5, #48	@ 0x30
 80067f4:	f806 5b01 	strb.w	r5, [r6], #1
 80067f8:	4602      	mov	r2, r0
 80067fa:	460b      	mov	r3, r1
 80067fc:	42a6      	cmp	r6, r4
 80067fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006802:	f04f 0200 	mov.w	r2, #0
 8006806:	d124      	bne.n	8006852 <_dtoa_r+0x662>
 8006808:	4bac      	ldr	r3, [pc, #688]	@ (8006abc <_dtoa_r+0x8cc>)
 800680a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800680e:	f7f9 fd3d 	bl	800028c <__adddf3>
 8006812:	4602      	mov	r2, r0
 8006814:	460b      	mov	r3, r1
 8006816:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800681a:	f7fa f97d 	bl	8000b18 <__aeabi_dcmpgt>
 800681e:	2800      	cmp	r0, #0
 8006820:	d145      	bne.n	80068ae <_dtoa_r+0x6be>
 8006822:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006826:	49a5      	ldr	r1, [pc, #660]	@ (8006abc <_dtoa_r+0x8cc>)
 8006828:	2000      	movs	r0, #0
 800682a:	f7f9 fd2d 	bl	8000288 <__aeabi_dsub>
 800682e:	4602      	mov	r2, r0
 8006830:	460b      	mov	r3, r1
 8006832:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006836:	f7fa f951 	bl	8000adc <__aeabi_dcmplt>
 800683a:	2800      	cmp	r0, #0
 800683c:	f43f aef5 	beq.w	800662a <_dtoa_r+0x43a>
 8006840:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006842:	1e73      	subs	r3, r6, #1
 8006844:	9315      	str	r3, [sp, #84]	@ 0x54
 8006846:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800684a:	2b30      	cmp	r3, #48	@ 0x30
 800684c:	d0f8      	beq.n	8006840 <_dtoa_r+0x650>
 800684e:	9f04      	ldr	r7, [sp, #16]
 8006850:	e73e      	b.n	80066d0 <_dtoa_r+0x4e0>
 8006852:	4b9b      	ldr	r3, [pc, #620]	@ (8006ac0 <_dtoa_r+0x8d0>)
 8006854:	f7f9 fed0 	bl	80005f8 <__aeabi_dmul>
 8006858:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800685c:	e7bc      	b.n	80067d8 <_dtoa_r+0x5e8>
 800685e:	d10c      	bne.n	800687a <_dtoa_r+0x68a>
 8006860:	4b98      	ldr	r3, [pc, #608]	@ (8006ac4 <_dtoa_r+0x8d4>)
 8006862:	2200      	movs	r2, #0
 8006864:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006868:	f7f9 fec6 	bl	80005f8 <__aeabi_dmul>
 800686c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006870:	f7fa f948 	bl	8000b04 <__aeabi_dcmpge>
 8006874:	2800      	cmp	r0, #0
 8006876:	f000 8157 	beq.w	8006b28 <_dtoa_r+0x938>
 800687a:	2400      	movs	r4, #0
 800687c:	4625      	mov	r5, r4
 800687e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006880:	43db      	mvns	r3, r3
 8006882:	9304      	str	r3, [sp, #16]
 8006884:	4656      	mov	r6, sl
 8006886:	2700      	movs	r7, #0
 8006888:	4621      	mov	r1, r4
 800688a:	4658      	mov	r0, fp
 800688c:	f000 fbb4 	bl	8006ff8 <_Bfree>
 8006890:	2d00      	cmp	r5, #0
 8006892:	d0dc      	beq.n	800684e <_dtoa_r+0x65e>
 8006894:	b12f      	cbz	r7, 80068a2 <_dtoa_r+0x6b2>
 8006896:	42af      	cmp	r7, r5
 8006898:	d003      	beq.n	80068a2 <_dtoa_r+0x6b2>
 800689a:	4639      	mov	r1, r7
 800689c:	4658      	mov	r0, fp
 800689e:	f000 fbab 	bl	8006ff8 <_Bfree>
 80068a2:	4629      	mov	r1, r5
 80068a4:	4658      	mov	r0, fp
 80068a6:	f000 fba7 	bl	8006ff8 <_Bfree>
 80068aa:	e7d0      	b.n	800684e <_dtoa_r+0x65e>
 80068ac:	9704      	str	r7, [sp, #16]
 80068ae:	4633      	mov	r3, r6
 80068b0:	461e      	mov	r6, r3
 80068b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068b6:	2a39      	cmp	r2, #57	@ 0x39
 80068b8:	d107      	bne.n	80068ca <_dtoa_r+0x6da>
 80068ba:	459a      	cmp	sl, r3
 80068bc:	d1f8      	bne.n	80068b0 <_dtoa_r+0x6c0>
 80068be:	9a04      	ldr	r2, [sp, #16]
 80068c0:	3201      	adds	r2, #1
 80068c2:	9204      	str	r2, [sp, #16]
 80068c4:	2230      	movs	r2, #48	@ 0x30
 80068c6:	f88a 2000 	strb.w	r2, [sl]
 80068ca:	781a      	ldrb	r2, [r3, #0]
 80068cc:	3201      	adds	r2, #1
 80068ce:	701a      	strb	r2, [r3, #0]
 80068d0:	e7bd      	b.n	800684e <_dtoa_r+0x65e>
 80068d2:	4b7b      	ldr	r3, [pc, #492]	@ (8006ac0 <_dtoa_r+0x8d0>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	f7f9 fe8f 	bl	80005f8 <__aeabi_dmul>
 80068da:	2200      	movs	r2, #0
 80068dc:	2300      	movs	r3, #0
 80068de:	4604      	mov	r4, r0
 80068e0:	460d      	mov	r5, r1
 80068e2:	f7fa f8f1 	bl	8000ac8 <__aeabi_dcmpeq>
 80068e6:	2800      	cmp	r0, #0
 80068e8:	f43f aebb 	beq.w	8006662 <_dtoa_r+0x472>
 80068ec:	e6f0      	b.n	80066d0 <_dtoa_r+0x4e0>
 80068ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80068f0:	2a00      	cmp	r2, #0
 80068f2:	f000 80db 	beq.w	8006aac <_dtoa_r+0x8bc>
 80068f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068f8:	2a01      	cmp	r2, #1
 80068fa:	f300 80bf 	bgt.w	8006a7c <_dtoa_r+0x88c>
 80068fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006900:	2a00      	cmp	r2, #0
 8006902:	f000 80b7 	beq.w	8006a74 <_dtoa_r+0x884>
 8006906:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800690a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800690c:	4646      	mov	r6, r8
 800690e:	9a08      	ldr	r2, [sp, #32]
 8006910:	2101      	movs	r1, #1
 8006912:	441a      	add	r2, r3
 8006914:	4658      	mov	r0, fp
 8006916:	4498      	add	r8, r3
 8006918:	9208      	str	r2, [sp, #32]
 800691a:	f000 fc21 	bl	8007160 <__i2b>
 800691e:	4605      	mov	r5, r0
 8006920:	b15e      	cbz	r6, 800693a <_dtoa_r+0x74a>
 8006922:	9b08      	ldr	r3, [sp, #32]
 8006924:	2b00      	cmp	r3, #0
 8006926:	dd08      	ble.n	800693a <_dtoa_r+0x74a>
 8006928:	42b3      	cmp	r3, r6
 800692a:	9a08      	ldr	r2, [sp, #32]
 800692c:	bfa8      	it	ge
 800692e:	4633      	movge	r3, r6
 8006930:	eba8 0803 	sub.w	r8, r8, r3
 8006934:	1af6      	subs	r6, r6, r3
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	9308      	str	r3, [sp, #32]
 800693a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800693c:	b1f3      	cbz	r3, 800697c <_dtoa_r+0x78c>
 800693e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006940:	2b00      	cmp	r3, #0
 8006942:	f000 80b7 	beq.w	8006ab4 <_dtoa_r+0x8c4>
 8006946:	b18c      	cbz	r4, 800696c <_dtoa_r+0x77c>
 8006948:	4629      	mov	r1, r5
 800694a:	4622      	mov	r2, r4
 800694c:	4658      	mov	r0, fp
 800694e:	f000 fcc7 	bl	80072e0 <__pow5mult>
 8006952:	464a      	mov	r2, r9
 8006954:	4601      	mov	r1, r0
 8006956:	4605      	mov	r5, r0
 8006958:	4658      	mov	r0, fp
 800695a:	f000 fc17 	bl	800718c <__multiply>
 800695e:	4649      	mov	r1, r9
 8006960:	9004      	str	r0, [sp, #16]
 8006962:	4658      	mov	r0, fp
 8006964:	f000 fb48 	bl	8006ff8 <_Bfree>
 8006968:	9b04      	ldr	r3, [sp, #16]
 800696a:	4699      	mov	r9, r3
 800696c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800696e:	1b1a      	subs	r2, r3, r4
 8006970:	d004      	beq.n	800697c <_dtoa_r+0x78c>
 8006972:	4649      	mov	r1, r9
 8006974:	4658      	mov	r0, fp
 8006976:	f000 fcb3 	bl	80072e0 <__pow5mult>
 800697a:	4681      	mov	r9, r0
 800697c:	2101      	movs	r1, #1
 800697e:	4658      	mov	r0, fp
 8006980:	f000 fbee 	bl	8007160 <__i2b>
 8006984:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006986:	4604      	mov	r4, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	f000 81cf 	beq.w	8006d2c <_dtoa_r+0xb3c>
 800698e:	461a      	mov	r2, r3
 8006990:	4601      	mov	r1, r0
 8006992:	4658      	mov	r0, fp
 8006994:	f000 fca4 	bl	80072e0 <__pow5mult>
 8006998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800699a:	2b01      	cmp	r3, #1
 800699c:	4604      	mov	r4, r0
 800699e:	f300 8095 	bgt.w	8006acc <_dtoa_r+0x8dc>
 80069a2:	9b02      	ldr	r3, [sp, #8]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f040 8087 	bne.w	8006ab8 <_dtoa_r+0x8c8>
 80069aa:	9b03      	ldr	r3, [sp, #12]
 80069ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f040 8089 	bne.w	8006ac8 <_dtoa_r+0x8d8>
 80069b6:	9b03      	ldr	r3, [sp, #12]
 80069b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80069bc:	0d1b      	lsrs	r3, r3, #20
 80069be:	051b      	lsls	r3, r3, #20
 80069c0:	b12b      	cbz	r3, 80069ce <_dtoa_r+0x7de>
 80069c2:	9b08      	ldr	r3, [sp, #32]
 80069c4:	3301      	adds	r3, #1
 80069c6:	9308      	str	r3, [sp, #32]
 80069c8:	f108 0801 	add.w	r8, r8, #1
 80069cc:	2301      	movs	r3, #1
 80069ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80069d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f000 81b0 	beq.w	8006d38 <_dtoa_r+0xb48>
 80069d8:	6923      	ldr	r3, [r4, #16]
 80069da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80069de:	6918      	ldr	r0, [r3, #16]
 80069e0:	f000 fb72 	bl	80070c8 <__hi0bits>
 80069e4:	f1c0 0020 	rsb	r0, r0, #32
 80069e8:	9b08      	ldr	r3, [sp, #32]
 80069ea:	4418      	add	r0, r3
 80069ec:	f010 001f 	ands.w	r0, r0, #31
 80069f0:	d077      	beq.n	8006ae2 <_dtoa_r+0x8f2>
 80069f2:	f1c0 0320 	rsb	r3, r0, #32
 80069f6:	2b04      	cmp	r3, #4
 80069f8:	dd6b      	ble.n	8006ad2 <_dtoa_r+0x8e2>
 80069fa:	9b08      	ldr	r3, [sp, #32]
 80069fc:	f1c0 001c 	rsb	r0, r0, #28
 8006a00:	4403      	add	r3, r0
 8006a02:	4480      	add	r8, r0
 8006a04:	4406      	add	r6, r0
 8006a06:	9308      	str	r3, [sp, #32]
 8006a08:	f1b8 0f00 	cmp.w	r8, #0
 8006a0c:	dd05      	ble.n	8006a1a <_dtoa_r+0x82a>
 8006a0e:	4649      	mov	r1, r9
 8006a10:	4642      	mov	r2, r8
 8006a12:	4658      	mov	r0, fp
 8006a14:	f000 fcbe 	bl	8007394 <__lshift>
 8006a18:	4681      	mov	r9, r0
 8006a1a:	9b08      	ldr	r3, [sp, #32]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	dd05      	ble.n	8006a2c <_dtoa_r+0x83c>
 8006a20:	4621      	mov	r1, r4
 8006a22:	461a      	mov	r2, r3
 8006a24:	4658      	mov	r0, fp
 8006a26:	f000 fcb5 	bl	8007394 <__lshift>
 8006a2a:	4604      	mov	r4, r0
 8006a2c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d059      	beq.n	8006ae6 <_dtoa_r+0x8f6>
 8006a32:	4621      	mov	r1, r4
 8006a34:	4648      	mov	r0, r9
 8006a36:	f000 fd19 	bl	800746c <__mcmp>
 8006a3a:	2800      	cmp	r0, #0
 8006a3c:	da53      	bge.n	8006ae6 <_dtoa_r+0x8f6>
 8006a3e:	1e7b      	subs	r3, r7, #1
 8006a40:	9304      	str	r3, [sp, #16]
 8006a42:	4649      	mov	r1, r9
 8006a44:	2300      	movs	r3, #0
 8006a46:	220a      	movs	r2, #10
 8006a48:	4658      	mov	r0, fp
 8006a4a:	f000 faf7 	bl	800703c <__multadd>
 8006a4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a50:	4681      	mov	r9, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 8172 	beq.w	8006d3c <_dtoa_r+0xb4c>
 8006a58:	2300      	movs	r3, #0
 8006a5a:	4629      	mov	r1, r5
 8006a5c:	220a      	movs	r2, #10
 8006a5e:	4658      	mov	r0, fp
 8006a60:	f000 faec 	bl	800703c <__multadd>
 8006a64:	9b00      	ldr	r3, [sp, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	4605      	mov	r5, r0
 8006a6a:	dc67      	bgt.n	8006b3c <_dtoa_r+0x94c>
 8006a6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	dc41      	bgt.n	8006af6 <_dtoa_r+0x906>
 8006a72:	e063      	b.n	8006b3c <_dtoa_r+0x94c>
 8006a74:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006a76:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006a7a:	e746      	b.n	800690a <_dtoa_r+0x71a>
 8006a7c:	9b07      	ldr	r3, [sp, #28]
 8006a7e:	1e5c      	subs	r4, r3, #1
 8006a80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a82:	42a3      	cmp	r3, r4
 8006a84:	bfbf      	itttt	lt
 8006a86:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006a88:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006a8a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006a8c:	1ae3      	sublt	r3, r4, r3
 8006a8e:	bfb4      	ite	lt
 8006a90:	18d2      	addlt	r2, r2, r3
 8006a92:	1b1c      	subge	r4, r3, r4
 8006a94:	9b07      	ldr	r3, [sp, #28]
 8006a96:	bfbc      	itt	lt
 8006a98:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006a9a:	2400      	movlt	r4, #0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	bfb5      	itete	lt
 8006aa0:	eba8 0603 	sublt.w	r6, r8, r3
 8006aa4:	9b07      	ldrge	r3, [sp, #28]
 8006aa6:	2300      	movlt	r3, #0
 8006aa8:	4646      	movge	r6, r8
 8006aaa:	e730      	b.n	800690e <_dtoa_r+0x71e>
 8006aac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006aae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006ab0:	4646      	mov	r6, r8
 8006ab2:	e735      	b.n	8006920 <_dtoa_r+0x730>
 8006ab4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ab6:	e75c      	b.n	8006972 <_dtoa_r+0x782>
 8006ab8:	2300      	movs	r3, #0
 8006aba:	e788      	b.n	80069ce <_dtoa_r+0x7de>
 8006abc:	3fe00000 	.word	0x3fe00000
 8006ac0:	40240000 	.word	0x40240000
 8006ac4:	40140000 	.word	0x40140000
 8006ac8:	9b02      	ldr	r3, [sp, #8]
 8006aca:	e780      	b.n	80069ce <_dtoa_r+0x7de>
 8006acc:	2300      	movs	r3, #0
 8006ace:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ad0:	e782      	b.n	80069d8 <_dtoa_r+0x7e8>
 8006ad2:	d099      	beq.n	8006a08 <_dtoa_r+0x818>
 8006ad4:	9a08      	ldr	r2, [sp, #32]
 8006ad6:	331c      	adds	r3, #28
 8006ad8:	441a      	add	r2, r3
 8006ada:	4498      	add	r8, r3
 8006adc:	441e      	add	r6, r3
 8006ade:	9208      	str	r2, [sp, #32]
 8006ae0:	e792      	b.n	8006a08 <_dtoa_r+0x818>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	e7f6      	b.n	8006ad4 <_dtoa_r+0x8e4>
 8006ae6:	9b07      	ldr	r3, [sp, #28]
 8006ae8:	9704      	str	r7, [sp, #16]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	dc20      	bgt.n	8006b30 <_dtoa_r+0x940>
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	dd1e      	ble.n	8006b34 <_dtoa_r+0x944>
 8006af6:	9b00      	ldr	r3, [sp, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f47f aec0 	bne.w	800687e <_dtoa_r+0x68e>
 8006afe:	4621      	mov	r1, r4
 8006b00:	2205      	movs	r2, #5
 8006b02:	4658      	mov	r0, fp
 8006b04:	f000 fa9a 	bl	800703c <__multadd>
 8006b08:	4601      	mov	r1, r0
 8006b0a:	4604      	mov	r4, r0
 8006b0c:	4648      	mov	r0, r9
 8006b0e:	f000 fcad 	bl	800746c <__mcmp>
 8006b12:	2800      	cmp	r0, #0
 8006b14:	f77f aeb3 	ble.w	800687e <_dtoa_r+0x68e>
 8006b18:	4656      	mov	r6, sl
 8006b1a:	2331      	movs	r3, #49	@ 0x31
 8006b1c:	f806 3b01 	strb.w	r3, [r6], #1
 8006b20:	9b04      	ldr	r3, [sp, #16]
 8006b22:	3301      	adds	r3, #1
 8006b24:	9304      	str	r3, [sp, #16]
 8006b26:	e6ae      	b.n	8006886 <_dtoa_r+0x696>
 8006b28:	9c07      	ldr	r4, [sp, #28]
 8006b2a:	9704      	str	r7, [sp, #16]
 8006b2c:	4625      	mov	r5, r4
 8006b2e:	e7f3      	b.n	8006b18 <_dtoa_r+0x928>
 8006b30:	9b07      	ldr	r3, [sp, #28]
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f000 8104 	beq.w	8006d44 <_dtoa_r+0xb54>
 8006b3c:	2e00      	cmp	r6, #0
 8006b3e:	dd05      	ble.n	8006b4c <_dtoa_r+0x95c>
 8006b40:	4629      	mov	r1, r5
 8006b42:	4632      	mov	r2, r6
 8006b44:	4658      	mov	r0, fp
 8006b46:	f000 fc25 	bl	8007394 <__lshift>
 8006b4a:	4605      	mov	r5, r0
 8006b4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d05a      	beq.n	8006c08 <_dtoa_r+0xa18>
 8006b52:	6869      	ldr	r1, [r5, #4]
 8006b54:	4658      	mov	r0, fp
 8006b56:	f000 fa0f 	bl	8006f78 <_Balloc>
 8006b5a:	4606      	mov	r6, r0
 8006b5c:	b928      	cbnz	r0, 8006b6a <_dtoa_r+0x97a>
 8006b5e:	4b84      	ldr	r3, [pc, #528]	@ (8006d70 <_dtoa_r+0xb80>)
 8006b60:	4602      	mov	r2, r0
 8006b62:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006b66:	f7ff bb5a 	b.w	800621e <_dtoa_r+0x2e>
 8006b6a:	692a      	ldr	r2, [r5, #16]
 8006b6c:	3202      	adds	r2, #2
 8006b6e:	0092      	lsls	r2, r2, #2
 8006b70:	f105 010c 	add.w	r1, r5, #12
 8006b74:	300c      	adds	r0, #12
 8006b76:	f001 f803 	bl	8007b80 <memcpy>
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	4631      	mov	r1, r6
 8006b7e:	4658      	mov	r0, fp
 8006b80:	f000 fc08 	bl	8007394 <__lshift>
 8006b84:	f10a 0301 	add.w	r3, sl, #1
 8006b88:	9307      	str	r3, [sp, #28]
 8006b8a:	9b00      	ldr	r3, [sp, #0]
 8006b8c:	4453      	add	r3, sl
 8006b8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b90:	9b02      	ldr	r3, [sp, #8]
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	462f      	mov	r7, r5
 8006b98:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b9a:	4605      	mov	r5, r0
 8006b9c:	9b07      	ldr	r3, [sp, #28]
 8006b9e:	4621      	mov	r1, r4
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	4648      	mov	r0, r9
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	f7ff fa98 	bl	80060da <quorem>
 8006baa:	4639      	mov	r1, r7
 8006bac:	9002      	str	r0, [sp, #8]
 8006bae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006bb2:	4648      	mov	r0, r9
 8006bb4:	f000 fc5a 	bl	800746c <__mcmp>
 8006bb8:	462a      	mov	r2, r5
 8006bba:	9008      	str	r0, [sp, #32]
 8006bbc:	4621      	mov	r1, r4
 8006bbe:	4658      	mov	r0, fp
 8006bc0:	f000 fc70 	bl	80074a4 <__mdiff>
 8006bc4:	68c2      	ldr	r2, [r0, #12]
 8006bc6:	4606      	mov	r6, r0
 8006bc8:	bb02      	cbnz	r2, 8006c0c <_dtoa_r+0xa1c>
 8006bca:	4601      	mov	r1, r0
 8006bcc:	4648      	mov	r0, r9
 8006bce:	f000 fc4d 	bl	800746c <__mcmp>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	4631      	mov	r1, r6
 8006bd6:	4658      	mov	r0, fp
 8006bd8:	920e      	str	r2, [sp, #56]	@ 0x38
 8006bda:	f000 fa0d 	bl	8006ff8 <_Bfree>
 8006bde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006be0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006be2:	9e07      	ldr	r6, [sp, #28]
 8006be4:	ea43 0102 	orr.w	r1, r3, r2
 8006be8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bea:	4319      	orrs	r1, r3
 8006bec:	d110      	bne.n	8006c10 <_dtoa_r+0xa20>
 8006bee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006bf2:	d029      	beq.n	8006c48 <_dtoa_r+0xa58>
 8006bf4:	9b08      	ldr	r3, [sp, #32]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	dd02      	ble.n	8006c00 <_dtoa_r+0xa10>
 8006bfa:	9b02      	ldr	r3, [sp, #8]
 8006bfc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006c00:	9b00      	ldr	r3, [sp, #0]
 8006c02:	f883 8000 	strb.w	r8, [r3]
 8006c06:	e63f      	b.n	8006888 <_dtoa_r+0x698>
 8006c08:	4628      	mov	r0, r5
 8006c0a:	e7bb      	b.n	8006b84 <_dtoa_r+0x994>
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	e7e1      	b.n	8006bd4 <_dtoa_r+0x9e4>
 8006c10:	9b08      	ldr	r3, [sp, #32]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	db04      	blt.n	8006c20 <_dtoa_r+0xa30>
 8006c16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006c18:	430b      	orrs	r3, r1
 8006c1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006c1c:	430b      	orrs	r3, r1
 8006c1e:	d120      	bne.n	8006c62 <_dtoa_r+0xa72>
 8006c20:	2a00      	cmp	r2, #0
 8006c22:	dded      	ble.n	8006c00 <_dtoa_r+0xa10>
 8006c24:	4649      	mov	r1, r9
 8006c26:	2201      	movs	r2, #1
 8006c28:	4658      	mov	r0, fp
 8006c2a:	f000 fbb3 	bl	8007394 <__lshift>
 8006c2e:	4621      	mov	r1, r4
 8006c30:	4681      	mov	r9, r0
 8006c32:	f000 fc1b 	bl	800746c <__mcmp>
 8006c36:	2800      	cmp	r0, #0
 8006c38:	dc03      	bgt.n	8006c42 <_dtoa_r+0xa52>
 8006c3a:	d1e1      	bne.n	8006c00 <_dtoa_r+0xa10>
 8006c3c:	f018 0f01 	tst.w	r8, #1
 8006c40:	d0de      	beq.n	8006c00 <_dtoa_r+0xa10>
 8006c42:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006c46:	d1d8      	bne.n	8006bfa <_dtoa_r+0xa0a>
 8006c48:	9a00      	ldr	r2, [sp, #0]
 8006c4a:	2339      	movs	r3, #57	@ 0x39
 8006c4c:	7013      	strb	r3, [r2, #0]
 8006c4e:	4633      	mov	r3, r6
 8006c50:	461e      	mov	r6, r3
 8006c52:	3b01      	subs	r3, #1
 8006c54:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006c58:	2a39      	cmp	r2, #57	@ 0x39
 8006c5a:	d052      	beq.n	8006d02 <_dtoa_r+0xb12>
 8006c5c:	3201      	adds	r2, #1
 8006c5e:	701a      	strb	r2, [r3, #0]
 8006c60:	e612      	b.n	8006888 <_dtoa_r+0x698>
 8006c62:	2a00      	cmp	r2, #0
 8006c64:	dd07      	ble.n	8006c76 <_dtoa_r+0xa86>
 8006c66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006c6a:	d0ed      	beq.n	8006c48 <_dtoa_r+0xa58>
 8006c6c:	9a00      	ldr	r2, [sp, #0]
 8006c6e:	f108 0301 	add.w	r3, r8, #1
 8006c72:	7013      	strb	r3, [r2, #0]
 8006c74:	e608      	b.n	8006888 <_dtoa_r+0x698>
 8006c76:	9b07      	ldr	r3, [sp, #28]
 8006c78:	9a07      	ldr	r2, [sp, #28]
 8006c7a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006c7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d028      	beq.n	8006cd6 <_dtoa_r+0xae6>
 8006c84:	4649      	mov	r1, r9
 8006c86:	2300      	movs	r3, #0
 8006c88:	220a      	movs	r2, #10
 8006c8a:	4658      	mov	r0, fp
 8006c8c:	f000 f9d6 	bl	800703c <__multadd>
 8006c90:	42af      	cmp	r7, r5
 8006c92:	4681      	mov	r9, r0
 8006c94:	f04f 0300 	mov.w	r3, #0
 8006c98:	f04f 020a 	mov.w	r2, #10
 8006c9c:	4639      	mov	r1, r7
 8006c9e:	4658      	mov	r0, fp
 8006ca0:	d107      	bne.n	8006cb2 <_dtoa_r+0xac2>
 8006ca2:	f000 f9cb 	bl	800703c <__multadd>
 8006ca6:	4607      	mov	r7, r0
 8006ca8:	4605      	mov	r5, r0
 8006caa:	9b07      	ldr	r3, [sp, #28]
 8006cac:	3301      	adds	r3, #1
 8006cae:	9307      	str	r3, [sp, #28]
 8006cb0:	e774      	b.n	8006b9c <_dtoa_r+0x9ac>
 8006cb2:	f000 f9c3 	bl	800703c <__multadd>
 8006cb6:	4629      	mov	r1, r5
 8006cb8:	4607      	mov	r7, r0
 8006cba:	2300      	movs	r3, #0
 8006cbc:	220a      	movs	r2, #10
 8006cbe:	4658      	mov	r0, fp
 8006cc0:	f000 f9bc 	bl	800703c <__multadd>
 8006cc4:	4605      	mov	r5, r0
 8006cc6:	e7f0      	b.n	8006caa <_dtoa_r+0xaba>
 8006cc8:	9b00      	ldr	r3, [sp, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	bfcc      	ite	gt
 8006cce:	461e      	movgt	r6, r3
 8006cd0:	2601      	movle	r6, #1
 8006cd2:	4456      	add	r6, sl
 8006cd4:	2700      	movs	r7, #0
 8006cd6:	4649      	mov	r1, r9
 8006cd8:	2201      	movs	r2, #1
 8006cda:	4658      	mov	r0, fp
 8006cdc:	f000 fb5a 	bl	8007394 <__lshift>
 8006ce0:	4621      	mov	r1, r4
 8006ce2:	4681      	mov	r9, r0
 8006ce4:	f000 fbc2 	bl	800746c <__mcmp>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	dcb0      	bgt.n	8006c4e <_dtoa_r+0xa5e>
 8006cec:	d102      	bne.n	8006cf4 <_dtoa_r+0xb04>
 8006cee:	f018 0f01 	tst.w	r8, #1
 8006cf2:	d1ac      	bne.n	8006c4e <_dtoa_r+0xa5e>
 8006cf4:	4633      	mov	r3, r6
 8006cf6:	461e      	mov	r6, r3
 8006cf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cfc:	2a30      	cmp	r2, #48	@ 0x30
 8006cfe:	d0fa      	beq.n	8006cf6 <_dtoa_r+0xb06>
 8006d00:	e5c2      	b.n	8006888 <_dtoa_r+0x698>
 8006d02:	459a      	cmp	sl, r3
 8006d04:	d1a4      	bne.n	8006c50 <_dtoa_r+0xa60>
 8006d06:	9b04      	ldr	r3, [sp, #16]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	9304      	str	r3, [sp, #16]
 8006d0c:	2331      	movs	r3, #49	@ 0x31
 8006d0e:	f88a 3000 	strb.w	r3, [sl]
 8006d12:	e5b9      	b.n	8006888 <_dtoa_r+0x698>
 8006d14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006d16:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006d74 <_dtoa_r+0xb84>
 8006d1a:	b11b      	cbz	r3, 8006d24 <_dtoa_r+0xb34>
 8006d1c:	f10a 0308 	add.w	r3, sl, #8
 8006d20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006d22:	6013      	str	r3, [r2, #0]
 8006d24:	4650      	mov	r0, sl
 8006d26:	b019      	add	sp, #100	@ 0x64
 8006d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	f77f ae37 	ble.w	80069a2 <_dtoa_r+0x7b2>
 8006d34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d36:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d38:	2001      	movs	r0, #1
 8006d3a:	e655      	b.n	80069e8 <_dtoa_r+0x7f8>
 8006d3c:	9b00      	ldr	r3, [sp, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	f77f aed6 	ble.w	8006af0 <_dtoa_r+0x900>
 8006d44:	4656      	mov	r6, sl
 8006d46:	4621      	mov	r1, r4
 8006d48:	4648      	mov	r0, r9
 8006d4a:	f7ff f9c6 	bl	80060da <quorem>
 8006d4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006d52:	f806 8b01 	strb.w	r8, [r6], #1
 8006d56:	9b00      	ldr	r3, [sp, #0]
 8006d58:	eba6 020a 	sub.w	r2, r6, sl
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	ddb3      	ble.n	8006cc8 <_dtoa_r+0xad8>
 8006d60:	4649      	mov	r1, r9
 8006d62:	2300      	movs	r3, #0
 8006d64:	220a      	movs	r2, #10
 8006d66:	4658      	mov	r0, fp
 8006d68:	f000 f968 	bl	800703c <__multadd>
 8006d6c:	4681      	mov	r9, r0
 8006d6e:	e7ea      	b.n	8006d46 <_dtoa_r+0xb56>
 8006d70:	08007fdf 	.word	0x08007fdf
 8006d74:	08007f63 	.word	0x08007f63

08006d78 <_free_r>:
 8006d78:	b538      	push	{r3, r4, r5, lr}
 8006d7a:	4605      	mov	r5, r0
 8006d7c:	2900      	cmp	r1, #0
 8006d7e:	d041      	beq.n	8006e04 <_free_r+0x8c>
 8006d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d84:	1f0c      	subs	r4, r1, #4
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	bfb8      	it	lt
 8006d8a:	18e4      	addlt	r4, r4, r3
 8006d8c:	f000 f8e8 	bl	8006f60 <__malloc_lock>
 8006d90:	4a1d      	ldr	r2, [pc, #116]	@ (8006e08 <_free_r+0x90>)
 8006d92:	6813      	ldr	r3, [r2, #0]
 8006d94:	b933      	cbnz	r3, 8006da4 <_free_r+0x2c>
 8006d96:	6063      	str	r3, [r4, #4]
 8006d98:	6014      	str	r4, [r2, #0]
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006da0:	f000 b8e4 	b.w	8006f6c <__malloc_unlock>
 8006da4:	42a3      	cmp	r3, r4
 8006da6:	d908      	bls.n	8006dba <_free_r+0x42>
 8006da8:	6820      	ldr	r0, [r4, #0]
 8006daa:	1821      	adds	r1, r4, r0
 8006dac:	428b      	cmp	r3, r1
 8006dae:	bf01      	itttt	eq
 8006db0:	6819      	ldreq	r1, [r3, #0]
 8006db2:	685b      	ldreq	r3, [r3, #4]
 8006db4:	1809      	addeq	r1, r1, r0
 8006db6:	6021      	streq	r1, [r4, #0]
 8006db8:	e7ed      	b.n	8006d96 <_free_r+0x1e>
 8006dba:	461a      	mov	r2, r3
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	b10b      	cbz	r3, 8006dc4 <_free_r+0x4c>
 8006dc0:	42a3      	cmp	r3, r4
 8006dc2:	d9fa      	bls.n	8006dba <_free_r+0x42>
 8006dc4:	6811      	ldr	r1, [r2, #0]
 8006dc6:	1850      	adds	r0, r2, r1
 8006dc8:	42a0      	cmp	r0, r4
 8006dca:	d10b      	bne.n	8006de4 <_free_r+0x6c>
 8006dcc:	6820      	ldr	r0, [r4, #0]
 8006dce:	4401      	add	r1, r0
 8006dd0:	1850      	adds	r0, r2, r1
 8006dd2:	4283      	cmp	r3, r0
 8006dd4:	6011      	str	r1, [r2, #0]
 8006dd6:	d1e0      	bne.n	8006d9a <_free_r+0x22>
 8006dd8:	6818      	ldr	r0, [r3, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	6053      	str	r3, [r2, #4]
 8006dde:	4408      	add	r0, r1
 8006de0:	6010      	str	r0, [r2, #0]
 8006de2:	e7da      	b.n	8006d9a <_free_r+0x22>
 8006de4:	d902      	bls.n	8006dec <_free_r+0x74>
 8006de6:	230c      	movs	r3, #12
 8006de8:	602b      	str	r3, [r5, #0]
 8006dea:	e7d6      	b.n	8006d9a <_free_r+0x22>
 8006dec:	6820      	ldr	r0, [r4, #0]
 8006dee:	1821      	adds	r1, r4, r0
 8006df0:	428b      	cmp	r3, r1
 8006df2:	bf04      	itt	eq
 8006df4:	6819      	ldreq	r1, [r3, #0]
 8006df6:	685b      	ldreq	r3, [r3, #4]
 8006df8:	6063      	str	r3, [r4, #4]
 8006dfa:	bf04      	itt	eq
 8006dfc:	1809      	addeq	r1, r1, r0
 8006dfe:	6021      	streq	r1, [r4, #0]
 8006e00:	6054      	str	r4, [r2, #4]
 8006e02:	e7ca      	b.n	8006d9a <_free_r+0x22>
 8006e04:	bd38      	pop	{r3, r4, r5, pc}
 8006e06:	bf00      	nop
 8006e08:	2000042c 	.word	0x2000042c

08006e0c <malloc>:
 8006e0c:	4b02      	ldr	r3, [pc, #8]	@ (8006e18 <malloc+0xc>)
 8006e0e:	4601      	mov	r1, r0
 8006e10:	6818      	ldr	r0, [r3, #0]
 8006e12:	f000 b825 	b.w	8006e60 <_malloc_r>
 8006e16:	bf00      	nop
 8006e18:	20000018 	.word	0x20000018

08006e1c <sbrk_aligned>:
 8006e1c:	b570      	push	{r4, r5, r6, lr}
 8006e1e:	4e0f      	ldr	r6, [pc, #60]	@ (8006e5c <sbrk_aligned+0x40>)
 8006e20:	460c      	mov	r4, r1
 8006e22:	6831      	ldr	r1, [r6, #0]
 8006e24:	4605      	mov	r5, r0
 8006e26:	b911      	cbnz	r1, 8006e2e <sbrk_aligned+0x12>
 8006e28:	f000 fe9a 	bl	8007b60 <_sbrk_r>
 8006e2c:	6030      	str	r0, [r6, #0]
 8006e2e:	4621      	mov	r1, r4
 8006e30:	4628      	mov	r0, r5
 8006e32:	f000 fe95 	bl	8007b60 <_sbrk_r>
 8006e36:	1c43      	adds	r3, r0, #1
 8006e38:	d103      	bne.n	8006e42 <sbrk_aligned+0x26>
 8006e3a:	f04f 34ff 	mov.w	r4, #4294967295
 8006e3e:	4620      	mov	r0, r4
 8006e40:	bd70      	pop	{r4, r5, r6, pc}
 8006e42:	1cc4      	adds	r4, r0, #3
 8006e44:	f024 0403 	bic.w	r4, r4, #3
 8006e48:	42a0      	cmp	r0, r4
 8006e4a:	d0f8      	beq.n	8006e3e <sbrk_aligned+0x22>
 8006e4c:	1a21      	subs	r1, r4, r0
 8006e4e:	4628      	mov	r0, r5
 8006e50:	f000 fe86 	bl	8007b60 <_sbrk_r>
 8006e54:	3001      	adds	r0, #1
 8006e56:	d1f2      	bne.n	8006e3e <sbrk_aligned+0x22>
 8006e58:	e7ef      	b.n	8006e3a <sbrk_aligned+0x1e>
 8006e5a:	bf00      	nop
 8006e5c:	20000428 	.word	0x20000428

08006e60 <_malloc_r>:
 8006e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e64:	1ccd      	adds	r5, r1, #3
 8006e66:	f025 0503 	bic.w	r5, r5, #3
 8006e6a:	3508      	adds	r5, #8
 8006e6c:	2d0c      	cmp	r5, #12
 8006e6e:	bf38      	it	cc
 8006e70:	250c      	movcc	r5, #12
 8006e72:	2d00      	cmp	r5, #0
 8006e74:	4606      	mov	r6, r0
 8006e76:	db01      	blt.n	8006e7c <_malloc_r+0x1c>
 8006e78:	42a9      	cmp	r1, r5
 8006e7a:	d904      	bls.n	8006e86 <_malloc_r+0x26>
 8006e7c:	230c      	movs	r3, #12
 8006e7e:	6033      	str	r3, [r6, #0]
 8006e80:	2000      	movs	r0, #0
 8006e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f5c <_malloc_r+0xfc>
 8006e8a:	f000 f869 	bl	8006f60 <__malloc_lock>
 8006e8e:	f8d8 3000 	ldr.w	r3, [r8]
 8006e92:	461c      	mov	r4, r3
 8006e94:	bb44      	cbnz	r4, 8006ee8 <_malloc_r+0x88>
 8006e96:	4629      	mov	r1, r5
 8006e98:	4630      	mov	r0, r6
 8006e9a:	f7ff ffbf 	bl	8006e1c <sbrk_aligned>
 8006e9e:	1c43      	adds	r3, r0, #1
 8006ea0:	4604      	mov	r4, r0
 8006ea2:	d158      	bne.n	8006f56 <_malloc_r+0xf6>
 8006ea4:	f8d8 4000 	ldr.w	r4, [r8]
 8006ea8:	4627      	mov	r7, r4
 8006eaa:	2f00      	cmp	r7, #0
 8006eac:	d143      	bne.n	8006f36 <_malloc_r+0xd6>
 8006eae:	2c00      	cmp	r4, #0
 8006eb0:	d04b      	beq.n	8006f4a <_malloc_r+0xea>
 8006eb2:	6823      	ldr	r3, [r4, #0]
 8006eb4:	4639      	mov	r1, r7
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	eb04 0903 	add.w	r9, r4, r3
 8006ebc:	f000 fe50 	bl	8007b60 <_sbrk_r>
 8006ec0:	4581      	cmp	r9, r0
 8006ec2:	d142      	bne.n	8006f4a <_malloc_r+0xea>
 8006ec4:	6821      	ldr	r1, [r4, #0]
 8006ec6:	1a6d      	subs	r5, r5, r1
 8006ec8:	4629      	mov	r1, r5
 8006eca:	4630      	mov	r0, r6
 8006ecc:	f7ff ffa6 	bl	8006e1c <sbrk_aligned>
 8006ed0:	3001      	adds	r0, #1
 8006ed2:	d03a      	beq.n	8006f4a <_malloc_r+0xea>
 8006ed4:	6823      	ldr	r3, [r4, #0]
 8006ed6:	442b      	add	r3, r5
 8006ed8:	6023      	str	r3, [r4, #0]
 8006eda:	f8d8 3000 	ldr.w	r3, [r8]
 8006ede:	685a      	ldr	r2, [r3, #4]
 8006ee0:	bb62      	cbnz	r2, 8006f3c <_malloc_r+0xdc>
 8006ee2:	f8c8 7000 	str.w	r7, [r8]
 8006ee6:	e00f      	b.n	8006f08 <_malloc_r+0xa8>
 8006ee8:	6822      	ldr	r2, [r4, #0]
 8006eea:	1b52      	subs	r2, r2, r5
 8006eec:	d420      	bmi.n	8006f30 <_malloc_r+0xd0>
 8006eee:	2a0b      	cmp	r2, #11
 8006ef0:	d917      	bls.n	8006f22 <_malloc_r+0xc2>
 8006ef2:	1961      	adds	r1, r4, r5
 8006ef4:	42a3      	cmp	r3, r4
 8006ef6:	6025      	str	r5, [r4, #0]
 8006ef8:	bf18      	it	ne
 8006efa:	6059      	strne	r1, [r3, #4]
 8006efc:	6863      	ldr	r3, [r4, #4]
 8006efe:	bf08      	it	eq
 8006f00:	f8c8 1000 	streq.w	r1, [r8]
 8006f04:	5162      	str	r2, [r4, r5]
 8006f06:	604b      	str	r3, [r1, #4]
 8006f08:	4630      	mov	r0, r6
 8006f0a:	f000 f82f 	bl	8006f6c <__malloc_unlock>
 8006f0e:	f104 000b 	add.w	r0, r4, #11
 8006f12:	1d23      	adds	r3, r4, #4
 8006f14:	f020 0007 	bic.w	r0, r0, #7
 8006f18:	1ac2      	subs	r2, r0, r3
 8006f1a:	bf1c      	itt	ne
 8006f1c:	1a1b      	subne	r3, r3, r0
 8006f1e:	50a3      	strne	r3, [r4, r2]
 8006f20:	e7af      	b.n	8006e82 <_malloc_r+0x22>
 8006f22:	6862      	ldr	r2, [r4, #4]
 8006f24:	42a3      	cmp	r3, r4
 8006f26:	bf0c      	ite	eq
 8006f28:	f8c8 2000 	streq.w	r2, [r8]
 8006f2c:	605a      	strne	r2, [r3, #4]
 8006f2e:	e7eb      	b.n	8006f08 <_malloc_r+0xa8>
 8006f30:	4623      	mov	r3, r4
 8006f32:	6864      	ldr	r4, [r4, #4]
 8006f34:	e7ae      	b.n	8006e94 <_malloc_r+0x34>
 8006f36:	463c      	mov	r4, r7
 8006f38:	687f      	ldr	r7, [r7, #4]
 8006f3a:	e7b6      	b.n	8006eaa <_malloc_r+0x4a>
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	42a3      	cmp	r3, r4
 8006f42:	d1fb      	bne.n	8006f3c <_malloc_r+0xdc>
 8006f44:	2300      	movs	r3, #0
 8006f46:	6053      	str	r3, [r2, #4]
 8006f48:	e7de      	b.n	8006f08 <_malloc_r+0xa8>
 8006f4a:	230c      	movs	r3, #12
 8006f4c:	6033      	str	r3, [r6, #0]
 8006f4e:	4630      	mov	r0, r6
 8006f50:	f000 f80c 	bl	8006f6c <__malloc_unlock>
 8006f54:	e794      	b.n	8006e80 <_malloc_r+0x20>
 8006f56:	6005      	str	r5, [r0, #0]
 8006f58:	e7d6      	b.n	8006f08 <_malloc_r+0xa8>
 8006f5a:	bf00      	nop
 8006f5c:	2000042c 	.word	0x2000042c

08006f60 <__malloc_lock>:
 8006f60:	4801      	ldr	r0, [pc, #4]	@ (8006f68 <__malloc_lock+0x8>)
 8006f62:	f7ff b8b8 	b.w	80060d6 <__retarget_lock_acquire_recursive>
 8006f66:	bf00      	nop
 8006f68:	20000424 	.word	0x20000424

08006f6c <__malloc_unlock>:
 8006f6c:	4801      	ldr	r0, [pc, #4]	@ (8006f74 <__malloc_unlock+0x8>)
 8006f6e:	f7ff b8b3 	b.w	80060d8 <__retarget_lock_release_recursive>
 8006f72:	bf00      	nop
 8006f74:	20000424 	.word	0x20000424

08006f78 <_Balloc>:
 8006f78:	b570      	push	{r4, r5, r6, lr}
 8006f7a:	69c6      	ldr	r6, [r0, #28]
 8006f7c:	4604      	mov	r4, r0
 8006f7e:	460d      	mov	r5, r1
 8006f80:	b976      	cbnz	r6, 8006fa0 <_Balloc+0x28>
 8006f82:	2010      	movs	r0, #16
 8006f84:	f7ff ff42 	bl	8006e0c <malloc>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	61e0      	str	r0, [r4, #28]
 8006f8c:	b920      	cbnz	r0, 8006f98 <_Balloc+0x20>
 8006f8e:	4b18      	ldr	r3, [pc, #96]	@ (8006ff0 <_Balloc+0x78>)
 8006f90:	4818      	ldr	r0, [pc, #96]	@ (8006ff4 <_Balloc+0x7c>)
 8006f92:	216b      	movs	r1, #107	@ 0x6b
 8006f94:	f000 fe02 	bl	8007b9c <__assert_func>
 8006f98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f9c:	6006      	str	r6, [r0, #0]
 8006f9e:	60c6      	str	r6, [r0, #12]
 8006fa0:	69e6      	ldr	r6, [r4, #28]
 8006fa2:	68f3      	ldr	r3, [r6, #12]
 8006fa4:	b183      	cbz	r3, 8006fc8 <_Balloc+0x50>
 8006fa6:	69e3      	ldr	r3, [r4, #28]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006fae:	b9b8      	cbnz	r0, 8006fe0 <_Balloc+0x68>
 8006fb0:	2101      	movs	r1, #1
 8006fb2:	fa01 f605 	lsl.w	r6, r1, r5
 8006fb6:	1d72      	adds	r2, r6, #5
 8006fb8:	0092      	lsls	r2, r2, #2
 8006fba:	4620      	mov	r0, r4
 8006fbc:	f000 fe0c 	bl	8007bd8 <_calloc_r>
 8006fc0:	b160      	cbz	r0, 8006fdc <_Balloc+0x64>
 8006fc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006fc6:	e00e      	b.n	8006fe6 <_Balloc+0x6e>
 8006fc8:	2221      	movs	r2, #33	@ 0x21
 8006fca:	2104      	movs	r1, #4
 8006fcc:	4620      	mov	r0, r4
 8006fce:	f000 fe03 	bl	8007bd8 <_calloc_r>
 8006fd2:	69e3      	ldr	r3, [r4, #28]
 8006fd4:	60f0      	str	r0, [r6, #12]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1e4      	bne.n	8006fa6 <_Balloc+0x2e>
 8006fdc:	2000      	movs	r0, #0
 8006fde:	bd70      	pop	{r4, r5, r6, pc}
 8006fe0:	6802      	ldr	r2, [r0, #0]
 8006fe2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006fec:	e7f7      	b.n	8006fde <_Balloc+0x66>
 8006fee:	bf00      	nop
 8006ff0:	08007f70 	.word	0x08007f70
 8006ff4:	08007ff0 	.word	0x08007ff0

08006ff8 <_Bfree>:
 8006ff8:	b570      	push	{r4, r5, r6, lr}
 8006ffa:	69c6      	ldr	r6, [r0, #28]
 8006ffc:	4605      	mov	r5, r0
 8006ffe:	460c      	mov	r4, r1
 8007000:	b976      	cbnz	r6, 8007020 <_Bfree+0x28>
 8007002:	2010      	movs	r0, #16
 8007004:	f7ff ff02 	bl	8006e0c <malloc>
 8007008:	4602      	mov	r2, r0
 800700a:	61e8      	str	r0, [r5, #28]
 800700c:	b920      	cbnz	r0, 8007018 <_Bfree+0x20>
 800700e:	4b09      	ldr	r3, [pc, #36]	@ (8007034 <_Bfree+0x3c>)
 8007010:	4809      	ldr	r0, [pc, #36]	@ (8007038 <_Bfree+0x40>)
 8007012:	218f      	movs	r1, #143	@ 0x8f
 8007014:	f000 fdc2 	bl	8007b9c <__assert_func>
 8007018:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800701c:	6006      	str	r6, [r0, #0]
 800701e:	60c6      	str	r6, [r0, #12]
 8007020:	b13c      	cbz	r4, 8007032 <_Bfree+0x3a>
 8007022:	69eb      	ldr	r3, [r5, #28]
 8007024:	6862      	ldr	r2, [r4, #4]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800702c:	6021      	str	r1, [r4, #0]
 800702e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007032:	bd70      	pop	{r4, r5, r6, pc}
 8007034:	08007f70 	.word	0x08007f70
 8007038:	08007ff0 	.word	0x08007ff0

0800703c <__multadd>:
 800703c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007040:	690d      	ldr	r5, [r1, #16]
 8007042:	4607      	mov	r7, r0
 8007044:	460c      	mov	r4, r1
 8007046:	461e      	mov	r6, r3
 8007048:	f101 0c14 	add.w	ip, r1, #20
 800704c:	2000      	movs	r0, #0
 800704e:	f8dc 3000 	ldr.w	r3, [ip]
 8007052:	b299      	uxth	r1, r3
 8007054:	fb02 6101 	mla	r1, r2, r1, r6
 8007058:	0c1e      	lsrs	r6, r3, #16
 800705a:	0c0b      	lsrs	r3, r1, #16
 800705c:	fb02 3306 	mla	r3, r2, r6, r3
 8007060:	b289      	uxth	r1, r1
 8007062:	3001      	adds	r0, #1
 8007064:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007068:	4285      	cmp	r5, r0
 800706a:	f84c 1b04 	str.w	r1, [ip], #4
 800706e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007072:	dcec      	bgt.n	800704e <__multadd+0x12>
 8007074:	b30e      	cbz	r6, 80070ba <__multadd+0x7e>
 8007076:	68a3      	ldr	r3, [r4, #8]
 8007078:	42ab      	cmp	r3, r5
 800707a:	dc19      	bgt.n	80070b0 <__multadd+0x74>
 800707c:	6861      	ldr	r1, [r4, #4]
 800707e:	4638      	mov	r0, r7
 8007080:	3101      	adds	r1, #1
 8007082:	f7ff ff79 	bl	8006f78 <_Balloc>
 8007086:	4680      	mov	r8, r0
 8007088:	b928      	cbnz	r0, 8007096 <__multadd+0x5a>
 800708a:	4602      	mov	r2, r0
 800708c:	4b0c      	ldr	r3, [pc, #48]	@ (80070c0 <__multadd+0x84>)
 800708e:	480d      	ldr	r0, [pc, #52]	@ (80070c4 <__multadd+0x88>)
 8007090:	21ba      	movs	r1, #186	@ 0xba
 8007092:	f000 fd83 	bl	8007b9c <__assert_func>
 8007096:	6922      	ldr	r2, [r4, #16]
 8007098:	3202      	adds	r2, #2
 800709a:	f104 010c 	add.w	r1, r4, #12
 800709e:	0092      	lsls	r2, r2, #2
 80070a0:	300c      	adds	r0, #12
 80070a2:	f000 fd6d 	bl	8007b80 <memcpy>
 80070a6:	4621      	mov	r1, r4
 80070a8:	4638      	mov	r0, r7
 80070aa:	f7ff ffa5 	bl	8006ff8 <_Bfree>
 80070ae:	4644      	mov	r4, r8
 80070b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80070b4:	3501      	adds	r5, #1
 80070b6:	615e      	str	r6, [r3, #20]
 80070b8:	6125      	str	r5, [r4, #16]
 80070ba:	4620      	mov	r0, r4
 80070bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070c0:	08007fdf 	.word	0x08007fdf
 80070c4:	08007ff0 	.word	0x08007ff0

080070c8 <__hi0bits>:
 80070c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80070cc:	4603      	mov	r3, r0
 80070ce:	bf36      	itet	cc
 80070d0:	0403      	lslcc	r3, r0, #16
 80070d2:	2000      	movcs	r0, #0
 80070d4:	2010      	movcc	r0, #16
 80070d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070da:	bf3c      	itt	cc
 80070dc:	021b      	lslcc	r3, r3, #8
 80070de:	3008      	addcc	r0, #8
 80070e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070e4:	bf3c      	itt	cc
 80070e6:	011b      	lslcc	r3, r3, #4
 80070e8:	3004      	addcc	r0, #4
 80070ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070ee:	bf3c      	itt	cc
 80070f0:	009b      	lslcc	r3, r3, #2
 80070f2:	3002      	addcc	r0, #2
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	db05      	blt.n	8007104 <__hi0bits+0x3c>
 80070f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80070fc:	f100 0001 	add.w	r0, r0, #1
 8007100:	bf08      	it	eq
 8007102:	2020      	moveq	r0, #32
 8007104:	4770      	bx	lr

08007106 <__lo0bits>:
 8007106:	6803      	ldr	r3, [r0, #0]
 8007108:	4602      	mov	r2, r0
 800710a:	f013 0007 	ands.w	r0, r3, #7
 800710e:	d00b      	beq.n	8007128 <__lo0bits+0x22>
 8007110:	07d9      	lsls	r1, r3, #31
 8007112:	d421      	bmi.n	8007158 <__lo0bits+0x52>
 8007114:	0798      	lsls	r0, r3, #30
 8007116:	bf49      	itett	mi
 8007118:	085b      	lsrmi	r3, r3, #1
 800711a:	089b      	lsrpl	r3, r3, #2
 800711c:	2001      	movmi	r0, #1
 800711e:	6013      	strmi	r3, [r2, #0]
 8007120:	bf5c      	itt	pl
 8007122:	6013      	strpl	r3, [r2, #0]
 8007124:	2002      	movpl	r0, #2
 8007126:	4770      	bx	lr
 8007128:	b299      	uxth	r1, r3
 800712a:	b909      	cbnz	r1, 8007130 <__lo0bits+0x2a>
 800712c:	0c1b      	lsrs	r3, r3, #16
 800712e:	2010      	movs	r0, #16
 8007130:	b2d9      	uxtb	r1, r3
 8007132:	b909      	cbnz	r1, 8007138 <__lo0bits+0x32>
 8007134:	3008      	adds	r0, #8
 8007136:	0a1b      	lsrs	r3, r3, #8
 8007138:	0719      	lsls	r1, r3, #28
 800713a:	bf04      	itt	eq
 800713c:	091b      	lsreq	r3, r3, #4
 800713e:	3004      	addeq	r0, #4
 8007140:	0799      	lsls	r1, r3, #30
 8007142:	bf04      	itt	eq
 8007144:	089b      	lsreq	r3, r3, #2
 8007146:	3002      	addeq	r0, #2
 8007148:	07d9      	lsls	r1, r3, #31
 800714a:	d403      	bmi.n	8007154 <__lo0bits+0x4e>
 800714c:	085b      	lsrs	r3, r3, #1
 800714e:	f100 0001 	add.w	r0, r0, #1
 8007152:	d003      	beq.n	800715c <__lo0bits+0x56>
 8007154:	6013      	str	r3, [r2, #0]
 8007156:	4770      	bx	lr
 8007158:	2000      	movs	r0, #0
 800715a:	4770      	bx	lr
 800715c:	2020      	movs	r0, #32
 800715e:	4770      	bx	lr

08007160 <__i2b>:
 8007160:	b510      	push	{r4, lr}
 8007162:	460c      	mov	r4, r1
 8007164:	2101      	movs	r1, #1
 8007166:	f7ff ff07 	bl	8006f78 <_Balloc>
 800716a:	4602      	mov	r2, r0
 800716c:	b928      	cbnz	r0, 800717a <__i2b+0x1a>
 800716e:	4b05      	ldr	r3, [pc, #20]	@ (8007184 <__i2b+0x24>)
 8007170:	4805      	ldr	r0, [pc, #20]	@ (8007188 <__i2b+0x28>)
 8007172:	f240 1145 	movw	r1, #325	@ 0x145
 8007176:	f000 fd11 	bl	8007b9c <__assert_func>
 800717a:	2301      	movs	r3, #1
 800717c:	6144      	str	r4, [r0, #20]
 800717e:	6103      	str	r3, [r0, #16]
 8007180:	bd10      	pop	{r4, pc}
 8007182:	bf00      	nop
 8007184:	08007fdf 	.word	0x08007fdf
 8007188:	08007ff0 	.word	0x08007ff0

0800718c <__multiply>:
 800718c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007190:	4614      	mov	r4, r2
 8007192:	690a      	ldr	r2, [r1, #16]
 8007194:	6923      	ldr	r3, [r4, #16]
 8007196:	429a      	cmp	r2, r3
 8007198:	bfa8      	it	ge
 800719a:	4623      	movge	r3, r4
 800719c:	460f      	mov	r7, r1
 800719e:	bfa4      	itt	ge
 80071a0:	460c      	movge	r4, r1
 80071a2:	461f      	movge	r7, r3
 80071a4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80071a8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80071ac:	68a3      	ldr	r3, [r4, #8]
 80071ae:	6861      	ldr	r1, [r4, #4]
 80071b0:	eb0a 0609 	add.w	r6, sl, r9
 80071b4:	42b3      	cmp	r3, r6
 80071b6:	b085      	sub	sp, #20
 80071b8:	bfb8      	it	lt
 80071ba:	3101      	addlt	r1, #1
 80071bc:	f7ff fedc 	bl	8006f78 <_Balloc>
 80071c0:	b930      	cbnz	r0, 80071d0 <__multiply+0x44>
 80071c2:	4602      	mov	r2, r0
 80071c4:	4b44      	ldr	r3, [pc, #272]	@ (80072d8 <__multiply+0x14c>)
 80071c6:	4845      	ldr	r0, [pc, #276]	@ (80072dc <__multiply+0x150>)
 80071c8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80071cc:	f000 fce6 	bl	8007b9c <__assert_func>
 80071d0:	f100 0514 	add.w	r5, r0, #20
 80071d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80071d8:	462b      	mov	r3, r5
 80071da:	2200      	movs	r2, #0
 80071dc:	4543      	cmp	r3, r8
 80071de:	d321      	bcc.n	8007224 <__multiply+0x98>
 80071e0:	f107 0114 	add.w	r1, r7, #20
 80071e4:	f104 0214 	add.w	r2, r4, #20
 80071e8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80071ec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80071f0:	9302      	str	r3, [sp, #8]
 80071f2:	1b13      	subs	r3, r2, r4
 80071f4:	3b15      	subs	r3, #21
 80071f6:	f023 0303 	bic.w	r3, r3, #3
 80071fa:	3304      	adds	r3, #4
 80071fc:	f104 0715 	add.w	r7, r4, #21
 8007200:	42ba      	cmp	r2, r7
 8007202:	bf38      	it	cc
 8007204:	2304      	movcc	r3, #4
 8007206:	9301      	str	r3, [sp, #4]
 8007208:	9b02      	ldr	r3, [sp, #8]
 800720a:	9103      	str	r1, [sp, #12]
 800720c:	428b      	cmp	r3, r1
 800720e:	d80c      	bhi.n	800722a <__multiply+0x9e>
 8007210:	2e00      	cmp	r6, #0
 8007212:	dd03      	ble.n	800721c <__multiply+0x90>
 8007214:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007218:	2b00      	cmp	r3, #0
 800721a:	d05b      	beq.n	80072d4 <__multiply+0x148>
 800721c:	6106      	str	r6, [r0, #16]
 800721e:	b005      	add	sp, #20
 8007220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007224:	f843 2b04 	str.w	r2, [r3], #4
 8007228:	e7d8      	b.n	80071dc <__multiply+0x50>
 800722a:	f8b1 a000 	ldrh.w	sl, [r1]
 800722e:	f1ba 0f00 	cmp.w	sl, #0
 8007232:	d024      	beq.n	800727e <__multiply+0xf2>
 8007234:	f104 0e14 	add.w	lr, r4, #20
 8007238:	46a9      	mov	r9, r5
 800723a:	f04f 0c00 	mov.w	ip, #0
 800723e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007242:	f8d9 3000 	ldr.w	r3, [r9]
 8007246:	fa1f fb87 	uxth.w	fp, r7
 800724a:	b29b      	uxth	r3, r3
 800724c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007250:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007254:	f8d9 7000 	ldr.w	r7, [r9]
 8007258:	4463      	add	r3, ip
 800725a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800725e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007262:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007266:	b29b      	uxth	r3, r3
 8007268:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800726c:	4572      	cmp	r2, lr
 800726e:	f849 3b04 	str.w	r3, [r9], #4
 8007272:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007276:	d8e2      	bhi.n	800723e <__multiply+0xb2>
 8007278:	9b01      	ldr	r3, [sp, #4]
 800727a:	f845 c003 	str.w	ip, [r5, r3]
 800727e:	9b03      	ldr	r3, [sp, #12]
 8007280:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007284:	3104      	adds	r1, #4
 8007286:	f1b9 0f00 	cmp.w	r9, #0
 800728a:	d021      	beq.n	80072d0 <__multiply+0x144>
 800728c:	682b      	ldr	r3, [r5, #0]
 800728e:	f104 0c14 	add.w	ip, r4, #20
 8007292:	46ae      	mov	lr, r5
 8007294:	f04f 0a00 	mov.w	sl, #0
 8007298:	f8bc b000 	ldrh.w	fp, [ip]
 800729c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80072a0:	fb09 770b 	mla	r7, r9, fp, r7
 80072a4:	4457      	add	r7, sl
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80072ac:	f84e 3b04 	str.w	r3, [lr], #4
 80072b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80072b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072b8:	f8be 3000 	ldrh.w	r3, [lr]
 80072bc:	fb09 330a 	mla	r3, r9, sl, r3
 80072c0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80072c4:	4562      	cmp	r2, ip
 80072c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072ca:	d8e5      	bhi.n	8007298 <__multiply+0x10c>
 80072cc:	9f01      	ldr	r7, [sp, #4]
 80072ce:	51eb      	str	r3, [r5, r7]
 80072d0:	3504      	adds	r5, #4
 80072d2:	e799      	b.n	8007208 <__multiply+0x7c>
 80072d4:	3e01      	subs	r6, #1
 80072d6:	e79b      	b.n	8007210 <__multiply+0x84>
 80072d8:	08007fdf 	.word	0x08007fdf
 80072dc:	08007ff0 	.word	0x08007ff0

080072e0 <__pow5mult>:
 80072e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072e4:	4615      	mov	r5, r2
 80072e6:	f012 0203 	ands.w	r2, r2, #3
 80072ea:	4607      	mov	r7, r0
 80072ec:	460e      	mov	r6, r1
 80072ee:	d007      	beq.n	8007300 <__pow5mult+0x20>
 80072f0:	4c25      	ldr	r4, [pc, #148]	@ (8007388 <__pow5mult+0xa8>)
 80072f2:	3a01      	subs	r2, #1
 80072f4:	2300      	movs	r3, #0
 80072f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80072fa:	f7ff fe9f 	bl	800703c <__multadd>
 80072fe:	4606      	mov	r6, r0
 8007300:	10ad      	asrs	r5, r5, #2
 8007302:	d03d      	beq.n	8007380 <__pow5mult+0xa0>
 8007304:	69fc      	ldr	r4, [r7, #28]
 8007306:	b97c      	cbnz	r4, 8007328 <__pow5mult+0x48>
 8007308:	2010      	movs	r0, #16
 800730a:	f7ff fd7f 	bl	8006e0c <malloc>
 800730e:	4602      	mov	r2, r0
 8007310:	61f8      	str	r0, [r7, #28]
 8007312:	b928      	cbnz	r0, 8007320 <__pow5mult+0x40>
 8007314:	4b1d      	ldr	r3, [pc, #116]	@ (800738c <__pow5mult+0xac>)
 8007316:	481e      	ldr	r0, [pc, #120]	@ (8007390 <__pow5mult+0xb0>)
 8007318:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800731c:	f000 fc3e 	bl	8007b9c <__assert_func>
 8007320:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007324:	6004      	str	r4, [r0, #0]
 8007326:	60c4      	str	r4, [r0, #12]
 8007328:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800732c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007330:	b94c      	cbnz	r4, 8007346 <__pow5mult+0x66>
 8007332:	f240 2171 	movw	r1, #625	@ 0x271
 8007336:	4638      	mov	r0, r7
 8007338:	f7ff ff12 	bl	8007160 <__i2b>
 800733c:	2300      	movs	r3, #0
 800733e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007342:	4604      	mov	r4, r0
 8007344:	6003      	str	r3, [r0, #0]
 8007346:	f04f 0900 	mov.w	r9, #0
 800734a:	07eb      	lsls	r3, r5, #31
 800734c:	d50a      	bpl.n	8007364 <__pow5mult+0x84>
 800734e:	4631      	mov	r1, r6
 8007350:	4622      	mov	r2, r4
 8007352:	4638      	mov	r0, r7
 8007354:	f7ff ff1a 	bl	800718c <__multiply>
 8007358:	4631      	mov	r1, r6
 800735a:	4680      	mov	r8, r0
 800735c:	4638      	mov	r0, r7
 800735e:	f7ff fe4b 	bl	8006ff8 <_Bfree>
 8007362:	4646      	mov	r6, r8
 8007364:	106d      	asrs	r5, r5, #1
 8007366:	d00b      	beq.n	8007380 <__pow5mult+0xa0>
 8007368:	6820      	ldr	r0, [r4, #0]
 800736a:	b938      	cbnz	r0, 800737c <__pow5mult+0x9c>
 800736c:	4622      	mov	r2, r4
 800736e:	4621      	mov	r1, r4
 8007370:	4638      	mov	r0, r7
 8007372:	f7ff ff0b 	bl	800718c <__multiply>
 8007376:	6020      	str	r0, [r4, #0]
 8007378:	f8c0 9000 	str.w	r9, [r0]
 800737c:	4604      	mov	r4, r0
 800737e:	e7e4      	b.n	800734a <__pow5mult+0x6a>
 8007380:	4630      	mov	r0, r6
 8007382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007386:	bf00      	nop
 8007388:	0800804c 	.word	0x0800804c
 800738c:	08007f70 	.word	0x08007f70
 8007390:	08007ff0 	.word	0x08007ff0

08007394 <__lshift>:
 8007394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007398:	460c      	mov	r4, r1
 800739a:	6849      	ldr	r1, [r1, #4]
 800739c:	6923      	ldr	r3, [r4, #16]
 800739e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80073a2:	68a3      	ldr	r3, [r4, #8]
 80073a4:	4607      	mov	r7, r0
 80073a6:	4691      	mov	r9, r2
 80073a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80073ac:	f108 0601 	add.w	r6, r8, #1
 80073b0:	42b3      	cmp	r3, r6
 80073b2:	db0b      	blt.n	80073cc <__lshift+0x38>
 80073b4:	4638      	mov	r0, r7
 80073b6:	f7ff fddf 	bl	8006f78 <_Balloc>
 80073ba:	4605      	mov	r5, r0
 80073bc:	b948      	cbnz	r0, 80073d2 <__lshift+0x3e>
 80073be:	4602      	mov	r2, r0
 80073c0:	4b28      	ldr	r3, [pc, #160]	@ (8007464 <__lshift+0xd0>)
 80073c2:	4829      	ldr	r0, [pc, #164]	@ (8007468 <__lshift+0xd4>)
 80073c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80073c8:	f000 fbe8 	bl	8007b9c <__assert_func>
 80073cc:	3101      	adds	r1, #1
 80073ce:	005b      	lsls	r3, r3, #1
 80073d0:	e7ee      	b.n	80073b0 <__lshift+0x1c>
 80073d2:	2300      	movs	r3, #0
 80073d4:	f100 0114 	add.w	r1, r0, #20
 80073d8:	f100 0210 	add.w	r2, r0, #16
 80073dc:	4618      	mov	r0, r3
 80073de:	4553      	cmp	r3, sl
 80073e0:	db33      	blt.n	800744a <__lshift+0xb6>
 80073e2:	6920      	ldr	r0, [r4, #16]
 80073e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80073e8:	f104 0314 	add.w	r3, r4, #20
 80073ec:	f019 091f 	ands.w	r9, r9, #31
 80073f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80073f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80073f8:	d02b      	beq.n	8007452 <__lshift+0xbe>
 80073fa:	f1c9 0e20 	rsb	lr, r9, #32
 80073fe:	468a      	mov	sl, r1
 8007400:	2200      	movs	r2, #0
 8007402:	6818      	ldr	r0, [r3, #0]
 8007404:	fa00 f009 	lsl.w	r0, r0, r9
 8007408:	4310      	orrs	r0, r2
 800740a:	f84a 0b04 	str.w	r0, [sl], #4
 800740e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007412:	459c      	cmp	ip, r3
 8007414:	fa22 f20e 	lsr.w	r2, r2, lr
 8007418:	d8f3      	bhi.n	8007402 <__lshift+0x6e>
 800741a:	ebac 0304 	sub.w	r3, ip, r4
 800741e:	3b15      	subs	r3, #21
 8007420:	f023 0303 	bic.w	r3, r3, #3
 8007424:	3304      	adds	r3, #4
 8007426:	f104 0015 	add.w	r0, r4, #21
 800742a:	4584      	cmp	ip, r0
 800742c:	bf38      	it	cc
 800742e:	2304      	movcc	r3, #4
 8007430:	50ca      	str	r2, [r1, r3]
 8007432:	b10a      	cbz	r2, 8007438 <__lshift+0xa4>
 8007434:	f108 0602 	add.w	r6, r8, #2
 8007438:	3e01      	subs	r6, #1
 800743a:	4638      	mov	r0, r7
 800743c:	612e      	str	r6, [r5, #16]
 800743e:	4621      	mov	r1, r4
 8007440:	f7ff fdda 	bl	8006ff8 <_Bfree>
 8007444:	4628      	mov	r0, r5
 8007446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800744a:	f842 0f04 	str.w	r0, [r2, #4]!
 800744e:	3301      	adds	r3, #1
 8007450:	e7c5      	b.n	80073de <__lshift+0x4a>
 8007452:	3904      	subs	r1, #4
 8007454:	f853 2b04 	ldr.w	r2, [r3], #4
 8007458:	f841 2f04 	str.w	r2, [r1, #4]!
 800745c:	459c      	cmp	ip, r3
 800745e:	d8f9      	bhi.n	8007454 <__lshift+0xc0>
 8007460:	e7ea      	b.n	8007438 <__lshift+0xa4>
 8007462:	bf00      	nop
 8007464:	08007fdf 	.word	0x08007fdf
 8007468:	08007ff0 	.word	0x08007ff0

0800746c <__mcmp>:
 800746c:	690a      	ldr	r2, [r1, #16]
 800746e:	4603      	mov	r3, r0
 8007470:	6900      	ldr	r0, [r0, #16]
 8007472:	1a80      	subs	r0, r0, r2
 8007474:	b530      	push	{r4, r5, lr}
 8007476:	d10e      	bne.n	8007496 <__mcmp+0x2a>
 8007478:	3314      	adds	r3, #20
 800747a:	3114      	adds	r1, #20
 800747c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007480:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007484:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007488:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800748c:	4295      	cmp	r5, r2
 800748e:	d003      	beq.n	8007498 <__mcmp+0x2c>
 8007490:	d205      	bcs.n	800749e <__mcmp+0x32>
 8007492:	f04f 30ff 	mov.w	r0, #4294967295
 8007496:	bd30      	pop	{r4, r5, pc}
 8007498:	42a3      	cmp	r3, r4
 800749a:	d3f3      	bcc.n	8007484 <__mcmp+0x18>
 800749c:	e7fb      	b.n	8007496 <__mcmp+0x2a>
 800749e:	2001      	movs	r0, #1
 80074a0:	e7f9      	b.n	8007496 <__mcmp+0x2a>
	...

080074a4 <__mdiff>:
 80074a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a8:	4689      	mov	r9, r1
 80074aa:	4606      	mov	r6, r0
 80074ac:	4611      	mov	r1, r2
 80074ae:	4648      	mov	r0, r9
 80074b0:	4614      	mov	r4, r2
 80074b2:	f7ff ffdb 	bl	800746c <__mcmp>
 80074b6:	1e05      	subs	r5, r0, #0
 80074b8:	d112      	bne.n	80074e0 <__mdiff+0x3c>
 80074ba:	4629      	mov	r1, r5
 80074bc:	4630      	mov	r0, r6
 80074be:	f7ff fd5b 	bl	8006f78 <_Balloc>
 80074c2:	4602      	mov	r2, r0
 80074c4:	b928      	cbnz	r0, 80074d2 <__mdiff+0x2e>
 80074c6:	4b3f      	ldr	r3, [pc, #252]	@ (80075c4 <__mdiff+0x120>)
 80074c8:	f240 2137 	movw	r1, #567	@ 0x237
 80074cc:	483e      	ldr	r0, [pc, #248]	@ (80075c8 <__mdiff+0x124>)
 80074ce:	f000 fb65 	bl	8007b9c <__assert_func>
 80074d2:	2301      	movs	r3, #1
 80074d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80074d8:	4610      	mov	r0, r2
 80074da:	b003      	add	sp, #12
 80074dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e0:	bfbc      	itt	lt
 80074e2:	464b      	movlt	r3, r9
 80074e4:	46a1      	movlt	r9, r4
 80074e6:	4630      	mov	r0, r6
 80074e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80074ec:	bfba      	itte	lt
 80074ee:	461c      	movlt	r4, r3
 80074f0:	2501      	movlt	r5, #1
 80074f2:	2500      	movge	r5, #0
 80074f4:	f7ff fd40 	bl	8006f78 <_Balloc>
 80074f8:	4602      	mov	r2, r0
 80074fa:	b918      	cbnz	r0, 8007504 <__mdiff+0x60>
 80074fc:	4b31      	ldr	r3, [pc, #196]	@ (80075c4 <__mdiff+0x120>)
 80074fe:	f240 2145 	movw	r1, #581	@ 0x245
 8007502:	e7e3      	b.n	80074cc <__mdiff+0x28>
 8007504:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007508:	6926      	ldr	r6, [r4, #16]
 800750a:	60c5      	str	r5, [r0, #12]
 800750c:	f109 0310 	add.w	r3, r9, #16
 8007510:	f109 0514 	add.w	r5, r9, #20
 8007514:	f104 0e14 	add.w	lr, r4, #20
 8007518:	f100 0b14 	add.w	fp, r0, #20
 800751c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007520:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007524:	9301      	str	r3, [sp, #4]
 8007526:	46d9      	mov	r9, fp
 8007528:	f04f 0c00 	mov.w	ip, #0
 800752c:	9b01      	ldr	r3, [sp, #4]
 800752e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007532:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007536:	9301      	str	r3, [sp, #4]
 8007538:	fa1f f38a 	uxth.w	r3, sl
 800753c:	4619      	mov	r1, r3
 800753e:	b283      	uxth	r3, r0
 8007540:	1acb      	subs	r3, r1, r3
 8007542:	0c00      	lsrs	r0, r0, #16
 8007544:	4463      	add	r3, ip
 8007546:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800754a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800754e:	b29b      	uxth	r3, r3
 8007550:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007554:	4576      	cmp	r6, lr
 8007556:	f849 3b04 	str.w	r3, [r9], #4
 800755a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800755e:	d8e5      	bhi.n	800752c <__mdiff+0x88>
 8007560:	1b33      	subs	r3, r6, r4
 8007562:	3b15      	subs	r3, #21
 8007564:	f023 0303 	bic.w	r3, r3, #3
 8007568:	3415      	adds	r4, #21
 800756a:	3304      	adds	r3, #4
 800756c:	42a6      	cmp	r6, r4
 800756e:	bf38      	it	cc
 8007570:	2304      	movcc	r3, #4
 8007572:	441d      	add	r5, r3
 8007574:	445b      	add	r3, fp
 8007576:	461e      	mov	r6, r3
 8007578:	462c      	mov	r4, r5
 800757a:	4544      	cmp	r4, r8
 800757c:	d30e      	bcc.n	800759c <__mdiff+0xf8>
 800757e:	f108 0103 	add.w	r1, r8, #3
 8007582:	1b49      	subs	r1, r1, r5
 8007584:	f021 0103 	bic.w	r1, r1, #3
 8007588:	3d03      	subs	r5, #3
 800758a:	45a8      	cmp	r8, r5
 800758c:	bf38      	it	cc
 800758e:	2100      	movcc	r1, #0
 8007590:	440b      	add	r3, r1
 8007592:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007596:	b191      	cbz	r1, 80075be <__mdiff+0x11a>
 8007598:	6117      	str	r7, [r2, #16]
 800759a:	e79d      	b.n	80074d8 <__mdiff+0x34>
 800759c:	f854 1b04 	ldr.w	r1, [r4], #4
 80075a0:	46e6      	mov	lr, ip
 80075a2:	0c08      	lsrs	r0, r1, #16
 80075a4:	fa1c fc81 	uxtah	ip, ip, r1
 80075a8:	4471      	add	r1, lr
 80075aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80075ae:	b289      	uxth	r1, r1
 80075b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80075b4:	f846 1b04 	str.w	r1, [r6], #4
 80075b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80075bc:	e7dd      	b.n	800757a <__mdiff+0xd6>
 80075be:	3f01      	subs	r7, #1
 80075c0:	e7e7      	b.n	8007592 <__mdiff+0xee>
 80075c2:	bf00      	nop
 80075c4:	08007fdf 	.word	0x08007fdf
 80075c8:	08007ff0 	.word	0x08007ff0

080075cc <__d2b>:
 80075cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80075d0:	460f      	mov	r7, r1
 80075d2:	2101      	movs	r1, #1
 80075d4:	ec59 8b10 	vmov	r8, r9, d0
 80075d8:	4616      	mov	r6, r2
 80075da:	f7ff fccd 	bl	8006f78 <_Balloc>
 80075de:	4604      	mov	r4, r0
 80075e0:	b930      	cbnz	r0, 80075f0 <__d2b+0x24>
 80075e2:	4602      	mov	r2, r0
 80075e4:	4b23      	ldr	r3, [pc, #140]	@ (8007674 <__d2b+0xa8>)
 80075e6:	4824      	ldr	r0, [pc, #144]	@ (8007678 <__d2b+0xac>)
 80075e8:	f240 310f 	movw	r1, #783	@ 0x30f
 80075ec:	f000 fad6 	bl	8007b9c <__assert_func>
 80075f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80075f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075f8:	b10d      	cbz	r5, 80075fe <__d2b+0x32>
 80075fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075fe:	9301      	str	r3, [sp, #4]
 8007600:	f1b8 0300 	subs.w	r3, r8, #0
 8007604:	d023      	beq.n	800764e <__d2b+0x82>
 8007606:	4668      	mov	r0, sp
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	f7ff fd7c 	bl	8007106 <__lo0bits>
 800760e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007612:	b1d0      	cbz	r0, 800764a <__d2b+0x7e>
 8007614:	f1c0 0320 	rsb	r3, r0, #32
 8007618:	fa02 f303 	lsl.w	r3, r2, r3
 800761c:	430b      	orrs	r3, r1
 800761e:	40c2      	lsrs	r2, r0
 8007620:	6163      	str	r3, [r4, #20]
 8007622:	9201      	str	r2, [sp, #4]
 8007624:	9b01      	ldr	r3, [sp, #4]
 8007626:	61a3      	str	r3, [r4, #24]
 8007628:	2b00      	cmp	r3, #0
 800762a:	bf0c      	ite	eq
 800762c:	2201      	moveq	r2, #1
 800762e:	2202      	movne	r2, #2
 8007630:	6122      	str	r2, [r4, #16]
 8007632:	b1a5      	cbz	r5, 800765e <__d2b+0x92>
 8007634:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007638:	4405      	add	r5, r0
 800763a:	603d      	str	r5, [r7, #0]
 800763c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007640:	6030      	str	r0, [r6, #0]
 8007642:	4620      	mov	r0, r4
 8007644:	b003      	add	sp, #12
 8007646:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800764a:	6161      	str	r1, [r4, #20]
 800764c:	e7ea      	b.n	8007624 <__d2b+0x58>
 800764e:	a801      	add	r0, sp, #4
 8007650:	f7ff fd59 	bl	8007106 <__lo0bits>
 8007654:	9b01      	ldr	r3, [sp, #4]
 8007656:	6163      	str	r3, [r4, #20]
 8007658:	3020      	adds	r0, #32
 800765a:	2201      	movs	r2, #1
 800765c:	e7e8      	b.n	8007630 <__d2b+0x64>
 800765e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007662:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007666:	6038      	str	r0, [r7, #0]
 8007668:	6918      	ldr	r0, [r3, #16]
 800766a:	f7ff fd2d 	bl	80070c8 <__hi0bits>
 800766e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007672:	e7e5      	b.n	8007640 <__d2b+0x74>
 8007674:	08007fdf 	.word	0x08007fdf
 8007678:	08007ff0 	.word	0x08007ff0

0800767c <__sfputc_r>:
 800767c:	6893      	ldr	r3, [r2, #8]
 800767e:	3b01      	subs	r3, #1
 8007680:	2b00      	cmp	r3, #0
 8007682:	b410      	push	{r4}
 8007684:	6093      	str	r3, [r2, #8]
 8007686:	da08      	bge.n	800769a <__sfputc_r+0x1e>
 8007688:	6994      	ldr	r4, [r2, #24]
 800768a:	42a3      	cmp	r3, r4
 800768c:	db01      	blt.n	8007692 <__sfputc_r+0x16>
 800768e:	290a      	cmp	r1, #10
 8007690:	d103      	bne.n	800769a <__sfputc_r+0x1e>
 8007692:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007696:	f7fe bc0c 	b.w	8005eb2 <__swbuf_r>
 800769a:	6813      	ldr	r3, [r2, #0]
 800769c:	1c58      	adds	r0, r3, #1
 800769e:	6010      	str	r0, [r2, #0]
 80076a0:	7019      	strb	r1, [r3, #0]
 80076a2:	4608      	mov	r0, r1
 80076a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076a8:	4770      	bx	lr

080076aa <__sfputs_r>:
 80076aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ac:	4606      	mov	r6, r0
 80076ae:	460f      	mov	r7, r1
 80076b0:	4614      	mov	r4, r2
 80076b2:	18d5      	adds	r5, r2, r3
 80076b4:	42ac      	cmp	r4, r5
 80076b6:	d101      	bne.n	80076bc <__sfputs_r+0x12>
 80076b8:	2000      	movs	r0, #0
 80076ba:	e007      	b.n	80076cc <__sfputs_r+0x22>
 80076bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076c0:	463a      	mov	r2, r7
 80076c2:	4630      	mov	r0, r6
 80076c4:	f7ff ffda 	bl	800767c <__sfputc_r>
 80076c8:	1c43      	adds	r3, r0, #1
 80076ca:	d1f3      	bne.n	80076b4 <__sfputs_r+0xa>
 80076cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080076d0 <_vfiprintf_r>:
 80076d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d4:	460d      	mov	r5, r1
 80076d6:	b09d      	sub	sp, #116	@ 0x74
 80076d8:	4614      	mov	r4, r2
 80076da:	4698      	mov	r8, r3
 80076dc:	4606      	mov	r6, r0
 80076de:	b118      	cbz	r0, 80076e8 <_vfiprintf_r+0x18>
 80076e0:	6a03      	ldr	r3, [r0, #32]
 80076e2:	b90b      	cbnz	r3, 80076e8 <_vfiprintf_r+0x18>
 80076e4:	f7fe fafc 	bl	8005ce0 <__sinit>
 80076e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076ea:	07d9      	lsls	r1, r3, #31
 80076ec:	d405      	bmi.n	80076fa <_vfiprintf_r+0x2a>
 80076ee:	89ab      	ldrh	r3, [r5, #12]
 80076f0:	059a      	lsls	r2, r3, #22
 80076f2:	d402      	bmi.n	80076fa <_vfiprintf_r+0x2a>
 80076f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076f6:	f7fe fcee 	bl	80060d6 <__retarget_lock_acquire_recursive>
 80076fa:	89ab      	ldrh	r3, [r5, #12]
 80076fc:	071b      	lsls	r3, r3, #28
 80076fe:	d501      	bpl.n	8007704 <_vfiprintf_r+0x34>
 8007700:	692b      	ldr	r3, [r5, #16]
 8007702:	b99b      	cbnz	r3, 800772c <_vfiprintf_r+0x5c>
 8007704:	4629      	mov	r1, r5
 8007706:	4630      	mov	r0, r6
 8007708:	f7fe fc12 	bl	8005f30 <__swsetup_r>
 800770c:	b170      	cbz	r0, 800772c <_vfiprintf_r+0x5c>
 800770e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007710:	07dc      	lsls	r4, r3, #31
 8007712:	d504      	bpl.n	800771e <_vfiprintf_r+0x4e>
 8007714:	f04f 30ff 	mov.w	r0, #4294967295
 8007718:	b01d      	add	sp, #116	@ 0x74
 800771a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800771e:	89ab      	ldrh	r3, [r5, #12]
 8007720:	0598      	lsls	r0, r3, #22
 8007722:	d4f7      	bmi.n	8007714 <_vfiprintf_r+0x44>
 8007724:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007726:	f7fe fcd7 	bl	80060d8 <__retarget_lock_release_recursive>
 800772a:	e7f3      	b.n	8007714 <_vfiprintf_r+0x44>
 800772c:	2300      	movs	r3, #0
 800772e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007730:	2320      	movs	r3, #32
 8007732:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007736:	f8cd 800c 	str.w	r8, [sp, #12]
 800773a:	2330      	movs	r3, #48	@ 0x30
 800773c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80078ec <_vfiprintf_r+0x21c>
 8007740:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007744:	f04f 0901 	mov.w	r9, #1
 8007748:	4623      	mov	r3, r4
 800774a:	469a      	mov	sl, r3
 800774c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007750:	b10a      	cbz	r2, 8007756 <_vfiprintf_r+0x86>
 8007752:	2a25      	cmp	r2, #37	@ 0x25
 8007754:	d1f9      	bne.n	800774a <_vfiprintf_r+0x7a>
 8007756:	ebba 0b04 	subs.w	fp, sl, r4
 800775a:	d00b      	beq.n	8007774 <_vfiprintf_r+0xa4>
 800775c:	465b      	mov	r3, fp
 800775e:	4622      	mov	r2, r4
 8007760:	4629      	mov	r1, r5
 8007762:	4630      	mov	r0, r6
 8007764:	f7ff ffa1 	bl	80076aa <__sfputs_r>
 8007768:	3001      	adds	r0, #1
 800776a:	f000 80a7 	beq.w	80078bc <_vfiprintf_r+0x1ec>
 800776e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007770:	445a      	add	r2, fp
 8007772:	9209      	str	r2, [sp, #36]	@ 0x24
 8007774:	f89a 3000 	ldrb.w	r3, [sl]
 8007778:	2b00      	cmp	r3, #0
 800777a:	f000 809f 	beq.w	80078bc <_vfiprintf_r+0x1ec>
 800777e:	2300      	movs	r3, #0
 8007780:	f04f 32ff 	mov.w	r2, #4294967295
 8007784:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007788:	f10a 0a01 	add.w	sl, sl, #1
 800778c:	9304      	str	r3, [sp, #16]
 800778e:	9307      	str	r3, [sp, #28]
 8007790:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007794:	931a      	str	r3, [sp, #104]	@ 0x68
 8007796:	4654      	mov	r4, sl
 8007798:	2205      	movs	r2, #5
 800779a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800779e:	4853      	ldr	r0, [pc, #332]	@ (80078ec <_vfiprintf_r+0x21c>)
 80077a0:	f7f8 fd16 	bl	80001d0 <memchr>
 80077a4:	9a04      	ldr	r2, [sp, #16]
 80077a6:	b9d8      	cbnz	r0, 80077e0 <_vfiprintf_r+0x110>
 80077a8:	06d1      	lsls	r1, r2, #27
 80077aa:	bf44      	itt	mi
 80077ac:	2320      	movmi	r3, #32
 80077ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077b2:	0713      	lsls	r3, r2, #28
 80077b4:	bf44      	itt	mi
 80077b6:	232b      	movmi	r3, #43	@ 0x2b
 80077b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077bc:	f89a 3000 	ldrb.w	r3, [sl]
 80077c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80077c2:	d015      	beq.n	80077f0 <_vfiprintf_r+0x120>
 80077c4:	9a07      	ldr	r2, [sp, #28]
 80077c6:	4654      	mov	r4, sl
 80077c8:	2000      	movs	r0, #0
 80077ca:	f04f 0c0a 	mov.w	ip, #10
 80077ce:	4621      	mov	r1, r4
 80077d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077d4:	3b30      	subs	r3, #48	@ 0x30
 80077d6:	2b09      	cmp	r3, #9
 80077d8:	d94b      	bls.n	8007872 <_vfiprintf_r+0x1a2>
 80077da:	b1b0      	cbz	r0, 800780a <_vfiprintf_r+0x13a>
 80077dc:	9207      	str	r2, [sp, #28]
 80077de:	e014      	b.n	800780a <_vfiprintf_r+0x13a>
 80077e0:	eba0 0308 	sub.w	r3, r0, r8
 80077e4:	fa09 f303 	lsl.w	r3, r9, r3
 80077e8:	4313      	orrs	r3, r2
 80077ea:	9304      	str	r3, [sp, #16]
 80077ec:	46a2      	mov	sl, r4
 80077ee:	e7d2      	b.n	8007796 <_vfiprintf_r+0xc6>
 80077f0:	9b03      	ldr	r3, [sp, #12]
 80077f2:	1d19      	adds	r1, r3, #4
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	9103      	str	r1, [sp, #12]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	bfbb      	ittet	lt
 80077fc:	425b      	neglt	r3, r3
 80077fe:	f042 0202 	orrlt.w	r2, r2, #2
 8007802:	9307      	strge	r3, [sp, #28]
 8007804:	9307      	strlt	r3, [sp, #28]
 8007806:	bfb8      	it	lt
 8007808:	9204      	strlt	r2, [sp, #16]
 800780a:	7823      	ldrb	r3, [r4, #0]
 800780c:	2b2e      	cmp	r3, #46	@ 0x2e
 800780e:	d10a      	bne.n	8007826 <_vfiprintf_r+0x156>
 8007810:	7863      	ldrb	r3, [r4, #1]
 8007812:	2b2a      	cmp	r3, #42	@ 0x2a
 8007814:	d132      	bne.n	800787c <_vfiprintf_r+0x1ac>
 8007816:	9b03      	ldr	r3, [sp, #12]
 8007818:	1d1a      	adds	r2, r3, #4
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	9203      	str	r2, [sp, #12]
 800781e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007822:	3402      	adds	r4, #2
 8007824:	9305      	str	r3, [sp, #20]
 8007826:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80078fc <_vfiprintf_r+0x22c>
 800782a:	7821      	ldrb	r1, [r4, #0]
 800782c:	2203      	movs	r2, #3
 800782e:	4650      	mov	r0, sl
 8007830:	f7f8 fcce 	bl	80001d0 <memchr>
 8007834:	b138      	cbz	r0, 8007846 <_vfiprintf_r+0x176>
 8007836:	9b04      	ldr	r3, [sp, #16]
 8007838:	eba0 000a 	sub.w	r0, r0, sl
 800783c:	2240      	movs	r2, #64	@ 0x40
 800783e:	4082      	lsls	r2, r0
 8007840:	4313      	orrs	r3, r2
 8007842:	3401      	adds	r4, #1
 8007844:	9304      	str	r3, [sp, #16]
 8007846:	f814 1b01 	ldrb.w	r1, [r4], #1
 800784a:	4829      	ldr	r0, [pc, #164]	@ (80078f0 <_vfiprintf_r+0x220>)
 800784c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007850:	2206      	movs	r2, #6
 8007852:	f7f8 fcbd 	bl	80001d0 <memchr>
 8007856:	2800      	cmp	r0, #0
 8007858:	d03f      	beq.n	80078da <_vfiprintf_r+0x20a>
 800785a:	4b26      	ldr	r3, [pc, #152]	@ (80078f4 <_vfiprintf_r+0x224>)
 800785c:	bb1b      	cbnz	r3, 80078a6 <_vfiprintf_r+0x1d6>
 800785e:	9b03      	ldr	r3, [sp, #12]
 8007860:	3307      	adds	r3, #7
 8007862:	f023 0307 	bic.w	r3, r3, #7
 8007866:	3308      	adds	r3, #8
 8007868:	9303      	str	r3, [sp, #12]
 800786a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800786c:	443b      	add	r3, r7
 800786e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007870:	e76a      	b.n	8007748 <_vfiprintf_r+0x78>
 8007872:	fb0c 3202 	mla	r2, ip, r2, r3
 8007876:	460c      	mov	r4, r1
 8007878:	2001      	movs	r0, #1
 800787a:	e7a8      	b.n	80077ce <_vfiprintf_r+0xfe>
 800787c:	2300      	movs	r3, #0
 800787e:	3401      	adds	r4, #1
 8007880:	9305      	str	r3, [sp, #20]
 8007882:	4619      	mov	r1, r3
 8007884:	f04f 0c0a 	mov.w	ip, #10
 8007888:	4620      	mov	r0, r4
 800788a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800788e:	3a30      	subs	r2, #48	@ 0x30
 8007890:	2a09      	cmp	r2, #9
 8007892:	d903      	bls.n	800789c <_vfiprintf_r+0x1cc>
 8007894:	2b00      	cmp	r3, #0
 8007896:	d0c6      	beq.n	8007826 <_vfiprintf_r+0x156>
 8007898:	9105      	str	r1, [sp, #20]
 800789a:	e7c4      	b.n	8007826 <_vfiprintf_r+0x156>
 800789c:	fb0c 2101 	mla	r1, ip, r1, r2
 80078a0:	4604      	mov	r4, r0
 80078a2:	2301      	movs	r3, #1
 80078a4:	e7f0      	b.n	8007888 <_vfiprintf_r+0x1b8>
 80078a6:	ab03      	add	r3, sp, #12
 80078a8:	9300      	str	r3, [sp, #0]
 80078aa:	462a      	mov	r2, r5
 80078ac:	4b12      	ldr	r3, [pc, #72]	@ (80078f8 <_vfiprintf_r+0x228>)
 80078ae:	a904      	add	r1, sp, #16
 80078b0:	4630      	mov	r0, r6
 80078b2:	f7fd fdd1 	bl	8005458 <_printf_float>
 80078b6:	4607      	mov	r7, r0
 80078b8:	1c78      	adds	r0, r7, #1
 80078ba:	d1d6      	bne.n	800786a <_vfiprintf_r+0x19a>
 80078bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078be:	07d9      	lsls	r1, r3, #31
 80078c0:	d405      	bmi.n	80078ce <_vfiprintf_r+0x1fe>
 80078c2:	89ab      	ldrh	r3, [r5, #12]
 80078c4:	059a      	lsls	r2, r3, #22
 80078c6:	d402      	bmi.n	80078ce <_vfiprintf_r+0x1fe>
 80078c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078ca:	f7fe fc05 	bl	80060d8 <__retarget_lock_release_recursive>
 80078ce:	89ab      	ldrh	r3, [r5, #12]
 80078d0:	065b      	lsls	r3, r3, #25
 80078d2:	f53f af1f 	bmi.w	8007714 <_vfiprintf_r+0x44>
 80078d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078d8:	e71e      	b.n	8007718 <_vfiprintf_r+0x48>
 80078da:	ab03      	add	r3, sp, #12
 80078dc:	9300      	str	r3, [sp, #0]
 80078de:	462a      	mov	r2, r5
 80078e0:	4b05      	ldr	r3, [pc, #20]	@ (80078f8 <_vfiprintf_r+0x228>)
 80078e2:	a904      	add	r1, sp, #16
 80078e4:	4630      	mov	r0, r6
 80078e6:	f7fe f84f 	bl	8005988 <_printf_i>
 80078ea:	e7e4      	b.n	80078b6 <_vfiprintf_r+0x1e6>
 80078ec:	08008148 	.word	0x08008148
 80078f0:	08008152 	.word	0x08008152
 80078f4:	08005459 	.word	0x08005459
 80078f8:	080076ab 	.word	0x080076ab
 80078fc:	0800814e 	.word	0x0800814e

08007900 <__sflush_r>:
 8007900:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007908:	0716      	lsls	r6, r2, #28
 800790a:	4605      	mov	r5, r0
 800790c:	460c      	mov	r4, r1
 800790e:	d454      	bmi.n	80079ba <__sflush_r+0xba>
 8007910:	684b      	ldr	r3, [r1, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	dc02      	bgt.n	800791c <__sflush_r+0x1c>
 8007916:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007918:	2b00      	cmp	r3, #0
 800791a:	dd48      	ble.n	80079ae <__sflush_r+0xae>
 800791c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800791e:	2e00      	cmp	r6, #0
 8007920:	d045      	beq.n	80079ae <__sflush_r+0xae>
 8007922:	2300      	movs	r3, #0
 8007924:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007928:	682f      	ldr	r7, [r5, #0]
 800792a:	6a21      	ldr	r1, [r4, #32]
 800792c:	602b      	str	r3, [r5, #0]
 800792e:	d030      	beq.n	8007992 <__sflush_r+0x92>
 8007930:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007932:	89a3      	ldrh	r3, [r4, #12]
 8007934:	0759      	lsls	r1, r3, #29
 8007936:	d505      	bpl.n	8007944 <__sflush_r+0x44>
 8007938:	6863      	ldr	r3, [r4, #4]
 800793a:	1ad2      	subs	r2, r2, r3
 800793c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800793e:	b10b      	cbz	r3, 8007944 <__sflush_r+0x44>
 8007940:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007942:	1ad2      	subs	r2, r2, r3
 8007944:	2300      	movs	r3, #0
 8007946:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007948:	6a21      	ldr	r1, [r4, #32]
 800794a:	4628      	mov	r0, r5
 800794c:	47b0      	blx	r6
 800794e:	1c43      	adds	r3, r0, #1
 8007950:	89a3      	ldrh	r3, [r4, #12]
 8007952:	d106      	bne.n	8007962 <__sflush_r+0x62>
 8007954:	6829      	ldr	r1, [r5, #0]
 8007956:	291d      	cmp	r1, #29
 8007958:	d82b      	bhi.n	80079b2 <__sflush_r+0xb2>
 800795a:	4a2a      	ldr	r2, [pc, #168]	@ (8007a04 <__sflush_r+0x104>)
 800795c:	410a      	asrs	r2, r1
 800795e:	07d6      	lsls	r6, r2, #31
 8007960:	d427      	bmi.n	80079b2 <__sflush_r+0xb2>
 8007962:	2200      	movs	r2, #0
 8007964:	6062      	str	r2, [r4, #4]
 8007966:	04d9      	lsls	r1, r3, #19
 8007968:	6922      	ldr	r2, [r4, #16]
 800796a:	6022      	str	r2, [r4, #0]
 800796c:	d504      	bpl.n	8007978 <__sflush_r+0x78>
 800796e:	1c42      	adds	r2, r0, #1
 8007970:	d101      	bne.n	8007976 <__sflush_r+0x76>
 8007972:	682b      	ldr	r3, [r5, #0]
 8007974:	b903      	cbnz	r3, 8007978 <__sflush_r+0x78>
 8007976:	6560      	str	r0, [r4, #84]	@ 0x54
 8007978:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800797a:	602f      	str	r7, [r5, #0]
 800797c:	b1b9      	cbz	r1, 80079ae <__sflush_r+0xae>
 800797e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007982:	4299      	cmp	r1, r3
 8007984:	d002      	beq.n	800798c <__sflush_r+0x8c>
 8007986:	4628      	mov	r0, r5
 8007988:	f7ff f9f6 	bl	8006d78 <_free_r>
 800798c:	2300      	movs	r3, #0
 800798e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007990:	e00d      	b.n	80079ae <__sflush_r+0xae>
 8007992:	2301      	movs	r3, #1
 8007994:	4628      	mov	r0, r5
 8007996:	47b0      	blx	r6
 8007998:	4602      	mov	r2, r0
 800799a:	1c50      	adds	r0, r2, #1
 800799c:	d1c9      	bne.n	8007932 <__sflush_r+0x32>
 800799e:	682b      	ldr	r3, [r5, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d0c6      	beq.n	8007932 <__sflush_r+0x32>
 80079a4:	2b1d      	cmp	r3, #29
 80079a6:	d001      	beq.n	80079ac <__sflush_r+0xac>
 80079a8:	2b16      	cmp	r3, #22
 80079aa:	d11e      	bne.n	80079ea <__sflush_r+0xea>
 80079ac:	602f      	str	r7, [r5, #0]
 80079ae:	2000      	movs	r0, #0
 80079b0:	e022      	b.n	80079f8 <__sflush_r+0xf8>
 80079b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079b6:	b21b      	sxth	r3, r3
 80079b8:	e01b      	b.n	80079f2 <__sflush_r+0xf2>
 80079ba:	690f      	ldr	r7, [r1, #16]
 80079bc:	2f00      	cmp	r7, #0
 80079be:	d0f6      	beq.n	80079ae <__sflush_r+0xae>
 80079c0:	0793      	lsls	r3, r2, #30
 80079c2:	680e      	ldr	r6, [r1, #0]
 80079c4:	bf08      	it	eq
 80079c6:	694b      	ldreq	r3, [r1, #20]
 80079c8:	600f      	str	r7, [r1, #0]
 80079ca:	bf18      	it	ne
 80079cc:	2300      	movne	r3, #0
 80079ce:	eba6 0807 	sub.w	r8, r6, r7
 80079d2:	608b      	str	r3, [r1, #8]
 80079d4:	f1b8 0f00 	cmp.w	r8, #0
 80079d8:	dde9      	ble.n	80079ae <__sflush_r+0xae>
 80079da:	6a21      	ldr	r1, [r4, #32]
 80079dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80079de:	4643      	mov	r3, r8
 80079e0:	463a      	mov	r2, r7
 80079e2:	4628      	mov	r0, r5
 80079e4:	47b0      	blx	r6
 80079e6:	2800      	cmp	r0, #0
 80079e8:	dc08      	bgt.n	80079fc <__sflush_r+0xfc>
 80079ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079f2:	81a3      	strh	r3, [r4, #12]
 80079f4:	f04f 30ff 	mov.w	r0, #4294967295
 80079f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079fc:	4407      	add	r7, r0
 80079fe:	eba8 0800 	sub.w	r8, r8, r0
 8007a02:	e7e7      	b.n	80079d4 <__sflush_r+0xd4>
 8007a04:	dfbffffe 	.word	0xdfbffffe

08007a08 <_fflush_r>:
 8007a08:	b538      	push	{r3, r4, r5, lr}
 8007a0a:	690b      	ldr	r3, [r1, #16]
 8007a0c:	4605      	mov	r5, r0
 8007a0e:	460c      	mov	r4, r1
 8007a10:	b913      	cbnz	r3, 8007a18 <_fflush_r+0x10>
 8007a12:	2500      	movs	r5, #0
 8007a14:	4628      	mov	r0, r5
 8007a16:	bd38      	pop	{r3, r4, r5, pc}
 8007a18:	b118      	cbz	r0, 8007a22 <_fflush_r+0x1a>
 8007a1a:	6a03      	ldr	r3, [r0, #32]
 8007a1c:	b90b      	cbnz	r3, 8007a22 <_fflush_r+0x1a>
 8007a1e:	f7fe f95f 	bl	8005ce0 <__sinit>
 8007a22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d0f3      	beq.n	8007a12 <_fflush_r+0xa>
 8007a2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007a2c:	07d0      	lsls	r0, r2, #31
 8007a2e:	d404      	bmi.n	8007a3a <_fflush_r+0x32>
 8007a30:	0599      	lsls	r1, r3, #22
 8007a32:	d402      	bmi.n	8007a3a <_fflush_r+0x32>
 8007a34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a36:	f7fe fb4e 	bl	80060d6 <__retarget_lock_acquire_recursive>
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	4621      	mov	r1, r4
 8007a3e:	f7ff ff5f 	bl	8007900 <__sflush_r>
 8007a42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a44:	07da      	lsls	r2, r3, #31
 8007a46:	4605      	mov	r5, r0
 8007a48:	d4e4      	bmi.n	8007a14 <_fflush_r+0xc>
 8007a4a:	89a3      	ldrh	r3, [r4, #12]
 8007a4c:	059b      	lsls	r3, r3, #22
 8007a4e:	d4e1      	bmi.n	8007a14 <_fflush_r+0xc>
 8007a50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a52:	f7fe fb41 	bl	80060d8 <__retarget_lock_release_recursive>
 8007a56:	e7dd      	b.n	8007a14 <_fflush_r+0xc>

08007a58 <__swhatbuf_r>:
 8007a58:	b570      	push	{r4, r5, r6, lr}
 8007a5a:	460c      	mov	r4, r1
 8007a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a60:	2900      	cmp	r1, #0
 8007a62:	b096      	sub	sp, #88	@ 0x58
 8007a64:	4615      	mov	r5, r2
 8007a66:	461e      	mov	r6, r3
 8007a68:	da0d      	bge.n	8007a86 <__swhatbuf_r+0x2e>
 8007a6a:	89a3      	ldrh	r3, [r4, #12]
 8007a6c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007a70:	f04f 0100 	mov.w	r1, #0
 8007a74:	bf14      	ite	ne
 8007a76:	2340      	movne	r3, #64	@ 0x40
 8007a78:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	6031      	str	r1, [r6, #0]
 8007a80:	602b      	str	r3, [r5, #0]
 8007a82:	b016      	add	sp, #88	@ 0x58
 8007a84:	bd70      	pop	{r4, r5, r6, pc}
 8007a86:	466a      	mov	r2, sp
 8007a88:	f000 f848 	bl	8007b1c <_fstat_r>
 8007a8c:	2800      	cmp	r0, #0
 8007a8e:	dbec      	blt.n	8007a6a <__swhatbuf_r+0x12>
 8007a90:	9901      	ldr	r1, [sp, #4]
 8007a92:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007a96:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007a9a:	4259      	negs	r1, r3
 8007a9c:	4159      	adcs	r1, r3
 8007a9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007aa2:	e7eb      	b.n	8007a7c <__swhatbuf_r+0x24>

08007aa4 <__smakebuf_r>:
 8007aa4:	898b      	ldrh	r3, [r1, #12]
 8007aa6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007aa8:	079d      	lsls	r5, r3, #30
 8007aaa:	4606      	mov	r6, r0
 8007aac:	460c      	mov	r4, r1
 8007aae:	d507      	bpl.n	8007ac0 <__smakebuf_r+0x1c>
 8007ab0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007ab4:	6023      	str	r3, [r4, #0]
 8007ab6:	6123      	str	r3, [r4, #16]
 8007ab8:	2301      	movs	r3, #1
 8007aba:	6163      	str	r3, [r4, #20]
 8007abc:	b003      	add	sp, #12
 8007abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ac0:	ab01      	add	r3, sp, #4
 8007ac2:	466a      	mov	r2, sp
 8007ac4:	f7ff ffc8 	bl	8007a58 <__swhatbuf_r>
 8007ac8:	9f00      	ldr	r7, [sp, #0]
 8007aca:	4605      	mov	r5, r0
 8007acc:	4639      	mov	r1, r7
 8007ace:	4630      	mov	r0, r6
 8007ad0:	f7ff f9c6 	bl	8006e60 <_malloc_r>
 8007ad4:	b948      	cbnz	r0, 8007aea <__smakebuf_r+0x46>
 8007ad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ada:	059a      	lsls	r2, r3, #22
 8007adc:	d4ee      	bmi.n	8007abc <__smakebuf_r+0x18>
 8007ade:	f023 0303 	bic.w	r3, r3, #3
 8007ae2:	f043 0302 	orr.w	r3, r3, #2
 8007ae6:	81a3      	strh	r3, [r4, #12]
 8007ae8:	e7e2      	b.n	8007ab0 <__smakebuf_r+0xc>
 8007aea:	89a3      	ldrh	r3, [r4, #12]
 8007aec:	6020      	str	r0, [r4, #0]
 8007aee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007af2:	81a3      	strh	r3, [r4, #12]
 8007af4:	9b01      	ldr	r3, [sp, #4]
 8007af6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007afa:	b15b      	cbz	r3, 8007b14 <__smakebuf_r+0x70>
 8007afc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b00:	4630      	mov	r0, r6
 8007b02:	f000 f81d 	bl	8007b40 <_isatty_r>
 8007b06:	b128      	cbz	r0, 8007b14 <__smakebuf_r+0x70>
 8007b08:	89a3      	ldrh	r3, [r4, #12]
 8007b0a:	f023 0303 	bic.w	r3, r3, #3
 8007b0e:	f043 0301 	orr.w	r3, r3, #1
 8007b12:	81a3      	strh	r3, [r4, #12]
 8007b14:	89a3      	ldrh	r3, [r4, #12]
 8007b16:	431d      	orrs	r5, r3
 8007b18:	81a5      	strh	r5, [r4, #12]
 8007b1a:	e7cf      	b.n	8007abc <__smakebuf_r+0x18>

08007b1c <_fstat_r>:
 8007b1c:	b538      	push	{r3, r4, r5, lr}
 8007b1e:	4d07      	ldr	r5, [pc, #28]	@ (8007b3c <_fstat_r+0x20>)
 8007b20:	2300      	movs	r3, #0
 8007b22:	4604      	mov	r4, r0
 8007b24:	4608      	mov	r0, r1
 8007b26:	4611      	mov	r1, r2
 8007b28:	602b      	str	r3, [r5, #0]
 8007b2a:	f7fb f8f7 	bl	8002d1c <_fstat>
 8007b2e:	1c43      	adds	r3, r0, #1
 8007b30:	d102      	bne.n	8007b38 <_fstat_r+0x1c>
 8007b32:	682b      	ldr	r3, [r5, #0]
 8007b34:	b103      	cbz	r3, 8007b38 <_fstat_r+0x1c>
 8007b36:	6023      	str	r3, [r4, #0]
 8007b38:	bd38      	pop	{r3, r4, r5, pc}
 8007b3a:	bf00      	nop
 8007b3c:	20000420 	.word	0x20000420

08007b40 <_isatty_r>:
 8007b40:	b538      	push	{r3, r4, r5, lr}
 8007b42:	4d06      	ldr	r5, [pc, #24]	@ (8007b5c <_isatty_r+0x1c>)
 8007b44:	2300      	movs	r3, #0
 8007b46:	4604      	mov	r4, r0
 8007b48:	4608      	mov	r0, r1
 8007b4a:	602b      	str	r3, [r5, #0]
 8007b4c:	f7fb f8f6 	bl	8002d3c <_isatty>
 8007b50:	1c43      	adds	r3, r0, #1
 8007b52:	d102      	bne.n	8007b5a <_isatty_r+0x1a>
 8007b54:	682b      	ldr	r3, [r5, #0]
 8007b56:	b103      	cbz	r3, 8007b5a <_isatty_r+0x1a>
 8007b58:	6023      	str	r3, [r4, #0]
 8007b5a:	bd38      	pop	{r3, r4, r5, pc}
 8007b5c:	20000420 	.word	0x20000420

08007b60 <_sbrk_r>:
 8007b60:	b538      	push	{r3, r4, r5, lr}
 8007b62:	4d06      	ldr	r5, [pc, #24]	@ (8007b7c <_sbrk_r+0x1c>)
 8007b64:	2300      	movs	r3, #0
 8007b66:	4604      	mov	r4, r0
 8007b68:	4608      	mov	r0, r1
 8007b6a:	602b      	str	r3, [r5, #0]
 8007b6c:	f7fb f8fe 	bl	8002d6c <_sbrk>
 8007b70:	1c43      	adds	r3, r0, #1
 8007b72:	d102      	bne.n	8007b7a <_sbrk_r+0x1a>
 8007b74:	682b      	ldr	r3, [r5, #0]
 8007b76:	b103      	cbz	r3, 8007b7a <_sbrk_r+0x1a>
 8007b78:	6023      	str	r3, [r4, #0]
 8007b7a:	bd38      	pop	{r3, r4, r5, pc}
 8007b7c:	20000420 	.word	0x20000420

08007b80 <memcpy>:
 8007b80:	440a      	add	r2, r1
 8007b82:	4291      	cmp	r1, r2
 8007b84:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b88:	d100      	bne.n	8007b8c <memcpy+0xc>
 8007b8a:	4770      	bx	lr
 8007b8c:	b510      	push	{r4, lr}
 8007b8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b96:	4291      	cmp	r1, r2
 8007b98:	d1f9      	bne.n	8007b8e <memcpy+0xe>
 8007b9a:	bd10      	pop	{r4, pc}

08007b9c <__assert_func>:
 8007b9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b9e:	4614      	mov	r4, r2
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	4b09      	ldr	r3, [pc, #36]	@ (8007bc8 <__assert_func+0x2c>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4605      	mov	r5, r0
 8007ba8:	68d8      	ldr	r0, [r3, #12]
 8007baa:	b954      	cbnz	r4, 8007bc2 <__assert_func+0x26>
 8007bac:	4b07      	ldr	r3, [pc, #28]	@ (8007bcc <__assert_func+0x30>)
 8007bae:	461c      	mov	r4, r3
 8007bb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007bb4:	9100      	str	r1, [sp, #0]
 8007bb6:	462b      	mov	r3, r5
 8007bb8:	4905      	ldr	r1, [pc, #20]	@ (8007bd0 <__assert_func+0x34>)
 8007bba:	f000 f841 	bl	8007c40 <fiprintf>
 8007bbe:	f000 f851 	bl	8007c64 <abort>
 8007bc2:	4b04      	ldr	r3, [pc, #16]	@ (8007bd4 <__assert_func+0x38>)
 8007bc4:	e7f4      	b.n	8007bb0 <__assert_func+0x14>
 8007bc6:	bf00      	nop
 8007bc8:	20000018 	.word	0x20000018
 8007bcc:	0800819e 	.word	0x0800819e
 8007bd0:	08008170 	.word	0x08008170
 8007bd4:	08008163 	.word	0x08008163

08007bd8 <_calloc_r>:
 8007bd8:	b570      	push	{r4, r5, r6, lr}
 8007bda:	fba1 5402 	umull	r5, r4, r1, r2
 8007bde:	b93c      	cbnz	r4, 8007bf0 <_calloc_r+0x18>
 8007be0:	4629      	mov	r1, r5
 8007be2:	f7ff f93d 	bl	8006e60 <_malloc_r>
 8007be6:	4606      	mov	r6, r0
 8007be8:	b928      	cbnz	r0, 8007bf6 <_calloc_r+0x1e>
 8007bea:	2600      	movs	r6, #0
 8007bec:	4630      	mov	r0, r6
 8007bee:	bd70      	pop	{r4, r5, r6, pc}
 8007bf0:	220c      	movs	r2, #12
 8007bf2:	6002      	str	r2, [r0, #0]
 8007bf4:	e7f9      	b.n	8007bea <_calloc_r+0x12>
 8007bf6:	462a      	mov	r2, r5
 8007bf8:	4621      	mov	r1, r4
 8007bfa:	f7fe f9ef 	bl	8005fdc <memset>
 8007bfe:	e7f5      	b.n	8007bec <_calloc_r+0x14>

08007c00 <__ascii_mbtowc>:
 8007c00:	b082      	sub	sp, #8
 8007c02:	b901      	cbnz	r1, 8007c06 <__ascii_mbtowc+0x6>
 8007c04:	a901      	add	r1, sp, #4
 8007c06:	b142      	cbz	r2, 8007c1a <__ascii_mbtowc+0x1a>
 8007c08:	b14b      	cbz	r3, 8007c1e <__ascii_mbtowc+0x1e>
 8007c0a:	7813      	ldrb	r3, [r2, #0]
 8007c0c:	600b      	str	r3, [r1, #0]
 8007c0e:	7812      	ldrb	r2, [r2, #0]
 8007c10:	1e10      	subs	r0, r2, #0
 8007c12:	bf18      	it	ne
 8007c14:	2001      	movne	r0, #1
 8007c16:	b002      	add	sp, #8
 8007c18:	4770      	bx	lr
 8007c1a:	4610      	mov	r0, r2
 8007c1c:	e7fb      	b.n	8007c16 <__ascii_mbtowc+0x16>
 8007c1e:	f06f 0001 	mvn.w	r0, #1
 8007c22:	e7f8      	b.n	8007c16 <__ascii_mbtowc+0x16>

08007c24 <__ascii_wctomb>:
 8007c24:	4603      	mov	r3, r0
 8007c26:	4608      	mov	r0, r1
 8007c28:	b141      	cbz	r1, 8007c3c <__ascii_wctomb+0x18>
 8007c2a:	2aff      	cmp	r2, #255	@ 0xff
 8007c2c:	d904      	bls.n	8007c38 <__ascii_wctomb+0x14>
 8007c2e:	228a      	movs	r2, #138	@ 0x8a
 8007c30:	601a      	str	r2, [r3, #0]
 8007c32:	f04f 30ff 	mov.w	r0, #4294967295
 8007c36:	4770      	bx	lr
 8007c38:	700a      	strb	r2, [r1, #0]
 8007c3a:	2001      	movs	r0, #1
 8007c3c:	4770      	bx	lr
	...

08007c40 <fiprintf>:
 8007c40:	b40e      	push	{r1, r2, r3}
 8007c42:	b503      	push	{r0, r1, lr}
 8007c44:	4601      	mov	r1, r0
 8007c46:	ab03      	add	r3, sp, #12
 8007c48:	4805      	ldr	r0, [pc, #20]	@ (8007c60 <fiprintf+0x20>)
 8007c4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c4e:	6800      	ldr	r0, [r0, #0]
 8007c50:	9301      	str	r3, [sp, #4]
 8007c52:	f7ff fd3d 	bl	80076d0 <_vfiprintf_r>
 8007c56:	b002      	add	sp, #8
 8007c58:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c5c:	b003      	add	sp, #12
 8007c5e:	4770      	bx	lr
 8007c60:	20000018 	.word	0x20000018

08007c64 <abort>:
 8007c64:	b508      	push	{r3, lr}
 8007c66:	2006      	movs	r0, #6
 8007c68:	f000 f82c 	bl	8007cc4 <raise>
 8007c6c:	2001      	movs	r0, #1
 8007c6e:	f7fb f821 	bl	8002cb4 <_exit>

08007c72 <_raise_r>:
 8007c72:	291f      	cmp	r1, #31
 8007c74:	b538      	push	{r3, r4, r5, lr}
 8007c76:	4605      	mov	r5, r0
 8007c78:	460c      	mov	r4, r1
 8007c7a:	d904      	bls.n	8007c86 <_raise_r+0x14>
 8007c7c:	2316      	movs	r3, #22
 8007c7e:	6003      	str	r3, [r0, #0]
 8007c80:	f04f 30ff 	mov.w	r0, #4294967295
 8007c84:	bd38      	pop	{r3, r4, r5, pc}
 8007c86:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007c88:	b112      	cbz	r2, 8007c90 <_raise_r+0x1e>
 8007c8a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c8e:	b94b      	cbnz	r3, 8007ca4 <_raise_r+0x32>
 8007c90:	4628      	mov	r0, r5
 8007c92:	f000 f831 	bl	8007cf8 <_getpid_r>
 8007c96:	4622      	mov	r2, r4
 8007c98:	4601      	mov	r1, r0
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ca0:	f000 b818 	b.w	8007cd4 <_kill_r>
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d00a      	beq.n	8007cbe <_raise_r+0x4c>
 8007ca8:	1c59      	adds	r1, r3, #1
 8007caa:	d103      	bne.n	8007cb4 <_raise_r+0x42>
 8007cac:	2316      	movs	r3, #22
 8007cae:	6003      	str	r3, [r0, #0]
 8007cb0:	2001      	movs	r0, #1
 8007cb2:	e7e7      	b.n	8007c84 <_raise_r+0x12>
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007cba:	4620      	mov	r0, r4
 8007cbc:	4798      	blx	r3
 8007cbe:	2000      	movs	r0, #0
 8007cc0:	e7e0      	b.n	8007c84 <_raise_r+0x12>
	...

08007cc4 <raise>:
 8007cc4:	4b02      	ldr	r3, [pc, #8]	@ (8007cd0 <raise+0xc>)
 8007cc6:	4601      	mov	r1, r0
 8007cc8:	6818      	ldr	r0, [r3, #0]
 8007cca:	f7ff bfd2 	b.w	8007c72 <_raise_r>
 8007cce:	bf00      	nop
 8007cd0:	20000018 	.word	0x20000018

08007cd4 <_kill_r>:
 8007cd4:	b538      	push	{r3, r4, r5, lr}
 8007cd6:	4d07      	ldr	r5, [pc, #28]	@ (8007cf4 <_kill_r+0x20>)
 8007cd8:	2300      	movs	r3, #0
 8007cda:	4604      	mov	r4, r0
 8007cdc:	4608      	mov	r0, r1
 8007cde:	4611      	mov	r1, r2
 8007ce0:	602b      	str	r3, [r5, #0]
 8007ce2:	f7fa ffd7 	bl	8002c94 <_kill>
 8007ce6:	1c43      	adds	r3, r0, #1
 8007ce8:	d102      	bne.n	8007cf0 <_kill_r+0x1c>
 8007cea:	682b      	ldr	r3, [r5, #0]
 8007cec:	b103      	cbz	r3, 8007cf0 <_kill_r+0x1c>
 8007cee:	6023      	str	r3, [r4, #0]
 8007cf0:	bd38      	pop	{r3, r4, r5, pc}
 8007cf2:	bf00      	nop
 8007cf4:	20000420 	.word	0x20000420

08007cf8 <_getpid_r>:
 8007cf8:	f7fa bfc4 	b.w	8002c84 <_getpid>

08007cfc <_init>:
 8007cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfe:	bf00      	nop
 8007d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d02:	bc08      	pop	{r3}
 8007d04:	469e      	mov	lr, r3
 8007d06:	4770      	bx	lr

08007d08 <_fini>:
 8007d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d0a:	bf00      	nop
 8007d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d0e:	bc08      	pop	{r3}
 8007d10:	469e      	mov	lr, r3
 8007d12:	4770      	bx	lr
